/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmContainerregistry = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ImportMode.
     * Possible values include: 'NoForce', 'Force'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ImportMode = <ImportMode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ImportMode;
    (function (ImportMode) {
        ImportMode["NoForce"] = "NoForce";
        ImportMode["Force"] = "Force";
    })(ImportMode || (ImportMode = {}));
    /**
     * Defines values for SkuName.
     * Possible values include: 'Classic', 'Basic', 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Classic"] = "Classic";
        SkuName["Basic"] = "Basic";
        SkuName["Standard"] = "Standard";
        SkuName["Premium"] = "Premium";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Classic', 'Basic', 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuTier = <SkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Classic"] = "Classic";
        SkuTier["Basic"] = "Basic";
        SkuTier["Standard"] = "Standard";
        SkuTier["Premium"] = "Premium";
    })(SkuTier || (SkuTier = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
     * 'Failed', 'Canceled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Canceled"] = "Canceled";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for PasswordName.
     * Possible values include: 'password', 'password2'
     * @readonly
     * @enum {string}
     */
    var PasswordName;
    (function (PasswordName) {
        PasswordName["Password"] = "password";
        PasswordName["Password2"] = "password2";
    })(PasswordName || (PasswordName = {}));
    /**
     * Defines values for RegistryUsageUnit.
     * Possible values include: 'Count', 'Bytes'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RegistryUsageUnit =
     * <RegistryUsageUnit>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RegistryUsageUnit;
    (function (RegistryUsageUnit) {
        RegistryUsageUnit["Count"] = "Count";
        RegistryUsageUnit["Bytes"] = "Bytes";
    })(RegistryUsageUnit || (RegistryUsageUnit = {}));
    /**
     * Defines values for PolicyStatus.
     * Possible values include: 'enabled', 'disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PolicyStatus =
     * <PolicyStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PolicyStatus;
    (function (PolicyStatus) {
        PolicyStatus["Enabled"] = "enabled";
        PolicyStatus["Disabled"] = "disabled";
    })(PolicyStatus || (PolicyStatus = {}));
    /**
     * Defines values for TrustPolicyType.
     * Possible values include: 'Notary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TrustPolicyType =
     * <TrustPolicyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TrustPolicyType;
    (function (TrustPolicyType) {
        TrustPolicyType["Notary"] = "Notary";
    })(TrustPolicyType || (TrustPolicyType = {}));
    /**
     * Defines values for WebhookStatus.
     * Possible values include: 'enabled', 'disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WebhookStatus =
     * <WebhookStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WebhookStatus;
    (function (WebhookStatus) {
        WebhookStatus["Enabled"] = "enabled";
        WebhookStatus["Disabled"] = "disabled";
    })(WebhookStatus || (WebhookStatus = {}));
    /**
     * Defines values for WebhookAction.
     * Possible values include: 'push', 'delete', 'quarantine'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WebhookAction =
     * <WebhookAction>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WebhookAction;
    (function (WebhookAction) {
        WebhookAction["Push"] = "push";
        WebhookAction["Delete"] = "delete";
        WebhookAction["Quarantine"] = "quarantine";
    })(WebhookAction || (WebhookAction = {}));
    /**
     * Defines values for RunStatus.
     * Possible values include: 'Queued', 'Started', 'Running', 'Succeeded',
     * 'Failed', 'Canceled', 'Error', 'Timeout'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunStatus = <RunStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunStatus;
    (function (RunStatus) {
        RunStatus["Queued"] = "Queued";
        RunStatus["Started"] = "Started";
        RunStatus["Running"] = "Running";
        RunStatus["Succeeded"] = "Succeeded";
        RunStatus["Failed"] = "Failed";
        RunStatus["Canceled"] = "Canceled";
        RunStatus["Error"] = "Error";
        RunStatus["Timeout"] = "Timeout";
    })(RunStatus || (RunStatus = {}));
    /**
     * Defines values for RunType.
     * Possible values include: 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunType = <RunType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunType;
    (function (RunType) {
        RunType["QuickBuild"] = "QuickBuild";
        RunType["QuickRun"] = "QuickRun";
        RunType["AutoBuild"] = "AutoBuild";
        RunType["AutoRun"] = "AutoRun";
    })(RunType || (RunType = {}));
    /**
     * Defines values for OS.
     * Possible values include: 'Windows', 'Linux'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OS = <OS>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OS;
    (function (OS) {
        OS["Windows"] = "Windows";
        OS["Linux"] = "Linux";
    })(OS || (OS = {}));
    /**
     * Defines values for Architecture.
     * Possible values include: 'amd64', 'x86', 'arm'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Architecture =
     * <Architecture>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Architecture;
    (function (Architecture) {
        Architecture["Amd64"] = "amd64";
        Architecture["X86"] = "x86";
        Architecture["Arm"] = "arm";
    })(Architecture || (Architecture = {}));
    /**
     * Defines values for Variant.
     * Possible values include: 'v6', 'v7', 'v8'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Variant = <Variant>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Variant;
    (function (Variant) {
        Variant["V6"] = "v6";
        Variant["V7"] = "v7";
        Variant["V8"] = "v8";
    })(Variant || (Variant = {}));
    /**
     * Defines values for TaskStatus.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TaskStatus = <TaskStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TaskStatus;
    (function (TaskStatus) {
        TaskStatus["Disabled"] = "Disabled";
        TaskStatus["Enabled"] = "Enabled";
    })(TaskStatus || (TaskStatus = {}));
    /**
     * Defines values for BaseImageDependencyType.
     * Possible values include: 'BuildTime', 'RunTime'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: BaseImageDependencyType =
     * <BaseImageDependencyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var BaseImageDependencyType;
    (function (BaseImageDependencyType) {
        BaseImageDependencyType["BuildTime"] = "BuildTime";
        BaseImageDependencyType["RunTime"] = "RunTime";
    })(BaseImageDependencyType || (BaseImageDependencyType = {}));
    /**
     * Defines values for SourceControlType.
     * Possible values include: 'Github', 'VisualStudioTeamService'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SourceControlType =
     * <SourceControlType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SourceControlType;
    (function (SourceControlType) {
        SourceControlType["Github"] = "Github";
        SourceControlType["VisualStudioTeamService"] = "VisualStudioTeamService";
    })(SourceControlType || (SourceControlType = {}));
    /**
     * Defines values for TokenType.
     * Possible values include: 'PAT', 'OAuth'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TokenType = <TokenType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TokenType;
    (function (TokenType) {
        TokenType["PAT"] = "PAT";
        TokenType["OAuth"] = "OAuth";
    })(TokenType || (TokenType = {}));
    /**
     * Defines values for SourceTriggerEvent.
     * Possible values include: 'commit', 'pullrequest'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SourceTriggerEvent =
     * <SourceTriggerEvent>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SourceTriggerEvent;
    (function (SourceTriggerEvent) {
        SourceTriggerEvent["Commit"] = "commit";
        SourceTriggerEvent["Pullrequest"] = "pullrequest";
    })(SourceTriggerEvent || (SourceTriggerEvent = {}));
    /**
     * Defines values for TriggerStatus.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TriggerStatus =
     * <TriggerStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TriggerStatus;
    (function (TriggerStatus) {
        TriggerStatus["Disabled"] = "Disabled";
        TriggerStatus["Enabled"] = "Enabled";
    })(TriggerStatus || (TriggerStatus = {}));
    /**
     * Defines values for BaseImageTriggerType.
     * Possible values include: 'All', 'Runtime'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: BaseImageTriggerType =
     * <BaseImageTriggerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var BaseImageTriggerType;
    (function (BaseImageTriggerType) {
        BaseImageTriggerType["All"] = "All";
        BaseImageTriggerType["Runtime"] = "Runtime";
    })(BaseImageTriggerType || (BaseImageTriggerType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ImportMode () { return ImportMode; },
        get SkuName () { return SkuName; },
        get SkuTier () { return SkuTier; },
        get ProvisioningState () { return ProvisioningState; },
        get PasswordName () { return PasswordName; },
        get RegistryUsageUnit () { return RegistryUsageUnit; },
        get PolicyStatus () { return PolicyStatus; },
        get TrustPolicyType () { return TrustPolicyType; },
        get WebhookStatus () { return WebhookStatus; },
        get WebhookAction () { return WebhookAction; },
        get RunStatus () { return RunStatus; },
        get RunType () { return RunType; },
        get OS () { return OS; },
        get Architecture () { return Architecture; },
        get Variant () { return Variant; },
        get TaskStatus () { return TaskStatus; },
        get BaseImageDependencyType () { return BaseImageDependencyType; },
        get SourceControlType () { return SourceControlType; },
        get TokenType () { return TokenType; },
        get SourceTriggerEvent () { return SourceTriggerEvent; },
        get TriggerStatus () { return TriggerStatus; },
        get BaseImageTriggerType () { return BaseImageTriggerType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ImportSourceCredentials = {
        serializedName: "ImportSourceCredentials",
        type: {
            name: "Composite",
            className: "ImportSourceCredentials",
            modelProperties: {
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImportSource = {
        serializedName: "ImportSource",
        type: {
            name: "Composite",
            className: "ImportSource",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                registryUri: {
                    serializedName: "registryUri",
                    type: {
                        name: "String"
                    }
                },
                credentials: {
                    serializedName: "credentials",
                    type: {
                        name: "Composite",
                        className: "ImportSourceCredentials"
                    }
                },
                sourceImage: {
                    required: true,
                    serializedName: "sourceImage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImportImageParameters = {
        serializedName: "ImportImageParameters",
        type: {
            name: "Composite",
            className: "ImportImageParameters",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "ImportSource"
                    }
                },
                targetTags: {
                    serializedName: "targetTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                untaggedTargetRepositories: {
                    serializedName: "untaggedTargetRepositories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                mode: {
                    serializedName: "mode",
                    defaultValue: 'NoForce',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryNameCheckRequest = {
        serializedName: "RegistryNameCheckRequest",
        type: {
            name: "Composite",
            className: "RegistryNameCheckRequest",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        MaxLength: 50,
                        MinLength: 5,
                        Pattern: /^[a-zA-Z0-9]*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.ContainerRegistry/registries',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryNameStatus = {
        serializedName: "RegistryNameStatus",
        type: {
            name: "Composite",
            className: "RegistryNameStatus",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplayDefinition = {
        serializedName: "OperationDisplayDefinition",
        type: {
            name: "Composite",
            className: "OperationDisplayDefinition",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetricSpecificationDefinition = {
        serializedName: "OperationMetricSpecificationDefinition",
        type: {
            name: "Composite",
            className: "OperationMetricSpecificationDefinition",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                internalMetricName: {
                    serializedName: "internalMetricName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationServiceSpecificationDefinition = {
        serializedName: "OperationServiceSpecificationDefinition",
        type: {
            name: "Composite",
            className: "OperationServiceSpecificationDefinition",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetricSpecificationDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationPropertiesDefinition = {
        serializedName: "OperationPropertiesDefinition",
        type: {
            name: "Composite",
            className: "OperationPropertiesDefinition",
            modelProperties: {
                serviceSpecification: {
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "OperationServiceSpecificationDefinition"
                    }
                }
            }
        }
    };
    var OperationDefinition = {
        serializedName: "OperationDefinition",
        type: {
            name: "Composite",
            className: "OperationDefinition",
            modelProperties: {
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplayDefinition"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "OperationServiceSpecificationDefinition"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Status = {
        serializedName: "Status",
        type: {
            name: "Composite",
            className: "Status",
            modelProperties: {
                displayStatus: {
                    readOnly: true,
                    serializedName: "displayStatus",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var StorageAccountProperties = {
        serializedName: "StorageAccountProperties",
        type: {
            name: "Composite",
            className: "StorageAccountProperties",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryProperties = {
        serializedName: "RegistryProperties",
        type: {
            name: "Composite",
            className: "RegistryProperties",
            modelProperties: {
                loginServer: {
                    readOnly: true,
                    serializedName: "loginServer",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                },
                adminUserEnabled: {
                    serializedName: "adminUserEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                storageAccount: {
                    serializedName: "storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Registry = {
        serializedName: "Registry",
        type: {
            name: "Composite",
            className: "Registry",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, loginServer: {
                    readOnly: true,
                    serializedName: "properties.loginServer",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                }, adminUserEnabled: {
                    serializedName: "properties.adminUserEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, storageAccount: {
                    serializedName: "properties.storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                } })
        }
    };
    var RegistryPropertiesUpdateParameters = {
        serializedName: "RegistryPropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "RegistryPropertiesUpdateParameters",
            modelProperties: {
                adminUserEnabled: {
                    serializedName: "adminUserEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageAccount: {
                    serializedName: "storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                }
            }
        }
    };
    var RegistryUpdateParameters = {
        serializedName: "RegistryUpdateParameters",
        type: {
            name: "Composite",
            className: "RegistryUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                adminUserEnabled: {
                    serializedName: "properties.adminUserEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageAccount: {
                    serializedName: "properties.storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                }
            }
        }
    };
    var RegistryPassword = {
        serializedName: "RegistryPassword",
        type: {
            name: "Composite",
            className: "RegistryPassword",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "password",
                            "password2"
                        ]
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryListCredentialsResult = {
        serializedName: "RegistryListCredentialsResult",
        type: {
            name: "Composite",
            className: "RegistryListCredentialsResult",
            modelProperties: {
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                passwords: {
                    serializedName: "passwords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegistryPassword"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegenerateCredentialParameters = {
        serializedName: "RegenerateCredentialParameters",
        type: {
            name: "Composite",
            className: "RegenerateCredentialParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "password",
                            "password2"
                        ]
                    }
                }
            }
        }
    };
    var RegistryUsage = {
        serializedName: "RegistryUsage",
        type: {
            name: "Composite",
            className: "RegistryUsage",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryUsageListResult = {
        serializedName: "RegistryUsageListResult",
        type: {
            name: "Composite",
            className: "RegistryUsageListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegistryUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var QuarantinePolicy = {
        serializedName: "QuarantinePolicy",
        type: {
            name: "Composite",
            className: "QuarantinePolicy",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrustPolicy = {
        serializedName: "TrustPolicy",
        type: {
            name: "Composite",
            className: "TrustPolicy",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryPolicies = {
        serializedName: "RegistryPolicies",
        type: {
            name: "Composite",
            className: "RegistryPolicies",
            modelProperties: {
                quarantinePolicy: {
                    serializedName: "quarantinePolicy",
                    type: {
                        name: "Composite",
                        className: "QuarantinePolicy"
                    }
                },
                trustPolicy: {
                    serializedName: "trustPolicy",
                    type: {
                        name: "Composite",
                        className: "TrustPolicy"
                    }
                }
            }
        }
    };
    var ReplicationProperties = {
        serializedName: "ReplicationProperties",
        type: {
            name: "Composite",
            className: "ReplicationProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                }
            }
        }
    };
    var Replication = {
        serializedName: "Replication",
        type: {
            name: "Composite",
            className: "Replication",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Composite",
                        className: "Status"
                    }
                } })
        }
    };
    var ReplicationUpdateParameters = {
        serializedName: "ReplicationUpdateParameters",
        type: {
            name: "Composite",
            className: "ReplicationUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebhookProperties = {
        serializedName: "WebhookProperties",
        type: {
            name: "Composite",
            className: "WebhookProperties",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                actions: {
                    required: true,
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Webhook = {
        serializedName: "Webhook",
        type: {
            name: "Composite",
            className: "Webhook",
            modelProperties: __assign({}, Resource.type.modelProperties, { status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, scope: {
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                }, actions: {
                    required: true,
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WebhookPropertiesCreateParameters = {
        serializedName: "WebhookPropertiesCreateParameters",
        type: {
            name: "Composite",
            className: "WebhookPropertiesCreateParameters",
            modelProperties: {
                serviceUri: {
                    required: true,
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                },
                customHeaders: {
                    serializedName: "customHeaders",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                actions: {
                    required: true,
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebhookCreateParameters = {
        serializedName: "WebhookCreateParameters",
        type: {
            name: "Composite",
            className: "WebhookCreateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                serviceUri: {
                    required: true,
                    serializedName: "properties.serviceUri",
                    type: {
                        name: "String"
                    }
                },
                customHeaders: {
                    serializedName: "properties.customHeaders",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                },
                actions: {
                    required: true,
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebhookPropertiesUpdateParameters = {
        serializedName: "WebhookPropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "WebhookPropertiesUpdateParameters",
            modelProperties: {
                serviceUri: {
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                },
                customHeaders: {
                    serializedName: "customHeaders",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebhookUpdateParameters = {
        serializedName: "WebhookUpdateParameters",
        type: {
            name: "Composite",
            className: "WebhookUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                serviceUri: {
                    serializedName: "properties.serviceUri",
                    type: {
                        name: "String"
                    }
                },
                customHeaders: {
                    serializedName: "properties.customHeaders",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                },
                actions: {
                    serializedName: "properties.actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventInfo = {
        serializedName: "EventInfo",
        type: {
            name: "Composite",
            className: "EventInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CallbackConfig = {
        serializedName: "CallbackConfig",
        type: {
            name: "Composite",
            className: "CallbackConfig",
            modelProperties: {
                serviceUri: {
                    required: true,
                    serializedName: "serviceUri",
                    type: {
                        name: "String"
                    }
                },
                customHeaders: {
                    serializedName: "customHeaders",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Target = {
        serializedName: "Target",
        type: {
            name: "Composite",
            className: "Target",
            modelProperties: {
                mediaType: {
                    serializedName: "mediaType",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "Number"
                    }
                },
                digest: {
                    serializedName: "digest",
                    type: {
                        name: "String"
                    }
                },
                length: {
                    serializedName: "length",
                    type: {
                        name: "Number"
                    }
                },
                repository: {
                    serializedName: "repository",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Request = {
        serializedName: "Request",
        type: {
            name: "Composite",
            className: "Request",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                addr: {
                    serializedName: "addr",
                    type: {
                        name: "String"
                    }
                },
                host: {
                    serializedName: "host",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                useragent: {
                    serializedName: "useragent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Actor = {
        serializedName: "Actor",
        type: {
            name: "Composite",
            className: "Actor",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Source = {
        serializedName: "Source",
        type: {
            name: "Composite",
            className: "Source",
            modelProperties: {
                addr: {
                    serializedName: "addr",
                    type: {
                        name: "String"
                    }
                },
                instanceID: {
                    serializedName: "instanceID",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventContent = {
        serializedName: "EventContent",
        type: {
            name: "Composite",
            className: "EventContent",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                action: {
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "Composite",
                        className: "Target"
                    }
                },
                request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "Request"
                    }
                },
                actor: {
                    serializedName: "actor",
                    type: {
                        name: "Composite",
                        className: "Actor"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "Source"
                    }
                }
            }
        }
    };
    var EventRequestMessage = {
        serializedName: "EventRequestMessage",
        type: {
            name: "Composite",
            className: "EventRequestMessage",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "Composite",
                        className: "EventContent"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                requestUri: {
                    serializedName: "requestUri",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventResponseMessage = {
        serializedName: "EventResponseMessage",
        type: {
            name: "Composite",
            className: "EventResponseMessage",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                reasonPhrase: {
                    serializedName: "reasonPhrase",
                    type: {
                        name: "String"
                    }
                },
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Event = {
        serializedName: "Event",
        type: {
            name: "Composite",
            className: "Event",
            modelProperties: __assign({}, EventInfo.type.modelProperties, { eventRequestMessage: {
                    serializedName: "eventRequestMessage",
                    type: {
                        name: "Composite",
                        className: "EventRequestMessage"
                    }
                }, eventResponseMessage: {
                    serializedName: "eventResponseMessage",
                    type: {
                        name: "Composite",
                        className: "EventResponseMessage"
                    }
                } })
        }
    };
    var RunRequest = {
        serializedName: "RunRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "RunRequest",
            className: "RunRequest",
            modelProperties: {
                isArchiveEnabled: {
                    serializedName: "isArchiveEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageDescriptor = {
        serializedName: "ImageDescriptor",
        type: {
            name: "Composite",
            className: "ImageDescriptor",
            modelProperties: {
                registry: {
                    serializedName: "registry",
                    type: {
                        name: "String"
                    }
                },
                repository: {
                    serializedName: "repository",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                },
                digest: {
                    serializedName: "digest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageUpdateTrigger = {
        serializedName: "ImageUpdateTrigger",
        type: {
            name: "Composite",
            className: "ImageUpdateTrigger",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                images: {
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageDescriptor"
                            }
                        }
                    }
                }
            }
        }
    };
    var SourceTriggerDescriptor = {
        serializedName: "SourceTriggerDescriptor",
        type: {
            name: "Composite",
            className: "SourceTriggerDescriptor",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                eventType: {
                    serializedName: "eventType",
                    type: {
                        name: "String"
                    }
                },
                commitId: {
                    serializedName: "commitId",
                    type: {
                        name: "String"
                    }
                },
                pullRequestId: {
                    serializedName: "pullRequestId",
                    type: {
                        name: "String"
                    }
                },
                repositoryUrl: {
                    serializedName: "repositoryUrl",
                    type: {
                        name: "String"
                    }
                },
                branchName: {
                    serializedName: "branchName",
                    type: {
                        name: "String"
                    }
                },
                providerType: {
                    serializedName: "providerType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PlatformProperties = {
        serializedName: "PlatformProperties",
        type: {
            name: "Composite",
            className: "PlatformProperties",
            modelProperties: {
                os: {
                    required: true,
                    serializedName: "os",
                    type: {
                        name: "String"
                    }
                },
                architecture: {
                    serializedName: "architecture",
                    type: {
                        name: "String"
                    }
                },
                variant: {
                    serializedName: "variant",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AgentProperties = {
        serializedName: "AgentProperties",
        type: {
            name: "Composite",
            className: "AgentProperties",
            modelProperties: {
                cpu: {
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RunProperties = {
        serializedName: "RunProperties",
        type: {
            name: "Composite",
            className: "RunProperties",
            modelProperties: {
                runId: {
                    serializedName: "runId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                lastUpdatedTime: {
                    serializedName: "lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                runType: {
                    serializedName: "runType",
                    type: {
                        name: "String"
                    }
                },
                createTime: {
                    serializedName: "createTime",
                    type: {
                        name: "DateTime"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                finishTime: {
                    serializedName: "finishTime",
                    type: {
                        name: "DateTime"
                    }
                },
                outputImages: {
                    serializedName: "outputImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageDescriptor"
                            }
                        }
                    }
                },
                task: {
                    serializedName: "task",
                    type: {
                        name: "String"
                    }
                },
                imageUpdateTrigger: {
                    serializedName: "imageUpdateTrigger",
                    type: {
                        name: "Composite",
                        className: "ImageUpdateTrigger"
                    }
                },
                sourceTrigger: {
                    serializedName: "sourceTrigger",
                    type: {
                        name: "Composite",
                        className: "SourceTriggerDescriptor"
                    }
                },
                isArchiveEnabled: {
                    serializedName: "isArchiveEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                platform: {
                    serializedName: "platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                },
                agentConfiguration: {
                    serializedName: "agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Run = {
        serializedName: "Run",
        type: {
            name: "Composite",
            className: "Run",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { runId: {
                    serializedName: "properties.runId",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, lastUpdatedTime: {
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, runType: {
                    serializedName: "properties.runType",
                    type: {
                        name: "String"
                    }
                }, createTime: {
                    serializedName: "properties.createTime",
                    type: {
                        name: "DateTime"
                    }
                }, startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, finishTime: {
                    serializedName: "properties.finishTime",
                    type: {
                        name: "DateTime"
                    }
                }, outputImages: {
                    serializedName: "properties.outputImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageDescriptor"
                            }
                        }
                    }
                }, task: {
                    serializedName: "properties.task",
                    type: {
                        name: "String"
                    }
                }, imageUpdateTrigger: {
                    serializedName: "properties.imageUpdateTrigger",
                    type: {
                        name: "Composite",
                        className: "ImageUpdateTrigger"
                    }
                }, sourceTrigger: {
                    serializedName: "properties.sourceTrigger",
                    type: {
                        name: "Composite",
                        className: "SourceTriggerDescriptor"
                    }
                }, isArchiveEnabled: {
                    serializedName: "properties.isArchiveEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, platform: {
                    serializedName: "properties.platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                }, agentConfiguration: {
                    serializedName: "properties.agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SourceUploadDefinition = {
        serializedName: "SourceUploadDefinition",
        type: {
            name: "Composite",
            className: "SourceUploadDefinition",
            modelProperties: {
                uploadUrl: {
                    serializedName: "uploadUrl",
                    type: {
                        name: "String"
                    }
                },
                relativePath: {
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunFilter = {
        serializedName: "RunFilter",
        type: {
            name: "Composite",
            className: "RunFilter",
            modelProperties: {
                runId: {
                    serializedName: "runId",
                    type: {
                        name: "String"
                    }
                },
                runType: {
                    serializedName: "runType",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                createTime: {
                    serializedName: "createTime",
                    type: {
                        name: "DateTime"
                    }
                },
                finishTime: {
                    serializedName: "finishTime",
                    type: {
                        name: "DateTime"
                    }
                },
                outputImageManifests: {
                    serializedName: "outputImageManifests",
                    type: {
                        name: "String"
                    }
                },
                isArchiveEnabled: {
                    serializedName: "isArchiveEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                taskName: {
                    serializedName: "taskName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunUpdateParameters = {
        serializedName: "RunUpdateParameters",
        type: {
            name: "Composite",
            className: "RunUpdateParameters",
            modelProperties: {
                isArchiveEnabled: {
                    serializedName: "isArchiveEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RunGetLogResult = {
        serializedName: "RunGetLogResult",
        type: {
            name: "Composite",
            className: "RunGetLogResult",
            modelProperties: {
                logLink: {
                    serializedName: "logLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BaseImageDependency = {
        serializedName: "BaseImageDependency",
        type: {
            name: "Composite",
            className: "BaseImageDependency",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                registry: {
                    serializedName: "registry",
                    type: {
                        name: "String"
                    }
                },
                repository: {
                    serializedName: "repository",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                },
                digest: {
                    serializedName: "digest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskStepProperties = {
        serializedName: "TaskStepProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "TaskStepProperties",
            className: "TaskStepProperties",
            modelProperties: {
                baseImageDependencies: {
                    readOnly: true,
                    serializedName: "baseImageDependencies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BaseImageDependency"
                            }
                        }
                    }
                },
                contextPath: {
                    serializedName: "contextPath",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthInfo = {
        serializedName: "AuthInfo",
        type: {
            name: "Composite",
            className: "AuthInfo",
            modelProperties: {
                tokenType: {
                    required: true,
                    serializedName: "tokenType",
                    type: {
                        name: "String"
                    }
                },
                token: {
                    required: true,
                    serializedName: "token",
                    type: {
                        name: "String"
                    }
                },
                refreshToken: {
                    serializedName: "refreshToken",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                expiresIn: {
                    serializedName: "expiresIn",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SourceProperties = {
        serializedName: "SourceProperties",
        type: {
            name: "Composite",
            className: "SourceProperties",
            modelProperties: {
                sourceControlType: {
                    required: true,
                    serializedName: "sourceControlType",
                    type: {
                        name: "String"
                    }
                },
                repositoryUrl: {
                    required: true,
                    serializedName: "repositoryUrl",
                    type: {
                        name: "String"
                    }
                },
                branch: {
                    serializedName: "branch",
                    type: {
                        name: "String"
                    }
                },
                sourceControlAuthProperties: {
                    serializedName: "sourceControlAuthProperties",
                    type: {
                        name: "Composite",
                        className: "AuthInfo"
                    }
                }
            }
        }
    };
    var SourceTrigger = {
        serializedName: "SourceTrigger",
        type: {
            name: "Composite",
            className: "SourceTrigger",
            modelProperties: {
                sourceRepository: {
                    required: true,
                    serializedName: "sourceRepository",
                    type: {
                        name: "Composite",
                        className: "SourceProperties"
                    }
                },
                sourceTriggerEvents: {
                    required: true,
                    serializedName: "sourceTriggerEvents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BaseImageTrigger = {
        serializedName: "BaseImageTrigger",
        type: {
            name: "Composite",
            className: "BaseImageTrigger",
            modelProperties: {
                baseImageTriggerType: {
                    required: true,
                    serializedName: "baseImageTriggerType",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerProperties = {
        serializedName: "TriggerProperties",
        type: {
            name: "Composite",
            className: "TriggerProperties",
            modelProperties: {
                sourceTriggers: {
                    serializedName: "sourceTriggers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SourceTrigger"
                            }
                        }
                    }
                },
                baseImageTrigger: {
                    serializedName: "baseImageTrigger",
                    type: {
                        name: "Composite",
                        className: "BaseImageTrigger"
                    }
                }
            }
        }
    };
    var TaskProperties = {
        serializedName: "TaskProperties",
        type: {
            name: "Composite",
            className: "TaskProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                platform: {
                    required: true,
                    serializedName: "platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                },
                agentConfiguration: {
                    serializedName: "agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                },
                timeout: {
                    serializedName: "timeout",
                    defaultValue: 3600,
                    constraints: {
                        InclusiveMaximum: 28800,
                        InclusiveMinimum: 300
                    },
                    type: {
                        name: "Number"
                    }
                },
                step: {
                    required: true,
                    serializedName: "step",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "TaskStepProperties",
                        className: "TaskStepProperties"
                    }
                },
                trigger: {
                    serializedName: "trigger",
                    type: {
                        name: "Composite",
                        className: "TriggerProperties"
                    }
                }
            }
        }
    };
    var Task = {
        serializedName: "Task",
        type: {
            name: "Composite",
            className: "Task",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, platform: {
                    required: true,
                    serializedName: "properties.platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                }, agentConfiguration: {
                    serializedName: "properties.agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                }, timeout: {
                    serializedName: "properties.timeout",
                    defaultValue: 3600,
                    constraints: {
                        InclusiveMaximum: 28800,
                        InclusiveMinimum: 300
                    },
                    type: {
                        name: "Number"
                    }
                }, step: {
                    required: true,
                    serializedName: "properties.step",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "TaskStepProperties",
                        className: "TaskStepProperties"
                    }
                }, trigger: {
                    serializedName: "properties.trigger",
                    type: {
                        name: "Composite",
                        className: "TriggerProperties"
                    }
                } })
        }
    };
    var PlatformUpdateParameters = {
        serializedName: "PlatformUpdateParameters",
        type: {
            name: "Composite",
            className: "PlatformUpdateParameters",
            modelProperties: {
                os: {
                    serializedName: "os",
                    type: {
                        name: "String"
                    }
                },
                architecture: {
                    serializedName: "architecture",
                    type: {
                        name: "String"
                    }
                },
                variant: {
                    serializedName: "variant",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskStepUpdateParameters = {
        serializedName: "TaskStepUpdateParameters",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "TaskStepUpdateParameters",
            className: "TaskStepUpdateParameters",
            modelProperties: {
                contextPath: {
                    serializedName: "contextPath",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthInfoUpdateParameters = {
        serializedName: "AuthInfoUpdateParameters",
        type: {
            name: "Composite",
            className: "AuthInfoUpdateParameters",
            modelProperties: {
                tokenType: {
                    serializedName: "tokenType",
                    type: {
                        name: "String"
                    }
                },
                token: {
                    serializedName: "token",
                    type: {
                        name: "String"
                    }
                },
                refreshToken: {
                    serializedName: "refreshToken",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                expiresIn: {
                    serializedName: "expiresIn",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SourceUpdateParameters = {
        serializedName: "SourceUpdateParameters",
        type: {
            name: "Composite",
            className: "SourceUpdateParameters",
            modelProperties: {
                sourceControlType: {
                    serializedName: "sourceControlType",
                    type: {
                        name: "String"
                    }
                },
                repositoryUrl: {
                    serializedName: "repositoryUrl",
                    type: {
                        name: "String"
                    }
                },
                branch: {
                    serializedName: "branch",
                    type: {
                        name: "String"
                    }
                },
                sourceControlAuthProperties: {
                    serializedName: "sourceControlAuthProperties",
                    type: {
                        name: "Composite",
                        className: "AuthInfoUpdateParameters"
                    }
                }
            }
        }
    };
    var SourceTriggerUpdateParameters = {
        serializedName: "SourceTriggerUpdateParameters",
        type: {
            name: "Composite",
            className: "SourceTriggerUpdateParameters",
            modelProperties: {
                sourceRepository: {
                    serializedName: "sourceRepository",
                    type: {
                        name: "Composite",
                        className: "SourceUpdateParameters"
                    }
                },
                sourceTriggerEvents: {
                    serializedName: "sourceTriggerEvents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BaseImageTriggerUpdateParameters = {
        serializedName: "BaseImageTriggerUpdateParameters",
        type: {
            name: "Composite",
            className: "BaseImageTriggerUpdateParameters",
            modelProperties: {
                baseImageTriggerType: {
                    serializedName: "baseImageTriggerType",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerUpdateParameters = {
        serializedName: "TriggerUpdateParameters",
        type: {
            name: "Composite",
            className: "TriggerUpdateParameters",
            modelProperties: {
                sourceTriggers: {
                    serializedName: "sourceTriggers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SourceTriggerUpdateParameters"
                            }
                        }
                    }
                },
                baseImageTrigger: {
                    serializedName: "baseImageTrigger",
                    type: {
                        name: "Composite",
                        className: "BaseImageTriggerUpdateParameters"
                    }
                }
            }
        }
    };
    var TaskPropertiesUpdateParameters = {
        serializedName: "TaskPropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "TaskPropertiesUpdateParameters",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                platform: {
                    serializedName: "platform",
                    type: {
                        name: "Composite",
                        className: "PlatformUpdateParameters"
                    }
                },
                agentConfiguration: {
                    serializedName: "agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                },
                timeout: {
                    serializedName: "timeout",
                    type: {
                        name: "Number"
                    }
                },
                step: {
                    serializedName: "step",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "TaskStepUpdateParameters",
                        className: "TaskStepUpdateParameters"
                    }
                },
                trigger: {
                    serializedName: "trigger",
                    type: {
                        name: "Composite",
                        className: "TriggerUpdateParameters"
                    }
                }
            }
        }
    };
    var TaskUpdateParameters = {
        serializedName: "TaskUpdateParameters",
        type: {
            name: "Composite",
            className: "TaskUpdateParameters",
            modelProperties: {
                status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                platform: {
                    serializedName: "properties.platform",
                    type: {
                        name: "Composite",
                        className: "PlatformUpdateParameters"
                    }
                },
                agentConfiguration: {
                    serializedName: "properties.agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                },
                timeout: {
                    serializedName: "properties.timeout",
                    type: {
                        name: "Number"
                    }
                },
                step: {
                    serializedName: "properties.step",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "TaskStepUpdateParameters",
                        className: "TaskStepUpdateParameters"
                    }
                },
                trigger: {
                    serializedName: "properties.trigger",
                    type: {
                        name: "Composite",
                        className: "TriggerUpdateParameters"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Argument = {
        serializedName: "Argument",
        type: {
            name: "Composite",
            className: "Argument",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                isSecret: {
                    serializedName: "isSecret",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DockerBuildRequest = {
        serializedName: "DockerBuildRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
            uberParent: "RunRequest",
            className: "DockerBuildRequest",
            modelProperties: __assign({}, RunRequest.type.modelProperties, { imageNames: {
                    serializedName: "imageNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isPushEnabled: {
                    serializedName: "isPushEnabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, noCache: {
                    serializedName: "noCache",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, dockerFilePath: {
                    required: true,
                    serializedName: "dockerFilePath",
                    type: {
                        name: "String"
                    }
                }, argumentsProperty: {
                    serializedName: "arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Argument"
                            }
                        }
                    }
                }, timeout: {
                    serializedName: "timeout",
                    defaultValue: 3600,
                    constraints: {
                        InclusiveMaximum: 28800,
                        InclusiveMinimum: 300
                    },
                    type: {
                        name: "Number"
                    }
                }, platform: {
                    required: true,
                    serializedName: "platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                }, agentConfiguration: {
                    serializedName: "agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                }, sourceLocation: {
                    serializedName: "sourceLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SetValue = {
        serializedName: "SetValue",
        type: {
            name: "Composite",
            className: "SetValue",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                isSecret: {
                    serializedName: "isSecret",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FileTaskRunRequest = {
        serializedName: "FileTaskRunRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
            uberParent: "RunRequest",
            className: "FileTaskRunRequest",
            modelProperties: __assign({}, RunRequest.type.modelProperties, { taskFilePath: {
                    required: true,
                    serializedName: "taskFilePath",
                    type: {
                        name: "String"
                    }
                }, valuesFilePath: {
                    serializedName: "valuesFilePath",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                }, timeout: {
                    serializedName: "timeout",
                    defaultValue: 3600,
                    constraints: {
                        InclusiveMaximum: 28800,
                        InclusiveMinimum: 300
                    },
                    type: {
                        name: "Number"
                    }
                }, platform: {
                    required: true,
                    serializedName: "platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                }, agentConfiguration: {
                    serializedName: "agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                }, sourceLocation: {
                    serializedName: "sourceLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TaskRunRequest = {
        serializedName: "TaskRunRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
            uberParent: "RunRequest",
            className: "TaskRunRequest",
            modelProperties: __assign({}, RunRequest.type.modelProperties, { taskName: {
                    required: true,
                    serializedName: "taskName",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                } })
        }
    };
    var EncodedTaskRunRequest = {
        serializedName: "EncodedTaskRunRequest",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
            uberParent: "RunRequest",
            className: "EncodedTaskRunRequest",
            modelProperties: __assign({}, RunRequest.type.modelProperties, { encodedTaskContent: {
                    required: true,
                    serializedName: "encodedTaskContent",
                    type: {
                        name: "String"
                    }
                }, encodedValuesContent: {
                    serializedName: "encodedValuesContent",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                }, timeout: {
                    serializedName: "timeout",
                    defaultValue: 3600,
                    constraints: {
                        InclusiveMaximum: 28800,
                        InclusiveMinimum: 300
                    },
                    type: {
                        name: "Number"
                    }
                }, platform: {
                    required: true,
                    serializedName: "platform",
                    type: {
                        name: "Composite",
                        className: "PlatformProperties"
                    }
                }, agentConfiguration: {
                    serializedName: "agentConfiguration",
                    type: {
                        name: "Composite",
                        className: "AgentProperties"
                    }
                }, sourceLocation: {
                    serializedName: "sourceLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DockerBuildStep = {
        serializedName: "Docker",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
            uberParent: "TaskStepProperties",
            className: "DockerBuildStep",
            modelProperties: __assign({}, TaskStepProperties.type.modelProperties, { imageNames: {
                    serializedName: "imageNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isPushEnabled: {
                    serializedName: "isPushEnabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, noCache: {
                    serializedName: "noCache",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, dockerFilePath: {
                    required: true,
                    serializedName: "dockerFilePath",
                    type: {
                        name: "String"
                    }
                }, argumentsProperty: {
                    serializedName: "arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Argument"
                            }
                        }
                    }
                } })
        }
    };
    var FileTaskStep = {
        serializedName: "FileTask",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
            uberParent: "TaskStepProperties",
            className: "FileTaskStep",
            modelProperties: __assign({}, TaskStepProperties.type.modelProperties, { taskFilePath: {
                    required: true,
                    serializedName: "taskFilePath",
                    type: {
                        name: "String"
                    }
                }, valuesFilePath: {
                    serializedName: "valuesFilePath",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                } })
        }
    };
    var EncodedTaskStep = {
        serializedName: "EncodedTask",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
            uberParent: "TaskStepProperties",
            className: "EncodedTaskStep",
            modelProperties: __assign({}, TaskStepProperties.type.modelProperties, { encodedTaskContent: {
                    required: true,
                    serializedName: "encodedTaskContent",
                    type: {
                        name: "String"
                    }
                }, encodedValuesContent: {
                    serializedName: "encodedValuesContent",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                } })
        }
    };
    var DockerBuildStepUpdateParameters = {
        serializedName: "Docker",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
            uberParent: "TaskStepUpdateParameters",
            className: "DockerBuildStepUpdateParameters",
            modelProperties: __assign({}, TaskStepUpdateParameters.type.modelProperties, { imageNames: {
                    serializedName: "imageNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, isPushEnabled: {
                    serializedName: "isPushEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, noCache: {
                    serializedName: "noCache",
                    type: {
                        name: "Boolean"
                    }
                }, dockerFilePath: {
                    serializedName: "dockerFilePath",
                    type: {
                        name: "String"
                    }
                }, argumentsProperty: {
                    serializedName: "arguments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Argument"
                            }
                        }
                    }
                } })
        }
    };
    var FileTaskStepUpdateParameters = {
        serializedName: "FileTask",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
            uberParent: "TaskStepUpdateParameters",
            className: "FileTaskStepUpdateParameters",
            modelProperties: __assign({}, TaskStepUpdateParameters.type.modelProperties, { taskFilePath: {
                    serializedName: "taskFilePath",
                    type: {
                        name: "String"
                    }
                }, valuesFilePath: {
                    serializedName: "valuesFilePath",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                } })
        }
    };
    var EncodedTaskStepUpdateParameters = {
        serializedName: "EncodedTask",
        type: {
            name: "Composite",
            polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
            uberParent: "TaskStepUpdateParameters",
            className: "EncodedTaskStepUpdateParameters",
            modelProperties: __assign({}, TaskStepUpdateParameters.type.modelProperties, { encodedTaskContent: {
                    serializedName: "encodedTaskContent",
                    type: {
                        name: "String"
                    }
                }, encodedValuesContent: {
                    serializedName: "encodedValuesContent",
                    type: {
                        name: "String"
                    }
                }, values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SetValue"
                            }
                        }
                    }
                } })
        }
    };
    var RegistryListResult = {
        serializedName: "RegistryListResult",
        type: {
            name: "Composite",
            className: "RegistryListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Registry"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReplicationListResult = {
        serializedName: "ReplicationListResult",
        type: {
            name: "Composite",
            className: "ReplicationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Replication"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebhookListResult = {
        serializedName: "WebhookListResult",
        type: {
            name: "Composite",
            className: "WebhookListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Webhook"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventListResult = {
        serializedName: "EventListResult",
        type: {
            name: "Composite",
            className: "EventListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunListResult = {
        serializedName: "RunListResult",
        type: {
            name: "Composite",
            className: "RunListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Run"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskListResult = {
        serializedName: "TaskListResult",
        type: {
            name: "Composite",
            className: "TaskListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Task"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'RunRequest': RunRequest,
        'TaskStepProperties': TaskStepProperties,
        'TaskStepUpdateParameters': TaskStepUpdateParameters,
        'RunRequest.DockerBuildRequest': DockerBuildRequest,
        'RunRequest.FileTaskRunRequest': FileTaskRunRequest,
        'RunRequest.TaskRunRequest': TaskRunRequest,
        'RunRequest.EncodedTaskRunRequest': EncodedTaskRunRequest,
        'TaskStepProperties.Docker': DockerBuildStep,
        'TaskStepProperties.FileTask': FileTaskStep,
        'TaskStepProperties.EncodedTask': EncodedTaskStep,
        'TaskStepUpdateParameters.Docker': DockerBuildStepUpdateParameters,
        'TaskStepUpdateParameters.FileTask': FileTaskStepUpdateParameters,
        'TaskStepUpdateParameters.EncodedTask': EncodedTaskStepUpdateParameters
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ImportSourceCredentials: ImportSourceCredentials,
        ImportSource: ImportSource,
        ImportImageParameters: ImportImageParameters,
        RegistryNameCheckRequest: RegistryNameCheckRequest,
        RegistryNameStatus: RegistryNameStatus,
        OperationDisplayDefinition: OperationDisplayDefinition,
        OperationMetricSpecificationDefinition: OperationMetricSpecificationDefinition,
        OperationServiceSpecificationDefinition: OperationServiceSpecificationDefinition,
        OperationPropertiesDefinition: OperationPropertiesDefinition,
        OperationDefinition: OperationDefinition,
        Sku: Sku,
        Status: Status,
        StorageAccountProperties: StorageAccountProperties,
        RegistryProperties: RegistryProperties,
        Resource: Resource,
        Registry: Registry,
        RegistryPropertiesUpdateParameters: RegistryPropertiesUpdateParameters,
        RegistryUpdateParameters: RegistryUpdateParameters,
        RegistryPassword: RegistryPassword,
        RegistryListCredentialsResult: RegistryListCredentialsResult,
        RegenerateCredentialParameters: RegenerateCredentialParameters,
        RegistryUsage: RegistryUsage,
        RegistryUsageListResult: RegistryUsageListResult,
        QuarantinePolicy: QuarantinePolicy,
        TrustPolicy: TrustPolicy,
        RegistryPolicies: RegistryPolicies,
        ReplicationProperties: ReplicationProperties,
        Replication: Replication,
        ReplicationUpdateParameters: ReplicationUpdateParameters,
        WebhookProperties: WebhookProperties,
        Webhook: Webhook,
        WebhookPropertiesCreateParameters: WebhookPropertiesCreateParameters,
        WebhookCreateParameters: WebhookCreateParameters,
        WebhookPropertiesUpdateParameters: WebhookPropertiesUpdateParameters,
        WebhookUpdateParameters: WebhookUpdateParameters,
        EventInfo: EventInfo,
        CallbackConfig: CallbackConfig,
        Target: Target,
        Request: Request,
        Actor: Actor,
        Source: Source,
        EventContent: EventContent,
        EventRequestMessage: EventRequestMessage,
        EventResponseMessage: EventResponseMessage,
        Event: Event,
        RunRequest: RunRequest,
        ImageDescriptor: ImageDescriptor,
        ImageUpdateTrigger: ImageUpdateTrigger,
        SourceTriggerDescriptor: SourceTriggerDescriptor,
        PlatformProperties: PlatformProperties,
        AgentProperties: AgentProperties,
        RunProperties: RunProperties,
        ProxyResource: ProxyResource,
        Run: Run,
        SourceUploadDefinition: SourceUploadDefinition,
        RunFilter: RunFilter,
        RunUpdateParameters: RunUpdateParameters,
        RunGetLogResult: RunGetLogResult,
        BaseImageDependency: BaseImageDependency,
        TaskStepProperties: TaskStepProperties,
        AuthInfo: AuthInfo,
        SourceProperties: SourceProperties,
        SourceTrigger: SourceTrigger,
        BaseImageTrigger: BaseImageTrigger,
        TriggerProperties: TriggerProperties,
        TaskProperties: TaskProperties,
        Task: Task,
        PlatformUpdateParameters: PlatformUpdateParameters,
        TaskStepUpdateParameters: TaskStepUpdateParameters,
        AuthInfoUpdateParameters: AuthInfoUpdateParameters,
        SourceUpdateParameters: SourceUpdateParameters,
        SourceTriggerUpdateParameters: SourceTriggerUpdateParameters,
        BaseImageTriggerUpdateParameters: BaseImageTriggerUpdateParameters,
        TriggerUpdateParameters: TriggerUpdateParameters,
        TaskPropertiesUpdateParameters: TaskPropertiesUpdateParameters,
        TaskUpdateParameters: TaskUpdateParameters,
        Argument: Argument,
        DockerBuildRequest: DockerBuildRequest,
        SetValue: SetValue,
        FileTaskRunRequest: FileTaskRunRequest,
        TaskRunRequest: TaskRunRequest,
        EncodedTaskRunRequest: EncodedTaskRunRequest,
        DockerBuildStep: DockerBuildStep,
        FileTaskStep: FileTaskStep,
        EncodedTaskStep: EncodedTaskStep,
        DockerBuildStepUpdateParameters: DockerBuildStepUpdateParameters,
        FileTaskStepUpdateParameters: FileTaskStepUpdateParameters,
        EncodedTaskStepUpdateParameters: EncodedTaskStepUpdateParameters,
        RegistryListResult: RegistryListResult,
        OperationListResult: OperationListResult,
        ReplicationListResult: ReplicationListResult,
        WebhookListResult: WebhookListResult,
        EventListResult: EventListResult,
        RunListResult: RunListResult,
        TaskListResult: TaskListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ImportImageParameters: ImportImageParameters,
        ImportSource: ImportSource,
        ImportSourceCredentials: ImportSourceCredentials,
        CloudError: CloudError,
        RegistryNameCheckRequest: RegistryNameCheckRequest,
        RegistryNameStatus: RegistryNameStatus,
        Registry: Registry,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        Status: Status,
        StorageAccountProperties: StorageAccountProperties,
        RegistryUpdateParameters: RegistryUpdateParameters,
        RegistryListResult: RegistryListResult,
        RegistryListCredentialsResult: RegistryListCredentialsResult,
        RegistryPassword: RegistryPassword,
        RegenerateCredentialParameters: RegenerateCredentialParameters,
        RegistryUsageListResult: RegistryUsageListResult,
        RegistryUsage: RegistryUsage,
        RegistryPolicies: RegistryPolicies,
        QuarantinePolicy: QuarantinePolicy,
        TrustPolicy: TrustPolicy,
        RunRequest: RunRequest,
        Run: Run,
        ProxyResource: ProxyResource,
        ImageDescriptor: ImageDescriptor,
        ImageUpdateTrigger: ImageUpdateTrigger,
        SourceTriggerDescriptor: SourceTriggerDescriptor,
        PlatformProperties: PlatformProperties,
        AgentProperties: AgentProperties,
        SourceUploadDefinition: SourceUploadDefinition,
        Replication: Replication,
        Webhook: Webhook,
        Task: Task,
        TaskStepProperties: TaskStepProperties,
        BaseImageDependency: BaseImageDependency,
        TriggerProperties: TriggerProperties,
        SourceTrigger: SourceTrigger,
        SourceProperties: SourceProperties,
        AuthInfo: AuthInfo,
        BaseImageTrigger: BaseImageTrigger,
        DockerBuildRequest: DockerBuildRequest,
        Argument: Argument,
        FileTaskRunRequest: FileTaskRunRequest,
        SetValue: SetValue,
        TaskRunRequest: TaskRunRequest,
        EncodedTaskRunRequest: EncodedTaskRunRequest,
        DockerBuildStep: DockerBuildStep,
        FileTaskStep: FileTaskStep,
        EncodedTaskStep: EncodedTaskStep
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-10-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-09-01',
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var registryName = {
        parameterPath: "registryName",
        mapper: {
            required: true,
            serializedName: "registryName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var replicationName = {
        parameterPath: "replicationName",
        mapper: {
            required: true,
            serializedName: "replicationName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var runId = {
        parameterPath: "runId",
        mapper: {
            required: true,
            serializedName: "runId",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var taskName = {
        parameterPath: "taskName",
        mapper: {
            required: true,
            serializedName: "taskName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9-_]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var webhookName = {
        parameterPath: "webhookName",
        mapper: {
            required: true,
            serializedName: "webhookName",
            constraints: {
                MaxLength: 50,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]*$/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Registries. */
    var Registries = /** @class */ (function () {
        /**
         * Create a Registries.
         * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
         */
        function Registries(client) {
            this.client = client;
        }
        /**
         * Copies an image to this container registry from the specified container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param parameters The parameters specifying the image to copy and the source container registry.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Registries.prototype.importImage = function (resourceGroupName$$1, registryName$$1, parameters, options) {
            return this.beginImportImage(resourceGroupName$$1, registryName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Registries.prototype.checkNameAvailability = function (registryNameCheckRequest, options, callback) {
            return this.client.sendOperationRequest({
                registryNameCheckRequest: registryNameCheckRequest,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Registries.prototype.get = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param registry The parameters for creating a container registry.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegistriesCreateResponse>
         */
        Registries.prototype.create = function (resourceGroupName$$1, registryName$$1, registry, options) {
            return this.beginCreate(resourceGroupName$$1, registryName$$1, registry, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Registries.prototype.deleteMethod = function (resourceGroupName$$1, registryName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, registryName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param registryUpdateParameters The parameters for updating a container registry.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegistriesUpdateResponse>
         */
        Registries.prototype.update = function (resourceGroupName$$1, registryName$$1, registryUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, registryName$$1, registryUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Registries.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Registries.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Registries.prototype.listCredentials = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listCredentialsOperationSpec, callback);
        };
        Registries.prototype.regenerateCredential = function (resourceGroupName$$1, registryName$$1, regenerateCredentialParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                regenerateCredentialParameters: regenerateCredentialParameters,
                options: options
            }, regenerateCredentialOperationSpec, callback);
        };
        Registries.prototype.listUsages = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listUsagesOperationSpec, callback);
        };
        Registries.prototype.listPolicies = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listPoliciesOperationSpec, callback);
        };
        /**
         * Updates the policies for the specified container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param registryPoliciesUpdateParameters The parameters for updating policies of a container
         * registry.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegistriesUpdatePoliciesResponse>
         */
        Registries.prototype.updatePolicies = function (resourceGroupName$$1, registryName$$1, registryPoliciesUpdateParameters, options) {
            return this.beginUpdatePolicies(resourceGroupName$$1, registryName$$1, registryPoliciesUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Schedules a new run based on the request parameters and add it to the run queue.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param runRequest The parameters of a run that needs to scheduled.
         * @param [options] The optional parameters
         * @returns Promise<Models.RegistriesScheduleRunResponse>
         */
        Registries.prototype.scheduleRun = function (resourceGroupName$$1, registryName$$1, runRequest, options) {
            return this.beginScheduleRun(resourceGroupName$$1, registryName$$1, runRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Registries.prototype.getBuildSourceUploadUrl = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, getBuildSourceUploadUrlOperationSpec, callback);
        };
        /**
         * Copies an image to this container registry from the specified container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param parameters The parameters specifying the image to copy and the source container registry.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Registries.prototype.beginImportImage = function (resourceGroupName$$1, registryName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                parameters: parameters,
                options: options
            }, beginImportImageOperationSpec, options);
        };
        /**
         * Creates a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param registry The parameters for creating a container registry.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Registries.prototype.beginCreate = function (resourceGroupName$$1, registryName$$1, registry, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                registry: registry,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes a container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Registries.prototype.beginDeleteMethod = function (resourceGroupName$$1, registryName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param registryUpdateParameters The parameters for updating a container registry.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Registries.prototype.beginUpdate = function (resourceGroupName$$1, registryName$$1, registryUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                registryUpdateParameters: registryUpdateParameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Updates the policies for the specified container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param registryPoliciesUpdateParameters The parameters for updating policies of a container
         * registry.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Registries.prototype.beginUpdatePolicies = function (resourceGroupName$$1, registryName$$1, registryPoliciesUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                registryPoliciesUpdateParameters: registryPoliciesUpdateParameters,
                options: options
            }, beginUpdatePoliciesOperationSpec, options);
        };
        /**
         * Schedules a new run based on the request parameters and add it to the run queue.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param runRequest The parameters of a run that needs to scheduled.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Registries.prototype.beginScheduleRun = function (resourceGroupName$$1, registryName$$1, runRequest, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                runRequest: runRequest,
                options: options
            }, beginScheduleRunOperationSpec, options);
        };
        Registries.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Registries.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Registries;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "registryNameCheckRequest",
            mapper: __assign({}, RegistryNameCheckRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RegistryNameStatus
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Registry
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryListCredentialsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var regenerateCredentialOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regenerateCredentialParameters",
            mapper: __assign({}, RegenerateCredentialParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RegistryListCredentialsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listPoliciesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listPolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryPolicies
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getBuildSourceUploadUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceUploadDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginImportImageOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ImportImageParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "registry",
            mapper: __assign({}, Registry, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Registry
            },
            201: {
                bodyMapper: Registry
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "registryUpdateParameters",
            mapper: __assign({}, RegistryUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Registry
            },
            201: {
                bodyMapper: Registry
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdatePoliciesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/updatePolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "registryPoliciesUpdateParameters",
            mapper: __assign({}, RegistryPolicies, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RegistryPolicies
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginScheduleRunOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runRequest",
            mapper: __assign({}, RunRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Run
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        OperationDefinition: OperationDefinition,
        OperationDisplayDefinition: OperationDisplayDefinition,
        OperationServiceSpecificationDefinition: OperationServiceSpecificationDefinition,
        OperationMetricSpecificationDefinition: OperationMetricSpecificationDefinition,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.ContainerRegistry/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Replication: Replication,
        Resource: Resource,
        BaseResource: BaseResource,
        Status: Status,
        CloudError: CloudError,
        ReplicationUpdateParameters: ReplicationUpdateParameters,
        ReplicationListResult: ReplicationListResult,
        Registry: Registry,
        Sku: Sku,
        StorageAccountProperties: StorageAccountProperties,
        Webhook: Webhook,
        Task: Task,
        PlatformProperties: PlatformProperties,
        AgentProperties: AgentProperties,
        TaskStepProperties: TaskStepProperties,
        BaseImageDependency: BaseImageDependency,
        TriggerProperties: TriggerProperties,
        SourceTrigger: SourceTrigger,
        SourceProperties: SourceProperties,
        AuthInfo: AuthInfo,
        BaseImageTrigger: BaseImageTrigger,
        ProxyResource: ProxyResource,
        DockerBuildStep: DockerBuildStep,
        Argument: Argument,
        FileTaskStep: FileTaskStep,
        SetValue: SetValue,
        EncodedTaskStep: EncodedTaskStep,
        Run: Run,
        ImageDescriptor: ImageDescriptor,
        ImageUpdateTrigger: ImageUpdateTrigger,
        SourceTriggerDescriptor: SourceTriggerDescriptor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Replications. */
    var Replications = /** @class */ (function () {
        /**
         * Create a Replications.
         * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
         */
        function Replications(client) {
            this.client = client;
        }
        Replications.prototype.get = function (resourceGroupName$$1, registryName$$1, replicationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                replicationName: replicationName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates a replication for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param replicationName The name of the replication.
         * @param replication The parameters for creating a replication.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationsCreateResponse>
         */
        Replications.prototype.create = function (resourceGroupName$$1, registryName$$1, replicationName$$1, replication, options) {
            return this.beginCreate(resourceGroupName$$1, registryName$$1, replicationName$$1, replication, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a replication from a container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param replicationName The name of the replication.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Replications.prototype.deleteMethod = function (resourceGroupName$$1, registryName$$1, replicationName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, registryName$$1, replicationName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a replication for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param replicationName The name of the replication.
         * @param replicationUpdateParameters The parameters for updating a replication.
         * @param [options] The optional parameters
         * @returns Promise<Models.ReplicationsUpdateResponse>
         */
        Replications.prototype.update = function (resourceGroupName$$1, registryName$$1, replicationName$$1, replicationUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, registryName$$1, replicationName$$1, replicationUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Replications.prototype.list = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        /**
         * Creates a replication for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param replicationName The name of the replication.
         * @param replication The parameters for creating a replication.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Replications.prototype.beginCreate = function (resourceGroupName$$1, registryName$$1, replicationName$$1, replication, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                replicationName: replicationName$$1,
                replication: replication,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Deletes a replication from a container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param replicationName The name of the replication.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Replications.prototype.beginDeleteMethod = function (resourceGroupName$$1, registryName$$1, replicationName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                replicationName: replicationName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Updates a replication for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param replicationName The name of the replication.
         * @param replicationUpdateParameters The parameters for updating a replication.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Replications.prototype.beginUpdate = function (resourceGroupName$$1, registryName$$1, replicationName$$1, replicationUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                replicationName: replicationName$$1,
                replicationUpdateParameters: replicationUpdateParameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        Replications.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Replications;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            replicationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Replication
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            replicationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "replication",
            mapper: __assign({}, Replication, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Replication
            },
            201: {
                bodyMapper: Replication
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            replicationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            replicationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "replicationUpdateParameters",
            mapper: __assign({}, ReplicationUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Replication
            },
            201: {
                bodyMapper: Replication
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Webhook: Webhook,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        WebhookCreateParameters: WebhookCreateParameters,
        WebhookUpdateParameters: WebhookUpdateParameters,
        WebhookListResult: WebhookListResult,
        EventInfo: EventInfo,
        CallbackConfig: CallbackConfig,
        EventListResult: EventListResult,
        Event: Event,
        EventRequestMessage: EventRequestMessage,
        EventContent: EventContent,
        Target: Target,
        Request: Request,
        Actor: Actor,
        Source: Source,
        EventResponseMessage: EventResponseMessage,
        Registry: Registry,
        Sku: Sku,
        Status: Status,
        StorageAccountProperties: StorageAccountProperties,
        Replication: Replication,
        Task: Task,
        PlatformProperties: PlatformProperties,
        AgentProperties: AgentProperties,
        TaskStepProperties: TaskStepProperties,
        BaseImageDependency: BaseImageDependency,
        TriggerProperties: TriggerProperties,
        SourceTrigger: SourceTrigger,
        SourceProperties: SourceProperties,
        AuthInfo: AuthInfo,
        BaseImageTrigger: BaseImageTrigger,
        ProxyResource: ProxyResource,
        DockerBuildStep: DockerBuildStep,
        Argument: Argument,
        FileTaskStep: FileTaskStep,
        SetValue: SetValue,
        EncodedTaskStep: EncodedTaskStep,
        Run: Run,
        ImageDescriptor: ImageDescriptor,
        ImageUpdateTrigger: ImageUpdateTrigger,
        SourceTriggerDescriptor: SourceTriggerDescriptor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Webhooks. */
    var Webhooks = /** @class */ (function () {
        /**
         * Create a Webhooks.
         * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
         */
        function Webhooks(client) {
            this.client = client;
        }
        Webhooks.prototype.get = function (resourceGroupName$$1, registryName$$1, webhookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates a webhook for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param webhookName The name of the webhook.
         * @param webhookCreateParameters The parameters for creating a webhook.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebhooksCreateResponse>
         */
        Webhooks.prototype.create = function (resourceGroupName$$1, registryName$$1, webhookName$$1, webhookCreateParameters, options) {
            return this.beginCreate(resourceGroupName$$1, registryName$$1, webhookName$$1, webhookCreateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a webhook from a container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param webhookName The name of the webhook.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Webhooks.prototype.deleteMethod = function (resourceGroupName$$1, registryName$$1, webhookName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, registryName$$1, webhookName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a webhook with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param webhookName The name of the webhook.
         * @param webhookUpdateParameters The parameters for updating a webhook.
         * @param [options] The optional parameters
         * @returns Promise<Models.WebhooksUpdateResponse>
         */
        Webhooks.prototype.update = function (resourceGroupName$$1, registryName$$1, webhookName$$1, webhookUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, registryName$$1, webhookName$$1, webhookUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Webhooks.prototype.list = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        Webhooks.prototype.ping = function (resourceGroupName$$1, registryName$$1, webhookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                options: options
            }, pingOperationSpec, callback);
        };
        Webhooks.prototype.getCallbackConfig = function (resourceGroupName$$1, registryName$$1, webhookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                options: options
            }, getCallbackConfigOperationSpec, callback);
        };
        Webhooks.prototype.listEvents = function (resourceGroupName$$1, registryName$$1, webhookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                options: options
            }, listEventsOperationSpec, callback);
        };
        /**
         * Creates a webhook for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param webhookName The name of the webhook.
         * @param webhookCreateParameters The parameters for creating a webhook.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Webhooks.prototype.beginCreate = function (resourceGroupName$$1, registryName$$1, webhookName$$1, webhookCreateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                webhookCreateParameters: webhookCreateParameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Deletes a webhook from a container registry.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param webhookName The name of the webhook.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Webhooks.prototype.beginDeleteMethod = function (resourceGroupName$$1, registryName$$1, webhookName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Updates a webhook with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param webhookName The name of the webhook.
         * @param webhookUpdateParameters The parameters for updating a webhook.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Webhooks.prototype.beginUpdate = function (resourceGroupName$$1, registryName$$1, webhookName$$1, webhookUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                webhookName: webhookName$$1,
                webhookUpdateParameters: webhookUpdateParameters,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        Webhooks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        Webhooks.prototype.listEventsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listEventsNextOperationSpec, callback);
        };
        return Webhooks;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Webhook
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebhookListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var pingOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getCallbackConfigOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CallbackConfig
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listEventsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "webhookCreateParameters",
            mapper: __assign({}, WebhookCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Webhook
            },
            201: {
                bodyMapper: Webhook
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            webhookName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "webhookUpdateParameters",
            mapper: __assign({}, WebhookUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Webhook
            },
            201: {
                bodyMapper: Webhook
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebhookListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listEventsNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RunListResult: RunListResult,
        Run: Run,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        ImageDescriptor: ImageDescriptor,
        ImageUpdateTrigger: ImageUpdateTrigger,
        SourceTriggerDescriptor: SourceTriggerDescriptor,
        PlatformProperties: PlatformProperties,
        AgentProperties: AgentProperties,
        CloudError: CloudError,
        RunUpdateParameters: RunUpdateParameters,
        RunGetLogResult: RunGetLogResult,
        Resource: Resource,
        Task: Task,
        TaskStepProperties: TaskStepProperties,
        BaseImageDependency: BaseImageDependency,
        TriggerProperties: TriggerProperties,
        SourceTrigger: SourceTrigger,
        SourceProperties: SourceProperties,
        AuthInfo: AuthInfo,
        BaseImageTrigger: BaseImageTrigger,
        DockerBuildStep: DockerBuildStep,
        Argument: Argument,
        FileTaskStep: FileTaskStep,
        SetValue: SetValue,
        EncodedTaskStep: EncodedTaskStep,
        Registry: Registry,
        Sku: Sku,
        Status: Status,
        StorageAccountProperties: StorageAccountProperties,
        Replication: Replication,
        Webhook: Webhook
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Runs. */
    var Runs = /** @class */ (function () {
        /**
         * Create a Runs.
         * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
         */
        function Runs(client) {
            this.client = client;
        }
        Runs.prototype.list = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        Runs.prototype.get = function (resourceGroupName$$1, registryName$$1, runId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                runId: runId$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Patch the run properties.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param runId The run ID.
         * @param runUpdateParameters The run update properties.
         * @param [options] The optional parameters
         * @returns Promise<Models.RunsUpdateResponse>
         */
        Runs.prototype.update = function (resourceGroupName$$1, registryName$$1, runId$$1, runUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, registryName$$1, runId$$1, runUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Runs.prototype.getLogSasUrl = function (resourceGroupName$$1, registryName$$1, runId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                runId: runId$$1,
                options: options
            }, getLogSasUrlOperationSpec, callback);
        };
        /**
         * Cancel an existing run.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param runId The run ID.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Runs.prototype.cancel = function (resourceGroupName$$1, registryName$$1, runId$$1, options) {
            return this.beginCancel(resourceGroupName$$1, registryName$$1, runId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Patch the run properties.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param runId The run ID.
         * @param runUpdateParameters The run update properties.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Runs.prototype.beginUpdate = function (resourceGroupName$$1, registryName$$1, runId$$1, runUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                runId: runId$$1,
                runUpdateParameters: runUpdateParameters,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        /**
         * Cancel an existing run.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param runId The run ID.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Runs.prototype.beginCancel = function (resourceGroupName$$1, registryName$$1, runId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                runId: runId$$1,
                options: options
            }, beginCancelOperationSpec, options);
        };
        Runs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Runs;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion1,
            filter,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            runId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Run
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getLogSasUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            runId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunGetLogResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            runId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runUpdateParameters",
            mapper: __assign({}, RunUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Run
            },
            201: {
                bodyMapper: Run
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            runId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        TaskListResult: TaskListResult,
        Task: Task,
        Resource: Resource,
        BaseResource: BaseResource,
        PlatformProperties: PlatformProperties,
        AgentProperties: AgentProperties,
        TaskStepProperties: TaskStepProperties,
        BaseImageDependency: BaseImageDependency,
        TriggerProperties: TriggerProperties,
        SourceTrigger: SourceTrigger,
        SourceProperties: SourceProperties,
        AuthInfo: AuthInfo,
        BaseImageTrigger: BaseImageTrigger,
        CloudError: CloudError,
        TaskUpdateParameters: TaskUpdateParameters,
        PlatformUpdateParameters: PlatformUpdateParameters,
        TaskStepUpdateParameters: TaskStepUpdateParameters,
        TriggerUpdateParameters: TriggerUpdateParameters,
        SourceTriggerUpdateParameters: SourceTriggerUpdateParameters,
        SourceUpdateParameters: SourceUpdateParameters,
        AuthInfoUpdateParameters: AuthInfoUpdateParameters,
        BaseImageTriggerUpdateParameters: BaseImageTriggerUpdateParameters,
        Registry: Registry,
        Sku: Sku,
        Status: Status,
        StorageAccountProperties: StorageAccountProperties,
        Replication: Replication,
        Webhook: Webhook,
        ProxyResource: ProxyResource,
        DockerBuildStep: DockerBuildStep,
        Argument: Argument,
        FileTaskStep: FileTaskStep,
        SetValue: SetValue,
        EncodedTaskStep: EncodedTaskStep,
        DockerBuildStepUpdateParameters: DockerBuildStepUpdateParameters,
        FileTaskStepUpdateParameters: FileTaskStepUpdateParameters,
        EncodedTaskStepUpdateParameters: EncodedTaskStepUpdateParameters,
        Run: Run,
        ImageDescriptor: ImageDescriptor,
        ImageUpdateTrigger: ImageUpdateTrigger,
        SourceTriggerDescriptor: SourceTriggerDescriptor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Tasks. */
    var Tasks = /** @class */ (function () {
        /**
         * Create a Tasks.
         * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
         */
        function Tasks(client) {
            this.client = client;
        }
        Tasks.prototype.list = function (resourceGroupName$$1, registryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        Tasks.prototype.get = function (resourceGroupName$$1, registryName$$1, taskName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                taskName: taskName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Creates a task for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param taskName The name of the container registry task.
         * @param taskCreateParameters The parameters for creating a task.
         * @param [options] The optional parameters
         * @returns Promise<Models.TasksCreateResponse>
         */
        Tasks.prototype.create = function (resourceGroupName$$1, registryName$$1, taskName$$1, taskCreateParameters, options) {
            return this.beginCreate(resourceGroupName$$1, registryName$$1, taskName$$1, taskCreateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a specified task.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param taskName The name of the container registry task.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Tasks.prototype.deleteMethod = function (resourceGroupName$$1, registryName$$1, taskName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, registryName$$1, taskName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a task with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param taskName The name of the container registry task.
         * @param taskUpdateParameters The parameters for updating a task.
         * @param [options] The optional parameters
         * @returns Promise<Models.TasksUpdateResponse>
         */
        Tasks.prototype.update = function (resourceGroupName$$1, registryName$$1, taskName$$1, taskUpdateParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, registryName$$1, taskName$$1, taskUpdateParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Tasks.prototype.getDetails = function (resourceGroupName$$1, registryName$$1, taskName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                taskName: taskName$$1,
                options: options
            }, getDetailsOperationSpec, callback);
        };
        /**
         * Creates a task for a container registry with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param taskName The name of the container registry task.
         * @param taskCreateParameters The parameters for creating a task.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Tasks.prototype.beginCreate = function (resourceGroupName$$1, registryName$$1, taskName$$1, taskCreateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                taskName: taskName$$1,
                taskCreateParameters: taskCreateParameters,
                options: options
            }, beginCreateOperationSpec$3, options);
        };
        /**
         * Deletes a specified task.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param taskName The name of the container registry task.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Tasks.prototype.beginDeleteMethod = function (resourceGroupName$$1, registryName$$1, taskName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                taskName: taskName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * Updates a task with the specified parameters.
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * @param registryName The name of the container registry.
         * @param taskName The name of the container registry task.
         * @param taskUpdateParameters The parameters for updating a task.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Tasks.prototype.beginUpdate = function (resourceGroupName$$1, registryName$$1, taskName$$1, taskUpdateParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                registryName: registryName$$1,
                taskName: taskName$$1,
                taskUpdateParameters: taskUpdateParameters,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        Tasks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return Tasks;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TaskListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            taskName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Task
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getDetailsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            taskName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Task
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginCreateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            taskName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "taskCreateParameters",
            mapper: __assign({}, Task, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Task
            },
            201: {
                bodyMapper: Task
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            taskName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            registryName,
            taskName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "taskUpdateParameters",
            mapper: __assign({}, TaskUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Task
            },
            201: {
                bodyMapper: Task
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TaskListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-containerregistry";
    var packageVersion = "1.0.0";
    var ContainerRegistryManagementClientContext = /** @class */ (function (_super) {
        __extends(ContainerRegistryManagementClientContext, _super);
        /**
         * Initializes a new instance of the ContainerRegistryManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Microsoft Azure subscription ID.
         * @param [options] The parameter options
         */
        function ContainerRegistryManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ContainerRegistryManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ContainerRegistryManagementClient = /** @class */ (function (_super) {
        __extends(ContainerRegistryManagementClient, _super);
        /**
         * Initializes a new instance of the ContainerRegistryManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Microsoft Azure subscription ID.
         * @param [options] The parameter options
         */
        function ContainerRegistryManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.registries = new Registries(_this);
            _this.operations = new Operations(_this);
            _this.replications = new Replications(_this);
            _this.webhooks = new Webhooks(_this);
            _this.runs = new Runs(_this);
            _this.tasks = new Tasks(_this);
            return _this;
        }
        return ContainerRegistryManagementClient;
    }(ContainerRegistryManagementClientContext));

    exports.ContainerRegistryManagementClient = ContainerRegistryManagementClient;
    exports.ContainerRegistryManagementClientContext = ContainerRegistryManagementClientContext;
    exports.ContainerRegistryManagementModels = index;
    exports.ContainerRegistryManagementMappers = mappers;
    exports.Registries = Registries;
    exports.Operations = Operations;
    exports.Replications = Replications;
    exports.Webhooks = Webhooks;
    exports.Runs = Runs;
    exports.Tasks = Tasks;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-containerregistry.js.map
