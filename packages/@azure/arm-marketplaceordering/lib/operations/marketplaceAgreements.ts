/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/marketplaceAgreementsMappers";
import * as Parameters from "../models/parameters";
import { MarketplaceOrderingAgreementsContext } from "../marketplaceOrderingAgreementsContext";

/** Class representing a MarketplaceAgreements. */
export class MarketplaceAgreements {
  private readonly client: MarketplaceOrderingAgreementsContext;

  /**
   * Create a MarketplaceAgreements.
   * @param {MarketplaceOrderingAgreementsContext} client Reference to the service client.
   */
  constructor(client: MarketplaceOrderingAgreementsContext) {
    this.client = client;
  }

  /**
   * Get marketplace terms.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param [options] The optional parameters
   * @returns Promise<Models.MarketplaceAgreementsGetResponse>
   */
  get(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase): Promise<Models.MarketplaceAgreementsGetResponse>;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param callback The callback
   */
  get(publisherId: string, offerId: string, planId: string, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(publisherId: string, offerId: string, planId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  get(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgreementTerms>, callback?: msRest.ServiceCallback<Models.AgreementTerms>): Promise<Models.MarketplaceAgreementsGetResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MarketplaceAgreementsGetResponse>;
  }

  /**
   * Save marketplace terms.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param parameters Parameters supplied to the Create Marketplace Terms operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MarketplaceAgreementsCreateResponse>
   */
  create(publisherId: string, offerId: string, planId: string, parameters: Models.AgreementTerms, options?: msRest.RequestOptionsBase): Promise<Models.MarketplaceAgreementsCreateResponse>;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param parameters Parameters supplied to the Create Marketplace Terms operation.
   * @param callback The callback
   */
  create(publisherId: string, offerId: string, planId: string, parameters: Models.AgreementTerms, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param parameters Parameters supplied to the Create Marketplace Terms operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(publisherId: string, offerId: string, planId: string, parameters: Models.AgreementTerms, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  create(publisherId: string, offerId: string, planId: string, parameters: Models.AgreementTerms, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgreementTerms>, callback?: msRest.ServiceCallback<Models.AgreementTerms>): Promise<Models.MarketplaceAgreementsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.MarketplaceAgreementsCreateResponse>;
  }

  /**
   * Sign marketplace terms.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param [options] The optional parameters
   * @returns Promise<Models.MarketplaceAgreementsSignResponse>
   */
  sign(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase): Promise<Models.MarketplaceAgreementsSignResponse>;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param callback The callback
   */
  sign(publisherId: string, offerId: string, planId: string, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The optional parameters
   * @param callback The callback
   */
  sign(publisherId: string, offerId: string, planId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  sign(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgreementTerms>, callback?: msRest.ServiceCallback<Models.AgreementTerms>): Promise<Models.MarketplaceAgreementsSignResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        options
      },
      signOperationSpec,
      callback) as Promise<Models.MarketplaceAgreementsSignResponse>;
  }

  /**
   * Cancel marketplace terms.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param [options] The optional parameters
   * @returns Promise<Models.MarketplaceAgreementsCancelResponse>
   */
  cancel(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase): Promise<Models.MarketplaceAgreementsCancelResponse>;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param callback The callback
   */
  cancel(publisherId: string, offerId: string, planId: string, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancel(publisherId: string, offerId: string, planId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  cancel(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgreementTerms>, callback?: msRest.ServiceCallback<Models.AgreementTerms>): Promise<Models.MarketplaceAgreementsCancelResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        options
      },
      cancelOperationSpec,
      callback) as Promise<Models.MarketplaceAgreementsCancelResponse>;
  }

  /**
   * Get marketplace agreement.
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param [options] The optional parameters
   * @returns Promise<Models.MarketplaceAgreementsGetAgreementResponse>
   */
  getAgreement(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase): Promise<Models.MarketplaceAgreementsGetAgreementResponse>;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param callback The callback
   */
  getAgreement(publisherId: string, offerId: string, planId: string, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  /**
   * @param publisherId Publisher identifier string of image being deployed.
   * @param offerId Offer identifier string of image being deployed.
   * @param planId Plan identifier string of image being deployed.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgreement(publisherId: string, offerId: string, planId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgreementTerms>): void;
  getAgreement(publisherId: string, offerId: string, planId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgreementTerms>, callback?: msRest.ServiceCallback<Models.AgreementTerms>): Promise<Models.MarketplaceAgreementsGetAgreementResponse> {
    return this.client.sendOperationRequest(
      {
        publisherId,
        offerId,
        planId,
        options
      },
      getAgreementOperationSpec,
      callback) as Promise<Models.MarketplaceAgreementsGetAgreementResponse>;
  }

  /**
   * List marketplace agreements in the subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.MarketplaceAgreementsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.MarketplaceAgreementsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AgreementTerms[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AgreementTerms[]>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AgreementTerms[]>, callback?: msRest.ServiceCallback<Models.AgreementTerms[]>): Promise<Models.MarketplaceAgreementsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.MarketplaceAgreementsListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.offerType,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current",
  urlParameters: [
    Parameters.offerType,
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AgreementTerms,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const signOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAgreementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.publisherId,
    Parameters.offerId,
    Parameters.planId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgreementTerms
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgreementTerms"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
