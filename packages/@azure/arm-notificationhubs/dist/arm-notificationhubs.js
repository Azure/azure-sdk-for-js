/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmNotificationhubs = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuName.
     * Possible values include: 'Free', 'Basic', 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Free"] = "Free";
        SkuName["Basic"] = "Basic";
        SkuName["Standard"] = "Standard";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for NamespaceType.
     * Possible values include: 'Messaging', 'NotificationHub'
     * @readonly
     * @enum {string}
     */
    var NamespaceType;
    (function (NamespaceType) {
        NamespaceType["Messaging"] = "Messaging";
        NamespaceType["NotificationHub"] = "NotificationHub";
    })(NamespaceType || (NamespaceType = {}));
    /**
     * Defines values for AccessRights.
     * Possible values include: 'Manage', 'Send', 'Listen'
     * @readonly
     * @enum {string}
     */
    var AccessRights;
    (function (AccessRights) {
        AccessRights["Manage"] = "Manage";
        AccessRights["Send"] = "Send";
        AccessRights["Listen"] = "Listen";
    })(AccessRights || (AccessRights = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuName () { return SkuName; },
        get NamespaceType () { return NamespaceType; },
        get AccessRights () { return AccessRights; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CheckAvailabilityParameters = {
        serializedName: "CheckAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckAvailabilityParameters",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                isAvailiable: {
                    serializedName: "isAvailiable",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }
            }
        }
    };
    var CheckAvailabilityResult = {
        serializedName: "CheckAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckAvailabilityResult",
            modelProperties: __assign({}, Resource.type.modelProperties, { isAvailiable: {
                    serializedName: "isAvailiable",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var NamespaceProperties = {
        serializedName: "NamespaceProperties",
        type: {
            name: "Composite",
            className: "NamespaceProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                region: {
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                },
                metricId: {
                    readOnly: true,
                    serializedName: "metricId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                createdAt: {
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedAt: {
                    serializedName: "updatedAt",
                    type: {
                        name: "DateTime"
                    }
                },
                serviceBusEndpoint: {
                    serializedName: "serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                scaleUnit: {
                    serializedName: "scaleUnit",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                critical: {
                    serializedName: "critical",
                    type: {
                        name: "Boolean"
                    }
                },
                dataCenter: {
                    serializedName: "dataCenter",
                    type: {
                        name: "String"
                    }
                },
                namespaceType: {
                    serializedName: "namespaceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Messaging",
                            "NotificationHub"
                        ]
                    }
                }
            }
        }
    };
    var NamespaceCreateOrUpdateParameters = {
        serializedName: "NamespaceCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "NamespaceCreateOrUpdateParameters",
            modelProperties: __assign({}, Resource.type.modelProperties, { namespaceCreateOrUpdateParametersName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, region: {
                    serializedName: "properties.region",
                    type: {
                        name: "String"
                    }
                }, metricId: {
                    readOnly: true,
                    serializedName: "properties.metricId",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, createdAt: {
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, serviceBusEndpoint: {
                    serializedName: "properties.serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                }, subscriptionId: {
                    serializedName: "properties.subscriptionId",
                    type: {
                        name: "String"
                    }
                }, scaleUnit: {
                    serializedName: "properties.scaleUnit",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, critical: {
                    serializedName: "properties.critical",
                    type: {
                        name: "Boolean"
                    }
                }, dataCenter: {
                    serializedName: "properties.dataCenter",
                    type: {
                        name: "String"
                    }
                }, namespaceType: {
                    serializedName: "properties.namespaceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Messaging",
                            "NotificationHub"
                        ]
                    }
                } })
        }
    };
    var NamespacePatchParameters = {
        serializedName: "NamespacePatchParameters",
        type: {
            name: "Composite",
            className: "NamespacePatchParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }
            }
        }
    };
    var NamespaceResource = {
        serializedName: "NamespaceResource",
        type: {
            name: "Composite",
            className: "NamespaceResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { namespaceResourceName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, region: {
                    serializedName: "properties.region",
                    type: {
                        name: "String"
                    }
                }, metricId: {
                    readOnly: true,
                    serializedName: "properties.metricId",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, createdAt: {
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, serviceBusEndpoint: {
                    serializedName: "properties.serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                }, subscriptionId: {
                    serializedName: "properties.subscriptionId",
                    type: {
                        name: "String"
                    }
                }, scaleUnit: {
                    serializedName: "properties.scaleUnit",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                }, critical: {
                    serializedName: "properties.critical",
                    type: {
                        name: "Boolean"
                    }
                }, dataCenter: {
                    serializedName: "properties.dataCenter",
                    type: {
                        name: "String"
                    }
                }, namespaceType: {
                    serializedName: "properties.namespaceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Messaging",
                            "NotificationHub"
                        ]
                    }
                } })
        }
    };
    var SharedAccessAuthorizationRuleProperties = {
        serializedName: "SharedAccessAuthorizationRuleProperties",
        type: {
            name: "Composite",
            className: "SharedAccessAuthorizationRuleProperties",
            modelProperties: {
                rights: {
                    serializedName: "rights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Manage",
                                    "Send",
                                    "Listen"
                                ]
                            }
                        }
                    }
                },
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                keyName: {
                    readOnly: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                claimType: {
                    readOnly: true,
                    serializedName: "claimType",
                    type: {
                        name: "String"
                    }
                },
                claimValue: {
                    readOnly: true,
                    serializedName: "claimValue",
                    type: {
                        name: "String"
                    }
                },
                modifiedTime: {
                    readOnly: true,
                    serializedName: "modifiedTime",
                    type: {
                        name: "String"
                    }
                },
                createdTime: {
                    readOnly: true,
                    serializedName: "createdTime",
                    type: {
                        name: "String"
                    }
                },
                revision: {
                    readOnly: true,
                    serializedName: "revision",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SharedAccessAuthorizationRuleCreateOrUpdateParameters = {
        serializedName: "SharedAccessAuthorizationRuleCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "SharedAccessAuthorizationRuleCreateOrUpdateParameters",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SharedAccessAuthorizationRuleProperties"
                    }
                }
            }
        }
    };
    var SharedAccessAuthorizationRuleResource = {
        serializedName: "SharedAccessAuthorizationRuleResource",
        type: {
            name: "Composite",
            className: "SharedAccessAuthorizationRuleResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { rights: {
                    serializedName: "properties.rights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Manage",
                                    "Send",
                                    "Listen"
                                ]
                            }
                        }
                    }
                }, primaryKey: {
                    readOnly: true,
                    serializedName: "properties.primaryKey",
                    type: {
                        name: "String"
                    }
                }, secondaryKey: {
                    readOnly: true,
                    serializedName: "properties.secondaryKey",
                    type: {
                        name: "String"
                    }
                }, keyName: {
                    readOnly: true,
                    serializedName: "properties.keyName",
                    type: {
                        name: "String"
                    }
                }, claimType: {
                    readOnly: true,
                    serializedName: "properties.claimType",
                    type: {
                        name: "String"
                    }
                }, claimValue: {
                    readOnly: true,
                    serializedName: "properties.claimValue",
                    type: {
                        name: "String"
                    }
                }, modifiedTime: {
                    readOnly: true,
                    serializedName: "properties.modifiedTime",
                    type: {
                        name: "String"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "String"
                    }
                }, revision: {
                    readOnly: true,
                    serializedName: "properties.revision",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ResourceListKeys = {
        serializedName: "ResourceListKeys",
        type: {
            name: "Composite",
            className: "ResourceListKeys",
            modelProperties: {
                primaryConnectionString: {
                    serializedName: "primaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                secondaryConnectionString: {
                    serializedName: "secondaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                keyName: {
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicykeyResource = {
        serializedName: "PolicykeyResource",
        type: {
            name: "Composite",
            className: "PolicykeyResource",
            modelProperties: {
                policyKey: {
                    serializedName: "policyKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApnsCredentialProperties = {
        serializedName: "ApnsCredentialProperties",
        type: {
            name: "Composite",
            className: "ApnsCredentialProperties",
            modelProperties: {
                apnsCertificate: {
                    serializedName: "apnsCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificateKey: {
                    serializedName: "certificateKey",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    serializedName: "endpoint",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                keyId: {
                    serializedName: "keyId",
                    type: {
                        name: "String"
                    }
                },
                appName: {
                    serializedName: "appName",
                    type: {
                        name: "String"
                    }
                },
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                token: {
                    serializedName: "token",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApnsCredential = {
        serializedName: "ApnsCredential",
        type: {
            name: "Composite",
            className: "ApnsCredential",
            modelProperties: {
                apnsCertificate: {
                    serializedName: "properties.apnsCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificateKey: {
                    serializedName: "properties.certificateKey",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                },
                keyId: {
                    serializedName: "properties.keyId",
                    type: {
                        name: "String"
                    }
                },
                appName: {
                    serializedName: "properties.appName",
                    type: {
                        name: "String"
                    }
                },
                appId: {
                    serializedName: "properties.appId",
                    type: {
                        name: "String"
                    }
                },
                token: {
                    serializedName: "properties.token",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WnsCredentialProperties = {
        serializedName: "WnsCredentialProperties",
        type: {
            name: "Composite",
            className: "WnsCredentialProperties",
            modelProperties: {
                packageSid: {
                    serializedName: "packageSid",
                    type: {
                        name: "String"
                    }
                },
                secretKey: {
                    serializedName: "secretKey",
                    type: {
                        name: "String"
                    }
                },
                windowsLiveEndpoint: {
                    serializedName: "windowsLiveEndpoint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WnsCredential = {
        serializedName: "WnsCredential",
        type: {
            name: "Composite",
            className: "WnsCredential",
            modelProperties: {
                packageSid: {
                    serializedName: "properties.packageSid",
                    type: {
                        name: "String"
                    }
                },
                secretKey: {
                    serializedName: "properties.secretKey",
                    type: {
                        name: "String"
                    }
                },
                windowsLiveEndpoint: {
                    serializedName: "properties.windowsLiveEndpoint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GcmCredentialProperties = {
        serializedName: "GcmCredentialProperties",
        type: {
            name: "Composite",
            className: "GcmCredentialProperties",
            modelProperties: {
                gcmEndpoint: {
                    serializedName: "gcmEndpoint",
                    type: {
                        name: "String"
                    }
                },
                googleApiKey: {
                    serializedName: "googleApiKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GcmCredential = {
        serializedName: "GcmCredential",
        type: {
            name: "Composite",
            className: "GcmCredential",
            modelProperties: {
                gcmEndpoint: {
                    serializedName: "properties.gcmEndpoint",
                    type: {
                        name: "String"
                    }
                },
                googleApiKey: {
                    serializedName: "properties.googleApiKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MpnsCredentialProperties = {
        serializedName: "MpnsCredentialProperties",
        type: {
            name: "Composite",
            className: "MpnsCredentialProperties",
            modelProperties: {
                mpnsCertificate: {
                    serializedName: "mpnsCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificateKey: {
                    serializedName: "certificateKey",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MpnsCredential = {
        serializedName: "MpnsCredential",
        type: {
            name: "Composite",
            className: "MpnsCredential",
            modelProperties: {
                mpnsCertificate: {
                    serializedName: "properties.mpnsCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificateKey: {
                    serializedName: "properties.certificateKey",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdmCredentialProperties = {
        serializedName: "AdmCredentialProperties",
        type: {
            name: "Composite",
            className: "AdmCredentialProperties",
            modelProperties: {
                clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    serializedName: "clientSecret",
                    type: {
                        name: "String"
                    }
                },
                authTokenUrl: {
                    serializedName: "authTokenUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdmCredential = {
        serializedName: "AdmCredential",
        type: {
            name: "Composite",
            className: "AdmCredential",
            modelProperties: {
                clientId: {
                    serializedName: "properties.clientId",
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    serializedName: "properties.clientSecret",
                    type: {
                        name: "String"
                    }
                },
                authTokenUrl: {
                    serializedName: "properties.authTokenUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BaiduCredentialProperties = {
        serializedName: "BaiduCredentialProperties",
        type: {
            name: "Composite",
            className: "BaiduCredentialProperties",
            modelProperties: {
                baiduApiKey: {
                    serializedName: "baiduApiKey",
                    type: {
                        name: "String"
                    }
                },
                baiduEndPoint: {
                    serializedName: "baiduEndPoint",
                    type: {
                        name: "String"
                    }
                },
                baiduSecretKey: {
                    serializedName: "baiduSecretKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BaiduCredential = {
        serializedName: "BaiduCredential",
        type: {
            name: "Composite",
            className: "BaiduCredential",
            modelProperties: {
                baiduApiKey: {
                    serializedName: "properties.baiduApiKey",
                    type: {
                        name: "String"
                    }
                },
                baiduEndPoint: {
                    serializedName: "properties.baiduEndPoint",
                    type: {
                        name: "String"
                    }
                },
                baiduSecretKey: {
                    serializedName: "properties.baiduSecretKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NotificationHubProperties = {
        serializedName: "NotificationHubProperties",
        type: {
            name: "Composite",
            className: "NotificationHubProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                registrationTtl: {
                    serializedName: "registrationTtl",
                    type: {
                        name: "String"
                    }
                },
                authorizationRules: {
                    serializedName: "authorizationRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessAuthorizationRuleProperties"
                            }
                        }
                    }
                },
                apnsCredential: {
                    serializedName: "apnsCredential",
                    type: {
                        name: "Composite",
                        className: "ApnsCredential"
                    }
                },
                wnsCredential: {
                    serializedName: "wnsCredential",
                    type: {
                        name: "Composite",
                        className: "WnsCredential"
                    }
                },
                gcmCredential: {
                    serializedName: "gcmCredential",
                    type: {
                        name: "Composite",
                        className: "GcmCredential"
                    }
                },
                mpnsCredential: {
                    serializedName: "mpnsCredential",
                    type: {
                        name: "Composite",
                        className: "MpnsCredential"
                    }
                },
                admCredential: {
                    serializedName: "admCredential",
                    type: {
                        name: "Composite",
                        className: "AdmCredential"
                    }
                },
                baiduCredential: {
                    serializedName: "baiduCredential",
                    type: {
                        name: "Composite",
                        className: "BaiduCredential"
                    }
                }
            }
        }
    };
    var NotificationHubCreateOrUpdateParameters = {
        serializedName: "NotificationHubCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "NotificationHubCreateOrUpdateParameters",
            modelProperties: __assign({}, Resource.type.modelProperties, { notificationHubCreateOrUpdateParametersName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, registrationTtl: {
                    serializedName: "properties.registrationTtl",
                    type: {
                        name: "String"
                    }
                }, authorizationRules: {
                    serializedName: "properties.authorizationRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessAuthorizationRuleProperties"
                            }
                        }
                    }
                }, apnsCredential: {
                    serializedName: "properties.apnsCredential",
                    type: {
                        name: "Composite",
                        className: "ApnsCredential"
                    }
                }, wnsCredential: {
                    serializedName: "properties.wnsCredential",
                    type: {
                        name: "Composite",
                        className: "WnsCredential"
                    }
                }, gcmCredential: {
                    serializedName: "properties.gcmCredential",
                    type: {
                        name: "Composite",
                        className: "GcmCredential"
                    }
                }, mpnsCredential: {
                    serializedName: "properties.mpnsCredential",
                    type: {
                        name: "Composite",
                        className: "MpnsCredential"
                    }
                }, admCredential: {
                    serializedName: "properties.admCredential",
                    type: {
                        name: "Composite",
                        className: "AdmCredential"
                    }
                }, baiduCredential: {
                    serializedName: "properties.baiduCredential",
                    type: {
                        name: "Composite",
                        className: "BaiduCredential"
                    }
                } })
        }
    };
    var NotificationHubPatchParameters = {
        serializedName: "NotificationHubPatchParameters",
        type: {
            name: "Composite",
            className: "NotificationHubPatchParameters",
            modelProperties: __assign({}, Resource.type.modelProperties, { notificationHubPatchParametersName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, registrationTtl: {
                    serializedName: "properties.registrationTtl",
                    type: {
                        name: "String"
                    }
                }, authorizationRules: {
                    serializedName: "properties.authorizationRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessAuthorizationRuleProperties"
                            }
                        }
                    }
                }, apnsCredential: {
                    serializedName: "properties.apnsCredential",
                    type: {
                        name: "Composite",
                        className: "ApnsCredential"
                    }
                }, wnsCredential: {
                    serializedName: "properties.wnsCredential",
                    type: {
                        name: "Composite",
                        className: "WnsCredential"
                    }
                }, gcmCredential: {
                    serializedName: "properties.gcmCredential",
                    type: {
                        name: "Composite",
                        className: "GcmCredential"
                    }
                }, mpnsCredential: {
                    serializedName: "properties.mpnsCredential",
                    type: {
                        name: "Composite",
                        className: "MpnsCredential"
                    }
                }, admCredential: {
                    serializedName: "properties.admCredential",
                    type: {
                        name: "Composite",
                        className: "AdmCredential"
                    }
                }, baiduCredential: {
                    serializedName: "properties.baiduCredential",
                    type: {
                        name: "Composite",
                        className: "BaiduCredential"
                    }
                } })
        }
    };
    var NotificationHubResource = {
        serializedName: "NotificationHubResource",
        type: {
            name: "Composite",
            className: "NotificationHubResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { notificationHubResourceName: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, registrationTtl: {
                    serializedName: "properties.registrationTtl",
                    type: {
                        name: "String"
                    }
                }, authorizationRules: {
                    serializedName: "properties.authorizationRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessAuthorizationRuleProperties"
                            }
                        }
                    }
                }, apnsCredential: {
                    serializedName: "properties.apnsCredential",
                    type: {
                        name: "Composite",
                        className: "ApnsCredential"
                    }
                }, wnsCredential: {
                    serializedName: "properties.wnsCredential",
                    type: {
                        name: "Composite",
                        className: "WnsCredential"
                    }
                }, gcmCredential: {
                    serializedName: "properties.gcmCredential",
                    type: {
                        name: "Composite",
                        className: "GcmCredential"
                    }
                }, mpnsCredential: {
                    serializedName: "properties.mpnsCredential",
                    type: {
                        name: "Composite",
                        className: "MpnsCredential"
                    }
                }, admCredential: {
                    serializedName: "properties.admCredential",
                    type: {
                        name: "Composite",
                        className: "AdmCredential"
                    }
                }, baiduCredential: {
                    serializedName: "properties.baiduCredential",
                    type: {
                        name: "Composite",
                        className: "BaiduCredential"
                    }
                } })
        }
    };
    var DebugSendResult = {
        serializedName: "DebugSendResult",
        type: {
            name: "Composite",
            className: "DebugSendResult",
            modelProperties: {
                success: {
                    serializedName: "success",
                    type: {
                        name: "Number"
                    }
                },
                failure: {
                    serializedName: "failure",
                    type: {
                        name: "Number"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var DebugSendResponse = {
        serializedName: "DebugSendResponse",
        type: {
            name: "Composite",
            className: "DebugSendResponse",
            modelProperties: __assign({}, Resource.type.modelProperties, { success: {
                    serializedName: "properties.success",
                    type: {
                        name: "Number"
                    }
                }, failure: {
                    serializedName: "properties.failure",
                    type: {
                        name: "Number"
                    }
                }, results: {
                    serializedName: "properties.results",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var PnsCredentialsProperties = {
        serializedName: "PnsCredentialsProperties",
        type: {
            name: "Composite",
            className: "PnsCredentialsProperties",
            modelProperties: {
                apnsCredential: {
                    serializedName: "apnsCredential",
                    type: {
                        name: "Composite",
                        className: "ApnsCredential"
                    }
                },
                wnsCredential: {
                    serializedName: "wnsCredential",
                    type: {
                        name: "Composite",
                        className: "WnsCredential"
                    }
                },
                gcmCredential: {
                    serializedName: "gcmCredential",
                    type: {
                        name: "Composite",
                        className: "GcmCredential"
                    }
                },
                mpnsCredential: {
                    serializedName: "mpnsCredential",
                    type: {
                        name: "Composite",
                        className: "MpnsCredential"
                    }
                },
                admCredential: {
                    serializedName: "admCredential",
                    type: {
                        name: "Composite",
                        className: "AdmCredential"
                    }
                },
                baiduCredential: {
                    serializedName: "baiduCredential",
                    type: {
                        name: "Composite",
                        className: "BaiduCredential"
                    }
                }
            }
        }
    };
    var PnsCredentialsResource = {
        serializedName: "PnsCredentialsResource",
        type: {
            name: "Composite",
            className: "PnsCredentialsResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { apnsCredential: {
                    serializedName: "properties.apnsCredential",
                    type: {
                        name: "Composite",
                        className: "ApnsCredential"
                    }
                }, wnsCredential: {
                    serializedName: "properties.wnsCredential",
                    type: {
                        name: "Composite",
                        className: "WnsCredential"
                    }
                }, gcmCredential: {
                    serializedName: "properties.gcmCredential",
                    type: {
                        name: "Composite",
                        className: "GcmCredential"
                    }
                }, mpnsCredential: {
                    serializedName: "properties.mpnsCredential",
                    type: {
                        name: "Composite",
                        className: "MpnsCredential"
                    }
                }, admCredential: {
                    serializedName: "properties.admCredential",
                    type: {
                        name: "Composite",
                        className: "AdmCredential"
                    }
                }, baiduCredential: {
                    serializedName: "properties.baiduCredential",
                    type: {
                        name: "Composite",
                        className: "BaiduCredential"
                    }
                } })
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NamespaceListResult = {
        serializedName: "NamespaceListResult",
        type: {
            name: "Composite",
            className: "NamespaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NamespaceResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedAccessAuthorizationRuleListResult = {
        serializedName: "SharedAccessAuthorizationRuleListResult",
        type: {
            name: "Composite",
            className: "SharedAccessAuthorizationRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessAuthorizationRuleResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NotificationHubListResult = {
        serializedName: "NotificationHubListResult",
        type: {
            name: "Composite",
            className: "NotificationHubListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NotificationHubResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ErrorResponse: ErrorResponse,
        Sku: Sku,
        CheckAvailabilityParameters: CheckAvailabilityParameters,
        Resource: Resource,
        CheckAvailabilityResult: CheckAvailabilityResult,
        NamespaceProperties: NamespaceProperties,
        NamespaceCreateOrUpdateParameters: NamespaceCreateOrUpdateParameters,
        NamespacePatchParameters: NamespacePatchParameters,
        NamespaceResource: NamespaceResource,
        SharedAccessAuthorizationRuleProperties: SharedAccessAuthorizationRuleProperties,
        SharedAccessAuthorizationRuleCreateOrUpdateParameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters,
        SharedAccessAuthorizationRuleResource: SharedAccessAuthorizationRuleResource,
        ResourceListKeys: ResourceListKeys,
        PolicykeyResource: PolicykeyResource,
        ApnsCredentialProperties: ApnsCredentialProperties,
        ApnsCredential: ApnsCredential,
        WnsCredentialProperties: WnsCredentialProperties,
        WnsCredential: WnsCredential,
        GcmCredentialProperties: GcmCredentialProperties,
        GcmCredential: GcmCredential,
        MpnsCredentialProperties: MpnsCredentialProperties,
        MpnsCredential: MpnsCredential,
        AdmCredentialProperties: AdmCredentialProperties,
        AdmCredential: AdmCredential,
        BaiduCredentialProperties: BaiduCredentialProperties,
        BaiduCredential: BaiduCredential,
        NotificationHubProperties: NotificationHubProperties,
        NotificationHubCreateOrUpdateParameters: NotificationHubCreateOrUpdateParameters,
        NotificationHubPatchParameters: NotificationHubPatchParameters,
        NotificationHubResource: NotificationHubResource,
        DebugSendResult: DebugSendResult,
        DebugSendResponse: DebugSendResponse,
        PnsCredentialsProperties: PnsCredentialsProperties,
        PnsCredentialsResource: PnsCredentialsResource,
        SubResource: SubResource,
        OperationListResult: OperationListResult,
        NamespaceListResult: NamespaceListResult,
        SharedAccessAuthorizationRuleListResult: SharedAccessAuthorizationRuleListResult,
        NotificationHubListResult: NotificationHubListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var authorizationRuleName = {
        parameterPath: "authorizationRuleName",
        mapper: {
            required: true,
            serializedName: "authorizationRuleName",
            type: {
                name: "String"
            }
        }
    };
    var namespaceName = {
        parameterPath: "namespaceName",
        mapper: {
            required: true,
            serializedName: "namespaceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var notificationHubName = {
        parameterPath: "notificationHubName",
        mapper: {
            required: true,
            serializedName: "notificationHubName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {NotificationHubsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.NotificationHubs/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CheckAvailabilityParameters: CheckAvailabilityParameters,
        Sku: Sku,
        CheckAvailabilityResult: CheckAvailabilityResult,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        NamespaceCreateOrUpdateParameters: NamespaceCreateOrUpdateParameters,
        NamespaceResource: NamespaceResource,
        NamespacePatchParameters: NamespacePatchParameters,
        SharedAccessAuthorizationRuleCreateOrUpdateParameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters,
        SharedAccessAuthorizationRuleProperties: SharedAccessAuthorizationRuleProperties,
        SharedAccessAuthorizationRuleResource: SharedAccessAuthorizationRuleResource,
        NamespaceListResult: NamespaceListResult,
        SharedAccessAuthorizationRuleListResult: SharedAccessAuthorizationRuleListResult,
        PolicykeyResource: PolicykeyResource,
        ResourceListKeys: ResourceListKeys,
        NotificationHubCreateOrUpdateParameters: NotificationHubCreateOrUpdateParameters,
        ApnsCredential: ApnsCredential,
        WnsCredential: WnsCredential,
        GcmCredential: GcmCredential,
        MpnsCredential: MpnsCredential,
        AdmCredential: AdmCredential,
        BaiduCredential: BaiduCredential,
        NotificationHubPatchParameters: NotificationHubPatchParameters,
        NotificationHubResource: NotificationHubResource,
        DebugSendResult: DebugSendResult,
        DebugSendResponse: DebugSendResponse,
        PnsCredentialsResource: PnsCredentialsResource,
        SubResource: SubResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Namespaces. */
    var Namespaces = /** @class */ (function () {
        /**
         * Create a Namespaces.
         * @param {NotificationHubsManagementClientContext} client Reference to the service client.
         */
        function Namespaces(client) {
            this.client = client;
        }
        Namespaces.prototype.checkAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkAvailabilityOperationSpec, callback);
        };
        Namespaces.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Namespaces.prototype.patch = function (resourceGroupName$$1, namespaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                parameters: parameters,
                options: options
            }, patchOperationSpec, callback);
        };
        /**
         * Deletes an existing namespace. This operation also removes all associated notificationHubs under
         * the namespace.
         * @param resourceGroupName The name of the resource group.
         * @param namespaceName The namespace name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Namespaces.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, namespaceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Namespaces.prototype.get = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Namespaces.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        Namespaces.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec, callback);
        };
        Namespaces.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec, callback);
        };
        Namespaces.prototype.listKeys = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Namespaces.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec, callback);
        };
        /**
         * Deletes an existing namespace. This operation also removes all associated notificationHubs under
         * the namespace.
         * @param resourceGroupName The name of the resource group.
         * @param namespaceName The namespace name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Namespaces.prototype.beginDeleteMethod = function (resourceGroupName$$1, namespaceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Namespaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Namespaces.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec, callback);
        };
        Namespaces.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec, callback);
        };
        return Namespaces;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NamespaceCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NamespaceResource
            },
            201: {
                bodyMapper: NamespaceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var patchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NamespacePatchParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NamespaceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamespaceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAuthorizationRuleOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SharedAccessAuthorizationRuleCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteAuthorizationRuleOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getAuthorizationRuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamespaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAllOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamespaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAuthorizationRulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var regenerateKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PolicykeyResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceListKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamespaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAllNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NamespaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAuthorizationRulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        CheckAvailabilityParameters: CheckAvailabilityParameters,
        Sku: Sku,
        CheckAvailabilityResult: CheckAvailabilityResult,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        NotificationHubCreateOrUpdateParameters: NotificationHubCreateOrUpdateParameters,
        SharedAccessAuthorizationRuleProperties: SharedAccessAuthorizationRuleProperties,
        ApnsCredential: ApnsCredential,
        WnsCredential: WnsCredential,
        GcmCredential: GcmCredential,
        MpnsCredential: MpnsCredential,
        AdmCredential: AdmCredential,
        BaiduCredential: BaiduCredential,
        NotificationHubResource: NotificationHubResource,
        NotificationHubPatchParameters: NotificationHubPatchParameters,
        DebugSendResponse: DebugSendResponse,
        SharedAccessAuthorizationRuleCreateOrUpdateParameters: SharedAccessAuthorizationRuleCreateOrUpdateParameters,
        SharedAccessAuthorizationRuleResource: SharedAccessAuthorizationRuleResource,
        NotificationHubListResult: NotificationHubListResult,
        SharedAccessAuthorizationRuleListResult: SharedAccessAuthorizationRuleListResult,
        ResourceListKeys: ResourceListKeys,
        PolicykeyResource: PolicykeyResource,
        PnsCredentialsResource: PnsCredentialsResource,
        NamespaceCreateOrUpdateParameters: NamespaceCreateOrUpdateParameters,
        NamespaceResource: NamespaceResource,
        DebugSendResult: DebugSendResult,
        SubResource: SubResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NotificationHubs. */
    var NotificationHubs = /** @class */ (function () {
        /**
         * Create a NotificationHubs.
         * @param {NotificationHubsManagementClientContext} client Reference to the service client.
         */
        function NotificationHubs(client) {
            this.client = client;
        }
        NotificationHubs.prototype.checkNotificationHubAvailability = function (resourceGroupName$$1, namespaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                parameters: parameters,
                options: options
            }, checkNotificationHubAvailabilityOperationSpec, callback);
        };
        NotificationHubs.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        NotificationHubs.prototype.patch = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                options: options
            }, patchOperationSpec$1, callback);
        };
        NotificationHubs.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        NotificationHubs.prototype.get = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        NotificationHubs.prototype.debugSend = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                options: options
            }, debugSendOperationSpec, callback);
        };
        NotificationHubs.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec$1, callback);
        };
        NotificationHubs.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec$1, callback);
        };
        NotificationHubs.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec$1, callback);
        };
        NotificationHubs.prototype.list = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        NotificationHubs.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec$1, callback);
        };
        NotificationHubs.prototype.listKeys = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec$1, callback);
        };
        NotificationHubs.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec$1, callback);
        };
        NotificationHubs.prototype.getPnsCredentials = function (resourceGroupName$$1, namespaceName$$1, notificationHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                notificationHubName: notificationHubName$$1,
                options: options
            }, getPnsCredentialsOperationSpec, callback);
        };
        NotificationHubs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        NotificationHubs.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec$1, callback);
        };
        return NotificationHubs;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var checkNotificationHubAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/checkNotificationHubAvailability",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NotificationHubCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NotificationHubResource
            },
            201: {
                bodyMapper: NotificationHubResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var patchOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: NotificationHubPatchParameters
        },
        responses: {
            200: {
                bodyMapper: NotificationHubResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationHubResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var debugSendOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/debugsend",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: {
                serializedName: "parameters",
                type: {
                    name: "Object"
                }
            }
        },
        responses: {
            201: {
                bodyMapper: DebugSendResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateAuthorizationRuleOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SharedAccessAuthorizationRuleCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteAuthorizationRuleOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getAuthorizationRuleOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationHubListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAuthorizationRulesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceListKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var regenerateKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PolicykeyResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ResourceListKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getPnsCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}/pnsCredentials",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            notificationHubName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PnsCredentialsResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationHubListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAuthorizationRulesNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessAuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-notificationhubs";
    var packageVersion = "1.0.0";
    var NotificationHubsManagementClientContext = /** @class */ (function (_super) {
        __extends(NotificationHubsManagementClientContext, _super);
        /**
         * Initializes a new instance of the NotificationHubsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function NotificationHubsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return NotificationHubsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var NotificationHubsManagementClient = /** @class */ (function (_super) {
        __extends(NotificationHubsManagementClient, _super);
        /**
         * Initializes a new instance of the NotificationHubsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function NotificationHubsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.namespaces = new Namespaces(_this);
            _this.notificationHubs = new NotificationHubs(_this);
            return _this;
        }
        return NotificationHubsManagementClient;
    }(NotificationHubsManagementClientContext));

    exports.NotificationHubsManagementClient = NotificationHubsManagementClient;
    exports.NotificationHubsManagementClientContext = NotificationHubsManagementClientContext;
    exports.NotificationHubsManagementModels = index;
    exports.NotificationHubsManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Namespaces = Namespaces;
    exports.NotificationHubs = NotificationHubs;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-notificationhubs.js.map
