/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmServicefabricmesh = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for IngressQoSLevel.
     * Possible values include: 'Bronze'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IngressQoSLevel =
     * <IngressQoSLevel>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IngressQoSLevel;
    (function (IngressQoSLevel) {
        IngressQoSLevel["Bronze"] = "Bronze";
    })(IngressQoSLevel || (IngressQoSLevel = {}));
    /**
     * Defines values for HealthState.
     * Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HealthState =
     * <HealthState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HealthState;
    (function (HealthState) {
        /**
         * Indicates an invalid health state. All Service Fabric enumerations have
         * the invalid type. The value is zero.
         */
        HealthState["Invalid"] = "Invalid";
        /**
         * Indicates the health state is okay. The value is 1.
         */
        HealthState["Ok"] = "Ok";
        /**
         * Indicates the health state is at a warning level. The value is 2.
         */
        HealthState["Warning"] = "Warning";
        /**
         * Indicates the health state is at an error level. Error health state should
         * be investigated, as they can impact the correct functionality of the
         * cluster. The value is 3.
         */
        HealthState["Error"] = "Error";
        /**
         * Indicates an unknown health status. The value is 65535.
         */
        HealthState["Unknown"] = "Unknown";
    })(HealthState || (HealthState = {}));
    /**
     * Defines values for ServiceResourceStatus.
     * Possible values include: 'Unknown', 'Active', 'Upgrading', 'Deleting',
     * 'Creating', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServiceResourceStatus =
     * <ServiceResourceStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServiceResourceStatus;
    (function (ServiceResourceStatus) {
        ServiceResourceStatus["Unknown"] = "Unknown";
        ServiceResourceStatus["Active"] = "Active";
        ServiceResourceStatus["Upgrading"] = "Upgrading";
        ServiceResourceStatus["Deleting"] = "Deleting";
        ServiceResourceStatus["Creating"] = "Creating";
        ServiceResourceStatus["Failed"] = "Failed";
    })(ServiceResourceStatus || (ServiceResourceStatus = {}));
    /**
     * Defines values for ApplicationResourceStatus.
     * Possible values include: 'Invalid', 'Ready', 'Upgrading', 'Creating',
     * 'Deleting', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationResourceStatus =
     * <ApplicationResourceStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationResourceStatus;
    (function (ApplicationResourceStatus) {
        ApplicationResourceStatus["Invalid"] = "Invalid";
        ApplicationResourceStatus["Ready"] = "Ready";
        ApplicationResourceStatus["Upgrading"] = "Upgrading";
        ApplicationResourceStatus["Creating"] = "Creating";
        ApplicationResourceStatus["Deleting"] = "Deleting";
        ApplicationResourceStatus["Failed"] = "Failed";
    })(ApplicationResourceStatus || (ApplicationResourceStatus = {}));
    /**
     * Defines values for OperatingSystemTypes.
     * Possible values include: 'Linux', 'Windows'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperatingSystemTypes =
     * <OperatingSystemTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperatingSystemTypes;
    (function (OperatingSystemTypes) {
        OperatingSystemTypes["Linux"] = "Linux";
        OperatingSystemTypes["Windows"] = "Windows";
    })(OperatingSystemTypes || (OperatingSystemTypes = {}));
    /**
     * Defines values for DiagnosticsSinkKind.
     * Possible values include: 'Invalid', 'AzureInternalMonitoringPipeline'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DiagnosticsSinkKind =
     * <DiagnosticsSinkKind>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DiagnosticsSinkKind;
    (function (DiagnosticsSinkKind) {
        /**
         * Indicates an invalid sink kind. All Service Fabric enumerations have the
         * invalid type.
         */
        DiagnosticsSinkKind["Invalid"] = "Invalid";
        /**
         * Diagnostics settings for Geneva.
         */
        DiagnosticsSinkKind["AzureInternalMonitoringPipeline"] = "AzureInternalMonitoringPipeline";
    })(DiagnosticsSinkKind || (DiagnosticsSinkKind = {}));

    var index = /*#__PURE__*/Object.freeze({
        get IngressQoSLevel () { return IngressQoSLevel; },
        get HealthState () { return HealthState; },
        get ServiceResourceStatus () { return ServiceResourceStatus; },
        get ApplicationResourceStatus () { return ApplicationResourceStatus; },
        get OperatingSystemTypes () { return OperatingSystemTypes; },
        get DiagnosticsSinkKind () { return DiagnosticsSinkKind; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var ManagedProxyResource = {
        serializedName: "ManagedProxyResource",
        type: {
            name: "Composite",
            className: "ManagedProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ProvisionedResourceProperties = {
        serializedName: "ProvisionedResourceProperties",
        type: {
            name: "Composite",
            className: "ProvisionedResourceProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Layer4IngressConfig = {
        serializedName: "Layer4IngressConfig",
        type: {
            name: "Composite",
            className: "Layer4IngressConfig",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publicPort: {
                    serializedName: "publicPort",
                    type: {
                        name: "Number"
                    }
                },
                applicationName: {
                    serializedName: "applicationName",
                    type: {
                        name: "String"
                    }
                },
                serviceName: {
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                },
                endpointName: {
                    serializedName: "endpointName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IngressConfig = {
        serializedName: "IngressConfig",
        type: {
            name: "Composite",
            className: "IngressConfig",
            modelProperties: {
                qosLevel: {
                    serializedName: "qosLevel",
                    type: {
                        name: "String"
                    }
                },
                layer4: {
                    serializedName: "layer4",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Layer4IngressConfig"
                            }
                        }
                    }
                },
                publicIPAddress: {
                    readOnly: true,
                    serializedName: "publicIPAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkResourceDescription = {
        serializedName: "NetworkResourceDescription",
        type: {
            name: "Composite",
            className: "NetworkResourceDescription",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, addressPrefix: {
                    required: true,
                    serializedName: "properties.addressPrefix",
                    type: {
                        name: "String"
                    }
                }, ingressConfig: {
                    serializedName: "properties.ingressConfig",
                    type: {
                        name: "Composite",
                        className: "IngressConfig"
                    }
                } })
        }
    };
    var NetworkProperties = {
        serializedName: "NetworkProperties",
        type: {
            name: "Composite",
            className: "NetworkProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                addressPrefix: {
                    required: true,
                    serializedName: "addressPrefix",
                    type: {
                        name: "String"
                    }
                },
                ingressConfig: {
                    serializedName: "ingressConfig",
                    type: {
                        name: "Composite",
                        className: "IngressConfig"
                    }
                }
            }
        }
    };
    var VolumeProviderParametersAzureFile = {
        serializedName: "VolumeProviderParametersAzureFile",
        type: {
            name: "Composite",
            className: "VolumeProviderParametersAzureFile",
            modelProperties: {
                accountName: {
                    required: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                accountKey: {
                    serializedName: "accountKey",
                    type: {
                        name: "String"
                    }
                },
                shareName: {
                    required: true,
                    serializedName: "shareName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VolumeResourceDescription = {
        serializedName: "VolumeResourceDescription",
        type: {
            name: "Composite",
            className: "VolumeResourceDescription",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, provider: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.provider",
                    defaultValue: 'SFAzureFile',
                    type: {
                        name: "String"
                    }
                }, azureFileParameters: {
                    serializedName: "properties.azureFileParameters",
                    type: {
                        name: "Composite",
                        className: "VolumeProviderParametersAzureFile"
                    }
                } })
        }
    };
    var VolumeProperties = {
        serializedName: "VolumeProperties",
        type: {
            name: "Composite",
            className: "VolumeProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    required: true,
                    isConstant: true,
                    serializedName: "provider",
                    defaultValue: 'SFAzureFile',
                    type: {
                        name: "String"
                    }
                },
                azureFileParameters: {
                    serializedName: "azureFileParameters",
                    type: {
                        name: "Composite",
                        className: "VolumeProviderParametersAzureFile"
                    }
                }
            }
        }
    };
    var ServiceResourceDescription = {
        serializedName: "ServiceResourceDescription",
        type: {
            name: "Composite",
            className: "ServiceResourceDescription",
            modelProperties: __assign({}, ManagedProxyResource.type.modelProperties, { osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, codePackages: {
                    required: true,
                    serializedName: "properties.codePackages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerCodePackageProperties"
                            }
                        }
                    }
                }, networkRefs: {
                    serializedName: "properties.networkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkRef"
                            }
                        }
                    }
                }, diagnostics: {
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsRef"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, replicaCount: {
                    serializedName: "properties.replicaCount",
                    type: {
                        name: "Number"
                    }
                }, healthState: {
                    serializedName: "properties.healthState",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DiagnosticsSinkProperties = {
        serializedName: "DiagnosticsSinkProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "DiagnosticsSinkProperties",
            className: "DiagnosticsSinkProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticsDescription = {
        serializedName: "DiagnosticsDescription",
        type: {
            name: "Composite",
            className: "DiagnosticsDescription",
            modelProperties: {
                sinks: {
                    serializedName: "sinks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "kind",
                                    clientName: "kind"
                                },
                                uberParent: "DiagnosticsSinkProperties",
                                className: "DiagnosticsSinkProperties"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultSinkRefs: {
                    serializedName: "defaultSinkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationResourceDescription = {
        serializedName: "ApplicationResourceDescription",
        type: {
            name: "Composite",
            className: "ApplicationResourceDescription",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, debugParams: {
                    serializedName: "properties.debugParams",
                    type: {
                        name: "String"
                    }
                }, services: {
                    serializedName: "properties.services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResourceDescription"
                            }
                        }
                    }
                }, healthState: {
                    readOnly: true,
                    serializedName: "properties.healthState",
                    type: {
                        name: "String"
                    }
                }, unhealthyEvaluation: {
                    readOnly: true,
                    serializedName: "properties.unhealthyEvaluation",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, serviceNames: {
                    readOnly: true,
                    serializedName: "properties.serviceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, diagnostics: {
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsDescription"
                    }
                } })
        }
    };
    var ApplicationProperties = {
        serializedName: "ApplicationProperties",
        type: {
            name: "Composite",
            className: "ApplicationProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                debugParams: {
                    serializedName: "debugParams",
                    type: {
                        name: "String"
                    }
                },
                services: {
                    serializedName: "services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResourceDescription"
                            }
                        }
                    }
                },
                healthState: {
                    readOnly: true,
                    serializedName: "healthState",
                    type: {
                        name: "String"
                    }
                },
                unhealthyEvaluation: {
                    readOnly: true,
                    serializedName: "unhealthyEvaluation",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                serviceNames: {
                    readOnly: true,
                    serializedName: "serviceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                diagnostics: {
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsDescription"
                    }
                }
            }
        }
    };
    var ContainerState = {
        serializedName: "ContainerState",
        type: {
            name: "Composite",
            className: "ContainerState",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "String"
                    }
                },
                finishTime: {
                    serializedName: "finishTime",
                    type: {
                        name: "DateTime"
                    }
                },
                detailStatus: {
                    serializedName: "detailStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerEvent = {
        serializedName: "ContainerEvent",
        type: {
            name: "Composite",
            className: "ContainerEvent",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                firstTimestamp: {
                    serializedName: "firstTimestamp",
                    type: {
                        name: "String"
                    }
                },
                lastTimestamp: {
                    serializedName: "lastTimestamp",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerInstanceView = {
        serializedName: "ContainerInstanceView",
        type: {
            name: "Composite",
            className: "ContainerInstanceView",
            modelProperties: {
                restartCount: {
                    serializedName: "restartCount",
                    type: {
                        name: "Number"
                    }
                },
                currentState: {
                    serializedName: "currentState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerEvent"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerLabel = {
        serializedName: "ContainerLabel",
        type: {
            name: "Composite",
            className: "ContainerLabel",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerLogs = {
        serializedName: "ContainerLogs",
        type: {
            name: "Composite",
            className: "ContainerLogs",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageRegistryCredential = {
        serializedName: "ImageRegistryCredential",
        type: {
            name: "Composite",
            className: "ImageRegistryCredential",
            modelProperties: {
                server: {
                    required: true,
                    serializedName: "server",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceLimits = {
        serializedName: "ResourceLimits",
        type: {
            name: "Composite",
            className: "ResourceLimits",
            modelProperties: {
                memoryInGB: {
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceRequests = {
        serializedName: "ResourceRequests",
        type: {
            name: "Composite",
            className: "ResourceRequests",
            modelProperties: {
                memoryInGB: {
                    required: true,
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    required: true,
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceRequirements = {
        serializedName: "ResourceRequirements",
        type: {
            name: "Composite",
            className: "ResourceRequirements",
            modelProperties: {
                requests: {
                    required: true,
                    serializedName: "requests",
                    type: {
                        name: "Composite",
                        className: "ResourceRequests"
                    }
                },
                limits: {
                    serializedName: "limits",
                    type: {
                        name: "Composite",
                        className: "ResourceLimits"
                    }
                }
            }
        }
    };
    var AvailableOperationDisplay = {
        serializedName: "AvailableOperationDisplay",
        type: {
            name: "Composite",
            className: "AvailableOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationResult = {
        serializedName: "OperationResult",
        type: {
            name: "Composite",
            className: "OperationResult",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "AvailableOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "ErrorModel",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnvironmentVariable = {
        serializedName: "EnvironmentVariable",
        type: {
            name: "Composite",
            className: "EnvironmentVariable",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Setting = {
        serializedName: "Setting",
        type: {
            name: "Composite",
            className: "Setting",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointProperties = {
        serializedName: "EndpointProperties",
        type: {
            name: "Composite",
            className: "EndpointProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerVolume = {
        serializedName: "ContainerVolume",
        type: {
            name: "Composite",
            className: "ContainerVolume",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                readOnly: {
                    serializedName: "readOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                destinationPath: {
                    required: true,
                    serializedName: "destinationPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticsRef = {
        serializedName: "DiagnosticsRef",
        type: {
            name: "Composite",
            className: "DiagnosticsRef",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                sinkRefs: {
                    serializedName: "sinkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerCodePackageProperties = {
        serializedName: "ContainerCodePackageProperties",
        type: {
            name: "Composite",
            className: "ContainerCodePackageProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    required: true,
                    serializedName: "image",
                    type: {
                        name: "String"
                    }
                },
                imageRegistryCredential: {
                    serializedName: "imageRegistryCredential",
                    type: {
                        name: "Composite",
                        className: "ImageRegistryCredential"
                    }
                },
                entrypoint: {
                    serializedName: "entrypoint",
                    type: {
                        name: "String"
                    }
                },
                commands: {
                    serializedName: "commands",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                environmentVariables: {
                    serializedName: "environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                settings: {
                    serializedName: "settings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Setting"
                            }
                        }
                    }
                },
                labels: {
                    serializedName: "labels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerLabel"
                            }
                        }
                    }
                },
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointProperties"
                            }
                        }
                    }
                },
                resources: {
                    required: true,
                    serializedName: "resources",
                    type: {
                        name: "Composite",
                        className: "ResourceRequirements"
                    }
                },
                volumeRefs: {
                    serializedName: "volumeRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerVolume"
                            }
                        }
                    }
                },
                instanceView: {
                    readOnly: true,
                    serializedName: "instanceView",
                    type: {
                        name: "Composite",
                        className: "ContainerInstanceView"
                    }
                },
                diagnostics: {
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsRef"
                    }
                }
            }
        }
    };
    var ServiceReplicaProperties = {
        serializedName: "ServiceReplicaProperties",
        type: {
            name: "Composite",
            className: "ServiceReplicaProperties",
            modelProperties: {
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                codePackages: {
                    required: true,
                    serializedName: "codePackages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerCodePackageProperties"
                            }
                        }
                    }
                },
                networkRefs: {
                    serializedName: "networkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkRef"
                            }
                        }
                    }
                },
                diagnostics: {
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsRef"
                    }
                }
            }
        }
    };
    var ServiceReplicaDescription = {
        serializedName: "ServiceReplicaDescription",
        type: {
            name: "Composite",
            className: "ServiceReplicaDescription",
            modelProperties: __assign({}, ServiceReplicaProperties.type.modelProperties, { replicaName: {
                    serializedName: "replicaName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkRef = {
        serializedName: "NetworkRef",
        type: {
            name: "Composite",
            className: "NetworkRef",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureInternalMonitoringPipelineSinkDescription = {
        serializedName: "AzureInternalMonitoringPipeline",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DiagnosticsSinkProperties.type.polymorphicDiscriminator,
            uberParent: "DiagnosticsSinkProperties",
            className: "AzureInternalMonitoringPipelineSinkDescription",
            modelProperties: __assign({}, DiagnosticsSinkProperties.type.modelProperties, { accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                }, namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                }, maConfigUrl: {
                    serializedName: "maConfigUrl",
                    type: {
                        name: "String"
                    }
                }, fluentdConfigUrl: {
                    serializedName: "fluentdConfigUrl",
                    type: {
                        name: "Object"
                    }
                }, autoKeyConfigUrl: {
                    serializedName: "autoKeyConfigUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationResourceDescriptionList = {
        serializedName: "ApplicationResourceDescriptionList",
        type: {
            name: "Composite",
            className: "ApplicationResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceList = {
        serializedName: "ServiceList",
        type: {
            name: "Composite",
            className: "ServiceList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceReplicaList = {
        serializedName: "ServiceReplicaList",
        type: {
            name: "Composite",
            className: "ServiceReplicaList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceReplicaDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationResult"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkResourceDescriptionList = {
        serializedName: "NetworkResourceDescriptionList",
        type: {
            name: "Composite",
            className: "NetworkResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VolumeResourceDescriptionList = {
        serializedName: "VolumeResourceDescriptionList",
        type: {
            name: "Composite",
            className: "VolumeResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'DiagnosticsSinkProperties': DiagnosticsSinkProperties,
        'DiagnosticsSinkProperties.AzureInternalMonitoringPipeline': AzureInternalMonitoringPipelineSinkDescription
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        TrackedResource: TrackedResource,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        Layer4IngressConfig: Layer4IngressConfig,
        IngressConfig: IngressConfig,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkProperties: NetworkProperties,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProperties: VolumeProperties,
        ServiceResourceDescription: ServiceResourceDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        DiagnosticsDescription: DiagnosticsDescription,
        ApplicationResourceDescription: ApplicationResourceDescription,
        ApplicationProperties: ApplicationProperties,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        ContainerInstanceView: ContainerInstanceView,
        ContainerLabel: ContainerLabel,
        ContainerLogs: ContainerLogs,
        ImageRegistryCredential: ImageRegistryCredential,
        ResourceLimits: ResourceLimits,
        ResourceRequests: ResourceRequests,
        ResourceRequirements: ResourceRequirements,
        AvailableOperationDisplay: AvailableOperationDisplay,
        OperationResult: OperationResult,
        ErrorModel: ErrorModel,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        EndpointProperties: EndpointProperties,
        ContainerVolume: ContainerVolume,
        DiagnosticsRef: DiagnosticsRef,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ServiceReplicaProperties: ServiceReplicaProperties,
        ServiceReplicaDescription: ServiceReplicaDescription,
        NetworkRef: NetworkRef,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        ApplicationResourceDescriptionList: ApplicationResourceDescriptionList,
        ServiceList: ServiceList,
        ServiceReplicaList: ServiceReplicaList,
        OperationListResult: OperationListResult,
        NetworkResourceDescriptionList: NetworkResourceDescriptionList,
        VolumeResourceDescriptionList: VolumeResourceDescriptionList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ApplicationResourceDescription: ApplicationResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ServiceResourceDescription: ServiceResourceDescription,
        ManagedProxyResource: ManagedProxyResource,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ContainerVolume: ContainerVolume,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        DiagnosticsRef: DiagnosticsRef,
        NetworkRef: NetworkRef,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        ErrorModel: ErrorModel,
        ApplicationResourceDescriptionList: ApplicationResourceDescriptionList,
        ProxyResource: ProxyResource,
        NetworkResourceDescription: NetworkResourceDescription,
        IngressConfig: IngressConfig,
        Layer4IngressConfig: Layer4IngressConfig,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-07-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var applicationName = {
        parameterPath: "applicationName",
        mapper: {
            required: true,
            serializedName: "applicationName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var codePackageName = {
        parameterPath: "codePackageName",
        mapper: {
            required: true,
            serializedName: "codePackageName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var networkName = {
        parameterPath: "networkName",
        mapper: {
            required: true,
            serializedName: "networkName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var replicaName = {
        parameterPath: "replicaName",
        mapper: {
            required: true,
            serializedName: "replicaName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var serviceName = {
        parameterPath: "serviceName",
        mapper: {
            required: true,
            serializedName: "serviceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tail = {
        parameterPath: [
            "options",
            "tail"
        ],
        mapper: {
            serializedName: "tail",
            type: {
                name: "Number"
            }
        }
    };
    var volumeName = {
        parameterPath: "volumeName",
        mapper: {
            required: true,
            serializedName: "volumeName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Application. */
    var Application = /** @class */ (function () {
        /**
         * Create a Application.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Application(client) {
            this.client = client;
        }
        Application.prototype.create = function (resourceGroupName$$1, applicationName$$1, applicationResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                applicationResourceDescription: applicationResourceDescription,
                options: options
            }, createOperationSpec, callback);
        };
        Application.prototype.get = function (resourceGroupName$$1, applicationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Application.prototype.deleteMethod = function (resourceGroupName$$1, applicationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Application.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Application.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Application.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Application.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return Application;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "applicationResourceDescription",
            mapper: __assign({}, ApplicationResourceDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescription
            },
            201: {
                bodyMapper: ApplicationResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/applications",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceList: ServiceList,
        ServiceResourceDescription: ServiceResourceDescription,
        ManagedProxyResource: ManagedProxyResource,
        BaseResource: BaseResource,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ContainerVolume: ContainerVolume,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        DiagnosticsRef: DiagnosticsRef,
        NetworkRef: NetworkRef,
        CloudError: CloudError,
        Resource: Resource,
        ProxyResource: ProxyResource,
        TrackedResource: TrackedResource,
        NetworkResourceDescription: NetworkResourceDescription,
        IngressConfig: IngressConfig,
        Layer4IngressConfig: Layer4IngressConfig,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Service. */
    var Service = /** @class */ (function () {
        /**
         * Create a Service.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Service(client) {
            this.client = client;
        }
        Service.prototype.listByApplicationName = function (resourceGroupName$$1, applicationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                options: options
            }, listByApplicationNameOperationSpec, callback);
        };
        Service.prototype.get = function (resourceGroupName$$1, applicationName$$1, serviceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                serviceName: serviceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Service.prototype.listByApplicationNameNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByApplicationNameNextOperationSpec, callback);
        };
        return Service;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listByApplicationNameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceDescription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByApplicationNameNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceReplicaList: ServiceReplicaList,
        ServiceReplicaDescription: ServiceReplicaDescription,
        ServiceReplicaProperties: ServiceReplicaProperties,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ContainerVolume: ContainerVolume,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        DiagnosticsRef: DiagnosticsRef,
        NetworkRef: NetworkRef,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Replica. */
    var Replica = /** @class */ (function () {
        /**
         * Create a Replica.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Replica(client) {
            this.client = client;
        }
        Replica.prototype.listByServiceName = function (resourceGroupName$$1, applicationName$$1, serviceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                serviceName: serviceName$$1,
                options: options
            }, listByServiceNameOperationSpec, callback);
        };
        Replica.prototype.get = function (resourceGroupName$$1, applicationName$$1, serviceName$$1, replicaName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                serviceName: serviceName$$1,
                replicaName: replicaName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Replica.prototype.listByServiceNameNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServiceNameNextOperationSpec, callback);
        };
        return Replica;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByServiceNameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}/replicas",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceReplicaList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}/replicas/{replicaName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName,
            serviceName,
            replicaName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceReplicaDescription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByServiceNameNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceReplicaList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ContainerLogs: ContainerLogs,
        ErrorModel: ErrorModel
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CodePackage. */
    var CodePackage = /** @class */ (function () {
        /**
         * Create a CodePackage.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function CodePackage(client) {
            this.client = client;
        }
        CodePackage.prototype.getContainerLog = function (resourceGroupName$$1, applicationName$$1, serviceName$$1, replicaName$$1, codePackageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationName: applicationName$$1,
                serviceName: serviceName$$1,
                replicaName: replicaName$$1,
                codePackageName: codePackageName$$1,
                options: options
            }, getContainerLogOperationSpec, callback);
        };
        return CodePackage;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getContainerLogOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationName}/services/{serviceName}/replicas/{replicaName}/codePackages/{codePackageName}/logs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationName,
            serviceName,
            replicaName,
            codePackageName
        ],
        queryParameters: [
            apiVersion,
            tail
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerLogs
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        OperationResult: OperationResult,
        AvailableOperationDisplay: AvailableOperationDisplay,
        ErrorModel: ErrorModel
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.ServiceFabricMesh/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        NetworkResourceDescription: NetworkResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        IngressConfig: IngressConfig,
        Layer4IngressConfig: Layer4IngressConfig,
        ErrorModel: ErrorModel,
        NetworkResourceDescriptionList: NetworkResourceDescriptionList,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ContainerVolume: ContainerVolume,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        DiagnosticsRef: DiagnosticsRef,
        NetworkRef: NetworkRef,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Network. */
    var Network = /** @class */ (function () {
        /**
         * Create a Network.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Network(client) {
            this.client = client;
        }
        Network.prototype.create = function (resourceGroupName$$1, networkName$$1, networkResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkName: networkName$$1,
                networkResourceDescription: networkResourceDescription,
                options: options
            }, createOperationSpec$1, callback);
        };
        Network.prototype.get = function (resourceGroupName$$1, networkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkName: networkName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        Network.prototype.deleteMethod = function (resourceGroupName$$1, networkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkName: networkName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Network.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        Network.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        Network.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        Network.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$1, callback);
        };
        return Network;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            networkName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "networkResourceDescription",
            mapper: __assign({}, NetworkResourceDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkResourceDescription
            },
            201: {
                bodyMapper: NetworkResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            networkName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            networkName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/networks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listBySubscriptionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VolumeResourceDescription: VolumeResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        ErrorModel: ErrorModel,
        VolumeResourceDescriptionList: VolumeResourceDescriptionList,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        NetworkResourceDescription: NetworkResourceDescription,
        IngressConfig: IngressConfig,
        Layer4IngressConfig: Layer4IngressConfig,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ContainerVolume: ContainerVolume,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        DiagnosticsRef: DiagnosticsRef,
        NetworkRef: NetworkRef,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Volume. */
    var Volume = /** @class */ (function () {
        /**
         * Create a Volume.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Volume(client) {
            this.client = client;
        }
        Volume.prototype.create = function (resourceGroupName$$1, volumeName$$1, volumeResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                volumeName: volumeName$$1,
                volumeResourceDescription: volumeResourceDescription,
                options: options
            }, createOperationSpec$2, callback);
        };
        Volume.prototype.get = function (resourceGroupName$$1, volumeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                volumeName: volumeName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Volume.prototype.deleteMethod = function (resourceGroupName$$1, volumeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                volumeName: volumeName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Volume.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        Volume.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$2, callback);
        };
        Volume.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        Volume.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$2, callback);
        };
        return Volume;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            volumeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "volumeResourceDescription",
            mapper: __assign({}, VolumeResourceDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VolumeResourceDescription
            },
            201: {
                bodyMapper: VolumeResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            volumeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            volumeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listBySubscriptionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/volumes",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listBySubscriptionNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-servicefabricmesh";
    var packageVersion = "1.0.0-preview";
    var ServiceFabricMeshManagementClientContext = /** @class */ (function (_super) {
        __extends(ServiceFabricMeshManagementClientContext, _super);
        /**
         * Initializes a new instance of the ServiceFabricMeshManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The customer subscription identifier
         * @param [options] The parameter options
         */
        function ServiceFabricMeshManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-07-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ServiceFabricMeshManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ServiceFabricMeshManagementClient = /** @class */ (function (_super) {
        __extends(ServiceFabricMeshManagementClient, _super);
        /**
         * Initializes a new instance of the ServiceFabricMeshManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The customer subscription identifier
         * @param [options] The parameter options
         */
        function ServiceFabricMeshManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.application = new Application(_this);
            _this.service = new Service(_this);
            _this.replica = new Replica(_this);
            _this.codePackage = new CodePackage(_this);
            _this.operations = new Operations(_this);
            _this.network = new Network(_this);
            _this.volume = new Volume(_this);
            return _this;
        }
        return ServiceFabricMeshManagementClient;
    }(ServiceFabricMeshManagementClientContext));

    exports.ServiceFabricMeshManagementClient = ServiceFabricMeshManagementClient;
    exports.ServiceFabricMeshManagementClientContext = ServiceFabricMeshManagementClientContext;
    exports.ServiceFabricMeshManagementModels = index;
    exports.ServiceFabricMeshManagementMappers = mappers;
    exports.Application = Application;
    exports.Service = Service;
    exports.Replica = Replica;
    exports.CodePackage = CodePackage;
    exports.Operations = Operations;
    exports.Network = Network;
    exports.Volume = Volume;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-servicefabricmesh.js.map
