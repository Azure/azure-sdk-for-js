/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing Identity.
 * Identity for the resource.
 *
 */
export interface Identity {
  /**
   * @member {string} type The identity type.
   */
  type: string;
  /**
   * @member {string[]} identityIds The list of identities.
   */
  identityIds: string[];
}

/**
 * @interface
 * An interface representing PrePostStep.
 * The properties that define a step.
 *
 */
export interface PrePostStep {
  /**
   * @member {string} stepId The resource Id of the step to be run.
   */
  stepId: string;
}

/**
 * @interface
 * An interface representing Step.
 * The properties that define an Azure Deployment Manager step.
 *
 */
export interface Step {
  /**
   * @member {string} name The name of the step group.
   */
  name: string;
  /**
   * @member {string[]} [dependsOnStepGroups] The list of step group names on
   * which this step group depends on.
   */
  dependsOnStepGroups?: string[];
  /**
   * @member {PrePostStep[]} [preDeploymentSteps] The list of steps to be run
   * before deploying the target.
   */
  preDeploymentSteps?: PrePostStep[];
  /**
   * @member {string} deploymentTargetId The resource Id of service unit to be
   * deployed. The service unit should be from the service topology referenced
   * in targetServiceTopologyId
   */
  deploymentTargetId: string;
  /**
   * @member {PrePostStep[]} [postDeploymentSteps] The list of steps to be run
   * after deploying the target.
   */
  postDeploymentSteps?: PrePostStep[];
}

/**
 * @interface
 * An interface representing RolloutRequestProperties.
 * The properties for defining a rollout.
 *
 */
export interface RolloutRequestProperties {
  /**
   * @member {string} buildVersion The version of the build being deployed.
   */
  buildVersion: string;
  /**
   * @member {string} [artifactSourceId] The reference to the artifact source
   * resource Id where the payload is located.
   */
  artifactSourceId?: string;
  /**
   * @member {string} targetServiceTopologyId The resource Id of the service
   * topology from which service units are being referenced in step groups to
   * be deployed.
   */
  targetServiceTopologyId: string;
  /**
   * @member {Step[]} stepGroups The list of step groups that define the
   * orchestration.
   */
  stepGroups: Step[];
}

/**
 * @interface
 * An interface representing Resource.
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource. Ex-
   * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TrackedResource.
 * The resource model definition for a ARM tracked top level resource
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} location The geo-location where the resource lives
   */
  location: string;
}

/**
 * @interface
 * An interface representing RolloutRequest.
 * Defines the PUT rollout request body.
 *
 * @extends TrackedResource
 */
export interface RolloutRequest extends TrackedResource {
  /**
   * @member {Identity} identity Identity for the resource.
   */
  identity: Identity;
  /**
   * @member {string} buildVersion The version of the build being deployed.
   */
  buildVersion: string;
  /**
   * @member {string} [artifactSourceId] The reference to the artifact source
   * resource Id where the payload is located.
   */
  artifactSourceId?: string;
  /**
   * @member {string} targetServiceTopologyId The resource Id of the service
   * topology from which service units are being referenced in step groups to
   * be deployed.
   */
  targetServiceTopologyId: string;
  /**
   * @member {Step[]} stepGroups The list of step groups that define the
   * orchestration.
   */
  stepGroups: Step[];
}

/**
 * @interface
 * An interface representing ArtifactSourcePropertiesModel.
 * The properties that define the source location where the artifacts are
 * located.
 *
 */
export interface ArtifactSourcePropertiesModel {
  /**
   * @member {string} sourceType The type of artifact source used.
   */
  sourceType: string;
  /**
   * @member {string} [artifactRoot] The path from the location that the
   * 'authentication' property [say, a SAS URI to the blob container] refers
   * to, to the location of the artifacts. This can be used to differentiate
   * different versions of the artifacts. Or, different types of artifacts like
   * binaries or templates. The location referenced by the authentication
   * property concatenated with this optional artifactRoot path forms the
   * artifact source location where the artifacts are expected to be found.
   */
  artifactRoot?: string;
  /**
   * @member {AuthenticationUnion} authentication The authentication method to
   * use to access the artifact source.
   */
  authentication: AuthenticationUnion;
}

/**
 * @interface
 * An interface representing ArtifactSourceProperties.
 * The properties that define the artifact source.
 *
 * @extends ArtifactSourcePropertiesModel
 */
export interface ArtifactSourceProperties extends ArtifactSourcePropertiesModel {
}

/**
 * @interface
 * An interface representing ArtifactSource.
 * The resource that defines the source location where the artifacts are
 * located.
 *
 * @extends TrackedResource
 */
export interface ArtifactSource extends TrackedResource {
  /**
   * @member {string} sourceType The type of artifact source used.
   */
  sourceType: string;
  /**
   * @member {string} [artifactRoot] The path from the location that the
   * 'authentication' property [say, a SAS URI to the blob container] refers
   * to, to the location of the artifacts. This can be used to differentiate
   * different versions of the artifacts. Or, different types of artifacts like
   * binaries or templates. The location referenced by the authentication
   * property concatenated with this optional artifactRoot path forms the
   * artifact source location where the artifacts are expected to be found.
   */
  artifactRoot?: string;
  /**
   * @member {AuthenticationUnion} authentication The authentication method to
   * use to access the artifact source.
   */
  authentication: AuthenticationUnion;
}

/**
 * Contains the possible cases for Authentication.
 */
export type AuthenticationUnion = Authentication | SasAuthentication;

/**
 * @interface
 * An interface representing Authentication.
 * Defines the authentication method and properties to access the artifacts.
 *
 */
export interface Authentication {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Authentication";
}

/**
 * @interface
 * An interface representing SasProperties.
 * The properties that define SAS authentication.
 *
 */
export interface SasProperties {
  /**
   * @member {string} sasUri The SAS URI to the Azure Storage blob container.
   * Any offset from the root of the container to where the artifacts are
   * located can be defined in the artifactRoot.
   */
  sasUri: string;
}

/**
 * @interface
 * An interface representing SasAuthentication.
 * Defines the properties to access the artifacts using an Azure Storage SAS
 * URI.
 *
 */
export interface SasAuthentication {
  /**
   * @member {string} type Polymorphic Discriminator
   */
  type: "Sas";
  /**
   * @member {string} sasUri The SAS URI to the Azure Storage blob container.
   * Any offset from the root of the container to where the artifacts are
   * located can be defined in the artifactRoot.
   */
  sasUri: string;
}

/**
 * @interface
 * An interface representing CloudErrorBody.
 * Detailed error information of any failure.
 *
 */
export interface CloudErrorBody {
  /**
   * @member {string} [code] Error code string.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly code?: string;
  /**
   * @member {string} [message] Descriptive error information.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {string} [target] Error target
   */
  target?: string;
  /**
   * @member {CloudErrorBody[]} [details] More detailed error information.
   */
  details?: CloudErrorBody[];
}

/**
 * @interface
 * An interface representing RolloutOperationInfo.
 * Detailed runtime information of the rollout.
 *
 */
export interface RolloutOperationInfo {
  /**
   * @member {number} [retryAttempt] The ordinal count of the number of retry
   * attempts on a rollout. 0 if no retries of the rollout have been performed.
   * If the rollout is updated with a PUT, this count is reset to 0.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly retryAttempt?: number;
  /**
   * @member {boolean} [skipSucceededOnRetry] True, if all steps that succeeded
   * on the previous run/attempt were chosen to be skipped in this retry
   * attempt. False, otherwise.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly skipSucceededOnRetry?: boolean;
  /**
   * @member {Date} [startTime] The start time of the rollout in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startTime?: Date;
  /**
   * @member {Date} [endTime] The start time of the rollout in UTC. This
   * property will not be set if the rollout has not completed yet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endTime?: Date;
  /**
   * @member {CloudErrorBody} [error] The detailed error information for any
   * failure.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly error?: CloudErrorBody;
}

/**
 * @interface
 * An interface representing StepOperationInfo.
 * Detailed information of a specific step run.
 *
 */
export interface StepOperationInfo {
  /**
   * @member {string} [deploymentName] The name of the ARM deployment initiated
   * as part of the step.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly deploymentName?: string;
  /**
   * @member {string} [correlationId] Unique identifier to track the request
   * for ARM-based resources.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly correlationId?: string;
  /**
   * @member {Date} [startTime] Start time of the action in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startTime?: Date;
  /**
   * @member {Date} [endTime] End time of the action in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endTime?: Date;
  /**
   * @member {Date} [lastUpdatedTime] Last time in UTC this operation was
   * updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastUpdatedTime?: Date;
  /**
   * @member {CloudErrorBody} [error] The errors, if any, for the action.
   */
  error?: CloudErrorBody;
}

/**
 * @interface
 * An interface representing ResourceOperation.
 * Individial resource operation information.
 *
 */
export interface ResourceOperation {
  /**
   * @member {string} [resourceName] Name of the resource as specified in the
   * artifacts. For ARM resources, this is the name of the resource specified
   * in the template.
   */
  resourceName?: string;
  /**
   * @member {string} [operationId] Unique identifier of the operation. For ARM
   * resources, this is the operationId obtained from ARM service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationId?: string;
  /**
   * @member {string} [resourceType] Type of the resource as specified in the
   * artifacts. For ARM resources, this is the type of the resource specified
   * in the template.
   */
  resourceType?: string;
  /**
   * @member {string} [provisioningState] State of the resource deployment. For
   * ARM resources, this is the current provisioning state of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [statusMessage] Descriptive information of the resource
   * operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusMessage?: string;
  /**
   * @member {string} [statusCode] Http status code of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusCode?: string;
}

/**
 * @interface
 * An interface representing Message.
 * Supplementary contextual messages during a rollout.
 *
 */
export interface Message {
  /**
   * @member {Date} [timeStamp] Time in UTC this message was provided.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timeStamp?: Date;
  /**
   * @member {string} [message] The actual message text.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing RolloutStep.
 * Defines a specific step on a target service unit.
 *
 */
export interface RolloutStep {
  /**
   * @member {string} name Name of the step.
   */
  name: string;
  /**
   * @member {string} [status] Current state of the step.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {string} [stepGroup] The step group the current step is part of.
   */
  stepGroup?: string;
  /**
   * @member {StepOperationInfo} [operationInfo] Detailed information of
   * specific action execution.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationInfo?: StepOperationInfo;
  /**
   * @member {ResourceOperation[]} [resourceOperations] Set of resource
   * operations that were performed, if any, on an Azure resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceOperations?: ResourceOperation[];
  /**
   * @member {Message[]} [messages] Supplementary informative messages during
   * rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly messages?: Message[];
}

/**
 * @interface
 * An interface representing ServiceUnitProperties.
 * Defines the properties of a service unit.
 *
 */
export interface ServiceUnitProperties {
  /**
   * @member {string} targetResourceGroup The Azure Resource Group to which the
   * resources in the service unit belong to or should be deployed to.
   */
  targetResourceGroup: string;
  /**
   * @member {DeploymentMode} deploymentMode Describes the type of ARM
   * deployment to be performed on the resource. Possible values include:
   * 'Incremental', 'Complete'
   */
  deploymentMode: DeploymentMode;
  /**
   * @member {ServiceUnitArtifacts} [artifacts] The artifacts for the service
   * unit.
   */
  artifacts?: ServiceUnitArtifacts;
}

/**
 * @interface
 * An interface representing ServiceUnit.
 * Defines a service unit.
 *
 * @extends ServiceUnitProperties
 */
export interface ServiceUnit extends ServiceUnitProperties {
  /**
   * @member {string} [name] Name of the service unit.
   */
  name?: string;
  /**
   * @member {RolloutStep[]} [steps] Detailed step information, if present.
   */
  steps?: RolloutStep[];
}

/**
 * @interface
 * An interface representing ServiceProperties.
 * The properties of a service.
 *
 */
export interface ServiceProperties {
  /**
   * @member {string} targetLocation The Azure location to which the resources
   * in the service belong to or should be deployed to.
   */
  targetLocation: string;
  /**
   * @member {string} targetSubscriptionId The subscription to which the
   * resources in the service belong to or should be deployed to.
   */
  targetSubscriptionId: string;
}

/**
 * @interface
 * An interface representing Service.
 * Defines a service.
 *
 * @extends ServiceProperties
 */
export interface Service extends ServiceProperties {
  /**
   * @member {string} [name] Name of the service.
   */
  name?: string;
  /**
   * @member {ServiceUnit[]} [serviceUnits] The detailed information about the
   * units that make up the service.
   */
  serviceUnits?: ServiceUnit[];
}

/**
 * @interface
 * An interface representing RolloutProperties.
 * The properties that define a rollout.
 *
 */
export interface RolloutProperties {
  /**
   * @member {string} buildVersion The version of the build being deployed.
   */
  buildVersion: string;
  /**
   * @member {string} [artifactSourceId] The reference to the artifact source
   * resource Id where the payload is located.
   */
  artifactSourceId?: string;
  /**
   * @member {string} targetServiceTopologyId The resource Id of the service
   * topology from which service units are being referenced in step groups to
   * be deployed.
   */
  targetServiceTopologyId: string;
  /**
   * @member {Step[]} stepGroups The list of step groups that define the
   * orchestration.
   */
  stepGroups: Step[];
  /**
   * @member {string} [status] The current status of the rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {number} [totalRetryAttempts] The cardinal count of total number
   * of retries performed on the rollout at a given time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalRetryAttempts?: number;
  /**
   * @member {RolloutOperationInfo} [operationInfo] Operational information of
   * the rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * @member {Service[]} [services] The detailed information on the services
   * being deployed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly services?: Service[];
}

/**
 * @interface
 * An interface representing Rollout.
 * Defines the rollout.
 *
 * @extends TrackedResource
 */
export interface Rollout extends TrackedResource {
  /**
   * @member {Identity} [identity] Identity for the resource.
   */
  identity?: Identity;
  /**
   * @member {string} buildVersion The version of the build being deployed.
   */
  buildVersion: string;
  /**
   * @member {string} [artifactSourceId] The reference to the artifact source
   * resource Id where the payload is located.
   */
  artifactSourceId?: string;
  /**
   * @member {string} targetServiceTopologyId The resource Id of the service
   * topology from which service units are being referenced in step groups to
   * be deployed.
   */
  targetServiceTopologyId: string;
  /**
   * @member {Step[]} stepGroups The list of step groups that define the
   * orchestration.
   */
  stepGroups: Step[];
  /**
   * @member {string} [status] The current status of the rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {number} [totalRetryAttempts] The cardinal count of total number
   * of retries performed on the rollout at a given time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalRetryAttempts?: number;
  /**
   * @member {RolloutOperationInfo} [operationInfo] Operational information of
   * the rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * @member {Service[]} [services] The detailed information on the services
   * being deployed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly services?: Service[];
}

/**
 * @interface
 * An interface representing RolloutPropertiesModel.
 * Defines the properties of a rollout.
 *
 */
export interface RolloutPropertiesModel {
  /**
   * @member {string} [status] The current status of the rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {number} [totalRetryAttempts] The cardinal count of total number
   * of retries performed on the rollout at a given time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalRetryAttempts?: number;
  /**
   * @member {RolloutOperationInfo} [operationInfo] Operational information of
   * the rollout.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * @member {Service[]} [services] The detailed information on the services
   * being deployed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly services?: Service[];
}

/**
 * @interface
 * An interface representing ServiceTopologyProperties.
 * The properties of a service topology.
 *
 */
export interface ServiceTopologyProperties {
  /**
   * @member {string} [artifactSourceId] The resource Id of the artifact source
   * that contains the artifacts that can be referenced in the service units.
   */
  artifactSourceId?: string;
}

/**
 * @interface
 * An interface representing ServiceTopologyResourceProperties.
 * The properties that define the service topology.
 *
 * @extends ServiceTopologyProperties
 */
export interface ServiceTopologyResourceProperties extends ServiceTopologyProperties {
}

/**
 * @interface
 * An interface representing ServiceTopologyResource.
 * The resource representation of a service topology.
 *
 * @extends TrackedResource
 */
export interface ServiceTopologyResource extends TrackedResource {
  /**
   * @member {string} [artifactSourceId] The resource Id of the artifact source
   * that contains the artifacts that can be referenced in the service units.
   */
  artifactSourceId?: string;
}

/**
 * @interface
 * An interface representing ServiceResourceProperties.
 * The properties that define a service in a service topology.
 *
 * @extends ServiceProperties
 */
export interface ServiceResourceProperties extends ServiceProperties {
}

/**
 * @interface
 * An interface representing ServiceResource.
 * The resource representation of a service in a service topology.
 *
 * @extends TrackedResource
 */
export interface ServiceResource extends TrackedResource {
  /**
   * @member {string} targetLocation The Azure location to which the resources
   * in the service belong to or should be deployed to.
   */
  targetLocation: string;
  /**
   * @member {string} targetSubscriptionId The subscription to which the
   * resources in the service belong to or should be deployed to.
   */
  targetSubscriptionId: string;
}

/**
 * @interface
 * An interface representing ServiceUnitResourceProperties.
 * The properties that define the service unit.
 *
 * @extends ServiceUnitProperties
 */
export interface ServiceUnitResourceProperties extends ServiceUnitProperties {
}

/**
 * @interface
 * An interface representing ServiceUnitResource.
 * Represents the response of a service unit resource.
 *
 * @extends TrackedResource
 */
export interface ServiceUnitResource extends TrackedResource {
  /**
   * @member {string} targetResourceGroup The Azure Resource Group to which the
   * resources in the service unit belong to or should be deployed to.
   */
  targetResourceGroup: string;
  /**
   * @member {DeploymentMode} deploymentMode Describes the type of ARM
   * deployment to be performed on the resource. Possible values include:
   * 'Incremental', 'Complete'
   */
  deploymentMode: DeploymentMode;
  /**
   * @member {ServiceUnitArtifacts} [artifacts] The artifacts for the service
   * unit.
   */
  artifacts?: ServiceUnitArtifacts;
}

/**
 * @interface
 * An interface representing ServiceUnitArtifacts.
 * Defines the artifacts of a service unit.
 *
 */
export interface ServiceUnitArtifacts {
  /**
   * @member {string} [templateUri] The full URI of the ARM template file with
   * the SAS token.
   */
  templateUri?: string;
  /**
   * @member {string} [parametersUri] The full URI of the ARM parameters file
   * with the SAS token.
   */
  parametersUri?: string;
  /**
   * @member {string} [templateArtifactSourceRelativePath] The path to the ARM
   * template file relative to the artifact source.
   */
  templateArtifactSourceRelativePath?: string;
  /**
   * @member {string} [parametersArtifactSourceRelativePath] The path to the
   * ARM parameters file relative to the artifact source.
   */
  parametersArtifactSourceRelativePath?: string;
}

/**
 * @interface
 * An interface representing OperationDetail.
 * The detail about an operation.
 *
 */
export interface OperationDetail {
  /**
   * @member {string} [provider] The name of the provider that supports the
   * operation.
   */
  provider?: string;
  /**
   * @member {string} [resource] The resource type on which this operation can
   * be performed.
   */
  resource?: string;
  /**
   * @member {string} [operation] The name of the operation.
   */
  operation?: string;
  /**
   * @member {string} [description] The description of the operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * Represents an operation that can be performed on the service.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] The name of the operation.
   */
  name?: string;
  /**
   * @member {OperationDetail} [display] The display name of the operation.
   */
  display?: OperationDetail;
  /**
   * @member {string} [origin] The origin of the operation.
   */
  origin?: string;
  /**
   * @member {any} [properties] The properties of the operation.
   */
  properties?: any;
}

/**
 * Contains the possible cases for StepProperties.
 */
export type StepPropertiesUnion = StepProperties | WaitStepProperties;

/**
 * @interface
 * An interface representing StepProperties.
 * The properties of a step resource.
 *
 */
export interface StepProperties {
  /**
   * @member {string} stepType Polymorphic Discriminator
   */
  stepType: "StepProperties";
}

/**
 * @interface
 * An interface representing StepResource.
 * The resource representation of a rollout step.
 *
 * @extends TrackedResource
 */
export interface StepResource extends TrackedResource {
  /**
   * @member {StepPropertiesUnion} properties The properties that define the
   * step.
   */
  properties: StepPropertiesUnion;
}

/**
 * @interface
 * An interface representing WaitStepAttributes.
 * The parameters for the wait step.
 *
 */
export interface WaitStepAttributes {
  /**
   * @member {string} duration The duration in ISO 8601 format of how long the
   * wait should be.
   */
  duration: string;
}

/**
 * @interface
 * An interface representing WaitStepProperties.
 * Defines the properties of a Wait step.
 *
 */
export interface WaitStepProperties {
  /**
   * @member {string} stepType Polymorphic Discriminator
   */
  stepType: "Wait";
  /**
   * @member {WaitStepAttributes} [attributes] The Wait attributes
   */
  attributes?: WaitStepAttributes;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags
 *
 * @extends Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * @interface
 * An interface representing AzureEntityResource.
 * The resource model definition for a Azure Resource Manager resource with an
 * etag.
 *
 * @extends Resource
 */
export interface AzureEntityResource extends Resource {
  /**
   * @member {string} [etag] Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing StepsCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface StepsCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {StepResource} [stepInfo] The step object.
   */
  stepInfo?: StepResource;
}

/**
 * @interface
 * An interface representing RolloutsCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RolloutsCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {RolloutRequest} [rolloutRequest] Source rollout request object
   * that defines the rollout.
   */
  rolloutRequest?: RolloutRequest;
}

/**
 * @interface
 * An interface representing RolloutsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RolloutsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [retryAttempt] Rollout retry attempt ordinal to get the
   * result of. If not specified, result of the latest attempt will be
   * returned.
   */
  retryAttempt?: number;
}

/**
 * @interface
 * An interface representing RolloutsRestartOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RolloutsRestartOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [skipSucceeded] If true, will skip all succeeded steps
   * so far in the rollout. If false, will execute the entire rollout again
   * regardless of the current state of individual resources. Defaults to false
   * if not specified.
   */
  skipSucceeded?: boolean;
}

/**
 * @interface
 * An interface representing RolloutsBeginCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface RolloutsBeginCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {RolloutRequest} [rolloutRequest] Source rollout request object
   * that defines the rollout.
   */
  rolloutRequest?: RolloutRequest;
}

/**
 * @interface
 * An interface representing ArtifactSourcesCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArtifactSourcesCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {ArtifactSource} [artifactSourceInfo] Source object that defines
   * the resource.
   */
  artifactSourceInfo?: ArtifactSource;
}

/**
 * @interface
 * An interface representing AzureDeploymentManagerOptions.
 * @extends AzureServiceClientOptions
 */
export interface AzureDeploymentManagerOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing ServiceUnitsCreateOrUpdateHeaders.
 * Defines headers for CreateOrUpdate operation.
 *
 */
export interface ServiceUnitsCreateOrUpdateHeaders {
  /**
   * @member {string} [azureAsyncOperation] Contains the status URL on which
   * clients are expected to poll the status of the operation.
   */
  azureAsyncOperation: string;
}

/**
 * @interface
 * An interface representing RolloutsCreateOrUpdateHeaders.
 * Defines headers for CreateOrUpdate operation.
 *
 */
export interface RolloutsCreateOrUpdateHeaders {
  /**
   * @member {string} [azureAsyncOperation] Contains the status URL on which
   * clients are expected to poll the status of the operation.
   */
  azureAsyncOperation: string;
}


/**
 * Defines values for DeploymentMode.
 * Possible values include: 'Incremental', 'Complete'
 * @readonly
 * @enum {string}
 */
export enum DeploymentMode {
  Incremental = 'Incremental',
  Complete = 'Complete',
}

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceTopologiesCreateOrUpdateResponse = ServiceTopologyResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceTopologyResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceTopologiesGetResponse = ServiceTopologyResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceTopologyResource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServicesCreateOrUpdateResponse = ServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServicesGetResponse = ServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceResource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceUnitsCreateOrUpdateResponse = ServiceUnitResource & ServiceUnitsCreateOrUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ServiceUnitsCreateOrUpdateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceUnitResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceUnitsGetResponse = ServiceUnitResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceUnitResource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type StepsCreateOrUpdateResponse = StepResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StepResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type StepsGetResponse = StepResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StepResource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RolloutsCreateOrUpdateResponse = RolloutRequest & RolloutsCreateOrUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: RolloutsCreateOrUpdateHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RolloutRequest;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RolloutsGetResponse = Rollout & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Rollout;
    };
};

/**
 * Contains response data for the cancel operation.
 */
export type RolloutsCancelResponse = Rollout & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Rollout;
    };
};

/**
 * Contains response data for the restart operation.
 */
export type RolloutsRestartResponse = Rollout & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Rollout;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ArtifactSourcesCreateOrUpdateResponse = ArtifactSource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ArtifactSourcesGetResponse = ArtifactSource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type OperationsGetResponse = Array<Operation> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Operation[];
    };
};
