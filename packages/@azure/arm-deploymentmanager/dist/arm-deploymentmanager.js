/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDeploymentmanager = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for DeploymentMode.
     * Possible values include: 'Incremental', 'Complete'
     * @readonly
     * @enum {string}
     */
    var DeploymentMode;
    (function (DeploymentMode) {
        DeploymentMode["Incremental"] = "Incremental";
        DeploymentMode["Complete"] = "Complete";
    })(DeploymentMode || (DeploymentMode = {}));

    var index = /*#__PURE__*/Object.freeze({
        get DeploymentMode () { return DeploymentMode; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                identityIds: {
                    required: true,
                    serializedName: "identityIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrePostStep = {
        serializedName: "PrePostStep",
        type: {
            name: "Composite",
            className: "PrePostStep",
            modelProperties: {
                stepId: {
                    required: true,
                    serializedName: "stepId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Step = {
        serializedName: "Step",
        type: {
            name: "Composite",
            className: "Step",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                dependsOnStepGroups: {
                    serializedName: "dependsOnStepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                preDeploymentSteps: {
                    serializedName: "preDeploymentSteps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrePostStep"
                            }
                        }
                    }
                },
                deploymentTargetId: {
                    required: true,
                    serializedName: "deploymentTargetId",
                    type: {
                        name: "String"
                    }
                },
                postDeploymentSteps: {
                    serializedName: "postDeploymentSteps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrePostStep"
                            }
                        }
                    }
                }
            }
        }
    };
    var RolloutRequestProperties = {
        serializedName: "RolloutRequestProperties",
        type: {
            name: "Composite",
            className: "RolloutRequestProperties",
            modelProperties: {
                buildVersion: {
                    required: true,
                    serializedName: "buildVersion",
                    type: {
                        name: "String"
                    }
                },
                artifactSourceId: {
                    serializedName: "artifactSourceId",
                    type: {
                        name: "String"
                    }
                },
                targetServiceTopologyId: {
                    required: true,
                    serializedName: "targetServiceTopologyId",
                    type: {
                        name: "String"
                    }
                },
                stepGroups: {
                    required: true,
                    serializedName: "stepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Step"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RolloutRequest = {
        serializedName: "RolloutRequest",
        type: {
            name: "Composite",
            className: "RolloutRequest",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { identity: {
                    required: true,
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }, buildVersion: {
                    required: true,
                    serializedName: "properties.buildVersion",
                    type: {
                        name: "String"
                    }
                }, artifactSourceId: {
                    serializedName: "properties.artifactSourceId",
                    type: {
                        name: "String"
                    }
                }, targetServiceTopologyId: {
                    required: true,
                    serializedName: "properties.targetServiceTopologyId",
                    type: {
                        name: "String"
                    }
                }, stepGroups: {
                    required: true,
                    serializedName: "properties.stepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Step"
                            }
                        }
                    }
                } })
        }
    };
    var ArtifactSourcePropertiesModel = {
        serializedName: "ArtifactSourceProperties",
        type: {
            name: "Composite",
            className: "ArtifactSourcePropertiesModel",
            modelProperties: {
                sourceType: {
                    required: true,
                    serializedName: "sourceType",
                    type: {
                        name: "String"
                    }
                },
                artifactRoot: {
                    serializedName: "artifactRoot",
                    type: {
                        name: "String"
                    }
                },
                authentication: {
                    required: true,
                    serializedName: "authentication",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "Authentication",
                        className: "Authentication"
                    }
                }
            }
        }
    };
    var ArtifactSourceProperties = {
        serializedName: "ArtifactSource_properties",
        type: {
            name: "Composite",
            className: "ArtifactSourceProperties",
            modelProperties: __assign({}, ArtifactSourcePropertiesModel.type.modelProperties)
        }
    };
    var ArtifactSource = {
        serializedName: "ArtifactSource",
        type: {
            name: "Composite",
            className: "ArtifactSource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sourceType: {
                    required: true,
                    serializedName: "properties.sourceType",
                    type: {
                        name: "String"
                    }
                }, artifactRoot: {
                    serializedName: "properties.artifactRoot",
                    type: {
                        name: "String"
                    }
                }, authentication: {
                    required: true,
                    serializedName: "properties.authentication",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "Authentication",
                        className: "Authentication"
                    }
                } })
        }
    };
    var Authentication = {
        serializedName: "Authentication",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "Authentication",
            className: "Authentication",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SasProperties = {
        serializedName: "SasProperties",
        type: {
            name: "Composite",
            className: "SasProperties",
            modelProperties: {
                sasUri: {
                    required: true,
                    serializedName: "sasUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SasAuthentication = {
        serializedName: "Sas",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Authentication.type.polymorphicDiscriminator,
            uberParent: "Authentication",
            className: "SasAuthentication",
            modelProperties: __assign({}, Authentication.type.modelProperties, { sasUri: {
                    required: true,
                    serializedName: "properties.sasUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CloudErrorBody = {
        serializedName: "CloudErrorBody",
        type: {
            name: "Composite",
            className: "CloudErrorBody",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudErrorBody"
                            }
                        }
                    }
                }
            }
        }
    };
    var RolloutOperationInfo = {
        serializedName: "RolloutOperationInfo",
        type: {
            name: "Composite",
            className: "RolloutOperationInfo",
            modelProperties: {
                retryAttempt: {
                    readOnly: true,
                    serializedName: "retryAttempt",
                    type: {
                        name: "Number"
                    }
                },
                skipSucceededOnRetry: {
                    readOnly: true,
                    serializedName: "skipSucceededOnRetry",
                    type: {
                        name: "Boolean"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "CloudErrorBody"
                    }
                }
            }
        }
    };
    var StepOperationInfo = {
        serializedName: "StepOperationInfo",
        type: {
            name: "Composite",
            className: "StepOperationInfo",
            modelProperties: {
                deploymentName: {
                    readOnly: true,
                    serializedName: "deploymentName",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    readOnly: true,
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "CloudErrorBody"
                    }
                }
            }
        }
    };
    var ResourceOperation = {
        serializedName: "ResourceOperation",
        type: {
            name: "Composite",
            className: "ResourceOperation",
            modelProperties: {
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    readOnly: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                },
                statusCode: {
                    readOnly: true,
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Message = {
        serializedName: "Message",
        type: {
            name: "Composite",
            className: "Message",
            modelProperties: {
                timeStamp: {
                    readOnly: true,
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RolloutStep = {
        serializedName: "RolloutStep",
        type: {
            name: "Composite",
            className: "RolloutStep",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                stepGroup: {
                    serializedName: "stepGroup",
                    type: {
                        name: "String"
                    }
                },
                operationInfo: {
                    readOnly: true,
                    serializedName: "operationInfo",
                    type: {
                        name: "Composite",
                        className: "StepOperationInfo"
                    }
                },
                resourceOperations: {
                    readOnly: true,
                    serializedName: "resourceOperations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceOperation"
                            }
                        }
                    }
                },
                messages: {
                    readOnly: true,
                    serializedName: "messages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Message"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceUnitProperties = {
        serializedName: "ServiceUnitProperties",
        type: {
            name: "Composite",
            className: "ServiceUnitProperties",
            modelProperties: {
                targetResourceGroup: {
                    required: true,
                    serializedName: "targetResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                deploymentMode: {
                    required: true,
                    serializedName: "deploymentMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Incremental",
                            "Complete"
                        ]
                    }
                },
                artifacts: {
                    serializedName: "artifacts",
                    type: {
                        name: "Composite",
                        className: "ServiceUnitArtifacts"
                    }
                }
            }
        }
    };
    var ServiceUnit = {
        serializedName: "ServiceUnit",
        type: {
            name: "Composite",
            className: "ServiceUnit",
            modelProperties: __assign({}, ServiceUnitProperties.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, steps: {
                    serializedName: "steps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RolloutStep"
                            }
                        }
                    }
                } })
        }
    };
    var ServiceProperties = {
        serializedName: "ServiceProperties",
        type: {
            name: "Composite",
            className: "ServiceProperties",
            modelProperties: {
                targetLocation: {
                    required: true,
                    serializedName: "targetLocation",
                    type: {
                        name: "String"
                    }
                },
                targetSubscriptionId: {
                    required: true,
                    serializedName: "targetSubscriptionId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Service = {
        serializedName: "Service",
        type: {
            name: "Composite",
            className: "Service",
            modelProperties: __assign({}, ServiceProperties.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, serviceUnits: {
                    serializedName: "serviceUnits",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceUnit"
                            }
                        }
                    }
                } })
        }
    };
    var RolloutProperties = {
        serializedName: "Rollout_properties",
        type: {
            name: "Composite",
            className: "RolloutProperties",
            modelProperties: {
                buildVersion: {
                    required: true,
                    serializedName: "buildVersion",
                    type: {
                        name: "String"
                    }
                },
                artifactSourceId: {
                    serializedName: "artifactSourceId",
                    type: {
                        name: "String"
                    }
                },
                targetServiceTopologyId: {
                    required: true,
                    serializedName: "targetServiceTopologyId",
                    type: {
                        name: "String"
                    }
                },
                stepGroups: {
                    required: true,
                    serializedName: "stepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Step"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                totalRetryAttempts: {
                    readOnly: true,
                    serializedName: "totalRetryAttempts",
                    type: {
                        name: "Number"
                    }
                },
                operationInfo: {
                    readOnly: true,
                    serializedName: "operationInfo",
                    type: {
                        name: "Composite",
                        className: "RolloutOperationInfo"
                    }
                },
                services: {
                    readOnly: true,
                    serializedName: "services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Service"
                            }
                        }
                    }
                }
            }
        }
    };
    var Rollout = {
        serializedName: "Rollout",
        type: {
            name: "Composite",
            className: "Rollout",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }, buildVersion: {
                    required: true,
                    serializedName: "properties.buildVersion",
                    type: {
                        name: "String"
                    }
                }, artifactSourceId: {
                    serializedName: "properties.artifactSourceId",
                    type: {
                        name: "String"
                    }
                }, targetServiceTopologyId: {
                    required: true,
                    serializedName: "properties.targetServiceTopologyId",
                    type: {
                        name: "String"
                    }
                }, stepGroups: {
                    required: true,
                    serializedName: "properties.stepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Step"
                            }
                        }
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, totalRetryAttempts: {
                    readOnly: true,
                    serializedName: "properties.totalRetryAttempts",
                    type: {
                        name: "Number"
                    }
                }, operationInfo: {
                    readOnly: true,
                    serializedName: "properties.operationInfo",
                    type: {
                        name: "Composite",
                        className: "RolloutOperationInfo"
                    }
                }, services: {
                    readOnly: true,
                    serializedName: "properties.services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Service"
                            }
                        }
                    }
                } })
        }
    };
    var RolloutPropertiesModel = {
        serializedName: "RolloutProperties",
        type: {
            name: "Composite",
            className: "RolloutPropertiesModel",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                totalRetryAttempts: {
                    readOnly: true,
                    serializedName: "totalRetryAttempts",
                    type: {
                        name: "Number"
                    }
                },
                operationInfo: {
                    readOnly: true,
                    serializedName: "operationInfo",
                    type: {
                        name: "Composite",
                        className: "RolloutOperationInfo"
                    }
                },
                services: {
                    readOnly: true,
                    serializedName: "services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Service"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceTopologyProperties = {
        serializedName: "ServiceTopologyProperties",
        type: {
            name: "Composite",
            className: "ServiceTopologyProperties",
            modelProperties: {
                artifactSourceId: {
                    serializedName: "artifactSourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceTopologyResourceProperties = {
        serializedName: "ServiceTopologyResource_properties",
        type: {
            name: "Composite",
            className: "ServiceTopologyResourceProperties",
            modelProperties: __assign({}, ServiceTopologyProperties.type.modelProperties)
        }
    };
    var ServiceTopologyResource = {
        serializedName: "ServiceTopologyResource",
        type: {
            name: "Composite",
            className: "ServiceTopologyResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { artifactSourceId: {
                    serializedName: "properties.artifactSourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceResourceProperties = {
        serializedName: "ServiceResource_properties",
        type: {
            name: "Composite",
            className: "ServiceResourceProperties",
            modelProperties: __assign({}, ServiceProperties.type.modelProperties)
        }
    };
    var ServiceResource = {
        serializedName: "ServiceResource",
        type: {
            name: "Composite",
            className: "ServiceResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { targetLocation: {
                    required: true,
                    serializedName: "properties.targetLocation",
                    type: {
                        name: "String"
                    }
                }, targetSubscriptionId: {
                    required: true,
                    serializedName: "properties.targetSubscriptionId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceUnitResourceProperties = {
        serializedName: "ServiceUnitResource_properties",
        type: {
            name: "Composite",
            className: "ServiceUnitResourceProperties",
            modelProperties: __assign({}, ServiceUnitProperties.type.modelProperties)
        }
    };
    var ServiceUnitResource = {
        serializedName: "ServiceUnitResource",
        type: {
            name: "Composite",
            className: "ServiceUnitResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { targetResourceGroup: {
                    required: true,
                    serializedName: "properties.targetResourceGroup",
                    type: {
                        name: "String"
                    }
                }, deploymentMode: {
                    required: true,
                    serializedName: "properties.deploymentMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Incremental",
                            "Complete"
                        ]
                    }
                }, artifacts: {
                    serializedName: "properties.artifacts",
                    type: {
                        name: "Composite",
                        className: "ServiceUnitArtifacts"
                    }
                } })
        }
    };
    var ServiceUnitArtifacts = {
        serializedName: "ServiceUnitArtifacts",
        type: {
            name: "Composite",
            className: "ServiceUnitArtifacts",
            modelProperties: {
                templateUri: {
                    serializedName: "templateUri",
                    type: {
                        name: "String"
                    }
                },
                parametersUri: {
                    serializedName: "parametersUri",
                    type: {
                        name: "String"
                    }
                },
                templateArtifactSourceRelativePath: {
                    serializedName: "templateArtifactSourceRelativePath",
                    type: {
                        name: "String"
                    }
                },
                parametersArtifactSourceRelativePath: {
                    serializedName: "parametersArtifactSourceRelativePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDetail = {
        serializedName: "OperationDetail",
        type: {
            name: "Composite",
            className: "OperationDetail",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDetail"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var StepProperties = {
        serializedName: "StepProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "stepType",
                clientName: "stepType"
            },
            uberParent: "StepProperties",
            className: "StepProperties",
            modelProperties: {
                stepType: {
                    required: true,
                    serializedName: "stepType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StepResource = {
        serializedName: "StepResource",
        type: {
            name: "Composite",
            className: "StepResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "stepType",
                            clientName: "stepType"
                        },
                        uberParent: "StepProperties",
                        className: "StepProperties"
                    }
                } })
        }
    };
    var WaitStepAttributes = {
        serializedName: "WaitStepAttributes",
        type: {
            name: "Composite",
            className: "WaitStepAttributes",
            modelProperties: {
                duration: {
                    required: true,
                    serializedName: "duration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WaitStepProperties = {
        serializedName: "Wait",
        type: {
            name: "Composite",
            polymorphicDiscriminator: StepProperties.type.polymorphicDiscriminator,
            uberParent: "StepProperties",
            className: "WaitStepProperties",
            modelProperties: __assign({}, StepProperties.type.modelProperties, { attributes: {
                    serializedName: "attributes",
                    type: {
                        name: "Composite",
                        className: "WaitStepAttributes"
                    }
                } })
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var AzureEntityResource = {
        serializedName: "AzureEntityResource",
        type: {
            name: "Composite",
            className: "AzureEntityResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceUnitsCreateOrUpdateHeaders = {
        serializedName: "serviceunits-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ServiceUnitsCreateOrUpdateHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RolloutsCreateOrUpdateHeaders = {
        serializedName: "rollouts-createorupdate-headers",
        type: {
            name: "Composite",
            className: "RolloutsCreateOrUpdateHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'Authentication': Authentication,
        'Authentication.Sas': SasAuthentication,
        'StepProperties': StepProperties,
        'StepProperties.Wait': WaitStepProperties
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Identity: Identity,
        PrePostStep: PrePostStep,
        Step: Step,
        RolloutRequestProperties: RolloutRequestProperties,
        Resource: Resource,
        TrackedResource: TrackedResource,
        RolloutRequest: RolloutRequest,
        ArtifactSourcePropertiesModel: ArtifactSourcePropertiesModel,
        ArtifactSourceProperties: ArtifactSourceProperties,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        SasProperties: SasProperties,
        SasAuthentication: SasAuthentication,
        CloudErrorBody: CloudErrorBody,
        RolloutOperationInfo: RolloutOperationInfo,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        RolloutStep: RolloutStep,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnit: ServiceUnit,
        ServiceProperties: ServiceProperties,
        Service: Service,
        RolloutProperties: RolloutProperties,
        Rollout: Rollout,
        RolloutPropertiesModel: RolloutPropertiesModel,
        ServiceTopologyProperties: ServiceTopologyProperties,
        ServiceTopologyResourceProperties: ServiceTopologyResourceProperties,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        ServiceUnitResource: ServiceUnitResource,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        OperationDetail: OperationDetail,
        Operation: Operation,
        StepProperties: StepProperties,
        StepResource: StepResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource,
        ServiceUnitsCreateOrUpdateHeaders: ServiceUnitsCreateOrUpdateHeaders,
        RolloutsCreateOrUpdateHeaders: RolloutsCreateOrUpdateHeaders,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceTopologyResource: ServiceTopologyResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RolloutRequest: RolloutRequest,
        Identity: Identity,
        Step: Step,
        PrePostStep: PrePostStep,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        SasAuthentication: SasAuthentication,
        Rollout: Rollout,
        RolloutOperationInfo: RolloutOperationInfo,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceUnit: ServiceUnit,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        RolloutStep: RolloutStep,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepResource: StepResource,
        StepProperties: StepProperties,
        WaitStepProperties: WaitStepProperties,
        WaitStepAttributes: WaitStepAttributes,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var artifactSourceName = {
        parameterPath: "artifactSourceName",
        mapper: {
            required: true,
            serializedName: "artifactSourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var retryAttempt = {
        parameterPath: [
            "options",
            "retryAttempt"
        ],
        mapper: {
            serializedName: "retryAttempt",
            type: {
                name: "Number"
            }
        }
    };
    var rolloutName = {
        parameterPath: "rolloutName",
        mapper: {
            required: true,
            serializedName: "rolloutName",
            type: {
                name: "String"
            }
        }
    };
    var serviceName = {
        parameterPath: "serviceName",
        mapper: {
            required: true,
            serializedName: "serviceName",
            type: {
                name: "String"
            }
        }
    };
    var serviceTopologyName = {
        parameterPath: "serviceTopologyName",
        mapper: {
            required: true,
            serializedName: "serviceTopologyName",
            type: {
                name: "String"
            }
        }
    };
    var serviceUnitName = {
        parameterPath: "serviceUnitName",
        mapper: {
            required: true,
            serializedName: "serviceUnitName",
            type: {
                name: "String"
            }
        }
    };
    var skipSucceeded = {
        parameterPath: [
            "options",
            "skipSucceeded"
        ],
        mapper: {
            serializedName: "skipSucceeded",
            type: {
                name: "Boolean"
            }
        }
    };
    var stepName = {
        parameterPath: "stepName",
        mapper: {
            required: true,
            serializedName: "stepName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceTopologies. */
    var ServiceTopologies = /** @class */ (function () {
        /**
         * Create a ServiceTopologies.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function ServiceTopologies(client) {
            this.client = client;
        }
        ServiceTopologies.prototype.createOrUpdate = function (serviceTopologyInfo, resourceGroupName$$1, serviceTopologyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                serviceTopologyInfo: serviceTopologyInfo,
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ServiceTopologies.prototype.get = function (resourceGroupName$$1, serviceTopologyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        ServiceTopologies.prototype.deleteMethod = function (resourceGroupName$$1, serviceTopologyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        return ServiceTopologies;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceTopologyInfo",
            mapper: __assign({}, ServiceTopologyResource, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServiceTopologyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceTopologyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceResource: ServiceResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RolloutRequest: RolloutRequest,
        Identity: Identity,
        Step: Step,
        PrePostStep: PrePostStep,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        SasAuthentication: SasAuthentication,
        Rollout: Rollout,
        RolloutOperationInfo: RolloutOperationInfo,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceUnit: ServiceUnit,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        RolloutStep: RolloutStep,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepResource: StepResource,
        StepProperties: StepProperties,
        WaitStepProperties: WaitStepProperties,
        WaitStepAttributes: WaitStepAttributes,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Services. */
    var Services = /** @class */ (function () {
        /**
         * Create a Services.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Services(client) {
            this.client = client;
        }
        Services.prototype.createOrUpdate = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, serviceInfo, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                serviceName: serviceName$$1,
                serviceInfo: serviceInfo,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Services.prototype.get = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                serviceName: serviceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Services.prototype.deleteMethod = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                serviceName: serviceName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        return Services;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceInfo",
            mapper: __assign({}, ServiceResource, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceUnitResource: ServiceUnitResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitsCreateOrUpdateHeaders: ServiceUnitsCreateOrUpdateHeaders,
        CloudError: CloudError,
        RolloutRequest: RolloutRequest,
        Identity: Identity,
        Step: Step,
        PrePostStep: PrePostStep,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        SasAuthentication: SasAuthentication,
        Rollout: Rollout,
        RolloutOperationInfo: RolloutOperationInfo,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceUnit: ServiceUnit,
        ServiceUnitProperties: ServiceUnitProperties,
        RolloutStep: RolloutStep,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        StepResource: StepResource,
        StepProperties: StepProperties,
        WaitStepProperties: WaitStepProperties,
        WaitStepAttributes: WaitStepAttributes,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceUnits. */
    var ServiceUnits = /** @class */ (function () {
        /**
         * Create a ServiceUnits.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function ServiceUnits(client) {
            this.client = client;
        }
        /**
         * This is an asynchronous operation and can be polled to completion using the operation resource
         * returned by this operation.
         * @summary Creates or updates a service unit under the service in the service topology.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param serviceTopologyName The name of the service topology .
         * @param serviceName The name of the service resource.
         * @param serviceUnitName The name of the service unit resource.
         * @param serviceUnitInfo The service unit resource object.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServiceUnitsCreateOrUpdateResponse>
         */
        ServiceUnits.prototype.createOrUpdate = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, serviceUnitName$$1, serviceUnitInfo, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, serviceUnitName$$1, serviceUnitInfo, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServiceUnits.prototype.get = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, serviceUnitName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                serviceName: serviceName$$1,
                serviceUnitName: serviceUnitName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        ServiceUnits.prototype.deleteMethod = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, serviceUnitName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                serviceName: serviceName$$1,
                serviceUnitName: serviceUnitName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        /**
         * This is an asynchronous operation and can be polled to completion using the operation resource
         * returned by this operation.
         * @summary Creates or updates a service unit under the service in the service topology.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param serviceTopologyName The name of the service topology .
         * @param serviceName The name of the service resource.
         * @param serviceUnitName The name of the service unit resource.
         * @param serviceUnitInfo The service unit resource object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceUnits.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serviceTopologyName$$1, serviceName$$1, serviceUnitName$$1, serviceUnitInfo, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serviceTopologyName: serviceTopologyName$$1,
                serviceName: serviceName$$1,
                serviceUnitName: serviceUnitName$$1,
                serviceUnitInfo: serviceUnitInfo,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        return ServiceUnits;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName,
            serviceUnitName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceUnitResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName,
            serviceUnitName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName,
            serviceUnitName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceUnitInfo",
            mapper: __assign({}, ServiceUnitResource, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServiceUnitResource,
                headersMapper: ServiceUnitsCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        StepProperties: StepProperties,
        CloudError: CloudError,
        RolloutRequest: RolloutRequest,
        Identity: Identity,
        Step: Step,
        PrePostStep: PrePostStep,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        SasAuthentication: SasAuthentication,
        Rollout: Rollout,
        RolloutOperationInfo: RolloutOperationInfo,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceUnit: ServiceUnit,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        RolloutStep: RolloutStep,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        ServiceUnitResource: ServiceUnitResource,
        WaitStepProperties: WaitStepProperties,
        WaitStepAttributes: WaitStepAttributes,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Steps. */
    var Steps = /** @class */ (function () {
        /**
         * Create a Steps.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Steps(client) {
            this.client = client;
        }
        Steps.prototype.createOrUpdate = function (resourceGroupName$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                stepName: stepName$$1,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Steps.prototype.get = function (resourceGroupName$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                stepName: stepName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        Steps.prototype.deleteMethod = function (resourceGroupName$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                stepName: stepName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        return Steps;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            stepName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "stepInfo"
            ],
            mapper: StepResource
        },
        responses: {
            201: {
                bodyMapper: StepResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            stepName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StepResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            stepName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RolloutRequest: RolloutRequest,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Identity: Identity,
        Step: Step,
        PrePostStep: PrePostStep,
        RolloutsCreateOrUpdateHeaders: RolloutsCreateOrUpdateHeaders,
        CloudError: CloudError,
        Rollout: Rollout,
        RolloutOperationInfo: RolloutOperationInfo,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceUnit: ServiceUnit,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        RolloutStep: RolloutStep,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        SasAuthentication: SasAuthentication,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepResource: StepResource,
        StepProperties: StepProperties,
        WaitStepProperties: WaitStepProperties,
        WaitStepAttributes: WaitStepAttributes,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Rollouts. */
    var Rollouts = /** @class */ (function () {
        /**
         * Create a Rollouts.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Rollouts(client) {
            this.client = client;
        }
        /**
         * This is an asynchronous operation and can be polled to completion using the location header
         * returned by this operation.
         * @summary Creates or updates a rollout.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param rolloutName The rollout name.
         * @param [options] The optional parameters
         * @returns Promise<Models.RolloutsCreateOrUpdateResponse>
         */
        Rollouts.prototype.createOrUpdate = function (resourceGroupName$$1, rolloutName$$1, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, rolloutName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Rollouts.prototype.get = function (resourceGroupName$$1, rolloutName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                rolloutName: rolloutName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Rollouts.prototype.deleteMethod = function (resourceGroupName$$1, rolloutName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                rolloutName: rolloutName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Rollouts.prototype.cancel = function (resourceGroupName$$1, rolloutName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                rolloutName: rolloutName$$1,
                options: options
            }, cancelOperationSpec, callback);
        };
        Rollouts.prototype.restart = function (resourceGroupName$$1, rolloutName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                rolloutName: rolloutName$$1,
                options: options
            }, restartOperationSpec, callback);
        };
        /**
         * This is an asynchronous operation and can be polled to completion using the location header
         * returned by this operation.
         * @summary Creates or updates a rollout.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param rolloutName The rollout name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Rollouts.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, rolloutName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                rolloutName: rolloutName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        return Rollouts;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion,
            retryAttempt
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rollout
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rollout
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var restartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            skipSucceeded,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rollout
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "rolloutRequest"
            ],
            mapper: RolloutRequest
        },
        responses: {
            201: {
                bodyMapper: RolloutRequest,
                headersMapper: RolloutsCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ArtifactSource: ArtifactSource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Authentication: Authentication,
        CloudError: CloudError,
        RolloutRequest: RolloutRequest,
        Identity: Identity,
        Step: Step,
        PrePostStep: PrePostStep,
        SasAuthentication: SasAuthentication,
        Rollout: Rollout,
        RolloutOperationInfo: RolloutOperationInfo,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceUnit: ServiceUnit,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        RolloutStep: RolloutStep,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceResourceProperties: ServiceResourceProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResourceProperties: ServiceUnitResourceProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepResource: StepResource,
        StepProperties: StepProperties,
        WaitStepProperties: WaitStepProperties,
        WaitStepAttributes: WaitStepAttributes,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ArtifactSources. */
    var ArtifactSources = /** @class */ (function () {
        /**
         * Create a ArtifactSources.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function ArtifactSources(client) {
            this.client = client;
        }
        ArtifactSources.prototype.createOrUpdate = function (resourceGroupName$$1, artifactSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                artifactSourceName: artifactSourceName$$1,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        ArtifactSources.prototype.get = function (resourceGroupName$$1, artifactSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                artifactSourceName: artifactSourceName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        ArtifactSources.prototype.deleteMethod = function (resourceGroupName$$1, artifactSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                artifactSourceName: artifactSourceName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        return ArtifactSources;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            artifactSourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "artifactSourceInfo"
            ],
            mapper: ArtifactSource
        },
        responses: {
            201: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            artifactSourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            artifactSourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Operation: Operation,
        OperationDetail: OperationDetail,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec$6, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DeploymentManager/operations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-deploymentmanager";
    var packageVersion = "1.0.0-preview";
    var AzureDeploymentManagerContext = /** @class */ (function (_super) {
        __extends(AzureDeploymentManagerContext, _super);
        /**
         * Initializes a new instance of the AzureDeploymentManager class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AzureDeploymentManagerContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-09-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureDeploymentManagerContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureDeploymentManager = /** @class */ (function (_super) {
        __extends(AzureDeploymentManager, _super);
        /**
         * Initializes a new instance of the AzureDeploymentManager class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AzureDeploymentManager(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.serviceTopologies = new ServiceTopologies(_this);
            _this.services = new Services(_this);
            _this.serviceUnits = new ServiceUnits(_this);
            _this.steps = new Steps(_this);
            _this.rollouts = new Rollouts(_this);
            _this.artifactSources = new ArtifactSources(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return AzureDeploymentManager;
    }(AzureDeploymentManagerContext));

    exports.AzureDeploymentManager = AzureDeploymentManager;
    exports.AzureDeploymentManagerContext = AzureDeploymentManagerContext;
    exports.AzureDeploymentManagerModels = index;
    exports.AzureDeploymentManagerMappers = mappers;
    exports.ServiceTopologies = ServiceTopologies;
    exports.Services = Services;
    exports.ServiceUnits = ServiceUnits;
    exports.Steps = Steps;
    exports.Rollouts = Rollouts;
    exports.ArtifactSources = ArtifactSources;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-deploymentmanager.js.map
