/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDevspaces = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Updating',
     * 'Creating', 'Deleting', 'Deleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Canceled"] = "Canceled";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Deleted"] = "Deleted";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuTier = <SkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Standard"] = "Standard";
    })(SkuTier || (SkuTier = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ProvisioningState () { return ProvisioningState; },
        get SkuTier () { return SkuTier; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ContainerHostMapping = {
        serializedName: "ContainerHostMapping",
        type: {
            name: "Composite",
            className: "ContainerHostMapping",
            modelProperties: {
                containerHostResourceId: {
                    serializedName: "containerHostResourceId",
                    type: {
                        name: "String"
                    }
                },
                mappedControllerResourceId: {
                    readOnly: true,
                    serializedName: "mappedControllerResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ControllerProperties = {
        serializedName: "ControllerProperties",
        type: {
            name: "Composite",
            className: "ControllerProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                hostSuffix: {
                    required: true,
                    serializedName: "hostSuffix",
                    type: {
                        name: "String"
                    }
                },
                dataPlaneFqdn: {
                    readOnly: true,
                    serializedName: "dataPlaneFqdn",
                    type: {
                        name: "String"
                    }
                },
                targetContainerHostResourceId: {
                    required: true,
                    serializedName: "targetContainerHostResourceId",
                    type: {
                        name: "String"
                    }
                },
                targetContainerHostCredentialsBase64: {
                    required: true,
                    serializedName: "targetContainerHostCredentialsBase64",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    isConstant: true,
                    serializedName: "name",
                    defaultValue: 'S1',
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Controller = {
        serializedName: "Controller",
        type: {
            name: "Composite",
            className: "Controller",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, hostSuffix: {
                    required: true,
                    serializedName: "properties.hostSuffix",
                    type: {
                        name: "String"
                    }
                }, dataPlaneFqdn: {
                    readOnly: true,
                    serializedName: "properties.dataPlaneFqdn",
                    type: {
                        name: "String"
                    }
                }, targetContainerHostResourceId: {
                    required: true,
                    serializedName: "properties.targetContainerHostResourceId",
                    type: {
                        name: "String"
                    }
                }, targetContainerHostCredentialsBase64: {
                    required: true,
                    serializedName: "properties.targetContainerHostCredentialsBase64",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var ControllerUpdateParameters = {
        serializedName: "ControllerUpdateParameters",
        type: {
            name: "Composite",
            className: "ControllerUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrchestratorSpecificConnectionDetails = {
        serializedName: "OrchestratorSpecificConnectionDetails",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "instanceType",
                clientName: "instanceType"
            },
            uberParent: "OrchestratorSpecificConnectionDetails",
            className: "OrchestratorSpecificConnectionDetails",
            modelProperties: {
                instanceType: {
                    required: true,
                    serializedName: "instanceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ControllerConnectionDetails = {
        serializedName: "ControllerConnectionDetails",
        type: {
            name: "Composite",
            className: "ControllerConnectionDetails",
            modelProperties: {
                authKey: {
                    readOnly: true,
                    serializedName: "authKey",
                    type: {
                        name: "String"
                    }
                },
                workspaceStorageAccountName: {
                    readOnly: true,
                    serializedName: "workspaceStorageAccountName",
                    type: {
                        name: "String"
                    }
                },
                workspaceStorageSasToken: {
                    readOnly: true,
                    serializedName: "workspaceStorageSasToken",
                    type: {
                        name: "String"
                    }
                },
                orchestratorSpecificConnectionDetails: {
                    serializedName: "orchestratorSpecificConnectionDetails",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "instanceType",
                            clientName: "instanceType"
                        },
                        uberParent: "OrchestratorSpecificConnectionDetails",
                        className: "OrchestratorSpecificConnectionDetails"
                    }
                }
            }
        }
    };
    var ControllerConnectionDetailsList = {
        serializedName: "ControllerConnectionDetailsList",
        type: {
            name: "Composite",
            className: "ControllerConnectionDetailsList",
            modelProperties: {
                connectionDetailsList: {
                    serializedName: "connectionDetailsList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ControllerConnectionDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceProviderOperationDisplay = {
        serializedName: "ResourceProviderOperationDisplay",
        type: {
            name: "Composite",
            className: "ResourceProviderOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceProviderOperationDefinition = {
        serializedName: "ResourceProviderOperationDefinition",
        type: {
            name: "Composite",
            className: "ResourceProviderOperationDefinition",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "ResourceProviderOperationDisplay"
                    }
                }
            }
        }
    };
    var KubernetesConnectionDetails = {
        serializedName: "Kubernetes",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OrchestratorSpecificConnectionDetails.type.polymorphicDiscriminator,
            uberParent: "OrchestratorSpecificConnectionDetails",
            className: "KubernetesConnectionDetails",
            modelProperties: __assign({}, OrchestratorSpecificConnectionDetails.type.modelProperties, { kubeConfig: {
                    serializedName: "kubeConfig",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDetails"
                    }
                }
            }
        }
    };
    var ControllerList = {
        serializedName: "ControllerList",
        type: {
            name: "Composite",
            className: "ControllerList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Controller"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceProviderOperationList = {
        serializedName: "ResourceProviderOperationList",
        type: {
            name: "Composite",
            className: "ResourceProviderOperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceProviderOperationDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'OrchestratorSpecificConnectionDetails': OrchestratorSpecificConnectionDetails,
        'OrchestratorSpecificConnectionDetails.Kubernetes': KubernetesConnectionDetails
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ContainerHostMapping: ContainerHostMapping,
        ControllerProperties: ControllerProperties,
        Sku: Sku,
        Resource: Resource,
        TrackedResource: TrackedResource,
        Controller: Controller,
        ControllerUpdateParameters: ControllerUpdateParameters,
        OrchestratorSpecificConnectionDetails: OrchestratorSpecificConnectionDetails,
        ControllerConnectionDetails: ControllerConnectionDetails,
        ControllerConnectionDetailsList: ControllerConnectionDetailsList,
        ResourceProviderOperationDisplay: ResourceProviderOperationDisplay,
        ResourceProviderOperationDefinition: ResourceProviderOperationDefinition,
        KubernetesConnectionDetails: KubernetesConnectionDetails,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        ControllerList: ControllerList,
        ResourceProviderOperationList: ResourceProviderOperationList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ContainerHostMapping: ContainerHostMapping,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            constraints: {
                MaxLength: 31,
                MinLength: 3,
                Pattern: /^[a-zA-Z0-9](-?[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerHostMappings. */
    var ContainerHostMappings = /** @class */ (function () {
        /**
         * Create a ContainerHostMappings.
         * @param {DevSpacesManagementClientContext} client Reference to the service client.
         */
        function ContainerHostMappings(client) {
            this.client = client;
        }
        ContainerHostMappings.prototype.getContainerHostMapping = function (containerHostMapping, location$$1, options, callback) {
            return this.client.sendOperationRequest({
                containerHostMapping: containerHostMapping,
                location: location$$1,
                options: options
            }, getContainerHostMappingOperationSpec, callback);
        };
        return ContainerHostMappings;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getContainerHostMappingOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.DevSpaces/locations/{location}/checkContainerHostMapping",
        urlParameters: [
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "containerHostMapping",
            mapper: __assign({}, ContainerHostMapping, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Controller: Controller,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        ControllerUpdateParameters: ControllerUpdateParameters,
        ControllerList: ControllerList,
        ControllerConnectionDetailsList: ControllerConnectionDetailsList,
        ControllerConnectionDetails: ControllerConnectionDetails,
        OrchestratorSpecificConnectionDetails: OrchestratorSpecificConnectionDetails,
        KubernetesConnectionDetails: KubernetesConnectionDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Controllers. */
    var Controllers = /** @class */ (function () {
        /**
         * Create a Controllers.
         * @param {DevSpacesManagementClientContext} client Reference to the service client.
         */
        function Controllers(client) {
            this.client = client;
        }
        Controllers.prototype.get = function (resourceGroupName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates an Azure Dev Spaces Controller with the specified create parameters.
         * @summary Creates an Azure Dev Spaces Controller.
         * @param resourceGroupName Resource group to which the resource belongs.
         * @param name Name of the resource.
         * @param controller Controller create parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ControllersCreateResponse>
         */
        Controllers.prototype.create = function (resourceGroupName$$1, name$$1, controller, options) {
            return this.beginCreate(resourceGroupName$$1, name$$1, controller, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing Azure Dev Spaces Controller.
         * @summary Deletes an Azure Dev Spaces Controller.
         * @param resourceGroupName Resource group to which the resource belongs.
         * @param name Name of the resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Controllers.prototype.deleteMethod = function (resourceGroupName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Controllers.prototype.update = function (resourceGroupName$$1, name$$1, controllerUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                controllerUpdateParameters: controllerUpdateParameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Controllers.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Controllers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Controllers.prototype.listConnectionDetails = function (resourceGroupName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, listConnectionDetailsOperationSpec, callback);
        };
        /**
         * Creates an Azure Dev Spaces Controller with the specified create parameters.
         * @summary Creates an Azure Dev Spaces Controller.
         * @param resourceGroupName Resource group to which the resource belongs.
         * @param name Name of the resource.
         * @param controller Controller create parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Controllers.prototype.beginCreate = function (resourceGroupName$$1, name$$1, controller, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                controller: controller,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes an existing Azure Dev Spaces Controller.
         * @summary Deletes an Azure Dev Spaces Controller.
         * @param resourceGroupName Resource group to which the resource belongs.
         * @param name Name of the resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Controllers.prototype.beginDeleteMethod = function (resourceGroupName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Controllers.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Controllers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Controllers;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Controller
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "controllerUpdateParameters",
            mapper: __assign({}, ControllerUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Controller
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ControllerList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DevSpaces/controllers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ControllerList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listConnectionDetailsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}/listConnectionDetails",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ControllerConnectionDetailsList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "controller",
            mapper: __assign({}, Controller, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Controller
            },
            201: {
                bodyMapper: Controller
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ControllerList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ControllerList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ResourceProviderOperationList: ResourceProviderOperationList,
        ResourceProviderOperationDefinition: ResourceProviderOperationDefinition,
        ResourceProviderOperationDisplay: ResourceProviderOperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DevSpacesManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DevSpaces/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceProviderOperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceProviderOperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-devspaces";
    var packageVersion = "1.0.0-preview";
    var DevSpacesManagementClientContext = /** @class */ (function (_super) {
        __extends(DevSpacesManagementClientContext, _super);
        /**
         * Initializes a new instance of the DevSpacesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription ID.
         * @param [options] The parameter options
         */
        function DevSpacesManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-06-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DevSpacesManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DevSpacesManagementClient = /** @class */ (function (_super) {
        __extends(DevSpacesManagementClient, _super);
        /**
         * Initializes a new instance of the DevSpacesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription ID.
         * @param [options] The parameter options
         */
        function DevSpacesManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.containerHostMappings = new ContainerHostMappings(_this);
            _this.controllers = new Controllers(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return DevSpacesManagementClient;
    }(DevSpacesManagementClientContext));

    exports.DevSpacesManagementClient = DevSpacesManagementClient;
    exports.DevSpacesManagementClientContext = DevSpacesManagementClientContext;
    exports.DevSpacesManagementModels = index;
    exports.DevSpacesManagementMappers = mappers;
    exports.ContainerHostMappings = ContainerHostMappings;
    exports.Controllers = Controllers;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-devspaces.js.map
