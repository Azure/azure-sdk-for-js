/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ContainerHostMapping: msRest.CompositeMapper = {
  serializedName: "ContainerHostMapping",
  type: {
    name: "Composite",
    className: "ContainerHostMapping",
    modelProperties: {
      containerHostResourceId: {
        serializedName: "containerHostResourceId",
        type: {
          name: "String"
        }
      },
      mappedControllerResourceId: {
        readOnly: true,
        serializedName: "mappedControllerResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        isConstant: true,
        serializedName: "name",
        defaultValue: 'S1',
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Controller: msRest.CompositeMapper = {
  serializedName: "Controller",
  type: {
    name: "Composite",
    className: "Controller",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      hostSuffix: {
        required: true,
        serializedName: "properties.hostSuffix",
        type: {
          name: "String"
        }
      },
      dataPlaneFqdn: {
        readOnly: true,
        serializedName: "properties.dataPlaneFqdn",
        type: {
          name: "String"
        }
      },
      targetContainerHostResourceId: {
        required: true,
        serializedName: "properties.targetContainerHostResourceId",
        type: {
          name: "String"
        }
      },
      targetContainerHostCredentialsBase64: {
        required: true,
        serializedName: "properties.targetContainerHostCredentialsBase64",
        type: {
          name: "String"
        }
      },
      sku: {
        required: true,
        serializedName: "sku",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const ControllerUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ControllerUpdateParameters",
  type: {
    name: "Composite",
    className: "ControllerUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OrchestratorSpecificConnectionDetails: msRest.CompositeMapper = {
  serializedName: "OrchestratorSpecificConnectionDetails",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    uberParent: "OrchestratorSpecificConnectionDetails",
    className: "OrchestratorSpecificConnectionDetails",
    modelProperties: {
      instanceType: {
        required: true,
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControllerConnectionDetails: msRest.CompositeMapper = {
  serializedName: "ControllerConnectionDetails",
  type: {
    name: "Composite",
    className: "ControllerConnectionDetails",
    modelProperties: {
      authKey: {
        readOnly: true,
        serializedName: "authKey",
        type: {
          name: "String"
        }
      },
      workspaceStorageAccountName: {
        readOnly: true,
        serializedName: "workspaceStorageAccountName",
        type: {
          name: "String"
        }
      },
      workspaceStorageSasToken: {
        readOnly: true,
        serializedName: "workspaceStorageSasToken",
        type: {
          name: "String"
        }
      },
      orchestratorSpecificConnectionDetails: {
        serializedName: "orchestratorSpecificConnectionDetails",
        type: {
          name: "Composite",
          className: "OrchestratorSpecificConnectionDetails"
        }
      }
    }
  }
};

export const ControllerConnectionDetailsList: msRest.CompositeMapper = {
  serializedName: "ControllerConnectionDetailsList",
  type: {
    name: "Composite",
    className: "ControllerConnectionDetailsList",
    modelProperties: {
      connectionDetailsList: {
        serializedName: "connectionDetailsList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ControllerConnectionDetails"
            }
          }
        }
      }
    }
  }
};

export const ResourceProviderOperationDisplay: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperationDisplay",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperationDefinition",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplay"
        }
      }
    }
  }
};

export const KubernetesConnectionDetails: msRest.CompositeMapper = {
  serializedName: "Kubernetes",
  type: {
    name: "Composite",
    polymorphicDiscriminator: OrchestratorSpecificConnectionDetails.type.polymorphicDiscriminator,
    uberParent: "OrchestratorSpecificConnectionDetails",
    className: "KubernetesConnectionDetails",
    modelProperties: {
      ...OrchestratorSpecificConnectionDetails.type.modelProperties,
      kubeConfig: {
        serializedName: "kubeConfig",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorDetails: msRest.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ControllerList: msRest.CompositeMapper = {
  serializedName: "ControllerList",
  type: {
    name: "Composite",
    className: "ControllerList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Controller"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceProviderOperationList: msRest.CompositeMapper = {
  serializedName: "ResourceProviderOperationList",
  type: {
    name: "Composite",
    className: "ResourceProviderOperationList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceProviderOperationDefinition"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'OrchestratorSpecificConnectionDetails' : OrchestratorSpecificConnectionDetails,
  'OrchestratorSpecificConnectionDetails.Kubernetes' : KubernetesConnectionDetails
};
