/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/adaptiveNetworkControlsOperationsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a AdaptiveNetworkControlsOperations. */
export class AdaptiveNetworkControlsOperations {
  private readonly client: SecurityCenterContext;

  /**
   * Create a AdaptiveNetworkControlsOperations.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Gets a list of Adaptive Network Controls resources in scope of the given extended resource.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param [options] The optional parameters
   * @returns Promise<Models.AdaptiveNetworkControlsListByExtendedResourceResponse>
   */
  listByExtendedResource(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.AdaptiveNetworkControlsListByExtendedResourceResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param callback The callback
   */
  listByExtendedResource(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, callback: msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param options The optional parameters
   * @param callback The callback
   */
  listByExtendedResource(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>): void;
  listByExtendedResource(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>, callback?: msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>): Promise<Models.AdaptiveNetworkControlsListByExtendedResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        extendedResourceProvider,
        extendedResourceType,
        extendedResourceName,
        options
      },
      listByExtendedResourceOperationSpec,
      callback) as Promise<Models.AdaptiveNetworkControlsListByExtendedResourceResponse>;
  }

  /**
   * Gets the Adaptive Network Controls resource matching the given resource ID
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param adaptiveNetworkControlsResourceName The name of the Adaptive Network Controls resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.AdaptiveNetworkControlsGetResponse>
   */
  get(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, adaptiveNetworkControlsResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.AdaptiveNetworkControlsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param adaptiveNetworkControlsResourceName The name of the Adaptive Network Controls resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, adaptiveNetworkControlsResourceName: string, callback: msRest.ServiceCallback<Models.AdaptiveNetworkControls>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param adaptiveNetworkControlsResourceName The name of the Adaptive Network Controls resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, adaptiveNetworkControlsResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AdaptiveNetworkControls>): void;
  get(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, adaptiveNetworkControlsResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AdaptiveNetworkControls>, callback?: msRest.ServiceCallback<Models.AdaptiveNetworkControls>): Promise<Models.AdaptiveNetworkControlsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        extendedResourceProvider,
        extendedResourceType,
        extendedResourceName,
        adaptiveNetworkControlsResourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AdaptiveNetworkControlsGetResponse>;
  }

  /**
   * Enforces the given rules on the NSG(s) listed in the request
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param adaptiveNetworkControlsResourceName The name of the Adaptive Network Controls resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enforce(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, adaptiveNetworkControlsResourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginEnforce(resourceGroupName,extendedResourceProvider,extendedResourceType,extendedResourceName,adaptiveNetworkControlsResourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Enforces the given rules on the NSG(s) listed in the request
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param extendedResourceProvider Resource provider name of the base resource
   * @param extendedResourceType Type of the base resource
   * @param extendedResourceName The name of the base resource
   * @param adaptiveNetworkControlsResourceName The name of the Adaptive Network Controls resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginEnforce(resourceGroupName: string, extendedResourceProvider: string, extendedResourceType: string, extendedResourceName: string, adaptiveNetworkControlsResourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        extendedResourceProvider,
        extendedResourceType,
        extendedResourceName,
        adaptiveNetworkControlsResourceName,
        options
      },
      beginEnforceOperationSpec,
      options);
  }

  /**
   * Gets a list of Adaptive Network Controls resources in scope of the given extended resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AdaptiveNetworkControlsListByExtendedResourceNextResponse>
   */
  listByExtendedResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AdaptiveNetworkControlsListByExtendedResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByExtendedResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByExtendedResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>): void;
  listByExtendedResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>, callback?: msRest.ServiceCallback<Models.AdaptiveNetworkControlsList>): Promise<Models.AdaptiveNetworkControlsListByExtendedResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByExtendedResourceNextOperationSpec,
      callback) as Promise<Models.AdaptiveNetworkControlsListByExtendedResourceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByExtendedResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{extendedResourceProvider}/{extendedResourceType}/{extendedResourceName}/providers/Microsoft.Security/adaptiveNetworkControls",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extendedResourceProvider,
    Parameters.extendedResourceType,
    Parameters.extendedResourceName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AdaptiveNetworkControlsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{extendedResourceProvider}/{extendedResourceType}/{extendedResourceName}/providers/Microsoft.Security/adaptiveNetworkControls/{adaptiveNetworkControlsResourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extendedResourceProvider,
    Parameters.extendedResourceType,
    Parameters.extendedResourceName,
    Parameters.adaptiveNetworkControlsResourceName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AdaptiveNetworkControls
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginEnforceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{extendedResourceProvider}/{extendedResourceType}/{extendedResourceName}/providers/Microsoft.Security/adaptiveNetworkControls/{adaptiveNetworkControlsResourceName}/{adaptiveNetworkControlsEnforceAction}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.extendedResourceProvider,
    Parameters.extendedResourceType,
    Parameters.extendedResourceName,
    Parameters.adaptiveNetworkControlsResourceName,
    Parameters.adaptiveNetworkControlsEnforceAction
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByExtendedResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AdaptiveNetworkControlsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
