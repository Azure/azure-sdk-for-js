/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SecurityCenterContext } from "./securityCenterContext";


class SecurityCenter extends SecurityCenterContext {
  // Operation groups
  operations: operations.Operations;
  locations: operations.Locations;
  tasks: operations.Tasks;
  alerts: operations.Alerts;
  discoveredSecuritySolutions: operations.DiscoveredSecuritySolutions;
  jitNetworkAccessPolicies: operations.JitNetworkAccessPolicies;
  externalSecuritySolutions: operations.ExternalSecuritySolutions;
  topology: operations.Topology;
  allowedConnections: operations.AllowedConnections;

  /**
   * Initializes a new instance of the SecurityCenter class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved
   * from Get locations
   * @param subscriptionId Azure subscription ID
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, ascLocation: string, subscriptionId: string, options?: Models.SecurityCenterOptions) {
    super(credentials, ascLocation, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.locations = new operations.Locations(this);
    this.tasks = new operations.Tasks(this);
    this.alerts = new operations.Alerts(this);
    this.discoveredSecuritySolutions = new operations.DiscoveredSecuritySolutions(this);
    this.jitNetworkAccessPolicies = new operations.JitNetworkAccessPolicies(this);
    this.externalSecuritySolutions = new operations.ExternalSecuritySolutions(this);
    this.topology = new operations.Topology(this);
    this.allowedConnections = new operations.AllowedConnections(this);
  }
}

// Operation Specifications

export {
  SecurityCenter,
  SecurityCenterContext,
  Models as SecurityCenterModels,
  Mappers as SecurityCenterMappers
};
export * from "./operations";
