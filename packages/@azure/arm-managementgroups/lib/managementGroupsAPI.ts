/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { ManagementGroupsAPIContext } from "./managementGroupsAPIContext";


class ManagementGroupsAPI extends ManagementGroupsAPIContext {
  // Operation groups
  managementGroups: operations.ManagementGroups;
  managementGroupSubscriptions: operations.ManagementGroupSubscriptions;
  operations: operations.Operations;
  entities: operations.Entities;

  /**
   * Initializes a new instance of the ManagementGroupsAPI class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.ManagementGroupsAPIOptions) {
    super(credentials, options);
    this.managementGroups = new operations.ManagementGroups(this);
    this.managementGroupSubscriptions = new operations.ManagementGroupSubscriptions(this);
    this.operations = new operations.Operations(this);
    this.entities = new operations.Entities(this);
  }

  /**
   * Checks if the specified management group name is valid and unique
   * @param checkNameAvailabilityRequest Management group name availability check parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckNameAvailabilityResponse>
   */
  checkNameAvailability(checkNameAvailabilityRequest: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.CheckNameAvailabilityResponse>;
  /**
   * @param checkNameAvailabilityRequest Management group name availability check parameters.
   * @param callback The callback
   */
  checkNameAvailability(checkNameAvailabilityRequest: Models.CheckNameAvailabilityRequest, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  /**
   * @param checkNameAvailabilityRequest Management group name availability check parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(checkNameAvailabilityRequest: Models.CheckNameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkNameAvailability(checkNameAvailabilityRequest: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): Promise<Models.CheckNameAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        checkNameAvailabilityRequest,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.CheckNameAvailabilityResponse>;
  }

  /**
   * Starts backfilling subscriptions for the Tenant.
   * @param [options] The optional parameters
   * @returns Promise<Models.StartTenantBackfillResponse>
   */
  startTenantBackfill(options?: msRest.RequestOptionsBase): Promise<Models.StartTenantBackfillResponse>;
  /**
   * @param callback The callback
   */
  startTenantBackfill(callback: msRest.ServiceCallback<Models.TenantBackfillStatusResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  startTenantBackfill(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantBackfillStatusResult>): void;
  startTenantBackfill(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TenantBackfillStatusResult>, callback?: msRest.ServiceCallback<Models.TenantBackfillStatusResult>): Promise<Models.StartTenantBackfillResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      startTenantBackfillOperationSpec,
      callback) as Promise<Models.StartTenantBackfillResponse>;
  }

  /**
   * Gets tenant backfill status
   * @param [options] The optional parameters
   * @returns Promise<Models.TenantBackfillStatusResponse>
   */
  tenantBackfillStatus(options?: msRest.RequestOptionsBase): Promise<Models.TenantBackfillStatusResponse>;
  /**
   * @param callback The callback
   */
  tenantBackfillStatus(callback: msRest.ServiceCallback<Models.TenantBackfillStatusResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  tenantBackfillStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantBackfillStatusResult>): void;
  tenantBackfillStatus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TenantBackfillStatusResult>, callback?: msRest.ServiceCallback<Models.TenantBackfillStatusResult>): Promise<Models.TenantBackfillStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      tenantBackfillStatusOperationSpec,
      callback) as Promise<Models.TenantBackfillStatusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/checkNameAvailability",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "checkNameAvailabilityRequest",
    mapper: {
      ...Mappers.CheckNameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const startTenantBackfillOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/startTenantBackfill",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TenantBackfillStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const tenantBackfillStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Management/tenantBackfillStatus",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TenantBackfillStatusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  ManagementGroupsAPI,
  ManagementGroupsAPIContext,
  Models as ManagementGroupsAPIModels,
  Mappers as ManagementGroupsAPIMappers
};
export * from "./operations";
