/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmManagementgroups = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Reason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * @readonly
     * @enum {string}
     */
    var Reason;
    (function (Reason) {
        Reason["Invalid"] = "Invalid";
        Reason["AlreadyExists"] = "AlreadyExists";
    })(Reason || (Reason = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'NotStarted', 'NotStartedButGroupsExist',
     * 'Started', 'Failed', 'Cancelled', 'Completed'
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["NotStarted"] = "NotStarted";
        Status["NotStartedButGroupsExist"] = "NotStartedButGroupsExist";
        Status["Started"] = "Started";
        Status["Failed"] = "Failed";
        Status["Cancelled"] = "Cancelled";
        Status["Completed"] = "Completed";
    })(Status || (Status = {}));
    /**
     * Defines values for Type.
     * Possible values include: '/providers/Microsoft.Management/managementGroups'
     * @readonly
     * @enum {string}
     */
    var Type;
    (function (Type) {
        Type["ProvidersMicrosoftManagementmanagementGroups"] = "/providers/Microsoft.Management/managementGroups";
    })(Type || (Type = {}));
    /**
     * Defines values for Type1.
     * Possible values include: '/providers/Microsoft.Management/managementGroups',
     * '/subscriptions'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Type1 = <Type1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Type1;
    (function (Type1) {
        Type1["ProvidersMicrosoftManagementmanagementGroups"] = "/providers/Microsoft.Management/managementGroups";
        Type1["Subscriptions"] = "/subscriptions";
    })(Type1 || (Type1 = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Updating'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Updating"] = "Updating";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for Permissions.
     * Possible values include: 'noaccess', 'view', 'edit', 'delete'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Permissions =
     * <Permissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Permissions;
    (function (Permissions) {
        Permissions["Noaccess"] = "noaccess";
        Permissions["View"] = "view";
        Permissions["Edit"] = "edit";
        Permissions["Delete"] = "delete";
    })(Permissions || (Permissions = {}));
    /**
     * Defines values for InheritedPermissions.
     * Possible values include: 'noaccess', 'view', 'edit', 'delete'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: InheritedPermissions =
     * <InheritedPermissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var InheritedPermissions;
    (function (InheritedPermissions) {
        InheritedPermissions["Noaccess"] = "noaccess";
        InheritedPermissions["View"] = "view";
        InheritedPermissions["Edit"] = "edit";
        InheritedPermissions["Delete"] = "delete";
    })(InheritedPermissions || (InheritedPermissions = {}));
    /**
     * Defines values for Permissions1.
     * Possible values include: 'noaccess', 'view', 'edit', 'delete'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Permissions1 =
     * <Permissions1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Permissions1;
    (function (Permissions1) {
        Permissions1["Noaccess"] = "noaccess";
        Permissions1["View"] = "view";
        Permissions1["Edit"] = "edit";
        Permissions1["Delete"] = "delete";
    })(Permissions1 || (Permissions1 = {}));
    /**
     * Defines values for Type2.
     * Possible values include: '/providers/Microsoft.Management/managementGroups',
     * '/subscriptions'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Type2 = <Type2>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Type2;
    (function (Type2) {
        Type2["ProvidersMicrosoftManagementmanagementGroups"] = "/providers/Microsoft.Management/managementGroups";
        Type2["Subscriptions"] = "/subscriptions";
    })(Type2 || (Type2 = {}));
    /**
     * Defines values for Expand.
     * Possible values include: 'children'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Expand = <Expand>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Expand;
    (function (Expand) {
        Expand["Children"] = "children";
    })(Expand || (Expand = {}));
    /**
     * Defines values for Search.
     * Possible values include: 'AllowedParents', 'AllowedChildren',
     * 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Search = <Search>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Search;
    (function (Search) {
        Search["AllowedParents"] = "AllowedParents";
        Search["AllowedChildren"] = "AllowedChildren";
        Search["ParentAndFirstLevelChildren"] = "ParentAndFirstLevelChildren";
        Search["ParentOnly"] = "ParentOnly";
        Search["ChildrenOnly"] = "ChildrenOnly";
    })(Search || (Search = {}));
    /**
     * Defines values for View.
     * Possible values include: 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly',
     * 'Audit'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: View = <View>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var View;
    (function (View) {
        View["FullHierarchy"] = "FullHierarchy";
        View["GroupsOnly"] = "GroupsOnly";
        View["SubscriptionsOnly"] = "SubscriptionsOnly";
        View["Audit"] = "Audit";
    })(View || (View = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Reason () { return Reason; },
        get Status () { return Status; },
        get Type () { return Type; },
        get Type1 () { return Type1; },
        get ProvisioningState () { return ProvisioningState; },
        get Permissions () { return Permissions; },
        get InheritedPermissions () { return InheritedPermissions; },
        get Permissions1 () { return Permissions1; },
        get Type2 () { return Type2; },
        get Expand () { return Expand; },
        get Search () { return Search; },
        get View () { return View; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDetails"
                    }
                }
            }
        }
    };
    var OperationDisplayProperties = {
        serializedName: "OperationDisplayProperties",
        type: {
            name: "Composite",
            className: "OperationDisplayProperties",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplayProperties"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TenantBackfillStatusResult = {
        serializedName: "TenantBackfillStatusResult",
        type: {
            name: "Composite",
            className: "TenantBackfillStatusResult",
            modelProperties: {
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotStarted",
                            "NotStartedButGroupsExist",
                            "Started",
                            "Failed",
                            "Cancelled",
                            "Completed"
                        ]
                    }
                }
            }
        }
    };
    var ManagementGroupInfo = {
        serializedName: "ManagementGroupInfo",
        type: {
            name: "Composite",
            className: "ManagementGroupInfo",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ParentGroupInfo = {
        serializedName: "ParentGroupInfo",
        type: {
            name: "Composite",
            className: "ParentGroupInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagementGroupDetails = {
        serializedName: "ManagementGroupDetails",
        type: {
            name: "Composite",
            className: "ManagementGroupDetails",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                },
                updatedTime: {
                    serializedName: "updatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedBy: {
                    serializedName: "updatedBy",
                    type: {
                        name: "String"
                    }
                },
                parent: {
                    serializedName: "parent",
                    type: {
                        name: "Composite",
                        className: "ParentGroupInfo"
                    }
                }
            }
        }
    };
    var ManagementGroupChildInfo = {
        serializedName: "ManagementGroupChildInfo",
        type: {
            name: "Composite",
            className: "ManagementGroupChildInfo",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementGroupChildInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementGroup = {
        serializedName: "ManagementGroup",
        type: {
            name: "Composite",
            className: "ManagementGroup",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    nullable: true,
                    serializedName: "properties.roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        className: "ManagementGroupDetails"
                    }
                },
                children: {
                    nullable: true,
                    serializedName: "properties.children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementGroupChildInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationResults = {
        serializedName: "OperationResults",
        type: {
            name: "Composite",
            className: "OperationResults",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EntityParentGroupInfo = {
        serializedName: "EntityParentGroupInfo",
        type: {
            name: "Composite",
            className: "EntityParentGroupInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EntityInfo = {
        serializedName: "EntityInfo",
        type: {
            name: "Composite",
            className: "EntityInfo",
            modelProperties: {
                id: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    nullable: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    nullable: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                parent: {
                    nullable: true,
                    serializedName: "properties.parent",
                    type: {
                        name: "Composite",
                        className: "EntityParentGroupInfo"
                    }
                },
                permissions: {
                    serializedName: "properties.permissions",
                    type: {
                        name: "String"
                    }
                },
                inheritedPermissions: {
                    serializedName: "properties.inheritedPermissions",
                    type: {
                        name: "String"
                    }
                },
                numberOfDescendants: {
                    nullable: true,
                    serializedName: "properties.numberOfDescendants",
                    type: {
                        name: "Number"
                    }
                },
                numberOfChildren: {
                    nullable: true,
                    serializedName: "properties.numberOfChildren",
                    type: {
                        name: "Number"
                    }
                },
                numberOfChildGroups: {
                    nullable: true,
                    serializedName: "properties.numberOfChildGroups",
                    type: {
                        name: "Number"
                    }
                },
                parentDisplayNameChain: {
                    nullable: true,
                    serializedName: "properties.parentDisplayNameChain",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                parentNameChain: {
                    nullable: true,
                    serializedName: "properties.parentNameChain",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntityHierarchyItem = {
        serializedName: "EntityHierarchyItem",
        type: {
            name: "Composite",
            className: "EntityHierarchyItem",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    serializedName: "properties.permissions",
                    type: {
                        name: "String"
                    }
                },
                children: {
                    nullable: true,
                    serializedName: "properties.children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityHierarchyItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var PatchManagementGroupRequest = {
        serializedName: "PatchManagementGroupRequest",
        type: {
            name: "Composite",
            className: "PatchManagementGroupRequest",
            modelProperties: {
                displayName: {
                    nullable: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                parentId: {
                    nullable: true,
                    serializedName: "parentId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateParentGroupInfo = {
        serializedName: "CreateParentGroupInfo",
        type: {
            name: "Composite",
            className: "CreateParentGroupInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateManagementGroupDetails = {
        serializedName: "CreateManagementGroupDetails",
        type: {
            name: "Composite",
            className: "CreateManagementGroupDetails",
            modelProperties: {
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                },
                updatedTime: {
                    readOnly: true,
                    serializedName: "updatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedBy: {
                    readOnly: true,
                    serializedName: "updatedBy",
                    type: {
                        name: "String"
                    }
                },
                parent: {
                    serializedName: "parent",
                    type: {
                        name: "Composite",
                        className: "CreateParentGroupInfo"
                    }
                }
            }
        }
    };
    var CreateManagementGroupChildInfo = {
        serializedName: "CreateManagementGroupChildInfo",
        type: {
            name: "Composite",
            className: "CreateManagementGroupChildInfo",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    readOnly: true,
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                children: {
                    readOnly: true,
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateManagementGroupChildInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var CreateManagementGroupRequest = {
        serializedName: "CreateManagementGroupRequest",
        type: {
            name: "Composite",
            className: "CreateManagementGroupRequest",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    nullable: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        className: "CreateManagementGroupDetails"
                    }
                },
                children: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateManagementGroupChildInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityRequest = {
        serializedName: "CheckNameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "/providers/Microsoft.Management/managementGroups"
                        ]
                    }
                }
            }
        }
    };
    var ManagementGroupListResult = {
        serializedName: "ManagementGroupListResult",
        type: {
            name: "Composite",
            className: "ManagementGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementGroupInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EntityListResult = {
        serializedName: "EntityListResult",
        type: {
            name: "Composite",
            className: "EntityListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityInfo"
                            }
                        }
                    }
                },
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        OperationDisplayProperties: OperationDisplayProperties,
        Operation: Operation,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        TenantBackfillStatusResult: TenantBackfillStatusResult,
        ManagementGroupInfo: ManagementGroupInfo,
        ParentGroupInfo: ParentGroupInfo,
        ManagementGroupDetails: ManagementGroupDetails,
        ManagementGroupChildInfo: ManagementGroupChildInfo,
        ManagementGroup: ManagementGroup,
        OperationResults: OperationResults,
        EntityParentGroupInfo: EntityParentGroupInfo,
        EntityInfo: EntityInfo,
        EntityHierarchyItem: EntityHierarchyItem,
        PatchManagementGroupRequest: PatchManagementGroupRequest,
        CreateParentGroupInfo: CreateParentGroupInfo,
        CreateManagementGroupDetails: CreateManagementGroupDetails,
        CreateManagementGroupChildInfo: CreateManagementGroupChildInfo,
        CreateManagementGroupRequest: CreateManagementGroupRequest,
        CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
        ManagementGroupListResult: ManagementGroupListResult,
        OperationListResult: OperationListResult,
        EntityListResult: EntityListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var cacheControl = {
        parameterPath: [
            "options",
            "cacheControl"
        ],
        mapper: {
            serializedName: "Cache-Control",
            defaultValue: 'no-cache',
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var groupId = {
        parameterPath: "groupId",
        mapper: {
            required: true,
            serializedName: "groupId",
            type: {
                name: "String"
            }
        }
    };
    var groupName = {
        parameterPath: [
            "options",
            "groupName"
        ],
        mapper: {
            serializedName: "groupName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var recurse = {
        parameterPath: [
            "options",
            "recurse"
        ],
        mapper: {
            serializedName: "$recurse",
            type: {
                name: "Boolean"
            }
        }
    };
    var search = {
        parameterPath: [
            "options",
            "search"
        ],
        mapper: {
            serializedName: "$search",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var skiptoken = {
        parameterPath: [
            "options",
            "skiptoken"
        ],
        mapper: {
            serializedName: "$skiptoken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var view = {
        parameterPath: [
            "options",
            "view"
        ],
        mapper: {
            serializedName: "$view",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ManagementGroupListResult: ManagementGroupListResult,
        ManagementGroupInfo: ManagementGroupInfo,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        ManagementGroup: ManagementGroup,
        BaseResource: BaseResource,
        ManagementGroupDetails: ManagementGroupDetails,
        ParentGroupInfo: ParentGroupInfo,
        ManagementGroupChildInfo: ManagementGroupChildInfo,
        CreateManagementGroupRequest: CreateManagementGroupRequest,
        CreateManagementGroupDetails: CreateManagementGroupDetails,
        CreateParentGroupInfo: CreateParentGroupInfo,
        CreateManagementGroupChildInfo: CreateManagementGroupChildInfo,
        OperationResults: OperationResults,
        PatchManagementGroupRequest: PatchManagementGroupRequest,
        EntityHierarchyItem: EntityHierarchyItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagementGroups. */
    var ManagementGroups = /** @class */ (function () {
        /**
         * Create a ManagementGroups.
         * @param {ManagementGroupsAPIContext} client Reference to the service client.
         */
        function ManagementGroups(client) {
            this.client = client;
        }
        ManagementGroups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ManagementGroups.prototype.get = function (groupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create or update a management group. If a management group is already created and a subsequent
         * create request is issued with different properties, the management group properties will be
         * updated.
         * @param groupId Management Group ID.
         * @param createManagementGroupRequest Management group creation parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagementGroupsCreateOrUpdateResponse>
         */
        ManagementGroups.prototype.createOrUpdate = function (groupId$$1, createManagementGroupRequest, options) {
            return this.beginCreateOrUpdate(groupId$$1, createManagementGroupRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagementGroups.prototype.update = function (groupId$$1, patchGroupRequest, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId$$1,
                patchGroupRequest: patchGroupRequest,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Delete management group. If a management group contains child resources, the request will fail.
         * @param groupId Management Group ID.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagementGroupsDeleteMethodResponse>
         */
        ManagementGroups.prototype.deleteMethod = function (groupId$$1, options) {
            return this.beginDeleteMethod(groupId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or update a management group. If a management group is already created and a subsequent
         * create request is issued with different properties, the management group properties will be
         * updated.
         * @param groupId Management Group ID.
         * @param createManagementGroupRequest Management group creation parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagementGroups.prototype.beginCreateOrUpdate = function (groupId$$1, createManagementGroupRequest, options) {
            return this.client.sendLRORequest({
                groupId: groupId$$1,
                createManagementGroupRequest: createManagementGroupRequest,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Delete management group. If a management group contains child resources, the request will fail.
         * @param groupId Management Group ID.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagementGroups.prototype.beginDeleteMethod = function (groupId$$1, options) {
            return this.client.sendLRORequest({
                groupId: groupId$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        ManagementGroups.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return ManagementGroups;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups",
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementGroupListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{groupId}",
        urlParameters: [
            groupId
        ],
        queryParameters: [
            apiVersion,
            expand,
            recurse,
            filter
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "providers/Microsoft.Management/managementGroups/{groupId}",
        urlParameters: [
            groupId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "patchGroupRequest",
            mapper: __assign({}, PatchManagementGroupRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagementGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "providers/Microsoft.Management/managementGroups/{groupId}",
        urlParameters: [
            groupId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "createManagementGroupRequest",
            mapper: __assign({}, CreateManagementGroupRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagementGroup
            },
            202: {
                bodyMapper: OperationResults
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "providers/Microsoft.Management/managementGroups/{groupId}",
        urlParameters: [
            groupId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            202: {
                bodyMapper: OperationResults
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementGroupListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagementGroupSubscriptions. */
    var ManagementGroupSubscriptions = /** @class */ (function () {
        /**
         * Create a ManagementGroupSubscriptions.
         * @param {ManagementGroupsAPIContext} client Reference to the service client.
         */
        function ManagementGroupSubscriptions(client) {
            this.client = client;
        }
        ManagementGroupSubscriptions.prototype.create = function (groupId$$1, subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId$$1,
                subscriptionId: subscriptionId$$1,
                options: options
            }, createOperationSpec, callback);
        };
        ManagementGroupSubscriptions.prototype.deleteMethod = function (groupId$$1, subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                groupId: groupId$$1,
                subscriptionId: subscriptionId$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        return ManagementGroupSubscriptions;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$2);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
        urlParameters: [
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}",
        urlParameters: [
            groupId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplayProperties: OperationDisplayProperties,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ManagementGroupsAPIContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        EntityListResult: EntityListResult,
        EntityInfo: EntityInfo,
        EntityParentGroupInfo: EntityParentGroupInfo,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Entities. */
    var Entities = /** @class */ (function () {
        /**
         * Create a Entities.
         * @param {ManagementGroupsAPIContext} client Reference to the service client.
         */
        function Entities(client) {
            this.client = client;
        }
        Entities.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Entities.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Entities;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$2 = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/getEntities",
        queryParameters: [
            apiVersion,
            skiptoken,
            skip,
            top,
            select,
            search,
            filter,
            view,
            groupName
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EntityListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            cacheControl,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EntityListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-managementgroups";
    var packageVersion = "1.0.0-preview";
    var ManagementGroupsAPIContext = /** @class */ (function (_super) {
        __extends(ManagementGroupsAPIContext, _super);
        /**
         * Initializes a new instance of the ManagementGroupsAPI class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function ManagementGroupsAPIContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-03-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ManagementGroupsAPIContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ManagementGroupsAPI = /** @class */ (function (_super) {
        __extends(ManagementGroupsAPI, _super);
        /**
         * Initializes a new instance of the ManagementGroupsAPI class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function ManagementGroupsAPI(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.managementGroups = new ManagementGroups(_this);
            _this.managementGroupSubscriptions = new ManagementGroupSubscriptions(_this);
            _this.operations = new Operations(_this);
            _this.entities = new Entities(_this);
            return _this;
        }
        ManagementGroupsAPI.prototype.checkNameAvailability = function (checkNameAvailabilityRequest, options, callback) {
            return this.sendOperationRequest({
                checkNameAvailabilityRequest: checkNameAvailabilityRequest,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        ManagementGroupsAPI.prototype.startTenantBackfill = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, startTenantBackfillOperationSpec, callback);
        };
        ManagementGroupsAPI.prototype.tenantBackfillStatus = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, tenantBackfillStatusOperationSpec, callback);
        };
        return ManagementGroupsAPI;
    }(ManagementGroupsAPIContext));
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/checkNameAvailability",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "checkNameAvailabilityRequest",
            mapper: __assign({}, CheckNameAvailabilityRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var startTenantBackfillOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/startTenantBackfill",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TenantBackfillStatusResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var tenantBackfillStatusOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Management/tenantBackfillStatus",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TenantBackfillStatusResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    exports.ManagementGroupsAPI = ManagementGroupsAPI;
    exports.ManagementGroupsAPIContext = ManagementGroupsAPIContext;
    exports.ManagementGroupsAPIModels = index;
    exports.ManagementGroupsAPIMappers = Mappers;
    exports.ManagementGroups = ManagementGroups;
    exports.ManagementGroupSubscriptions = ManagementGroupSubscriptions;
    exports.Operations = Operations;
    exports.Entities = Entities;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-managementgroups.js.map
