/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmMediaservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for FilterTrackPropertyType.
     * Possible values include: 'Unknown', 'Type', 'Name', 'Language', 'FourCC',
     * 'Bitrate'
     * @readonly
     * @enum {string}
     */
    var FilterTrackPropertyType;
    (function (FilterTrackPropertyType) {
        /**
         * The unknown track property type.
         */
        FilterTrackPropertyType["Unknown"] = "Unknown";
        /**
         * The type.
         */
        FilterTrackPropertyType["Type"] = "Type";
        /**
         * The name.
         */
        FilterTrackPropertyType["Name"] = "Name";
        /**
         * The language.
         */
        FilterTrackPropertyType["Language"] = "Language";
        /**
         * The fourCC.
         */
        FilterTrackPropertyType["FourCC"] = "FourCC";
        /**
         * The bitrate.
         */
        FilterTrackPropertyType["Bitrate"] = "Bitrate";
    })(FilterTrackPropertyType || (FilterTrackPropertyType = {}));
    /**
     * Defines values for FilterTrackPropertyCompareOperation.
     * Possible values include: 'Equal', 'NotEqual'
     * @readonly
     * @enum {string}
     */
    var FilterTrackPropertyCompareOperation;
    (function (FilterTrackPropertyCompareOperation) {
        /**
         * The equal operation.
         */
        FilterTrackPropertyCompareOperation["Equal"] = "Equal";
        /**
         * The not equal operation.
         */
        FilterTrackPropertyCompareOperation["NotEqual"] = "NotEqual";
    })(FilterTrackPropertyCompareOperation || (FilterTrackPropertyCompareOperation = {}));
    /**
     * Defines values for MetricUnit.
     * Possible values include: 'Bytes', 'Count', 'Milliseconds'
     * @readonly
     * @enum {string}
     */
    var MetricUnit;
    (function (MetricUnit) {
        /**
         * The number of bytes.
         */
        MetricUnit["Bytes"] = "Bytes";
        /**
         * The count.
         */
        MetricUnit["Count"] = "Count";
        /**
         * The number of milliseconds.
         */
        MetricUnit["Milliseconds"] = "Milliseconds";
    })(MetricUnit || (MetricUnit = {}));
    /**
     * Defines values for MetricAggregationType.
     * Possible values include: 'Average', 'Count', 'Total'
     * @readonly
     * @enum {string}
     */
    var MetricAggregationType;
    (function (MetricAggregationType) {
        /**
         * The average.
         */
        MetricAggregationType["Average"] = "Average";
        /**
         * The count of a number of items, usually requests.
         */
        MetricAggregationType["Count"] = "Count";
        /**
         * The sum.
         */
        MetricAggregationType["Total"] = "Total";
    })(MetricAggregationType || (MetricAggregationType = {}));
    /**
     * Defines values for StorageAccountType.
     * Possible values include: 'Primary', 'Secondary'
     * @readonly
     * @enum {string}
     */
    var StorageAccountType;
    (function (StorageAccountType) {
        /**
         * The primary storage account for the Media Services account.
         */
        StorageAccountType["Primary"] = "Primary";
        /**
         * A secondary storage account for the Media Services account.
         */
        StorageAccountType["Secondary"] = "Secondary";
    })(StorageAccountType || (StorageAccountType = {}));
    /**
     * Defines values for AssetStorageEncryptionFormat.
     * Possible values include: 'None', 'MediaStorageClientEncryption'
     * @readonly
     * @enum {string}
     */
    var AssetStorageEncryptionFormat;
    (function (AssetStorageEncryptionFormat) {
        /**
         * The Asset does not use client-side storage encryption (this is the only
         * allowed value for new Assets).
         */
        AssetStorageEncryptionFormat["None"] = "None";
        /**
         * The Asset is encrypted with Media Services client-side encryption.
         */
        AssetStorageEncryptionFormat["MediaStorageClientEncryption"] = "MediaStorageClientEncryption";
    })(AssetStorageEncryptionFormat || (AssetStorageEncryptionFormat = {}));
    /**
     * Defines values for AssetContainerPermission.
     * Possible values include: 'Read', 'ReadWrite', 'ReadWriteDelete'
     * @readonly
     * @enum {string}
     */
    var AssetContainerPermission;
    (function (AssetContainerPermission) {
        /**
         * The SAS URL will allow read access to the container.
         */
        AssetContainerPermission["Read"] = "Read";
        /**
         * The SAS URL will allow read and write access to the container.
         */
        AssetContainerPermission["ReadWrite"] = "ReadWrite";
        /**
         * The SAS URL will allow read, write and delete access to the container.
         */
        AssetContainerPermission["ReadWriteDelete"] = "ReadWriteDelete";
    })(AssetContainerPermission || (AssetContainerPermission = {}));
    /**
     * Defines values for ContentKeyPolicyPlayReadyUnknownOutputPassingOption.
     * Possible values include: 'Unknown', 'NotAllowed', 'Allowed',
     * 'AllowedWithVideoConstriction'
     * @readonly
     * @enum {string}
     */
    var ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
    (function (ContentKeyPolicyPlayReadyUnknownOutputPassingOption) {
        /**
         * Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is
         * unavailable in current API version.
         */
        ContentKeyPolicyPlayReadyUnknownOutputPassingOption["Unknown"] = "Unknown";
        /**
         * Passing the video portion of protected content to an Unknown Output is not
         * allowed.
         */
        ContentKeyPolicyPlayReadyUnknownOutputPassingOption["NotAllowed"] = "NotAllowed";
        /**
         * Passing the video portion of protected content to an Unknown Output is
         * allowed.
         */
        ContentKeyPolicyPlayReadyUnknownOutputPassingOption["Allowed"] = "Allowed";
        /**
         * Passing the video portion of protected content to an Unknown Output is
         * allowed but with constrained resolution.
         */
        ContentKeyPolicyPlayReadyUnknownOutputPassingOption["AllowedWithVideoConstriction"] = "AllowedWithVideoConstriction";
    })(ContentKeyPolicyPlayReadyUnknownOutputPassingOption || (ContentKeyPolicyPlayReadyUnknownOutputPassingOption = {}));
    /**
     * Defines values for ContentKeyPolicyPlayReadyLicenseType.
     * Possible values include: 'Unknown', 'NonPersistent', 'Persistent'
     * @readonly
     * @enum {string}
     */
    var ContentKeyPolicyPlayReadyLicenseType;
    (function (ContentKeyPolicyPlayReadyLicenseType) {
        /**
         * Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in
         * current API version.
         */
        ContentKeyPolicyPlayReadyLicenseType["Unknown"] = "Unknown";
        /**
         * Non persistent license.
         */
        ContentKeyPolicyPlayReadyLicenseType["NonPersistent"] = "NonPersistent";
        /**
         * Persistent license. Allows offline playback.
         */
        ContentKeyPolicyPlayReadyLicenseType["Persistent"] = "Persistent";
    })(ContentKeyPolicyPlayReadyLicenseType || (ContentKeyPolicyPlayReadyLicenseType = {}));
    /**
     * Defines values for ContentKeyPolicyPlayReadyContentType.
     * Possible values include: 'Unknown', 'Unspecified', 'UltraVioletDownload',
     * 'UltraVioletStreaming'
     * @readonly
     * @enum {string}
     */
    var ContentKeyPolicyPlayReadyContentType;
    (function (ContentKeyPolicyPlayReadyContentType) {
        /**
         * Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in
         * current API version.
         */
        ContentKeyPolicyPlayReadyContentType["Unknown"] = "Unknown";
        /**
         * Unspecified content type.
         */
        ContentKeyPolicyPlayReadyContentType["Unspecified"] = "Unspecified";
        /**
         * Ultraviolet download content type.
         */
        ContentKeyPolicyPlayReadyContentType["UltraVioletDownload"] = "UltraVioletDownload";
        /**
         * Ultraviolet streaming content type.
         */
        ContentKeyPolicyPlayReadyContentType["UltraVioletStreaming"] = "UltraVioletStreaming";
    })(ContentKeyPolicyPlayReadyContentType || (ContentKeyPolicyPlayReadyContentType = {}));
    /**
     * Defines values for ContentKeyPolicyRestrictionTokenType.
     * Possible values include: 'Unknown', 'Swt', 'Jwt'
     * @readonly
     * @enum {string}
     */
    var ContentKeyPolicyRestrictionTokenType;
    (function (ContentKeyPolicyRestrictionTokenType) {
        /**
         * Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in
         * current API version.
         */
        ContentKeyPolicyRestrictionTokenType["Unknown"] = "Unknown";
        /**
         * Simple Web Token.
         */
        ContentKeyPolicyRestrictionTokenType["Swt"] = "Swt";
        /**
         * JSON Web Token.
         */
        ContentKeyPolicyRestrictionTokenType["Jwt"] = "Jwt";
    })(ContentKeyPolicyRestrictionTokenType || (ContentKeyPolicyRestrictionTokenType = {}));
    /**
     * Defines values for ContentKeyPolicyFairPlayRentalAndLeaseKeyType.
     * Possible values include: 'Unknown', 'Undefined', 'PersistentUnlimited',
     * 'PersistentLimited'
     * @readonly
     * @enum {string}
     */
    var ContentKeyPolicyFairPlayRentalAndLeaseKeyType;
    (function (ContentKeyPolicyFairPlayRentalAndLeaseKeyType) {
        /**
         * Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is
         * unavailable in current API version.
         */
        ContentKeyPolicyFairPlayRentalAndLeaseKeyType["Unknown"] = "Unknown";
        /**
         * Key duration is not specified.
         */
        ContentKeyPolicyFairPlayRentalAndLeaseKeyType["Undefined"] = "Undefined";
        /**
         * Content key can be persisted with an unlimited duration
         */
        ContentKeyPolicyFairPlayRentalAndLeaseKeyType["PersistentUnlimited"] = "PersistentUnlimited";
        /**
         * Content key can be persisted and the valid duration is limited by the
         * Rental Duration value
         */
        ContentKeyPolicyFairPlayRentalAndLeaseKeyType["PersistentLimited"] = "PersistentLimited";
    })(ContentKeyPolicyFairPlayRentalAndLeaseKeyType || (ContentKeyPolicyFairPlayRentalAndLeaseKeyType = {}));
    /**
     * Defines values for AacAudioProfile.
     * Possible values include: 'AacLc', 'HeAacV1', 'HeAacV2'
     * @readonly
     * @enum {string}
     */
    var AacAudioProfile;
    (function (AacAudioProfile) {
        /**
         * Specifies that the output audio is to be encoded into AAC Low Complexity
         * profile (AAC-LC).
         */
        AacAudioProfile["AacLc"] = "AacLc";
        /**
         * Specifies that the output audio is to be encoded into HE-AAC v1 profile.
         */
        AacAudioProfile["HeAacV1"] = "HeAacV1";
        /**
         * Specifies that the output audio is to be encoded into HE-AAC v2 profile.
         */
        AacAudioProfile["HeAacV2"] = "HeAacV2";
    })(AacAudioProfile || (AacAudioProfile = {}));
    /**
     * Defines values for StretchMode.
     * Possible values include: 'None', 'AutoSize', 'AutoFit'
     * @readonly
     * @enum {string}
     */
    var StretchMode;
    (function (StretchMode) {
        /**
         * Strictly respect the output resolution without considering the pixel
         * aspect ratio or display aspect ratio of the input video.
         */
        StretchMode["None"] = "None";
        /**
         * Override the output resolution, and change it to match the display aspect
         * ratio of the input, without padding. For example, if the input is
         * 1920x1080 and the encoding preset asks for 1280x1280, then the value in
         * the preset is overridden, and the output will be at 1280x720, which
         * maintains the input aspect ratio of 16:9.
         */
        StretchMode["AutoSize"] = "AutoSize";
        /**
         * Pad the output (with either letterbox or pillar box) to honor the output
         * resolution, while ensuring that the active video region in the output has
         * the same aspect ratio as the input. For example, if the input is 1920x1080
         * and the encoding preset asks for 1280x1280, then the output will be at
         * 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio
         * of 16:9, and pillar box regions 280 pixels wide at the left and right.
         */
        StretchMode["AutoFit"] = "AutoFit";
    })(StretchMode || (StretchMode = {}));
    /**
     * Defines values for DeinterlaceParity.
     * Possible values include: 'Auto', 'TopFieldFirst', 'BottomFieldFirst'
     * @readonly
     * @enum {string}
     */
    var DeinterlaceParity;
    (function (DeinterlaceParity) {
        /**
         * Automatically detect the order of fields
         */
        DeinterlaceParity["Auto"] = "Auto";
        /**
         * Apply top field first processing of input video.
         */
        DeinterlaceParity["TopFieldFirst"] = "TopFieldFirst";
        /**
         * Apply bottom field first processing of input video.
         */
        DeinterlaceParity["BottomFieldFirst"] = "BottomFieldFirst";
    })(DeinterlaceParity || (DeinterlaceParity = {}));
    /**
     * Defines values for DeinterlaceMode.
     * Possible values include: 'Off', 'AutoPixelAdaptive'
     * @readonly
     * @enum {string}
     */
    var DeinterlaceMode;
    (function (DeinterlaceMode) {
        /**
         * Disables de-interlacing of the source video.
         */
        DeinterlaceMode["Off"] = "Off";
        /**
         * Apply automatic pixel adaptive de-interlacing on each frame in the input
         * video.
         */
        DeinterlaceMode["AutoPixelAdaptive"] = "AutoPixelAdaptive";
    })(DeinterlaceMode || (DeinterlaceMode = {}));
    /**
     * Defines values for Rotation.
     * Possible values include: 'Auto', 'None', 'Rotate0', 'Rotate90', 'Rotate180',
     * 'Rotate270'
     * @readonly
     * @enum {string}
     */
    var Rotation;
    (function (Rotation) {
        /**
         * Automatically detect and rotate as needed.
         */
        Rotation["Auto"] = "Auto";
        /**
         * Do not rotate the video.  If the output format supports it, any metadata
         * about rotation is kept intact.
         */
        Rotation["None"] = "None";
        /**
         * Do not rotate the video but remove any metadata about the rotation.
         */
        Rotation["Rotate0"] = "Rotate0";
        /**
         * Rotate 90 degrees clockwise.
         */
        Rotation["Rotate90"] = "Rotate90";
        /**
         * Rotate 180 degrees clockwise.
         */
        Rotation["Rotate180"] = "Rotate180";
        /**
         * Rotate 270 degrees clockwise.
         */
        Rotation["Rotate270"] = "Rotate270";
    })(Rotation || (Rotation = {}));
    /**
     * Defines values for H264VideoProfile.
     * Possible values include: 'Auto', 'Baseline', 'Main', 'High', 'High422',
     * 'High444'
     * @readonly
     * @enum {string}
     */
    var H264VideoProfile;
    (function (H264VideoProfile) {
        /**
         * Tells the encoder to automatically determine the appropriate H.264
         * profile.
         */
        H264VideoProfile["Auto"] = "Auto";
        /**
         * Baseline profile
         */
        H264VideoProfile["Baseline"] = "Baseline";
        /**
         * Main profile
         */
        H264VideoProfile["Main"] = "Main";
        /**
         * High profile.
         */
        H264VideoProfile["High"] = "High";
        /**
         * High 4:2:2 profile.
         */
        H264VideoProfile["High422"] = "High422";
        /**
         * High 4:4:4 predictive profile.
         */
        H264VideoProfile["High444"] = "High444";
    })(H264VideoProfile || (H264VideoProfile = {}));
    /**
     * Defines values for EntropyMode.
     * Possible values include: 'Cabac', 'Cavlc'
     * @readonly
     * @enum {string}
     */
    var EntropyMode;
    (function (EntropyMode) {
        /**
         * Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding.
         */
        EntropyMode["Cabac"] = "Cabac";
        /**
         * Context Adaptive Variable Length Coder (CAVLC) entropy encoding.
         */
        EntropyMode["Cavlc"] = "Cavlc";
    })(EntropyMode || (EntropyMode = {}));
    /**
     * Defines values for H264Complexity.
     * Possible values include: 'Speed', 'Balanced', 'Quality'
     * @readonly
     * @enum {string}
     */
    var H264Complexity;
    (function (H264Complexity) {
        /**
         * Tells the encoder to use settings that are optimized for faster encoding.
         * Quality is sacrificed to decrease encoding time.
         */
        H264Complexity["Speed"] = "Speed";
        /**
         * Tells the encoder to use settings that achieve a balance between speed and
         * quality.
         */
        H264Complexity["Balanced"] = "Balanced";
        /**
         * Tells the encoder to use settings that are optimized to produce higher
         * quality output at the expense of slower overall encode time.
         */
        H264Complexity["Quality"] = "Quality";
    })(H264Complexity || (H264Complexity = {}));
    /**
     * Defines values for EncoderNamedPreset.
     * Possible values include: 'H264SingleBitrateSD', 'H264SingleBitrate720p',
     * 'H264SingleBitrate1080p', 'AdaptiveStreaming', 'AACGoodQualityAudio',
     * 'H264MultipleBitrate1080p', 'H264MultipleBitrate720p',
     * 'H264MultipleBitrateSD'
     * @readonly
     * @enum {string}
     */
    var EncoderNamedPreset;
    (function (EncoderNamedPreset) {
        /**
         * Produces an MP4 file where the video is encoded with H.264 codec at 2200
         * kbps and a picture height of 480 pixels, and the stereo audio is encoded
         * with AAC-LC codec at 64 kbps.
         */
        EncoderNamedPreset["H264SingleBitrateSD"] = "H264SingleBitrateSD";
        /**
         * Produces an MP4 file where the video is encoded with H.264 codec at 4500
         * kbps and a picture height of 720 pixels, and the stereo audio is encoded
         * with AAC-LC codec at 64 kbps.
         */
        EncoderNamedPreset["H264SingleBitrate720p"] = "H264SingleBitrate720p";
        /**
         * Produces an MP4 file where the video is encoded with H.264 codec at 6750
         * kbps and a picture height of 1080 pixels, and the stereo audio is encoded
         * with AAC-LC codec at 64 kbps.
         */
        EncoderNamedPreset["H264SingleBitrate1080p"] = "H264SingleBitrate1080p";
        /**
         * Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC
         * audio. Auto-generates a bitrate ladder based on the input resolution and
         * bitrate. The auto-generated preset will never exceed the input resolution
         * and bitrate. For example, if the input is 720p at 3 Mbps, output will
         * remain 720p at best, and will start at rates lower than 3 Mbps. The output
         * will will have video and audio in separate MP4 files, which is optimal for
         * adaptive streaming.
         */
        EncoderNamedPreset["AdaptiveStreaming"] = "AdaptiveStreaming";
        /**
         * Produces a single MP4 file containing only stereo audio encoded at 192
         * kbps.
         */
        EncoderNamedPreset["AACGoodQualityAudio"] = "AACGoodQualityAudio";
        /**
         * Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400
         * kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to
         * 360p.
         */
        EncoderNamedPreset["H264MultipleBitrate1080p"] = "H264MultipleBitrate1080p";
        /**
         * Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400
         * kbps, and stereo AAC audio. Resolution starts at 720p and goes down to
         * 360p.
         */
        EncoderNamedPreset["H264MultipleBitrate720p"] = "H264MultipleBitrate720p";
        /**
         * Produces a set of 5 GOP-aligned MP4 files, ranging from 1600kbps to 400
         * kbps, and stereo AAC audio. Resolution starts at 480p and goes down to
         * 360p.
         */
        EncoderNamedPreset["H264MultipleBitrateSD"] = "H264MultipleBitrateSD";
    })(EncoderNamedPreset || (EncoderNamedPreset = {}));
    /**
     * Defines values for InsightsType.
     * Possible values include: 'AudioInsightsOnly', 'VideoInsightsOnly',
     * 'AllInsights'
     * @readonly
     * @enum {string}
     */
    var InsightsType;
    (function (InsightsType) {
        /**
         * Generate audio only insights. Ignore video even if present. Fails if no
         * audio is present.
         */
        InsightsType["AudioInsightsOnly"] = "AudioInsightsOnly";
        /**
         * Generate video only insights. Ignore audio if present. Fails if no video
         * is present.
         */
        InsightsType["VideoInsightsOnly"] = "VideoInsightsOnly";
        /**
         * Generate both audio and video insights. Fails if either audio or video
         * Insights fail.
         */
        InsightsType["AllInsights"] = "AllInsights";
    })(InsightsType || (InsightsType = {}));
    /**
     * Defines values for OnErrorType.
     * Possible values include: 'StopProcessingJob', 'ContinueJob'
     * @readonly
     * @enum {string}
     */
    var OnErrorType;
    (function (OnErrorType) {
        /**
         * Tells the service that if this TransformOutput fails, then any other
         * incomplete TransformOutputs can be stopped.
         */
        OnErrorType["StopProcessingJob"] = "StopProcessingJob";
        /**
         * Tells the service that if this TransformOutput fails, then allow any other
         * TransformOutput to continue.
         */
        OnErrorType["ContinueJob"] = "ContinueJob";
    })(OnErrorType || (OnErrorType = {}));
    /**
     * Defines values for Priority.
     * Possible values include: 'Low', 'Normal', 'High'
     * @readonly
     * @enum {string}
     */
    var Priority;
    (function (Priority) {
        /**
         * Used for TransformOutputs that can be generated after Normal and High
         * priority TransformOutputs.
         */
        Priority["Low"] = "Low";
        /**
         * Used for TransformOutputs that can be generated at Normal priority.
         */
        Priority["Normal"] = "Normal";
        /**
         * Used for TransformOutputs that should take precedence over others.
         */
        Priority["High"] = "High";
    })(Priority || (Priority = {}));
    /**
     * Defines values for JobErrorCode.
     * Possible values include: 'ServiceError', 'ServiceTransientError',
     * 'DownloadNotAccessible', 'DownloadTransientError', 'UploadNotAccessible',
     * 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed',
     * 'ContentUnsupported'
     * @readonly
     * @enum {string}
     */
    var JobErrorCode;
    (function (JobErrorCode) {
        /**
         * Fatal service error, please contact support.
         */
        JobErrorCode["ServiceError"] = "ServiceError";
        /**
         * Transient error, please retry, if retry is unsuccessful, please contact
         * support.
         */
        JobErrorCode["ServiceTransientError"] = "ServiceTransientError";
        /**
         * While trying to download the input files, the files were not accessible,
         * please check the availability of the source.
         */
        JobErrorCode["DownloadNotAccessible"] = "DownloadNotAccessible";
        /**
         * While trying to download the input files, there was an issue during
         * transfer (storage service, network errors), see details and check your
         * source.
         */
        JobErrorCode["DownloadTransientError"] = "DownloadTransientError";
        /**
         * While trying to upload the output files, the destination was not
         * reachable, please check the availability of the destination.
         */
        JobErrorCode["UploadNotAccessible"] = "UploadNotAccessible";
        /**
         * While trying to upload the output files, there was an issue during
         * transfer (storage service, network errors), see details and check your
         * destination.
         */
        JobErrorCode["UploadTransientError"] = "UploadTransientError";
        /**
         * There was a problem with the combination of input files and the
         * configuration settings applied, fix the configuration settings and retry
         * with the same input, or change input to match the configuration.
         */
        JobErrorCode["ConfigurationUnsupported"] = "ConfigurationUnsupported";
        /**
         * There was a problem with the input content (for example: zero byte files,
         * or corrupt/non-decodable files), check the input files.
         */
        JobErrorCode["ContentMalformed"] = "ContentMalformed";
        /**
         * There was a problem with the format of the input (not valid media file, or
         * an unsupported file/codec), check the validity of the input files.
         */
        JobErrorCode["ContentUnsupported"] = "ContentUnsupported";
    })(JobErrorCode || (JobErrorCode = {}));
    /**
     * Defines values for JobErrorCategory.
     * Possible values include: 'Service', 'Download', 'Upload', 'Configuration',
     * 'Content'
     * @readonly
     * @enum {string}
     */
    var JobErrorCategory;
    (function (JobErrorCategory) {
        /**
         * The error is service related.
         */
        JobErrorCategory["Service"] = "Service";
        /**
         * The error is download related.
         */
        JobErrorCategory["Download"] = "Download";
        /**
         * The error is upload related.
         */
        JobErrorCategory["Upload"] = "Upload";
        /**
         * The error is configuration related.
         */
        JobErrorCategory["Configuration"] = "Configuration";
        /**
         * The error is related to data in the input files.
         */
        JobErrorCategory["Content"] = "Content";
    })(JobErrorCategory || (JobErrorCategory = {}));
    /**
     * Defines values for JobRetry.
     * Possible values include: 'DoNotRetry', 'MayRetry'
     * @readonly
     * @enum {string}
     */
    var JobRetry;
    (function (JobRetry) {
        /**
         * Issue needs to be investigated and then the job resubmitted with
         * corrections or retried once the underlying issue has been corrected.
         */
        JobRetry["DoNotRetry"] = "DoNotRetry";
        /**
         * Issue may be resolved after waiting for a period of time and resubmitting
         * the same Job.
         */
        JobRetry["MayRetry"] = "MayRetry";
    })(JobRetry || (JobRetry = {}));
    /**
     * Defines values for JobState.
     * Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished',
     * 'Processing', 'Queued', 'Scheduled'
     * @readonly
     * @enum {string}
     */
    var JobState;
    (function (JobState) {
        /**
         * The job was canceled. This is a final state for the job.
         */
        JobState["Canceled"] = "Canceled";
        /**
         * The job is in the process of being canceled. This is a transient state for
         * the job.
         */
        JobState["Canceling"] = "Canceling";
        /**
         * The job has encountered an error. This is a final state for the job.
         */
        JobState["Error"] = "Error";
        /**
         * The job is finished. This is a final state for the job.
         */
        JobState["Finished"] = "Finished";
        /**
         * The job is processing. This is a transient state for the job.
         */
        JobState["Processing"] = "Processing";
        /**
         * The job is in a queued state, waiting for resources to become available.
         * This is a transient state.
         */
        JobState["Queued"] = "Queued";
        /**
         * The job is being scheduled to run on an available resource. This is a
         * transient state, between queued and processing states.
         */
        JobState["Scheduled"] = "Scheduled";
    })(JobState || (JobState = {}));
    /**
     * Defines values for TrackPropertyType.
     * Possible values include: 'Unknown', 'FourCC'
     * @readonly
     * @enum {string}
     */
    var TrackPropertyType;
    (function (TrackPropertyType) {
        /**
         * Unknown track property
         */
        TrackPropertyType["Unknown"] = "Unknown";
        /**
         * Track FourCC
         */
        TrackPropertyType["FourCC"] = "FourCC";
    })(TrackPropertyType || (TrackPropertyType = {}));
    /**
     * Defines values for TrackPropertyCompareOperation.
     * Possible values include: 'Unknown', 'Equal'
     * @readonly
     * @enum {string}
     */
    var TrackPropertyCompareOperation;
    (function (TrackPropertyCompareOperation) {
        /**
         * Unknown track property compare operation
         */
        TrackPropertyCompareOperation["Unknown"] = "Unknown";
        /**
         * Equal operation
         */
        TrackPropertyCompareOperation["Equal"] = "Equal";
    })(TrackPropertyCompareOperation || (TrackPropertyCompareOperation = {}));
    /**
     * Defines values for StreamingLocatorContentKeyType.
     * Possible values include: 'CommonEncryptionCenc', 'CommonEncryptionCbcs',
     * 'EnvelopeEncryption'
     * @readonly
     * @enum {string}
     */
    var StreamingLocatorContentKeyType;
    (function (StreamingLocatorContentKeyType) {
        /**
         * Common Encryption using CENC
         */
        StreamingLocatorContentKeyType["CommonEncryptionCenc"] = "CommonEncryptionCenc";
        /**
         * Common Encryption using CBCS
         */
        StreamingLocatorContentKeyType["CommonEncryptionCbcs"] = "CommonEncryptionCbcs";
        /**
         * Envelope Encryption
         */
        StreamingLocatorContentKeyType["EnvelopeEncryption"] = "EnvelopeEncryption";
    })(StreamingLocatorContentKeyType || (StreamingLocatorContentKeyType = {}));
    /**
     * Defines values for StreamingPolicyStreamingProtocol.
     * Possible values include: 'Hls', 'Dash', 'SmoothStreaming', 'Download'
     * @readonly
     * @enum {string}
     */
    var StreamingPolicyStreamingProtocol;
    (function (StreamingPolicyStreamingProtocol) {
        /**
         * HLS protocol
         */
        StreamingPolicyStreamingProtocol["Hls"] = "Hls";
        /**
         * DASH protocol
         */
        StreamingPolicyStreamingProtocol["Dash"] = "Dash";
        /**
         * SmoothStreaming protocol
         */
        StreamingPolicyStreamingProtocol["SmoothStreaming"] = "SmoothStreaming";
        /**
         * Download protocol
         */
        StreamingPolicyStreamingProtocol["Download"] = "Download";
    })(StreamingPolicyStreamingProtocol || (StreamingPolicyStreamingProtocol = {}));
    /**
     * Defines values for EncryptionScheme.
     * Possible values include: 'NoEncryption', 'EnvelopeEncryption',
     * 'CommonEncryptionCenc', 'CommonEncryptionCbcs'
     * @readonly
     * @enum {string}
     */
    var EncryptionScheme;
    (function (EncryptionScheme) {
        /**
         * NoEncryption scheme
         */
        EncryptionScheme["NoEncryption"] = "NoEncryption";
        /**
         * EnvelopeEncryption scheme
         */
        EncryptionScheme["EnvelopeEncryption"] = "EnvelopeEncryption";
        /**
         * CommonEncryptionCenc scheme
         */
        EncryptionScheme["CommonEncryptionCenc"] = "CommonEncryptionCenc";
        /**
         * CommonEncryptionCbcs scheme
         */
        EncryptionScheme["CommonEncryptionCbcs"] = "CommonEncryptionCbcs";
    })(EncryptionScheme || (EncryptionScheme = {}));
    /**
     * Defines values for LiveOutputResourceState.
     * Possible values include: 'Creating', 'Running', 'Deleting'
     * @readonly
     * @enum {string}
     */
    var LiveOutputResourceState;
    (function (LiveOutputResourceState) {
        LiveOutputResourceState["Creating"] = "Creating";
        LiveOutputResourceState["Running"] = "Running";
        LiveOutputResourceState["Deleting"] = "Deleting";
    })(LiveOutputResourceState || (LiveOutputResourceState = {}));
    /**
     * Defines values for LiveEventInputProtocol.
     * Possible values include: 'FragmentedMP4', 'RTMP'
     * @readonly
     * @enum {string}
     */
    var LiveEventInputProtocol;
    (function (LiveEventInputProtocol) {
        LiveEventInputProtocol["FragmentedMP4"] = "FragmentedMP4";
        LiveEventInputProtocol["RTMP"] = "RTMP";
    })(LiveEventInputProtocol || (LiveEventInputProtocol = {}));
    /**
     * Defines values for LiveEventEncodingType.
     * Possible values include: 'None', 'Basic'
     * @readonly
     * @enum {string}
     */
    var LiveEventEncodingType;
    (function (LiveEventEncodingType) {
        LiveEventEncodingType["None"] = "None";
        LiveEventEncodingType["Basic"] = "Basic";
    })(LiveEventEncodingType || (LiveEventEncodingType = {}));
    /**
     * Defines values for LiveEventResourceState.
     * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping',
     * 'Deleting'
     * @readonly
     * @enum {string}
     */
    var LiveEventResourceState;
    (function (LiveEventResourceState) {
        LiveEventResourceState["Stopped"] = "Stopped";
        LiveEventResourceState["Starting"] = "Starting";
        LiveEventResourceState["Running"] = "Running";
        LiveEventResourceState["Stopping"] = "Stopping";
        LiveEventResourceState["Deleting"] = "Deleting";
    })(LiveEventResourceState || (LiveEventResourceState = {}));
    /**
     * Defines values for StreamOptionsFlag.
     * Possible values include: 'Default', 'LowLatency'
     * @readonly
     * @enum {string}
     */
    var StreamOptionsFlag;
    (function (StreamOptionsFlag) {
        StreamOptionsFlag["Default"] = "Default";
        StreamOptionsFlag["LowLatency"] = "LowLatency";
    })(StreamOptionsFlag || (StreamOptionsFlag = {}));
    /**
     * Defines values for StreamingEndpointResourceState.
     * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping',
     * 'Deleting', 'Scaling'
     * @readonly
     * @enum {string}
     */
    var StreamingEndpointResourceState;
    (function (StreamingEndpointResourceState) {
        StreamingEndpointResourceState["Stopped"] = "Stopped";
        StreamingEndpointResourceState["Starting"] = "Starting";
        StreamingEndpointResourceState["Running"] = "Running";
        StreamingEndpointResourceState["Stopping"] = "Stopping";
        StreamingEndpointResourceState["Deleting"] = "Deleting";
        StreamingEndpointResourceState["Scaling"] = "Scaling";
    })(StreamingEndpointResourceState || (StreamingEndpointResourceState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get FilterTrackPropertyType () { return FilterTrackPropertyType; },
        get FilterTrackPropertyCompareOperation () { return FilterTrackPropertyCompareOperation; },
        get MetricUnit () { return MetricUnit; },
        get MetricAggregationType () { return MetricAggregationType; },
        get StorageAccountType () { return StorageAccountType; },
        get AssetStorageEncryptionFormat () { return AssetStorageEncryptionFormat; },
        get AssetContainerPermission () { return AssetContainerPermission; },
        get ContentKeyPolicyPlayReadyUnknownOutputPassingOption () { return ContentKeyPolicyPlayReadyUnknownOutputPassingOption; },
        get ContentKeyPolicyPlayReadyLicenseType () { return ContentKeyPolicyPlayReadyLicenseType; },
        get ContentKeyPolicyPlayReadyContentType () { return ContentKeyPolicyPlayReadyContentType; },
        get ContentKeyPolicyRestrictionTokenType () { return ContentKeyPolicyRestrictionTokenType; },
        get ContentKeyPolicyFairPlayRentalAndLeaseKeyType () { return ContentKeyPolicyFairPlayRentalAndLeaseKeyType; },
        get AacAudioProfile () { return AacAudioProfile; },
        get StretchMode () { return StretchMode; },
        get DeinterlaceParity () { return DeinterlaceParity; },
        get DeinterlaceMode () { return DeinterlaceMode; },
        get Rotation () { return Rotation; },
        get H264VideoProfile () { return H264VideoProfile; },
        get EntropyMode () { return EntropyMode; },
        get H264Complexity () { return H264Complexity; },
        get EncoderNamedPreset () { return EncoderNamedPreset; },
        get InsightsType () { return InsightsType; },
        get OnErrorType () { return OnErrorType; },
        get Priority () { return Priority; },
        get JobErrorCode () { return JobErrorCode; },
        get JobErrorCategory () { return JobErrorCategory; },
        get JobRetry () { return JobRetry; },
        get JobState () { return JobState; },
        get TrackPropertyType () { return TrackPropertyType; },
        get TrackPropertyCompareOperation () { return TrackPropertyCompareOperation; },
        get StreamingLocatorContentKeyType () { return StreamingLocatorContentKeyType; },
        get StreamingPolicyStreamingProtocol () { return StreamingPolicyStreamingProtocol; },
        get EncryptionScheme () { return EncryptionScheme; },
        get LiveOutputResourceState () { return LiveOutputResourceState; },
        get LiveEventInputProtocol () { return LiveEventInputProtocol; },
        get LiveEventEncodingType () { return LiveEventEncodingType; },
        get LiveEventResourceState () { return LiveEventResourceState; },
        get StreamOptionsFlag () { return StreamOptionsFlag; },
        get StreamingEndpointResourceState () { return StreamingEndpointResourceState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var PresentationTimeRange = {
        serializedName: "PresentationTimeRange",
        type: {
            name: "Composite",
            className: "PresentationTimeRange",
            modelProperties: {
                startTimestamp: {
                    required: true,
                    serializedName: "startTimestamp",
                    type: {
                        name: "Number"
                    }
                },
                endTimestamp: {
                    required: true,
                    serializedName: "endTimestamp",
                    type: {
                        name: "Number"
                    }
                },
                presentationWindowDuration: {
                    required: true,
                    serializedName: "presentationWindowDuration",
                    type: {
                        name: "Number"
                    }
                },
                liveBackoffDuration: {
                    required: true,
                    serializedName: "liveBackoffDuration",
                    type: {
                        name: "Number"
                    }
                },
                timescale: {
                    required: true,
                    serializedName: "timescale",
                    type: {
                        name: "Number"
                    }
                },
                forceEndTimestamp: {
                    required: true,
                    serializedName: "forceEndTimestamp",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FilterTrackPropertyCondition = {
        serializedName: "FilterTrackPropertyCondition",
        type: {
            name: "Composite",
            className: "FilterTrackPropertyCondition",
            modelProperties: {
                property: {
                    required: true,
                    serializedName: "property",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Type",
                            "Name",
                            "Language",
                            "FourCC",
                            "Bitrate"
                        ]
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    required: true,
                    serializedName: "operation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Equal",
                            "NotEqual"
                        ]
                    }
                }
            }
        }
    };
    var FirstQuality = {
        serializedName: "FirstQuality",
        type: {
            name: "Composite",
            className: "FirstQuality",
            modelProperties: {
                bitrate: {
                    required: true,
                    serializedName: "bitrate",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FilterTrackSelection = {
        serializedName: "FilterTrackSelection",
        type: {
            name: "Composite",
            className: "FilterTrackSelection",
            modelProperties: {
                trackSelections: {
                    required: true,
                    serializedName: "trackSelections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FilterTrackPropertyCondition"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var AccountFilter = {
        serializedName: "AccountFilter",
        type: {
            name: "Composite",
            className: "AccountFilter",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { presentationTimeRange: {
                    serializedName: "properties.presentationTimeRange",
                    type: {
                        name: "Composite",
                        className: "PresentationTimeRange"
                    }
                }, firstQuality: {
                    serializedName: "properties.firstQuality",
                    type: {
                        name: "Composite",
                        className: "FirstQuality"
                    }
                }, tracks: {
                    serializedName: "properties.tracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FilterTrackSelection"
                            }
                        }
                    }
                } })
        }
    };
    var ODataError = {
        serializedName: "ODataError",
        type: {
            name: "Composite",
            className: "ODataError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ODataError"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApiError = {
        serializedName: "ApiError",
        type: {
            name: "Composite",
            className: "ApiError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ODataError"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Provider = {
        serializedName: "Provider",
        type: {
            name: "Composite",
            className: "Provider",
            modelProperties: {
                providerName: {
                    required: true,
                    serializedName: "providerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDimension = {
        serializedName: "MetricDimension",
        type: {
            name: "Composite",
            className: "MetricDimension",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                toBeExportedForShoebox: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "toBeExportedForShoebox",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Metric = {
        serializedName: "Metric",
        type: {
            name: "Composite",
            className: "Metric",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    readOnly: true,
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Bytes",
                            "Count",
                            "Milliseconds"
                        ]
                    }
                },
                aggregationType: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "aggregationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Count",
                            "Total"
                        ]
                    }
                },
                dimensions: {
                    readOnly: true,
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    readOnly: true,
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metric"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricProperties = {
        serializedName: "MetricProperties",
        type: {
            name: "Composite",
            className: "MetricProperties",
            modelProperties: {
                serviceSpecification: {
                    readOnly: true,
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "MetricProperties"
                    }
                }
            }
        }
    };
    var Location = {
        serializedName: "Location",
        type: {
            name: "Composite",
            className: "Location",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EntityNameAvailabilityCheckOutput = {
        serializedName: "EntityNameAvailabilityCheckOutput",
        type: {
            name: "Composite",
            className: "EntityNameAvailabilityCheckOutput",
            modelProperties: {
                nameAvailable: {
                    required: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccount = {
        serializedName: "StorageAccount",
        type: {
            name: "Composite",
            className: "StorageAccount",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary"
                        ]
                    }
                }
            }
        }
    };
    var SyncStorageKeysInput = {
        serializedName: "SyncStorageKeysInput",
        type: {
            name: "Composite",
            className: "SyncStorageKeysInput",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MediaService = {
        serializedName: "MediaService",
        type: {
            name: "Composite",
            className: "MediaService",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { mediaServiceId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.mediaServiceId",
                    type: {
                        name: "Uuid"
                    }
                }, storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                } })
        }
    };
    var SubscriptionMediaService = {
        serializedName: "SubscriptionMediaService",
        type: {
            name: "Composite",
            className: "SubscriptionMediaService",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { mediaServiceId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.mediaServiceId",
                    type: {
                        name: "Uuid"
                    }
                }, storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                } })
        }
    };
    var CheckNameAvailabilityInput = {
        serializedName: "CheckNameAvailabilityInput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityInput",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AssetContainerSas = {
        serializedName: "AssetContainerSas",
        type: {
            name: "Composite",
            className: "AssetContainerSas",
            modelProperties: {
                assetContainerSasUrls: {
                    serializedName: "assetContainerSasUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AssetFileEncryptionMetadata = {
        serializedName: "AssetFileEncryptionMetadata",
        type: {
            name: "Composite",
            className: "AssetFileEncryptionMetadata",
            modelProperties: {
                initializationVector: {
                    serializedName: "initializationVector",
                    type: {
                        name: "String"
                    }
                },
                assetFileName: {
                    serializedName: "assetFileName",
                    type: {
                        name: "String"
                    }
                },
                assetFileId: {
                    required: true,
                    serializedName: "assetFileId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var StorageEncryptedAssetDecryptionData = {
        serializedName: "StorageEncryptedAssetDecryptionData",
        type: {
            name: "Composite",
            className: "StorageEncryptedAssetDecryptionData",
            modelProperties: {
                key: {
                    serializedName: "key",
                    type: {
                        name: "ByteArray"
                    }
                },
                assetFileEncryptionMetadata: {
                    serializedName: "assetFileEncryptionMetadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AssetFileEncryptionMetadata"
                            }
                        }
                    }
                }
            }
        }
    };
    var AssetStreamingLocator = {
        serializedName: "AssetStreamingLocator",
        type: {
            name: "Composite",
            className: "AssetStreamingLocator",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                assetName: {
                    readOnly: true,
                    serializedName: "assetName",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                startTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                streamingLocatorId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "streamingLocatorId",
                    type: {
                        name: "Uuid"
                    }
                },
                streamingPolicyName: {
                    readOnly: true,
                    serializedName: "streamingPolicyName",
                    type: {
                        name: "String"
                    }
                },
                defaultContentKeyPolicyName: {
                    readOnly: true,
                    serializedName: "defaultContentKeyPolicyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListStreamingLocatorsResponse = {
        serializedName: "ListStreamingLocatorsResponse",
        type: {
            name: "Composite",
            className: "ListStreamingLocatorsResponse",
            modelProperties: {
                streamingLocators: {
                    readOnly: true,
                    serializedName: "streamingLocators",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AssetStreamingLocator"
                            }
                        }
                    }
                }
            }
        }
    };
    var Asset = {
        serializedName: "Asset",
        type: {
            name: "Composite",
            className: "Asset",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { assetId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.assetId",
                    type: {
                        name: "Uuid"
                    }
                }, created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, alternateId: {
                    serializedName: "properties.alternateId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, container: {
                    serializedName: "properties.container",
                    type: {
                        name: "String"
                    }
                }, storageAccountName: {
                    serializedName: "properties.storageAccountName",
                    type: {
                        name: "String"
                    }
                }, storageEncryptionFormat: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.storageEncryptionFormat",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "MediaStorageClientEncryption"
                        ]
                    }
                } })
        }
    };
    var AssetFilter = {
        serializedName: "AssetFilter",
        type: {
            name: "Composite",
            className: "AssetFilter",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { presentationTimeRange: {
                    serializedName: "properties.presentationTimeRange",
                    type: {
                        name: "Composite",
                        className: "PresentationTimeRange"
                    }
                }, firstQuality: {
                    serializedName: "properties.firstQuality",
                    type: {
                        name: "Composite",
                        className: "FirstQuality"
                    }
                }, tracks: {
                    serializedName: "properties.tracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FilterTrackSelection"
                            }
                        }
                    }
                } })
        }
    };
    var ListContainerSasInput = {
        serializedName: "ListContainerSasInput",
        type: {
            name: "Composite",
            className: "ListContainerSasInput",
            modelProperties: {
                permissions: {
                    serializedName: "permissions",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Read",
                            "ReadWrite",
                            "ReadWriteDelete"
                        ]
                    }
                },
                expiryTime: {
                    serializedName: "expiryTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction = {
        serializedName: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction",
            modelProperties: {
                bestEffort: {
                    required: true,
                    serializedName: "bestEffort",
                    type: {
                        name: "Boolean"
                    }
                },
                configurationData: {
                    required: true,
                    serializedName: "configurationData",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyPlayReadyContentKeyLocation = {
        serializedName: "ContentKeyPolicyPlayReadyContentKeyLocation",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
            className: "ContentKeyPolicyPlayReadyContentKeyLocation",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
            className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
            modelProperties: __assign({}, ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties)
        }
    };
    var ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
            className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
            modelProperties: __assign({}, ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties, { keyId: {
                    required: true,
                    serializedName: "keyId",
                    type: {
                        name: "Uuid"
                    }
                } })
        }
    };
    var ContentKeyPolicyPlayReadyPlayRight = {
        serializedName: "ContentKeyPolicyPlayReadyPlayRight",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyPlayReadyPlayRight",
            modelProperties: {
                firstPlayExpiration: {
                    serializedName: "firstPlayExpiration",
                    type: {
                        name: "TimeSpan"
                    }
                },
                scmsRestriction: {
                    serializedName: "scmsRestriction",
                    type: {
                        name: "Number"
                    }
                },
                agcAndColorStripeRestriction: {
                    serializedName: "agcAndColorStripeRestriction",
                    type: {
                        name: "Number"
                    }
                },
                explicitAnalogTelevisionOutputRestriction: {
                    serializedName: "explicitAnalogTelevisionOutputRestriction",
                    type: {
                        name: "Composite",
                        className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction"
                    }
                },
                digitalVideoOnlyContentRestriction: {
                    required: true,
                    serializedName: "digitalVideoOnlyContentRestriction",
                    type: {
                        name: "Boolean"
                    }
                },
                imageConstraintForAnalogComponentVideoRestriction: {
                    required: true,
                    serializedName: "imageConstraintForAnalogComponentVideoRestriction",
                    type: {
                        name: "Boolean"
                    }
                },
                imageConstraintForAnalogComputerMonitorRestriction: {
                    required: true,
                    serializedName: "imageConstraintForAnalogComputerMonitorRestriction",
                    type: {
                        name: "Boolean"
                    }
                },
                allowPassingVideoContentToUnknownOutput: {
                    required: true,
                    serializedName: "allowPassingVideoContentToUnknownOutput",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "NotAllowed",
                            "Allowed",
                            "AllowedWithVideoConstriction"
                        ]
                    }
                },
                uncompressedDigitalVideoOpl: {
                    serializedName: "uncompressedDigitalVideoOpl",
                    type: {
                        name: "Number"
                    }
                },
                compressedDigitalVideoOpl: {
                    serializedName: "compressedDigitalVideoOpl",
                    type: {
                        name: "Number"
                    }
                },
                analogVideoOpl: {
                    serializedName: "analogVideoOpl",
                    type: {
                        name: "Number"
                    }
                },
                compressedDigitalAudioOpl: {
                    serializedName: "compressedDigitalAudioOpl",
                    type: {
                        name: "Number"
                    }
                },
                uncompressedDigitalAudioOpl: {
                    serializedName: "uncompressedDigitalAudioOpl",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyTokenClaim = {
        serializedName: "ContentKeyPolicyTokenClaim",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyTokenClaim",
            modelProperties: {
                claimType: {
                    serializedName: "claimType",
                    type: {
                        name: "String"
                    }
                },
                claimValue: {
                    serializedName: "claimValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyPlayReadyLicense = {
        serializedName: "ContentKeyPolicyPlayReadyLicense",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyPlayReadyLicense",
            modelProperties: {
                allowTestDevices: {
                    required: true,
                    serializedName: "allowTestDevices",
                    type: {
                        name: "Boolean"
                    }
                },
                beginDate: {
                    serializedName: "beginDate",
                    type: {
                        name: "DateTime"
                    }
                },
                expirationDate: {
                    serializedName: "expirationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                relativeBeginDate: {
                    serializedName: "relativeBeginDate",
                    type: {
                        name: "TimeSpan"
                    }
                },
                relativeExpirationDate: {
                    serializedName: "relativeExpirationDate",
                    type: {
                        name: "TimeSpan"
                    }
                },
                gracePeriod: {
                    serializedName: "gracePeriod",
                    type: {
                        name: "TimeSpan"
                    }
                },
                playRight: {
                    serializedName: "playRight",
                    type: {
                        name: "Composite",
                        className: "ContentKeyPolicyPlayReadyPlayRight"
                    }
                },
                licenseType: {
                    required: true,
                    serializedName: "licenseType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "NonPersistent",
                            "Persistent"
                        ]
                    }
                },
                contentKeyLocation: {
                    required: true,
                    serializedName: "contentKeyLocation",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "@odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
                        className: "ContentKeyPolicyPlayReadyContentKeyLocation"
                    }
                },
                contentType: {
                    required: true,
                    serializedName: "contentType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Unspecified",
                            "UltraVioletDownload",
                            "UltraVioletStreaming"
                        ]
                    }
                }
            }
        }
    };
    var ContentKeyPolicyRestriction = {
        serializedName: "ContentKeyPolicyRestriction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "ContentKeyPolicyRestriction",
            className: "ContentKeyPolicyRestriction",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyOpenRestriction = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyRestriction",
            className: "ContentKeyPolicyOpenRestriction",
            modelProperties: __assign({}, ContentKeyPolicyRestriction.type.modelProperties)
        }
    };
    var ContentKeyPolicyUnknownRestriction = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownRestriction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyRestriction",
            className: "ContentKeyPolicyUnknownRestriction",
            modelProperties: __assign({}, ContentKeyPolicyRestriction.type.modelProperties)
        }
    };
    var ContentKeyPolicyConfiguration = {
        serializedName: "ContentKeyPolicyConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "ContentKeyPolicyConfiguration",
            className: "ContentKeyPolicyConfiguration",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyRestrictionTokenKey = {
        serializedName: "ContentKeyPolicyRestrictionTokenKey",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "ContentKeyPolicyRestrictionTokenKey",
            className: "ContentKeyPolicyRestrictionTokenKey",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentKeyPolicySymmetricTokenKey = {
        serializedName: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyRestrictionTokenKey",
            className: "ContentKeyPolicySymmetricTokenKey",
            modelProperties: __assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties, { keyValue: {
                    required: true,
                    serializedName: "keyValue",
                    type: {
                        name: "ByteArray"
                    }
                } })
        }
    };
    var ContentKeyPolicyRsaTokenKey = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyRsaTokenKey",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyRestrictionTokenKey",
            className: "ContentKeyPolicyRsaTokenKey",
            modelProperties: __assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties, { exponent: {
                    required: true,
                    serializedName: "exponent",
                    type: {
                        name: "ByteArray"
                    }
                }, modulus: {
                    required: true,
                    serializedName: "modulus",
                    type: {
                        name: "ByteArray"
                    }
                } })
        }
    };
    var ContentKeyPolicyX509CertificateTokenKey = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyRestrictionTokenKey",
            className: "ContentKeyPolicyX509CertificateTokenKey",
            modelProperties: __assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties, { rawBody: {
                    required: true,
                    serializedName: "rawBody",
                    type: {
                        name: "ByteArray"
                    }
                } })
        }
    };
    var ContentKeyPolicyTokenRestriction = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyRestriction",
            className: "ContentKeyPolicyTokenRestriction",
            modelProperties: __assign({}, ContentKeyPolicyRestriction.type.modelProperties, { issuer: {
                    required: true,
                    serializedName: "issuer",
                    type: {
                        name: "String"
                    }
                }, audience: {
                    required: true,
                    serializedName: "audience",
                    type: {
                        name: "String"
                    }
                }, primaryVerificationKey: {
                    required: true,
                    serializedName: "primaryVerificationKey",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "@odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "ContentKeyPolicyRestrictionTokenKey",
                        className: "ContentKeyPolicyRestrictionTokenKey"
                    }
                }, alternateVerificationKeys: {
                    serializedName: "alternateVerificationKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "@odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "ContentKeyPolicyRestrictionTokenKey",
                                className: "ContentKeyPolicyRestrictionTokenKey"
                            }
                        }
                    }
                }, requiredClaims: {
                    serializedName: "requiredClaims",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContentKeyPolicyTokenClaim"
                            }
                        }
                    }
                }, restrictionTokenType: {
                    required: true,
                    serializedName: "restrictionTokenType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Swt",
                            "Jwt"
                        ]
                    }
                }, openIdConnectDiscoveryDocument: {
                    serializedName: "openIdConnectDiscoveryDocument",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ContentKeyPolicyClearKeyConfiguration = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyConfiguration",
            className: "ContentKeyPolicyClearKeyConfiguration",
            modelProperties: __assign({}, ContentKeyPolicyConfiguration.type.modelProperties)
        }
    };
    var ContentKeyPolicyUnknownConfiguration = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyConfiguration",
            className: "ContentKeyPolicyUnknownConfiguration",
            modelProperties: __assign({}, ContentKeyPolicyConfiguration.type.modelProperties)
        }
    };
    var ContentKeyPolicyWidevineConfiguration = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyConfiguration",
            className: "ContentKeyPolicyWidevineConfiguration",
            modelProperties: __assign({}, ContentKeyPolicyConfiguration.type.modelProperties, { widevineTemplate: {
                    required: true,
                    serializedName: "widevineTemplate",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ContentKeyPolicyPlayReadyConfiguration = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyConfiguration",
            className: "ContentKeyPolicyPlayReadyConfiguration",
            modelProperties: __assign({}, ContentKeyPolicyConfiguration.type.modelProperties, { licenses: {
                    required: true,
                    serializedName: "licenses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContentKeyPolicyPlayReadyLicense"
                            }
                        }
                    }
                }, responseCustomData: {
                    serializedName: "responseCustomData",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ContentKeyPolicyFairPlayConfiguration = {
        serializedName: "#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
            uberParent: "ContentKeyPolicyConfiguration",
            className: "ContentKeyPolicyFairPlayConfiguration",
            modelProperties: __assign({}, ContentKeyPolicyConfiguration.type.modelProperties, { ask: {
                    required: true,
                    serializedName: "ask",
                    type: {
                        name: "ByteArray"
                    }
                }, fairPlayPfxPassword: {
                    required: true,
                    serializedName: "fairPlayPfxPassword",
                    type: {
                        name: "String"
                    }
                }, fairPlayPfx: {
                    required: true,
                    serializedName: "fairPlayPfx",
                    type: {
                        name: "String"
                    }
                }, rentalAndLeaseKeyType: {
                    required: true,
                    serializedName: "rentalAndLeaseKeyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Undefined",
                            "PersistentUnlimited",
                            "PersistentLimited"
                        ]
                    }
                }, rentalDuration: {
                    required: true,
                    serializedName: "rentalDuration",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ContentKeyPolicyOption = {
        serializedName: "ContentKeyPolicyOption",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyOption",
            modelProperties: {
                policyOptionId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "policyOptionId",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                configuration: {
                    required: true,
                    serializedName: "configuration",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "@odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "ContentKeyPolicyConfiguration",
                        className: "ContentKeyPolicyConfiguration"
                    }
                },
                restriction: {
                    required: true,
                    serializedName: "restriction",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "@odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "ContentKeyPolicyRestriction",
                        className: "ContentKeyPolicyRestriction"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyProperties = {
        serializedName: "ContentKeyPolicyProperties",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyProperties",
            modelProperties: {
                policyId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "policyId",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                options: {
                    required: true,
                    serializedName: "options",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContentKeyPolicyOption"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContentKeyPolicy = {
        serializedName: "ContentKeyPolicy",
        type: {
            name: "Composite",
            className: "ContentKeyPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { policyId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.policyId",
                    type: {
                        name: "Uuid"
                    }
                }, created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, options: {
                    required: true,
                    serializedName: "properties.options",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContentKeyPolicyOption"
                            }
                        }
                    }
                } })
        }
    };
    var Preset = {
        serializedName: "Preset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "Preset",
            className: "Preset",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Codec = {
        serializedName: "Codec",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "Codec",
            className: "Codec",
            modelProperties: {
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Audio = {
        serializedName: "#Microsoft.Media.Audio",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "Audio",
            modelProperties: __assign({}, Codec.type.modelProperties, { channels: {
                    serializedName: "channels",
                    type: {
                        name: "Number"
                    }
                }, samplingRate: {
                    serializedName: "samplingRate",
                    type: {
                        name: "Number"
                    }
                }, bitrate: {
                    serializedName: "bitrate",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var AacAudio = {
        serializedName: "#Microsoft.Media.AacAudio",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "AacAudio",
            modelProperties: __assign({}, Audio.type.modelProperties, { profile: {
                    serializedName: "profile",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AacLc",
                            "HeAacV1",
                            "HeAacV2"
                        ]
                    }
                } })
        }
    };
    var AudioAnalyzerPreset = {
        serializedName: "#Microsoft.Media.AudioAnalyzerPreset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
            uberParent: "Preset",
            className: "AudioAnalyzerPreset",
            modelProperties: __assign({}, Preset.type.modelProperties, { audioLanguage: {
                    serializedName: "audioLanguage",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Overlay = {
        serializedName: "Overlay",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "Overlay",
            className: "Overlay",
            modelProperties: {
                inputLabel: {
                    serializedName: "inputLabel",
                    type: {
                        name: "String"
                    }
                },
                start: {
                    serializedName: "start",
                    type: {
                        name: "TimeSpan"
                    }
                },
                end: {
                    serializedName: "end",
                    type: {
                        name: "TimeSpan"
                    }
                },
                fadeInDuration: {
                    serializedName: "fadeInDuration",
                    type: {
                        name: "TimeSpan"
                    }
                },
                fadeOutDuration: {
                    serializedName: "fadeOutDuration",
                    type: {
                        name: "TimeSpan"
                    }
                },
                audioGainLevel: {
                    serializedName: "audioGainLevel",
                    type: {
                        name: "Number"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AudioOverlay = {
        serializedName: "#Microsoft.Media.AudioOverlay",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Overlay.type.polymorphicDiscriminator,
            uberParent: "Overlay",
            className: "AudioOverlay",
            modelProperties: __assign({}, Overlay.type.modelProperties)
        }
    };
    var CopyVideo = {
        serializedName: "#Microsoft.Media.CopyVideo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "CopyVideo",
            modelProperties: __assign({}, Codec.type.modelProperties)
        }
    };
    var Video = {
        serializedName: "#Microsoft.Media.Video",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "Video",
            modelProperties: __assign({}, Codec.type.modelProperties, { keyFrameInterval: {
                    serializedName: "keyFrameInterval",
                    type: {
                        name: "TimeSpan"
                    }
                }, stretchMode: {
                    serializedName: "stretchMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "AutoSize",
                            "AutoFit"
                        ]
                    }
                } })
        }
    };
    var Image = {
        serializedName: "#Microsoft.Media.Image",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "Image",
            modelProperties: __assign({}, Video.type.modelProperties, { start: {
                    serializedName: "start",
                    type: {
                        name: "String"
                    }
                }, step: {
                    serializedName: "step",
                    type: {
                        name: "String"
                    }
                }, range: {
                    serializedName: "range",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Format = {
        serializedName: "Format",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "Format",
            className: "Format",
            modelProperties: {
                filenamePattern: {
                    serializedName: "filenamePattern",
                    type: {
                        name: "String"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageFormat = {
        serializedName: "#Microsoft.Media.ImageFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Format.type.polymorphicDiscriminator,
            uberParent: "Format",
            className: "ImageFormat",
            modelProperties: __assign({}, Format.type.modelProperties)
        }
    };
    var JpgFormat = {
        serializedName: "#Microsoft.Media.JpgFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Format.type.polymorphicDiscriminator,
            uberParent: "Format",
            className: "JpgFormat",
            modelProperties: __assign({}, ImageFormat.type.modelProperties)
        }
    };
    var PngFormat = {
        serializedName: "#Microsoft.Media.PngFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Format.type.polymorphicDiscriminator,
            uberParent: "Format",
            className: "PngFormat",
            modelProperties: __assign({}, ImageFormat.type.modelProperties)
        }
    };
    var CopyAudio = {
        serializedName: "#Microsoft.Media.CopyAudio",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "CopyAudio",
            modelProperties: __assign({}, Codec.type.modelProperties)
        }
    };
    var Deinterlace = {
        serializedName: "Deinterlace",
        type: {
            name: "Composite",
            className: "Deinterlace",
            modelProperties: {
                parity: {
                    serializedName: "parity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Auto",
                            "TopFieldFirst",
                            "BottomFieldFirst"
                        ]
                    }
                },
                mode: {
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "AutoPixelAdaptive"
                        ]
                    }
                }
            }
        }
    };
    var Rectangle = {
        serializedName: "Rectangle",
        type: {
            name: "Composite",
            className: "Rectangle",
            modelProperties: {
                left: {
                    serializedName: "left",
                    type: {
                        name: "String"
                    }
                },
                top: {
                    serializedName: "top",
                    type: {
                        name: "String"
                    }
                },
                width: {
                    serializedName: "width",
                    type: {
                        name: "String"
                    }
                },
                height: {
                    serializedName: "height",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Filters = {
        serializedName: "Filters",
        type: {
            name: "Composite",
            className: "Filters",
            modelProperties: {
                deinterlace: {
                    serializedName: "deinterlace",
                    type: {
                        name: "Composite",
                        className: "Deinterlace"
                    }
                },
                rotation: {
                    serializedName: "rotation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Auto",
                            "None",
                            "Rotate0",
                            "Rotate90",
                            "Rotate180",
                            "Rotate270"
                        ]
                    }
                },
                crop: {
                    serializedName: "crop",
                    type: {
                        name: "Composite",
                        className: "Rectangle"
                    }
                },
                overlays: {
                    serializedName: "overlays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "@odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "Overlay",
                                className: "Overlay"
                            }
                        }
                    }
                }
            }
        }
    };
    var Layer = {
        serializedName: "Layer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "Layer",
            className: "Layer",
            modelProperties: {
                width: {
                    serializedName: "width",
                    type: {
                        name: "String"
                    }
                },
                height: {
                    serializedName: "height",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VideoLayer = {
        serializedName: "#Microsoft.Media.VideoLayer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
            uberParent: "Layer",
            className: "VideoLayer",
            modelProperties: __assign({}, Layer.type.modelProperties, { bitrate: {
                    serializedName: "bitrate",
                    type: {
                        name: "Number"
                    }
                }, maxBitrate: {
                    serializedName: "maxBitrate",
                    type: {
                        name: "Number"
                    }
                }, bFrames: {
                    serializedName: "bFrames",
                    type: {
                        name: "Number"
                    }
                }, frameRate: {
                    serializedName: "frameRate",
                    type: {
                        name: "String"
                    }
                }, slices: {
                    serializedName: "slices",
                    type: {
                        name: "Number"
                    }
                }, adaptiveBFrame: {
                    serializedName: "adaptiveBFrame",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var H264Layer = {
        serializedName: "#Microsoft.Media.H264Layer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
            uberParent: "Layer",
            className: "H264Layer",
            modelProperties: __assign({}, VideoLayer.type.modelProperties, { profile: {
                    serializedName: "profile",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Auto",
                            "Baseline",
                            "Main",
                            "High",
                            "High422",
                            "High444"
                        ]
                    }
                }, level: {
                    serializedName: "level",
                    type: {
                        name: "String"
                    }
                }, bufferWindow: {
                    serializedName: "bufferWindow",
                    type: {
                        name: "TimeSpan"
                    }
                }, referenceFrames: {
                    serializedName: "referenceFrames",
                    type: {
                        name: "Number"
                    }
                }, entropyMode: {
                    serializedName: "entropyMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Cabac",
                            "Cavlc"
                        ]
                    }
                } })
        }
    };
    var H264Video = {
        serializedName: "#Microsoft.Media.H264Video",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "H264Video",
            modelProperties: __assign({}, Video.type.modelProperties, { sceneChangeDetection: {
                    serializedName: "sceneChangeDetection",
                    type: {
                        name: "Boolean"
                    }
                }, complexity: {
                    serializedName: "complexity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Speed",
                            "Balanced",
                            "Quality"
                        ]
                    }
                }, layers: {
                    serializedName: "layers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
                                uberParent: "Layer",
                                className: "H264Layer"
                            }
                        }
                    }
                } })
        }
    };
    var JpgLayer = {
        serializedName: "#Microsoft.Media.JpgLayer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
            uberParent: "Layer",
            className: "JpgLayer",
            modelProperties: __assign({}, Layer.type.modelProperties, { quality: {
                    serializedName: "quality",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var JpgImage = {
        serializedName: "#Microsoft.Media.JpgImage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "JpgImage",
            modelProperties: __assign({}, Image.type.modelProperties, { layers: {
                    serializedName: "layers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
                                uberParent: "Layer",
                                className: "JpgLayer"
                            }
                        }
                    }
                } })
        }
    };
    var OutputFile = {
        serializedName: "OutputFile",
        type: {
            name: "Composite",
            className: "OutputFile",
            modelProperties: {
                labels: {
                    serializedName: "labels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MultiBitrateFormat = {
        serializedName: "#Microsoft.Media.MultiBitrateFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Format.type.polymorphicDiscriminator,
            uberParent: "Format",
            className: "MultiBitrateFormat",
            modelProperties: __assign({}, Format.type.modelProperties, { outputFiles: {
                    serializedName: "outputFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OutputFile"
                            }
                        }
                    }
                } })
        }
    };
    var Mp4Format = {
        serializedName: "#Microsoft.Media.Mp4Format",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Format.type.polymorphicDiscriminator,
            uberParent: "Format",
            className: "Mp4Format",
            modelProperties: __assign({}, MultiBitrateFormat.type.modelProperties)
        }
    };
    var PngLayer = {
        serializedName: "#Microsoft.Media.PngLayer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
            uberParent: "Layer",
            className: "PngLayer",
            modelProperties: __assign({}, Layer.type.modelProperties)
        }
    };
    var PngImage = {
        serializedName: "#Microsoft.Media.PngImage",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
            uberParent: "Codec",
            className: "PngImage",
            modelProperties: __assign({}, Image.type.modelProperties, { layers: {
                    serializedName: "layers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: Layer.type.polymorphicDiscriminator,
                                uberParent: "Layer",
                                className: "PngLayer"
                            }
                        }
                    }
                } })
        }
    };
    var BuiltInStandardEncoderPreset = {
        serializedName: "#Microsoft.Media.BuiltInStandardEncoderPreset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
            uberParent: "Preset",
            className: "BuiltInStandardEncoderPreset",
            modelProperties: __assign({}, Preset.type.modelProperties, { presetName: {
                    required: true,
                    serializedName: "presetName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "H264SingleBitrateSD",
                            "H264SingleBitrate720p",
                            "H264SingleBitrate1080p",
                            "AdaptiveStreaming",
                            "AACGoodQualityAudio",
                            "H264MultipleBitrate1080p",
                            "H264MultipleBitrate720p",
                            "H264MultipleBitrateSD"
                        ]
                    }
                } })
        }
    };
    var StandardEncoderPreset = {
        serializedName: "#Microsoft.Media.StandardEncoderPreset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
            uberParent: "Preset",
            className: "StandardEncoderPreset",
            modelProperties: __assign({}, Preset.type.modelProperties, { filters: {
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "Filters"
                    }
                }, codecs: {
                    serializedName: "codecs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "@odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "Codec",
                                className: "Codec"
                            }
                        }
                    }
                }, formats: {
                    serializedName: "formats",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "@odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "Format",
                                className: "Format"
                            }
                        }
                    }
                } })
        }
    };
    var VideoAnalyzerPreset = {
        serializedName: "#Microsoft.Media.VideoAnalyzerPreset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
            uberParent: "Preset",
            className: "VideoAnalyzerPreset",
            modelProperties: __assign({}, AudioAnalyzerPreset.type.modelProperties, { insightsToExtract: {
                    serializedName: "insightsToExtract",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AudioInsightsOnly",
                            "VideoInsightsOnly",
                            "AllInsights"
                        ]
                    }
                } })
        }
    };
    var TransportStreamFormat = {
        serializedName: "#Microsoft.Media.TransportStreamFormat",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Format.type.polymorphicDiscriminator,
            uberParent: "Format",
            className: "TransportStreamFormat",
            modelProperties: __assign({}, MultiBitrateFormat.type.modelProperties)
        }
    };
    var VideoOverlay = {
        serializedName: "#Microsoft.Media.VideoOverlay",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Overlay.type.polymorphicDiscriminator,
            uberParent: "Overlay",
            className: "VideoOverlay",
            modelProperties: __assign({}, Overlay.type.modelProperties, { position: {
                    serializedName: "position",
                    type: {
                        name: "Composite",
                        className: "Rectangle"
                    }
                }, opacity: {
                    serializedName: "opacity",
                    type: {
                        name: "Number"
                    }
                }, cropRectangle: {
                    serializedName: "cropRectangle",
                    type: {
                        name: "Composite",
                        className: "Rectangle"
                    }
                } })
        }
    };
    var TransformOutput = {
        serializedName: "TransformOutput",
        type: {
            name: "Composite",
            className: "TransformOutput",
            modelProperties: {
                onError: {
                    serializedName: "onError",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StopProcessingJob",
                            "ContinueJob"
                        ]
                    }
                },
                relativePriority: {
                    serializedName: "relativePriority",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Normal",
                            "High"
                        ]
                    }
                },
                preset: {
                    required: true,
                    serializedName: "preset",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "@odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "Preset",
                        className: "Preset"
                    }
                }
            }
        }
    };
    var Transform = {
        serializedName: "Transform",
        type: {
            name: "Composite",
            className: "Transform",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, outputs: {
                    required: true,
                    serializedName: "properties.outputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TransformOutput"
                            }
                        }
                    }
                } })
        }
    };
    var JobInput = {
        serializedName: "JobInput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "JobInput",
            className: "JobInput",
            modelProperties: {
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobInputClip = {
        serializedName: "#Microsoft.Media.JobInputClip",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
            uberParent: "JobInput",
            className: "JobInputClip",
            modelProperties: __assign({}, JobInput.type.modelProperties, { files: {
                    serializedName: "files",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobInputs = {
        serializedName: "#Microsoft.Media.JobInputs",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
            uberParent: "JobInput",
            className: "JobInputs",
            modelProperties: __assign({}, JobInput.type.modelProperties, { inputs: {
                    serializedName: "inputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "@odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "JobInput",
                                className: "JobInput"
                            }
                        }
                    }
                } })
        }
    };
    var JobInputAsset = {
        serializedName: "#Microsoft.Media.JobInputAsset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
            uberParent: "JobInput",
            className: "JobInputAsset",
            modelProperties: __assign({}, JobInputClip.type.modelProperties, { assetName: {
                    required: true,
                    serializedName: "assetName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobInputHttp = {
        serializedName: "#Microsoft.Media.JobInputHttp",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
            uberParent: "JobInput",
            className: "JobInputHttp",
            modelProperties: __assign({}, JobInputClip.type.modelProperties, { baseUri: {
                    serializedName: "baseUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobErrorDetail = {
        serializedName: "JobErrorDetail",
        type: {
            name: "Composite",
            className: "JobErrorDetail",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobError = {
        serializedName: "JobError",
        type: {
            name: "Composite",
            className: "JobError",
            modelProperties: {
                code: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ServiceError",
                            "ServiceTransientError",
                            "DownloadNotAccessible",
                            "DownloadTransientError",
                            "UploadNotAccessible",
                            "UploadTransientError",
                            "ConfigurationUnsupported",
                            "ContentMalformed",
                            "ContentUnsupported"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "category",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Service",
                            "Download",
                            "Upload",
                            "Configuration",
                            "Content"
                        ]
                    }
                },
                retry: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "retry",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DoNotRetry",
                            "MayRetry"
                        ]
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobOutput = {
        serializedName: "JobOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "@odata.type",
                clientName: "odatatype"
            },
            uberParent: "JobOutput",
            className: "JobOutput",
            modelProperties: {
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "JobError"
                    }
                },
                state: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Canceled",
                            "Canceling",
                            "Error",
                            "Finished",
                            "Processing",
                            "Queued",
                            "Scheduled"
                        ]
                    }
                },
                progress: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "progress",
                    type: {
                        name: "Number"
                    }
                },
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                odatatype: {
                    required: true,
                    serializedName: "@odata\\.type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobOutputAsset = {
        serializedName: "#Microsoft.Media.JobOutputAsset",
        type: {
            name: "Composite",
            polymorphicDiscriminator: JobOutput.type.polymorphicDiscriminator,
            uberParent: "JobOutput",
            className: "JobOutputAsset",
            modelProperties: __assign({}, JobOutput.type.modelProperties, { assetName: {
                    required: true,
                    serializedName: "assetName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Canceled",
                            "Canceling",
                            "Error",
                            "Finished",
                            "Processing",
                            "Queued",
                            "Scheduled"
                        ]
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, input: {
                    required: true,
                    serializedName: "properties.input",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "@odata.type",
                            clientName: "odatatype"
                        },
                        uberParent: "JobInput",
                        className: "JobInput"
                    }
                }, lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, outputs: {
                    required: true,
                    serializedName: "properties.outputs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "@odata.type",
                                    clientName: "odatatype"
                                },
                                uberParent: "JobOutput",
                                className: "JobOutput"
                            }
                        }
                    }
                }, priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Normal",
                            "High"
                        ]
                    }
                }, correlationData: {
                    serializedName: "properties.correlationData",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var TrackPropertyCondition = {
        serializedName: "TrackPropertyCondition",
        type: {
            name: "Composite",
            className: "TrackPropertyCondition",
            modelProperties: {
                property: {
                    required: true,
                    serializedName: "property",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "FourCC"
                        ]
                    }
                },
                operation: {
                    required: true,
                    serializedName: "operation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Equal"
                        ]
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackSelection = {
        serializedName: "TrackSelection",
        type: {
            name: "Composite",
            className: "TrackSelection",
            modelProperties: {
                trackSelections: {
                    serializedName: "trackSelections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackPropertyCondition"
                            }
                        }
                    }
                }
            }
        }
    };
    var DefaultKey = {
        serializedName: "DefaultKey",
        type: {
            name: "Composite",
            className: "DefaultKey",
            modelProperties: {
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                policyName: {
                    serializedName: "policyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingPolicyContentKey = {
        serializedName: "StreamingPolicyContentKey",
        type: {
            name: "Composite",
            className: "StreamingPolicyContentKey",
            modelProperties: {
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                policyName: {
                    serializedName: "policyName",
                    type: {
                        name: "String"
                    }
                },
                tracks: {
                    serializedName: "tracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackSelection"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingPolicyContentKeys = {
        serializedName: "StreamingPolicyContentKeys",
        type: {
            name: "Composite",
            className: "StreamingPolicyContentKeys",
            modelProperties: {
                defaultKey: {
                    serializedName: "defaultKey",
                    type: {
                        name: "Composite",
                        className: "DefaultKey"
                    }
                },
                keyToTrackMappings: {
                    serializedName: "keyToTrackMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingPolicyContentKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingPolicyPlayReadyConfiguration = {
        serializedName: "StreamingPolicyPlayReadyConfiguration",
        type: {
            name: "Composite",
            className: "StreamingPolicyPlayReadyConfiguration",
            modelProperties: {
                customLicenseAcquisitionUrlTemplate: {
                    serializedName: "customLicenseAcquisitionUrlTemplate",
                    type: {
                        name: "String"
                    }
                },
                playReadyCustomAttributes: {
                    serializedName: "playReadyCustomAttributes",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingPolicyWidevineConfiguration = {
        serializedName: "StreamingPolicyWidevineConfiguration",
        type: {
            name: "Composite",
            className: "StreamingPolicyWidevineConfiguration",
            modelProperties: {
                customLicenseAcquisitionUrlTemplate: {
                    serializedName: "customLicenseAcquisitionUrlTemplate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingPolicyFairPlayConfiguration = {
        serializedName: "StreamingPolicyFairPlayConfiguration",
        type: {
            name: "Composite",
            className: "StreamingPolicyFairPlayConfiguration",
            modelProperties: {
                customLicenseAcquisitionUrlTemplate: {
                    serializedName: "customLicenseAcquisitionUrlTemplate",
                    type: {
                        name: "String"
                    }
                },
                allowPersistentLicense: {
                    required: true,
                    serializedName: "allowPersistentLicense",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CbcsDrmConfiguration = {
        serializedName: "CbcsDrmConfiguration",
        type: {
            name: "Composite",
            className: "CbcsDrmConfiguration",
            modelProperties: {
                fairPlay: {
                    serializedName: "fairPlay",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyFairPlayConfiguration"
                    }
                },
                playReady: {
                    serializedName: "playReady",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyPlayReadyConfiguration"
                    }
                },
                widevine: {
                    serializedName: "widevine",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyWidevineConfiguration"
                    }
                }
            }
        }
    };
    var CencDrmConfiguration = {
        serializedName: "CencDrmConfiguration",
        type: {
            name: "Composite",
            className: "CencDrmConfiguration",
            modelProperties: {
                playReady: {
                    serializedName: "playReady",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyPlayReadyConfiguration"
                    }
                },
                widevine: {
                    serializedName: "widevine",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyWidevineConfiguration"
                    }
                }
            }
        }
    };
    var EnabledProtocols = {
        serializedName: "EnabledProtocols",
        type: {
            name: "Composite",
            className: "EnabledProtocols",
            modelProperties: {
                download: {
                    required: true,
                    serializedName: "download",
                    type: {
                        name: "Boolean"
                    }
                },
                dash: {
                    required: true,
                    serializedName: "dash",
                    type: {
                        name: "Boolean"
                    }
                },
                hls: {
                    required: true,
                    serializedName: "hls",
                    type: {
                        name: "Boolean"
                    }
                },
                smoothStreaming: {
                    required: true,
                    serializedName: "smoothStreaming",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var NoEncryption = {
        serializedName: "NoEncryption",
        type: {
            name: "Composite",
            className: "NoEncryption",
            modelProperties: {
                enabledProtocols: {
                    serializedName: "enabledProtocols",
                    type: {
                        name: "Composite",
                        className: "EnabledProtocols"
                    }
                }
            }
        }
    };
    var EnvelopeEncryption = {
        serializedName: "EnvelopeEncryption",
        type: {
            name: "Composite",
            className: "EnvelopeEncryption",
            modelProperties: {
                enabledProtocols: {
                    serializedName: "enabledProtocols",
                    type: {
                        name: "Composite",
                        className: "EnabledProtocols"
                    }
                },
                clearTracks: {
                    serializedName: "clearTracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackSelection"
                            }
                        }
                    }
                },
                contentKeys: {
                    serializedName: "contentKeys",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyContentKeys"
                    }
                },
                customKeyAcquisitionUrlTemplate: {
                    serializedName: "customKeyAcquisitionUrlTemplate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CommonEncryptionCenc = {
        serializedName: "CommonEncryptionCenc",
        type: {
            name: "Composite",
            className: "CommonEncryptionCenc",
            modelProperties: {
                enabledProtocols: {
                    serializedName: "enabledProtocols",
                    type: {
                        name: "Composite",
                        className: "EnabledProtocols"
                    }
                },
                clearTracks: {
                    serializedName: "clearTracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackSelection"
                            }
                        }
                    }
                },
                contentKeys: {
                    serializedName: "contentKeys",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyContentKeys"
                    }
                },
                drm: {
                    serializedName: "drm",
                    type: {
                        name: "Composite",
                        className: "CencDrmConfiguration"
                    }
                }
            }
        }
    };
    var CommonEncryptionCbcs = {
        serializedName: "CommonEncryptionCbcs",
        type: {
            name: "Composite",
            className: "CommonEncryptionCbcs",
            modelProperties: {
                enabledProtocols: {
                    serializedName: "enabledProtocols",
                    type: {
                        name: "Composite",
                        className: "EnabledProtocols"
                    }
                },
                clearTracks: {
                    serializedName: "clearTracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackSelection"
                            }
                        }
                    }
                },
                contentKeys: {
                    serializedName: "contentKeys",
                    type: {
                        name: "Composite",
                        className: "StreamingPolicyContentKeys"
                    }
                },
                drm: {
                    serializedName: "drm",
                    type: {
                        name: "Composite",
                        className: "CbcsDrmConfiguration"
                    }
                }
            }
        }
    };
    var StreamingPolicy = {
        serializedName: "StreamingPolicy",
        type: {
            name: "Composite",
            className: "StreamingPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, defaultContentKeyPolicyName: {
                    serializedName: "properties.defaultContentKeyPolicyName",
                    type: {
                        name: "String"
                    }
                }, envelopeEncryption: {
                    serializedName: "properties.envelopeEncryption",
                    type: {
                        name: "Composite",
                        className: "EnvelopeEncryption"
                    }
                }, commonEncryptionCenc: {
                    serializedName: "properties.commonEncryptionCenc",
                    type: {
                        name: "Composite",
                        className: "CommonEncryptionCenc"
                    }
                }, commonEncryptionCbcs: {
                    serializedName: "properties.commonEncryptionCbcs",
                    type: {
                        name: "Composite",
                        className: "CommonEncryptionCbcs"
                    }
                }, noEncryption: {
                    serializedName: "properties.noEncryption",
                    type: {
                        name: "Composite",
                        className: "NoEncryption"
                    }
                } })
        }
    };
    var StreamingLocatorContentKey = {
        serializedName: "StreamingLocatorContentKey",
        type: {
            name: "Composite",
            className: "StreamingLocatorContentKey",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                type: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CommonEncryptionCenc",
                            "CommonEncryptionCbcs",
                            "EnvelopeEncryption"
                        ]
                    }
                },
                labelReferenceInStreamingPolicy: {
                    serializedName: "labelReferenceInStreamingPolicy",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                policyName: {
                    readOnly: true,
                    serializedName: "policyName",
                    type: {
                        name: "String"
                    }
                },
                tracks: {
                    readOnly: true,
                    serializedName: "tracks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackSelection"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingPath = {
        serializedName: "StreamingPath",
        type: {
            name: "Composite",
            className: "StreamingPath",
            modelProperties: {
                streamingProtocol: {
                    required: true,
                    serializedName: "streamingProtocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hls",
                            "Dash",
                            "SmoothStreaming",
                            "Download"
                        ]
                    }
                },
                encryptionScheme: {
                    required: true,
                    serializedName: "encryptionScheme",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NoEncryption",
                            "EnvelopeEncryption",
                            "CommonEncryptionCenc",
                            "CommonEncryptionCbcs"
                        ]
                    }
                },
                paths: {
                    serializedName: "paths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListContentKeysResponse = {
        serializedName: "ListContentKeysResponse",
        type: {
            name: "Composite",
            className: "ListContentKeysResponse",
            modelProperties: {
                contentKeys: {
                    serializedName: "contentKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingLocatorContentKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListPathsResponse = {
        serializedName: "ListPathsResponse",
        type: {
            name: "Composite",
            className: "ListPathsResponse",
            modelProperties: {
                streamingPaths: {
                    serializedName: "streamingPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingPath"
                            }
                        }
                    }
                },
                downloadPaths: {
                    serializedName: "downloadPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingLocator = {
        serializedName: "StreamingLocator",
        type: {
            name: "Composite",
            className: "StreamingLocator",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { assetName: {
                    required: true,
                    serializedName: "properties.assetName",
                    type: {
                        name: "String"
                    }
                }, created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, streamingLocatorId: {
                    serializedName: "properties.streamingLocatorId",
                    type: {
                        name: "Uuid"
                    }
                }, streamingPolicyName: {
                    required: true,
                    serializedName: "properties.streamingPolicyName",
                    type: {
                        name: "String"
                    }
                }, defaultContentKeyPolicyName: {
                    serializedName: "properties.defaultContentKeyPolicyName",
                    type: {
                        name: "String"
                    }
                }, contentKeys: {
                    serializedName: "properties.contentKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingLocatorContentKey"
                            }
                        }
                    }
                }, alternativeMediaId: {
                    serializedName: "properties.alternativeMediaId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Hls = {
        serializedName: "Hls",
        type: {
            name: "Composite",
            className: "Hls",
            modelProperties: {
                fragmentsPerTsSegment: {
                    serializedName: "fragmentsPerTsSegment",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LiveOutput = {
        serializedName: "LiveOutput",
        type: {
            name: "Composite",
            className: "LiveOutput",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, assetName: {
                    required: true,
                    serializedName: "properties.assetName",
                    type: {
                        name: "String"
                    }
                }, archiveWindowLength: {
                    required: true,
                    serializedName: "properties.archiveWindowLength",
                    type: {
                        name: "TimeSpan"
                    }
                }, manifestName: {
                    serializedName: "properties.manifestName",
                    type: {
                        name: "String"
                    }
                }, hls: {
                    serializedName: "properties.hls",
                    type: {
                        name: "Composite",
                        className: "Hls"
                    }
                }, outputSnapTime: {
                    serializedName: "properties.outputSnapTime",
                    type: {
                        name: "Number"
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Running",
                            "Deleting"
                        ]
                    }
                } })
        }
    };
    var LiveEventEndpoint = {
        serializedName: "LiveEventEndpoint",
        type: {
            name: "Composite",
            className: "LiveEventEndpoint",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IPRange = {
        serializedName: "IPRange",
        type: {
            name: "Composite",
            className: "IPRange",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                subnetPrefixLength: {
                    serializedName: "subnetPrefixLength",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IPAccessControl = {
        serializedName: "IPAccessControl",
        type: {
            name: "Composite",
            className: "IPAccessControl",
            modelProperties: {
                allow: {
                    serializedName: "allow",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPRange"
                            }
                        }
                    }
                }
            }
        }
    };
    var LiveEventInputAccessControl = {
        serializedName: "LiveEventInputAccessControl",
        type: {
            name: "Composite",
            className: "LiveEventInputAccessControl",
            modelProperties: {
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "Composite",
                        className: "IPAccessControl"
                    }
                }
            }
        }
    };
    var LiveEventInput = {
        serializedName: "LiveEventInput",
        type: {
            name: "Composite",
            className: "LiveEventInput",
            modelProperties: {
                streamingProtocol: {
                    required: true,
                    serializedName: "streamingProtocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "FragmentedMP4",
                            "RTMP"
                        ]
                    }
                },
                accessControl: {
                    serializedName: "accessControl",
                    type: {
                        name: "Composite",
                        className: "LiveEventInputAccessControl"
                    }
                },
                keyFrameIntervalDuration: {
                    serializedName: "keyFrameIntervalDuration",
                    type: {
                        name: "String"
                    }
                },
                accessToken: {
                    serializedName: "accessToken",
                    type: {
                        name: "String"
                    }
                },
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LiveEventEndpoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var LiveEventPreviewAccessControl = {
        serializedName: "LiveEventPreviewAccessControl",
        type: {
            name: "Composite",
            className: "LiveEventPreviewAccessControl",
            modelProperties: {
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "Composite",
                        className: "IPAccessControl"
                    }
                }
            }
        }
    };
    var LiveEventPreview = {
        serializedName: "LiveEventPreview",
        type: {
            name: "Composite",
            className: "LiveEventPreview",
            modelProperties: {
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LiveEventEndpoint"
                            }
                        }
                    }
                },
                accessControl: {
                    serializedName: "accessControl",
                    type: {
                        name: "Composite",
                        className: "LiveEventPreviewAccessControl"
                    }
                },
                previewLocator: {
                    serializedName: "previewLocator",
                    type: {
                        name: "String"
                    }
                },
                streamingPolicyName: {
                    serializedName: "streamingPolicyName",
                    type: {
                        name: "String"
                    }
                },
                alternativeMediaId: {
                    serializedName: "alternativeMediaId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LiveEventEncoding = {
        serializedName: "LiveEventEncoding",
        type: {
            name: "Composite",
            className: "LiveEventEncoding",
            modelProperties: {
                encodingType: {
                    serializedName: "encodingType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Basic"
                        ]
                    }
                },
                presetName: {
                    serializedName: "presetName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CrossSiteAccessPolicies = {
        serializedName: "CrossSiteAccessPolicies",
        type: {
            name: "Composite",
            className: "CrossSiteAccessPolicies",
            modelProperties: {
                clientAccessPolicy: {
                    serializedName: "clientAccessPolicy",
                    type: {
                        name: "String"
                    }
                },
                crossDomainPolicy: {
                    serializedName: "crossDomainPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LiveEventActionInput = {
        serializedName: "LiveEventActionInput",
        type: {
            name: "Composite",
            className: "LiveEventActionInput",
            modelProperties: {
                removeOutputsOnStop: {
                    serializedName: "removeOutputsOnStop",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var LiveEvent = {
        serializedName: "LiveEvent",
        type: {
            name: "Composite",
            className: "LiveEvent",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, input: {
                    required: true,
                    serializedName: "properties.input",
                    type: {
                        name: "Composite",
                        className: "LiveEventInput"
                    }
                }, preview: {
                    serializedName: "properties.preview",
                    type: {
                        name: "Composite",
                        className: "LiveEventPreview"
                    }
                }, encoding: {
                    serializedName: "properties.encoding",
                    type: {
                        name: "Composite",
                        className: "LiveEventEncoding"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Stopped",
                            "Starting",
                            "Running",
                            "Stopping",
                            "Deleting"
                        ]
                    }
                }, crossSiteAccessPolicies: {
                    serializedName: "properties.crossSiteAccessPolicies",
                    type: {
                        name: "Composite",
                        className: "CrossSiteAccessPolicies"
                    }
                }, vanityUrl: {
                    serializedName: "properties.vanityUrl",
                    type: {
                        name: "Boolean"
                    }
                }, streamOptions: {
                    serializedName: "properties.streamOptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Default",
                                    "LowLatency"
                                ]
                            }
                        }
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var AkamaiSignatureHeaderAuthenticationKey = {
        serializedName: "AkamaiSignatureHeaderAuthenticationKey",
        type: {
            name: "Composite",
            className: "AkamaiSignatureHeaderAuthenticationKey",
            modelProperties: {
                identifier: {
                    serializedName: "identifier",
                    type: {
                        name: "String"
                    }
                },
                base64Key: {
                    serializedName: "base64Key",
                    type: {
                        name: "String"
                    }
                },
                expiration: {
                    serializedName: "expiration",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AkamaiAccessControl = {
        serializedName: "AkamaiAccessControl",
        type: {
            name: "Composite",
            className: "AkamaiAccessControl",
            modelProperties: {
                akamaiSignatureHeaderAuthenticationKeyList: {
                    serializedName: "akamaiSignatureHeaderAuthenticationKeyList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AkamaiSignatureHeaderAuthenticationKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var StreamingEndpointAccessControl = {
        serializedName: "StreamingEndpointAccessControl",
        type: {
            name: "Composite",
            className: "StreamingEndpointAccessControl",
            modelProperties: {
                akamai: {
                    serializedName: "akamai",
                    type: {
                        name: "Composite",
                        className: "AkamaiAccessControl"
                    }
                },
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "Composite",
                        className: "IPAccessControl"
                    }
                }
            }
        }
    };
    var StreamingEntityScaleUnit = {
        serializedName: "StreamingEntityScaleUnit",
        type: {
            name: "Composite",
            className: "StreamingEntityScaleUnit",
            modelProperties: {
                scaleUnit: {
                    serializedName: "scaleUnit",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var StreamingEndpoint = {
        serializedName: "StreamingEndpoint",
        type: {
            name: "Composite",
            className: "StreamingEndpoint",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, scaleUnits: {
                    required: true,
                    serializedName: "properties.scaleUnits",
                    type: {
                        name: "Number"
                    }
                }, availabilitySetName: {
                    serializedName: "properties.availabilitySetName",
                    type: {
                        name: "String"
                    }
                }, accessControl: {
                    serializedName: "properties.accessControl",
                    type: {
                        name: "Composite",
                        className: "StreamingEndpointAccessControl"
                    }
                }, maxCacheAge: {
                    serializedName: "properties.maxCacheAge",
                    type: {
                        name: "Number"
                    }
                }, customHostNames: {
                    serializedName: "properties.customHostNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, hostName: {
                    readOnly: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, cdnEnabled: {
                    serializedName: "properties.cdnEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, cdnProvider: {
                    serializedName: "properties.cdnProvider",
                    type: {
                        name: "String"
                    }
                }, cdnProfile: {
                    serializedName: "properties.cdnProfile",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Stopped",
                            "Starting",
                            "Running",
                            "Stopping",
                            "Deleting",
                            "Scaling"
                        ]
                    }
                }, crossSiteAccessPolicies: {
                    serializedName: "properties.crossSiteAccessPolicies",
                    type: {
                        name: "Composite",
                        className: "CrossSiteAccessPolicies"
                    }
                }, freeTrialEndTime: {
                    readOnly: true,
                    serializedName: "properties.freeTrialEndTime",
                    type: {
                        name: "DateTime"
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var AccountFilterCollection = {
        serializedName: "AccountFilterCollection",
        type: {
            name: "Composite",
            className: "AccountFilterCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccountFilter"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationCollection = {
        serializedName: "OperationCollection",
        type: {
            name: "Composite",
            className: "OperationCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MediaServiceCollection = {
        serializedName: "MediaServiceCollection",
        type: {
            name: "Composite",
            className: "MediaServiceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MediaService"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionMediaServiceCollection = {
        serializedName: "SubscriptionMediaServiceCollection",
        type: {
            name: "Composite",
            className: "SubscriptionMediaServiceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubscriptionMediaService"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AssetCollection = {
        serializedName: "AssetCollection",
        type: {
            name: "Composite",
            className: "AssetCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Asset"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AssetFilterCollection = {
        serializedName: "AssetFilterCollection",
        type: {
            name: "Composite",
            className: "AssetFilterCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AssetFilter"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentKeyPolicyCollection = {
        serializedName: "ContentKeyPolicyCollection",
        type: {
            name: "Composite",
            className: "ContentKeyPolicyCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContentKeyPolicy"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TransformCollection = {
        serializedName: "TransformCollection",
        type: {
            name: "Composite",
            className: "TransformCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Transform"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobCollection = {
        serializedName: "JobCollection",
        type: {
            name: "Composite",
            className: "JobCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingPolicyCollection = {
        serializedName: "StreamingPolicyCollection",
        type: {
            name: "Composite",
            className: "StreamingPolicyCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingPolicy"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingLocatorCollection = {
        serializedName: "StreamingLocatorCollection",
        type: {
            name: "Composite",
            className: "StreamingLocatorCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingLocator"
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LiveEventListResult = {
        serializedName: "LiveEventListResult",
        type: {
            name: "Composite",
            className: "LiveEventListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LiveEvent"
                            }
                        }
                    }
                },
                odatacount: {
                    serializedName: "@odata\\.count",
                    type: {
                        name: "Number"
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LiveOutputListResult = {
        serializedName: "LiveOutputListResult",
        type: {
            name: "Composite",
            className: "LiveOutputListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LiveOutput"
                            }
                        }
                    }
                },
                odatacount: {
                    serializedName: "@odata\\.count",
                    type: {
                        name: "Number"
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StreamingEndpointListResult = {
        serializedName: "StreamingEndpointListResult",
        type: {
            name: "Composite",
            className: "StreamingEndpointListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StreamingEndpoint"
                            }
                        }
                    }
                },
                odatacount: {
                    serializedName: "@odata\\.count",
                    type: {
                        name: "Number"
                    }
                },
                odatanextLink: {
                    serializedName: "@odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'ContentKeyPolicyPlayReadyContentKeyLocation': ContentKeyPolicyPlayReadyContentKeyLocation,
        'ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader': ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        'ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier': ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        'ContentKeyPolicyRestriction': ContentKeyPolicyRestriction,
        'ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyOpenRestriction': ContentKeyPolicyOpenRestriction,
        'ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyUnknownRestriction': ContentKeyPolicyUnknownRestriction,
        'ContentKeyPolicyConfiguration': ContentKeyPolicyConfiguration,
        'ContentKeyPolicyRestrictionTokenKey': ContentKeyPolicyRestrictionTokenKey,
        'ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicySymmetricTokenKey': ContentKeyPolicySymmetricTokenKey,
        'ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyRsaTokenKey': ContentKeyPolicyRsaTokenKey,
        'ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey': ContentKeyPolicyX509CertificateTokenKey,
        'ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyTokenRestriction': ContentKeyPolicyTokenRestriction,
        'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration': ContentKeyPolicyClearKeyConfiguration,
        'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyUnknownConfiguration': ContentKeyPolicyUnknownConfiguration,
        'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyWidevineConfiguration': ContentKeyPolicyWidevineConfiguration,
        'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration': ContentKeyPolicyPlayReadyConfiguration,
        'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration': ContentKeyPolicyFairPlayConfiguration,
        'Preset': Preset,
        'Codec': Codec,
        'Codec.#Microsoft.Media.Audio': Audio,
        'Codec.#Microsoft.Media.AacAudio': AacAudio,
        'Preset.#Microsoft.Media.AudioAnalyzerPreset': AudioAnalyzerPreset,
        'Overlay': Overlay,
        'Overlay.#Microsoft.Media.AudioOverlay': AudioOverlay,
        'Codec.#Microsoft.Media.CopyVideo': CopyVideo,
        'Codec.#Microsoft.Media.Video': Video,
        'Codec.#Microsoft.Media.Image': Image,
        'Format': Format,
        'Format.#Microsoft.Media.ImageFormat': ImageFormat,
        'Format.#Microsoft.Media.JpgFormat': JpgFormat,
        'Format.#Microsoft.Media.PngFormat': PngFormat,
        'Codec.#Microsoft.Media.CopyAudio': CopyAudio,
        'Layer': Layer,
        'Layer.#Microsoft.Media.VideoLayer': VideoLayer,
        'Layer.#Microsoft.Media.H264Layer': H264Layer,
        'Codec.#Microsoft.Media.H264Video': H264Video,
        'Layer.#Microsoft.Media.JpgLayer': JpgLayer,
        'Codec.#Microsoft.Media.JpgImage': JpgImage,
        'Format.#Microsoft.Media.MultiBitrateFormat': MultiBitrateFormat,
        'Format.#Microsoft.Media.Mp4Format': Mp4Format,
        'Layer.#Microsoft.Media.PngLayer': PngLayer,
        'Codec.#Microsoft.Media.PngImage': PngImage,
        'Preset.#Microsoft.Media.BuiltInStandardEncoderPreset': BuiltInStandardEncoderPreset,
        'Preset.#Microsoft.Media.StandardEncoderPreset': StandardEncoderPreset,
        'Preset.#Microsoft.Media.VideoAnalyzerPreset': VideoAnalyzerPreset,
        'Format.#Microsoft.Media.TransportStreamFormat': TransportStreamFormat,
        'Overlay.#Microsoft.Media.VideoOverlay': VideoOverlay,
        'JobInput': JobInput,
        'JobInput.#Microsoft.Media.JobInputClip': JobInputClip,
        'JobInput.#Microsoft.Media.JobInputs': JobInputs,
        'JobInput.#Microsoft.Media.JobInputAsset': JobInputAsset,
        'JobInput.#Microsoft.Media.JobInputHttp': JobInputHttp,
        'JobOutput': JobOutput,
        'JobOutput.#Microsoft.Media.JobOutputAsset': JobOutputAsset
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        PresentationTimeRange: PresentationTimeRange,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        Resource: Resource,
        ProxyResource: ProxyResource,
        AccountFilter: AccountFilter,
        ODataError: ODataError,
        ApiError: ApiError,
        TrackedResource: TrackedResource,
        Provider: Provider,
        OperationDisplay: OperationDisplay,
        MetricDimension: MetricDimension,
        Metric: Metric,
        ServiceSpecification: ServiceSpecification,
        MetricProperties: MetricProperties,
        Operation: Operation,
        Location: Location,
        EntityNameAvailabilityCheckOutput: EntityNameAvailabilityCheckOutput,
        StorageAccount: StorageAccount,
        SyncStorageKeysInput: SyncStorageKeysInput,
        MediaService: MediaService,
        SubscriptionMediaService: SubscriptionMediaService,
        CheckNameAvailabilityInput: CheckNameAvailabilityInput,
        AssetContainerSas: AssetContainerSas,
        AssetFileEncryptionMetadata: AssetFileEncryptionMetadata,
        StorageEncryptedAssetDecryptionData: StorageEncryptedAssetDecryptionData,
        AssetStreamingLocator: AssetStreamingLocator,
        ListStreamingLocatorsResponse: ListStreamingLocatorsResponse,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ListContainerSasInput: ListContainerSasInput,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyProperties: ContentKeyPolicyProperties,
        ContentKeyPolicy: ContentKeyPolicy,
        Preset: Preset,
        Codec: Codec,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        Overlay: Overlay,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        Format: Format,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Filters: Filters,
        Layer: Layer,
        VideoLayer: VideoLayer,
        H264Layer: H264Layer,
        H264Video: H264Video,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        OutputFile: OutputFile,
        MultiBitrateFormat: MultiBitrateFormat,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        TransportStreamFormat: TransportStreamFormat,
        VideoOverlay: VideoOverlay,
        TransformOutput: TransformOutput,
        Transform: Transform,
        JobInput: JobInput,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobErrorDetail: JobErrorDetail,
        JobError: JobError,
        JobOutput: JobOutput,
        JobOutputAsset: JobOutputAsset,
        Job: Job,
        TrackPropertyCondition: TrackPropertyCondition,
        TrackSelection: TrackSelection,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        CencDrmConfiguration: CencDrmConfiguration,
        EnabledProtocols: EnabledProtocols,
        NoEncryption: NoEncryption,
        EnvelopeEncryption: EnvelopeEncryption,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        StreamingPolicy: StreamingPolicy,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        StreamingPath: StreamingPath,
        ListContentKeysResponse: ListContentKeysResponse,
        ListPathsResponse: ListPathsResponse,
        StreamingLocator: StreamingLocator,
        Hls: Hls,
        LiveOutput: LiveOutput,
        LiveEventEndpoint: LiveEventEndpoint,
        IPRange: IPRange,
        IPAccessControl: IPAccessControl,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        LiveEventInput: LiveEventInput,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventPreview: LiveEventPreview,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        LiveEventActionInput: LiveEventActionInput,
        LiveEvent: LiveEvent,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        AkamaiAccessControl: AkamaiAccessControl,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        StreamingEntityScaleUnit: StreamingEntityScaleUnit,
        StreamingEndpoint: StreamingEndpoint,
        AccountFilterCollection: AccountFilterCollection,
        OperationCollection: OperationCollection,
        MediaServiceCollection: MediaServiceCollection,
        SubscriptionMediaServiceCollection: SubscriptionMediaServiceCollection,
        AssetCollection: AssetCollection,
        AssetFilterCollection: AssetFilterCollection,
        ContentKeyPolicyCollection: ContentKeyPolicyCollection,
        TransformCollection: TransformCollection,
        JobCollection: JobCollection,
        StreamingPolicyCollection: StreamingPolicyCollection,
        StreamingLocatorCollection: StreamingLocatorCollection,
        LiveEventListResult: LiveEventListResult,
        LiveOutputListResult: LiveOutputListResult,
        StreamingEndpointListResult: StreamingEndpointListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AccountFilterCollection: AccountFilterCollection,
        AccountFilter: AccountFilter,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        ApiError: ApiError,
        ODataError: ODataError,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var assetName = {
        parameterPath: "assetName",
        mapper: {
            required: true,
            serializedName: "assetName",
            type: {
                name: "String"
            }
        }
    };
    var autoStart = {
        parameterPath: [
            "options",
            "autoStart"
        ],
        mapper: {
            serializedName: "autoStart",
            type: {
                name: "Boolean"
            }
        }
    };
    var contentKeyPolicyName = {
        parameterPath: "contentKeyPolicyName",
        mapper: {
            required: true,
            serializedName: "contentKeyPolicyName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filterName = {
        parameterPath: "filterName",
        mapper: {
            required: true,
            serializedName: "filterName",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var liveEventName = {
        parameterPath: "liveEventName",
        mapper: {
            required: true,
            serializedName: "liveEventName",
            constraints: {
                MaxLength: 32,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var liveOutputName = {
        parameterPath: "liveOutputName",
        mapper: {
            required: true,
            serializedName: "liveOutputName",
            constraints: {
                MaxLength: 256,
                MinLength: 1,
                Pattern: /^([a-zA-Z0-9])+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var streamingEndpointName = {
        parameterPath: "streamingEndpointName",
        mapper: {
            required: true,
            serializedName: "streamingEndpointName",
            constraints: {
                MaxLength: 24,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var streamingLocatorName = {
        parameterPath: "streamingLocatorName",
        mapper: {
            required: true,
            serializedName: "streamingLocatorName",
            type: {
                name: "String"
            }
        }
    };
    var streamingPolicyName = {
        parameterPath: "streamingPolicyName",
        mapper: {
            required: true,
            serializedName: "streamingPolicyName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var transformName = {
        parameterPath: "transformName",
        mapper: {
            required: true,
            serializedName: "transformName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AccountFilters. */
    var AccountFilters = /** @class */ (function () {
        /**
         * Create a AccountFilters.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function AccountFilters(client) {
            this.client = client;
        }
        AccountFilters.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec, callback);
        };
        AccountFilters.prototype.get = function (resourceGroupName$$1, accountName$$1, filterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                filterName: filterName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        AccountFilters.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, filterName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                filterName: filterName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        AccountFilters.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, filterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                filterName: filterName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        AccountFilters.prototype.update = function (resourceGroupName$$1, accountName$$1, filterName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                filterName: filterName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        AccountFilters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return AccountFilters;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountFilterCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountFilter
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AccountFilter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccountFilter
            },
            201: {
                bodyMapper: AccountFilter
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AccountFilter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccountFilter
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountFilterCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationCollection: OperationCollection,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        MetricProperties: MetricProperties,
        ServiceSpecification: ServiceSpecification,
        Metric: Metric,
        MetricDimension: MetricDimension,
        ApiError: ApiError,
        ODataError: ODataError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Media/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MediaServiceCollection: MediaServiceCollection,
        MediaService: MediaService,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        StorageAccount: StorageAccount,
        ApiError: ApiError,
        ODataError: ODataError,
        SyncStorageKeysInput: SyncStorageKeysInput,
        SubscriptionMediaServiceCollection: SubscriptionMediaServiceCollection,
        SubscriptionMediaService: SubscriptionMediaService,
        ProxyResource: ProxyResource,
        Asset: Asset,
        AssetFilter: AssetFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        AccountFilter: AccountFilter,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Mediaservices. */
    var Mediaservices = /** @class */ (function () {
        /**
         * Create a Mediaservices.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function Mediaservices(client) {
            this.client = client;
        }
        Mediaservices.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        Mediaservices.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Mediaservices.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Mediaservices.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Mediaservices.prototype.update = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Mediaservices.prototype.syncStorageKeys = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, syncStorageKeysOperationSpec, callback);
        };
        Mediaservices.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Mediaservices.prototype.getBySubscription = function (accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                options: options
            }, getBySubscriptionOperationSpec, callback);
        };
        Mediaservices.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        Mediaservices.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return Mediaservices;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MediaServiceCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MediaService
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, MediaService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MediaService
            },
            201: {
                bodyMapper: MediaService
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, MediaService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: MediaService
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var syncStorageKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/syncStorageKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncStorageKeysInput, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Media/mediaservices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionMediaServiceCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var getBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Media/mediaservices/{accountName}",
        urlParameters: [
            subscriptionId,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionMediaService
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MediaServiceCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionMediaServiceCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CheckNameAvailabilityInput: CheckNameAvailabilityInput,
        EntityNameAvailabilityCheckOutput: EntityNameAvailabilityCheckOutput,
        ApiError: ApiError,
        ODataError: ODataError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Locations. */
    var Locations = /** @class */ (function () {
        /**
         * Create a Locations.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function Locations(client) {
            this.client = client;
        }
        Locations.prototype.checkNameAvailability = function (locationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        return Locations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Media/locations/{locationName}/checkNameAvailability",
        urlParameters: [
            subscriptionId,
            locationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailabilityInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EntityNameAvailabilityCheckOutput
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AssetCollection: AssetCollection,
        Asset: Asset,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ApiError: ApiError,
        ODataError: ODataError,
        ListContainerSasInput: ListContainerSasInput,
        AssetContainerSas: AssetContainerSas,
        StorageEncryptedAssetDecryptionData: StorageEncryptedAssetDecryptionData,
        AssetFileEncryptionMetadata: AssetFileEncryptionMetadata,
        ListStreamingLocatorsResponse: ListStreamingLocatorsResponse,
        AssetStreamingLocator: AssetStreamingLocator,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Assets. */
    var Assets = /** @class */ (function () {
        /**
         * Create a Assets.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function Assets(client) {
            this.client = client;
        }
        Assets.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        Assets.prototype.get = function (resourceGroupName$$1, accountName$$1, assetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Assets.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, assetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Assets.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, assetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Assets.prototype.update = function (resourceGroupName$$1, accountName$$1, assetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Assets.prototype.listContainerSas = function (resourceGroupName$$1, accountName$$1, assetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                parameters: parameters,
                options: options
            }, listContainerSasOperationSpec, callback);
        };
        Assets.prototype.getEncryptionKey = function (resourceGroupName$$1, accountName$$1, assetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                options: options
            }, getEncryptionKeyOperationSpec, callback);
        };
        Assets.prototype.listStreamingLocators = function (resourceGroupName$$1, accountName$$1, assetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                options: options
            }, listStreamingLocatorsOperationSpec, callback);
        };
        Assets.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return Assets;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter,
            top,
            orderby
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssetCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Asset
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Asset, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Asset
            },
            201: {
                bodyMapper: Asset
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Asset, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Asset
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var listContainerSasOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/listContainerSas",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ListContainerSasInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AssetContainerSas
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var getEncryptionKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/getEncryptionKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageEncryptedAssetDecryptionData
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var listStreamingLocatorsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/listStreamingLocators",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListStreamingLocatorsResponse
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssetCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AssetFilterCollection: AssetFilterCollection,
        AssetFilter: AssetFilter,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        ApiError: ApiError,
        ODataError: ODataError,
        AccountFilter: AccountFilter,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AssetFilters. */
    var AssetFilters = /** @class */ (function () {
        /**
         * Create a AssetFilters.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function AssetFilters(client) {
            this.client = client;
        }
        AssetFilters.prototype.list = function (resourceGroupName$$1, accountName$$1, assetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        AssetFilters.prototype.get = function (resourceGroupName$$1, accountName$$1, assetName$$1, filterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                filterName: filterName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        AssetFilters.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, assetName$$1, filterName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                filterName: filterName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        AssetFilters.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, assetName$$1, filterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                filterName: filterName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        AssetFilters.prototype.update = function (resourceGroupName$$1, accountName$$1, assetName$$1, filterName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                assetName: assetName$$1,
                filterName: filterName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$3, callback);
        };
        AssetFilters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return AssetFilters;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssetFilterCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssetFilter
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AssetFilter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AssetFilter
            },
            201: {
                bodyMapper: AssetFilter
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            assetName,
            filterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AssetFilter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AssetFilter
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssetFilterCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ContentKeyPolicyCollection: ContentKeyPolicyCollection,
        ContentKeyPolicy: ContentKeyPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        ApiError: ApiError,
        ODataError: ODataError,
        ContentKeyPolicyProperties: ContentKeyPolicyProperties,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContentKeyPolicies. */
    var ContentKeyPolicies = /** @class */ (function () {
        /**
         * Create a ContentKeyPolicies.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function ContentKeyPolicies(client) {
            this.client = client;
        }
        ContentKeyPolicies.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        ContentKeyPolicies.prototype.get = function (resourceGroupName$$1, accountName$$1, contentKeyPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                contentKeyPolicyName: contentKeyPolicyName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        ContentKeyPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, contentKeyPolicyName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                contentKeyPolicyName: contentKeyPolicyName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        ContentKeyPolicies.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, contentKeyPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                contentKeyPolicyName: contentKeyPolicyName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        ContentKeyPolicies.prototype.update = function (resourceGroupName$$1, accountName$$1, contentKeyPolicyName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                contentKeyPolicyName: contentKeyPolicyName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$4, callback);
        };
        ContentKeyPolicies.prototype.getPolicyPropertiesWithSecrets = function (resourceGroupName$$1, accountName$$1, contentKeyPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                contentKeyPolicyName: contentKeyPolicyName$$1,
                options: options
            }, getPolicyPropertiesWithSecretsOperationSpec, callback);
        };
        ContentKeyPolicies.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return ContentKeyPolicies;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter,
            top,
            orderby
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContentKeyPolicyCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            contentKeyPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContentKeyPolicy
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            contentKeyPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ContentKeyPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContentKeyPolicy
            },
            201: {
                bodyMapper: ContentKeyPolicy
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            contentKeyPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            contentKeyPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ContentKeyPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContentKeyPolicy
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var getPolicyPropertiesWithSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}/getPolicyPropertiesWithSecrets",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            contentKeyPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContentKeyPolicyProperties
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContentKeyPolicyCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        TransformCollection: TransformCollection,
        Transform: Transform,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        TransformOutput: TransformOutput,
        Preset: Preset,
        ApiError: ApiError,
        ODataError: ODataError,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Transforms. */
    var Transforms = /** @class */ (function () {
        /**
         * Create a Transforms.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function Transforms(client) {
            this.client = client;
        }
        Transforms.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$6, callback);
        };
        Transforms.prototype.get = function (resourceGroupName$$1, accountName$$1, transformName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Transforms.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, transformName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        Transforms.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, transformName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        Transforms.prototype.update = function (resourceGroupName$$1, accountName$$1, transformName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$5, callback);
        };
        Transforms.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return Transforms;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter,
            top,
            skip
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TransformCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Transform
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Transform, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Transform
            },
            201: {
                bodyMapper: Transform
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Transform, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Transform
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TransformCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        JobCollection: JobCollection,
        Job: Job,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        ApiError: ApiError,
        ODataError: ODataError,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.list = function (resourceGroupName$$1, accountName$$1, transformName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                options: options
            }, listOperationSpec$7, callback);
        };
        Jobs.prototype.get = function (resourceGroupName$$1, accountName$$1, transformName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        Jobs.prototype.create = function (resourceGroupName$$1, accountName$$1, transformName$$1, jobName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                jobName: jobName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        Jobs.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, transformName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                jobName: jobName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        Jobs.prototype.update = function (resourceGroupName$$1, accountName$$1, transformName$$1, jobName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                jobName: jobName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$6, callback);
        };
        Jobs.prototype.cancelJob = function (resourceGroupName$$1, accountName$$1, transformName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                transformName: transformName$$1,
                jobName: jobName$$1,
                options: options
            }, cancelJobOperationSpec, callback);
        };
        Jobs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName
        ],
        queryParameters: [
            apiVersion,
            filter,
            top,
            skip
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Job, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Job, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };
    var cancelJobOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}/cancelJob",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            transformName,
            jobName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StreamingPolicyCollection: StreamingPolicyCollection,
        StreamingPolicy: StreamingPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        ApiError: ApiError,
        ODataError: ODataError,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StreamingPolicies. */
    var StreamingPolicies = /** @class */ (function () {
        /**
         * Create a StreamingPolicies.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function StreamingPolicies(client) {
            this.client = client;
        }
        StreamingPolicies.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        StreamingPolicies.prototype.get = function (resourceGroupName$$1, accountName$$1, streamingPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingPolicyName: streamingPolicyName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        StreamingPolicies.prototype.create = function (resourceGroupName$$1, accountName$$1, streamingPolicyName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingPolicyName: streamingPolicyName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$1, callback);
        };
        StreamingPolicies.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, streamingPolicyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingPolicyName: streamingPolicyName$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        StreamingPolicies.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        return StreamingPolicies;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter,
            top,
            orderby
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingPolicyCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingPolicy
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$9
    };
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StreamingPolicy, { required: true })
        },
        responses: {
            201: {
                bodyMapper: StreamingPolicy
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingPolicyCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StreamingLocatorCollection: StreamingLocatorCollection,
        StreamingLocator: StreamingLocator,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        ApiError: ApiError,
        ODataError: ODataError,
        ListContentKeysResponse: ListContentKeysResponse,
        ListPathsResponse: ListPathsResponse,
        StreamingPath: StreamingPath,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StreamingLocators. */
    var StreamingLocators = /** @class */ (function () {
        /**
         * Create a StreamingLocators.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function StreamingLocators(client) {
            this.client = client;
        }
        StreamingLocators.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$9, callback);
        };
        StreamingLocators.prototype.get = function (resourceGroupName$$1, accountName$$1, streamingLocatorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingLocatorName: streamingLocatorName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        StreamingLocators.prototype.create = function (resourceGroupName$$1, accountName$$1, streamingLocatorName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingLocatorName: streamingLocatorName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$2, callback);
        };
        StreamingLocators.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, streamingLocatorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingLocatorName: streamingLocatorName$$1,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        StreamingLocators.prototype.listContentKeys = function (resourceGroupName$$1, accountName$$1, streamingLocatorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingLocatorName: streamingLocatorName$$1,
                options: options
            }, listContentKeysOperationSpec, callback);
        };
        StreamingLocators.prototype.listPaths = function (resourceGroupName$$1, accountName$$1, streamingLocatorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingLocatorName: streamingLocatorName$$1,
                options: options
            }, listPathsOperationSpec, callback);
        };
        StreamingLocators.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        return StreamingLocators;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion,
            filter,
            top,
            orderby
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingLocatorCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingLocatorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingLocator
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingLocatorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StreamingLocator, { required: true })
        },
        responses: {
            201: {
                bodyMapper: StreamingLocator
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingLocatorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };
    var listContentKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listContentKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingLocatorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListContentKeysResponse
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };
    var listPathsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listPaths",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingLocatorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListPathsResponse
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingLocatorCollection
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LiveEventListResult: LiveEventListResult,
        LiveEvent: LiveEvent,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        ApiError: ApiError,
        ODataError: ODataError,
        LiveEventActionInput: LiveEventActionInput,
        ProxyResource: ProxyResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        AccountFilter: AccountFilter,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LiveEvents. */
    var LiveEvents = /** @class */ (function () {
        /**
         * Create a LiveEvents.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function LiveEvents(client) {
            this.client = client;
        }
        LiveEvents.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$a, callback);
        };
        LiveEvents.prototype.get = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        /**
         * Creates a Live Event.
         * @summary Create Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param parameters Live Event properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LiveEventsCreateResponse>
         */
        LiveEvents.prototype.create = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a existing Live Event.
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param parameters Live Event properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LiveEventsUpdateResponse>
         */
        LiveEvents.prototype.update = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a Live Event.
         * @summary Delete Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LiveEvents.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, liveEventName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts an existing Live Event.
         * @summary Start Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LiveEvents.prototype.start = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options) {
            return this.beginStart(resourceGroupName$$1, accountName$$1, liveEventName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops an existing Live Event.
         * @summary Stop Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param parameters LiveEvent stop parameters
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LiveEvents.prototype.stop = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options) {
            return this.beginStop(resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Resets an existing Live Event.
         * @summary Reset Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LiveEvents.prototype.reset = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options) {
            return this.beginReset(resourceGroupName$$1, accountName$$1, liveEventName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a Live Event.
         * @summary Create Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param parameters Live Event properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveEvents.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Updates a existing Live Event.
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param parameters Live Event properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveEvents.prototype.beginUpdate = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes a Live Event.
         * @summary Delete Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveEvents.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Starts an existing Live Event.
         * @summary Start Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveEvents.prototype.beginStart = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stops an existing Live Event.
         * @summary Stop Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param parameters LiveEvent stop parameters
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveEvents.prototype.beginStop = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                parameters: parameters,
                options: options
            }, beginStopOperationSpec, options);
        };
        /**
         * Resets an existing Live Event.
         * @summary Reset Live Event
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveEvents.prototype.beginReset = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                options: options
            }, beginResetOperationSpec, options);
        };
        LiveEvents.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return LiveEvents;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveEventListResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveEvent
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion,
            autoStart
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LiveEvent, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LiveEvent
            },
            202: {
                bodyMapper: LiveEvent
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LiveEvent, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LiveEvent
            },
            202: {
                bodyMapper: LiveEvent
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LiveEventActionInput, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var beginResetOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/reset",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveEventListResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LiveOutputListResult: LiveOutputListResult,
        LiveOutput: LiveOutput,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Hls: Hls,
        ApiError: ApiError,
        ODataError: ODataError,
        AccountFilter: AccountFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        TrackedResource: TrackedResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        StreamingEndpoint: StreamingEndpoint,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LiveOutputs. */
    var LiveOutputs = /** @class */ (function () {
        /**
         * Create a LiveOutputs.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function LiveOutputs(client) {
            this.client = client;
        }
        LiveOutputs.prototype.list = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                options: options
            }, listOperationSpec$b, callback);
        };
        LiveOutputs.prototype.get = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                liveOutputName: liveOutputName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * Creates a Live Output.
         * @summary Create Live Output
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param liveOutputName The name of the Live Output.
         * @param parameters Live Output properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LiveOutputsCreateResponse>
         */
        LiveOutputs.prototype.create = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a Live Output.
         * @summary Delete Live Output
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param liveOutputName The name of the Live Output.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LiveOutputs.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a Live Output.
         * @summary Create Live Output
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param liveOutputName The name of the Live Output.
         * @param parameters Live Output properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveOutputs.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                liveOutputName: liveOutputName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Deletes a Live Output.
         * @summary Delete Live Output
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param liveEventName The name of the Live Event.
         * @param liveOutputName The name of the Live Output.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LiveOutputs.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, liveEventName$$1, liveOutputName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                liveEventName: liveEventName$$1,
                liveOutputName: liveOutputName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        LiveOutputs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        return LiveOutputs;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveOutputListResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName,
            liveOutputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveOutput
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$c
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName,
            liveOutputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LiveOutput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LiveOutput
            },
            202: {
                bodyMapper: LiveOutput
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$c
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            liveEventName,
            liveOutputName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveOutputListResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        StreamingEndpointListResult: StreamingEndpointListResult,
        StreamingEndpoint: StreamingEndpoint,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        StreamingEndpointAccessControl: StreamingEndpointAccessControl,
        AkamaiAccessControl: AkamaiAccessControl,
        AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
        IPAccessControl: IPAccessControl,
        IPRange: IPRange,
        CrossSiteAccessPolicies: CrossSiteAccessPolicies,
        ApiError: ApiError,
        ODataError: ODataError,
        StreamingEntityScaleUnit: StreamingEntityScaleUnit,
        ProxyResource: ProxyResource,
        MediaService: MediaService,
        StorageAccount: StorageAccount,
        SubscriptionMediaService: SubscriptionMediaService,
        Asset: Asset,
        AssetFilter: AssetFilter,
        PresentationTimeRange: PresentationTimeRange,
        FirstQuality: FirstQuality,
        FilterTrackSelection: FilterTrackSelection,
        FilterTrackPropertyCondition: FilterTrackPropertyCondition,
        ContentKeyPolicy: ContentKeyPolicy,
        ContentKeyPolicyOption: ContentKeyPolicyOption,
        ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
        ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
        Transform: Transform,
        TransformOutput: TransformOutput,
        Preset: Preset,
        Job: Job,
        JobInput: JobInput,
        JobOutput: JobOutput,
        JobError: JobError,
        JobErrorDetail: JobErrorDetail,
        StreamingPolicy: StreamingPolicy,
        EnvelopeEncryption: EnvelopeEncryption,
        EnabledProtocols: EnabledProtocols,
        TrackSelection: TrackSelection,
        TrackPropertyCondition: TrackPropertyCondition,
        StreamingPolicyContentKeys: StreamingPolicyContentKeys,
        DefaultKey: DefaultKey,
        StreamingPolicyContentKey: StreamingPolicyContentKey,
        CommonEncryptionCenc: CommonEncryptionCenc,
        CencDrmConfiguration: CencDrmConfiguration,
        StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
        StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
        CommonEncryptionCbcs: CommonEncryptionCbcs,
        CbcsDrmConfiguration: CbcsDrmConfiguration,
        StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
        NoEncryption: NoEncryption,
        StreamingLocator: StreamingLocator,
        StreamingLocatorContentKey: StreamingLocatorContentKey,
        LiveOutput: LiveOutput,
        Hls: Hls,
        LiveEvent: LiveEvent,
        LiveEventInput: LiveEventInput,
        LiveEventInputAccessControl: LiveEventInputAccessControl,
        LiveEventEndpoint: LiveEventEndpoint,
        LiveEventPreview: LiveEventPreview,
        LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
        LiveEventEncoding: LiveEventEncoding,
        AccountFilter: AccountFilter,
        ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
        ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
        ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
        ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
        ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
        ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
        ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
        ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
        ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
        ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
        ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
        ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
        ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
        ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
        AudioAnalyzerPreset: AudioAnalyzerPreset,
        BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
        StandardEncoderPreset: StandardEncoderPreset,
        Filters: Filters,
        Deinterlace: Deinterlace,
        Rectangle: Rectangle,
        Overlay: Overlay,
        Codec: Codec,
        Format: Format,
        VideoAnalyzerPreset: VideoAnalyzerPreset,
        VideoOverlay: VideoOverlay,
        JobInputClip: JobInputClip,
        JobInputs: JobInputs,
        JobInputAsset: JobInputAsset,
        JobInputHttp: JobInputHttp,
        JobOutputAsset: JobOutputAsset,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
        ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
        ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
        ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
        ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
        Audio: Audio,
        AacAudio: AacAudio,
        AudioOverlay: AudioOverlay,
        CopyVideo: CopyVideo,
        Video: Video,
        Image: Image,
        ImageFormat: ImageFormat,
        JpgFormat: JpgFormat,
        PngFormat: PngFormat,
        CopyAudio: CopyAudio,
        H264Video: H264Video,
        H264Layer: H264Layer,
        VideoLayer: VideoLayer,
        Layer: Layer,
        JpgLayer: JpgLayer,
        JpgImage: JpgImage,
        MultiBitrateFormat: MultiBitrateFormat,
        OutputFile: OutputFile,
        Mp4Format: Mp4Format,
        PngLayer: PngLayer,
        PngImage: PngImage,
        TransportStreamFormat: TransportStreamFormat
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StreamingEndpoints. */
    var StreamingEndpoints = /** @class */ (function () {
        /**
         * Create a StreamingEndpoints.
         * @param {AzureMediaServicesContext} client Reference to the service client.
         */
        function StreamingEndpoints(client) {
            this.client = client;
        }
        StreamingEndpoints.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$c, callback);
        };
        StreamingEndpoints.prototype.get = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * Creates a StreamingEndpoint.
         * @summary Create StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param parameters StreamingEndpoint properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.StreamingEndpointsCreateResponse>
         */
        StreamingEndpoints.prototype.create = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a existing StreamingEndpoint.
         * @summary Update StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param parameters StreamingEndpoint properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.StreamingEndpointsUpdateResponse>
         */
        StreamingEndpoints.prototype.update = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a StreamingEndpoint.
         * @summary Delete StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingEndpoints.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts an existing StreamingEndpoint.
         * @summary Start StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingEndpoints.prototype.start = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options) {
            return this.beginStart(resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stops an existing StreamingEndpoint.
         * @summary Stop StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingEndpoints.prototype.stop = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options) {
            return this.beginStop(resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Scales an existing StreamingEndpoint.
         * @summary Scale StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param parameters StreamingEndpoint scale parameters
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StreamingEndpoints.prototype.scale = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options) {
            return this.beginScale(resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a StreamingEndpoint.
         * @summary Create StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param parameters StreamingEndpoint properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingEndpoints.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Updates a existing StreamingEndpoint.
         * @summary Update StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param parameters StreamingEndpoint properties needed for creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingEndpoints.prototype.beginUpdate = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * Deletes a StreamingEndpoint.
         * @summary Delete StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingEndpoints.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Starts an existing StreamingEndpoint.
         * @summary Start StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingEndpoints.prototype.beginStart = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                options: options
            }, beginStartOperationSpec$1, options);
        };
        /**
         * Stops an existing StreamingEndpoint.
         * @summary Stop StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingEndpoints.prototype.beginStop = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                options: options
            }, beginStopOperationSpec$1, options);
        };
        /**
         * Scales an existing StreamingEndpoint.
         * @summary Scale StreamingEndpoint
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * @param accountName The Media Services account name.
         * @param streamingEndpointName The name of the StreamingEndpoint.
         * @param parameters StreamingEndpoint scale parameters
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StreamingEndpoints.prototype.beginScale = function (resourceGroupName$$1, accountName$$1, streamingEndpointName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                streamingEndpointName: streamingEndpointName$$1,
                parameters: parameters,
                options: options
            }, beginScaleOperationSpec, options);
        };
        StreamingEndpoints.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$c, callback);
        };
        return StreamingEndpoints;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingEndpointListResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingEndpoint
            },
            404: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion,
            autoStart
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StreamingEndpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StreamingEndpoint
            },
            202: {
                bodyMapper: StreamingEndpoint
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StreamingEndpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StreamingEndpoint
            },
            202: {
                bodyMapper: StreamingEndpoint
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var beginStartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var beginStopOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var beginScaleOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/scale",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            streamingEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StreamingEntityScaleUnit, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StreamingEndpointListResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-mediaservices";
    var packageVersion = "1.0.0";
    var AzureMediaServicesContext = /** @class */ (function (_super) {
        __extends(AzureMediaServicesContext, _super);
        /**
         * Initializes a new instance of the AzureMediaServices class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The unique identifier for a Microsoft Azure subscription.
         * @param [options] The parameter options
         */
        function AzureMediaServicesContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-07-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureMediaServicesContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureMediaServices = /** @class */ (function (_super) {
        __extends(AzureMediaServices, _super);
        /**
         * Initializes a new instance of the AzureMediaServices class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The unique identifier for a Microsoft Azure subscription.
         * @param [options] The parameter options
         */
        function AzureMediaServices(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.accountFilters = new AccountFilters(_this);
            _this.operations = new Operations(_this);
            _this.mediaservices = new Mediaservices(_this);
            _this.locations = new Locations(_this);
            _this.assets = new Assets(_this);
            _this.assetFilters = new AssetFilters(_this);
            _this.contentKeyPolicies = new ContentKeyPolicies(_this);
            _this.transforms = new Transforms(_this);
            _this.jobs = new Jobs(_this);
            _this.streamingPolicies = new StreamingPolicies(_this);
            _this.streamingLocators = new StreamingLocators(_this);
            _this.liveEvents = new LiveEvents(_this);
            _this.liveOutputs = new LiveOutputs(_this);
            _this.streamingEndpoints = new StreamingEndpoints(_this);
            return _this;
        }
        return AzureMediaServices;
    }(AzureMediaServicesContext));

    exports.AzureMediaServices = AzureMediaServices;
    exports.AzureMediaServicesContext = AzureMediaServicesContext;
    exports.AzureMediaServicesModels = index;
    exports.AzureMediaServicesMappers = mappers;
    exports.AccountFilters = AccountFilters;
    exports.Operations = Operations;
    exports.Mediaservices = Mediaservices;
    exports.Locations = Locations;
    exports.Assets = Assets;
    exports.AssetFilters = AssetFilters;
    exports.ContentKeyPolicies = ContentKeyPolicies;
    exports.Transforms = Transforms;
    exports.Jobs = Jobs;
    exports.StreamingPolicies = StreamingPolicies;
    exports.StreamingLocators = StreamingLocators;
    exports.LiveEvents = LiveEvents;
    exports.LiveOutputs = LiveOutputs;
    exports.StreamingEndpoints = StreamingEndpoints;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-mediaservices.js.map
