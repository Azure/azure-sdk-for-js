/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/monitoringMappers";
import * as Parameters from "../models/parameters";
import { HanaManagementClientContext } from "../hanaManagementClientContext";

/** Class representing a Monitoring. */
export class Monitoring {
  private readonly client: HanaManagementClientContext;

  /**
   * Create a Monitoring.
   * @param {HanaManagementClientContext} client Reference to the service client.
   */
  constructor(client: HanaManagementClientContext) {
    this.client = client;
  }

  /**
   * The operation to monitor a SAP HANA instance.
   * @param resourceGroupName Name of the resource group.
   * @param hanaInstanceName Name of the SAP HANA on Azure instance.
   * @param monitoringParameter Request body that only contains monitoring attributes
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  hanaInstancesMethod(resourceGroupName: string, hanaInstanceName: string, monitoringParameter: Models.MonitoringDetails, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginHanaInstancesMethod(resourceGroupName,hanaInstanceName,monitoringParameter,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to monitor a SAP HANA instance.
   * @param resourceGroupName Name of the resource group.
   * @param hanaInstanceName Name of the SAP HANA on Azure instance.
   * @param monitoringParameter Request body that only contains monitoring attributes
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginHanaInstancesMethod(resourceGroupName: string, hanaInstanceName: string, monitoringParameter: Models.MonitoringDetails, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        hanaInstanceName,
        monitoringParameter,
        options
      },
      beginHanaInstancesMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginHanaInstancesMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/monitoring",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.hanaInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "monitoringParameter",
    mapper: {
      ...Mappers.MonitoringDetails,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
