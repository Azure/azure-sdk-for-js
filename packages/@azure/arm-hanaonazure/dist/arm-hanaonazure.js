/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmHanaonazure = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for HanaHardwareTypeNamesEnum.
     * Possible values include: 'Cisco_UCS', 'HPE'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HanaHardwareTypeNamesEnum =
     * <HanaHardwareTypeNamesEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HanaHardwareTypeNamesEnum;
    (function (HanaHardwareTypeNamesEnum) {
        HanaHardwareTypeNamesEnum["CiscoUCS"] = "Cisco_UCS";
        HanaHardwareTypeNamesEnum["HPE"] = "HPE";
    })(HanaHardwareTypeNamesEnum || (HanaHardwareTypeNamesEnum = {}));
    /**
     * Defines values for HanaInstanceSizeNamesEnum.
     * Possible values include: 'S72m', 'S144m', 'S72', 'S144', 'S192', 'S192m',
     * 'S192xm', 'S384', 'S384m', 'S384xm', 'S384xxm', 'S576m', 'S576xm', 'S768',
     * 'S768m', 'S768xm', 'S960m'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HanaInstanceSizeNamesEnum =
     * <HanaInstanceSizeNamesEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HanaInstanceSizeNamesEnum;
    (function (HanaInstanceSizeNamesEnum) {
        HanaInstanceSizeNamesEnum["S72m"] = "S72m";
        HanaInstanceSizeNamesEnum["S144m"] = "S144m";
        HanaInstanceSizeNamesEnum["S72"] = "S72";
        HanaInstanceSizeNamesEnum["S144"] = "S144";
        HanaInstanceSizeNamesEnum["S192"] = "S192";
        HanaInstanceSizeNamesEnum["S192m"] = "S192m";
        HanaInstanceSizeNamesEnum["S192xm"] = "S192xm";
        HanaInstanceSizeNamesEnum["S384"] = "S384";
        HanaInstanceSizeNamesEnum["S384m"] = "S384m";
        HanaInstanceSizeNamesEnum["S384xm"] = "S384xm";
        HanaInstanceSizeNamesEnum["S384xxm"] = "S384xxm";
        HanaInstanceSizeNamesEnum["S576m"] = "S576m";
        HanaInstanceSizeNamesEnum["S576xm"] = "S576xm";
        HanaInstanceSizeNamesEnum["S768"] = "S768";
        HanaInstanceSizeNamesEnum["S768m"] = "S768m";
        HanaInstanceSizeNamesEnum["S768xm"] = "S768xm";
        HanaInstanceSizeNamesEnum["S960m"] = "S960m";
    })(HanaInstanceSizeNamesEnum || (HanaInstanceSizeNamesEnum = {}));
    /**
     * Defines values for HanaInstancePowerStateEnum.
     * Possible values include: 'starting', 'started', 'stopping', 'stopped',
     * 'restarting', 'unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HanaInstancePowerStateEnum =
     * <HanaInstancePowerStateEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HanaInstancePowerStateEnum;
    (function (HanaInstancePowerStateEnum) {
        HanaInstancePowerStateEnum["Starting"] = "starting";
        HanaInstancePowerStateEnum["Started"] = "started";
        HanaInstancePowerStateEnum["Stopping"] = "stopping";
        HanaInstancePowerStateEnum["Stopped"] = "stopped";
        HanaInstancePowerStateEnum["Restarting"] = "restarting";
        HanaInstancePowerStateEnum["Unknown"] = "unknown";
    })(HanaInstancePowerStateEnum || (HanaInstancePowerStateEnum = {}));

    var index = /*#__PURE__*/Object.freeze({
        get HanaHardwareTypeNamesEnum () { return HanaHardwareTypeNamesEnum; },
        get HanaInstanceSizeNamesEnum () { return HanaInstanceSizeNamesEnum; },
        get HanaInstancePowerStateEnum () { return HanaInstancePowerStateEnum; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var HardwareProfile = {
        serializedName: "HardwareProfile",
        type: {
            name: "Composite",
            className: "HardwareProfile",
            modelProperties: {
                hardwareType: {
                    readOnly: true,
                    serializedName: "hardwareType",
                    type: {
                        name: "String"
                    }
                },
                hanaInstanceSize: {
                    readOnly: true,
                    serializedName: "hanaInstanceSize",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Disk = {
        serializedName: "Disk",
        type: {
            name: "Composite",
            className: "Disk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                lun: {
                    readOnly: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var StorageProfile = {
        serializedName: "StorageProfile",
        type: {
            name: "Composite",
            className: "StorageProfile",
            modelProperties: {
                nfsIpAddress: {
                    readOnly: true,
                    serializedName: "nfsIpAddress",
                    type: {
                        name: "String"
                    }
                },
                osDisks: {
                    serializedName: "osDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Disk"
                            }
                        }
                    }
                }
            }
        }
    };
    var OSProfile = {
        serializedName: "OSProfile",
        type: {
            name: "Composite",
            className: "OSProfile",
            modelProperties: {
                computerName: {
                    readOnly: true,
                    serializedName: "computerName",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    readOnly: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IpAddress = {
        serializedName: "IpAddress",
        type: {
            name: "Composite",
            className: "IpAddress",
            modelProperties: {
                ipAddress: {
                    readOnly: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                networkInterfaces: {
                    serializedName: "networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpAddress"
                            }
                        }
                    }
                },
                circuitId: {
                    readOnly: true,
                    serializedName: "circuitId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HanaInstanceProperties = {
        serializedName: "HanaInstanceProperties",
        type: {
            name: "Composite",
            className: "HanaInstanceProperties",
            modelProperties: {
                hardwareProfile: {
                    serializedName: "hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                },
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                },
                hanaInstanceId: {
                    readOnly: true,
                    serializedName: "hanaInstanceId",
                    type: {
                        name: "String"
                    }
                },
                powerState: {
                    readOnly: true,
                    serializedName: "powerState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HanaInstance = {
        serializedName: "HanaInstance",
        type: {
            name: "Composite",
            className: "HanaInstance",
            modelProperties: __assign({}, Resource.type.modelProperties, { hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, hanaInstanceId: {
                    readOnly: true,
                    serializedName: "properties.hanaInstanceId",
                    type: {
                        name: "String"
                    }
                }, powerState: {
                    readOnly: true,
                    serializedName: "properties.powerState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Display = {
        serializedName: "Display",
        type: {
            name: "Composite",
            className: "Display",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "Display"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationList = {
        serializedName: "OperationList",
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var HanaInstancesListResult = {
        serializedName: "HanaInstancesListResult",
        type: {
            name: "Composite",
            className: "HanaInstancesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HanaInstance"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        HardwareProfile: HardwareProfile,
        Disk: Disk,
        StorageProfile: StorageProfile,
        OSProfile: OSProfile,
        IpAddress: IpAddress,
        NetworkProfile: NetworkProfile,
        HanaInstanceProperties: HanaInstanceProperties,
        HanaInstance: HanaInstance,
        Display: Display,
        Operation: Operation,
        ErrorResponse: ErrorResponse,
        OperationList: OperationList,
        HanaInstancesListResult: HanaInstancesListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationList: OperationList,
        Operation: Operation,
        Display: Display,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var hanaInstanceName = {
        parameterPath: "hanaInstanceName",
        mapper: {
            required: true,
            serializedName: "hanaInstanceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {HanaManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.HanaOnAzure/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        HanaInstancesListResult: HanaInstancesListResult,
        HanaInstance: HanaInstance,
        Resource: Resource,
        BaseResource: BaseResource,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        Disk: Disk,
        OSProfile: OSProfile,
        NetworkProfile: NetworkProfile,
        IpAddress: IpAddress,
        ErrorResponse: ErrorResponse,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HanaInstances. */
    var HanaInstances = /** @class */ (function () {
        /**
         * Create a HanaInstances.
         * @param {HanaManagementClientContext} client Reference to the service client.
         */
        function HanaInstances(client) {
            this.client = client;
        }
        HanaInstances.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        HanaInstances.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        HanaInstances.prototype.get = function (resourceGroupName$$1, hanaInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hanaInstanceName: hanaInstanceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        HanaInstances.prototype.restart = function (resourceGroupName$$1, hanaInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                hanaInstanceName: hanaInstanceName$$1,
                options: options
            }, restartOperationSpec, callback);
        };
        HanaInstances.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        HanaInstances.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return HanaInstances;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/hanaInstances",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstance
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var restartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            hanaInstanceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HanaInstancesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-hanaonazure";
    var packageVersion = "1.0.0-preview";
    var HanaManagementClientContext = /** @class */ (function (_super) {
        __extends(HanaManagementClientContext, _super);
        /**
         * Initializes a new instance of the HanaManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The
         * subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function HanaManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-11-03-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return HanaManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var HanaManagementClient = /** @class */ (function (_super) {
        __extends(HanaManagementClient, _super);
        /**
         * Initializes a new instance of the HanaManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The
         * subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function HanaManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.hanaInstances = new HanaInstances(_this);
            return _this;
        }
        return HanaManagementClient;
    }(HanaManagementClientContext));

    exports.HanaManagementClient = HanaManagementClient;
    exports.HanaManagementClientContext = HanaManagementClientContext;
    exports.HanaManagementModels = index;
    exports.HanaManagementMappers = mappers;
    exports.Operations = Operations;
    exports.HanaInstances = HanaInstances;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-hanaonazure.js.map
