/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.Graph = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for UserType.
     * Possible values include: 'Member', 'Guest'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UserType = <UserType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UserType;
    (function (UserType) {
        UserType["Member"] = "Member";
        UserType["Guest"] = "Guest";
    })(UserType || (UserType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get UserType () { return UserType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorMessage = {
        serializedName: "ErrorMessage",
        type: {
            name: "Composite",
            className: "ErrorMessage",
            modelProperties: {
                message: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OdataError = {
        serializedName: "OdataError",
        type: {
            name: "Composite",
            className: "OdataError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message.value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GraphError = {
        serializedName: "GraphError",
        type: {
            name: "Composite",
            className: "GraphError",
            modelProperties: {
                code: {
                    serializedName: "odata\\.error.code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "odata\\.error.message.value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DirectoryObject = {
        serializedName: "DirectoryObject",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "objectType",
                clientName: "objectType"
            },
            uberParent: "DirectoryObject",
            className: "DirectoryObject",
            modelProperties: {
                objectId: {
                    readOnly: true,
                    serializedName: "objectId",
                    type: {
                        name: "String"
                    }
                },
                deletionTimestamp: {
                    readOnly: true,
                    serializedName: "deletionTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                objectType: {
                    required: true,
                    serializedName: "objectType",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var KeyCredential = {
        serializedName: "KeyCredential",
        type: {
            name: "Composite",
            className: "KeyCredential",
            modelProperties: {
                startDate: {
                    serializedName: "startDate",
                    type: {
                        name: "DateTime"
                    }
                },
                endDate: {
                    serializedName: "endDate",
                    type: {
                        name: "DateTime"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                keyId: {
                    serializedName: "keyId",
                    type: {
                        name: "String"
                    }
                },
                usage: {
                    serializedName: "usage",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                customKeyIdentifier: {
                    serializedName: "customKeyIdentifier",
                    type: {
                        name: "ByteArray"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var PasswordCredential = {
        serializedName: "PasswordCredential",
        type: {
            name: "Composite",
            className: "PasswordCredential",
            modelProperties: {
                startDate: {
                    serializedName: "startDate",
                    type: {
                        name: "DateTime"
                    }
                },
                endDate: {
                    serializedName: "endDate",
                    type: {
                        name: "DateTime"
                    }
                },
                keyId: {
                    serializedName: "keyId",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ResourceAccess = {
        serializedName: "ResourceAccess",
        type: {
            name: "Composite",
            className: "ResourceAccess",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var RequiredResourceAccess = {
        serializedName: "RequiredResourceAccess",
        type: {
            name: "Composite",
            className: "RequiredResourceAccess",
            modelProperties: {
                resourceAccess: {
                    required: true,
                    serializedName: "resourceAccess",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceAccess",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                resourceAppId: {
                    serializedName: "resourceAppId",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var AppRole = {
        serializedName: "AppRole",
        type: {
            name: "Composite",
            className: "AppRole",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                allowedMemberTypes: {
                    serializedName: "allowedMemberTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationCreateParameters = {
        serializedName: "ApplicationCreateParameters",
        type: {
            name: "Composite",
            className: "ApplicationCreateParameters",
            modelProperties: {
                appRoles: {
                    serializedName: "appRoles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppRole"
                            }
                        }
                    }
                },
                availableToOtherTenants: {
                    required: true,
                    serializedName: "availableToOtherTenants",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    required: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                homepage: {
                    serializedName: "homepage",
                    type: {
                        name: "String"
                    }
                },
                identifierUris: {
                    required: true,
                    serializedName: "identifierUris",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                replyUrls: {
                    serializedName: "replyUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                keyCredentials: {
                    serializedName: "keyCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                passwordCredentials: {
                    serializedName: "passwordCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PasswordCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                oauth2AllowImplicitFlow: {
                    serializedName: "oauth2AllowImplicitFlow",
                    type: {
                        name: "Boolean"
                    }
                },
                requiredResourceAccess: {
                    serializedName: "requiredResourceAccess",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RequiredResourceAccess",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ApplicationUpdateParameters = {
        serializedName: "ApplicationUpdateParameters",
        type: {
            name: "Composite",
            className: "ApplicationUpdateParameters",
            modelProperties: {
                appRoles: {
                    serializedName: "appRoles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppRole"
                            }
                        }
                    }
                },
                availableToOtherTenants: {
                    serializedName: "availableToOtherTenants",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                homepage: {
                    serializedName: "homepage",
                    type: {
                        name: "String"
                    }
                },
                identifierUris: {
                    serializedName: "identifierUris",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                replyUrls: {
                    serializedName: "replyUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                keyCredentials: {
                    serializedName: "keyCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                passwordCredentials: {
                    serializedName: "passwordCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PasswordCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                oauth2AllowImplicitFlow: {
                    serializedName: "oauth2AllowImplicitFlow",
                    type: {
                        name: "Boolean"
                    }
                },
                requiredResourceAccess: {
                    serializedName: "requiredResourceAccess",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RequiredResourceAccess",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var Application = {
        serializedName: "Application",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
            uberParent: "DirectoryObject",
            className: "Application",
            modelProperties: __assign({}, DirectoryObject.type.modelProperties, { appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                }, appRoles: {
                    serializedName: "appRoles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppRole"
                            }
                        }
                    }
                }, appPermissions: {
                    serializedName: "appPermissions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, availableToOtherTenants: {
                    serializedName: "availableToOtherTenants",
                    type: {
                        name: "Boolean"
                    }
                }, displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, identifierUris: {
                    serializedName: "identifierUris",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, replyUrls: {
                    serializedName: "replyUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, homepage: {
                    serializedName: "homepage",
                    type: {
                        name: "String"
                    }
                }, oauth2AllowImplicitFlow: {
                    serializedName: "oauth2AllowImplicitFlow",
                    type: {
                        name: "Boolean"
                    }
                } }),
            additionalProperties: DirectoryObject.type.additionalProperties
        }
    };
    var AddOwnerParameters = {
        serializedName: "AddOwnerParameters",
        type: {
            name: "Composite",
            className: "AddOwnerParameters",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var KeyCredentialsUpdateParameters = {
        serializedName: "KeyCredentialsUpdateParameters",
        type: {
            name: "Composite",
            className: "KeyCredentialsUpdateParameters",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var PasswordCredentialsUpdateParameters = {
        serializedName: "PasswordCredentialsUpdateParameters",
        type: {
            name: "Composite",
            className: "PasswordCredentialsUpdateParameters",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PasswordCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var GroupAddMemberParameters = {
        serializedName: "GroupAddMemberParameters",
        type: {
            name: "Composite",
            className: "GroupAddMemberParameters",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var GroupCreateParameters = {
        serializedName: "GroupCreateParameters",
        type: {
            name: "Composite",
            className: "GroupCreateParameters",
            modelProperties: {
                displayName: {
                    required: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                mailEnabled: {
                    required: true,
                    isConstant: true,
                    serializedName: "mailEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                mailNickname: {
                    required: true,
                    serializedName: "mailNickname",
                    type: {
                        name: "String"
                    }
                },
                securityEnabled: {
                    required: true,
                    isConstant: true,
                    serializedName: "securityEnabled",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ADGroup = {
        serializedName: "Group",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
            uberParent: "DirectoryObject",
            className: "ADGroup",
            modelProperties: __assign({}, DirectoryObject.type.modelProperties, { displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, mailEnabled: {
                    serializedName: "mailEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, mailNickname: {
                    serializedName: "mailNickname",
                    type: {
                        name: "String"
                    }
                }, securityEnabled: {
                    serializedName: "securityEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, mail: {
                    serializedName: "mail",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: DirectoryObject.type.additionalProperties
        }
    };
    var GroupGetMemberGroupsParameters = {
        serializedName: "GroupGetMemberGroupsParameters",
        type: {
            name: "Composite",
            className: "GroupGetMemberGroupsParameters",
            modelProperties: {
                securityEnabledOnly: {
                    required: true,
                    serializedName: "securityEnabledOnly",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var CheckGroupMembershipParameters = {
        serializedName: "CheckGroupMembershipParameters",
        type: {
            name: "Composite",
            className: "CheckGroupMembershipParameters",
            modelProperties: {
                groupId: {
                    required: true,
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                },
                memberId: {
                    required: true,
                    serializedName: "memberId",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var CheckGroupMembershipResult = {
        serializedName: "CheckGroupMembershipResult",
        type: {
            name: "Composite",
            className: "CheckGroupMembershipResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ServicePrincipalCreateParameters = {
        serializedName: "ServicePrincipalCreateParameters",
        type: {
            name: "Composite",
            className: "ServicePrincipalCreateParameters",
            modelProperties: {
                accountEnabled: {
                    serializedName: "accountEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                appId: {
                    required: true,
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                appRoleAssignmentRequired: {
                    serializedName: "appRoleAssignmentRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                errorUrl: {
                    serializedName: "errorUrl",
                    type: {
                        name: "String"
                    }
                },
                homepage: {
                    serializedName: "homepage",
                    type: {
                        name: "String"
                    }
                },
                keyCredentials: {
                    serializedName: "keyCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                passwordCredentials: {
                    serializedName: "passwordCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PasswordCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                publisherName: {
                    serializedName: "publisherName",
                    type: {
                        name: "String"
                    }
                },
                replyUrls: {
                    serializedName: "replyUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                samlMetadataUrl: {
                    serializedName: "samlMetadataUrl",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalNames: {
                    serializedName: "servicePrincipalNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ServicePrincipalUpdateParameters = {
        serializedName: "ServicePrincipalUpdateParameters",
        type: {
            name: "Composite",
            className: "ServicePrincipalUpdateParameters",
            modelProperties: {
                accountEnabled: {
                    serializedName: "accountEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                appRoleAssignmentRequired: {
                    serializedName: "appRoleAssignmentRequired",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                errorUrl: {
                    serializedName: "errorUrl",
                    type: {
                        name: "String"
                    }
                },
                homepage: {
                    serializedName: "homepage",
                    type: {
                        name: "String"
                    }
                },
                keyCredentials: {
                    serializedName: "keyCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                passwordCredentials: {
                    serializedName: "passwordCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PasswordCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                publisherName: {
                    serializedName: "publisherName",
                    type: {
                        name: "String"
                    }
                },
                replyUrls: {
                    serializedName: "replyUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                samlMetadataUrl: {
                    serializedName: "samlMetadataUrl",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalNames: {
                    serializedName: "servicePrincipalNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var ServicePrincipal = {
        serializedName: "ServicePrincipal",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
            uberParent: "DirectoryObject",
            className: "ServicePrincipal",
            modelProperties: __assign({}, DirectoryObject.type.modelProperties, { displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                }, appRoles: {
                    serializedName: "appRoles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppRole"
                            }
                        }
                    }
                }, servicePrincipalNames: {
                    serializedName: "servicePrincipalNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } }),
            additionalProperties: DirectoryObject.type.additionalProperties
        }
    };
    var PasswordProfile = {
        serializedName: "PasswordProfile",
        type: {
            name: "Composite",
            className: "PasswordProfile",
            modelProperties: {
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                forceChangePasswordNextLogin: {
                    serializedName: "forceChangePasswordNextLogin",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var UserBase = {
        serializedName: "UserBase",
        type: {
            name: "Composite",
            className: "UserBase",
            modelProperties: {
                immutableId: {
                    serializedName: "immutableId",
                    type: {
                        name: "String"
                    }
                },
                usageLocation: {
                    serializedName: "usageLocation",
                    type: {
                        name: "String"
                    }
                },
                givenName: {
                    serializedName: "givenName",
                    type: {
                        name: "String"
                    }
                },
                surname: {
                    serializedName: "surname",
                    type: {
                        name: "String"
                    }
                },
                userType: {
                    serializedName: "userType",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var UserCreateParameters = {
        serializedName: "UserCreateParameters",
        type: {
            name: "Composite",
            className: "UserCreateParameters",
            modelProperties: __assign({}, UserBase.type.modelProperties, { accountEnabled: {
                    required: true,
                    serializedName: "accountEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, passwordProfile: {
                    required: true,
                    serializedName: "passwordProfile",
                    type: {
                        name: "Composite",
                        className: "PasswordProfile",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, userPrincipalName: {
                    required: true,
                    serializedName: "userPrincipalName",
                    type: {
                        name: "String"
                    }
                }, mailNickname: {
                    required: true,
                    serializedName: "mailNickname",
                    type: {
                        name: "String"
                    }
                }, mail: {
                    serializedName: "mail",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: UserBase.type.additionalProperties
        }
    };
    var UserUpdateParameters = {
        serializedName: "UserUpdateParameters",
        type: {
            name: "Composite",
            className: "UserUpdateParameters",
            modelProperties: __assign({}, UserBase.type.modelProperties, { accountEnabled: {
                    serializedName: "accountEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, passwordProfile: {
                    serializedName: "passwordProfile",
                    type: {
                        name: "Composite",
                        className: "PasswordProfile",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }, userPrincipalName: {
                    serializedName: "userPrincipalName",
                    type: {
                        name: "String"
                    }
                }, mailNickname: {
                    serializedName: "mailNickname",
                    type: {
                        name: "String"
                    }
                } }),
            additionalProperties: UserBase.type.additionalProperties
        }
    };
    var SignInName = {
        serializedName: "SignInName",
        type: {
            name: "Composite",
            className: "SignInName",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var User = {
        serializedName: "User",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
            uberParent: "DirectoryObject",
            className: "User",
            modelProperties: __assign({}, DirectoryObject.type.modelProperties, { immutableId: {
                    serializedName: "immutableId",
                    type: {
                        name: "String"
                    }
                }, usageLocation: {
                    serializedName: "usageLocation",
                    type: {
                        name: "String"
                    }
                }, givenName: {
                    serializedName: "givenName",
                    type: {
                        name: "String"
                    }
                }, surname: {
                    serializedName: "surname",
                    type: {
                        name: "String"
                    }
                }, userType: {
                    serializedName: "userType",
                    type: {
                        name: "String"
                    }
                }, accountEnabled: {
                    serializedName: "accountEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }, userPrincipalName: {
                    serializedName: "userPrincipalName",
                    type: {
                        name: "String"
                    }
                }, mailNickname: {
                    serializedName: "mailNickname",
                    type: {
                        name: "String"
                    }
                }, mail: {
                    serializedName: "mail",
                    type: {
                        name: "String"
                    }
                }, signInNames: {
                    serializedName: "signInNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SignInName",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } }),
            additionalProperties: DirectoryObject.type.additionalProperties
        }
    };
    var UserGetMemberGroupsParameters = {
        serializedName: "UserGetMemberGroupsParameters",
        type: {
            name: "Composite",
            className: "UserGetMemberGroupsParameters",
            modelProperties: {
                securityEnabledOnly: {
                    required: true,
                    serializedName: "securityEnabledOnly",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var GetObjectsParameters = {
        serializedName: "GetObjectsParameters",
        type: {
            name: "Composite",
            className: "GetObjectsParameters",
            modelProperties: {
                objectIds: {
                    serializedName: "objectIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                types: {
                    serializedName: "types",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                includeDirectoryObjectReferences: {
                    serializedName: "includeDirectoryObjectReferences",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var Domain = {
        serializedName: "Domain",
        type: {
            name: "Composite",
            className: "Domain",
            modelProperties: {
                authenticationType: {
                    readOnly: true,
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    readOnly: true,
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                isVerified: {
                    readOnly: true,
                    serializedName: "isVerified",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var Permissions = {
        serializedName: "Permissions",
        type: {
            name: "Composite",
            className: "Permissions",
            modelProperties: {
                odatatype: {
                    serializedName: "odata\\.type",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                consentType: {
                    serializedName: "consentType",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "Object"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "String"
                    }
                },
                expiryTime: {
                    serializedName: "expiryTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DirectoryObjectListResult = {
        serializedName: "DirectoryObjectListResult",
        type: {
            name: "Composite",
            className: "DirectoryObjectListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "objectType",
                                    clientName: "objectType"
                                },
                                uberParent: "DirectoryObject",
                                className: "DirectoryObject",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationListResult = {
        serializedName: "ApplicationListResult",
        type: {
            name: "Composite",
            className: "ApplicationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
                                uberParent: "DirectoryObject",
                                className: "Application",
                                additionalProperties: DirectoryObject.type.additionalProperties
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyCredentialListResult = {
        serializedName: "KeyCredentialListResult",
        type: {
            name: "Composite",
            className: "KeyCredentialListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var PasswordCredentialListResult = {
        serializedName: "PasswordCredentialListResult",
        type: {
            name: "Composite",
            className: "PasswordCredentialListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PasswordCredential",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var GroupListResult = {
        serializedName: "GroupListResult",
        type: {
            name: "Composite",
            className: "GroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
                                uberParent: "DirectoryObject",
                                className: "ADGroup",
                                additionalProperties: DirectoryObject.type.additionalProperties
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GroupGetMemberGroupsResult = {
        serializedName: "GroupGetMemberGroupsResult",
        type: {
            name: "Composite",
            className: "GroupGetMemberGroupsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServicePrincipalListResult = {
        serializedName: "ServicePrincipalListResult",
        type: {
            name: "Composite",
            className: "ServicePrincipalListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
                                uberParent: "DirectoryObject",
                                className: "ServicePrincipal",
                                additionalProperties: DirectoryObject.type.additionalProperties
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserListResult = {
        serializedName: "UserListResult",
        type: {
            name: "Composite",
            className: "UserListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: DirectoryObject.type.polymorphicDiscriminator,
                                uberParent: "DirectoryObject",
                                className: "User",
                                additionalProperties: DirectoryObject.type.additionalProperties
                            }
                        }
                    }
                },
                odatanextLink: {
                    serializedName: "odata\\.nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserGetMemberGroupsResult = {
        serializedName: "UserGetMemberGroupsResult",
        type: {
            name: "Composite",
            className: "UserGetMemberGroupsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DomainListResult = {
        serializedName: "DomainListResult",
        type: {
            name: "Composite",
            className: "DomainListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Domain",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'DirectoryObject': DirectoryObject,
        'DirectoryObject.Application': Application,
        'DirectoryObject.Group': ADGroup,
        'DirectoryObject.ServicePrincipal': ServicePrincipal,
        'DirectoryObject.User': User
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorMessage: ErrorMessage,
        OdataError: OdataError,
        GraphError: GraphError,
        DirectoryObject: DirectoryObject,
        KeyCredential: KeyCredential,
        PasswordCredential: PasswordCredential,
        ResourceAccess: ResourceAccess,
        RequiredResourceAccess: RequiredResourceAccess,
        AppRole: AppRole,
        ApplicationCreateParameters: ApplicationCreateParameters,
        ApplicationUpdateParameters: ApplicationUpdateParameters,
        Application: Application,
        AddOwnerParameters: AddOwnerParameters,
        KeyCredentialsUpdateParameters: KeyCredentialsUpdateParameters,
        PasswordCredentialsUpdateParameters: PasswordCredentialsUpdateParameters,
        GroupAddMemberParameters: GroupAddMemberParameters,
        GroupCreateParameters: GroupCreateParameters,
        ADGroup: ADGroup,
        GroupGetMemberGroupsParameters: GroupGetMemberGroupsParameters,
        CheckGroupMembershipParameters: CheckGroupMembershipParameters,
        CheckGroupMembershipResult: CheckGroupMembershipResult,
        ServicePrincipalCreateParameters: ServicePrincipalCreateParameters,
        ServicePrincipalUpdateParameters: ServicePrincipalUpdateParameters,
        ServicePrincipal: ServicePrincipal,
        PasswordProfile: PasswordProfile,
        UserBase: UserBase,
        UserCreateParameters: UserCreateParameters,
        UserUpdateParameters: UserUpdateParameters,
        SignInName: SignInName,
        User: User,
        UserGetMemberGroupsParameters: UserGetMemberGroupsParameters,
        GetObjectsParameters: GetObjectsParameters,
        Domain: Domain,
        Permissions: Permissions,
        DirectoryObjectListResult: DirectoryObjectListResult,
        ApplicationListResult: ApplicationListResult,
        KeyCredentialListResult: KeyCredentialListResult,
        PasswordCredentialListResult: PasswordCredentialListResult,
        GroupListResult: GroupListResult,
        GroupGetMemberGroupsResult: GroupGetMemberGroupsResult,
        ServicePrincipalListResult: ServicePrincipalListResult,
        UserListResult: UserListResult,
        UserGetMemberGroupsResult: UserGetMemberGroupsResult,
        DomainListResult: DomainListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        User: User,
        DirectoryObject: DirectoryObject,
        SignInName: SignInName,
        GraphError: GraphError,
        DirectoryObjectListResult: DirectoryObjectListResult,
        Application: Application,
        AppRole: AppRole,
        ADGroup: ADGroup,
        ServicePrincipal: ServicePrincipal
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var applicationObjectId = {
        parameterPath: "applicationObjectId",
        mapper: {
            required: true,
            serializedName: "applicationObjectId",
            type: {
                name: "String"
            }
        }
    };
    var domainName = {
        parameterPath: "domainName",
        mapper: {
            required: true,
            serializedName: "domainName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var groupObjectId = {
        parameterPath: "groupObjectId",
        mapper: {
            required: true,
            serializedName: "groupObjectId",
            type: {
                name: "String"
            }
        }
    };
    var memberObjectId = {
        parameterPath: "memberObjectId",
        mapper: {
            required: true,
            serializedName: "memberObjectId",
            type: {
                name: "String"
            }
        }
    };
    var nextLink = {
        parameterPath: "nextLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var objectId = {
        parameterPath: "objectId",
        mapper: {
            required: true,
            serializedName: "objectId",
            type: {
                name: "String"
            }
        }
    };
    var ownerObjectId = {
        parameterPath: "ownerObjectId",
        mapper: {
            required: true,
            serializedName: "ownerObjectId",
            type: {
                name: "String"
            }
        }
    };
    var tenantID = {
        parameterPath: "tenantID",
        mapper: {
            required: true,
            serializedName: "tenantID",
            type: {
                name: "String"
            }
        }
    };
    var upnOrObjectId = {
        parameterPath: "upnOrObjectId",
        mapper: {
            required: true,
            serializedName: "upnOrObjectId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SignedInUser. */
    var SignedInUser = /** @class */ (function () {
        /**
         * Create a SignedInUser.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function SignedInUser(client) {
            this.client = client;
        }
        SignedInUser.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec, callback);
        };
        SignedInUser.prototype.listOwnedObjects = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOwnedObjectsOperationSpec, callback);
        };
        SignedInUser.prototype.listOwnedObjectsNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, listOwnedObjectsNextOperationSpec, callback);
        };
        return SignedInUser;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/me",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer
    };
    var listOwnedObjectsOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/me/ownedObjects",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer
    };
    var listOwnedObjectsNextOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ApplicationCreateParameters: ApplicationCreateParameters,
        AppRole: AppRole,
        KeyCredential: KeyCredential,
        PasswordCredential: PasswordCredential,
        RequiredResourceAccess: RequiredResourceAccess,
        ResourceAccess: ResourceAccess,
        Application: Application,
        DirectoryObject: DirectoryObject,
        GraphError: GraphError,
        ApplicationListResult: ApplicationListResult,
        ApplicationUpdateParameters: ApplicationUpdateParameters,
        DirectoryObjectListResult: DirectoryObjectListResult,
        AddOwnerParameters: AddOwnerParameters,
        KeyCredentialListResult: KeyCredentialListResult,
        KeyCredentialsUpdateParameters: KeyCredentialsUpdateParameters,
        PasswordCredentialListResult: PasswordCredentialListResult,
        PasswordCredentialsUpdateParameters: PasswordCredentialsUpdateParameters,
        ADGroup: ADGroup,
        ServicePrincipal: ServicePrincipal,
        User: User,
        SignInName: SignInName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Applications. */
    var Applications = /** @class */ (function () {
        /**
         * Create a Applications.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function Applications(client) {
            this.client = client;
        }
        Applications.prototype.create = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        Applications.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Applications.prototype.deleteMethod = function (applicationObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Applications.prototype.get = function (applicationObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Applications.prototype.patch = function (applicationObjectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                parameters: parameters,
                options: options
            }, patchOperationSpec, callback);
        };
        Applications.prototype.listOwners = function (applicationObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                options: options
            }, listOwnersOperationSpec, callback);
        };
        Applications.prototype.addOwner = function (applicationObjectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                parameters: parameters,
                options: options
            }, addOwnerOperationSpec, callback);
        };
        Applications.prototype.removeOwner = function (applicationObjectId$$1, ownerObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                ownerObjectId: ownerObjectId$$1,
                options: options
            }, removeOwnerOperationSpec, callback);
        };
        Applications.prototype.listKeyCredentials = function (applicationObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                options: options
            }, listKeyCredentialsOperationSpec, callback);
        };
        Applications.prototype.updateKeyCredentials = function (applicationObjectId$$1, value, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                value: value,
                options: options
            }, updateKeyCredentialsOperationSpec, callback);
        };
        Applications.prototype.listPasswordCredentials = function (applicationObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                options: options
            }, listPasswordCredentialsOperationSpec, callback);
        };
        Applications.prototype.updatePasswordCredentials = function (applicationObjectId$$1, value, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                value: value,
                options: options
            }, updatePasswordCredentialsOperationSpec, callback);
        };
        Applications.prototype.listNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        Applications.prototype.listOwnersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listOwnersNextOperationSpec, callback);
        };
        return Applications;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/applications",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ApplicationCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/applications",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "{tenantID}/applications/{applicationObjectId}",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "{tenantID}/applications/{applicationObjectId}",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var patchOperationSpec = {
        httpMethod: "PATCH",
        path: "{tenantID}/applications/{applicationObjectId}",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ApplicationUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var listOwnersOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/applications/{applicationObjectId}/owners",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var addOwnerOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/applications/{applicationObjectId}/$links/owners",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AddOwnerParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var removeOwnerOperationSpec = {
        httpMethod: "DELETE",
        path: "{tenantID}/applications/{applicationObjectId}/$links/owners/{ownerObjectId}",
        urlParameters: [
            applicationObjectId,
            ownerObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var listKeyCredentialsOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/applications/{applicationObjectId}/keyCredentials",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: KeyCredentialListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var updateKeyCredentialsOperationSpec = {
        httpMethod: "PATCH",
        path: "{tenantID}/applications/{applicationObjectId}/keyCredentials",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                value: "value"
            },
            mapper: __assign({}, KeyCredentialsUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var listPasswordCredentialsOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/applications/{applicationObjectId}/passwordCredentials",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PasswordCredentialListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var updatePasswordCredentialsOperationSpec = {
        httpMethod: "PATCH",
        path: "{tenantID}/applications/{applicationObjectId}/passwordCredentials",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                value: "value"
            },
            mapper: __assign({}, PasswordCredentialsUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };
    var listOwnersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://graph.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Application: Application,
        DirectoryObject: DirectoryObject,
        AppRole: AppRole,
        GraphError: GraphError,
        ApplicationListResult: ApplicationListResult,
        ADGroup: ADGroup,
        ServicePrincipal: ServicePrincipal,
        User: User,
        SignInName: SignInName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DeletedApplications. */
    var DeletedApplications = /** @class */ (function () {
        /**
         * Create a DeletedApplications.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function DeletedApplications(client) {
            this.client = client;
        }
        DeletedApplications.prototype.restore = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, restoreOperationSpec, callback);
        };
        DeletedApplications.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        DeletedApplications.prototype.hardDelete = function (applicationObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                applicationObjectId: applicationObjectId$$1,
                options: options
            }, hardDeleteOperationSpec, callback);
        };
        DeletedApplications.prototype.listNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return DeletedApplications;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var restoreOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/deletedApplications/{objectId}/restore",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "{tenantID}/deletedApplications",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$2
    };
    var hardDeleteOperationSpec = {
        httpMethod: "DELETE",
        path: "{tenantID}/deletedApplications/{applicationObjectId}",
        urlParameters: [
            applicationObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CheckGroupMembershipParameters: CheckGroupMembershipParameters,
        CheckGroupMembershipResult: CheckGroupMembershipResult,
        GraphError: GraphError,
        GroupAddMemberParameters: GroupAddMemberParameters,
        GroupCreateParameters: GroupCreateParameters,
        ADGroup: ADGroup,
        DirectoryObject: DirectoryObject,
        GroupListResult: GroupListResult,
        DirectoryObjectListResult: DirectoryObjectListResult,
        GroupGetMemberGroupsParameters: GroupGetMemberGroupsParameters,
        GroupGetMemberGroupsResult: GroupGetMemberGroupsResult,
        AddOwnerParameters: AddOwnerParameters,
        Application: Application,
        AppRole: AppRole,
        ServicePrincipal: ServicePrincipal,
        User: User,
        SignInName: SignInName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Groups. */
    var Groups = /** @class */ (function () {
        /**
         * Create a Groups.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function Groups(client) {
            this.client = client;
        }
        Groups.prototype.isMemberOf = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, isMemberOfOperationSpec, callback);
        };
        Groups.prototype.removeMember = function (groupObjectId$$1, memberObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                groupObjectId: groupObjectId$$1,
                memberObjectId: memberObjectId$$1,
                options: options
            }, removeMemberOperationSpec, callback);
        };
        Groups.prototype.addMember = function (groupObjectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                groupObjectId: groupObjectId$$1,
                parameters: parameters,
                options: options
            }, addMemberOperationSpec, callback);
        };
        Groups.prototype.create = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, createOperationSpec$1, callback);
        };
        Groups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Groups.prototype.getGroupMembers = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, getGroupMembersOperationSpec, callback);
        };
        Groups.prototype.get = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Groups.prototype.deleteMethod = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Groups.prototype.getMemberGroups = function (objectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                parameters: parameters,
                options: options
            }, getMemberGroupsOperationSpec, callback);
        };
        Groups.prototype.listOwners = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, listOwnersOperationSpec$1, callback);
        };
        Groups.prototype.addOwner = function (objectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                parameters: parameters,
                options: options
            }, addOwnerOperationSpec$1, callback);
        };
        Groups.prototype.removeOwner = function (objectId$$1, ownerObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                ownerObjectId: ownerObjectId$$1,
                options: options
            }, removeOwnerOperationSpec$1, callback);
        };
        Groups.prototype.listNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        Groups.prototype.getGroupMembersNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, getGroupMembersNextOperationSpec, callback);
        };
        Groups.prototype.listOwnersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listOwnersNextOperationSpec$1, callback);
        };
        return Groups;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var isMemberOfOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/isMemberOf",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckGroupMembershipParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckGroupMembershipResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var removeMemberOperationSpec = {
        httpMethod: "DELETE",
        path: "{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}",
        urlParameters: [
            groupObjectId,
            memberObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var addMemberOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/groups/{groupObjectId}/$links/members",
        urlParameters: [
            groupObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GroupAddMemberParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec$1 = {
        httpMethod: "POST",
        path: "{tenantID}/groups",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GroupCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ADGroup
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "{tenantID}/groups",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var getGroupMembersOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/groups/{objectId}/members",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "{tenantID}/groups/{objectId}",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ADGroup
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "{tenantID}/groups/{objectId}",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var getMemberGroupsOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/groups/{objectId}/getMemberGroups",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GroupGetMemberGroupsParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GroupGetMemberGroupsResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var listOwnersOperationSpec$1 = {
        httpMethod: "GET",
        path: "{tenantID}/groups/{objectId}/owners",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var addOwnerOperationSpec$1 = {
        httpMethod: "POST",
        path: "{tenantID}/groups/{objectId}/$links/owners",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AddOwnerParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var removeOwnerOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "{tenantID}/groups/{objectId}/$links/owners/{ownerObjectId}",
        urlParameters: [
            objectId,
            ownerObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GroupListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var getGroupMembersNextOperationSpec = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };
    var listOwnersNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://graph.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServicePrincipalCreateParameters: ServicePrincipalCreateParameters,
        KeyCredential: KeyCredential,
        PasswordCredential: PasswordCredential,
        ServicePrincipal: ServicePrincipal,
        DirectoryObject: DirectoryObject,
        AppRole: AppRole,
        GraphError: GraphError,
        ServicePrincipalListResult: ServicePrincipalListResult,
        ServicePrincipalUpdateParameters: ServicePrincipalUpdateParameters,
        DirectoryObjectListResult: DirectoryObjectListResult,
        KeyCredentialListResult: KeyCredentialListResult,
        KeyCredentialsUpdateParameters: KeyCredentialsUpdateParameters,
        PasswordCredentialListResult: PasswordCredentialListResult,
        PasswordCredentialsUpdateParameters: PasswordCredentialsUpdateParameters,
        Application: Application,
        ADGroup: ADGroup,
        User: User,
        SignInName: SignInName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServicePrincipals. */
    var ServicePrincipals = /** @class */ (function () {
        /**
         * Create a ServicePrincipals.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function ServicePrincipals(client) {
            this.client = client;
        }
        ServicePrincipals.prototype.create = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, createOperationSpec$2, callback);
        };
        ServicePrincipals.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        ServicePrincipals.prototype.update = function (objectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        ServicePrincipals.prototype.deleteMethod = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ServicePrincipals.prototype.get = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ServicePrincipals.prototype.listOwners = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, listOwnersOperationSpec$2, callback);
        };
        ServicePrincipals.prototype.listKeyCredentials = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, listKeyCredentialsOperationSpec$1, callback);
        };
        ServicePrincipals.prototype.updateKeyCredentials = function (objectId$$1, value, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                value: value,
                options: options
            }, updateKeyCredentialsOperationSpec$1, callback);
        };
        ServicePrincipals.prototype.listPasswordCredentials = function (objectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                options: options
            }, listPasswordCredentialsOperationSpec$1, callback);
        };
        ServicePrincipals.prototype.updatePasswordCredentials = function (objectId$$1, value, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                value: value,
                options: options
            }, updatePasswordCredentialsOperationSpec$1, callback);
        };
        ServicePrincipals.prototype.listNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        ServicePrincipals.prototype.listOwnersNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listOwnersNextOperationSpec$2, callback);
        };
        return ServicePrincipals;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var createOperationSpec$2 = {
        httpMethod: "POST",
        path: "{tenantID}/servicePrincipals",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServicePrincipalCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServicePrincipal
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "{tenantID}/servicePrincipals",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServicePrincipalListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "{tenantID}/servicePrincipals/{objectId}",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServicePrincipalUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "{tenantID}/servicePrincipals/{objectId}",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "{tenantID}/servicePrincipals/{objectId}",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServicePrincipal
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var listOwnersOperationSpec$2 = {
        httpMethod: "GET",
        path: "{tenantID}/servicePrincipals/{objectId}/owners",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var listKeyCredentialsOperationSpec$1 = {
        httpMethod: "GET",
        path: "{tenantID}/servicePrincipals/{objectId}/keyCredentials",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: KeyCredentialListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var updateKeyCredentialsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "{tenantID}/servicePrincipals/{objectId}/keyCredentials",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                value: "value"
            },
            mapper: __assign({}, KeyCredentialsUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var listPasswordCredentialsOperationSpec$1 = {
        httpMethod: "GET",
        path: "{tenantID}/servicePrincipals/{objectId}/passwordCredentials",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PasswordCredentialListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var updatePasswordCredentialsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "{tenantID}/servicePrincipals/{objectId}/passwordCredentials",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                value: "value"
            },
            mapper: __assign({}, PasswordCredentialsUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServicePrincipalListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };
    var listOwnersNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://graph.windows.net",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        UserCreateParameters: UserCreateParameters,
        UserBase: UserBase,
        PasswordProfile: PasswordProfile,
        User: User,
        DirectoryObject: DirectoryObject,
        SignInName: SignInName,
        GraphError: GraphError,
        UserListResult: UserListResult,
        UserUpdateParameters: UserUpdateParameters,
        UserGetMemberGroupsParameters: UserGetMemberGroupsParameters,
        UserGetMemberGroupsResult: UserGetMemberGroupsResult,
        Application: Application,
        AppRole: AppRole,
        ADGroup: ADGroup,
        ServicePrincipal: ServicePrincipal
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Users. */
    var Users = /** @class */ (function () {
        /**
         * Create a Users.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function Users(client) {
            this.client = client;
        }
        Users.prototype.create = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, createOperationSpec$3, callback);
        };
        Users.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        Users.prototype.get = function (upnOrObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                upnOrObjectId: upnOrObjectId$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Users.prototype.update = function (upnOrObjectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                upnOrObjectId: upnOrObjectId$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Users.prototype.deleteMethod = function (upnOrObjectId$$1, options, callback) {
            return this.client.sendOperationRequest({
                upnOrObjectId: upnOrObjectId$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Users.prototype.getMemberGroups = function (objectId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                objectId: objectId$$1,
                parameters: parameters,
                options: options
            }, getMemberGroupsOperationSpec$1, callback);
        };
        Users.prototype.listNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Users;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOperationSpec$3 = {
        httpMethod: "POST",
        path: "{tenantID}/users",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, UserCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: User
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "{tenantID}/users",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "{tenantID}/users/{upnOrObjectId}",
        urlParameters: [
            upnOrObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "{tenantID}/users/{upnOrObjectId}",
        urlParameters: [
            upnOrObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, UserUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "{tenantID}/users/{upnOrObjectId}",
        urlParameters: [
            upnOrObjectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };
    var getMemberGroupsOperationSpec$1 = {
        httpMethod: "POST",
        path: "{tenantID}/users/{objectId}/getMemberGroups",
        urlParameters: [
            objectId,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, UserGetMemberGroupsParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: UserGetMemberGroupsResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserListResult
            },
            default: {
                bodyMapper: GraphError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        GetObjectsParameters: GetObjectsParameters,
        DirectoryObjectListResult: DirectoryObjectListResult,
        DirectoryObject: DirectoryObject,
        CloudError: CloudError,
        Application: Application,
        AppRole: AppRole,
        ADGroup: ADGroup,
        ServicePrincipal: ServicePrincipal,
        User: User,
        SignInName: SignInName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Objects. */
    var Objects = /** @class */ (function () {
        /**
         * Create a Objects.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function Objects(client) {
            this.client = client;
        }
        Objects.prototype.getObjectsByObjectIds = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, getObjectsByObjectIdsOperationSpec, callback);
        };
        Objects.prototype.getObjectsByObjectIdsNext = function (nextLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextLink: nextLink$$1,
                options: options
            }, getObjectsByObjectIdsNextOperationSpec, callback);
        };
        return Objects;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getObjectsByObjectIdsOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/getObjectsByObjectIds",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GetObjectsParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getObjectsByObjectIdsNextOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/{nextLink}",
        urlParameters: [
            nextLink,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DirectoryObjectListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        DomainListResult: DomainListResult,
        Domain: Domain,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Domains. */
    var Domains = /** @class */ (function () {
        /**
         * Create a Domains.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function Domains(client) {
            this.client = client;
        }
        Domains.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        Domains.prototype.get = function (domainName$$1, options, callback) {
            return this.client.sendOperationRequest({
                domainName: domainName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        return Domains;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "{tenantID}/domains",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "{tenantID}/domains/{domainName}",
        urlParameters: [
            domainName,
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Domain
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Permissions: Permissions,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OAuth2. */
    var OAuth2 = /** @class */ (function () {
        /**
         * Create a OAuth2.
         * @param {GraphRbacManagementClientContext} client Reference to the service client.
         */
        function OAuth2(client) {
            this.client = client;
        }
        OAuth2.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec$6, callback);
        };
        OAuth2.prototype.grant = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, grantOperationSpec, callback);
        };
        return OAuth2;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "{tenantID}/oauth2PermissionGrants",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Permissions
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var grantOperationSpec = {
        httpMethod: "POST",
        path: "{tenantID}/oauth2PermissionGrants",
        urlParameters: [
            tenantID
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "body"
            ],
            mapper: Permissions
        },
        responses: {
            201: {
                bodyMapper: Permissions
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/graph";
    var packageVersion = "1.0.0";
    var GraphRbacManagementClientContext = /** @class */ (function (_super) {
        __extends(GraphRbacManagementClientContext, _super);
        /**
         * Initializes a new instance of the GraphRbacManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param tenantID The tenant ID.
         * @param [options] The parameter options
         */
        function GraphRbacManagementClientContext(credentials, tenantID, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (tenantID == undefined) {
                throw new Error('\'tenantID\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '1.6';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://graph.windows.net";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.tenantID = tenantID;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return GraphRbacManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var GraphRbacManagementClient = /** @class */ (function (_super) {
        __extends(GraphRbacManagementClient, _super);
        /**
         * Initializes a new instance of the GraphRbacManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param tenantID The tenant ID.
         * @param [options] The parameter options
         */
        function GraphRbacManagementClient(credentials, tenantID, options) {
            var _this = _super.call(this, credentials, tenantID, options) || this;
            _this.signedInUser = new SignedInUser(_this);
            _this.applications = new Applications(_this);
            _this.deletedApplications = new DeletedApplications(_this);
            _this.groups = new Groups(_this);
            _this.servicePrincipals = new ServicePrincipals(_this);
            _this.users = new Users(_this);
            _this.objects = new Objects(_this);
            _this.domains = new Domains(_this);
            _this.oAuth2 = new OAuth2(_this);
            return _this;
        }
        return GraphRbacManagementClient;
    }(GraphRbacManagementClientContext));

    exports.GraphRbacManagementClient = GraphRbacManagementClient;
    exports.GraphRbacManagementClientContext = GraphRbacManagementClientContext;
    exports.GraphRbacManagementModels = index;
    exports.GraphRbacManagementMappers = mappers;
    exports.SignedInUser = SignedInUser;
    exports.Applications = Applications;
    exports.DeletedApplications = DeletedApplications;
    exports.Groups = Groups;
    exports.ServicePrincipals = ServicePrincipals;
    exports.Users = Users;
    exports.Objects = Objects;
    exports.Domains = Domains;
    exports.OAuth2 = OAuth2;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=graph.js.map
