/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmHdinsight = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for DirectoryType.
     * Possible values include: 'ActiveDirectory'
     * @readonly
     * @enum {string}
     */
    var DirectoryType;
    (function (DirectoryType) {
        DirectoryType["ActiveDirectory"] = "ActiveDirectory";
    })(DirectoryType || (DirectoryType = {}));
    /**
     * Defines values for OSType.
     * Possible values include: 'Windows', 'Linux'
     * @readonly
     * @enum {string}
     */
    var OSType;
    (function (OSType) {
        OSType["Windows"] = "Windows";
        OSType["Linux"] = "Linux";
    })(OSType || (OSType = {}));
    /**
     * Defines values for Tier.
     * Possible values include: 'Standard', 'Premium'
     * @readonly
     * @enum {string}
     */
    var Tier;
    (function (Tier) {
        Tier["Standard"] = "Standard";
        Tier["Premium"] = "Premium";
    })(Tier || (Tier = {}));
    /**
     * Defines values for HDInsightClusterProvisioningState.
     * Possible values include: 'InProgress', 'Failed', 'Succeeded', 'Canceled',
     * 'Deleting'
     * @readonly
     * @enum {string}
     */
    var HDInsightClusterProvisioningState;
    (function (HDInsightClusterProvisioningState) {
        HDInsightClusterProvisioningState["InProgress"] = "InProgress";
        HDInsightClusterProvisioningState["Failed"] = "Failed";
        HDInsightClusterProvisioningState["Succeeded"] = "Succeeded";
        HDInsightClusterProvisioningState["Canceled"] = "Canceled";
        HDInsightClusterProvisioningState["Deleting"] = "Deleting";
    })(HDInsightClusterProvisioningState || (HDInsightClusterProvisioningState = {}));
    /**
     * Defines values for AsyncOperationState.
     * Possible values include: 'InProgress', 'Succeeded', 'Failed'
     * @readonly
     * @enum {string}
     */
    var AsyncOperationState;
    (function (AsyncOperationState) {
        AsyncOperationState["InProgress"] = "InProgress";
        AsyncOperationState["Succeeded"] = "Succeeded";
        AsyncOperationState["Failed"] = "Failed";
    })(AsyncOperationState || (AsyncOperationState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get DirectoryType () { return DirectoryType; },
        get OSType () { return OSType; },
        get Tier () { return Tier; },
        get HDInsightClusterProvisioningState () { return HDInsightClusterProvisioningState; },
        get AsyncOperationState () { return AsyncOperationState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ClusterDefinition = {
        serializedName: "ClusterDefinition",
        type: {
            name: "Composite",
            className: "ClusterDefinition",
            modelProperties: {
                blueprint: {
                    serializedName: "blueprint",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                componentVersion: {
                    serializedName: "componentVersion",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                configurations: {
                    serializedName: "configurations",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var SecurityProfile = {
        serializedName: "SecurityProfile",
        type: {
            name: "Composite",
            className: "SecurityProfile",
            modelProperties: {
                directoryType: {
                    serializedName: "directoryType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ActiveDirectory"
                        ]
                    }
                },
                domain: {
                    serializedName: "domain",
                    type: {
                        name: "String"
                    }
                },
                organizationalUnitDN: {
                    serializedName: "organizationalUnitDN",
                    type: {
                        name: "String"
                    }
                },
                ldapsUrls: {
                    serializedName: "ldapsUrls",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                domainUsername: {
                    serializedName: "domainUsername",
                    type: {
                        name: "String"
                    }
                },
                domainUserPassword: {
                    serializedName: "domainUserPassword",
                    type: {
                        name: "String"
                    }
                },
                clusterUsersGroupDNs: {
                    serializedName: "clusterUsersGroupDNs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                aaddsResourceId: {
                    serializedName: "aaddsResourceId",
                    type: {
                        name: "String"
                    }
                },
                msiResourceId: {
                    serializedName: "msiResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HardwareProfile = {
        serializedName: "HardwareProfile",
        type: {
            name: "Composite",
            className: "HardwareProfile",
            modelProperties: {
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkProfile = {
        serializedName: "VirtualNetworkProfile",
        type: {
            name: "Composite",
            className: "VirtualNetworkProfile",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                subnet: {
                    serializedName: "subnet",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataDisksGroups = {
        serializedName: "DataDisksGroups",
        type: {
            name: "Composite",
            className: "DataDisksGroups",
            modelProperties: {
                disksPerNode: {
                    serializedName: "disksPerNode",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    readOnly: true,
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    readOnly: true,
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SshPublicKey = {
        serializedName: "SshPublicKey",
        type: {
            name: "Composite",
            className: "SshPublicKey",
            modelProperties: {
                certificateData: {
                    serializedName: "certificateData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SshProfile = {
        serializedName: "SshProfile",
        type: {
            name: "Composite",
            className: "SshProfile",
            modelProperties: {
                publicKeys: {
                    serializedName: "publicKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SshPublicKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var LinuxOperatingSystemProfile = {
        serializedName: "LinuxOperatingSystemProfile",
        type: {
            name: "Composite",
            className: "LinuxOperatingSystemProfile",
            modelProperties: {
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                sshProfile: {
                    serializedName: "sshProfile",
                    type: {
                        name: "Composite",
                        className: "SshProfile"
                    }
                }
            }
        }
    };
    var OsProfile = {
        serializedName: "OsProfile",
        type: {
            name: "Composite",
            className: "OsProfile",
            modelProperties: {
                linuxOperatingSystemProfile: {
                    serializedName: "linuxOperatingSystemProfile",
                    type: {
                        name: "Composite",
                        className: "LinuxOperatingSystemProfile"
                    }
                }
            }
        }
    };
    var ScriptAction = {
        serializedName: "ScriptAction",
        type: {
            name: "Composite",
            className: "ScriptAction",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    required: true,
                    serializedName: "parameters",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Role = {
        serializedName: "Role",
        type: {
            name: "Composite",
            className: "Role",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                minInstanceCount: {
                    serializedName: "minInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                targetInstanceCount: {
                    serializedName: "targetInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                hardwareProfile: {
                    serializedName: "hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                },
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "OsProfile"
                    }
                },
                virtualNetworkProfile: {
                    serializedName: "virtualNetworkProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualNetworkProfile"
                    }
                },
                dataDisksGroups: {
                    serializedName: "dataDisksGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDisksGroups"
                            }
                        }
                    }
                },
                scriptActions: {
                    serializedName: "scriptActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ScriptAction"
                            }
                        }
                    }
                }
            }
        }
    };
    var ComputeProfile = {
        serializedName: "ComputeProfile",
        type: {
            name: "Composite",
            className: "ComputeProfile",
            modelProperties: {
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Role"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccount = {
        serializedName: "StorageAccount",
        type: {
            name: "Composite",
            className: "StorageAccount",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                container: {
                    serializedName: "container",
                    type: {
                        name: "String"
                    }
                },
                fileSystem: {
                    serializedName: "fileSystem",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageProfile = {
        serializedName: "StorageProfile",
        type: {
            name: "Composite",
            className: "StorageProfile",
            modelProperties: {
                storageaccounts: {
                    serializedName: "storageaccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                }
            }
        }
    };
    var ClusterCreateProperties = {
        serializedName: "ClusterCreateProperties",
        type: {
            name: "Composite",
            className: "ClusterCreateProperties",
            modelProperties: {
                clusterVersion: {
                    serializedName: "clusterVersion",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Premium"
                        ]
                    }
                },
                clusterDefinition: {
                    serializedName: "clusterDefinition",
                    type: {
                        name: "Composite",
                        className: "ClusterDefinition"
                    }
                },
                securityProfile: {
                    serializedName: "securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                },
                computeProfile: {
                    serializedName: "computeProfile",
                    type: {
                        name: "Composite",
                        className: "ComputeProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }
            }
        }
    };
    var ClusterCreateParametersExtended = {
        serializedName: "ClusterCreateParametersExtended",
        type: {
            name: "Composite",
            className: "ClusterCreateParametersExtended",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ClusterCreateProperties"
                    }
                }
            }
        }
    };
    var ClusterPatchParameters = {
        serializedName: "ClusterPatchParameters",
        type: {
            name: "Composite",
            className: "ClusterPatchParameters",
            modelProperties: {
                tags: {
                    nullable: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var QuotaInfo = {
        serializedName: "QuotaInfo",
        type: {
            name: "Composite",
            className: "QuotaInfo",
            modelProperties: {
                coresUsed: {
                    serializedName: "coresUsed",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Errors = {
        serializedName: "Errors",
        type: {
            name: "Composite",
            className: "Errors",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectivityEndpoint = {
        serializedName: "ConnectivityEndpoint",
        type: {
            name: "Composite",
            className: "ConnectivityEndpoint",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ClusterGetProperties = {
        serializedName: "ClusterGetProperties",
        type: {
            name: "Composite",
            className: "ClusterGetProperties",
            modelProperties: {
                clusterVersion: {
                    serializedName: "clusterVersion",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Premium"
                        ]
                    }
                },
                clusterDefinition: {
                    required: true,
                    serializedName: "clusterDefinition",
                    type: {
                        name: "Composite",
                        className: "ClusterDefinition"
                    }
                },
                securityProfile: {
                    serializedName: "securityProfile",
                    type: {
                        name: "Composite",
                        className: "SecurityProfile"
                    }
                },
                computeProfile: {
                    serializedName: "computeProfile",
                    type: {
                        name: "Composite",
                        className: "ComputeProfile"
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InProgress",
                            "Failed",
                            "Succeeded",
                            "Canceled",
                            "Deleting"
                        ]
                    }
                },
                createdDate: {
                    serializedName: "createdDate",
                    type: {
                        name: "String"
                    }
                },
                clusterState: {
                    serializedName: "clusterState",
                    type: {
                        name: "String"
                    }
                },
                quotaInfo: {
                    serializedName: "quotaInfo",
                    type: {
                        name: "Composite",
                        className: "QuotaInfo"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Errors"
                            }
                        }
                    }
                },
                connectivityEndpoints: {
                    serializedName: "connectivityEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectivityEndpoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Cluster = {
        serializedName: "Cluster",
        type: {
            name: "Composite",
            className: "Cluster",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ClusterGetProperties"
                    }
                } })
        }
    };
    var RuntimeScriptAction = {
        serializedName: "RuntimeScriptAction",
        type: {
            name: "Composite",
            className: "RuntimeScriptAction",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    required: true,
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                applicationName: {
                    readOnly: true,
                    serializedName: "applicationName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExecuteScriptActionParameters = {
        serializedName: "ExecuteScriptActionParameters",
        type: {
            name: "Composite",
            className: "ExecuteScriptActionParameters",
            modelProperties: {
                scriptActions: {
                    serializedName: "scriptActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptAction"
                            }
                        }
                    }
                },
                persistOnSuccess: {
                    required: true,
                    serializedName: "persistOnSuccess",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ClusterListPersistedScriptActionsResult = {
        serializedName: "ClusterListPersistedScriptActionsResult",
        type: {
            name: "Composite",
            className: "ClusterListPersistedScriptActionsResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptAction"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ScriptActionExecutionSummary = {
        serializedName: "ScriptActionExecutionSummary",
        type: {
            name: "Composite",
            className: "ScriptActionExecutionSummary",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                instanceCount: {
                    readOnly: true,
                    serializedName: "instanceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RuntimeScriptActionDetail = {
        serializedName: "RuntimeScriptActionDetail",
        type: {
            name: "Composite",
            className: "RuntimeScriptActionDetail",
            modelProperties: __assign({}, RuntimeScriptAction.type.modelProperties, { scriptExecutionId: {
                    readOnly: true,
                    serializedName: "scriptExecutionId",
                    type: {
                        name: "Number"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "String"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }, executionSummary: {
                    readOnly: true,
                    serializedName: "executionSummary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ScriptActionExecutionSummary"
                            }
                        }
                    }
                }, debugInformation: {
                    readOnly: true,
                    serializedName: "debugInformation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ClusterListRuntimeScriptActionDetailResult = {
        serializedName: "ClusterListRuntimeScriptActionDetailResult",
        type: {
            name: "Composite",
            className: "ClusterListRuntimeScriptActionDetailResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptActionDetail"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClusterResizeParameters = {
        serializedName: "ClusterResizeParameters",
        type: {
            name: "Composite",
            className: "ClusterResizeParameters",
            modelProperties: {
                targetInstanceCount: {
                    serializedName: "targetInstanceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var OperationResource = {
        serializedName: "OperationResource",
        type: {
            name: "Composite",
            className: "OperationResource",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InProgress",
                            "Succeeded",
                            "Failed"
                        ]
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "Errors"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationGetHttpsEndpoint = {
        serializedName: "ApplicationGetHttpsEndpoint",
        type: {
            name: "Composite",
            className: "ApplicationGetHttpsEndpoint",
            modelProperties: {
                accessModes: {
                    serializedName: "accessModes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                destinationPort: {
                    serializedName: "destinationPort",
                    type: {
                        name: "Number"
                    }
                },
                publicPort: {
                    serializedName: "publicPort",
                    type: {
                        name: "Number"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "String"
                }
            }
        }
    };
    var ApplicationGetEndpoint = {
        serializedName: "ApplicationGetEndpoint",
        type: {
            name: "Composite",
            className: "ApplicationGetEndpoint",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                destinationPort: {
                    serializedName: "destinationPort",
                    type: {
                        name: "Number"
                    }
                },
                publicPort: {
                    serializedName: "publicPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationProperties = {
        serializedName: "ApplicationProperties",
        type: {
            name: "Composite",
            className: "ApplicationProperties",
            modelProperties: {
                computeProfile: {
                    serializedName: "computeProfile",
                    type: {
                        name: "Composite",
                        className: "ComputeProfile"
                    }
                },
                installScriptActions: {
                    serializedName: "installScriptActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptAction"
                            }
                        }
                    }
                },
                uninstallScriptActions: {
                    serializedName: "uninstallScriptActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptAction"
                            }
                        }
                    }
                },
                httpsEndpoints: {
                    serializedName: "httpsEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGetHttpsEndpoint",
                                additionalProperties: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                sshEndpoints: {
                    serializedName: "sshEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationGetEndpoint"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                applicationType: {
                    serializedName: "applicationType",
                    type: {
                        name: "String"
                    }
                },
                applicationState: {
                    readOnly: true,
                    serializedName: "applicationState",
                    type: {
                        name: "String"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Errors"
                            }
                        }
                    }
                },
                createdDate: {
                    readOnly: true,
                    serializedName: "createdDate",
                    type: {
                        name: "String"
                    }
                },
                marketplaceIdentifier: {
                    readOnly: true,
                    serializedName: "marketplaceIdentifier",
                    type: {
                        name: "String"
                    }
                },
                additionalProperties: {
                    serializedName: "additionalProperties",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Application = {
        serializedName: "Application",
        type: {
            name: "Composite",
            className: "Application",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ApplicationProperties"
                    }
                } })
        }
    };
    var LocalizedName = {
        serializedName: "LocalizedName",
        type: {
            name: "Composite",
            className: "LocalizedName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "LocalizedName"
                    }
                }
            }
        }
    };
    var UsagesListResult = {
        serializedName: "UsagesListResult",
        type: {
            name: "Composite",
            className: "UsagesListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var Extension = {
        serializedName: "Extension",
        type: {
            name: "Composite",
            className: "Extension",
            modelProperties: {
                workspaceId: {
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClusterMonitoringResponse = {
        serializedName: "ClusterMonitoringResponse",
        type: {
            name: "Composite",
            className: "ClusterMonitoringResponse",
            modelProperties: {
                clusterMonitoringEnabled: {
                    serializedName: "clusterMonitoringEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                workspaceId: {
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClusterMonitoringRequest = {
        serializedName: "ClusterMonitoringRequest",
        type: {
            name: "Composite",
            className: "ClusterMonitoringRequest",
            modelProperties: {
                workspaceId: {
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ScriptActionPersistedGetResponseSpec = {
        serializedName: "ScriptActionPersistedGetResponseSpec",
        type: {
            name: "Composite",
            className: "ScriptActionPersistedGetResponseSpec",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                applicationName: {
                    serializedName: "applicationName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ClusterListResult = {
        serializedName: "ClusterListResult",
        type: {
            name: "Composite",
            className: "ClusterListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Cluster"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationListResult = {
        serializedName: "ApplicationListResult",
        type: {
            name: "Composite",
            className: "ApplicationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Application"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ScriptActionsList = {
        serializedName: "ScriptActionsList",
        type: {
            name: "Composite",
            className: "ScriptActionsList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptActionDetail"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ScriptActionExecutionHistoryList = {
        serializedName: "ScriptActionExecutionHistoryList",
        type: {
            name: "Composite",
            className: "ScriptActionExecutionHistoryList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RuntimeScriptActionDetail"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ClusterDefinition: ClusterDefinition,
        SecurityProfile: SecurityProfile,
        HardwareProfile: HardwareProfile,
        VirtualNetworkProfile: VirtualNetworkProfile,
        DataDisksGroups: DataDisksGroups,
        SshPublicKey: SshPublicKey,
        SshProfile: SshProfile,
        LinuxOperatingSystemProfile: LinuxOperatingSystemProfile,
        OsProfile: OsProfile,
        ScriptAction: ScriptAction,
        Role: Role,
        ComputeProfile: ComputeProfile,
        StorageAccount: StorageAccount,
        StorageProfile: StorageProfile,
        ClusterCreateProperties: ClusterCreateProperties,
        ClusterCreateParametersExtended: ClusterCreateParametersExtended,
        ClusterPatchParameters: ClusterPatchParameters,
        QuotaInfo: QuotaInfo,
        Errors: Errors,
        ConnectivityEndpoint: ConnectivityEndpoint,
        ClusterGetProperties: ClusterGetProperties,
        Resource: Resource,
        TrackedResource: TrackedResource,
        Cluster: Cluster,
        RuntimeScriptAction: RuntimeScriptAction,
        ExecuteScriptActionParameters: ExecuteScriptActionParameters,
        ClusterListPersistedScriptActionsResult: ClusterListPersistedScriptActionsResult,
        ScriptActionExecutionSummary: ScriptActionExecutionSummary,
        RuntimeScriptActionDetail: RuntimeScriptActionDetail,
        ClusterListRuntimeScriptActionDetailResult: ClusterListRuntimeScriptActionDetailResult,
        ClusterResizeParameters: ClusterResizeParameters,
        OperationResource: OperationResource,
        ProxyResource: ProxyResource,
        ErrorResponse: ErrorResponse,
        ApplicationGetHttpsEndpoint: ApplicationGetHttpsEndpoint,
        ApplicationGetEndpoint: ApplicationGetEndpoint,
        ApplicationProperties: ApplicationProperties,
        Application: Application,
        LocalizedName: LocalizedName,
        Usage: Usage,
        UsagesListResult: UsagesListResult,
        Extension: Extension,
        ClusterMonitoringResponse: ClusterMonitoringResponse,
        ClusterMonitoringRequest: ClusterMonitoringRequest,
        ScriptActionPersistedGetResponseSpec: ScriptActionPersistedGetResponseSpec,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ClusterListResult: ClusterListResult,
        ApplicationListResult: ApplicationListResult,
        ScriptActionsList: ScriptActionsList,
        ScriptActionExecutionHistoryList: ScriptActionExecutionHistoryList,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ClusterCreateParametersExtended: ClusterCreateParametersExtended,
        ClusterCreateProperties: ClusterCreateProperties,
        ClusterDefinition: ClusterDefinition,
        SecurityProfile: SecurityProfile,
        ComputeProfile: ComputeProfile,
        Role: Role,
        HardwareProfile: HardwareProfile,
        OsProfile: OsProfile,
        LinuxOperatingSystemProfile: LinuxOperatingSystemProfile,
        SshProfile: SshProfile,
        SshPublicKey: SshPublicKey,
        VirtualNetworkProfile: VirtualNetworkProfile,
        DataDisksGroups: DataDisksGroups,
        ScriptAction: ScriptAction,
        StorageProfile: StorageProfile,
        StorageAccount: StorageAccount,
        Cluster: Cluster,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ClusterGetProperties: ClusterGetProperties,
        QuotaInfo: QuotaInfo,
        Errors: Errors,
        ConnectivityEndpoint: ConnectivityEndpoint,
        ErrorResponse: ErrorResponse,
        ClusterPatchParameters: ClusterPatchParameters,
        ClusterListResult: ClusterListResult,
        ClusterResizeParameters: ClusterResizeParameters,
        ExecuteScriptActionParameters: ExecuteScriptActionParameters,
        RuntimeScriptAction: RuntimeScriptAction,
        RuntimeScriptActionDetail: RuntimeScriptActionDetail,
        ScriptActionExecutionSummary: ScriptActionExecutionSummary,
        ProxyResource: ProxyResource,
        Application: Application,
        ApplicationProperties: ApplicationProperties,
        ApplicationGetHttpsEndpoint: ApplicationGetHttpsEndpoint,
        ApplicationGetEndpoint: ApplicationGetEndpoint
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var applicationName = {
        parameterPath: "applicationName",
        mapper: {
            required: true,
            serializedName: "applicationName",
            type: {
                name: "String"
            }
        }
    };
    var clusterName = {
        parameterPath: "clusterName",
        mapper: {
            required: true,
            serializedName: "clusterName",
            type: {
                name: "String"
            }
        }
    };
    var configurationName = {
        parameterPath: "configurationName",
        mapper: {
            required: true,
            serializedName: "configurationName",
            type: {
                name: "String"
            }
        }
    };
    var extensionName = {
        parameterPath: "extensionName",
        mapper: {
            required: true,
            serializedName: "extensionName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var roleName = {
        parameterPath: "roleName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "roleName",
            defaultValue: 'workernode',
            type: {
                name: "String"
            }
        }
    };
    var scriptExecutionId = {
        parameterPath: "scriptExecutionId",
        mapper: {
            required: true,
            serializedName: "scriptExecutionId",
            type: {
                name: "String"
            }
        }
    };
    var scriptName = {
        parameterPath: "scriptName",
        mapper: {
            required: true,
            serializedName: "scriptName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Clusters. */
    var Clusters = /** @class */ (function () {
        /**
         * Create a Clusters.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function Clusters(client) {
            this.client = client;
        }
        /**
         * Creates a new HDInsight cluster with the specified parameters.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The cluster create request.
         * @param [options] The optional parameters
         * @returns Promise<Models.ClustersCreateResponse>
         */
        Clusters.prototype.create = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, clusterName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Clusters.prototype.update = function (resourceGroupName$$1, clusterName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes the specified HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Clusters.prototype.deleteMethod = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, clusterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Clusters.prototype.get = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Clusters.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Resizes the specified HDInsight cluster to the specified size.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The parameters for the resize operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Clusters.prototype.resize = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.beginResize(resourceGroupName$$1, clusterName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Clusters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        /**
         * Executes script actions on the specified HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The parameters for executing script actions.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Clusters.prototype.executeScriptActions = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.beginExecuteScriptActions(resourceGroupName$$1, clusterName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new HDInsight cluster with the specified parameters.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The cluster create request.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Clusters.prototype.beginCreate = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes the specified HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Clusters.prototype.beginDeleteMethod = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Resizes the specified HDInsight cluster to the specified size.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The parameters for the resize operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Clusters.prototype.beginResize = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, beginResizeOperationSpec, options);
        };
        /**
         * Executes script actions on the specified HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The parameters for executing script actions.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Clusters.prototype.beginExecuteScriptActions = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, beginExecuteScriptActionsOperationSpec, options);
        };
        Clusters.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Clusters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Clusters;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ClusterPatchParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Cluster
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Cluster
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/clusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ClusterCreateParametersExtended, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Cluster
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginResizeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/roles/{roleName}/resize",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            roleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ClusterResizeParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginExecuteScriptActionsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/executeScriptActions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExecuteScriptActionParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ApplicationListResult: ApplicationListResult,
        Application: Application,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ApplicationProperties: ApplicationProperties,
        ComputeProfile: ComputeProfile,
        Role: Role,
        HardwareProfile: HardwareProfile,
        OsProfile: OsProfile,
        LinuxOperatingSystemProfile: LinuxOperatingSystemProfile,
        SshProfile: SshProfile,
        SshPublicKey: SshPublicKey,
        VirtualNetworkProfile: VirtualNetworkProfile,
        DataDisksGroups: DataDisksGroups,
        ScriptAction: ScriptAction,
        RuntimeScriptAction: RuntimeScriptAction,
        ApplicationGetHttpsEndpoint: ApplicationGetHttpsEndpoint,
        ApplicationGetEndpoint: ApplicationGetEndpoint,
        Errors: Errors,
        ErrorResponse: ErrorResponse,
        RuntimeScriptActionDetail: RuntimeScriptActionDetail,
        ScriptActionExecutionSummary: ScriptActionExecutionSummary,
        TrackedResource: TrackedResource,
        Cluster: Cluster,
        ClusterGetProperties: ClusterGetProperties,
        ClusterDefinition: ClusterDefinition,
        SecurityProfile: SecurityProfile,
        QuotaInfo: QuotaInfo,
        ConnectivityEndpoint: ConnectivityEndpoint
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Applications. */
    var Applications = /** @class */ (function () {
        /**
         * Create a Applications.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function Applications(client) {
            this.client = client;
        }
        Applications.prototype.listByCluster = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, listByClusterOperationSpec, callback);
        };
        Applications.prototype.get = function (resourceGroupName$$1, clusterName$$1, applicationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                applicationName: applicationName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates applications for the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param applicationName The constant value for the application name.
         * @param parameters The application create request.
         * @param [options] The optional parameters
         * @returns Promise<Models.ApplicationsCreateResponse>
         */
        Applications.prototype.create = function (resourceGroupName$$1, clusterName$$1, applicationName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, clusterName$$1, applicationName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified application on the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param applicationName The constant value for the application name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Applications.prototype.deleteMethod = function (resourceGroupName$$1, clusterName$$1, applicationName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, clusterName$$1, applicationName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates applications for the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param applicationName The constant value for the application name.
         * @param parameters The application create request.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Applications.prototype.beginCreate = function (resourceGroupName$$1, clusterName$$1, applicationName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                applicationName: applicationName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Deletes the specified application on the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param applicationName The constant value for the application name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Applications.prototype.beginDeleteMethod = function (resourceGroupName$$1, clusterName$$1, applicationName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                applicationName: applicationName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        Applications.prototype.listByClusterNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByClusterNextOperationSpec, callback);
        };
        return Applications;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listByClusterOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/applications",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/applications/{applicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/applications/{applicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Application, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/applications/{applicationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            applicationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByClusterNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        UsagesListResult: UsagesListResult,
        Usage: Usage,
        LocalizedName: LocalizedName,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Locations. */
    var Locations = /** @class */ (function () {
        /**
         * Create a Locations.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function Locations(client) {
            this.client = client;
        }
        Locations.prototype.listUsages = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listUsagesOperationSpec, callback);
        };
        return Locations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsagesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Configurations. */
    var Configurations = /** @class */ (function () {
        /**
         * Create a Configurations.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function Configurations(client) {
            this.client = client;
        }
        /**
         * Configures the configuration on the specified cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param configurationName The name of the cluster configuration.
         * @param parameters The cluster configurations.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Configurations.prototype.update = function (resourceGroupName$$1, clusterName$$1, configurationName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, clusterName$$1, configurationName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Configurations.prototype.get = function (resourceGroupName$$1, clusterName$$1, configurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                configurationName: configurationName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Configures the configuration on the specified cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param configurationName The name of the cluster configuration.
         * @param parameters The cluster configurations.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Configurations.prototype.beginUpdate = function (resourceGroupName$$1, clusterName$$1, configurationName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                configurationName: configurationName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        return Configurations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/configurations/{configurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var beginUpdateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/configurations/{configurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            configurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: {
                required: true,
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        ClusterMonitoringRequest: ClusterMonitoringRequest,
        ErrorResponse: ErrorResponse,
        ClusterMonitoringResponse: ClusterMonitoringResponse,
        Extension: Extension
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Extensions. */
    var Extensions = /** @class */ (function () {
        /**
         * Create a Extensions.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function Extensions(client) {
            this.client = client;
        }
        /**
         * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The Operations Management Suite (OMS) workspace parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Extensions.prototype.enableMonitoring = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.beginEnableMonitoring(resourceGroupName$$1, clusterName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Extensions.prototype.getMonitoringStatus = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, getMonitoringStatusOperationSpec, callback);
        };
        /**
         * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Extensions.prototype.disableMonitoring = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.beginDisableMonitoring(resourceGroupName$$1, clusterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates an HDInsight cluster extension.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param extensionName The name of the cluster extension.
         * @param parameters The cluster extensions create request.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Extensions.prototype.create = function (resourceGroupName$$1, clusterName$$1, extensionName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, clusterName$$1, extensionName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Extensions.prototype.get = function (resourceGroupName$$1, clusterName$$1, extensionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                extensionName: extensionName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Deletes the specified extension for HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param extensionName The name of the cluster extension.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Extensions.prototype.deleteMethod = function (resourceGroupName$$1, clusterName$$1, extensionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, clusterName$$1, extensionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param parameters The Operations Management Suite (OMS) workspace parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Extensions.prototype.beginEnableMonitoring = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, beginEnableMonitoringOperationSpec, options);
        };
        /**
         * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Extensions.prototype.beginDisableMonitoring = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, beginDisableMonitoringOperationSpec, options);
        };
        /**
         * Creates an HDInsight cluster extension.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param extensionName The name of the cluster extension.
         * @param parameters The cluster extensions create request.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Extensions.prototype.beginCreate = function (resourceGroupName$$1, clusterName$$1, extensionName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                extensionName: extensionName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Deletes the specified extension for HDInsight cluster.
         * @param resourceGroupName The name of the resource group.
         * @param clusterName The name of the cluster.
         * @param extensionName The name of the cluster extension.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Extensions.prototype.beginDeleteMethod = function (resourceGroupName$$1, clusterName$$1, extensionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                extensionName: extensionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        return Extensions;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getMonitoringStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/clustermonitoring",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClusterMonitoringResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/{extensionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            extensionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Extension
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var beginEnableMonitoringOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/clustermonitoring",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ClusterMonitoringRequest, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var beginDisableMonitoringOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/clustermonitoring",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/{extensionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            extensionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Extension, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/{extensionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            extensionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        ScriptActionsList: ScriptActionsList,
        RuntimeScriptActionDetail: RuntimeScriptActionDetail,
        RuntimeScriptAction: RuntimeScriptAction,
        ScriptActionExecutionSummary: ScriptActionExecutionSummary
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ScriptActions. */
    var ScriptActions = /** @class */ (function () {
        /**
         * Create a ScriptActions.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function ScriptActions(client) {
            this.client = client;
        }
        ScriptActions.prototype.deleteMethod = function (resourceGroupName$$1, clusterName$$1, scriptName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                scriptName: scriptName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        ScriptActions.prototype.listByCluster = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, listByClusterOperationSpec$1, callback);
        };
        ScriptActions.prototype.getExecutionDetail = function (resourceGroupName$$1, clusterName$$1, scriptExecutionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                scriptExecutionId: scriptExecutionId$$1,
                options: options
            }, getExecutionDetailOperationSpec, callback);
        };
        ScriptActions.prototype.listByClusterNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByClusterNextOperationSpec$1, callback);
        };
        return ScriptActions;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/scriptActions/{scriptName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            scriptName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByClusterOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/scriptActions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ScriptActionsList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getExecutionDetailOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/scriptExecutionHistory/{scriptExecutionId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            scriptExecutionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RuntimeScriptActionDetail
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByClusterNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ScriptActionsList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        ScriptActionExecutionHistoryList: ScriptActionExecutionHistoryList,
        RuntimeScriptActionDetail: RuntimeScriptActionDetail,
        RuntimeScriptAction: RuntimeScriptAction,
        ScriptActionExecutionSummary: ScriptActionExecutionSummary,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ScriptExecutionHistory. */
    var ScriptExecutionHistory = /** @class */ (function () {
        /**
         * Create a ScriptExecutionHistory.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function ScriptExecutionHistory(client) {
            this.client = client;
        }
        ScriptExecutionHistory.prototype.listByCluster = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, listByClusterOperationSpec$2, callback);
        };
        ScriptExecutionHistory.prototype.promote = function (resourceGroupName$$1, clusterName$$1, scriptExecutionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                scriptExecutionId: scriptExecutionId$$1,
                options: options
            }, promoteOperationSpec, callback);
        };
        ScriptExecutionHistory.prototype.listByClusterNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByClusterNextOperationSpec$2, callback);
        };
        return ScriptExecutionHistory;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByClusterOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/scriptExecutionHistory",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ScriptActionExecutionHistoryList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var promoteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/scriptExecutionHistory/{scriptExecutionId}/promote",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName,
            scriptExecutionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByClusterNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ScriptActionExecutionHistoryList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {HDInsightManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.HDInsight/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-hdinsight";
    var packageVersion = "1.0.0-preview";
    var HDInsightManagementClientContext = /** @class */ (function (_super) {
        __extends(HDInsightManagementClientContext, _super);
        /**
         * Initializes a new instance of the HDInsightManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function HDInsightManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-06-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return HDInsightManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var HDInsightManagementClient = /** @class */ (function (_super) {
        __extends(HDInsightManagementClient, _super);
        /**
         * Initializes a new instance of the HDInsightManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function HDInsightManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.clusters = new Clusters(_this);
            _this.applications = new Applications(_this);
            _this.locations = new Locations(_this);
            _this.configurations = new Configurations(_this);
            _this.extensions = new Extensions(_this);
            _this.scriptActions = new ScriptActions(_this);
            _this.scriptExecutionHistory = new ScriptExecutionHistory(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return HDInsightManagementClient;
    }(HDInsightManagementClientContext));

    exports.HDInsightManagementClient = HDInsightManagementClient;
    exports.HDInsightManagementClientContext = HDInsightManagementClientContext;
    exports.HDInsightManagementModels = index;
    exports.HDInsightManagementMappers = mappers;
    exports.Clusters = Clusters;
    exports.Applications = Applications;
    exports.Locations = Locations;
    exports.Configurations = Configurations;
    exports.Extensions = Extensions;
    exports.ScriptActions = ScriptActions;
    exports.ScriptExecutionHistory = ScriptExecutionHistory;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-hdinsight.js.map
