/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmOperationalinsights = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for DataSourceKind.
     * Possible values include: 'AzureActivityLog', 'ChangeTrackingPath',
     * 'ChangeTrackingDefaultPath', 'ChangeTrackingDefaultRegistry',
     * 'ChangeTrackingCustomRegistry', 'CustomLog', 'CustomLogCollection',
     * 'GenericDataSource', 'IISLogs', 'LinuxPerformanceObject',
     * 'LinuxPerformanceCollection', 'LinuxSyslog', 'LinuxSyslogCollection',
     * 'WindowsEvent', 'WindowsPerformanceCounter'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DataSourceKind =
     * <DataSourceKind>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DataSourceKind;
    (function (DataSourceKind) {
        DataSourceKind["AzureActivityLog"] = "AzureActivityLog";
        DataSourceKind["ChangeTrackingPath"] = "ChangeTrackingPath";
        DataSourceKind["ChangeTrackingDefaultPath"] = "ChangeTrackingDefaultPath";
        DataSourceKind["ChangeTrackingDefaultRegistry"] = "ChangeTrackingDefaultRegistry";
        DataSourceKind["ChangeTrackingCustomRegistry"] = "ChangeTrackingCustomRegistry";
        DataSourceKind["CustomLog"] = "CustomLog";
        DataSourceKind["CustomLogCollection"] = "CustomLogCollection";
        DataSourceKind["GenericDataSource"] = "GenericDataSource";
        DataSourceKind["IISLogs"] = "IISLogs";
        DataSourceKind["LinuxPerformanceObject"] = "LinuxPerformanceObject";
        DataSourceKind["LinuxPerformanceCollection"] = "LinuxPerformanceCollection";
        DataSourceKind["LinuxSyslog"] = "LinuxSyslog";
        DataSourceKind["LinuxSyslogCollection"] = "LinuxSyslogCollection";
        DataSourceKind["WindowsEvent"] = "WindowsEvent";
        DataSourceKind["WindowsPerformanceCounter"] = "WindowsPerformanceCounter";
    })(DataSourceKind || (DataSourceKind = {}));
    /**
     * Defines values for SkuNameEnum.
     * Possible values include: 'Free', 'Standard', 'Premium', 'Unlimited',
     * 'PerNode', 'PerGB2018', 'Standalone'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuNameEnum =
     * <SkuNameEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuNameEnum;
    (function (SkuNameEnum) {
        SkuNameEnum["Free"] = "Free";
        SkuNameEnum["Standard"] = "Standard";
        SkuNameEnum["Premium"] = "Premium";
        SkuNameEnum["Unlimited"] = "Unlimited";
        SkuNameEnum["PerNode"] = "PerNode";
        SkuNameEnum["PerGB2018"] = "PerGB2018";
        SkuNameEnum["Standalone"] = "Standalone";
    })(SkuNameEnum || (SkuNameEnum = {}));
    /**
     * Defines values for EntityStatus.
     * Possible values include: 'Creating', 'Succeeded', 'Failed', 'Canceled',
     * 'Deleting', 'ProvisioningAccount'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EntityStatus =
     * <EntityStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EntityStatus;
    (function (EntityStatus) {
        EntityStatus["Creating"] = "Creating";
        EntityStatus["Succeeded"] = "Succeeded";
        EntityStatus["Failed"] = "Failed";
        EntityStatus["Canceled"] = "Canceled";
        EntityStatus["Deleting"] = "Deleting";
        EntityStatus["ProvisioningAccount"] = "ProvisioningAccount";
    })(EntityStatus || (EntityStatus = {}));

    var index = /*#__PURE__*/Object.freeze({
        get DataSourceKind () { return DataSourceKind; },
        get SkuNameEnum () { return SkuNameEnum; },
        get EntityStatus () { return EntityStatus; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var LinkedServiceProperties = {
        serializedName: "LinkedServiceProperties",
        type: {
            name: "Composite",
            className: "LinkedServiceProperties",
            modelProperties: {
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinkedService = {
        serializedName: "LinkedService",
        type: {
            name: "Composite",
            className: "LinkedService",
            modelProperties: {
                resourceId: {
                    required: true,
                    serializedName: "properties.resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataSource = {
        serializedName: "DataSource",
        type: {
            name: "Composite",
            className: "DataSource",
            modelProperties: {
                properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataSourceFilter = {
        serializedName: "DataSourceFilter",
        type: {
            name: "Composite",
            className: "DataSourceFilter",
            modelProperties: {
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntelligencePack = {
        serializedName: "IntelligencePack",
        type: {
            name: "Composite",
            className: "IntelligencePack",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedKeys = {
        serializedName: "SharedKeys",
        type: {
            name: "Composite",
            className: "SharedKeys",
            modelProperties: {
                primarySharedKey: {
                    serializedName: "primarySharedKey",
                    type: {
                        name: "String"
                    }
                },
                secondarySharedKey: {
                    serializedName: "secondarySharedKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageMetric = {
        serializedName: "UsageMetric",
        type: {
            name: "Composite",
            className: "UsageMetric",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                nextResetTime: {
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                },
                quotaPeriod: {
                    serializedName: "quotaPeriod",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagementGroupProperties = {
        serializedName: "ManagementGroupProperties",
        type: {
            name: "Composite",
            className: "ManagementGroupProperties",
            modelProperties: {
                serverCount: {
                    serializedName: "serverCount",
                    type: {
                        name: "Number"
                    }
                },
                isGateway: {
                    serializedName: "isGateway",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                dataReceived: {
                    serializedName: "dataReceived",
                    type: {
                        name: "DateTime"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagementGroup = {
        serializedName: "ManagementGroup",
        type: {
            name: "Composite",
            className: "ManagementGroup",
            modelProperties: {
                serverCount: {
                    serializedName: "properties.serverCount",
                    type: {
                        name: "Number"
                    }
                },
                isGateway: {
                    serializedName: "properties.isGateway",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "properties.id",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                },
                dataReceived: {
                    serializedName: "properties.dataReceived",
                    type: {
                        name: "DateTime"
                    }
                },
                version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkspaceProperties = {
        serializedName: "WorkspaceProperties",
        type: {
            name: "Composite",
            className: "WorkspaceProperties",
            modelProperties: {
                provisioningState: {
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                customerId: {
                    serializedName: "customerId",
                    type: {
                        name: "String"
                    }
                },
                portalUrl: {
                    serializedName: "portalUrl",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                retentionInDays: {
                    serializedName: "retentionInDays",
                    constraints: {
                        InclusiveMaximum: 730,
                        InclusiveMinimum: -1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Workspace = {
        serializedName: "Workspace",
        type: {
            name: "Composite",
            className: "Workspace",
            modelProperties: {
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "properties.source",
                    type: {
                        name: "String"
                    }
                },
                customerId: {
                    serializedName: "properties.customerId",
                    type: {
                        name: "String"
                    }
                },
                portalUrl: {
                    serializedName: "properties.portalUrl",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                retentionInDays: {
                    serializedName: "properties.retentionInDays",
                    constraints: {
                        InclusiveMaximum: 730,
                        InclusiveMinimum: -1
                    },
                    type: {
                        name: "Number"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var LinkedServiceListResult = {
        serializedName: "LinkedServiceListResult",
        type: {
            name: "Composite",
            className: "LinkedServiceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LinkedService"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataSourceListResult = {
        serializedName: "DataSourceListResult",
        type: {
            name: "Composite",
            className: "DataSourceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataSource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkspaceListUsagesResult = {
        serializedName: "WorkspaceListUsagesResult",
        type: {
            name: "Composite",
            className: "WorkspaceListUsagesResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UsageMetric"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkspaceListManagementGroupsResult = {
        serializedName: "WorkspaceListManagementGroupsResult",
        type: {
            name: "Composite",
            className: "WorkspaceListManagementGroupsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkspaceListResult = {
        serializedName: "WorkspaceListResult",
        type: {
            name: "Composite",
            className: "WorkspaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workspace"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        LinkedServiceProperties: LinkedServiceProperties,
        LinkedService: LinkedService,
        DataSource: DataSource,
        DataSourceFilter: DataSourceFilter,
        IntelligencePack: IntelligencePack,
        SharedKeys: SharedKeys,
        MetricName: MetricName,
        UsageMetric: UsageMetric,
        ManagementGroupProperties: ManagementGroupProperties,
        ManagementGroup: ManagementGroup,
        Sku: Sku,
        WorkspaceProperties: WorkspaceProperties,
        Workspace: Workspace,
        Resource: Resource,
        ProxyResource: ProxyResource,
        LinkedServiceListResult: LinkedServiceListResult,
        DataSourceListResult: DataSourceListResult,
        WorkspaceListUsagesResult: WorkspaceListUsagesResult,
        WorkspaceListManagementGroupsResult: WorkspaceListManagementGroupsResult,
        WorkspaceListResult: WorkspaceListResult,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        LinkedService: LinkedService,
        BaseResource: BaseResource,
        CloudError: CloudError,
        LinkedServiceListResult: LinkedServiceListResult,
        DataSource: DataSource,
        Workspace: Workspace,
        Sku: Sku,
        Resource: Resource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var dataSourceName = {
        parameterPath: "dataSourceName",
        mapper: {
            required: true,
            serializedName: "dataSourceName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var intelligencePackName = {
        parameterPath: "intelligencePackName",
        mapper: {
            required: true,
            serializedName: "intelligencePackName",
            type: {
                name: "String"
            }
        }
    };
    var linkedServiceName = {
        parameterPath: "linkedServiceName",
        mapper: {
            required: true,
            serializedName: "linkedServiceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName0 = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName1 = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skiptoken = {
        parameterPath: [
            "options",
            "skiptoken"
        ],
        mapper: {
            serializedName: "$skiptoken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var workspaceName0 = {
        parameterPath: "workspaceName",
        mapper: {
            required: true,
            serializedName: "workspaceName",
            type: {
                name: "String"
            }
        }
    };
    var workspaceName1 = {
        parameterPath: "workspaceName",
        mapper: {
            required: true,
            serializedName: "workspaceName",
            constraints: {
                MaxLength: 63,
                MinLength: 4,
                Pattern: /^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$/
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LinkedServices. */
    var LinkedServices = /** @class */ (function () {
        /**
         * Create a LinkedServices.
         * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
         */
        function LinkedServices(client) {
            this.client = client;
        }
        LinkedServices.prototype.createOrUpdate = function (resourceGroupName, workspaceName, linkedServiceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                linkedServiceName: linkedServiceName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        LinkedServices.prototype.deleteMethod = function (resourceGroupName, workspaceName, linkedServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                linkedServiceName: linkedServiceName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        LinkedServices.prototype.get = function (resourceGroupName, workspaceName, linkedServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                linkedServiceName: linkedServiceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        LinkedServices.prototype.listByWorkspace = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, listByWorkspaceOperationSpec, callback);
        };
        return LinkedServices;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            linkedServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, LinkedService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LinkedService
            },
            201: {
                bodyMapper: LinkedService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            linkedServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            linkedServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkedService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByWorkspaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkedServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        DataSource: DataSource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        DataSourceListResult: DataSourceListResult,
        LinkedService: LinkedService,
        Workspace: Workspace,
        Sku: Sku,
        Resource: Resource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DataSources. */
    var DataSources = /** @class */ (function () {
        /**
         * Create a DataSources.
         * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
         */
        function DataSources(client) {
            this.client = client;
        }
        DataSources.prototype.createOrUpdate = function (resourceGroupName, workspaceName, dataSourceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                dataSourceName: dataSourceName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        DataSources.prototype.deleteMethod = function (resourceGroupName, workspaceName, dataSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                dataSourceName: dataSourceName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        DataSources.prototype.get = function (resourceGroupName, workspaceName, dataSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                dataSourceName: dataSourceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        DataSources.prototype.listByWorkspace = function (resourceGroupName, workspaceName, filter$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                filter: filter$$1,
                options: options
            }, listByWorkspaceOperationSpec$1, callback);
        };
        DataSources.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec, callback);
        };
        return DataSources;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            dataSourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DataSource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataSource
            },
            201: {
                bodyMapper: DataSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            dataSourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            dataSourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByWorkspaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            filter,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataSourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByWorkspaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataSourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        IntelligencePack: IntelligencePack,
        SharedKeys: SharedKeys,
        WorkspaceListUsagesResult: WorkspaceListUsagesResult,
        UsageMetric: UsageMetric,
        MetricName: MetricName,
        WorkspaceListManagementGroupsResult: WorkspaceListManagementGroupsResult,
        ManagementGroup: ManagementGroup,
        WorkspaceListResult: WorkspaceListResult,
        Workspace: Workspace,
        BaseResource: BaseResource,
        Sku: Sku,
        LinkedService: LinkedService,
        DataSource: DataSource,
        Resource: Resource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workspaces. */
    var Workspaces = /** @class */ (function () {
        /**
         * Create a Workspaces.
         * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
         */
        function Workspaces(client) {
            this.client = client;
        }
        Workspaces.prototype.disableIntelligencePack = function (resourceGroupName, workspaceName, intelligencePackName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                intelligencePackName: intelligencePackName$$1,
                options: options
            }, disableIntelligencePackOperationSpec, callback);
        };
        Workspaces.prototype.enableIntelligencePack = function (resourceGroupName, workspaceName, intelligencePackName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                intelligencePackName: intelligencePackName$$1,
                options: options
            }, enableIntelligencePackOperationSpec, callback);
        };
        Workspaces.prototype.listIntelligencePacks = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, listIntelligencePacksOperationSpec, callback);
        };
        Workspaces.prototype.getSharedKeys = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, getSharedKeysOperationSpec, callback);
        };
        Workspaces.prototype.listUsages = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, listUsagesOperationSpec, callback);
        };
        Workspaces.prototype.listManagementGroups = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, listManagementGroupsOperationSpec, callback);
        };
        Workspaces.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Workspaces.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        /**
         * Create or update a workspace.
         * @param resourceGroupName The resource group name of the workspace.
         * @param workspaceName The name of the workspace.
         * @param parameters The parameters required to create or update a workspace.
         * @param [options] The optional parameters
         * @returns Promise<Models.WorkspacesCreateOrUpdateResponse>
         */
        Workspaces.prototype.createOrUpdate = function (resourceGroupName, workspaceName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, workspaceName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Workspaces.prototype.deleteMethod = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Workspaces.prototype.get = function (resourceGroupName, workspaceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                options: options
            }, getOperationSpec$2, callback);
        };
        Workspaces.prototype.update = function (resourceGroupName, workspaceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Create or update a workspace.
         * @param resourceGroupName The resource group name of the workspace.
         * @param workspaceName The name of the workspace.
         * @param parameters The parameters required to create or update a workspace.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Workspaces.prototype.beginCreateOrUpdate = function (resourceGroupName, workspaceName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                workspaceName: workspaceName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        return Workspaces;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var disableIntelligencePackOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Disable",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            intelligencePackName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var enableIntelligencePackOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Enable",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            intelligencePackName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listIntelligencePacksOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntelligencePack"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getSharedKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/sharedKeys",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listUsagesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/usages",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listManagementGroupsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/managementGroups",
        urlParameters: [
            resourceGroupName0,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListManagementGroupsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces",
        urlParameters: [
            resourceGroupName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/workspaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName1,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName1,
            workspaceName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName1,
            workspaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Workspace, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
        urlParameters: [
            resourceGroupName1,
            workspaceName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Workspace, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            201: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {OperationalInsightsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.OperationalInsights/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-operationalinsights";
    var packageVersion = "1.0.0-preview";
    var OperationalInsightsManagementClientContext = /** @class */ (function (_super) {
        __extends(OperationalInsightsManagementClientContext, _super);
        /**
         * Initializes a new instance of the OperationalInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function OperationalInsightsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2015-11-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return OperationalInsightsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var OperationalInsightsManagementClient = /** @class */ (function (_super) {
        __extends(OperationalInsightsManagementClient, _super);
        /**
         * Initializes a new instance of the OperationalInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function OperationalInsightsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.linkedServices = new LinkedServices(_this);
            _this.dataSources = new DataSources(_this);
            _this.workspaces = new Workspaces(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return OperationalInsightsManagementClient;
    }(OperationalInsightsManagementClientContext));

    exports.OperationalInsightsManagementClient = OperationalInsightsManagementClient;
    exports.OperationalInsightsManagementClientContext = OperationalInsightsManagementClientContext;
    exports.OperationalInsightsManagementModels = index;
    exports.OperationalInsightsManagementMappers = mappers;
    exports.LinkedServices = LinkedServices;
    exports.DataSources = DataSources;
    exports.Workspaces = Workspaces;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-operationalinsights.js.map
