/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesLuisAuthoring = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for TrainingStatus.
     * Possible values include: 'NeedsTraining', 'InProgress', 'Trained'
     * @readonly
     * @enum {string}
     */
    var TrainingStatus;
    (function (TrainingStatus) {
        TrainingStatus["NeedsTraining"] = "NeedsTraining";
        TrainingStatus["InProgress"] = "InProgress";
        TrainingStatus["Trained"] = "Trained";
    })(TrainingStatus || (TrainingStatus = {}));
    /**
     * Defines values for OperationStatusType.
     * Possible values include: 'Failed', 'FAILED', 'Success'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperationStatusType =
     * <OperationStatusType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperationStatusType;
    (function (OperationStatusType) {
        OperationStatusType["Failed"] = "Failed";
        OperationStatusType["FAILED"] = "FAILED";
        OperationStatusType["Success"] = "Success";
    })(OperationStatusType || (OperationStatusType = {}));
    /**
     * Defines values for ReadableType.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType =
     * <ReadableType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType;
    (function (ReadableType) {
        ReadableType["EntityExtractor"] = "Entity Extractor";
        ReadableType["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType["IntentClassifier"] = "Intent Classifier";
        ReadableType["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType || (ReadableType = {}));
    /**
     * Defines values for ReadableType1.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType1 =
     * <ReadableType1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType1;
    (function (ReadableType1) {
        ReadableType1["EntityExtractor"] = "Entity Extractor";
        ReadableType1["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType1["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType1["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType1["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType1["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType1["IntentClassifier"] = "Intent Classifier";
        ReadableType1["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType1["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType1 || (ReadableType1 = {}));
    /**
     * Defines values for ReadableType2.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType2 =
     * <ReadableType2>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType2;
    (function (ReadableType2) {
        ReadableType2["EntityExtractor"] = "Entity Extractor";
        ReadableType2["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType2["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType2["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType2["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType2["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType2["IntentClassifier"] = "Intent Classifier";
        ReadableType2["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType2["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType2 || (ReadableType2 = {}));
    /**
     * Defines values for ReadableType3.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType3 =
     * <ReadableType3>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType3;
    (function (ReadableType3) {
        ReadableType3["EntityExtractor"] = "Entity Extractor";
        ReadableType3["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType3["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType3["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType3["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType3["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType3["IntentClassifier"] = "Intent Classifier";
        ReadableType3["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType3["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType3 || (ReadableType3 = {}));
    /**
     * Defines values for ReadableType4.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType4 =
     * <ReadableType4>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType4;
    (function (ReadableType4) {
        ReadableType4["EntityExtractor"] = "Entity Extractor";
        ReadableType4["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType4["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType4["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType4["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType4["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType4["IntentClassifier"] = "Intent Classifier";
        ReadableType4["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType4["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType4 || (ReadableType4 = {}));
    /**
     * Defines values for ReadableType5.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType5 =
     * <ReadableType5>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType5;
    (function (ReadableType5) {
        ReadableType5["EntityExtractor"] = "Entity Extractor";
        ReadableType5["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType5["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType5["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType5["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType5["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType5["IntentClassifier"] = "Intent Classifier";
        ReadableType5["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType5["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType5 || (ReadableType5 = {}));
    /**
     * Defines values for ReadableType6.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType6 =
     * <ReadableType6>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType6;
    (function (ReadableType6) {
        ReadableType6["EntityExtractor"] = "Entity Extractor";
        ReadableType6["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType6["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType6["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType6["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType6["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType6["IntentClassifier"] = "Intent Classifier";
        ReadableType6["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType6["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType6 || (ReadableType6 = {}));
    /**
     * Defines values for ReadableType7.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType7 =
     * <ReadableType7>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType7;
    (function (ReadableType7) {
        ReadableType7["EntityExtractor"] = "Entity Extractor";
        ReadableType7["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType7["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType7["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType7["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType7["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType7["IntentClassifier"] = "Intent Classifier";
        ReadableType7["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType7["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType7 || (ReadableType7 = {}));
    /**
     * Defines values for ReadableType8.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType8 =
     * <ReadableType8>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType8;
    (function (ReadableType8) {
        ReadableType8["EntityExtractor"] = "Entity Extractor";
        ReadableType8["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType8["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType8["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType8["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType8["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType8["IntentClassifier"] = "Intent Classifier";
        ReadableType8["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType8["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType8 || (ReadableType8 = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'Queued', 'InProgress', 'UpToDate', 'Fail',
     * 'Success'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["Queued"] = "Queued";
        Status["InProgress"] = "InProgress";
        Status["UpToDate"] = "UpToDate";
        Status["Fail"] = "Fail";
        Status["Success"] = "Success";
    })(Status || (Status = {}));
    /**
     * Defines values for Status1.
     * Possible values include: 'Queued', 'InProgress', 'UpToDate', 'Fail',
     * 'Success'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Status1 = <Status1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Status1;
    (function (Status1) {
        Status1["Queued"] = "Queued";
        Status1["InProgress"] = "InProgress";
        Status1["UpToDate"] = "UpToDate";
        Status1["Fail"] = "Fail";
        Status1["Success"] = "Success";
    })(Status1 || (Status1 = {}));
    /**
     * Defines values for ReadableType9.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType9 =
     * <ReadableType9>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType9;
    (function (ReadableType9) {
        ReadableType9["EntityExtractor"] = "Entity Extractor";
        ReadableType9["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType9["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType9["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType9["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType9["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType9["IntentClassifier"] = "Intent Classifier";
        ReadableType9["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType9["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType9 || (ReadableType9 = {}));
    /**
     * Defines values for ReadableType10.
     * Possible values include: 'Entity Extractor', 'Hierarchical Entity
     * Extractor', 'Hierarchical Child Entity Extractor', 'Composite Entity
     * Extractor', 'Closed List Entity Extractor', 'Prebuilt Entity Extractor',
     * 'Intent Classifier', 'Pattern.Any Entity Extractor', 'Regex Entity
     * Extractor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadableType10 =
     * <ReadableType10>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadableType10;
    (function (ReadableType10) {
        ReadableType10["EntityExtractor"] = "Entity Extractor";
        ReadableType10["HierarchicalEntityExtractor"] = "Hierarchical Entity Extractor";
        ReadableType10["HierarchicalChildEntityExtractor"] = "Hierarchical Child Entity Extractor";
        ReadableType10["CompositeEntityExtractor"] = "Composite Entity Extractor";
        ReadableType10["ClosedListEntityExtractor"] = "Closed List Entity Extractor";
        ReadableType10["PrebuiltEntityExtractor"] = "Prebuilt Entity Extractor";
        ReadableType10["IntentClassifier"] = "Intent Classifier";
        ReadableType10["PatternAnyEntityExtractor"] = "Pattern.Any Entity Extractor";
        ReadableType10["RegexEntityExtractor"] = "Regex Entity Extractor";
    })(ReadableType10 || (ReadableType10 = {}));

    var index = /*#__PURE__*/Object.freeze({
        get TrainingStatus () { return TrainingStatus; },
        get OperationStatusType () { return OperationStatusType; },
        get ReadableType () { return ReadableType; },
        get ReadableType1 () { return ReadableType1; },
        get ReadableType2 () { return ReadableType2; },
        get ReadableType3 () { return ReadableType3; },
        get ReadableType4 () { return ReadableType4; },
        get ReadableType5 () { return ReadableType5; },
        get ReadableType6 () { return ReadableType6; },
        get ReadableType7 () { return ReadableType7; },
        get ReadableType8 () { return ReadableType8; },
        get Status () { return Status; },
        get Status1 () { return Status1; },
        get ReadableType9 () { return ReadableType9; },
        get ReadableType10 () { return ReadableType10; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var EntityLabelObject = {
        serializedName: "EntityLabelObject",
        type: {
            name: "Composite",
            className: "EntityLabelObject",
            modelProperties: {
                entityName: {
                    required: true,
                    serializedName: "entityName",
                    type: {
                        name: "String"
                    }
                },
                startCharIndex: {
                    required: true,
                    serializedName: "startCharIndex",
                    type: {
                        name: "Number"
                    }
                },
                endCharIndex: {
                    required: true,
                    serializedName: "endCharIndex",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationCreateObject = {
        serializedName: "ApplicationCreateObject",
        type: {
            name: "Composite",
            className: "ApplicationCreateObject",
            modelProperties: {
                culture: {
                    required: true,
                    serializedName: "culture",
                    type: {
                        name: "String"
                    }
                },
                domain: {
                    serializedName: "domain",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                initialVersionId: {
                    serializedName: "initialVersionId",
                    type: {
                        name: "String"
                    }
                },
                usageScenario: {
                    serializedName: "usageScenario",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrebuiltDomainCreateBaseObject = {
        serializedName: "PrebuiltDomainCreateBaseObject",
        type: {
            name: "Composite",
            className: "PrebuiltDomainCreateBaseObject",
            modelProperties: {
                domainName: {
                    serializedName: "domainName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrebuiltDomainCreateObject = {
        serializedName: "PrebuiltDomainCreateObject",
        type: {
            name: "Composite",
            className: "PrebuiltDomainCreateObject",
            modelProperties: {
                domainName: {
                    serializedName: "domainName",
                    type: {
                        name: "String"
                    }
                },
                culture: {
                    serializedName: "culture",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrebuiltDomainModelCreateObject = {
        serializedName: "PrebuiltDomainModelCreateObject",
        type: {
            name: "Composite",
            className: "PrebuiltDomainModelCreateObject",
            modelProperties: {
                domainName: {
                    serializedName: "domainName",
                    type: {
                        name: "String"
                    }
                },
                modelName: {
                    serializedName: "modelName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HierarchicalEntityModel = {
        serializedName: "HierarchicalEntityModel",
        type: {
            name: "Composite",
            className: "HierarchicalEntityModel",
            modelProperties: {
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CompositeEntityModel = {
        serializedName: "CompositeEntityModel",
        type: {
            name: "Composite",
            className: "CompositeEntityModel",
            modelProperties: {
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JSONEntity = {
        serializedName: "JSONEntity",
        type: {
            name: "Composite",
            className: "JSONEntity",
            modelProperties: {
                startPos: {
                    required: true,
                    serializedName: "startPos",
                    type: {
                        name: "Number"
                    }
                },
                endPos: {
                    required: true,
                    serializedName: "endPos",
                    type: {
                        name: "Number"
                    }
                },
                entity: {
                    required: true,
                    serializedName: "entity",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationSettingUpdateObject = {
        serializedName: "ApplicationSettingUpdateObject",
        type: {
            name: "Composite",
            className: "ApplicationSettingUpdateObject",
            modelProperties: {
                publicProperty: {
                    nullable: false,
                    serializedName: "public",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PublishSettingUpdateObject = {
        serializedName: "PublishSettingUpdateObject",
        type: {
            name: "Composite",
            className: "PublishSettingUpdateObject",
            modelProperties: {
                sentimentAnalysis: {
                    nullable: false,
                    serializedName: "sentimentAnalysis",
                    type: {
                        name: "Boolean"
                    }
                },
                speech: {
                    nullable: false,
                    serializedName: "speech",
                    type: {
                        name: "Boolean"
                    }
                },
                spellChecker: {
                    nullable: false,
                    serializedName: "spellChecker",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ExampleLabelObject = {
        serializedName: "ExampleLabelObject",
        type: {
            name: "Composite",
            className: "ExampleLabelObject",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                entityLabels: {
                    serializedName: "entityLabels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityLabelObject"
                            }
                        }
                    }
                },
                intentName: {
                    serializedName: "intentName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PhraselistCreateObject = {
        serializedName: "PhraselistCreateObject",
        type: {
            name: "Composite",
            className: "PhraselistCreateObject",
            modelProperties: {
                phrases: {
                    serializedName: "phrases",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isExchangeable: {
                    serializedName: "isExchangeable",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SubClosedList = {
        serializedName: "SubClosedList",
        type: {
            name: "Composite",
            className: "SubClosedList",
            modelProperties: {
                canonicalForm: {
                    serializedName: "canonicalForm",
                    type: {
                        name: "String"
                    }
                },
                list: {
                    serializedName: "list",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubClosedListResponse = {
        serializedName: "SubClosedListResponse",
        type: {
            name: "Composite",
            className: "SubClosedListResponse",
            modelProperties: __assign({}, SubClosedList.type.modelProperties, { id: {
                    nullable: false,
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ApplicationUpdateObject = {
        serializedName: "ApplicationUpdateObject",
        type: {
            name: "Composite",
            className: "ApplicationUpdateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JSONRegexFeature = {
        serializedName: "JSONRegexFeature",
        type: {
            name: "Composite",
            className: "JSONRegexFeature",
            modelProperties: {
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                activated: {
                    serializedName: "activated",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternUpdateObject = {
        serializedName: "PatternUpdateObject",
        type: {
            name: "Composite",
            className: "PatternUpdateObject",
            modelProperties: {
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isActive: {
                    serializedName: "isActive",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ClosedList = {
        serializedName: "ClosedList",
        type: {
            name: "Composite",
            className: "ClosedList",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subLists: {
                    serializedName: "subLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubClosedList"
                            }
                        }
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WordListObject = {
        serializedName: "WordListObject",
        type: {
            name: "Composite",
            className: "WordListObject",
            modelProperties: {
                canonicalForm: {
                    serializedName: "canonicalForm",
                    type: {
                        name: "String"
                    }
                },
                list: {
                    serializedName: "list",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ClosedListModelPatchObject = {
        serializedName: "ClosedListModelPatchObject",
        type: {
            name: "Composite",
            className: "ClosedListModelPatchObject",
            modelProperties: {
                subLists: {
                    serializedName: "subLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WordListObject"
                            }
                        }
                    }
                }
            }
        }
    };
    var JSONModelFeature = {
        serializedName: "JSONModelFeature",
        type: {
            name: "Composite",
            className: "JSONModelFeature",
            modelProperties: {
                activated: {
                    serializedName: "activated",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                words: {
                    serializedName: "words",
                    type: {
                        name: "String"
                    }
                },
                mode: {
                    serializedName: "mode",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ModelCreateObject = {
        serializedName: "ModelCreateObject",
        type: {
            name: "Composite",
            className: "ModelCreateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternCreateObject = {
        serializedName: "PatternCreateObject",
        type: {
            name: "Composite",
            className: "PatternCreateObject",
            modelProperties: {
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WordListBaseUpdateObject = {
        serializedName: "WordListBaseUpdateObject",
        type: {
            name: "Composite",
            className: "WordListBaseUpdateObject",
            modelProperties: {
                canonicalForm: {
                    serializedName: "canonicalForm",
                    type: {
                        name: "String"
                    }
                },
                list: {
                    serializedName: "list",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var JSONUtterance = {
        serializedName: "JSONUtterance",
        type: {
            name: "Composite",
            className: "JSONUtterance",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                intent: {
                    serializedName: "intent",
                    type: {
                        name: "String"
                    }
                },
                entities: {
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JSONEntity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ModelUpdateObject = {
        serializedName: "ModelUpdateObject",
        type: {
            name: "Composite",
            className: "ModelUpdateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClosedListModelUpdateObject = {
        serializedName: "ClosedListModelUpdateObject",
        type: {
            name: "Composite",
            className: "ClosedListModelUpdateObject",
            modelProperties: {
                subLists: {
                    serializedName: "subLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WordListObject"
                            }
                        }
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ClosedListModelCreateObject = {
        serializedName: "ClosedListModelCreateObject",
        type: {
            name: "Composite",
            className: "ClosedListModelCreateObject",
            modelProperties: {
                subLists: {
                    serializedName: "subLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WordListObject"
                            }
                        }
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VersionInfo = {
        serializedName: "VersionInfo",
        type: {
            name: "Composite",
            className: "VersionInfo",
            modelProperties: {
                version: {
                    required: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                createdDateTime: {
                    serializedName: "createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedDateTime: {
                    serializedName: "lastModifiedDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastTrainedDateTime: {
                    serializedName: "lastTrainedDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastPublishedDateTime: {
                    serializedName: "lastPublishedDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endpointUrl: {
                    serializedName: "endpointUrl",
                    type: {
                        name: "String"
                    }
                },
                assignedEndpointKey: {
                    serializedName: "assignedEndpointKey",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                externalApiKeys: {
                    serializedName: "externalApiKeys",
                    type: {
                        name: "Object"
                    }
                },
                intentsCount: {
                    serializedName: "intentsCount",
                    type: {
                        name: "Number"
                    }
                },
                entitiesCount: {
                    serializedName: "entitiesCount",
                    type: {
                        name: "Number"
                    }
                },
                endpointHitsCount: {
                    serializedName: "endpointHitsCount",
                    type: {
                        name: "Number"
                    }
                },
                trainingStatus: {
                    required: true,
                    serializedName: "trainingStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NeedsTraining",
                            "InProgress",
                            "Trained"
                        ]
                    }
                }
            }
        }
    };
    var TaskUpdateObject = {
        serializedName: "TaskUpdateObject",
        type: {
            name: "Composite",
            className: "TaskUpdateObject",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PhraselistUpdateObject = {
        serializedName: "PhraselistUpdateObject",
        type: {
            name: "Composite",
            className: "PhraselistUpdateObject",
            modelProperties: {
                phrases: {
                    serializedName: "phrases",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isActive: {
                    serializedName: "isActive",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                isExchangeable: {
                    serializedName: "isExchangeable",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PrebuiltDomainObject = {
        serializedName: "PrebuiltDomainObject",
        type: {
            name: "Composite",
            className: "PrebuiltDomainObject",
            modelProperties: {
                domainName: {
                    serializedName: "domain_name",
                    type: {
                        name: "String"
                    }
                },
                modelName: {
                    serializedName: "model_name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HierarchicalModel = {
        serializedName: "HierarchicalModel",
        type: {
            name: "Composite",
            className: "HierarchicalModel",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                inherits: {
                    serializedName: "inherits",
                    type: {
                        name: "Composite",
                        className: "PrebuiltDomainObject"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationPublishObject = {
        serializedName: "ApplicationPublishObject",
        type: {
            name: "Composite",
            className: "ApplicationPublishObject",
            modelProperties: {
                versionId: {
                    serializedName: "versionId",
                    type: {
                        name: "String"
                    }
                },
                isStaging: {
                    serializedName: "isStaging",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PatternAny = {
        serializedName: "PatternAny",
        type: {
            name: "Composite",
            className: "PatternAny",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                explicitList: {
                    serializedName: "explicitList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegexEntity = {
        serializedName: "RegexEntity",
        type: {
            name: "Composite",
            className: "RegexEntity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                regexPattern: {
                    serializedName: "regexPattern",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrebuiltEntity = {
        serializedName: "PrebuiltEntity",
        type: {
            name: "Composite",
            className: "PrebuiltEntity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PatternRule = {
        serializedName: "PatternRule",
        type: {
            name: "Composite",
            className: "PatternRule",
            modelProperties: {
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                intent: {
                    serializedName: "intent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LuisApp = {
        serializedName: "LuisApp",
        type: {
            name: "Composite",
            className: "LuisApp",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                versionId: {
                    serializedName: "versionId",
                    type: {
                        name: "String"
                    }
                },
                desc: {
                    serializedName: "desc",
                    type: {
                        name: "String"
                    }
                },
                culture: {
                    serializedName: "culture",
                    type: {
                        name: "String"
                    }
                },
                intents: {
                    serializedName: "intents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HierarchicalModel"
                            }
                        }
                    }
                },
                entities: {
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HierarchicalModel"
                            }
                        }
                    }
                },
                closedLists: {
                    serializedName: "closedLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClosedList"
                            }
                        }
                    }
                },
                composites: {
                    serializedName: "composites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HierarchicalModel"
                            }
                        }
                    }
                },
                patternAnyEntities: {
                    serializedName: "patternAnyEntities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternAny"
                            }
                        }
                    }
                },
                regexEntities: {
                    serializedName: "regex_entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegexEntity"
                            }
                        }
                    }
                },
                prebuiltEntities: {
                    serializedName: "prebuiltEntities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltEntity"
                            }
                        }
                    }
                },
                regexFeatures: {
                    serializedName: "regex_features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JSONRegexFeature"
                            }
                        }
                    }
                },
                modelFeatures: {
                    serializedName: "model_features",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JSONModelFeature"
                            }
                        }
                    }
                },
                patterns: {
                    serializedName: "patterns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternRule"
                            }
                        }
                    }
                },
                utterances: {
                    serializedName: "utterances",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JSONUtterance"
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var EntityLabel = {
        serializedName: "EntityLabel",
        type: {
            name: "Composite",
            className: "EntityLabel",
            modelProperties: {
                entityName: {
                    required: true,
                    serializedName: "entityName",
                    type: {
                        name: "String"
                    }
                },
                startTokenIndex: {
                    required: true,
                    serializedName: "startTokenIndex",
                    type: {
                        name: "Number"
                    }
                },
                endTokenIndex: {
                    required: true,
                    serializedName: "endTokenIndex",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IntentPrediction = {
        serializedName: "IntentPrediction",
        type: {
            name: "Composite",
            className: "IntentPrediction",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EntityPrediction = {
        serializedName: "EntityPrediction",
        type: {
            name: "Composite",
            className: "EntityPrediction",
            modelProperties: {
                entityName: {
                    required: true,
                    serializedName: "entityName",
                    type: {
                        name: "String"
                    }
                },
                startTokenIndex: {
                    required: true,
                    serializedName: "startTokenIndex",
                    type: {
                        name: "Number"
                    }
                },
                endTokenIndex: {
                    required: true,
                    serializedName: "endTokenIndex",
                    type: {
                        name: "Number"
                    }
                },
                phrase: {
                    required: true,
                    serializedName: "phrase",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LabeledUtterance = {
        serializedName: "LabeledUtterance",
        type: {
            name: "Composite",
            className: "LabeledUtterance",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                tokenizedText: {
                    serializedName: "tokenizedText",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                intentLabel: {
                    serializedName: "intentLabel",
                    type: {
                        name: "String"
                    }
                },
                entityLabels: {
                    serializedName: "entityLabels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityLabel"
                            }
                        }
                    }
                },
                intentPredictions: {
                    serializedName: "intentPredictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentPrediction"
                            }
                        }
                    }
                },
                entityPredictions: {
                    serializedName: "entityPredictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityPrediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var IntentsSuggestionExample = {
        serializedName: "IntentsSuggestionExample",
        type: {
            name: "Composite",
            className: "IntentsSuggestionExample",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                tokenizedText: {
                    serializedName: "tokenizedText",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                intentPredictions: {
                    serializedName: "intentPredictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentPrediction"
                            }
                        }
                    }
                },
                entityPredictions: {
                    serializedName: "entityPredictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityPrediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntitiesSuggestionExample = {
        serializedName: "EntitiesSuggestionExample",
        type: {
            name: "Composite",
            className: "EntitiesSuggestionExample",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                tokenizedText: {
                    serializedName: "tokenizedText",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                intentPredictions: {
                    serializedName: "intentPredictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentPrediction"
                            }
                        }
                    }
                },
                entityPredictions: {
                    serializedName: "entityPredictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityPrediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var PersonalAssistantsResponse = {
        serializedName: "PersonalAssistantsResponse",
        type: {
            name: "Composite",
            className: "PersonalAssistantsResponse",
            modelProperties: {
                endpointKeys: {
                    serializedName: "endpointKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                endpointUrls: {
                    serializedName: "endpointUrls",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ModelInfo = {
        serializedName: "ModelInfo",
        type: {
            name: "Composite",
            className: "ModelInfo",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EntityRole = {
        serializedName: "EntityRole",
        type: {
            name: "Composite",
            className: "EntityRole",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ChildEntity = {
        serializedName: "ChildEntity",
        type: {
            name: "Composite",
            className: "ChildEntity",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExplicitListItem = {
        serializedName: "ExplicitListItem",
        type: {
            name: "Composite",
            className: "ExplicitListItem",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                explicitListItem: {
                    serializedName: "explicitListItem",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ModelInfoResponse = {
        serializedName: "ModelInfoResponse",
        type: {
            name: "Composite",
            className: "ModelInfoResponse",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ChildEntity"
                            }
                        }
                    }
                },
                subLists: {
                    serializedName: "subLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubClosedListResponse"
                            }
                        }
                    }
                },
                customPrebuiltDomainName: {
                    serializedName: "customPrebuiltDomainName",
                    type: {
                        name: "String"
                    }
                },
                customPrebuiltModelName: {
                    serializedName: "customPrebuiltModelName",
                    type: {
                        name: "String"
                    }
                },
                regexPattern: {
                    serializedName: "regexPattern",
                    type: {
                        name: "String"
                    }
                },
                explicitList: {
                    serializedName: "explicitList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExplicitListItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntityModelInfo = {
        serializedName: "EntityModelInfo",
        type: {
            name: "Composite",
            className: "EntityModelInfo",
            modelProperties: __assign({}, ModelInfo.type.modelProperties, { roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                } })
        }
    };
    var HierarchicalEntityExtractor = {
        serializedName: "Hierarchical Entity Extractor",
        type: {
            name: "Composite",
            className: "HierarchicalEntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ChildEntity"
                            }
                        }
                    }
                }
            }
        }
    };
    var CompositeEntityExtractor = {
        serializedName: "Composite Entity Extractor",
        type: {
            name: "Composite",
            className: "CompositeEntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                children: {
                    serializedName: "children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ChildEntity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ClosedListEntityExtractor = {
        serializedName: "Closed List Entity Extractor",
        type: {
            name: "Composite",
            className: "ClosedListEntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                subLists: {
                    serializedName: "subLists",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubClosedListResponse"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrebuiltEntityExtractor = {
        serializedName: "Prebuilt Entity Extractor",
        type: {
            name: "Composite",
            className: "PrebuiltEntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            }
        }
    };
    var HierarchicalChildEntity = {
        serializedName: "HierarchicalChildEntity",
        type: {
            name: "Composite",
            className: "HierarchicalChildEntity",
            modelProperties: __assign({}, ChildEntity.type.modelProperties, { typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                }, readableType: {
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CustomPrebuiltModel = {
        serializedName: "CustomPrebuiltModel",
        type: {
            name: "Composite",
            className: "CustomPrebuiltModel",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                customPrebuiltDomainName: {
                    serializedName: "customPrebuiltDomainName",
                    type: {
                        name: "String"
                    }
                },
                customPrebuiltModelName: {
                    serializedName: "customPrebuiltModelName",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            }
        }
    };
    var IntentClassifier = {
        serializedName: "Intent Classifier",
        type: {
            name: "Composite",
            className: "IntentClassifier",
            modelProperties: __assign({}, ModelInfo.type.modelProperties, { customPrebuiltDomainName: {
                    serializedName: "customPrebuiltDomainName",
                    type: {
                        name: "String"
                    }
                }, customPrebuiltModelName: {
                    serializedName: "customPrebuiltModelName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EntityExtractor = {
        serializedName: "Entity Extractor",
        type: {
            name: "Composite",
            className: "EntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                customPrebuiltDomainName: {
                    serializedName: "customPrebuiltDomainName",
                    type: {
                        name: "String"
                    }
                },
                customPrebuiltModelName: {
                    serializedName: "customPrebuiltModelName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FeatureInfoObject = {
        serializedName: "FeatureInfoObject",
        type: {
            name: "Composite",
            className: "FeatureInfoObject",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isActive: {
                    serializedName: "isActive",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PhraseListFeatureInfo = {
        serializedName: "PhraseListFeatureInfo",
        type: {
            name: "Composite",
            className: "PhraseListFeatureInfo",
            modelProperties: __assign({}, FeatureInfoObject.type.modelProperties, { phrases: {
                    serializedName: "phrases",
                    type: {
                        name: "String"
                    }
                }, isExchangeable: {
                    serializedName: "isExchangeable",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var PatternFeatureInfo = {
        serializedName: "PatternFeatureInfo",
        type: {
            name: "Composite",
            className: "PatternFeatureInfo",
            modelProperties: __assign({}, FeatureInfoObject.type.modelProperties, { pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FeaturesResponseObject = {
        serializedName: "FeaturesResponseObject",
        type: {
            name: "Composite",
            className: "FeaturesResponseObject",
            modelProperties: {
                phraselistFeatures: {
                    serializedName: "phraselistFeatures",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PhraseListFeatureInfo"
                            }
                        }
                    }
                },
                patternFeatures: {
                    serializedName: "patternFeatures",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternFeatureInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var LabelExampleResponse = {
        serializedName: "LabelExampleResponse",
        type: {
            name: "Composite",
            className: "LabelExampleResponse",
            modelProperties: {
                utteranceText: {
                    serializedName: "UtteranceText",
                    type: {
                        name: "String"
                    }
                },
                exampleId: {
                    serializedName: "ExampleId",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var OperationStatus = {
        serializedName: "OperationStatus",
        type: {
            name: "Composite",
            className: "OperationStatus",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchLabelExample = {
        serializedName: "BatchLabelExample",
        type: {
            name: "Composite",
            className: "BatchLabelExample",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        className: "LabelExampleResponse"
                    }
                },
                hasError: {
                    serializedName: "hasError",
                    type: {
                        name: "Boolean"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "OperationStatus"
                    }
                }
            }
        }
    };
    var ApplicationInfoResponse = {
        serializedName: "ApplicationInfoResponse",
        type: {
            name: "Composite",
            className: "ApplicationInfoResponse",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                culture: {
                    serializedName: "culture",
                    type: {
                        name: "String"
                    }
                },
                usageScenario: {
                    serializedName: "usageScenario",
                    type: {
                        name: "String"
                    }
                },
                domain: {
                    serializedName: "domain",
                    type: {
                        name: "String"
                    }
                },
                versionsCount: {
                    serializedName: "versionsCount",
                    type: {
                        name: "Number"
                    }
                },
                createdDateTime: {
                    serializedName: "createdDateTime",
                    type: {
                        name: "String"
                    }
                },
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Object"
                    }
                },
                endpointHitsCount: {
                    serializedName: "endpointHitsCount",
                    type: {
                        name: "Number"
                    }
                },
                activeVersion: {
                    serializedName: "activeVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointInfo = {
        serializedName: "EndpointInfo",
        type: {
            name: "Composite",
            className: "EndpointInfo",
            modelProperties: {
                versionId: {
                    serializedName: "versionId",
                    type: {
                        name: "String"
                    }
                },
                isStaging: {
                    serializedName: "isStaging",
                    type: {
                        name: "Boolean"
                    }
                },
                endpointUrl: {
                    serializedName: "endpointUrl",
                    type: {
                        name: "String"
                    }
                },
                region: {
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                },
                assignedEndpointKey: {
                    serializedName: "assignedEndpointKey",
                    type: {
                        name: "String"
                    }
                },
                endpointRegion: {
                    serializedName: "endpointRegion",
                    type: {
                        name: "String"
                    }
                },
                publishedDateTime: {
                    serializedName: "publishedDateTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProductionOrStagingEndpointInfo = {
        serializedName: "ProductionOrStagingEndpointInfo",
        type: {
            name: "Composite",
            className: "ProductionOrStagingEndpointInfo",
            modelProperties: __assign({}, EndpointInfo.type.modelProperties)
        }
    };
    var AvailableCulture = {
        serializedName: "AvailableCulture",
        type: {
            name: "Composite",
            className: "AvailableCulture",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationSettings = {
        serializedName: "ApplicationSettings",
        type: {
            name: "Composite",
            className: "ApplicationSettings",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                isPublic: {
                    required: true,
                    nullable: false,
                    serializedName: "public",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var PublishSettings = {
        serializedName: "PublishSettings",
        type: {
            name: "Composite",
            className: "PublishSettings",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                isSentimentAnalysisEnabled: {
                    required: true,
                    nullable: false,
                    serializedName: "sentimentAnalysis",
                    type: {
                        name: "Boolean"
                    }
                },
                isSpeechEnabled: {
                    required: true,
                    nullable: false,
                    serializedName: "speech",
                    type: {
                        name: "Boolean"
                    }
                },
                isSpellCheckerEnabled: {
                    required: true,
                    nullable: false,
                    serializedName: "spellChecker",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AvailablePrebuiltEntityModel = {
        serializedName: "AvailablePrebuiltEntityModel",
        type: {
            name: "Composite",
            className: "AvailablePrebuiltEntityModel",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                examples: {
                    serializedName: "examples",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnqueueTrainingResponse = {
        serializedName: "EnqueueTrainingResponse",
        type: {
            name: "Composite",
            className: "EnqueueTrainingResponse",
            modelProperties: {
                statusId: {
                    serializedName: "statusId",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ModelTrainingDetails = {
        serializedName: "ModelTrainingDetails",
        type: {
            name: "Composite",
            className: "ModelTrainingDetails",
            modelProperties: {
                statusId: {
                    serializedName: "statusId",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                exampleCount: {
                    serializedName: "exampleCount",
                    type: {
                        name: "Number"
                    }
                },
                trainingDateTime: {
                    serializedName: "trainingDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                failureReason: {
                    serializedName: "failureReason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ModelTrainingInfo = {
        serializedName: "ModelTrainingInfo",
        type: {
            name: "Composite",
            className: "ModelTrainingInfo",
            modelProperties: {
                modelId: {
                    serializedName: "modelId",
                    type: {
                        name: "Uuid"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Composite",
                        className: "ModelTrainingDetails"
                    }
                }
            }
        }
    };
    var UserAccessList = {
        serializedName: "UserAccessList",
        type: {
            name: "Composite",
            className: "UserAccessList",
            modelProperties: {
                owner: {
                    serializedName: "owner",
                    type: {
                        name: "String"
                    }
                },
                emails: {
                    serializedName: "emails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var UserCollaborator = {
        serializedName: "UserCollaborator",
        type: {
            name: "Composite",
            className: "UserCollaborator",
            modelProperties: {
                email: {
                    serializedName: "email",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CollaboratorsArray = {
        serializedName: "CollaboratorsArray",
        type: {
            name: "Composite",
            className: "CollaboratorsArray",
            modelProperties: {
                emails: {
                    serializedName: "emails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                errorType: {
                    serializedName: "errorType",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var OperationError = {
        serializedName: "OperationError",
        type: {
            name: "Composite",
            className: "OperationError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrebuiltDomainItem = {
        serializedName: "PrebuiltDomainItem",
        type: {
            name: "Composite",
            className: "PrebuiltDomainItem",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                examples: {
                    serializedName: "examples",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrebuiltDomain = {
        serializedName: "PrebuiltDomain",
        type: {
            name: "Composite",
            className: "PrebuiltDomain",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                culture: {
                    serializedName: "culture",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                examples: {
                    serializedName: "examples",
                    type: {
                        name: "String"
                    }
                },
                intents: {
                    serializedName: "intents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltDomainItem"
                            }
                        }
                    }
                },
                entities: {
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltDomainItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntityRoleCreateObject = {
        serializedName: "EntityRoleCreateObject",
        type: {
            name: "Composite",
            className: "EntityRoleCreateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegexModelCreateObject = {
        serializedName: "RegexModelCreateObject",
        type: {
            name: "Composite",
            className: "RegexModelCreateObject",
            modelProperties: {
                regexPattern: {
                    serializedName: "regexPattern",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternAnyModelCreateObject = {
        serializedName: "PatternAnyModelCreateObject",
        type: {
            name: "Composite",
            className: "PatternAnyModelCreateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                explicitList: {
                    serializedName: "explicitList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExplicitListItemCreateObject = {
        serializedName: "ExplicitListItemCreateObject",
        type: {
            name: "Composite",
            className: "ExplicitListItemCreateObject",
            modelProperties: {
                explicitListItem: {
                    serializedName: "explicitListItem",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegexModelUpdateObject = {
        serializedName: "RegexModelUpdateObject",
        type: {
            name: "Composite",
            className: "RegexModelUpdateObject",
            modelProperties: {
                regexPattern: {
                    serializedName: "regexPattern",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternAnyModelUpdateObject = {
        serializedName: "PatternAnyModelUpdateObject",
        type: {
            name: "Composite",
            className: "PatternAnyModelUpdateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                explicitList: {
                    serializedName: "explicitList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EntityRoleUpdateObject = {
        serializedName: "EntityRoleUpdateObject",
        type: {
            name: "Composite",
            className: "EntityRoleUpdateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExplicitListItemUpdateObject = {
        serializedName: "ExplicitListItemUpdateObject",
        type: {
            name: "Composite",
            className: "ExplicitListItemUpdateObject",
            modelProperties: {
                explicitListItem: {
                    serializedName: "explicitListItem",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternRuleCreateObject = {
        serializedName: "PatternRuleCreateObject",
        type: {
            name: "Composite",
            className: "PatternRuleCreateObject",
            modelProperties: {
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                intent: {
                    serializedName: "intent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternRuleUpdateObject = {
        serializedName: "PatternRuleUpdateObject",
        type: {
            name: "Composite",
            className: "PatternRuleUpdateObject",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                intent: {
                    serializedName: "intent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegexEntityExtractor = {
        serializedName: "Regex Entity Extractor",
        type: {
            name: "Composite",
            className: "RegexEntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                regexPattern: {
                    serializedName: "regexPattern",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PatternAnyEntityExtractor = {
        serializedName: "Pattern.Any Entity Extractor",
        type: {
            name: "Composite",
            className: "PatternAnyEntityExtractor",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                typeId: {
                    serializedName: "typeId",
                    type: {
                        name: "Number"
                    }
                },
                readableType: {
                    required: true,
                    serializedName: "readableType",
                    type: {
                        name: "String"
                    }
                },
                roles: {
                    serializedName: "roles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                },
                explicitList: {
                    serializedName: "explicitList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExplicitListItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var PatternRuleInfo = {
        serializedName: "PatternRuleInfo",
        type: {
            name: "Composite",
            className: "PatternRuleInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "String"
                    }
                },
                intent: {
                    serializedName: "intent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LabelTextObject = {
        serializedName: "LabelTextObject",
        type: {
            name: "Composite",
            className: "LabelTextObject",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "Number"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppVersionSettingObject = {
        serializedName: "AppVersionSettingObject",
        type: {
            name: "Composite",
            className: "AppVersionSettingObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HierarchicalChildModelUpdateObject = {
        serializedName: "hierarchicalChildModelUpdateObject",
        type: {
            name: "Composite",
            className: "HierarchicalChildModelUpdateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HierarchicalChildModelCreateObject = {
        serializedName: "hierarchicalChildModelCreateObject",
        type: {
            name: "Composite",
            className: "HierarchicalChildModelCreateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CompositeChildModelCreateObject = {
        serializedName: "compositeChildModelCreateObject",
        type: {
            name: "Composite",
            className: "CompositeChildModelCreateObject",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        EntityLabelObject: EntityLabelObject,
        ApplicationCreateObject: ApplicationCreateObject,
        PrebuiltDomainCreateBaseObject: PrebuiltDomainCreateBaseObject,
        PrebuiltDomainCreateObject: PrebuiltDomainCreateObject,
        PrebuiltDomainModelCreateObject: PrebuiltDomainModelCreateObject,
        HierarchicalEntityModel: HierarchicalEntityModel,
        CompositeEntityModel: CompositeEntityModel,
        JSONEntity: JSONEntity,
        ApplicationSettingUpdateObject: ApplicationSettingUpdateObject,
        PublishSettingUpdateObject: PublishSettingUpdateObject,
        ExampleLabelObject: ExampleLabelObject,
        PhraselistCreateObject: PhraselistCreateObject,
        SubClosedList: SubClosedList,
        SubClosedListResponse: SubClosedListResponse,
        ApplicationUpdateObject: ApplicationUpdateObject,
        JSONRegexFeature: JSONRegexFeature,
        PatternUpdateObject: PatternUpdateObject,
        ClosedList: ClosedList,
        WordListObject: WordListObject,
        ClosedListModelPatchObject: ClosedListModelPatchObject,
        JSONModelFeature: JSONModelFeature,
        ModelCreateObject: ModelCreateObject,
        PatternCreateObject: PatternCreateObject,
        WordListBaseUpdateObject: WordListBaseUpdateObject,
        JSONUtterance: JSONUtterance,
        ModelUpdateObject: ModelUpdateObject,
        ClosedListModelUpdateObject: ClosedListModelUpdateObject,
        ClosedListModelCreateObject: ClosedListModelCreateObject,
        VersionInfo: VersionInfo,
        TaskUpdateObject: TaskUpdateObject,
        PhraselistUpdateObject: PhraselistUpdateObject,
        PrebuiltDomainObject: PrebuiltDomainObject,
        HierarchicalModel: HierarchicalModel,
        ApplicationPublishObject: ApplicationPublishObject,
        PatternAny: PatternAny,
        RegexEntity: RegexEntity,
        PrebuiltEntity: PrebuiltEntity,
        PatternRule: PatternRule,
        LuisApp: LuisApp,
        EntityLabel: EntityLabel,
        IntentPrediction: IntentPrediction,
        EntityPrediction: EntityPrediction,
        LabeledUtterance: LabeledUtterance,
        IntentsSuggestionExample: IntentsSuggestionExample,
        EntitiesSuggestionExample: EntitiesSuggestionExample,
        PersonalAssistantsResponse: PersonalAssistantsResponse,
        ModelInfo: ModelInfo,
        EntityRole: EntityRole,
        ChildEntity: ChildEntity,
        ExplicitListItem: ExplicitListItem,
        ModelInfoResponse: ModelInfoResponse,
        EntityModelInfo: EntityModelInfo,
        HierarchicalEntityExtractor: HierarchicalEntityExtractor,
        CompositeEntityExtractor: CompositeEntityExtractor,
        ClosedListEntityExtractor: ClosedListEntityExtractor,
        PrebuiltEntityExtractor: PrebuiltEntityExtractor,
        HierarchicalChildEntity: HierarchicalChildEntity,
        CustomPrebuiltModel: CustomPrebuiltModel,
        IntentClassifier: IntentClassifier,
        EntityExtractor: EntityExtractor,
        FeatureInfoObject: FeatureInfoObject,
        PhraseListFeatureInfo: PhraseListFeatureInfo,
        PatternFeatureInfo: PatternFeatureInfo,
        FeaturesResponseObject: FeaturesResponseObject,
        LabelExampleResponse: LabelExampleResponse,
        OperationStatus: OperationStatus,
        BatchLabelExample: BatchLabelExample,
        ApplicationInfoResponse: ApplicationInfoResponse,
        EndpointInfo: EndpointInfo,
        ProductionOrStagingEndpointInfo: ProductionOrStagingEndpointInfo,
        AvailableCulture: AvailableCulture,
        ApplicationSettings: ApplicationSettings,
        PublishSettings: PublishSettings,
        AvailablePrebuiltEntityModel: AvailablePrebuiltEntityModel,
        EnqueueTrainingResponse: EnqueueTrainingResponse,
        ModelTrainingDetails: ModelTrainingDetails,
        ModelTrainingInfo: ModelTrainingInfo,
        UserAccessList: UserAccessList,
        UserCollaborator: UserCollaborator,
        CollaboratorsArray: CollaboratorsArray,
        ErrorResponse: ErrorResponse,
        OperationError: OperationError,
        PrebuiltDomainItem: PrebuiltDomainItem,
        PrebuiltDomain: PrebuiltDomain,
        EntityRoleCreateObject: EntityRoleCreateObject,
        RegexModelCreateObject: RegexModelCreateObject,
        PatternAnyModelCreateObject: PatternAnyModelCreateObject,
        ExplicitListItemCreateObject: ExplicitListItemCreateObject,
        RegexModelUpdateObject: RegexModelUpdateObject,
        PatternAnyModelUpdateObject: PatternAnyModelUpdateObject,
        EntityRoleUpdateObject: EntityRoleUpdateObject,
        ExplicitListItemUpdateObject: ExplicitListItemUpdateObject,
        PatternRuleCreateObject: PatternRuleCreateObject,
        PatternRuleUpdateObject: PatternRuleUpdateObject,
        RegexEntityExtractor: RegexEntityExtractor,
        PatternAnyEntityExtractor: PatternAnyEntityExtractor,
        PatternRuleInfo: PatternRuleInfo,
        LabelTextObject: LabelTextObject,
        AppVersionSettingObject: AppVersionSettingObject,
        HierarchicalChildModelUpdateObject: HierarchicalChildModelUpdateObject,
        HierarchicalChildModelCreateObject: HierarchicalChildModelCreateObject,
        CompositeChildModelCreateObject: CompositeChildModelCreateObject
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        PhraselistCreateObject: PhraselistCreateObject,
        ErrorResponse: ErrorResponse,
        PhraseListFeatureInfo: PhraseListFeatureInfo,
        FeatureInfoObject: FeatureInfoObject,
        FeaturesResponseObject: FeaturesResponseObject,
        PatternFeatureInfo: PatternFeatureInfo,
        PhraselistUpdateObject: PhraselistUpdateObject,
        OperationStatus: OperationStatus
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var appId = {
        parameterPath: "appId",
        mapper: {
            required: true,
            serializedName: "appId",
            type: {
                name: "Uuid"
            }
        }
    };
    var appName = {
        parameterPath: [
            "options",
            "appName"
        ],
        mapper: {
            serializedName: "appName",
            type: {
                name: "String"
            }
        }
    };
    var cChildId = {
        parameterPath: "cChildId",
        mapper: {
            required: true,
            serializedName: "cChildId",
            type: {
                name: "Uuid"
            }
        }
    };
    var cEntityId = {
        parameterPath: "cEntityId",
        mapper: {
            required: true,
            serializedName: "cEntityId",
            type: {
                name: "Uuid"
            }
        }
    };
    var clEntityId = {
        parameterPath: "clEntityId",
        mapper: {
            required: true,
            serializedName: "clEntityId",
            type: {
                name: "Uuid"
            }
        }
    };
    var culture = {
        parameterPath: "culture",
        mapper: {
            required: true,
            serializedName: "culture",
            type: {
                name: "String"
            }
        }
    };
    var deleteUtterances = {
        parameterPath: [
            "options",
            "deleteUtterances"
        ],
        mapper: {
            serializedName: "deleteUtterances",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var domainName = {
        parameterPath: "domainName",
        mapper: {
            required: true,
            serializedName: "domainName",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var entityId = {
        parameterPath: "entityId",
        mapper: {
            required: true,
            serializedName: "entityId",
            type: {
                name: "Uuid"
            }
        }
    };
    var exampleId = {
        parameterPath: "exampleId",
        mapper: {
            required: true,
            serializedName: "exampleId",
            type: {
                name: "Number"
            }
        }
    };
    var hChildId = {
        parameterPath: "hChildId",
        mapper: {
            required: true,
            serializedName: "hChildId",
            type: {
                name: "Uuid"
            }
        }
    };
    var hEntityId = {
        parameterPath: "hEntityId",
        mapper: {
            required: true,
            serializedName: "hEntityId",
            type: {
                name: "Uuid"
            }
        }
    };
    var intentId = {
        parameterPath: "intentId",
        mapper: {
            required: true,
            serializedName: "intentId",
            type: {
                name: "Uuid"
            }
        }
    };
    var itemId = {
        parameterPath: "itemId",
        mapper: {
            required: true,
            serializedName: "itemId",
            type: {
                name: "Number"
            }
        }
    };
    var modelId = {
        parameterPath: "modelId",
        mapper: {
            required: true,
            serializedName: "modelId",
            type: {
                name: "String"
            }
        }
    };
    var patternId = {
        parameterPath: "patternId",
        mapper: {
            required: true,
            serializedName: "patternId",
            type: {
                name: "Uuid"
            }
        }
    };
    var phraselistId = {
        parameterPath: "phraselistId",
        mapper: {
            required: true,
            serializedName: "phraselistId",
            type: {
                name: "Number"
            }
        }
    };
    var prebuiltId = {
        parameterPath: "prebuiltId",
        mapper: {
            required: true,
            serializedName: "prebuiltId",
            type: {
                name: "Uuid"
            }
        }
    };
    var regexEntityId = {
        parameterPath: "regexEntityId",
        mapper: {
            required: true,
            serializedName: "regexEntityId",
            type: {
                name: "Uuid"
            }
        }
    };
    var roleId = {
        parameterPath: "roleId",
        mapper: {
            required: true,
            serializedName: "roleId",
            type: {
                name: "Uuid"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "skip",
            defaultValue: 0,
            constraints: {
                InclusiveMinimum: 0
            },
            type: {
                name: "Number"
            }
        }
    };
    var subListId = {
        parameterPath: "subListId",
        mapper: {
            required: true,
            serializedName: "subListId",
            type: {
                name: "Number"
            }
        }
    };
    var take = {
        parameterPath: [
            "options",
            "take"
        ],
        mapper: {
            serializedName: "take",
            defaultValue: 100,
            constraints: {
                InclusiveMaximum: 500,
                InclusiveMinimum: 0
            },
            type: {
                name: "Number"
            }
        }
    };
    var versionId0 = {
        parameterPath: "versionId",
        mapper: {
            required: true,
            serializedName: "versionId",
            type: {
                name: "String"
            }
        }
    };
    var versionId1 = {
        parameterPath: [
            "options",
            "versionId"
        ],
        mapper: {
            serializedName: "versionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Features. */
    var Features = /** @class */ (function () {
        /**
         * Create a Features.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Features(client) {
            this.client = client;
        }
        Features.prototype.addPhraseList = function (appId$$1, versionId, phraselistCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                phraselistCreateObject: phraselistCreateObject,
                options: options
            }, addPhraseListOperationSpec, callback);
        };
        Features.prototype.listPhraseLists = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listPhraseListsOperationSpec, callback);
        };
        Features.prototype.list = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listOperationSpec, callback);
        };
        Features.prototype.getPhraseList = function (appId$$1, versionId, phraselistId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                phraselistId: phraselistId$$1,
                options: options
            }, getPhraseListOperationSpec, callback);
        };
        Features.prototype.updatePhraseList = function (appId$$1, versionId, phraselistId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                phraselistId: phraselistId$$1,
                options: options
            }, updatePhraseListOperationSpec, callback);
        };
        Features.prototype.deletePhraseList = function (appId$$1, versionId, phraselistId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                phraselistId: phraselistId$$1,
                options: options
            }, deletePhraseListOperationSpec, callback);
        };
        return Features;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var addPhraseListOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/phraselists",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "phraselistCreateObject",
            mapper: __assign({}, PhraselistCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listPhraseListsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/phraselists",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PhraseListFeatureInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/features",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: FeaturesResponseObject
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getPhraseListOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            phraselistId
        ],
        responses: {
            200: {
                bodyMapper: PhraseListFeatureInfo
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var updatePhraseListOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            phraselistId
        ],
        requestBody: {
            parameterPath: [
                "options",
                "phraselistUpdateObject"
            ],
            mapper: PhraselistUpdateObject
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var deletePhraseListOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/phraselists/{phraselistId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            phraselistId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ExampleLabelObject: ExampleLabelObject,
        EntityLabelObject: EntityLabelObject,
        LabelExampleResponse: LabelExampleResponse,
        ErrorResponse: ErrorResponse,
        BatchLabelExample: BatchLabelExample,
        OperationStatus: OperationStatus,
        LabeledUtterance: LabeledUtterance,
        EntityLabel: EntityLabel,
        IntentPrediction: IntentPrediction,
        EntityPrediction: EntityPrediction
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Examples. */
    var Examples = /** @class */ (function () {
        /**
         * Create a Examples.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Examples(client) {
            this.client = client;
        }
        Examples.prototype.add = function (appId$$1, versionId, exampleLabelObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                exampleLabelObject: exampleLabelObject,
                options: options
            }, addOperationSpec, callback);
        };
        Examples.prototype.batch = function (appId$$1, versionId, exampleLabelObjectArray, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                exampleLabelObjectArray: exampleLabelObjectArray,
                options: options
            }, batchOperationSpec, callback);
        };
        Examples.prototype.list = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listOperationSpec$1, callback);
        };
        Examples.prototype.deleteMethod = function (appId$$1, versionId, exampleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                exampleId: exampleId$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        return Examples;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var addOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/example",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "exampleLabelObject",
            mapper: __assign({}, ExampleLabelObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: LabelExampleResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var batchOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/examples",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "exampleLabelObjectArray",
            mapper: {
                required: true,
                serializedName: "exampleLabelObjectArray",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExampleLabelObject"
                        }
                    }
                }
            }
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchLabelExample"
                            }
                        }
                    }
                }
            },
            207: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchLabelExample"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/examples",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LabeledUtterance"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/examples/{exampleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            exampleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ModelCreateObject: ModelCreateObject,
        IntentClassifier: IntentClassifier,
        ModelInfo: ModelInfo,
        ErrorResponse: ErrorResponse,
        EntityExtractor: EntityExtractor,
        EntityRole: EntityRole,
        HierarchicalEntityModel: HierarchicalEntityModel,
        HierarchicalEntityExtractor: HierarchicalEntityExtractor,
        ChildEntity: ChildEntity,
        CompositeEntityModel: CompositeEntityModel,
        CompositeEntityExtractor: CompositeEntityExtractor,
        ClosedListEntityExtractor: ClosedListEntityExtractor,
        SubClosedListResponse: SubClosedListResponse,
        SubClosedList: SubClosedList,
        ClosedListModelCreateObject: ClosedListModelCreateObject,
        WordListObject: WordListObject,
        PrebuiltEntityExtractor: PrebuiltEntityExtractor,
        AvailablePrebuiltEntityModel: AvailablePrebuiltEntityModel,
        ModelInfoResponse: ModelInfoResponse,
        ExplicitListItem: ExplicitListItem,
        LabelTextObject: LabelTextObject,
        ModelUpdateObject: ModelUpdateObject,
        OperationStatus: OperationStatus,
        ClosedListModelUpdateObject: ClosedListModelUpdateObject,
        ClosedListModelPatchObject: ClosedListModelPatchObject,
        WordListBaseUpdateObject: WordListBaseUpdateObject,
        IntentsSuggestionExample: IntentsSuggestionExample,
        IntentPrediction: IntentPrediction,
        EntityPrediction: EntityPrediction,
        EntitiesSuggestionExample: EntitiesSuggestionExample,
        PrebuiltDomainCreateBaseObject: PrebuiltDomainCreateBaseObject,
        PrebuiltDomainModelCreateObject: PrebuiltDomainModelCreateObject,
        CustomPrebuiltModel: CustomPrebuiltModel,
        HierarchicalChildEntity: HierarchicalChildEntity,
        HierarchicalChildModelUpdateObject: HierarchicalChildModelUpdateObject,
        HierarchicalChildModelCreateObject: HierarchicalChildModelCreateObject,
        CompositeChildModelCreateObject: CompositeChildModelCreateObject,
        RegexEntityExtractor: RegexEntityExtractor,
        RegexModelCreateObject: RegexModelCreateObject,
        PatternAnyEntityExtractor: PatternAnyEntityExtractor,
        PatternAnyModelCreateObject: PatternAnyModelCreateObject,
        EntityRoleCreateObject: EntityRoleCreateObject,
        ExplicitListItemCreateObject: ExplicitListItemCreateObject,
        RegexModelUpdateObject: RegexModelUpdateObject,
        PatternAnyModelUpdateObject: PatternAnyModelUpdateObject,
        EntityRoleUpdateObject: EntityRoleUpdateObject,
        ExplicitListItemUpdateObject: ExplicitListItemUpdateObject,
        EntityModelInfo: EntityModelInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Model. */
    var Model = /** @class */ (function () {
        /**
         * Create a Model.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Model(client) {
            this.client = client;
        }
        Model.prototype.addIntent = function (appId$$1, versionId, intentCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                intentCreateObject: intentCreateObject,
                options: options
            }, addIntentOperationSpec, callback);
        };
        Model.prototype.listIntents = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listIntentsOperationSpec, callback);
        };
        Model.prototype.addEntity = function (appId$$1, versionId, modelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                modelCreateObject: modelCreateObject,
                options: options
            }, addEntityOperationSpec, callback);
        };
        Model.prototype.listEntities = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listEntitiesOperationSpec, callback);
        };
        Model.prototype.addHierarchicalEntity = function (appId$$1, versionId, hierarchicalModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hierarchicalModelCreateObject: hierarchicalModelCreateObject,
                options: options
            }, addHierarchicalEntityOperationSpec, callback);
        };
        Model.prototype.listHierarchicalEntities = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listHierarchicalEntitiesOperationSpec, callback);
        };
        Model.prototype.addCompositeEntity = function (appId$$1, versionId, compositeModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                compositeModelCreateObject: compositeModelCreateObject,
                options: options
            }, addCompositeEntityOperationSpec, callback);
        };
        Model.prototype.listCompositeEntities = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listCompositeEntitiesOperationSpec, callback);
        };
        Model.prototype.listClosedLists = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listClosedListsOperationSpec, callback);
        };
        Model.prototype.addClosedList = function (appId$$1, versionId, closedListModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                closedListModelCreateObject: closedListModelCreateObject,
                options: options
            }, addClosedListOperationSpec, callback);
        };
        Model.prototype.addPrebuilt = function (appId$$1, versionId, prebuiltExtractorNames, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                prebuiltExtractorNames: prebuiltExtractorNames,
                options: options
            }, addPrebuiltOperationSpec, callback);
        };
        Model.prototype.listPrebuilts = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listPrebuiltsOperationSpec, callback);
        };
        Model.prototype.listPrebuiltEntities = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listPrebuiltEntitiesOperationSpec, callback);
        };
        Model.prototype.listModels = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listModelsOperationSpec, callback);
        };
        Model.prototype.examplesMethod = function (appId$$1, versionId, modelId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                modelId: modelId$$1,
                options: options
            }, examplesMethodOperationSpec, callback);
        };
        Model.prototype.getIntent = function (appId$$1, versionId, intentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                intentId: intentId$$1,
                options: options
            }, getIntentOperationSpec, callback);
        };
        Model.prototype.updateIntent = function (appId$$1, versionId, intentId$$1, modelUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                intentId: intentId$$1,
                modelUpdateObject: modelUpdateObject,
                options: options
            }, updateIntentOperationSpec, callback);
        };
        Model.prototype.deleteIntent = function (appId$$1, versionId, intentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                intentId: intentId$$1,
                options: options
            }, deleteIntentOperationSpec, callback);
        };
        Model.prototype.getEntity = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getEntityOperationSpec, callback);
        };
        Model.prototype.updateEntity = function (appId$$1, versionId, entityId$$1, modelUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                modelUpdateObject: modelUpdateObject,
                options: options
            }, updateEntityOperationSpec, callback);
        };
        Model.prototype.deleteEntity = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, deleteEntityOperationSpec, callback);
        };
        Model.prototype.getHierarchicalEntity = function (appId$$1, versionId, hEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                options: options
            }, getHierarchicalEntityOperationSpec, callback);
        };
        Model.prototype.updateHierarchicalEntity = function (appId$$1, versionId, hEntityId$$1, hierarchicalModelUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                hierarchicalModelUpdateObject: hierarchicalModelUpdateObject,
                options: options
            }, updateHierarchicalEntityOperationSpec, callback);
        };
        Model.prototype.deleteHierarchicalEntity = function (appId$$1, versionId, hEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                options: options
            }, deleteHierarchicalEntityOperationSpec, callback);
        };
        Model.prototype.getCompositeEntity = function (appId$$1, versionId, cEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                options: options
            }, getCompositeEntityOperationSpec, callback);
        };
        Model.prototype.updateCompositeEntity = function (appId$$1, versionId, cEntityId$$1, compositeModelUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                compositeModelUpdateObject: compositeModelUpdateObject,
                options: options
            }, updateCompositeEntityOperationSpec, callback);
        };
        Model.prototype.deleteCompositeEntity = function (appId$$1, versionId, cEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                options: options
            }, deleteCompositeEntityOperationSpec, callback);
        };
        Model.prototype.getClosedList = function (appId$$1, versionId, clEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                options: options
            }, getClosedListOperationSpec, callback);
        };
        Model.prototype.updateClosedList = function (appId$$1, versionId, clEntityId$$1, closedListModelUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                closedListModelUpdateObject: closedListModelUpdateObject,
                options: options
            }, updateClosedListOperationSpec, callback);
        };
        Model.prototype.patchClosedList = function (appId$$1, versionId, clEntityId$$1, closedListModelPatchObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                closedListModelPatchObject: closedListModelPatchObject,
                options: options
            }, patchClosedListOperationSpec, callback);
        };
        Model.prototype.deleteClosedList = function (appId$$1, versionId, clEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                options: options
            }, deleteClosedListOperationSpec, callback);
        };
        Model.prototype.getPrebuilt = function (appId$$1, versionId, prebuiltId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                prebuiltId: prebuiltId$$1,
                options: options
            }, getPrebuiltOperationSpec, callback);
        };
        Model.prototype.deletePrebuilt = function (appId$$1, versionId, prebuiltId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                prebuiltId: prebuiltId$$1,
                options: options
            }, deletePrebuiltOperationSpec, callback);
        };
        Model.prototype.deleteSubList = function (appId$$1, versionId, clEntityId$$1, subListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                subListId: subListId$$1,
                options: options
            }, deleteSubListOperationSpec, callback);
        };
        Model.prototype.updateSubList = function (appId$$1, versionId, clEntityId$$1, subListId$$1, wordListBaseUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                subListId: subListId$$1,
                wordListBaseUpdateObject: wordListBaseUpdateObject,
                options: options
            }, updateSubListOperationSpec, callback);
        };
        Model.prototype.getIntentSuggestions = function (appId$$1, versionId, intentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                intentId: intentId$$1,
                options: options
            }, getIntentSuggestionsOperationSpec, callback);
        };
        Model.prototype.getEntitySuggestions = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getEntitySuggestionsOperationSpec, callback);
        };
        Model.prototype.addSubList = function (appId$$1, versionId, clEntityId$$1, wordListCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                clEntityId: clEntityId$$1,
                wordListCreateObject: wordListCreateObject,
                options: options
            }, addSubListOperationSpec, callback);
        };
        Model.prototype.addCustomPrebuiltDomain = function (appId$$1, versionId, prebuiltDomainObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                prebuiltDomainObject: prebuiltDomainObject,
                options: options
            }, addCustomPrebuiltDomainOperationSpec, callback);
        };
        Model.prototype.addCustomPrebuiltIntent = function (appId$$1, versionId, prebuiltDomainModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                prebuiltDomainModelCreateObject: prebuiltDomainModelCreateObject,
                options: options
            }, addCustomPrebuiltIntentOperationSpec, callback);
        };
        Model.prototype.listCustomPrebuiltIntents = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listCustomPrebuiltIntentsOperationSpec, callback);
        };
        Model.prototype.addCustomPrebuiltEntity = function (appId$$1, versionId, prebuiltDomainModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                prebuiltDomainModelCreateObject: prebuiltDomainModelCreateObject,
                options: options
            }, addCustomPrebuiltEntityOperationSpec, callback);
        };
        Model.prototype.listCustomPrebuiltEntities = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listCustomPrebuiltEntitiesOperationSpec, callback);
        };
        Model.prototype.listCustomPrebuiltModels = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listCustomPrebuiltModelsOperationSpec, callback);
        };
        Model.prototype.deleteCustomPrebuiltDomain = function (appId$$1, versionId, domainName$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                domainName: domainName$$1,
                options: options
            }, deleteCustomPrebuiltDomainOperationSpec, callback);
        };
        Model.prototype.getHierarchicalEntityChild = function (appId$$1, versionId, hEntityId$$1, hChildId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                hChildId: hChildId$$1,
                options: options
            }, getHierarchicalEntityChildOperationSpec, callback);
        };
        Model.prototype.updateHierarchicalEntityChild = function (appId$$1, versionId, hEntityId$$1, hChildId$$1, hierarchicalChildModelUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                hChildId: hChildId$$1,
                hierarchicalChildModelUpdateObject: hierarchicalChildModelUpdateObject,
                options: options
            }, updateHierarchicalEntityChildOperationSpec, callback);
        };
        Model.prototype.deleteHierarchicalEntityChild = function (appId$$1, versionId, hEntityId$$1, hChildId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                hChildId: hChildId$$1,
                options: options
            }, deleteHierarchicalEntityChildOperationSpec, callback);
        };
        Model.prototype.addHierarchicalEntityChild = function (appId$$1, versionId, hEntityId$$1, hierarchicalChildModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                hierarchicalChildModelCreateObject: hierarchicalChildModelCreateObject,
                options: options
            }, addHierarchicalEntityChildOperationSpec, callback);
        };
        Model.prototype.addCompositeEntityChild = function (appId$$1, versionId, cEntityId$$1, compositeChildModelCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                compositeChildModelCreateObject: compositeChildModelCreateObject,
                options: options
            }, addCompositeEntityChildOperationSpec, callback);
        };
        Model.prototype.deleteCompositeEntityChild = function (appId$$1, versionId, cEntityId$$1, cChildId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                cChildId: cChildId$$1,
                options: options
            }, deleteCompositeEntityChildOperationSpec, callback);
        };
        Model.prototype.getRegexEntityInfos = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, getRegexEntityInfosOperationSpec, callback);
        };
        Model.prototype.createRegexEntityModel = function (appId$$1, versionId, regexEntityExtractorCreateObj, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                regexEntityExtractorCreateObj: regexEntityExtractorCreateObj,
                options: options
            }, createRegexEntityModelOperationSpec, callback);
        };
        Model.prototype.getPatternAnyEntityInfos = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, getPatternAnyEntityInfosOperationSpec, callback);
        };
        Model.prototype.createPatternAnyEntityModel = function (appId$$1, versionId, extractorCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                extractorCreateObject: extractorCreateObject,
                options: options
            }, createPatternAnyEntityModelOperationSpec, callback);
        };
        Model.prototype.getEntityRoles = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getEntityRolesOperationSpec, callback);
        };
        Model.prototype.createEntityRole = function (appId$$1, versionId, entityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createEntityRoleOperationSpec, callback);
        };
        Model.prototype.getPrebuiltEntityRoles = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getPrebuiltEntityRolesOperationSpec, callback);
        };
        Model.prototype.createPrebuiltEntityRole = function (appId$$1, versionId, entityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createPrebuiltEntityRoleOperationSpec, callback);
        };
        Model.prototype.getClosedListEntityRoles = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getClosedListEntityRolesOperationSpec, callback);
        };
        Model.prototype.createClosedListEntityRole = function (appId$$1, versionId, entityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createClosedListEntityRoleOperationSpec, callback);
        };
        Model.prototype.getRegexEntityRoles = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getRegexEntityRolesOperationSpec, callback);
        };
        Model.prototype.createRegexEntityRole = function (appId$$1, versionId, entityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createRegexEntityRoleOperationSpec, callback);
        };
        Model.prototype.getCompositeEntityRoles = function (appId$$1, versionId, cEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                options: options
            }, getCompositeEntityRolesOperationSpec, callback);
        };
        Model.prototype.createCompositeEntityRole = function (appId$$1, versionId, cEntityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createCompositeEntityRoleOperationSpec, callback);
        };
        Model.prototype.getPatternAnyEntityRoles = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getPatternAnyEntityRolesOperationSpec, callback);
        };
        Model.prototype.createPatternAnyEntityRole = function (appId$$1, versionId, entityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createPatternAnyEntityRoleOperationSpec, callback);
        };
        Model.prototype.getHierarchicalEntityRoles = function (appId$$1, versionId, hEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                options: options
            }, getHierarchicalEntityRolesOperationSpec, callback);
        };
        Model.prototype.createHierarchicalEntityRole = function (appId$$1, versionId, hEntityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createHierarchicalEntityRoleOperationSpec, callback);
        };
        Model.prototype.getCustomPrebuiltEntityRoles = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getCustomPrebuiltEntityRolesOperationSpec, callback);
        };
        Model.prototype.createCustomPrebuiltEntityRole = function (appId$$1, versionId, entityId$$1, entityRoleCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                entityRoleCreateObject: entityRoleCreateObject,
                options: options
            }, createCustomPrebuiltEntityRoleOperationSpec, callback);
        };
        Model.prototype.getExplicitList = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getExplicitListOperationSpec, callback);
        };
        Model.prototype.addExplicitListItem = function (appId$$1, versionId, entityId$$1, item, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                item: item,
                options: options
            }, addExplicitListItemOperationSpec, callback);
        };
        Model.prototype.getRegexEntityEntityInfo = function (appId$$1, versionId, regexEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                regexEntityId: regexEntityId$$1,
                options: options
            }, getRegexEntityEntityInfoOperationSpec, callback);
        };
        Model.prototype.updateRegexEntityModel = function (appId$$1, versionId, regexEntityId$$1, regexEntityUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                regexEntityId: regexEntityId$$1,
                regexEntityUpdateObject: regexEntityUpdateObject,
                options: options
            }, updateRegexEntityModelOperationSpec, callback);
        };
        Model.prototype.deleteRegexEntityModel = function (appId$$1, versionId, regexEntityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                regexEntityId: regexEntityId$$1,
                options: options
            }, deleteRegexEntityModelOperationSpec, callback);
        };
        Model.prototype.getPatternAnyEntityInfo = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, getPatternAnyEntityInfoOperationSpec, callback);
        };
        Model.prototype.updatePatternAnyEntityModel = function (appId$$1, versionId, entityId$$1, patternAnyUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                patternAnyUpdateObject: patternAnyUpdateObject,
                options: options
            }, updatePatternAnyEntityModelOperationSpec, callback);
        };
        Model.prototype.deletePatternAnyEntityModel = function (appId$$1, versionId, entityId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                options: options
            }, deletePatternAnyEntityModelOperationSpec, callback);
        };
        Model.prototype.getEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, getEntityRoleOperationSpec, callback);
        };
        Model.prototype.updateEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updateEntityRoleOperationSpec, callback);
        };
        Model.prototype.deleteEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, deleteEntityRoleOperationSpec, callback);
        };
        Model.prototype.getPrebuiltEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, getPrebuiltEntityRoleOperationSpec, callback);
        };
        Model.prototype.updatePrebuiltEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updatePrebuiltEntityRoleOperationSpec, callback);
        };
        Model.prototype.deletePrebuiltEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, deletePrebuiltEntityRoleOperationSpec, callback);
        };
        Model.prototype.getClosedListEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, getClosedListEntityRoleOperationSpec, callback);
        };
        Model.prototype.updateClosedListEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updateClosedListEntityRoleOperationSpec, callback);
        };
        Model.prototype.deleteClosedListEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, deleteClosedListEntityRoleOperationSpec, callback);
        };
        Model.prototype.getRegexEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, getRegexEntityRoleOperationSpec, callback);
        };
        Model.prototype.updateRegexEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updateRegexEntityRoleOperationSpec, callback);
        };
        Model.prototype.deleteRegexEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, deleteRegexEntityRoleOperationSpec, callback);
        };
        Model.prototype.getCompositeEntityRole = function (appId$$1, versionId, cEntityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                roleId: roleId$$1,
                options: options
            }, getCompositeEntityRoleOperationSpec, callback);
        };
        Model.prototype.updateCompositeEntityRole = function (appId$$1, versionId, cEntityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updateCompositeEntityRoleOperationSpec, callback);
        };
        Model.prototype.deleteCompositeEntityRole = function (appId$$1, versionId, cEntityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                cEntityId: cEntityId$$1,
                roleId: roleId$$1,
                options: options
            }, deleteCompositeEntityRoleOperationSpec, callback);
        };
        Model.prototype.getPatternAnyEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, getPatternAnyEntityRoleOperationSpec, callback);
        };
        Model.prototype.updatePatternAnyEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updatePatternAnyEntityRoleOperationSpec, callback);
        };
        Model.prototype.deletePatternAnyEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, deletePatternAnyEntityRoleOperationSpec, callback);
        };
        Model.prototype.getHierarchicalEntityRole = function (appId$$1, versionId, hEntityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                roleId: roleId$$1,
                options: options
            }, getHierarchicalEntityRoleOperationSpec, callback);
        };
        Model.prototype.updateHierarchicalEntityRole = function (appId$$1, versionId, hEntityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updateHierarchicalEntityRoleOperationSpec, callback);
        };
        Model.prototype.deleteHierarchicalEntityRole = function (appId$$1, versionId, hEntityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                hEntityId: hEntityId$$1,
                roleId: roleId$$1,
                options: options
            }, deleteHierarchicalEntityRoleOperationSpec, callback);
        };
        Model.prototype.getCustomEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, getCustomEntityRoleOperationSpec, callback);
        };
        Model.prototype.updateCustomPrebuiltEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, entityRoleUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                entityRoleUpdateObject: entityRoleUpdateObject,
                options: options
            }, updateCustomPrebuiltEntityRoleOperationSpec, callback);
        };
        Model.prototype.deleteCustomEntityRole = function (appId$$1, versionId, entityId$$1, roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                roleId: roleId$$1,
                options: options
            }, deleteCustomEntityRoleOperationSpec, callback);
        };
        Model.prototype.getExplicitListItem = function (appId$$1, versionId, entityId$$1, itemId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                itemId: itemId$$1,
                options: options
            }, getExplicitListItemOperationSpec, callback);
        };
        Model.prototype.updateExplicitListItem = function (appId$$1, versionId, entityId$$1, itemId$$1, item, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                itemId: itemId$$1,
                item: item,
                options: options
            }, updateExplicitListItemOperationSpec, callback);
        };
        Model.prototype.deleteExplicitListItem = function (appId$$1, versionId, entityId$$1, itemId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                entityId: entityId$$1,
                itemId: itemId$$1,
                options: options
            }, deleteExplicitListItemOperationSpec, callback);
        };
        return Model;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var addIntentOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/intents",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "intentCreateObject",
            mapper: __assign({}, ModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {}
        },
        serializer: serializer$2
    };
    var listIntentsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/intents",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentClassifier"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addEntityOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/entities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "modelCreateObject",
            mapper: __assign({}, ModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listEntitiesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/entities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addHierarchicalEntityOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "hierarchicalModelCreateObject",
            mapper: __assign({}, HierarchicalEntityModel, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listHierarchicalEntitiesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HierarchicalEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addCompositeEntityOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/compositeentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "compositeModelCreateObject",
            mapper: __assign({}, CompositeEntityModel, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listCompositeEntitiesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/compositeentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CompositeEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listClosedListsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/closedlists",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClosedListEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addClosedListOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/closedlists",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "closedListModelCreateObject",
            mapper: __assign({}, ClosedListModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addPrebuiltOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/prebuilts",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "prebuiltExtractorNames",
            mapper: {
                required: true,
                serializedName: "prebuiltExtractorNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listPrebuiltsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/prebuilts",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listPrebuiltEntitiesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/listprebuilts",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailablePrebuiltEntityModel"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listModelsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/models",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ModelInfoResponse"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var examplesMethodOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/models/{modelId}/examples",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            modelId
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LabelTextObject"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getIntentOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            intentId
        ],
        responses: {
            200: {
                bodyMapper: IntentClassifier
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateIntentOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            intentId
        ],
        requestBody: {
            parameterPath: "modelUpdateObject",
            mapper: __assign({}, ModelUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteIntentOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/intents/{intentId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            intentId
        ],
        queryParameters: [
            deleteUtterances
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getEntityOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: EntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateEntityOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "modelUpdateObject",
            mapper: __assign({}, ModelUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteEntityOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getHierarchicalEntityOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId
        ],
        responses: {
            200: {
                bodyMapper: HierarchicalEntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateHierarchicalEntityOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId
        ],
        requestBody: {
            parameterPath: "hierarchicalModelUpdateObject",
            mapper: __assign({}, HierarchicalEntityModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteHierarchicalEntityOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getCompositeEntityOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId
        ],
        responses: {
            200: {
                bodyMapper: CompositeEntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateCompositeEntityOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId
        ],
        requestBody: {
            parameterPath: "compositeModelUpdateObject",
            mapper: __assign({}, CompositeEntityModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteCompositeEntityOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getClosedListOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId
        ],
        responses: {
            200: {
                bodyMapper: ClosedListEntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateClosedListOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId
        ],
        requestBody: {
            parameterPath: "closedListModelUpdateObject",
            mapper: __assign({}, ClosedListModelUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var patchClosedListOperationSpec = {
        httpMethod: "PATCH",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId
        ],
        requestBody: {
            parameterPath: "closedListModelPatchObject",
            mapper: __assign({}, ClosedListModelPatchObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteClosedListOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPrebuiltOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            prebuiltId
        ],
        responses: {
            200: {
                bodyMapper: PrebuiltEntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deletePrebuiltOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            prebuiltId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteSubListOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId,
            subListId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateSubListOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId,
            subListId
        ],
        requestBody: {
            parameterPath: "wordListBaseUpdateObject",
            mapper: __assign({}, WordListBaseUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getIntentSuggestionsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/intents/{intentId}/suggest",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            intentId
        ],
        queryParameters: [
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentsSuggestionExample"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getEntitySuggestionsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}/suggest",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        queryParameters: [
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntitiesSuggestionExample"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addSubListOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            clEntityId
        ],
        requestBody: {
            parameterPath: "wordListCreateObject",
            mapper: __assign({}, WordListObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addCustomPrebuiltDomainOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/customprebuiltdomains",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "prebuiltDomainObject",
            mapper: __assign({}, PrebuiltDomainCreateBaseObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addCustomPrebuiltIntentOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "prebuiltDomainModelCreateObject",
            mapper: __assign({}, PrebuiltDomainModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listCustomPrebuiltIntentsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/customprebuiltintents",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntentClassifier"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addCustomPrebuiltEntityOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "prebuiltDomainModelCreateObject",
            mapper: __assign({}, PrebuiltDomainModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listCustomPrebuiltEntitiesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listCustomPrebuiltModelsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/customprebuiltmodels",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CustomPrebuiltModel"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteCustomPrebuiltDomainOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            domainName
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getHierarchicalEntityChildOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId,
            hChildId
        ],
        responses: {
            200: {
                bodyMapper: HierarchicalChildEntity
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateHierarchicalEntityChildOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId,
            hChildId
        ],
        requestBody: {
            parameterPath: "hierarchicalChildModelUpdateObject",
            mapper: __assign({}, HierarchicalChildModelUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteHierarchicalEntityChildOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId,
            hChildId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addHierarchicalEntityChildOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId
        ],
        requestBody: {
            parameterPath: "hierarchicalChildModelCreateObject",
            mapper: __assign({}, HierarchicalChildModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addCompositeEntityChildOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId
        ],
        requestBody: {
            parameterPath: "compositeChildModelCreateObject",
            mapper: __assign({}, CompositeChildModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteCompositeEntityChildOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId,
            cChildId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getRegexEntityInfosOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/regexentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegexEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createRegexEntityModelOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/regexentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "regexEntityExtractorCreateObj",
            mapper: __assign({}, RegexModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPatternAnyEntityInfosOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternanyentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternAnyEntityExtractor"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createPatternAnyEntityModelOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/patternanyentities",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "extractorCreateObject",
            mapper: __assign({}, PatternAnyModelCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPrebuiltEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createPrebuiltEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getClosedListEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createClosedListEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getRegexEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createRegexEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getCompositeEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createCompositeEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPatternAnyEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createPatternAnyEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getHierarchicalEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createHierarchicalEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getCustomPrebuiltEntityRolesOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRole"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createCustomPrebuiltEntityRoleOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "entityRoleCreateObject",
            mapper: __assign({}, EntityRoleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getExplicitListOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExplicitListItem"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addExplicitListItemOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "item",
            mapper: __assign({}, ExplicitListItemCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getRegexEntityEntityInfoOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            regexEntityId
        ],
        responses: {
            200: {
                bodyMapper: RegexEntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateRegexEntityModelOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            regexEntityId
        ],
        requestBody: {
            parameterPath: "regexEntityUpdateObject",
            mapper: __assign({}, RegexModelUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteRegexEntityModelOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            regexEntityId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPatternAnyEntityInfoOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: PatternAnyEntityExtractor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updatePatternAnyEntityModelOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        requestBody: {
            parameterPath: "patternAnyUpdateObject",
            mapper: __assign({}, PatternAnyModelUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deletePatternAnyEntityModelOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPrebuiltEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updatePrebuiltEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deletePrebuiltEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getClosedListEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateClosedListEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteClosedListEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getRegexEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateRegexEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteRegexEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getCompositeEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateCompositeEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteCompositeEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            cEntityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getPatternAnyEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updatePatternAnyEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deletePatternAnyEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getHierarchicalEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateHierarchicalEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteHierarchicalEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            hEntityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getCustomEntityRoleOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: EntityRole
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateCustomPrebuiltEntityRoleOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        requestBody: {
            parameterPath: "entityRoleUpdateObject",
            mapper: __assign({}, EntityRoleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteCustomEntityRoleOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            roleId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getExplicitListItemOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            itemId
        ],
        responses: {
            200: {
                bodyMapper: ExplicitListItem
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateExplicitListItemOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            itemId
        ],
        requestBody: {
            parameterPath: "item",
            mapper: __assign({}, ExplicitListItemUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteExplicitListItemOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            entityId,
            itemId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ApplicationCreateObject: ApplicationCreateObject,
        ErrorResponse: ErrorResponse,
        ApplicationInfoResponse: ApplicationInfoResponse,
        LuisApp: LuisApp,
        HierarchicalModel: HierarchicalModel,
        PrebuiltDomainObject: PrebuiltDomainObject,
        ClosedList: ClosedList,
        SubClosedList: SubClosedList,
        PatternAny: PatternAny,
        RegexEntity: RegexEntity,
        PrebuiltEntity: PrebuiltEntity,
        JSONRegexFeature: JSONRegexFeature,
        JSONModelFeature: JSONModelFeature,
        PatternRule: PatternRule,
        JSONUtterance: JSONUtterance,
        JSONEntity: JSONEntity,
        PersonalAssistantsResponse: PersonalAssistantsResponse,
        AvailableCulture: AvailableCulture,
        ApplicationUpdateObject: ApplicationUpdateObject,
        OperationStatus: OperationStatus,
        ApplicationPublishObject: ApplicationPublishObject,
        ProductionOrStagingEndpointInfo: ProductionOrStagingEndpointInfo,
        EndpointInfo: EndpointInfo,
        ApplicationSettings: ApplicationSettings,
        ApplicationSettingUpdateObject: ApplicationSettingUpdateObject,
        PublishSettings: PublishSettings,
        PublishSettingUpdateObject: PublishSettingUpdateObject,
        PrebuiltDomain: PrebuiltDomain,
        PrebuiltDomainItem: PrebuiltDomainItem,
        PrebuiltDomainCreateObject: PrebuiltDomainCreateObject,
        SubClosedListResponse: SubClosedListResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Apps. */
    var Apps = /** @class */ (function () {
        /**
         * Create a Apps.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Apps(client) {
            this.client = client;
        }
        Apps.prototype.add = function (applicationCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                applicationCreateObject: applicationCreateObject,
                options: options
            }, addOperationSpec$1, callback);
        };
        Apps.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Apps.prototype.importMethod = function (luisApp, options, callback) {
            return this.client.sendOperationRequest({
                luisApp: luisApp,
                options: options
            }, importMethodOperationSpec, callback);
        };
        Apps.prototype.listCortanaEndpoints = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listCortanaEndpointsOperationSpec, callback);
        };
        Apps.prototype.listDomains = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listDomainsOperationSpec, callback);
        };
        Apps.prototype.listUsageScenarios = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listUsageScenariosOperationSpec, callback);
        };
        Apps.prototype.listSupportedCultures = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listSupportedCulturesOperationSpec, callback);
        };
        Apps.prototype.downloadQueryLogs = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, downloadQueryLogsOperationSpec, callback);
        };
        Apps.prototype.get = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Apps.prototype.update = function (appId$$1, applicationUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                applicationUpdateObject: applicationUpdateObject,
                options: options
            }, updateOperationSpec, callback);
        };
        Apps.prototype.deleteMethod = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Apps.prototype.publish = function (appId$$1, applicationPublishObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                applicationPublishObject: applicationPublishObject,
                options: options
            }, publishOperationSpec, callback);
        };
        Apps.prototype.getSettings = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, getSettingsOperationSpec, callback);
        };
        Apps.prototype.updateSettings = function (appId$$1, applicationSettingUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                applicationSettingUpdateObject: applicationSettingUpdateObject,
                options: options
            }, updateSettingsOperationSpec, callback);
        };
        Apps.prototype.getPublishSettings = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, getPublishSettingsOperationSpec, callback);
        };
        Apps.prototype.updatePublishSettings = function (appId$$1, publishSettingUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                publishSettingUpdateObject: publishSettingUpdateObject,
                options: options
            }, updatePublishSettingsOperationSpec, callback);
        };
        Apps.prototype.listEndpoints = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, listEndpointsOperationSpec, callback);
        };
        Apps.prototype.listAvailableCustomPrebuiltDomains = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAvailableCustomPrebuiltDomainsOperationSpec, callback);
        };
        Apps.prototype.addCustomPrebuiltDomain = function (prebuiltDomainCreateObject, options, callback) {
            return this.client.sendOperationRequest({
                prebuiltDomainCreateObject: prebuiltDomainCreateObject,
                options: options
            }, addCustomPrebuiltDomainOperationSpec$1, callback);
        };
        Apps.prototype.listAvailableCustomPrebuiltDomainsForCulture = function (culture$$1, options, callback) {
            return this.client.sendOperationRequest({
                culture: culture$$1,
                options: options
            }, listAvailableCustomPrebuiltDomainsForCultureOperationSpec, callback);
        };
        return Apps;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var addOperationSpec$1 = {
        httpMethod: "POST",
        path: "apps/",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "applicationCreateObject",
            mapper: __assign({}, ApplicationCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "apps/",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInfoResponse"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var importMethodOperationSpec = {
        httpMethod: "POST",
        path: "apps/import",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            appName
        ],
        requestBody: {
            parameterPath: "luisApp",
            mapper: __assign({}, LuisApp, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listCortanaEndpointsOperationSpec = {
        httpMethod: "GET",
        path: "apps/assistants",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: PersonalAssistantsResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listDomainsOperationSpec = {
        httpMethod: "GET",
        path: "apps/domains",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listUsageScenariosOperationSpec = {
        httpMethod: "GET",
        path: "apps/usagescenarios",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listSupportedCulturesOperationSpec = {
        httpMethod: "GET",
        path: "apps/cultures",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableCulture"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var downloadQueryLogsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/querylogs",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {}
        },
        serializer: serializer$3
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInfoResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "applicationUpdateObject",
            mapper: __assign({}, ApplicationUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "apps/{appId}",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var publishOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/publish",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "applicationPublishObject",
            mapper: __assign({}, ApplicationPublishObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ProductionOrStagingEndpointInfo
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getSettingsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/settings",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: ApplicationSettings
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updateSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/settings",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "applicationSettingUpdateObject",
            mapper: __assign({}, ApplicationSettingUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getPublishSettingsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/publishsettings",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: PublishSettings
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updatePublishSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/publishsettings",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "publishSettingUpdateObject",
            mapper: __assign({}, PublishSettingUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listEndpointsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/endpoints",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listAvailableCustomPrebuiltDomainsOperationSpec = {
        httpMethod: "GET",
        path: "apps/customprebuiltdomains",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltDomain"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var addCustomPrebuiltDomainOperationSpec$1 = {
        httpMethod: "POST",
        path: "apps/customprebuiltdomains",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: "prebuiltDomainCreateObject",
            mapper: __assign({}, PrebuiltDomainCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Uuid"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listAvailableCustomPrebuiltDomainsForCultureOperationSpec = {
        httpMethod: "GET",
        path: "apps/customprebuiltdomains/{culture}",
        urlParameters: [
            endpoint,
            culture
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrebuiltDomain"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        TaskUpdateObject: TaskUpdateObject,
        ErrorResponse: ErrorResponse,
        VersionInfo: VersionInfo,
        OperationStatus: OperationStatus,
        LuisApp: LuisApp,
        HierarchicalModel: HierarchicalModel,
        PrebuiltDomainObject: PrebuiltDomainObject,
        ClosedList: ClosedList,
        SubClosedList: SubClosedList,
        PatternAny: PatternAny,
        RegexEntity: RegexEntity,
        PrebuiltEntity: PrebuiltEntity,
        JSONRegexFeature: JSONRegexFeature,
        JSONModelFeature: JSONModelFeature,
        PatternRule: PatternRule,
        JSONUtterance: JSONUtterance,
        JSONEntity: JSONEntity,
        SubClosedListResponse: SubClosedListResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Versions. */
    var Versions = /** @class */ (function () {
        /**
         * Create a Versions.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Versions(client) {
            this.client = client;
        }
        Versions.prototype.clone = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, cloneOperationSpec, callback);
        };
        Versions.prototype.list = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        Versions.prototype.get = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, getOperationSpec$1, callback);
        };
        Versions.prototype.update = function (appId$$1, versionId, versionUpdateObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                versionUpdateObject: versionUpdateObject,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Versions.prototype.deleteMethod = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Versions.prototype.exportMethod = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, exportMethodOperationSpec, callback);
        };
        Versions.prototype.importMethod = function (appId$$1, luisApp, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                luisApp: luisApp,
                options: options
            }, importMethodOperationSpec$1, callback);
        };
        Versions.prototype.deleteUnlabelledUtterance = function (appId$$1, versionId, utterance, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                utterance: utterance,
                options: options
            }, deleteUnlabelledUtteranceOperationSpec, callback);
        };
        return Versions;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var cloneOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/clone",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: [
                "options",
                "versionCloneObject"
            ],
            mapper: TaskUpdateObject
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "apps/{appId}/versions",
        urlParameters: [
            endpoint,
            appId
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VersionInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: VersionInfo
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "versionUpdateObject",
            mapper: __assign({}, TaskUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var exportMethodOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/export",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: LuisApp
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var importMethodOperationSpec$1 = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/import",
        urlParameters: [
            endpoint,
            appId
        ],
        queryParameters: [
            versionId1
        ],
        requestBody: {
            parameterPath: "luisApp",
            mapper: __assign({}, LuisApp, { required: true })
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var deleteUnlabelledUtteranceOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/suggest",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "utterance",
            mapper: {
                required: true,
                serializedName: "utterance",
                type: {
                    name: "String"
                }
            }
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        EnqueueTrainingResponse: EnqueueTrainingResponse,
        ErrorResponse: ErrorResponse,
        ModelTrainingInfo: ModelTrainingInfo,
        ModelTrainingDetails: ModelTrainingDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Train. */
    var Train = /** @class */ (function () {
        /**
         * Create a Train.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Train(client) {
            this.client = client;
        }
        Train.prototype.trainVersion = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, trainVersionOperationSpec, callback);
        };
        Train.prototype.getStatus = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, getStatusOperationSpec, callback);
        };
        return Train;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var trainVersionOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/train",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            202: {
                bodyMapper: EnqueueTrainingResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getStatusOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/train",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ModelTrainingInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        UserAccessList: UserAccessList,
        ErrorResponse: ErrorResponse,
        UserCollaborator: UserCollaborator,
        OperationStatus: OperationStatus,
        CollaboratorsArray: CollaboratorsArray
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Permissions. */
    var Permissions = /** @class */ (function () {
        /**
         * Create a Permissions.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Permissions(client) {
            this.client = client;
        }
        Permissions.prototype.list = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        Permissions.prototype.add = function (appId$$1, userToAdd, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                userToAdd: userToAdd,
                options: options
            }, addOperationSpec$2, callback);
        };
        Permissions.prototype.deleteMethod = function (appId$$1, userToDelete, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                userToDelete: userToDelete,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Permissions.prototype.update = function (appId$$1, collaborators, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                collaborators: collaborators,
                options: options
            }, updateOperationSpec$2, callback);
        };
        return Permissions;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "apps/{appId}/permissions",
        urlParameters: [
            endpoint,
            appId
        ],
        responses: {
            200: {
                bodyMapper: UserAccessList
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var addOperationSpec$2 = {
        httpMethod: "POST",
        path: "apps/{appId}/permissions",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "userToAdd",
            mapper: __assign({}, UserCollaborator, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "apps/{appId}/permissions",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "userToDelete",
            mapper: __assign({}, UserCollaborator, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "apps/{appId}/permissions",
        urlParameters: [
            endpoint,
            appId
        ],
        requestBody: {
            parameterPath: "collaborators",
            mapper: __assign({}, CollaboratorsArray, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        PatternRuleCreateObject: PatternRuleCreateObject,
        PatternRuleInfo: PatternRuleInfo,
        ErrorResponse: ErrorResponse,
        PatternRuleUpdateObject: PatternRuleUpdateObject,
        OperationStatus: OperationStatus
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Pattern. */
    var Pattern = /** @class */ (function () {
        /**
         * Create a Pattern.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Pattern(client) {
            this.client = client;
        }
        Pattern.prototype.addPattern = function (appId$$1, versionId, pattern, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                pattern: pattern,
                options: options
            }, addPatternOperationSpec, callback);
        };
        Pattern.prototype.getPatterns = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, getPatternsOperationSpec, callback);
        };
        Pattern.prototype.updatePatterns = function (appId$$1, versionId, patterns, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                patterns: patterns,
                options: options
            }, updatePatternsOperationSpec, callback);
        };
        Pattern.prototype.batchAddPatterns = function (appId$$1, versionId, patterns, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                patterns: patterns,
                options: options
            }, batchAddPatternsOperationSpec, callback);
        };
        Pattern.prototype.deletePatterns = function (appId$$1, versionId, patternIds, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                patternIds: patternIds,
                options: options
            }, deletePatternsOperationSpec, callback);
        };
        Pattern.prototype.updatePattern = function (appId$$1, versionId, patternId$$1, pattern, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                patternId: patternId$$1,
                pattern: pattern,
                options: options
            }, updatePatternOperationSpec, callback);
        };
        Pattern.prototype.deletePattern = function (appId$$1, versionId, patternId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                patternId: patternId$$1,
                options: options
            }, deletePatternOperationSpec, callback);
        };
        Pattern.prototype.getIntentPatterns = function (appId$$1, versionId, intentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                intentId: intentId$$1,
                options: options
            }, getIntentPatternsOperationSpec, callback);
        };
        return Pattern;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var addPatternOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/patternrule",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "pattern",
            mapper: __assign({}, PatternRuleCreateObject, { required: true })
        },
        responses: {
            201: {
                bodyMapper: PatternRuleInfo
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getPatternsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/patternrules",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternRuleInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var updatePatternsOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/patternrules",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "patterns",
            mapper: {
                required: true,
                serializedName: "patterns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternRuleUpdateObject"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternRuleInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var batchAddPatternsOperationSpec = {
        httpMethod: "POST",
        path: "apps/{appId}/versions/{versionId}/patternrules",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "patterns",
            mapper: {
                required: true,
                serializedName: "patterns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PatternRuleCreateObject"
                        }
                    }
                }
            }
        },
        responses: {
            201: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternRuleInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var deletePatternsOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/patternrules",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "patternIds",
            mapper: {
                required: true,
                serializedName: "patternIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Uuid"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var updatePatternOperationSpec = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/patternrules/{patternId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            patternId
        ],
        requestBody: {
            parameterPath: "pattern",
            mapper: __assign({}, PatternRuleUpdateObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PatternRuleInfo
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var deletePatternOperationSpec = {
        httpMethod: "DELETE",
        path: "apps/{appId}/versions/{versionId}/patternrules/{patternId}",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            patternId
        ],
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getIntentPatternsOperationSpec = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules",
        urlParameters: [
            endpoint,
            appId,
            versionId0,
            intentId
        ],
        queryParameters: [
            skip,
            take
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PatternRuleInfo"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        AppVersionSettingObject: AppVersionSettingObject,
        ErrorResponse: ErrorResponse,
        OperationStatus: OperationStatus
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Settings. */
    var Settings = /** @class */ (function () {
        /**
         * Create a Settings.
         * @param {LUISAuthoringClientContext} client Reference to the service client.
         */
        function Settings(client) {
            this.client = client;
        }
        Settings.prototype.list = function (appId$$1, versionId, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                options: options
            }, listOperationSpec$5, callback);
        };
        Settings.prototype.update = function (appId$$1, versionId, listOfAppVersionSettingObject, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                versionId: versionId,
                listOfAppVersionSettingObject: listOfAppVersionSettingObject,
                options: options
            }, updateOperationSpec$3, callback);
        };
        return Settings;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "apps/{appId}/versions/{versionId}/settings",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppVersionSettingObject"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var updateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "apps/{appId}/versions/{versionId}/settings",
        urlParameters: [
            endpoint,
            appId,
            versionId0
        ],
        requestBody: {
            parameterPath: "listOfAppVersionSettingObject",
            mapper: __assign({}, AppVersionSettingObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationStatus
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-luis-authoring";
    var packageVersion = "1.0.0";
    var LUISAuthoringClientContext = /** @class */ (function (_super) {
        __extends(LUISAuthoringClientContext, _super);
        /**
         * Initializes a new instance of the LUISAuthoringClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function LUISAuthoringClientContext(endpoint, credentials, options) {
            var _this = this;
            if (endpoint === null || endpoint === undefined) {
                throw new Error('\'endpoint\' cannot be null.');
            }
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return LUISAuthoringClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var LUISAuthoringClient = /** @class */ (function (_super) {
        __extends(LUISAuthoringClient, _super);
        /**
         * Initializes a new instance of the LUISAuthoringClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function LUISAuthoringClient(endpoint, credentials, options) {
            var _this = _super.call(this, endpoint, credentials, options) || this;
            _this.features = new Features(_this);
            _this.examples = new Examples(_this);
            _this.model = new Model(_this);
            _this.apps = new Apps(_this);
            _this.versions = new Versions(_this);
            _this.train = new Train(_this);
            _this.permissions = new Permissions(_this);
            _this.pattern = new Pattern(_this);
            _this.settings = new Settings(_this);
            return _this;
        }
        return LUISAuthoringClient;
    }(LUISAuthoringClientContext));

    exports.LUISAuthoringClient = LUISAuthoringClient;
    exports.LUISAuthoringClientContext = LUISAuthoringClientContext;
    exports.LUISAuthoringModels = index;
    exports.LUISAuthoringMappers = mappers;
    exports.Features = Features;
    exports.Examples = Examples;
    exports.Model = Model;
    exports.Apps = Apps;
    exports.Versions = Versions;
    exports.Train = Train;
    exports.Permissions = Permissions;
    exports.Pattern = Pattern;
    exports.Settings = Settings;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-luis-authoring.js.map
