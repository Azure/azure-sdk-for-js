/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/patternMappers";
import * as Parameters from "../models/parameters";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";

/** Class representing a Pattern. */
export class Pattern {
  private readonly client: LUISAuthoringClientContext;

  /**
   * Create a Pattern.
   * @param {LUISAuthoringClientContext} client Reference to the service client.
   */
  constructor(client: LUISAuthoringClientContext) {
    this.client = client;
  }

  /**
   * @summary Adds a pattern to a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param pattern The input pattern.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternAddPatternResponse>
   */
  addPattern(appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options?: msRest.RequestOptionsBase): Promise<Models.PatternAddPatternResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param pattern The input pattern.
   * @param callback The callback
   */
  addPattern(appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param pattern The input pattern.
   * @param options The optional parameters
   * @param callback The callback
   */
  addPattern(appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  addPattern(appId: string, versionId: string, pattern: Models.PatternRuleCreateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PatternRuleInfo>, callback?: msRest.ServiceCallback<Models.PatternRuleInfo>): Promise<Models.PatternAddPatternResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        pattern,
        options
      },
      addPatternOperationSpec,
      callback) as Promise<Models.PatternAddPatternResponse>;
  }

  /**
   * @summary Gets patterns in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternListPatternsResponse>
   */
  listPatterns(appId: string, versionId: string, options?: Models.PatternListPatternsOptionalParams): Promise<Models.PatternListPatternsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param callback The callback
   */
  listPatterns(appId: string, versionId: string, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPatterns(appId: string, versionId: string, options: Models.PatternListPatternsOptionalParams, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  listPatterns(appId: string, versionId: string, options?: Models.PatternListPatternsOptionalParams | msRest.ServiceCallback<Models.PatternRuleInfo[]>, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): Promise<Models.PatternListPatternsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        options
      },
      listPatternsOperationSpec,
      callback) as Promise<Models.PatternListPatternsResponse>;
  }

  /**
   * @summary Updates patterns in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patterns An array represents the patterns.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternUpdatePatternsResponse>
   */
  updatePatterns(appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options?: msRest.RequestOptionsBase): Promise<Models.PatternUpdatePatternsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patterns An array represents the patterns.
   * @param callback The callback
   */
  updatePatterns(appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patterns An array represents the patterns.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePatterns(appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  updatePatterns(appId: string, versionId: string, patterns: Models.PatternRuleUpdateObject[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PatternRuleInfo[]>, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): Promise<Models.PatternUpdatePatternsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        patterns,
        options
      },
      updatePatternsOperationSpec,
      callback) as Promise<Models.PatternUpdatePatternsResponse>;
  }

  /**
   * @summary Adds a batch of patterns in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patterns A JSON array containing patterns.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternBatchAddPatternsResponse>
   */
  batchAddPatterns(appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options?: msRest.RequestOptionsBase): Promise<Models.PatternBatchAddPatternsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patterns A JSON array containing patterns.
   * @param callback The callback
   */
  batchAddPatterns(appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patterns A JSON array containing patterns.
   * @param options The optional parameters
   * @param callback The callback
   */
  batchAddPatterns(appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  batchAddPatterns(appId: string, versionId: string, patterns: Models.PatternRuleCreateObject[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PatternRuleInfo[]>, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): Promise<Models.PatternBatchAddPatternsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        patterns,
        options
      },
      batchAddPatternsOperationSpec,
      callback) as Promise<Models.PatternBatchAddPatternsResponse>;
  }

  /**
   * @summary Deletes a list of patterns in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternIds The patterns IDs.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternDeletePatternsResponse>
   */
  deletePatterns(appId: string, versionId: string, patternIds: string[], options?: msRest.RequestOptionsBase): Promise<Models.PatternDeletePatternsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternIds The patterns IDs.
   * @param callback The callback
   */
  deletePatterns(appId: string, versionId: string, patternIds: string[], callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternIds The patterns IDs.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePatterns(appId: string, versionId: string, patternIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePatterns(appId: string, versionId: string, patternIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.PatternDeletePatternsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        patternIds,
        options
      },
      deletePatternsOperationSpec,
      callback) as Promise<Models.PatternDeletePatternsResponse>;
  }

  /**
   * @summary Updates a pattern in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternId The pattern ID.
   * @param pattern An object representing a pattern.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternUpdatePatternResponse>
   */
  updatePattern(appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options?: msRest.RequestOptionsBase): Promise<Models.PatternUpdatePatternResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternId The pattern ID.
   * @param pattern An object representing a pattern.
   * @param callback The callback
   */
  updatePattern(appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternId The pattern ID.
   * @param pattern An object representing a pattern.
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePattern(appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PatternRuleInfo>): void;
  updatePattern(appId: string, versionId: string, patternId: string, pattern: Models.PatternRuleUpdateObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PatternRuleInfo>, callback?: msRest.ServiceCallback<Models.PatternRuleInfo>): Promise<Models.PatternUpdatePatternResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        patternId,
        pattern,
        options
      },
      updatePatternOperationSpec,
      callback) as Promise<Models.PatternUpdatePatternResponse>;
  }

  /**
   * @summary Deletes the pattern with the specified ID from a version of the application..
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternId The pattern ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternDeletePatternResponse>
   */
  deletePattern(appId: string, versionId: string, patternId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatternDeletePatternResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternId The pattern ID.
   * @param callback The callback
   */
  deletePattern(appId: string, versionId: string, patternId: string, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param patternId The pattern ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePattern(appId: string, versionId: string, patternId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatus>): void;
  deletePattern(appId: string, versionId: string, patternId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatus>, callback?: msRest.ServiceCallback<Models.OperationStatus>): Promise<Models.PatternDeletePatternResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        patternId,
        options
      },
      deletePatternOperationSpec,
      callback) as Promise<Models.PatternDeletePatternResponse>;
  }

  /**
   * @summary Returns patterns for the specific intent in a version of the application.
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PatternListIntentPatternsResponse>
   */
  listIntentPatterns(appId: string, versionId: string, intentId: string, options?: Models.PatternListIntentPatternsOptionalParams): Promise<Models.PatternListIntentPatternsResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param callback The callback
   */
  listIntentPatterns(appId: string, versionId: string, intentId: string, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentId The intent classifier ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listIntentPatterns(appId: string, versionId: string, intentId: string, options: Models.PatternListIntentPatternsOptionalParams, callback: msRest.ServiceCallback<Models.PatternRuleInfo[]>): void;
  listIntentPatterns(appId: string, versionId: string, intentId: string, options?: Models.PatternListIntentPatternsOptionalParams | msRest.ServiceCallback<Models.PatternRuleInfo[]>, callback?: msRest.ServiceCallback<Models.PatternRuleInfo[]>): Promise<Models.PatternListIntentPatternsResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentId,
        options
      },
      listIntentPatternsOperationSpec,
      callback) as Promise<Models.PatternListIntentPatternsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const addPatternOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/patternrule",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "pattern",
    mapper: {
      ...Mappers.PatternRuleCreateObject,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PatternRuleInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listPatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "patterns",
    mapper: {
      required: true,
      serializedName: "patterns",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "PatternRuleUpdateObject"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const batchAddPatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "patterns",
    mapper: {
      required: true,
      serializedName: "patterns",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "PatternRuleCreateObject"
          }
        }
      }
    }
  },
  responses: {
    201: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/patternrules",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "patternIds",
    mapper: {
      required: true,
      serializedName: "patternIds",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Uuid"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updatePatternOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/patternrules/{patternId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.patternId
  ],
  requestBody: {
    parameterPath: "pattern",
    mapper: {
      ...Mappers.PatternRuleUpdateObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PatternRuleInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deletePatternOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/patternrules/{patternId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.patternId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listIntentPatternsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0,
    Parameters.intentId
  ],
  queryParameters: [
    Parameters.skip,
    Parameters.take
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatternRuleInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
