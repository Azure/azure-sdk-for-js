/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/dispatchMappers";
import * as Parameters from "../models/parameters";
import { LUISAuthoringClientContext } from "../lUISAuthoringClientContext";

/** Class representing a Dispatch. */
export class Dispatch {
  private readonly client: LUISAuthoringClientContext;

  /**
   * Create a Dispatch.
   * @param {LUISAuthoringClientContext} client Reference to the service client.
   */
  constructor(client: LUISAuthoringClientContext) {
    this.client = client;
  }

  /**
   * @summary Updates connected services
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param connectedServices A JSON array of service connections.
   * @param [options] The optional parameters
   * @returns Promise<Models.DispatchBatchUpdateConnectedServicesResponse>
   */
  batchUpdateConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], options?: msRest.RequestOptionsBase): Promise<Models.DispatchBatchUpdateConnectedServicesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param connectedServices A JSON array of service connections.
   * @param callback The callback
   */
  batchUpdateConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], callback: msRest.ServiceCallback<any>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param connectedServices A JSON array of service connections.
   * @param options The optional parameters
   * @param callback The callback
   */
  batchUpdateConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  batchUpdateConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DispatchBatchUpdateConnectedServicesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        connectedServices,
        options
      },
      batchUpdateConnectedServicesOperationSpec,
      callback) as Promise<Models.DispatchBatchUpdateConnectedServicesResponse>;
  }

  /**
   * @summary Adds connected services
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param connectedServices A JSON array of service connections.
   * @param [options] The optional parameters
   * @returns Promise<Models.DispatchBatchAddConnectedServicesResponse>
   */
  batchAddConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], options?: msRest.RequestOptionsBase): Promise<Models.DispatchBatchAddConnectedServicesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param connectedServices A JSON array of service connections.
   * @param callback The callback
   */
  batchAddConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], callback: msRest.ServiceCallback<any>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param connectedServices A JSON array of service connections.
   * @param options The optional parameters
   * @param callback The callback
   */
  batchAddConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  batchAddConnectedServices(appId: string, versionId: string, connectedServices: Models.DispatchConnectedServiceObject[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DispatchBatchAddConnectedServicesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        connectedServices,
        options
      },
      batchAddConnectedServicesOperationSpec,
      callback) as Promise<Models.DispatchBatchAddConnectedServicesResponse>;
  }

  /**
   * @summary Deletes the services connected to the specified intents
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentNames The intent names.
   * @param [options] The optional parameters
   * @returns Promise<Models.DispatchDeleteConnectedServicesResponse>
   */
  deleteConnectedServices(appId: string, versionId: string, intentNames: Models.DispatchConnectedServiceDeleteObject[], options?: msRest.RequestOptionsBase): Promise<Models.DispatchDeleteConnectedServicesResponse>;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentNames The intent names.
   * @param callback The callback
   */
  deleteConnectedServices(appId: string, versionId: string, intentNames: Models.DispatchConnectedServiceDeleteObject[], callback: msRest.ServiceCallback<any>): void;
  /**
   * @param appId The application ID.
   * @param versionId The version ID.
   * @param intentNames The intent names.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteConnectedServices(appId: string, versionId: string, intentNames: Models.DispatchConnectedServiceDeleteObject[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteConnectedServices(appId: string, versionId: string, intentNames: Models.DispatchConnectedServiceDeleteObject[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DispatchDeleteConnectedServicesResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        versionId,
        intentNames,
        options
      },
      deleteConnectedServicesOperationSpec,
      callback) as Promise<Models.DispatchDeleteConnectedServicesResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const batchUpdateConnectedServicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "apps/{appId}/versions/{versionId}/connectedServices",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "connectedServices",
    mapper: {
      required: true,
      serializedName: "connectedServices",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "DispatchConnectedServiceObject"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    401: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    default: {}
  },
  serializer
};

const batchAddConnectedServicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "apps/{appId}/versions/{versionId}/connectedServices",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "connectedServices",
    mapper: {
      required: true,
      serializedName: "connectedServices",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "DispatchConnectedServiceObject"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    401: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    default: {}
  },
  serializer
};

const deleteConnectedServicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "apps/{appId}/versions/{versionId}/connectedServices",
  urlParameters: [
    Parameters.endpoint,
    Parameters.appId,
    Parameters.versionId0
  ],
  requestBody: {
    parameterPath: "intentNames",
    mapper: {
      required: true,
      serializedName: "intentNames",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "DispatchConnectedServiceDeleteObject"
          }
        }
      }
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    401: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    default: {}
  },
  serializer
};
