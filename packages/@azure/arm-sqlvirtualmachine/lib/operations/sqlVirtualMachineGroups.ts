/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/sqlVirtualMachineGroupsMappers";
import * as Parameters from "../models/parameters";
import { SqlVirtualMachineManagementClientContext } from "../sqlVirtualMachineManagementClientContext";

/** Class representing a SqlVirtualMachineGroups. */
export class SqlVirtualMachineGroups {
  private readonly client: SqlVirtualMachineManagementClientContext;

  /**
   * Create a SqlVirtualMachineGroups.
   * @param {SqlVirtualMachineManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlVirtualMachineManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsGetResponse>
   */
  get(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param callback The callback
   */
  get(resourceGroupName: string, sqlVirtualMachineGroupName: string, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroup>): void;
  /**
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, sqlVirtualMachineGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroup>): void;
  get(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlVirtualMachineGroup>, callback?: msRest.ServiceCallback<Models.SqlVirtualMachineGroup>): Promise<Models.SqlVirtualMachineGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlVirtualMachineGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SqlVirtualMachineGroupsGetResponse>;
  }

  /**
   * Creates or updates a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param parameters The SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: Models.SqlVirtualMachineGroup, options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,sqlVirtualMachineGroupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SqlVirtualMachineGroupsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,sqlVirtualMachineGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates SQL virtual machine group tags.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param parameters The SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsUpdateResponse>
   */
  update(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: Models.SqlVirtualMachineGroupUpdate, options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,sqlVirtualMachineGroupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SqlVirtualMachineGroupsUpdateResponse>;
  }

  /**
   * Gets all SQL virtual machine groups in a resource group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  /**
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>, callback?: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): Promise<Models.SqlVirtualMachineGroupsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.SqlVirtualMachineGroupsListByResourceGroupResponse>;
  }

  /**
   * Gets all SQL virtual machine groups in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>, callback?: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): Promise<Models.SqlVirtualMachineGroupsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SqlVirtualMachineGroupsListResponse>;
  }

  /**
   * Creates or updates a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param parameters The SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: Models.SqlVirtualMachineGroup, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sqlVirtualMachineGroupName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a SQL virtual machine group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sqlVirtualMachineGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates SQL virtual machine group tags.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
   * this value from the Azure Resource Manager API or the portal.
   * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
   * @param parameters The SQL virtual machine group.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: Models.SqlVirtualMachineGroupUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sqlVirtualMachineGroupName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Gets all SQL virtual machine groups in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>, callback?: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): Promise<Models.SqlVirtualMachineGroupsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.SqlVirtualMachineGroupsListByResourceGroupNextResponse>;
  }

  /**
   * Gets all SQL virtual machine groups in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlVirtualMachineGroupsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlVirtualMachineGroupsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>, callback?: msRest.ServiceCallback<Models.SqlVirtualMachineGroupListResult>): Promise<Models.SqlVirtualMachineGroupsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SqlVirtualMachineGroupsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SqlVirtualMachineGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroup
    },
    201: {
      bodyMapper: Mappers.SqlVirtualMachineGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.sqlVirtualMachineGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SqlVirtualMachineGroupUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlVirtualMachineGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
