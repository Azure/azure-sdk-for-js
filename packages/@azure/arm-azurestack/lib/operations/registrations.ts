/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/registrationsMappers";
import * as Parameters from "../models/parameters";
import { AzureStackManagementClientContext } from "../azureStackManagementClientContext";

/** Class representing a Registrations. */
export class Registrations {
  private readonly client: AzureStackManagementClientContext;

  /**
   * Create a Registrations.
   * @param {AzureStackManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureStackManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns a list of all registrations.
   * @param resourceGroup Name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistrationsListResponse>
   */
  list(resourceGroup: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistrationsListResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param callback The callback
   */
  list(resourceGroup: string, callback: msRest.ServiceCallback<Models.RegistrationList>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroup: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistrationList>): void;
  list(resourceGroup: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistrationList>, callback?: msRest.ServiceCallback<Models.RegistrationList>): Promise<Models.RegistrationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.RegistrationsListResponse>;
  }

  /**
   * Returns the properties of an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistrationsGetResponse>
   */
  get(resourceGroup: string, registrationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistrationsGetResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param callback The callback
   */
  get(resourceGroup: string, registrationName: string, callback: msRest.ServiceCallback<Models.Registration>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroup: string, registrationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Registration>): void;
  get(resourceGroup: string, registrationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Registration>, callback?: msRest.ServiceCallback<Models.Registration>): Promise<Models.RegistrationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RegistrationsGetResponse>;
  }

  /**
   * Delete the requested Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroup: string, registrationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param callback The callback
   */
  deleteMethod(resourceGroup: string, registrationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroup: string, registrationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroup: string, registrationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Create or update an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistrationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, options?: msRest.RequestOptionsBase): Promise<Models.RegistrationsCreateOrUpdateResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param callback The callback
   */
  createOrUpdate(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, callback: msRest.ServiceCallback<Models.Registration>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Registration>): void;
  createOrUpdate(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Registration>, callback?: msRest.ServiceCallback<Models.Registration>): Promise<Models.RegistrationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        token,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.RegistrationsCreateOrUpdateResponse>;
  }

  /**
   * Patch an Azure Stack registration.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistrationsUpdateResponse>
   */
  update(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, options?: msRest.RequestOptionsBase): Promise<Models.RegistrationsUpdateResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param callback The callback
   */
  update(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, callback: msRest.ServiceCallback<Models.Registration>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param token Registration token
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Registration>): void;
  update(resourceGroup: string, registrationName: string, token: Models.RegistrationParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Registration>, callback?: msRest.ServiceCallback<Models.Registration>): Promise<Models.RegistrationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        token,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.RegistrationsUpdateResponse>;
  }

  /**
   * Returns Azure Stack Activation Key.
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistrationsGetActivationKeyResponse>
   */
  getActivationKey(resourceGroup: string, registrationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistrationsGetActivationKeyResponse>;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param callback The callback
   */
  getActivationKey(resourceGroup: string, registrationName: string, callback: msRest.ServiceCallback<Models.ActivationKeyResult>): void;
  /**
   * @param resourceGroup Name of the resource group.
   * @param registrationName Name of the Azure Stack registration.
   * @param options The optional parameters
   * @param callback The callback
   */
  getActivationKey(resourceGroup: string, registrationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ActivationKeyResult>): void;
  getActivationKey(resourceGroup: string, registrationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ActivationKeyResult>, callback?: msRest.ServiceCallback<Models.ActivationKeyResult>): Promise<Models.RegistrationsGetActivationKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        registrationName,
        options
      },
      getActivationKeyOperationSpec,
      callback) as Promise<Models.RegistrationsGetActivationKeyResponse>;
  }

  /**
   * Returns a list of all registrations.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistrationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistrationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RegistrationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistrationList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistrationList>, callback?: msRest.ServiceCallback<Models.RegistrationList>): Promise<Models.RegistrationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.RegistrationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "token",
    mapper: {
      ...Mappers.RegistrationParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    201: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "token",
    mapper: {
      ...Mappers.RegistrationParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Registration
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getActivationKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/getactivationkey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.registrationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ActivationKeyResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistrationList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
