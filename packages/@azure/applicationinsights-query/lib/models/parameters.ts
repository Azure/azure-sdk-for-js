/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";

export const aggregation: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "aggregation"
  ],
  mapper: {
    serializedName: "aggregation",
    constraints: {
      MinItems: 1
    },
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Csv
};
export const appId: msRest.OperationURLParameter = {
  parameterPath: "appId",
  mapper: {
    required: true,
    serializedName: "appId",
    type: {
      name: "String"
    }
  }
};
export const apply: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "apply"
  ],
  mapper: {
    serializedName: "$apply",
    type: {
      name: "String"
    }
  }
};
export const count: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "count"
  ],
  mapper: {
    serializedName: "$count",
    type: {
      name: "Boolean"
    }
  }
};
export const eventId: msRest.OperationURLParameter = {
  parameterPath: "eventId",
  mapper: {
    required: true,
    serializedName: "eventId",
    type: {
      name: "String"
    }
  }
};
export const eventType: msRest.OperationURLParameter = {
  parameterPath: "eventType",
  mapper: {
    required: true,
    serializedName: "eventType",
    type: {
      name: "String"
    }
  }
};
export const filter0: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "filter"
  ],
  mapper: {
    serializedName: "filter",
    type: {
      name: "String"
    }
  }
};
export const filter1: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const format: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "format"
  ],
  mapper: {
    serializedName: "$format",
    type: {
      name: "String"
    }
  }
};
export const interval: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "interval"
  ],
  mapper: {
    serializedName: "interval",
    type: {
      name: "TimeSpan"
    }
  }
};
export const metricId: msRest.OperationURLParameter = {
  parameterPath: "metricId",
  mapper: {
    required: true,
    serializedName: "metricId",
    type: {
      name: "String"
    }
  }
};
export const orderby0: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "orderby"
  ],
  mapper: {
    serializedName: "orderby",
    type: {
      name: "String"
    }
  }
};
export const orderby1: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "orderby"
  ],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};
export const search: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "search"
  ],
  mapper: {
    serializedName: "$search",
    type: {
      name: "String"
    }
  }
};
export const segment: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "segment"
  ],
  mapper: {
    serializedName: "segment",
    constraints: {
      MinItems: 1
    },
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Csv
};
export const select: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "select"
  ],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};
export const skip: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "skip"
  ],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};
export const timespan: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "timespan"
  ],
  mapper: {
    serializedName: "timespan",
    type: {
      name: "String"
    }
  }
};
export const top0: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "top"
  ],
  mapper: {
    serializedName: "top",
    type: {
      name: "Number"
    }
  }
};
export const top1: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
