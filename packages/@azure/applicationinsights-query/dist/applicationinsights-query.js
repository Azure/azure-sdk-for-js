/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ApplicationinsightsQuery = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for MetricId.
     * Possible values include: 'requests/count', 'requests/duration',
     * 'requests/failed', 'users/count', 'users/authenticated', 'pageViews/count',
     * 'pageViews/duration', 'client/processingDuration', 'client/receiveDuration',
     * 'client/networkDuration', 'client/sendDuration', 'client/totalDuration',
     * 'dependencies/count', 'dependencies/failed', 'dependencies/duration',
     * 'exceptions/count', 'exceptions/browser', 'exceptions/server',
     * 'sessions/count', 'performanceCounters/requestExecutionTime',
     * 'performanceCounters/requestsPerSecond',
     * 'performanceCounters/requestsInQueue',
     * 'performanceCounters/memoryAvailableBytes',
     * 'performanceCounters/exceptionsPerSecond',
     * 'performanceCounters/processCpuPercentage',
     * 'performanceCounters/processIOBytesPerSecond',
     * 'performanceCounters/processPrivateBytes',
     * 'performanceCounters/processorCpuPercentage',
     * 'availabilityResults/availabilityPercentage',
     * 'availabilityResults/duration', 'billing/telemetryCount',
     * 'customEvents/count'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MetricId = <MetricId>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MetricId;
    (function (MetricId) {
        MetricId["Requestscount"] = "requests/count";
        MetricId["Requestsduration"] = "requests/duration";
        MetricId["Requestsfailed"] = "requests/failed";
        MetricId["Userscount"] = "users/count";
        MetricId["Usersauthenticated"] = "users/authenticated";
        MetricId["PageViewscount"] = "pageViews/count";
        MetricId["PageViewsduration"] = "pageViews/duration";
        MetricId["ClientprocessingDuration"] = "client/processingDuration";
        MetricId["ClientreceiveDuration"] = "client/receiveDuration";
        MetricId["ClientnetworkDuration"] = "client/networkDuration";
        MetricId["ClientsendDuration"] = "client/sendDuration";
        MetricId["ClienttotalDuration"] = "client/totalDuration";
        MetricId["Dependenciescount"] = "dependencies/count";
        MetricId["Dependenciesfailed"] = "dependencies/failed";
        MetricId["Dependenciesduration"] = "dependencies/duration";
        MetricId["Exceptionscount"] = "exceptions/count";
        MetricId["Exceptionsbrowser"] = "exceptions/browser";
        MetricId["Exceptionsserver"] = "exceptions/server";
        MetricId["Sessionscount"] = "sessions/count";
        MetricId["PerformanceCountersrequestExecutionTime"] = "performanceCounters/requestExecutionTime";
        MetricId["PerformanceCountersrequestsPerSecond"] = "performanceCounters/requestsPerSecond";
        MetricId["PerformanceCountersrequestsInQueue"] = "performanceCounters/requestsInQueue";
        MetricId["PerformanceCountersmemoryAvailableBytes"] = "performanceCounters/memoryAvailableBytes";
        MetricId["PerformanceCountersexceptionsPerSecond"] = "performanceCounters/exceptionsPerSecond";
        MetricId["PerformanceCountersprocessCpuPercentage"] = "performanceCounters/processCpuPercentage";
        MetricId["PerformanceCountersprocessIOBytesPerSecond"] = "performanceCounters/processIOBytesPerSecond";
        MetricId["PerformanceCountersprocessPrivateBytes"] = "performanceCounters/processPrivateBytes";
        MetricId["PerformanceCountersprocessorCpuPercentage"] = "performanceCounters/processorCpuPercentage";
        MetricId["AvailabilityResultsavailabilityPercentage"] = "availabilityResults/availabilityPercentage";
        MetricId["AvailabilityResultsduration"] = "availabilityResults/duration";
        MetricId["BillingtelemetryCount"] = "billing/telemetryCount";
        MetricId["CustomEventscount"] = "customEvents/count";
    })(MetricId || (MetricId = {}));
    /**
     * Defines values for MetricsAggregation.
     * Possible values include: 'min', 'max', 'avg', 'sum', 'count', 'unique'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MetricsAggregation =
     * <MetricsAggregation>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MetricsAggregation;
    (function (MetricsAggregation) {
        MetricsAggregation["Min"] = "min";
        MetricsAggregation["Max"] = "max";
        MetricsAggregation["Avg"] = "avg";
        MetricsAggregation["Sum"] = "sum";
        MetricsAggregation["Count"] = "count";
        MetricsAggregation["Unique"] = "unique";
    })(MetricsAggregation || (MetricsAggregation = {}));
    /**
     * Defines values for MetricsSegment.
     * Possible values include: 'applicationBuild', 'applicationVersion',
     * 'authenticatedOrAnonymousTraffic', 'browser', 'browserVersion', 'city',
     * 'cloudRoleName', 'cloudServiceName', 'continent', 'countryOrRegion',
     * 'deploymentId', 'deploymentUnit', 'deviceType', 'environment',
     * 'hostingLocation', 'instanceName'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MetricsSegment =
     * <MetricsSegment>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MetricsSegment;
    (function (MetricsSegment) {
        MetricsSegment["ApplicationBuild"] = "applicationBuild";
        MetricsSegment["ApplicationVersion"] = "applicationVersion";
        MetricsSegment["AuthenticatedOrAnonymousTraffic"] = "authenticatedOrAnonymousTraffic";
        MetricsSegment["Browser"] = "browser";
        MetricsSegment["BrowserVersion"] = "browserVersion";
        MetricsSegment["City"] = "city";
        MetricsSegment["CloudRoleName"] = "cloudRoleName";
        MetricsSegment["CloudServiceName"] = "cloudServiceName";
        MetricsSegment["Continent"] = "continent";
        MetricsSegment["CountryOrRegion"] = "countryOrRegion";
        MetricsSegment["DeploymentId"] = "deploymentId";
        MetricsSegment["DeploymentUnit"] = "deploymentUnit";
        MetricsSegment["DeviceType"] = "deviceType";
        MetricsSegment["Environment"] = "environment";
        MetricsSegment["HostingLocation"] = "hostingLocation";
        MetricsSegment["InstanceName"] = "instanceName";
    })(MetricsSegment || (MetricsSegment = {}));
    /**
     * Defines values for EventType.
     * Possible values include: '$all', 'traces', 'customEvents', 'pageViews',
     * 'browserTimings', 'requests', 'dependencies', 'exceptions',
     * 'availabilityResults', 'performanceCounters', 'customMetrics'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EventType = <EventType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EventType;
    (function (EventType) {
        EventType["All"] = "$all";
        EventType["Traces"] = "traces";
        EventType["CustomEvents"] = "customEvents";
        EventType["PageViews"] = "pageViews";
        EventType["BrowserTimings"] = "browserTimings";
        EventType["Requests"] = "requests";
        EventType["Dependencies"] = "dependencies";
        EventType["Exceptions"] = "exceptions";
        EventType["AvailabilityResults"] = "availabilityResults";
        EventType["PerformanceCounters"] = "performanceCounters";
        EventType["CustomMetrics"] = "customMetrics";
    })(EventType || (EventType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get MetricId () { return MetricId; },
        get MetricsAggregation () { return MetricsAggregation; },
        get MetricsSegment () { return MetricsSegment; },
        get EventType () { return EventType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MetricsPostBodySchemaParameters = {
        serializedName: "metricsPostBodySchema_parameters",
        type: {
            name: "Composite",
            className: "MetricsPostBodySchemaParameters",
            modelProperties: {
                metricId: {
                    required: true,
                    serializedName: "metricId",
                    type: {
                        name: "String"
                    }
                },
                timespan: {
                    serializedName: "timespan",
                    type: {
                        name: "String"
                    }
                },
                aggregation: {
                    serializedName: "aggregation",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                segment: {
                    serializedName: "segment",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                top: {
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                orderby: {
                    serializedName: "orderby",
                    type: {
                        name: "String"
                    }
                },
                filter: {
                    serializedName: "filter",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricsPostBodySchema = {
        serializedName: "metricsPostBodySchema",
        type: {
            name: "Composite",
            className: "MetricsPostBodySchema",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    required: true,
                    serializedName: "parameters",
                    type: {
                        name: "Composite",
                        className: "MetricsPostBodySchemaParameters"
                    }
                }
            }
        }
    };
    var MetricsSegmentInfo = {
        serializedName: "metricsSegmentInfo",
        type: {
            name: "Composite",
            className: "MetricsSegmentInfo",
            modelProperties: {
                start: {
                    serializedName: "start",
                    type: {
                        name: "DateTime"
                    }
                },
                end: {
                    serializedName: "end",
                    type: {
                        name: "DateTime"
                    }
                },
                segments: {
                    serializedName: "segments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricsSegmentInfo",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var MetricsResultInfo = {
        serializedName: "metricsResultInfo",
        type: {
            name: "Composite",
            className: "MetricsResultInfo",
            modelProperties: {
                start: {
                    serializedName: "start",
                    type: {
                        name: "DateTime"
                    }
                },
                end: {
                    serializedName: "end",
                    type: {
                        name: "DateTime"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "TimeSpan"
                    }
                },
                segments: {
                    serializedName: "segments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricsSegmentInfo",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var MetricsResult = {
        serializedName: "metricsResult",
        type: {
            name: "Composite",
            className: "MetricsResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        className: "MetricsResultInfo",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricsResultsItem = {
        serializedName: "metricsResultsItem",
        type: {
            name: "Composite",
            className: "MetricsResultsItem",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Number"
                    }
                },
                body: {
                    required: true,
                    serializedName: "body",
                    type: {
                        name: "Composite",
                        className: "MetricsResult"
                    }
                }
            }
        }
    };
    var ErrorDetail = {
        serializedName: "errorDetail",
        type: {
            name: "Composite",
            className: "ErrorDetail",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                additionalProperties: {
                    serializedName: "additionalProperties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ErrorInfo = {
        serializedName: "errorInfo",
        type: {
            name: "Composite",
            className: "ErrorInfo",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetail"
                            }
                        }
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "ErrorInfo"
                    }
                },
                additionalProperties: {
                    serializedName: "additionalProperties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var EventsResultDataCustomDimensions = {
        serializedName: "eventsResultData_customDimensions",
        type: {
            name: "Composite",
            className: "EventsResultDataCustomDimensions",
            modelProperties: {
                additionalProperties: {
                    serializedName: "additionalProperties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var EventsResultDataCustomMeasurements = {
        serializedName: "eventsResultData_customMeasurements",
        type: {
            name: "Composite",
            className: "EventsResultDataCustomMeasurements",
            modelProperties: {
                additionalProperties: {
                    serializedName: "additionalProperties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var EventsOperationInfo = {
        serializedName: "eventsOperationInfo",
        type: {
            name: "Composite",
            className: "EventsOperationInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                parentId: {
                    serializedName: "parentId",
                    type: {
                        name: "String"
                    }
                },
                syntheticSource: {
                    serializedName: "syntheticSource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsSessionInfo = {
        serializedName: "eventsSessionInfo",
        type: {
            name: "Composite",
            className: "EventsSessionInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsUserInfo = {
        serializedName: "eventsUserInfo",
        type: {
            name: "Composite",
            className: "EventsUserInfo",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                accountId: {
                    serializedName: "accountId",
                    type: {
                        name: "String"
                    }
                },
                authenticatedId: {
                    serializedName: "authenticatedId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsCloudInfo = {
        serializedName: "eventsCloudInfo",
        type: {
            name: "Composite",
            className: "EventsCloudInfo",
            modelProperties: {
                roleName: {
                    serializedName: "roleName",
                    type: {
                        name: "String"
                    }
                },
                roleInstance: {
                    serializedName: "roleInstance",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsAiInfo = {
        serializedName: "eventsAiInfo",
        type: {
            name: "Composite",
            className: "EventsAiInfo",
            modelProperties: {
                iKey: {
                    serializedName: "iKey",
                    type: {
                        name: "String"
                    }
                },
                appName: {
                    serializedName: "appName",
                    type: {
                        name: "String"
                    }
                },
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                sdkVersion: {
                    serializedName: "sdkVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsApplicationInfo = {
        serializedName: "eventsApplicationInfo",
        type: {
            name: "Composite",
            className: "EventsApplicationInfo",
            modelProperties: {
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsClientInfo = {
        serializedName: "eventsClientInfo",
        type: {
            name: "Composite",
            className: "EventsClientInfo",
            modelProperties: {
                model: {
                    serializedName: "model",
                    type: {
                        name: "String"
                    }
                },
                os: {
                    serializedName: "os",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                browser: {
                    serializedName: "browser",
                    type: {
                        name: "String"
                    }
                },
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "String"
                    }
                },
                city: {
                    serializedName: "city",
                    type: {
                        name: "String"
                    }
                },
                stateOrProvince: {
                    serializedName: "stateOrProvince",
                    type: {
                        name: "String"
                    }
                },
                countryOrRegion: {
                    serializedName: "countryOrRegion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsResultData = {
        serializedName: "eventsResultData",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "EventsResultData",
            className: "EventsResultData",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                customDimensions: {
                    serializedName: "customDimensions",
                    type: {
                        name: "Composite",
                        className: "EventsResultDataCustomDimensions"
                    }
                },
                customMeasurements: {
                    serializedName: "customMeasurements",
                    type: {
                        name: "Composite",
                        className: "EventsResultDataCustomMeasurements"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "Composite",
                        className: "EventsOperationInfo"
                    }
                },
                session: {
                    serializedName: "session",
                    type: {
                        name: "Composite",
                        className: "EventsSessionInfo"
                    }
                },
                user: {
                    serializedName: "user",
                    type: {
                        name: "Composite",
                        className: "EventsUserInfo"
                    }
                },
                cloud: {
                    serializedName: "cloud",
                    type: {
                        name: "Composite",
                        className: "EventsCloudInfo"
                    }
                },
                ai: {
                    serializedName: "ai",
                    type: {
                        name: "Composite",
                        className: "EventsAiInfo"
                    }
                },
                application: {
                    serializedName: "application",
                    type: {
                        name: "Composite",
                        className: "EventsApplicationInfo"
                    }
                },
                client: {
                    serializedName: "client",
                    type: {
                        name: "Composite",
                        className: "EventsClientInfo"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsResults = {
        serializedName: "eventsResults",
        type: {
            name: "Composite",
            className: "EventsResults",
            modelProperties: {
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                aimessages: {
                    serializedName: "@ai\\.messages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorInfo"
                            }
                        }
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "type",
                                    clientName: "type"
                                },
                                uberParent: "EventsResultData",
                                className: "EventsResultData"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventsResult = {
        serializedName: "eventsResult",
        type: {
            name: "Composite",
            className: "EventsResult",
            modelProperties: {
                aimessages: {
                    serializedName: "@ai\\.messages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorInfo"
                            }
                        }
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "type",
                            clientName: "type"
                        },
                        uberParent: "EventsResultData",
                        className: "EventsResultData"
                    }
                }
            }
        }
    };
    var EventsTraceInfo = {
        serializedName: "eventsTraceInfo",
        type: {
            name: "Composite",
            className: "EventsTraceInfo",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                severityLevel: {
                    serializedName: "severityLevel",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EventsTraceResult = {
        serializedName: "trace",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsTraceResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { trace: {
                    serializedName: "trace",
                    type: {
                        name: "Composite",
                        className: "EventsTraceInfo"
                    }
                } })
        }
    };
    var EventsCustomEventInfo = {
        serializedName: "eventsCustomEventInfo",
        type: {
            name: "Composite",
            className: "EventsCustomEventInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsCustomEventResult = {
        serializedName: "customEvent",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsCustomEventResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { customEvent: {
                    serializedName: "customEvent",
                    type: {
                        name: "Composite",
                        className: "EventsCustomEventInfo"
                    }
                } })
        }
    };
    var EventsPageViewInfo = {
        serializedName: "eventsPageViewInfo",
        type: {
            name: "Composite",
            className: "EventsPageViewInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                duration: {
                    serializedName: "duration",
                    type: {
                        name: "String"
                    }
                },
                performanceBucket: {
                    serializedName: "performanceBucket",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsPageViewResult = {
        serializedName: "pageView",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsPageViewResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { pageView: {
                    serializedName: "pageView",
                    type: {
                        name: "Composite",
                        className: "EventsPageViewInfo"
                    }
                } })
        }
    };
    var EventsBrowserTimingInfo = {
        serializedName: "eventsBrowserTimingInfo",
        type: {
            name: "Composite",
            className: "EventsBrowserTimingInfo",
            modelProperties: {
                urlPath: {
                    serializedName: "urlPath",
                    type: {
                        name: "String"
                    }
                },
                urlHost: {
                    serializedName: "urlHost",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                totalDuration: {
                    serializedName: "totalDuration",
                    type: {
                        name: "Number"
                    }
                },
                performanceBucket: {
                    serializedName: "performanceBucket",
                    type: {
                        name: "String"
                    }
                },
                networkDuration: {
                    serializedName: "networkDuration",
                    type: {
                        name: "Number"
                    }
                },
                sendDuration: {
                    serializedName: "sendDuration",
                    type: {
                        name: "Number"
                    }
                },
                receiveDuration: {
                    serializedName: "receiveDuration",
                    type: {
                        name: "Number"
                    }
                },
                processingDuration: {
                    serializedName: "processingDuration",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EventsClientPerformanceInfo = {
        serializedName: "eventsClientPerformanceInfo",
        type: {
            name: "Composite",
            className: "EventsClientPerformanceInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsBrowserTimingResult = {
        serializedName: "browserTiming",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsBrowserTimingResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { browserTiming: {
                    serializedName: "browserTiming",
                    type: {
                        name: "Composite",
                        className: "EventsBrowserTimingInfo"
                    }
                }, clientPerformance: {
                    serializedName: "clientPerformance",
                    type: {
                        name: "Composite",
                        className: "EventsClientPerformanceInfo"
                    }
                } })
        }
    };
    var EventsRequestInfo = {
        serializedName: "eventsRequestInfo",
        type: {
            name: "Composite",
            className: "EventsRequestInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                success: {
                    serializedName: "success",
                    type: {
                        name: "String"
                    }
                },
                duration: {
                    serializedName: "duration",
                    type: {
                        name: "Number"
                    }
                },
                performanceBucket: {
                    serializedName: "performanceBucket",
                    type: {
                        name: "String"
                    }
                },
                resultCode: {
                    serializedName: "resultCode",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsRequestResult = {
        serializedName: "request",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsRequestResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { request: {
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "EventsRequestInfo"
                    }
                } })
        }
    };
    var EventsDependencyInfo = {
        serializedName: "eventsDependencyInfo",
        type: {
            name: "Composite",
            className: "EventsDependencyInfo",
            modelProperties: {
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                data: {
                    serializedName: "data",
                    type: {
                        name: "String"
                    }
                },
                success: {
                    serializedName: "success",
                    type: {
                        name: "String"
                    }
                },
                duration: {
                    serializedName: "duration",
                    type: {
                        name: "Number"
                    }
                },
                performanceBucket: {
                    serializedName: "performanceBucket",
                    type: {
                        name: "String"
                    }
                },
                resultCode: {
                    serializedName: "resultCode",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsDependencyResult = {
        serializedName: "dependency",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsDependencyResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { dependency: {
                    serializedName: "dependency",
                    type: {
                        name: "Composite",
                        className: "EventsDependencyInfo"
                    }
                } })
        }
    };
    var EventsExceptionDetailsParsedStack = {
        serializedName: "eventsExceptionDetailsParsedStack",
        type: {
            name: "Composite",
            className: "EventsExceptionDetailsParsedStack",
            modelProperties: {
                assembly: {
                    serializedName: "assembly",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                level: {
                    serializedName: "level",
                    type: {
                        name: "Number"
                    }
                },
                line: {
                    serializedName: "line",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EventsExceptionDetail = {
        serializedName: "eventsExceptionDetail",
        type: {
            name: "Composite",
            className: "EventsExceptionDetail",
            modelProperties: {
                severityLevel: {
                    serializedName: "severityLevel",
                    type: {
                        name: "String"
                    }
                },
                outerId: {
                    serializedName: "outerId",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                parsedStack: {
                    serializedName: "parsedStack",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventsExceptionDetailsParsedStack"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventsExceptionInfo = {
        serializedName: "eventsExceptionInfo",
        type: {
            name: "Composite",
            className: "EventsExceptionInfo",
            modelProperties: {
                severityLevel: {
                    serializedName: "severityLevel",
                    type: {
                        name: "Number"
                    }
                },
                problemId: {
                    serializedName: "problemId",
                    type: {
                        name: "String"
                    }
                },
                handledAt: {
                    serializedName: "handledAt",
                    type: {
                        name: "String"
                    }
                },
                assembly: {
                    serializedName: "assembly",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                outerType: {
                    serializedName: "outerType",
                    type: {
                        name: "String"
                    }
                },
                outerMethod: {
                    serializedName: "outerMethod",
                    type: {
                        name: "String"
                    }
                },
                outerAssembly: {
                    serializedName: "outerAssembly",
                    type: {
                        name: "String"
                    }
                },
                outerMessage: {
                    serializedName: "outerMessage",
                    type: {
                        name: "String"
                    }
                },
                innermostType: {
                    serializedName: "innermostType",
                    type: {
                        name: "String"
                    }
                },
                innermostMessage: {
                    serializedName: "innermostMessage",
                    type: {
                        name: "String"
                    }
                },
                innermostMethod: {
                    serializedName: "innermostMethod",
                    type: {
                        name: "String"
                    }
                },
                innermostAssembly: {
                    serializedName: "innermostAssembly",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventsExceptionDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventsExceptionResult = {
        serializedName: "exception",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsExceptionResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { exception: {
                    serializedName: "exception",
                    type: {
                        name: "Composite",
                        className: "EventsExceptionInfo"
                    }
                } })
        }
    };
    var EventsAvailabilityResultInfo = {
        serializedName: "eventsAvailabilityResultInfo",
        type: {
            name: "Composite",
            className: "EventsAvailabilityResultInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                success: {
                    serializedName: "success",
                    type: {
                        name: "String"
                    }
                },
                duration: {
                    serializedName: "duration",
                    type: {
                        name: "Number"
                    }
                },
                performanceBucket: {
                    serializedName: "performanceBucket",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsAvailabilityResultResult = {
        serializedName: "availabilityResult",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsAvailabilityResultResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { availabilityResult: {
                    serializedName: "availabilityResult",
                    type: {
                        name: "Composite",
                        className: "EventsAvailabilityResultInfo"
                    }
                } })
        }
    };
    var EventsPerformanceCounterInfo = {
        serializedName: "eventsPerformanceCounterInfo",
        type: {
            name: "Composite",
            className: "EventsPerformanceCounterInfo",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                counter: {
                    serializedName: "counter",
                    type: {
                        name: "String"
                    }
                },
                instanceName: {
                    serializedName: "instanceName",
                    type: {
                        name: "String"
                    }
                },
                instance: {
                    serializedName: "instance",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventsPerformanceCounterResult = {
        serializedName: "performanceCounter",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsPerformanceCounterResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { performanceCounter: {
                    serializedName: "performanceCounter",
                    type: {
                        name: "Composite",
                        className: "EventsPerformanceCounterInfo"
                    }
                } })
        }
    };
    var EventsCustomMetricInfo = {
        serializedName: "eventsCustomMetricInfo",
        type: {
            name: "Composite",
            className: "EventsCustomMetricInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                valueSum: {
                    serializedName: "valueSum",
                    type: {
                        name: "Number"
                    }
                },
                valueCount: {
                    serializedName: "valueCount",
                    type: {
                        name: "Number"
                    }
                },
                valueMin: {
                    serializedName: "valueMin",
                    type: {
                        name: "Number"
                    }
                },
                valueMax: {
                    serializedName: "valueMax",
                    type: {
                        name: "Number"
                    }
                },
                valueStdDev: {
                    serializedName: "valueStdDev",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EventsCustomMetricResult = {
        serializedName: "customMetric",
        type: {
            name: "Composite",
            polymorphicDiscriminator: EventsResultData.type.polymorphicDiscriminator,
            uberParent: "EventsResultData",
            className: "EventsCustomMetricResult",
            modelProperties: __assign({}, EventsResultData.type.modelProperties, { customMetric: {
                    serializedName: "customMetric",
                    type: {
                        name: "Composite",
                        className: "EventsCustomMetricInfo"
                    }
                } })
        }
    };
    var QueryBody = {
        serializedName: "queryBody",
        type: {
            name: "Composite",
            className: "QueryBody",
            modelProperties: {
                query: {
                    required: true,
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                timespan: {
                    serializedName: "timespan",
                    type: {
                        name: "String"
                    }
                },
                applications: {
                    serializedName: "applications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Column = {
        serializedName: "column",
        type: {
            name: "Composite",
            className: "Column",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Table = {
        serializedName: "table",
        type: {
            name: "Composite",
            className: "Table",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                columns: {
                    required: true,
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Column"
                            }
                        }
                    }
                },
                rows: {
                    required: true,
                    serializedName: "rows",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var QueryResults = {
        serializedName: "queryResults",
        type: {
            name: "Composite",
            className: "QueryResults",
            modelProperties: {
                tables: {
                    required: true,
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Table"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "errorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    required: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorInfo"
                    }
                }
            }
        }
    };
    var discriminators = {
        'eventsResultData': EventsResultData,
        'EventsResultData.trace': EventsTraceResult,
        'EventsResultData.customEvent': EventsCustomEventResult,
        'EventsResultData.pageView': EventsPageViewResult,
        'EventsResultData.browserTiming': EventsBrowserTimingResult,
        'EventsResultData.request': EventsRequestResult,
        'EventsResultData.dependency': EventsDependencyResult,
        'EventsResultData.exception': EventsExceptionResult,
        'EventsResultData.availabilityResult': EventsAvailabilityResultResult,
        'EventsResultData.performanceCounter': EventsPerformanceCounterResult,
        'EventsResultData.customMetric': EventsCustomMetricResult
    };

    var mappers = /*#__PURE__*/Object.freeze({
        MetricsPostBodySchemaParameters: MetricsPostBodySchemaParameters,
        MetricsPostBodySchema: MetricsPostBodySchema,
        MetricsSegmentInfo: MetricsSegmentInfo,
        MetricsResultInfo: MetricsResultInfo,
        MetricsResult: MetricsResult,
        MetricsResultsItem: MetricsResultsItem,
        ErrorDetail: ErrorDetail,
        ErrorInfo: ErrorInfo,
        EventsResultDataCustomDimensions: EventsResultDataCustomDimensions,
        EventsResultDataCustomMeasurements: EventsResultDataCustomMeasurements,
        EventsOperationInfo: EventsOperationInfo,
        EventsSessionInfo: EventsSessionInfo,
        EventsUserInfo: EventsUserInfo,
        EventsCloudInfo: EventsCloudInfo,
        EventsAiInfo: EventsAiInfo,
        EventsApplicationInfo: EventsApplicationInfo,
        EventsClientInfo: EventsClientInfo,
        EventsResultData: EventsResultData,
        EventsResults: EventsResults,
        EventsResult: EventsResult,
        EventsTraceInfo: EventsTraceInfo,
        EventsTraceResult: EventsTraceResult,
        EventsCustomEventInfo: EventsCustomEventInfo,
        EventsCustomEventResult: EventsCustomEventResult,
        EventsPageViewInfo: EventsPageViewInfo,
        EventsPageViewResult: EventsPageViewResult,
        EventsBrowserTimingInfo: EventsBrowserTimingInfo,
        EventsClientPerformanceInfo: EventsClientPerformanceInfo,
        EventsBrowserTimingResult: EventsBrowserTimingResult,
        EventsRequestInfo: EventsRequestInfo,
        EventsRequestResult: EventsRequestResult,
        EventsDependencyInfo: EventsDependencyInfo,
        EventsDependencyResult: EventsDependencyResult,
        EventsExceptionDetailsParsedStack: EventsExceptionDetailsParsedStack,
        EventsExceptionDetail: EventsExceptionDetail,
        EventsExceptionInfo: EventsExceptionInfo,
        EventsExceptionResult: EventsExceptionResult,
        EventsAvailabilityResultInfo: EventsAvailabilityResultInfo,
        EventsAvailabilityResultResult: EventsAvailabilityResultResult,
        EventsPerformanceCounterInfo: EventsPerformanceCounterInfo,
        EventsPerformanceCounterResult: EventsPerformanceCounterResult,
        EventsCustomMetricInfo: EventsCustomMetricInfo,
        EventsCustomMetricResult: EventsCustomMetricResult,
        QueryBody: QueryBody,
        Column: Column,
        Table: Table,
        QueryResults: QueryResults,
        ErrorResponse: ErrorResponse,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        MetricsResult: MetricsResult,
        MetricsResultInfo: MetricsResultInfo,
        MetricsSegmentInfo: MetricsSegmentInfo,
        ErrorResponse: ErrorResponse,
        ErrorInfo: ErrorInfo,
        ErrorDetail: ErrorDetail,
        MetricsPostBodySchema: MetricsPostBodySchema,
        MetricsPostBodySchemaParameters: MetricsPostBodySchemaParameters,
        MetricsResultsItem: MetricsResultsItem
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var aggregation = {
        parameterPath: [
            "options",
            "aggregation"
        ],
        mapper: {
            serializedName: "aggregation",
            constraints: {
                MinItems: 1
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var appId = {
        parameterPath: "appId",
        mapper: {
            required: true,
            serializedName: "appId",
            type: {
                name: "String"
            }
        }
    };
    var apply = {
        parameterPath: [
            "options",
            "apply"
        ],
        mapper: {
            serializedName: "$apply",
            type: {
                name: "String"
            }
        }
    };
    var count = {
        parameterPath: [
            "options",
            "count"
        ],
        mapper: {
            serializedName: "$count",
            type: {
                name: "Boolean"
            }
        }
    };
    var eventId = {
        parameterPath: "eventId",
        mapper: {
            required: true,
            serializedName: "eventId",
            type: {
                name: "String"
            }
        }
    };
    var eventType = {
        parameterPath: "eventType",
        mapper: {
            required: true,
            serializedName: "eventType",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var format = {
        parameterPath: [
            "options",
            "format"
        ],
        mapper: {
            serializedName: "$format",
            type: {
                name: "String"
            }
        }
    };
    var interval = {
        parameterPath: [
            "options",
            "interval"
        ],
        mapper: {
            serializedName: "interval",
            type: {
                name: "TimeSpan"
            }
        }
    };
    var metricId = {
        parameterPath: "metricId",
        mapper: {
            required: true,
            serializedName: "metricId",
            type: {
                name: "String"
            }
        }
    };
    var orderby0 = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "orderby",
            type: {
                name: "String"
            }
        }
    };
    var orderby1 = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var search = {
        parameterPath: [
            "options",
            "search"
        ],
        mapper: {
            serializedName: "$search",
            type: {
                name: "String"
            }
        }
    };
    var segment = {
        parameterPath: [
            "options",
            "segment"
        ],
        mapper: {
            serializedName: "segment",
            constraints: {
                MinItems: 1
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var timespan = {
        parameterPath: [
            "options",
            "timespan"
        ],
        mapper: {
            serializedName: "timespan",
            type: {
                name: "String"
            }
        }
    };
    var top0 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "top",
            type: {
                name: "Number"
            }
        }
    };
    var top1 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Metrics. */
    var Metrics = /** @class */ (function () {
        /**
         * Create a Metrics.
         * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
         */
        function Metrics(client) {
            this.client = client;
        }
        Metrics.prototype.get = function (appId$$1, metricId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                metricId: metricId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Metrics.prototype.getMultiple = function (appId$$1, body, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                body: body,
                options: options
            }, getMultipleOperationSpec, callback);
        };
        Metrics.prototype.getMetadata = function (appId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                options: options
            }, getMetadataOperationSpec, callback);
        };
        return Metrics;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "v1/apps/{appId}/metrics/{metricId}",
        urlParameters: [
            appId,
            metricId
        ],
        queryParameters: [
            timespan,
            interval,
            aggregation,
            segment,
            top0,
            orderby0,
            filter0
        ],
        responses: {
            200: {
                bodyMapper: MetricsResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getMultipleOperationSpec = {
        httpMethod: "POST",
        path: "v1/apps/{appId}/metrics",
        urlParameters: [
            appId
        ],
        requestBody: {
            parameterPath: "body",
            mapper: {
                required: true,
                serializedName: "body",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricsPostBodySchema"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricsResultsItem"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getMetadataOperationSpec = {
        httpMethod: "GET",
        path: "v1/apps/{appId}/metrics/metadata",
        urlParameters: [
            appId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        EventsResults: EventsResults,
        ErrorInfo: ErrorInfo,
        ErrorDetail: ErrorDetail,
        EventsResultData: EventsResultData,
        EventsResultDataCustomDimensions: EventsResultDataCustomDimensions,
        EventsResultDataCustomMeasurements: EventsResultDataCustomMeasurements,
        EventsOperationInfo: EventsOperationInfo,
        EventsSessionInfo: EventsSessionInfo,
        EventsUserInfo: EventsUserInfo,
        EventsCloudInfo: EventsCloudInfo,
        EventsAiInfo: EventsAiInfo,
        EventsApplicationInfo: EventsApplicationInfo,
        EventsClientInfo: EventsClientInfo,
        ErrorResponse: ErrorResponse,
        EventsTraceResult: EventsTraceResult,
        EventsTraceInfo: EventsTraceInfo,
        EventsCustomEventResult: EventsCustomEventResult,
        EventsCustomEventInfo: EventsCustomEventInfo,
        EventsPageViewResult: EventsPageViewResult,
        EventsPageViewInfo: EventsPageViewInfo,
        EventsBrowserTimingResult: EventsBrowserTimingResult,
        EventsBrowserTimingInfo: EventsBrowserTimingInfo,
        EventsClientPerformanceInfo: EventsClientPerformanceInfo,
        EventsRequestResult: EventsRequestResult,
        EventsRequestInfo: EventsRequestInfo,
        EventsDependencyResult: EventsDependencyResult,
        EventsDependencyInfo: EventsDependencyInfo,
        EventsExceptionResult: EventsExceptionResult,
        EventsExceptionInfo: EventsExceptionInfo,
        EventsExceptionDetail: EventsExceptionDetail,
        EventsExceptionDetailsParsedStack: EventsExceptionDetailsParsedStack,
        EventsAvailabilityResultResult: EventsAvailabilityResultResult,
        EventsAvailabilityResultInfo: EventsAvailabilityResultInfo,
        EventsPerformanceCounterResult: EventsPerformanceCounterResult,
        EventsPerformanceCounterInfo: EventsPerformanceCounterInfo,
        EventsCustomMetricResult: EventsCustomMetricResult,
        EventsCustomMetricInfo: EventsCustomMetricInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Events. */
    var Events = /** @class */ (function () {
        /**
         * Create a Events.
         * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
         */
        function Events(client) {
            this.client = client;
        }
        Events.prototype.getByType = function (appId$$1, eventType$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                eventType: eventType$$1,
                options: options
            }, getByTypeOperationSpec, callback);
        };
        Events.prototype.get = function (appId$$1, eventType$$1, eventId$$1, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                eventType: eventType$$1,
                eventId: eventId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        return Events;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getByTypeOperationSpec = {
        httpMethod: "GET",
        path: "v1/apps/{appId}/events/{eventType}",
        urlParameters: [
            appId,
            eventType
        ],
        queryParameters: [
            timespan,
            filter1,
            search,
            orderby1,
            select,
            skip,
            top1,
            format,
            count,
            apply
        ],
        responses: {
            200: {
                bodyMapper: EventsResults
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "v1/apps/{appId}/events/{eventType}/{eventId}",
        urlParameters: [
            appId,
            eventType,
            eventId
        ],
        queryParameters: [
            timespan
        ],
        responses: {
            200: {
                bodyMapper: EventsResults
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        QueryBody: QueryBody,
        QueryResults: QueryResults,
        Table: Table,
        Column: Column,
        ErrorResponse: ErrorResponse,
        ErrorInfo: ErrorInfo,
        ErrorDetail: ErrorDetail
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Query. */
    var Query = /** @class */ (function () {
        /**
         * Create a Query.
         * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
         */
        function Query(client) {
            this.client = client;
        }
        Query.prototype.execute = function (appId$$1, body, options, callback) {
            return this.client.sendOperationRequest({
                appId: appId$$1,
                body: body,
                options: options
            }, executeOperationSpec, callback);
        };
        return Query;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var executeOperationSpec = {
        httpMethod: "POST",
        path: "v1/apps/{appId}/query",
        urlParameters: [
            appId
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, QueryBody, { required: true })
        },
        responses: {
            200: {
                bodyMapper: QueryResults
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/applicationinsights-query";
    var packageVersion = "1.0.0-preview";
    var ApplicationInsightsDataClientContext = /** @class */ (function (_super) {
        __extends(ApplicationInsightsDataClientContext, _super);
        /**
         * Initializes a new instance of the ApplicationInsightsDataClientContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function ApplicationInsightsDataClientContext(credentials, options) {
            var _this = this;
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = options.baseUri || _this.baseUri || "https://api.applicationinsights.io";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return ApplicationInsightsDataClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ApplicationInsightsDataClient = /** @class */ (function (_super) {
        __extends(ApplicationInsightsDataClient, _super);
        /**
         * Initializes a new instance of the ApplicationInsightsDataClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function ApplicationInsightsDataClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.metrics = new Metrics(_this);
            _this.events = new Events(_this);
            _this.query = new Query(_this);
            return _this;
        }
        return ApplicationInsightsDataClient;
    }(ApplicationInsightsDataClientContext));

    exports.ApplicationInsightsDataClient = ApplicationInsightsDataClient;
    exports.ApplicationInsightsDataClientContext = ApplicationInsightsDataClientContext;
    exports.ApplicationInsightsDataModels = index;
    exports.ApplicationInsightsDataMappers = mappers;
    exports.Metrics = Metrics;
    exports.Events = Events;
    exports.Query = Query;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=applicationinsights-query.js.map
