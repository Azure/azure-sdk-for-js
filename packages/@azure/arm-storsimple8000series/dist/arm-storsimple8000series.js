/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmStorsimple8000series = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for AlertScope.
     * Possible values include: 'Resource', 'Device'
     * @readonly
     * @enum {string}
     */
    var AlertScope;
    (function (AlertScope) {
        AlertScope["Resource"] = "Resource";
        AlertScope["Device"] = "Device";
    })(AlertScope || (AlertScope = {}));
    /**
     * Defines values for AlertSourceType.
     * Possible values include: 'Resource', 'Device'
     * @readonly
     * @enum {string}
     */
    var AlertSourceType;
    (function (AlertSourceType) {
        AlertSourceType["Resource"] = "Resource";
        AlertSourceType["Device"] = "Device";
    })(AlertSourceType || (AlertSourceType = {}));
    /**
     * Defines values for AlertSeverity.
     * Possible values include: 'Informational', 'Warning', 'Critical'
     * @readonly
     * @enum {string}
     */
    var AlertSeverity;
    (function (AlertSeverity) {
        AlertSeverity["Informational"] = "Informational";
        AlertSeverity["Warning"] = "Warning";
        AlertSeverity["Critical"] = "Critical";
    })(AlertSeverity || (AlertSeverity = {}));
    /**
     * Defines values for AlertStatus.
     * Possible values include: 'Active', 'Cleared'
     * @readonly
     * @enum {string}
     */
    var AlertStatus;
    (function (AlertStatus) {
        AlertStatus["Active"] = "Active";
        AlertStatus["Cleared"] = "Cleared";
    })(AlertStatus || (AlertStatus = {}));
    /**
     * Defines values for AlertEmailNotificationStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var AlertEmailNotificationStatus;
    (function (AlertEmailNotificationStatus) {
        AlertEmailNotificationStatus["Enabled"] = "Enabled";
        AlertEmailNotificationStatus["Disabled"] = "Disabled";
    })(AlertEmailNotificationStatus || (AlertEmailNotificationStatus = {}));
    /**
     * Defines values for EncryptionAlgorithm.
     * Possible values include: 'None', 'AES256', 'RSAES_PKCS1_v_1_5'
     * @readonly
     * @enum {string}
     */
    var EncryptionAlgorithm;
    (function (EncryptionAlgorithm) {
        EncryptionAlgorithm["None"] = "None";
        EncryptionAlgorithm["AES256"] = "AES256";
        EncryptionAlgorithm["RSAESPKCS1V15"] = "RSAES_PKCS1_v_1_5";
    })(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
    /**
     * Defines values for BackupType.
     * Possible values include: 'LocalSnapshot', 'CloudSnapshot'
     * @readonly
     * @enum {string}
     */
    var BackupType;
    (function (BackupType) {
        BackupType["LocalSnapshot"] = "LocalSnapshot";
        BackupType["CloudSnapshot"] = "CloudSnapshot";
    })(BackupType || (BackupType = {}));
    /**
     * Defines values for BackupJobCreationType.
     * Possible values include: 'Adhoc', 'BySchedule', 'BySSM'
     * @readonly
     * @enum {string}
     */
    var BackupJobCreationType;
    (function (BackupJobCreationType) {
        BackupJobCreationType["Adhoc"] = "Adhoc";
        BackupJobCreationType["BySchedule"] = "BySchedule";
        BackupJobCreationType["BySSM"] = "BySSM";
    })(BackupJobCreationType || (BackupJobCreationType = {}));
    /**
     * Defines values for VolumeType.
     * Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
     * @readonly
     * @enum {string}
     */
    var VolumeType;
    (function (VolumeType) {
        VolumeType["Tiered"] = "Tiered";
        VolumeType["Archival"] = "Archival";
        VolumeType["LocallyPinned"] = "LocallyPinned";
    })(VolumeType || (VolumeType = {}));
    /**
     * Defines values for ScheduledBackupStatus.
     * Possible values include: 'Disabled', 'Enabled'
     * @readonly
     * @enum {string}
     */
    var ScheduledBackupStatus;
    (function (ScheduledBackupStatus) {
        ScheduledBackupStatus["Disabled"] = "Disabled";
        ScheduledBackupStatus["Enabled"] = "Enabled";
    })(ScheduledBackupStatus || (ScheduledBackupStatus = {}));
    /**
     * Defines values for BackupPolicyCreationType.
     * Possible values include: 'BySaaS', 'BySSM'
     * @readonly
     * @enum {string}
     */
    var BackupPolicyCreationType;
    (function (BackupPolicyCreationType) {
        BackupPolicyCreationType["BySaaS"] = "BySaaS";
        BackupPolicyCreationType["BySSM"] = "BySSM";
    })(BackupPolicyCreationType || (BackupPolicyCreationType = {}));
    /**
     * Defines values for RecurrenceType.
     * Possible values include: 'Minutes', 'Hourly', 'Daily', 'Weekly'
     * @readonly
     * @enum {string}
     */
    var RecurrenceType;
    (function (RecurrenceType) {
        RecurrenceType["Minutes"] = "Minutes";
        RecurrenceType["Hourly"] = "Hourly";
        RecurrenceType["Daily"] = "Daily";
        RecurrenceType["Weekly"] = "Weekly";
    })(RecurrenceType || (RecurrenceType = {}));
    /**
     * Defines values for DayOfWeek.
     * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
     * 'Thursday', 'Friday', 'Saturday'
     * @readonly
     * @enum {string}
     */
    var DayOfWeek;
    (function (DayOfWeek) {
        DayOfWeek["Sunday"] = "Sunday";
        DayOfWeek["Monday"] = "Monday";
        DayOfWeek["Tuesday"] = "Tuesday";
        DayOfWeek["Wednesday"] = "Wednesday";
        DayOfWeek["Thursday"] = "Thursday";
        DayOfWeek["Friday"] = "Friday";
        DayOfWeek["Saturday"] = "Saturday";
    })(DayOfWeek || (DayOfWeek = {}));
    /**
     * Defines values for ScheduleStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var ScheduleStatus;
    (function (ScheduleStatus) {
        ScheduleStatus["Enabled"] = "Enabled";
        ScheduleStatus["Disabled"] = "Disabled";
    })(ScheduleStatus || (ScheduleStatus = {}));
    /**
     * Defines values for Kind.
     * Possible values include: 'Series8000'
     * @readonly
     * @enum {string}
     */
    var Kind;
    (function (Kind) {
        Kind["Series8000"] = "Series8000";
    })(Kind || (Kind = {}));
    /**
     * Defines values for ControllerPowerStateAction.
     * Possible values include: 'Start', 'Restart', 'Shutdown'
     * @readonly
     * @enum {string}
     */
    var ControllerPowerStateAction;
    (function (ControllerPowerStateAction) {
        ControllerPowerStateAction["Start"] = "Start";
        ControllerPowerStateAction["Restart"] = "Restart";
        ControllerPowerStateAction["Shutdown"] = "Shutdown";
    })(ControllerPowerStateAction || (ControllerPowerStateAction = {}));
    /**
     * Defines values for ControllerId.
     * Possible values include: 'Unknown', 'None', 'Controller0', 'Controller1'
     * @readonly
     * @enum {string}
     */
    var ControllerId;
    (function (ControllerId) {
        ControllerId["Unknown"] = "Unknown";
        ControllerId["None"] = "None";
        ControllerId["Controller0"] = "Controller0";
        ControllerId["Controller1"] = "Controller1";
    })(ControllerId || (ControllerId = {}));
    /**
     * Defines values for ControllerStatus.
     * Possible values include: 'NotPresent', 'PoweredOff', 'Ok', 'Recovering',
     * 'Warning', 'Failure'
     * @readonly
     * @enum {string}
     */
    var ControllerStatus;
    (function (ControllerStatus) {
        ControllerStatus["NotPresent"] = "NotPresent";
        ControllerStatus["PoweredOff"] = "PoweredOff";
        ControllerStatus["Ok"] = "Ok";
        ControllerStatus["Recovering"] = "Recovering";
        ControllerStatus["Warning"] = "Warning";
        ControllerStatus["Failure"] = "Failure";
    })(ControllerStatus || (ControllerStatus = {}));
    /**
     * Defines values for DeviceConfigurationStatus.
     * Possible values include: 'Complete', 'Pending'
     * @readonly
     * @enum {string}
     */
    var DeviceConfigurationStatus;
    (function (DeviceConfigurationStatus) {
        DeviceConfigurationStatus["Complete"] = "Complete";
        DeviceConfigurationStatus["Pending"] = "Pending";
    })(DeviceConfigurationStatus || (DeviceConfigurationStatus = {}));
    /**
     * Defines values for DeviceStatus.
     * Possible values include: 'Unknown', 'Online', 'Offline', 'Deactivated',
     * 'RequiresAttention', 'MaintenanceMode', 'Creating', 'Provisioning',
     * 'Deactivating', 'Deleted', 'ReadyToSetup'
     * @readonly
     * @enum {string}
     */
    var DeviceStatus;
    (function (DeviceStatus) {
        DeviceStatus["Unknown"] = "Unknown";
        DeviceStatus["Online"] = "Online";
        DeviceStatus["Offline"] = "Offline";
        DeviceStatus["Deactivated"] = "Deactivated";
        DeviceStatus["RequiresAttention"] = "RequiresAttention";
        DeviceStatus["MaintenanceMode"] = "MaintenanceMode";
        DeviceStatus["Creating"] = "Creating";
        DeviceStatus["Provisioning"] = "Provisioning";
        DeviceStatus["Deactivating"] = "Deactivating";
        DeviceStatus["Deleted"] = "Deleted";
        DeviceStatus["ReadyToSetup"] = "ReadyToSetup";
    })(DeviceStatus || (DeviceStatus = {}));
    /**
     * Defines values for DeviceType.
     * Possible values include: 'Invalid', 'Series8000VirtualAppliance',
     * 'Series8000PhysicalAppliance'
     * @readonly
     * @enum {string}
     */
    var DeviceType;
    (function (DeviceType) {
        DeviceType["Invalid"] = "Invalid";
        DeviceType["Series8000VirtualAppliance"] = "Series8000VirtualAppliance";
        DeviceType["Series8000PhysicalAppliance"] = "Series8000PhysicalAppliance";
    })(DeviceType || (DeviceType = {}));
    /**
     * Defines values for VirtualMachineApiType.
     * Possible values include: 'Classic', 'Arm'
     * @readonly
     * @enum {string}
     */
    var VirtualMachineApiType;
    (function (VirtualMachineApiType) {
        VirtualMachineApiType["Classic"] = "Classic";
        VirtualMachineApiType["Arm"] = "Arm";
    })(VirtualMachineApiType || (VirtualMachineApiType = {}));
    /**
     * Defines values for AuthorizationEligibility.
     * Possible values include: 'InEligible', 'Eligible'
     * @readonly
     * @enum {string}
     */
    var AuthorizationEligibility;
    (function (AuthorizationEligibility) {
        AuthorizationEligibility["InEligible"] = "InEligible";
        AuthorizationEligibility["Eligible"] = "Eligible";
    })(AuthorizationEligibility || (AuthorizationEligibility = {}));
    /**
     * Defines values for AuthorizationStatus.
     * Possible values include: 'Disabled', 'Enabled'
     * @readonly
     * @enum {string}
     */
    var AuthorizationStatus;
    (function (AuthorizationStatus) {
        AuthorizationStatus["Disabled"] = "Disabled";
        AuthorizationStatus["Enabled"] = "Enabled";
    })(AuthorizationStatus || (AuthorizationStatus = {}));
    /**
     * Defines values for InEligibilityCategory.
     * Possible values include: 'DeviceNotOnline', 'NotSupportedAppliance',
     * 'RolloverPending'
     * @readonly
     * @enum {string}
     */
    var InEligibilityCategory;
    (function (InEligibilityCategory) {
        InEligibilityCategory["DeviceNotOnline"] = "DeviceNotOnline";
        InEligibilityCategory["NotSupportedAppliance"] = "NotSupportedAppliance";
        InEligibilityCategory["RolloverPending"] = "RolloverPending";
    })(InEligibilityCategory || (InEligibilityCategory = {}));
    /**
     * Defines values for EncryptionStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var EncryptionStatus;
    (function (EncryptionStatus) {
        EncryptionStatus["Enabled"] = "Enabled";
        EncryptionStatus["Disabled"] = "Disabled";
    })(EncryptionStatus || (EncryptionStatus = {}));
    /**
     * Defines values for KeyRolloverStatus.
     * Possible values include: 'Required', 'NotRequired'
     * @readonly
     * @enum {string}
     */
    var KeyRolloverStatus;
    (function (KeyRolloverStatus) {
        KeyRolloverStatus["Required"] = "Required";
        KeyRolloverStatus["NotRequired"] = "NotRequired";
    })(KeyRolloverStatus || (KeyRolloverStatus = {}));
    /**
     * Defines values for TargetEligibilityStatus.
     * Possible values include: 'NotEligible', 'Eligible'
     * @readonly
     * @enum {string}
     */
    var TargetEligibilityStatus;
    (function (TargetEligibilityStatus) {
        TargetEligibilityStatus["NotEligible"] = "NotEligible";
        TargetEligibilityStatus["Eligible"] = "Eligible";
    })(TargetEligibilityStatus || (TargetEligibilityStatus = {}));
    /**
     * Defines values for TargetEligibilityResultCode.
     * Possible values include: 'TargetAndSourceCannotBeSameError',
     * 'TargetIsNotOnlineError', 'TargetSourceIncompatibleVersionError',
     * 'LocalToTieredVolumesConversionWarning', 'TargetInsufficientCapacityError',
     * 'TargetInsufficientLocalVolumeMemoryError',
     * 'TargetInsufficientTieredVolumeMemoryError'
     * @readonly
     * @enum {string}
     */
    var TargetEligibilityResultCode;
    (function (TargetEligibilityResultCode) {
        TargetEligibilityResultCode["TargetAndSourceCannotBeSameError"] = "TargetAndSourceCannotBeSameError";
        TargetEligibilityResultCode["TargetIsNotOnlineError"] = "TargetIsNotOnlineError";
        TargetEligibilityResultCode["TargetSourceIncompatibleVersionError"] = "TargetSourceIncompatibleVersionError";
        TargetEligibilityResultCode["LocalToTieredVolumesConversionWarning"] = "LocalToTieredVolumesConversionWarning";
        TargetEligibilityResultCode["TargetInsufficientCapacityError"] = "TargetInsufficientCapacityError";
        TargetEligibilityResultCode["TargetInsufficientLocalVolumeMemoryError"] = "TargetInsufficientLocalVolumeMemoryError";
        TargetEligibilityResultCode["TargetInsufficientTieredVolumeMemoryError"] = "TargetInsufficientTieredVolumeMemoryError";
    })(TargetEligibilityResultCode || (TargetEligibilityResultCode = {}));
    /**
     * Defines values for FeatureSupportStatus.
     * Possible values include: 'NotAvailable', 'UnsupportedDeviceVersion',
     * 'Supported'
     * @readonly
     * @enum {string}
     */
    var FeatureSupportStatus;
    (function (FeatureSupportStatus) {
        FeatureSupportStatus["NotAvailable"] = "NotAvailable";
        FeatureSupportStatus["UnsupportedDeviceVersion"] = "UnsupportedDeviceVersion";
        FeatureSupportStatus["Supported"] = "Supported";
    })(FeatureSupportStatus || (FeatureSupportStatus = {}));
    /**
     * Defines values for HardwareComponentStatus.
     * Possible values include: 'Unknown', 'NotPresent', 'PoweredOff', 'Ok',
     * 'Recovering', 'Warning', 'Failure'
     * @readonly
     * @enum {string}
     */
    var HardwareComponentStatus;
    (function (HardwareComponentStatus) {
        HardwareComponentStatus["Unknown"] = "Unknown";
        HardwareComponentStatus["NotPresent"] = "NotPresent";
        HardwareComponentStatus["PoweredOff"] = "PoweredOff";
        HardwareComponentStatus["Ok"] = "Ok";
        HardwareComponentStatus["Recovering"] = "Recovering";
        HardwareComponentStatus["Warning"] = "Warning";
        HardwareComponentStatus["Failure"] = "Failure";
    })(HardwareComponentStatus || (HardwareComponentStatus = {}));
    /**
     * Defines values for JobStatus.
     * Possible values include: 'Running', 'Succeeded', 'Failed', 'Canceled'
     * @readonly
     * @enum {string}
     */
    var JobStatus;
    (function (JobStatus) {
        JobStatus["Running"] = "Running";
        JobStatus["Succeeded"] = "Succeeded";
        JobStatus["Failed"] = "Failed";
        JobStatus["Canceled"] = "Canceled";
    })(JobStatus || (JobStatus = {}));
    /**
     * Defines values for JobType.
     * Possible values include: 'ScheduledBackup', 'ManualBackup', 'RestoreBackup',
     * 'CloneVolume', 'FailoverVolumeContainers', 'CreateLocallyPinnedVolume',
     * 'ModifyVolume', 'InstallUpdates', 'SupportPackageLogs',
     * 'CreateCloudAppliance'
     * @readonly
     * @enum {string}
     */
    var JobType;
    (function (JobType) {
        JobType["ScheduledBackup"] = "ScheduledBackup";
        JobType["ManualBackup"] = "ManualBackup";
        JobType["RestoreBackup"] = "RestoreBackup";
        JobType["CloneVolume"] = "CloneVolume";
        JobType["FailoverVolumeContainers"] = "FailoverVolumeContainers";
        JobType["CreateLocallyPinnedVolume"] = "CreateLocallyPinnedVolume";
        JobType["ModifyVolume"] = "ModifyVolume";
        JobType["InstallUpdates"] = "InstallUpdates";
        JobType["SupportPackageLogs"] = "SupportPackageLogs";
        JobType["CreateCloudAppliance"] = "CreateCloudAppliance";
    })(JobType || (JobType = {}));
    /**
     * Defines values for ManagerType.
     * Possible values include: 'GardaV1', 'HelsinkiV1'
     * @readonly
     * @enum {string}
     */
    var ManagerType;
    (function (ManagerType) {
        ManagerType["GardaV1"] = "GardaV1";
        ManagerType["HelsinkiV1"] = "HelsinkiV1";
    })(ManagerType || (ManagerType = {}));
    /**
     * Defines values for MetricUnit.
     * Possible values include: 'Bytes', 'BytesPerSecond', 'Count',
     * 'CountPerSecond', 'Percent', 'Seconds'
     * @readonly
     * @enum {string}
     */
    var MetricUnit;
    (function (MetricUnit) {
        MetricUnit["Bytes"] = "Bytes";
        MetricUnit["BytesPerSecond"] = "BytesPerSecond";
        MetricUnit["Count"] = "Count";
        MetricUnit["CountPerSecond"] = "CountPerSecond";
        MetricUnit["Percent"] = "Percent";
        MetricUnit["Seconds"] = "Seconds";
    })(MetricUnit || (MetricUnit = {}));
    /**
     * Defines values for MetricAggregationType.
     * Possible values include: 'Average', 'Last', 'Maximum', 'Minimum', 'None',
     * 'Total'
     * @readonly
     * @enum {string}
     */
    var MetricAggregationType;
    (function (MetricAggregationType) {
        MetricAggregationType["Average"] = "Average";
        MetricAggregationType["Last"] = "Last";
        MetricAggregationType["Maximum"] = "Maximum";
        MetricAggregationType["Minimum"] = "Minimum";
        MetricAggregationType["None"] = "None";
        MetricAggregationType["Total"] = "Total";
    })(MetricAggregationType || (MetricAggregationType = {}));
    /**
     * Defines values for NetInterfaceId.
     * Possible values include: 'Invalid', 'Data0', 'Data1', 'Data2', 'Data3',
     * 'Data4', 'Data5'
     * @readonly
     * @enum {string}
     */
    var NetInterfaceId;
    (function (NetInterfaceId) {
        NetInterfaceId["Invalid"] = "Invalid";
        NetInterfaceId["Data0"] = "Data0";
        NetInterfaceId["Data1"] = "Data1";
        NetInterfaceId["Data2"] = "Data2";
        NetInterfaceId["Data3"] = "Data3";
        NetInterfaceId["Data4"] = "Data4";
        NetInterfaceId["Data5"] = "Data5";
    })(NetInterfaceId || (NetInterfaceId = {}));
    /**
     * Defines values for NetInterfaceStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var NetInterfaceStatus;
    (function (NetInterfaceStatus) {
        NetInterfaceStatus["Enabled"] = "Enabled";
        NetInterfaceStatus["Disabled"] = "Disabled";
    })(NetInterfaceStatus || (NetInterfaceStatus = {}));
    /**
     * Defines values for ISCSIAndCloudStatus.
     * Possible values include: 'Disabled', 'IscsiEnabled', 'CloudEnabled',
     * 'IscsiAndCloudEnabled'
     * @readonly
     * @enum {string}
     */
    var ISCSIAndCloudStatus;
    (function (ISCSIAndCloudStatus) {
        ISCSIAndCloudStatus["Disabled"] = "Disabled";
        ISCSIAndCloudStatus["IscsiEnabled"] = "IscsiEnabled";
        ISCSIAndCloudStatus["CloudEnabled"] = "CloudEnabled";
        ISCSIAndCloudStatus["IscsiAndCloudEnabled"] = "IscsiAndCloudEnabled";
    })(ISCSIAndCloudStatus || (ISCSIAndCloudStatus = {}));
    /**
     * Defines values for NetworkMode.
     * Possible values include: 'Invalid', 'IPV4', 'IPV6', 'BOTH'
     * @readonly
     * @enum {string}
     */
    var NetworkMode;
    (function (NetworkMode) {
        NetworkMode["Invalid"] = "Invalid";
        NetworkMode["IPV4"] = "IPV4";
        NetworkMode["IPV6"] = "IPV6";
        NetworkMode["BOTH"] = "BOTH";
    })(NetworkMode || (NetworkMode = {}));
    /**
     * Defines values for AuthenticationType.
     * Possible values include: 'Invalid', 'None', 'Basic', 'NTLM'
     * @readonly
     * @enum {string}
     */
    var AuthenticationType;
    (function (AuthenticationType) {
        AuthenticationType["Invalid"] = "Invalid";
        AuthenticationType["None"] = "None";
        AuthenticationType["Basic"] = "Basic";
        AuthenticationType["NTLM"] = "NTLM";
    })(AuthenticationType || (AuthenticationType = {}));
    /**
     * Defines values for RemoteManagementModeConfiguration.
     * Possible values include: 'Unknown', 'Disabled', 'HttpsEnabled',
     * 'HttpsAndHttpEnabled'
     * @readonly
     * @enum {string}
     */
    var RemoteManagementModeConfiguration;
    (function (RemoteManagementModeConfiguration) {
        RemoteManagementModeConfiguration["Unknown"] = "Unknown";
        RemoteManagementModeConfiguration["Disabled"] = "Disabled";
        RemoteManagementModeConfiguration["HttpsEnabled"] = "HttpsEnabled";
        RemoteManagementModeConfiguration["HttpsAndHttpEnabled"] = "HttpsAndHttpEnabled";
    })(RemoteManagementModeConfiguration || (RemoteManagementModeConfiguration = {}));
    /**
     * Defines values for SslStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var SslStatus;
    (function (SslStatus) {
        SslStatus["Enabled"] = "Enabled";
        SslStatus["Disabled"] = "Disabled";
    })(SslStatus || (SslStatus = {}));
    /**
     * Defines values for VolumeStatus.
     * Possible values include: 'Online', 'Offline'
     * @readonly
     * @enum {string}
     */
    var VolumeStatus;
    (function (VolumeStatus) {
        VolumeStatus["Online"] = "Online";
        VolumeStatus["Offline"] = "Offline";
    })(VolumeStatus || (VolumeStatus = {}));
    /**
     * Defines values for OperationStatus.
     * Possible values include: 'None', 'Updating', 'Deleting', 'Restoring'
     * @readonly
     * @enum {string}
     */
    var OperationStatus;
    (function (OperationStatus) {
        OperationStatus["None"] = "None";
        OperationStatus["Updating"] = "Updating";
        OperationStatus["Deleting"] = "Deleting";
        OperationStatus["Restoring"] = "Restoring";
    })(OperationStatus || (OperationStatus = {}));
    /**
     * Defines values for BackupStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var BackupStatus;
    (function (BackupStatus) {
        BackupStatus["Enabled"] = "Enabled";
        BackupStatus["Disabled"] = "Disabled";
    })(BackupStatus || (BackupStatus = {}));
    /**
     * Defines values for MonitoringStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var MonitoringStatus;
    (function (MonitoringStatus) {
        MonitoringStatus["Enabled"] = "Enabled";
        MonitoringStatus["Disabled"] = "Disabled";
    })(MonitoringStatus || (MonitoringStatus = {}));
    /**
     * Defines values for OwnerShipStatus.
     * Possible values include: 'Owned', 'NotOwned'
     * @readonly
     * @enum {string}
     */
    var OwnerShipStatus;
    (function (OwnerShipStatus) {
        OwnerShipStatus["Owned"] = "Owned";
        OwnerShipStatus["NotOwned"] = "NotOwned";
    })(OwnerShipStatus || (OwnerShipStatus = {}));

    var index = /*#__PURE__*/Object.freeze({
        get AlertScope () { return AlertScope; },
        get AlertSourceType () { return AlertSourceType; },
        get AlertSeverity () { return AlertSeverity; },
        get AlertStatus () { return AlertStatus; },
        get AlertEmailNotificationStatus () { return AlertEmailNotificationStatus; },
        get EncryptionAlgorithm () { return EncryptionAlgorithm; },
        get BackupType () { return BackupType; },
        get BackupJobCreationType () { return BackupJobCreationType; },
        get VolumeType () { return VolumeType; },
        get ScheduledBackupStatus () { return ScheduledBackupStatus; },
        get BackupPolicyCreationType () { return BackupPolicyCreationType; },
        get RecurrenceType () { return RecurrenceType; },
        get DayOfWeek () { return DayOfWeek; },
        get ScheduleStatus () { return ScheduleStatus; },
        get Kind () { return Kind; },
        get ControllerPowerStateAction () { return ControllerPowerStateAction; },
        get ControllerId () { return ControllerId; },
        get ControllerStatus () { return ControllerStatus; },
        get DeviceConfigurationStatus () { return DeviceConfigurationStatus; },
        get DeviceStatus () { return DeviceStatus; },
        get DeviceType () { return DeviceType; },
        get VirtualMachineApiType () { return VirtualMachineApiType; },
        get AuthorizationEligibility () { return AuthorizationEligibility; },
        get AuthorizationStatus () { return AuthorizationStatus; },
        get InEligibilityCategory () { return InEligibilityCategory; },
        get EncryptionStatus () { return EncryptionStatus; },
        get KeyRolloverStatus () { return KeyRolloverStatus; },
        get TargetEligibilityStatus () { return TargetEligibilityStatus; },
        get TargetEligibilityResultCode () { return TargetEligibilityResultCode; },
        get FeatureSupportStatus () { return FeatureSupportStatus; },
        get HardwareComponentStatus () { return HardwareComponentStatus; },
        get JobStatus () { return JobStatus; },
        get JobType () { return JobType; },
        get ManagerType () { return ManagerType; },
        get MetricUnit () { return MetricUnit; },
        get MetricAggregationType () { return MetricAggregationType; },
        get NetInterfaceId () { return NetInterfaceId; },
        get NetInterfaceStatus () { return NetInterfaceStatus; },
        get ISCSIAndCloudStatus () { return ISCSIAndCloudStatus; },
        get NetworkMode () { return NetworkMode; },
        get AuthenticationType () { return AuthenticationType; },
        get RemoteManagementModeConfiguration () { return RemoteManagementModeConfiguration; },
        get SslStatus () { return SslStatus; },
        get VolumeStatus () { return VolumeStatus; },
        get OperationStatus () { return OperationStatus; },
        get BackupStatus () { return BackupStatus; },
        get MonitoringStatus () { return MonitoringStatus; },
        get OwnerShipStatus () { return OwnerShipStatus; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var BaseModel = {
        serializedName: "BaseModel",
        type: {
            name: "Composite",
            className: "BaseModel",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Series8000"
                        ]
                    }
                }
            }
        }
    };
    var AccessControlRecord = {
        serializedName: "AccessControlRecord",
        type: {
            name: "Composite",
            className: "AccessControlRecord",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { initiatorName: {
                    required: true,
                    serializedName: "properties.initiatorName",
                    type: {
                        name: "String"
                    }
                }, volumeCount: {
                    readOnly: true,
                    serializedName: "properties.volumeCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var AcsConfiguration = {
        serializedName: "AcsConfiguration",
        type: {
            name: "Composite",
            className: "AcsConfiguration",
            modelProperties: {
                namespace: {
                    required: true,
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                },
                realm: {
                    required: true,
                    serializedName: "realm",
                    type: {
                        name: "String"
                    }
                },
                serviceUrl: {
                    required: true,
                    serializedName: "serviceUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AlertSource = {
        serializedName: "AlertSource",
        type: {
            name: "Composite",
            className: "AlertSource",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                alertSourceType: {
                    serializedName: "alertSourceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Resource",
                            "Device"
                        ]
                    }
                }
            }
        }
    };
    var AlertErrorDetails = {
        serializedName: "AlertErrorDetails",
        type: {
            name: "Composite",
            className: "AlertErrorDetails",
            modelProperties: {
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                occurences: {
                    serializedName: "occurences",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Alert = {
        serializedName: "Alert",
        type: {
            name: "Composite",
            className: "Alert",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { title: {
                    required: true,
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, scope: {
                    required: true,
                    serializedName: "properties.scope",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Resource",
                            "Device"
                        ]
                    }
                }, alertType: {
                    required: true,
                    serializedName: "properties.alertType",
                    type: {
                        name: "String"
                    }
                }, appearedAtTime: {
                    required: true,
                    serializedName: "properties.appearedAtTime",
                    type: {
                        name: "DateTime"
                    }
                }, appearedAtSourceTime: {
                    required: true,
                    serializedName: "properties.appearedAtSourceTime",
                    type: {
                        name: "DateTime"
                    }
                }, clearedAtTime: {
                    serializedName: "properties.clearedAtTime",
                    type: {
                        name: "DateTime"
                    }
                }, clearedAtSourceTime: {
                    serializedName: "properties.clearedAtSourceTime",
                    type: {
                        name: "DateTime"
                    }
                }, source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "AlertSource"
                    }
                }, recommendation: {
                    serializedName: "properties.recommendation",
                    type: {
                        name: "String"
                    }
                }, resolutionReason: {
                    serializedName: "properties.resolutionReason",
                    type: {
                        name: "String"
                    }
                }, severity: {
                    required: true,
                    serializedName: "properties.severity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Informational",
                            "Warning",
                            "Critical"
                        ]
                    }
                }, status: {
                    required: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Cleared"
                        ]
                    }
                }, errorDetails: {
                    serializedName: "properties.errorDetails",
                    type: {
                        name: "Composite",
                        className: "AlertErrorDetails"
                    }
                }, detailedInformation: {
                    serializedName: "properties.detailedInformation",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AlertFilter = {
        serializedName: "AlertFilter",
        type: {
            name: "Composite",
            className: "AlertFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Cleared"
                        ]
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Informational",
                            "Warning",
                            "Critical"
                        ]
                    }
                },
                sourceType: {
                    serializedName: "sourceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Resource",
                            "Device"
                        ]
                    }
                },
                sourceName: {
                    serializedName: "sourceName",
                    type: {
                        name: "String"
                    }
                },
                appearedOnTime: {
                    serializedName: "appearedOnTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AlertSettings = {
        serializedName: "AlertSettings",
        type: {
            name: "Composite",
            className: "AlertSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { emailNotification: {
                    required: true,
                    serializedName: "properties.emailNotification",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, alertNotificationCulture: {
                    serializedName: "properties.alertNotificationCulture",
                    type: {
                        name: "String"
                    }
                }, notificationToServiceOwners: {
                    serializedName: "properties.notificationToServiceOwners",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, additionalRecipientEmailList: {
                    serializedName: "properties.additionalRecipientEmailList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AsymmetricEncryptedSecret = {
        serializedName: "AsymmetricEncryptedSecret",
        type: {
            name: "Composite",
            className: "AsymmetricEncryptedSecret",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                encryptionCertThumbprint: {
                    serializedName: "encryptionCertThumbprint",
                    type: {
                        name: "String"
                    }
                },
                encryptionAlgorithm: {
                    required: true,
                    serializedName: "encryptionAlgorithm",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "AES256",
                            "RSAES_PKCS1_v_1_5"
                        ]
                    }
                }
            }
        }
    };
    var AvailableProviderOperationDisplay = {
        serializedName: "AvailableProviderOperationDisplay",
        type: {
            name: "Composite",
            className: "AvailableProviderOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableProviderOperation = {
        serializedName: "AvailableProviderOperation",
        type: {
            name: "Composite",
            className: "AvailableProviderOperation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "AvailableProviderOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var BackupElement = {
        serializedName: "BackupElement",
        type: {
            name: "Composite",
            className: "BackupElement",
            modelProperties: {
                elementId: {
                    required: true,
                    serializedName: "elementId",
                    type: {
                        name: "String"
                    }
                },
                elementName: {
                    required: true,
                    serializedName: "elementName",
                    type: {
                        name: "String"
                    }
                },
                elementType: {
                    required: true,
                    serializedName: "elementType",
                    type: {
                        name: "String"
                    }
                },
                sizeInBytes: {
                    required: true,
                    serializedName: "sizeInBytes",
                    type: {
                        name: "Number"
                    }
                },
                volumeName: {
                    required: true,
                    serializedName: "volumeName",
                    type: {
                        name: "String"
                    }
                },
                volumeContainerId: {
                    required: true,
                    serializedName: "volumeContainerId",
                    type: {
                        name: "String"
                    }
                },
                volumeType: {
                    serializedName: "volumeType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Tiered",
                            "Archival",
                            "LocallyPinned"
                        ]
                    }
                }
            }
        }
    };
    var Backup = {
        serializedName: "Backup",
        type: {
            name: "Composite",
            className: "Backup",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { createdOn: {
                    required: true,
                    serializedName: "properties.createdOn",
                    type: {
                        name: "DateTime"
                    }
                }, sizeInBytes: {
                    required: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, backupType: {
                    serializedName: "properties.backupType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LocalSnapshot",
                            "CloudSnapshot"
                        ]
                    }
                }, backupJobCreationType: {
                    serializedName: "properties.backupJobCreationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Adhoc",
                            "BySchedule",
                            "BySSM"
                        ]
                    }
                }, backupPolicyId: {
                    serializedName: "properties.backupPolicyId",
                    type: {
                        name: "String"
                    }
                }, ssmHostName: {
                    serializedName: "properties.ssmHostName",
                    type: {
                        name: "String"
                    }
                }, elements: {
                    required: true,
                    serializedName: "properties.elements",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupElement"
                            }
                        }
                    }
                } })
        }
    };
    var BackupFilter = {
        serializedName: "BackupFilter",
        type: {
            name: "Composite",
            className: "BackupFilter",
            modelProperties: {
                backupPolicyId: {
                    serializedName: "backupPolicyId",
                    type: {
                        name: "String"
                    }
                },
                volumeId: {
                    serializedName: "volumeId",
                    type: {
                        name: "String"
                    }
                },
                createdTime: {
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var BackupPolicy = {
        serializedName: "BackupPolicy",
        type: {
            name: "Composite",
            className: "BackupPolicy",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { volumeIds: {
                    required: true,
                    serializedName: "properties.volumeIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, nextBackupTime: {
                    readOnly: true,
                    serializedName: "properties.nextBackupTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastBackupTime: {
                    readOnly: true,
                    serializedName: "properties.lastBackupTime",
                    type: {
                        name: "DateTime"
                    }
                }, schedulesCount: {
                    readOnly: true,
                    serializedName: "properties.schedulesCount",
                    type: {
                        name: "Number"
                    }
                }, scheduledBackupStatus: {
                    readOnly: true,
                    serializedName: "properties.scheduledBackupStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, backupPolicyCreationType: {
                    readOnly: true,
                    serializedName: "properties.backupPolicyCreationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "BySaaS",
                            "BySSM"
                        ]
                    }
                }, ssmHostName: {
                    readOnly: true,
                    serializedName: "properties.ssmHostName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ScheduleRecurrence = {
        serializedName: "ScheduleRecurrence",
        type: {
            name: "Composite",
            className: "ScheduleRecurrence",
            modelProperties: {
                recurrenceType: {
                    required: true,
                    serializedName: "recurrenceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Minutes",
                            "Hourly",
                            "Daily",
                            "Weekly"
                        ]
                    }
                },
                recurrenceValue: {
                    required: true,
                    serializedName: "recurrenceValue",
                    type: {
                        name: "Number"
                    }
                },
                weeklyDaysList: {
                    serializedName: "weeklyDaysList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Sunday",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var BackupSchedule = {
        serializedName: "BackupSchedule",
        type: {
            name: "Composite",
            className: "BackupSchedule",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { scheduleRecurrence: {
                    required: true,
                    serializedName: "properties.scheduleRecurrence",
                    type: {
                        name: "Composite",
                        className: "ScheduleRecurrence"
                    }
                }, backupType: {
                    required: true,
                    serializedName: "properties.backupType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LocalSnapshot",
                            "CloudSnapshot"
                        ]
                    }
                }, retentionCount: {
                    required: true,
                    serializedName: "properties.retentionCount",
                    type: {
                        name: "Number"
                    }
                }, startTime: {
                    required: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, scheduleStatus: {
                    required: true,
                    serializedName: "properties.scheduleStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, lastSuccessfulRun: {
                    readOnly: true,
                    serializedName: "properties.lastSuccessfulRun",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var Time = {
        serializedName: "Time",
        type: {
            name: "Composite",
            className: "Time",
            modelProperties: {
                hours: {
                    required: true,
                    serializedName: "hours",
                    constraints: {
                        InclusiveMaximum: 23,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                minutes: {
                    required: true,
                    serializedName: "minutes",
                    constraints: {
                        InclusiveMaximum: 59,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                seconds: {
                    required: true,
                    serializedName: "seconds",
                    constraints: {
                        InclusiveMaximum: 59,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BandwidthSchedule = {
        serializedName: "BandwidthSchedule",
        type: {
            name: "Composite",
            className: "BandwidthSchedule",
            modelProperties: {
                start: {
                    required: true,
                    serializedName: "start",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                },
                stop: {
                    required: true,
                    serializedName: "stop",
                    type: {
                        name: "Composite",
                        className: "Time"
                    }
                },
                rateInMbps: {
                    required: true,
                    serializedName: "rateInMbps",
                    type: {
                        name: "Number"
                    }
                },
                days: {
                    required: true,
                    serializedName: "days",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Sunday",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var BandwidthSetting = {
        serializedName: "BandwidthSetting",
        type: {
            name: "Composite",
            className: "BandwidthSetting",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { schedules: {
                    required: true,
                    serializedName: "properties.schedules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BandwidthSchedule"
                            }
                        }
                    }
                }, volumeCount: {
                    readOnly: true,
                    serializedName: "properties.volumeCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ChapSettings = {
        serializedName: "ChapSettings",
        type: {
            name: "Composite",
            className: "ChapSettings",
            modelProperties: {
                initiatorUser: {
                    serializedName: "initiatorUser",
                    type: {
                        name: "String"
                    }
                },
                initiatorSecret: {
                    serializedName: "initiatorSecret",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                },
                targetUser: {
                    serializedName: "targetUser",
                    type: {
                        name: "String"
                    }
                },
                targetSecret: {
                    serializedName: "targetSecret",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }
            }
        }
    };
    var ClearAlertRequest = {
        serializedName: "ClearAlertRequest",
        type: {
            name: "Composite",
            className: "ClearAlertRequest",
            modelProperties: {
                resolutionMessage: {
                    serializedName: "resolutionMessage",
                    type: {
                        name: "String"
                    }
                },
                alerts: {
                    required: true,
                    serializedName: "alerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloneRequest = {
        serializedName: "CloneRequest",
        type: {
            name: "Composite",
            className: "CloneRequest",
            modelProperties: {
                targetDeviceId: {
                    required: true,
                    serializedName: "targetDeviceId",
                    type: {
                        name: "String"
                    }
                },
                targetVolumeName: {
                    required: true,
                    serializedName: "targetVolumeName",
                    type: {
                        name: "String"
                    }
                },
                targetAccessControlRecordIds: {
                    required: true,
                    serializedName: "targetAccessControlRecordIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                backupElement: {
                    required: true,
                    serializedName: "backupElement",
                    type: {
                        name: "Composite",
                        className: "BackupElement"
                    }
                }
            }
        }
    };
    var CloudAppliance = {
        serializedName: "CloudAppliance",
        type: {
            name: "Composite",
            className: "CloudAppliance",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                vnetName: {
                    serializedName: "vnetName",
                    type: {
                        name: "String"
                    }
                },
                vnetRegion: {
                    required: true,
                    serializedName: "vnetRegion",
                    type: {
                        name: "String"
                    }
                },
                isVnetDnsConfigured: {
                    serializedName: "isVnetDnsConfigured",
                    type: {
                        name: "Boolean"
                    }
                },
                isVnetExpressConfigured: {
                    serializedName: "isVnetExpressConfigured",
                    type: {
                        name: "Boolean"
                    }
                },
                subnetName: {
                    serializedName: "subnetName",
                    type: {
                        name: "String"
                    }
                },
                storageAccountName: {
                    serializedName: "storageAccountName",
                    type: {
                        name: "String"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                },
                vmType: {
                    serializedName: "vmType",
                    type: {
                        name: "String"
                    }
                },
                vmImageName: {
                    serializedName: "vmImageName",
                    type: {
                        name: "String"
                    }
                },
                modelNumber: {
                    serializedName: "modelNumber",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VmImage = {
        serializedName: "VmImage",
        type: {
            name: "Composite",
            className: "VmImage",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    required: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                offer: {
                    required: true,
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    required: true,
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CloudApplianceConfiguration = {
        serializedName: "CloudApplianceConfiguration",
        type: {
            name: "Composite",
            className: "CloudApplianceConfiguration",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { modelNumber: {
                    required: true,
                    serializedName: "properties.modelNumber",
                    type: {
                        name: "String"
                    }
                }, cloudPlatform: {
                    required: true,
                    serializedName: "properties.cloudPlatform",
                    type: {
                        name: "String"
                    }
                }, acsConfiguration: {
                    required: true,
                    serializedName: "properties.acsConfiguration",
                    type: {
                        name: "Composite",
                        className: "AcsConfiguration"
                    }
                }, supportedStorageAccountTypes: {
                    required: true,
                    serializedName: "properties.supportedStorageAccountTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, supportedRegions: {
                    required: true,
                    serializedName: "properties.supportedRegions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, supportedVmTypes: {
                    required: true,
                    serializedName: "properties.supportedVmTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, supportedVmImages: {
                    required: true,
                    serializedName: "properties.supportedVmImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VmImage"
                            }
                        }
                    }
                } })
        }
    };
    var CloudApplianceSettings = {
        serializedName: "CloudApplianceSettings",
        type: {
            name: "Composite",
            className: "CloudApplianceSettings",
            modelProperties: {
                serviceDataEncryptionKey: {
                    serializedName: "serviceDataEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                },
                channelIntegrityKey: {
                    serializedName: "channelIntegrityKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }
            }
        }
    };
    var SecondaryDNSSettings = {
        serializedName: "SecondaryDNSSettings",
        type: {
            name: "Composite",
            className: "SecondaryDNSSettings",
            modelProperties: {
                secondaryDnsServers: {
                    serializedName: "secondaryDnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkInterfaceData0Settings = {
        serializedName: "NetworkInterfaceData0Settings",
        type: {
            name: "Composite",
            className: "NetworkInterfaceData0Settings",
            modelProperties: {
                controllerZeroIp: {
                    serializedName: "controllerZeroIp",
                    type: {
                        name: "String"
                    }
                },
                controllerOneIp: {
                    serializedName: "controllerOneIp",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConfigureDeviceRequest = {
        serializedName: "ConfigureDeviceRequest",
        type: {
            name: "Composite",
            className: "ConfigureDeviceRequest",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { friendlyName: {
                    required: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, currentDeviceName: {
                    required: true,
                    serializedName: "properties.currentDeviceName",
                    type: {
                        name: "String"
                    }
                }, timeZone: {
                    required: true,
                    serializedName: "properties.timeZone",
                    type: {
                        name: "String"
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "SecondaryDNSSettings"
                    }
                }, networkInterfaceData0Settings: {
                    serializedName: "properties.networkInterfaceData0Settings",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceData0Settings"
                    }
                } })
        }
    };
    var ControllerPowerStateChangeRequest = {
        serializedName: "ControllerPowerStateChangeRequest",
        type: {
            name: "Composite",
            className: "ControllerPowerStateChangeRequest",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { action: {
                    required: true,
                    serializedName: "properties.action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Start",
                            "Restart",
                            "Shutdown"
                        ]
                    }
                }, activeController: {
                    required: true,
                    serializedName: "properties.activeController",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "None",
                            "Controller0",
                            "Controller1"
                        ]
                    }
                }, controller0State: {
                    required: true,
                    serializedName: "properties.controller0State",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotPresent",
                            "PoweredOff",
                            "Ok",
                            "Recovering",
                            "Warning",
                            "Failure"
                        ]
                    }
                }, controller1State: {
                    required: true,
                    serializedName: "properties.controller1State",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotPresent",
                            "PoweredOff",
                            "Ok",
                            "Recovering",
                            "Warning",
                            "Failure"
                        ]
                    }
                } })
        }
    };
    var DataStatistics = {
        serializedName: "DataStatistics",
        type: {
            name: "Composite",
            className: "DataStatistics",
            modelProperties: {
                totalData: {
                    serializedName: "totalData",
                    type: {
                        name: "Number"
                    }
                },
                processedData: {
                    serializedName: "processedData",
                    type: {
                        name: "Number"
                    }
                },
                cloudData: {
                    serializedName: "cloudData",
                    type: {
                        name: "Number"
                    }
                },
                throughput: {
                    serializedName: "throughput",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DeviceDetails = {
        serializedName: "DeviceDetails",
        type: {
            name: "Composite",
            className: "DeviceDetails",
            modelProperties: {
                endpointCount: {
                    serializedName: "endpointCount",
                    type: {
                        name: "Number"
                    }
                },
                volumeContainerCount: {
                    serializedName: "volumeContainerCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DeviceRolloverDetails = {
        serializedName: "DeviceRolloverDetails",
        type: {
            name: "Composite",
            className: "DeviceRolloverDetails",
            modelProperties: {
                authorizationEligibility: {
                    serializedName: "authorizationEligibility",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InEligible",
                            "Eligible"
                        ]
                    }
                },
                authorizationStatus: {
                    serializedName: "authorizationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                },
                inEligibilityReason: {
                    serializedName: "inEligibilityReason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "DeviceNotOnline",
                            "NotSupportedAppliance",
                            "RolloverPending"
                        ]
                    }
                }
            }
        }
    };
    var Device = {
        serializedName: "Device",
        type: {
            name: "Composite",
            className: "Device",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { friendlyName: {
                    required: true,
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, activationTime: {
                    required: true,
                    serializedName: "properties.activationTime",
                    type: {
                        name: "DateTime"
                    }
                }, culture: {
                    required: true,
                    serializedName: "properties.culture",
                    type: {
                        name: "String"
                    }
                }, deviceDescription: {
                    required: true,
                    serializedName: "properties.deviceDescription",
                    type: {
                        name: "String"
                    }
                }, deviceSoftwareVersion: {
                    required: true,
                    serializedName: "properties.deviceSoftwareVersion",
                    type: {
                        name: "String"
                    }
                }, friendlySoftwareName: {
                    serializedName: "properties.friendlySoftwareName",
                    type: {
                        name: "String"
                    }
                }, deviceConfigurationStatus: {
                    required: true,
                    serializedName: "properties.deviceConfigurationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Complete",
                            "Pending"
                        ]
                    }
                }, targetIqn: {
                    required: true,
                    serializedName: "properties.targetIqn",
                    type: {
                        name: "String"
                    }
                }, modelDescription: {
                    required: true,
                    serializedName: "properties.modelDescription",
                    type: {
                        name: "String"
                    }
                }, status: {
                    required: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Online",
                            "Offline",
                            "Deactivated",
                            "RequiresAttention",
                            "MaintenanceMode",
                            "Creating",
                            "Provisioning",
                            "Deactivating",
                            "Deleted",
                            "ReadyToSetup"
                        ]
                    }
                }, serialNumber: {
                    required: true,
                    serializedName: "properties.serialNumber",
                    type: {
                        name: "String"
                    }
                }, deviceType: {
                    required: true,
                    serializedName: "properties.deviceType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Series8000VirtualAppliance",
                            "Series8000PhysicalAppliance"
                        ]
                    }
                }, activeController: {
                    required: true,
                    serializedName: "properties.activeController",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "None",
                            "Controller0",
                            "Controller1"
                        ]
                    }
                }, friendlySoftwareVersion: {
                    required: true,
                    serializedName: "properties.friendlySoftwareVersion",
                    type: {
                        name: "String"
                    }
                }, availableLocalStorageInBytes: {
                    serializedName: "properties.availableLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }, availableTieredStorageInBytes: {
                    serializedName: "properties.availableTieredStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }, provisionedTieredStorageInBytes: {
                    serializedName: "properties.provisionedTieredStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }, provisionedLocalStorageInBytes: {
                    serializedName: "properties.provisionedLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }, provisionedVolumeSizeInBytes: {
                    serializedName: "properties.provisionedVolumeSizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, usingStorageInBytes: {
                    serializedName: "properties.usingStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }, totalTieredStorageInBytes: {
                    serializedName: "properties.totalTieredStorageInBytes",
                    type: {
                        name: "Number"
                    }
                }, agentGroupVersion: {
                    serializedName: "properties.agentGroupVersion",
                    type: {
                        name: "Number"
                    }
                }, networkInterfaceCardCount: {
                    serializedName: "properties.networkInterfaceCardCount",
                    type: {
                        name: "Number"
                    }
                }, deviceLocation: {
                    serializedName: "properties.deviceLocation",
                    type: {
                        name: "String"
                    }
                }, virtualMachineApiType: {
                    readOnly: true,
                    serializedName: "properties.virtualMachineApiType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Classic",
                            "Arm"
                        ]
                    }
                }, details: {
                    serializedName: "properties.details",
                    type: {
                        name: "Composite",
                        className: "DeviceDetails"
                    }
                }, rolloverDetails: {
                    serializedName: "properties.rolloverDetails",
                    type: {
                        name: "Composite",
                        className: "DeviceRolloverDetails"
                    }
                } })
        }
    };
    var DevicePatch = {
        serializedName: "DevicePatch",
        type: {
            name: "Composite",
            className: "DevicePatch",
            modelProperties: {
                deviceDescription: {
                    serializedName: "properties.deviceDescription",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DimensionFilter = {
        serializedName: "DimensionFilter",
        type: {
            name: "Composite",
            className: "DimensionFilter",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DNSSettings = {
        serializedName: "DNSSettings",
        type: {
            name: "Composite",
            className: "DNSSettings",
            modelProperties: {
                primaryDnsServer: {
                    serializedName: "primaryDnsServer",
                    type: {
                        name: "String"
                    }
                },
                primaryIpv6DnsServer: {
                    serializedName: "primaryIpv6DnsServer",
                    type: {
                        name: "String"
                    }
                },
                secondaryDnsServers: {
                    serializedName: "secondaryDnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                secondaryIpv6DnsServers: {
                    serializedName: "secondaryIpv6DnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EncryptionSettings = {
        serializedName: "EncryptionSettings",
        type: {
            name: "Composite",
            className: "EncryptionSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { encryptionStatus: {
                    required: true,
                    serializedName: "properties.encryptionStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, keyRolloverStatus: {
                    required: true,
                    serializedName: "properties.keyRolloverStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Required",
                            "NotRequired"
                        ]
                    }
                } })
        }
    };
    var FailoverRequest = {
        serializedName: "FailoverRequest",
        type: {
            name: "Composite",
            className: "FailoverRequest",
            modelProperties: {
                targetDeviceId: {
                    serializedName: "targetDeviceId",
                    type: {
                        name: "String"
                    }
                },
                volumeContainers: {
                    serializedName: "volumeContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VolumeFailoverMetadata = {
        serializedName: "VolumeFailoverMetadata",
        type: {
            name: "Composite",
            className: "VolumeFailoverMetadata",
            modelProperties: {
                volumeId: {
                    serializedName: "volumeId",
                    type: {
                        name: "String"
                    }
                },
                volumeType: {
                    serializedName: "volumeType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Tiered",
                            "Archival",
                            "LocallyPinned"
                        ]
                    }
                },
                sizeInBytes: {
                    serializedName: "sizeInBytes",
                    type: {
                        name: "Number"
                    }
                },
                backupCreatedDate: {
                    serializedName: "backupCreatedDate",
                    type: {
                        name: "DateTime"
                    }
                },
                backupElementId: {
                    serializedName: "backupElementId",
                    type: {
                        name: "String"
                    }
                },
                backupId: {
                    serializedName: "backupId",
                    type: {
                        name: "String"
                    }
                },
                backupPolicyId: {
                    serializedName: "backupPolicyId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VolumeContainerFailoverMetadata = {
        serializedName: "VolumeContainerFailoverMetadata",
        type: {
            name: "Composite",
            className: "VolumeContainerFailoverMetadata",
            modelProperties: {
                volumeContainerId: {
                    serializedName: "volumeContainerId",
                    type: {
                        name: "String"
                    }
                },
                volumes: {
                    serializedName: "volumes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeFailoverMetadata"
                            }
                        }
                    }
                }
            }
        }
    };
    var FailoverSetEligibilityResult = {
        serializedName: "FailoverSetEligibilityResult",
        type: {
            name: "Composite",
            className: "FailoverSetEligibilityResult",
            modelProperties: {
                isEligibleForFailover: {
                    serializedName: "isEligibleForFailover",
                    type: {
                        name: "Boolean"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverSet = {
        serializedName: "FailoverSet",
        type: {
            name: "Composite",
            className: "FailoverSet",
            modelProperties: {
                volumeContainers: {
                    serializedName: "volumeContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeContainerFailoverMetadata"
                            }
                        }
                    }
                },
                eligibilityResult: {
                    serializedName: "eligibilityResult",
                    type: {
                        name: "Composite",
                        className: "FailoverSetEligibilityResult"
                    }
                }
            }
        }
    };
    var TargetEligibilityErrorMessage = {
        serializedName: "TargetEligibilityErrorMessage",
        type: {
            name: "Composite",
            className: "TargetEligibilityErrorMessage",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                resolution: {
                    serializedName: "resolution",
                    type: {
                        name: "String"
                    }
                },
                resultCode: {
                    serializedName: "resultCode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "TargetAndSourceCannotBeSameError",
                            "TargetIsNotOnlineError",
                            "TargetSourceIncompatibleVersionError",
                            "LocalToTieredVolumesConversionWarning",
                            "TargetInsufficientCapacityError",
                            "TargetInsufficientLocalVolumeMemoryError",
                            "TargetInsufficientTieredVolumeMemoryError"
                        ]
                    }
                }
            }
        }
    };
    var TargetEligibilityResult = {
        serializedName: "TargetEligibilityResult",
        type: {
            name: "Composite",
            className: "TargetEligibilityResult",
            modelProperties: {
                eligibilityStatus: {
                    serializedName: "eligibilityStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotEligible",
                            "Eligible"
                        ]
                    }
                },
                messages: {
                    serializedName: "messages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TargetEligibilityErrorMessage"
                            }
                        }
                    }
                }
            }
        }
    };
    var FailoverTarget = {
        serializedName: "FailoverTarget",
        type: {
            name: "Composite",
            className: "FailoverTarget",
            modelProperties: {
                deviceId: {
                    serializedName: "deviceId",
                    type: {
                        name: "String"
                    }
                },
                deviceStatus: {
                    serializedName: "deviceStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Online",
                            "Offline",
                            "Deactivated",
                            "RequiresAttention",
                            "MaintenanceMode",
                            "Creating",
                            "Provisioning",
                            "Deactivating",
                            "Deleted",
                            "ReadyToSetup"
                        ]
                    }
                },
                modelDescription: {
                    serializedName: "modelDescription",
                    type: {
                        name: "String"
                    }
                },
                deviceSoftwareVersion: {
                    serializedName: "deviceSoftwareVersion",
                    type: {
                        name: "String"
                    }
                },
                dataContainersCount: {
                    serializedName: "dataContainersCount",
                    type: {
                        name: "Number"
                    }
                },
                volumesCount: {
                    serializedName: "volumesCount",
                    type: {
                        name: "Number"
                    }
                },
                availableLocalStorageInBytes: {
                    serializedName: "availableLocalStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                availableTieredStorageInBytes: {
                    serializedName: "availableTieredStorageInBytes",
                    type: {
                        name: "Number"
                    }
                },
                deviceLocation: {
                    serializedName: "deviceLocation",
                    type: {
                        name: "String"
                    }
                },
                friendlyDeviceSoftwareVersion: {
                    serializedName: "friendlyDeviceSoftwareVersion",
                    type: {
                        name: "String"
                    }
                },
                eligibilityResult: {
                    serializedName: "eligibilityResult",
                    type: {
                        name: "Composite",
                        className: "TargetEligibilityResult"
                    }
                }
            }
        }
    };
    var Feature = {
        serializedName: "Feature",
        type: {
            name: "Composite",
            className: "Feature",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotAvailable",
                            "UnsupportedDeviceVersion",
                            "Supported"
                        ]
                    }
                }
            }
        }
    };
    var FeatureFilter = {
        serializedName: "FeatureFilter",
        type: {
            name: "Composite",
            className: "FeatureFilter",
            modelProperties: {
                deviceId: {
                    serializedName: "deviceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HardwareComponent = {
        serializedName: "HardwareComponent",
        type: {
            name: "Composite",
            className: "HardwareComponent",
            modelProperties: {
                componentId: {
                    required: true,
                    serializedName: "componentId",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    required: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "NotPresent",
                            "PoweredOff",
                            "Ok",
                            "Recovering",
                            "Warning",
                            "Failure"
                        ]
                    }
                },
                statusDisplayName: {
                    required: true,
                    serializedName: "statusDisplayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HardwareComponentGroup = {
        serializedName: "HardwareComponentGroup",
        type: {
            name: "Composite",
            className: "HardwareComponentGroup",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, lastUpdatedTime: {
                    required: true,
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                }, components: {
                    required: true,
                    serializedName: "properties.components",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HardwareComponent"
                            }
                        }
                    }
                } })
        }
    };
    var JobErrorItem = {
        serializedName: "JobErrorItem",
        type: {
            name: "Composite",
            className: "JobErrorItem",
            modelProperties: {
                recommendations: {
                    serializedName: "recommendations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobErrorDetails = {
        serializedName: "JobErrorDetails",
        type: {
            name: "Composite",
            className: "JobErrorDetails",
            modelProperties: {
                errorDetails: {
                    serializedName: "errorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorItem"
                            }
                        }
                    }
                },
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStage = {
        serializedName: "JobStage",
        type: {
            name: "Composite",
            className: "JobStage",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                stageStatus: {
                    required: true,
                    serializedName: "stageStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Running",
                            "Succeeded",
                            "Failed",
                            "Canceled"
                        ]
                    }
                },
                detail: {
                    serializedName: "detail",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Running",
                            "Succeeded",
                            "Failed",
                            "Canceled"
                        ]
                    }
                }, startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }, percentComplete: {
                    required: true,
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                }, error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "JobErrorDetails"
                    }
                }, jobType: {
                    required: true,
                    serializedName: "properties.jobType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ScheduledBackup",
                            "ManualBackup",
                            "RestoreBackup",
                            "CloneVolume",
                            "FailoverVolumeContainers",
                            "CreateLocallyPinnedVolume",
                            "ModifyVolume",
                            "InstallUpdates",
                            "SupportPackageLogs",
                            "CreateCloudAppliance"
                        ]
                    }
                }, dataStats: {
                    serializedName: "properties.dataStats",
                    type: {
                        name: "Composite",
                        className: "DataStatistics"
                    }
                }, entityLabel: {
                    serializedName: "properties.entityLabel",
                    type: {
                        name: "String"
                    }
                }, entityType: {
                    serializedName: "properties.entityType",
                    type: {
                        name: "String"
                    }
                }, jobStages: {
                    serializedName: "properties.jobStages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobStage"
                            }
                        }
                    }
                }, deviceId: {
                    serializedName: "properties.deviceId",
                    type: {
                        name: "String"
                    }
                }, isCancellable: {
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                }, backupType: {
                    serializedName: "properties.backupType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LocalSnapshot",
                            "CloudSnapshot"
                        ]
                    }
                }, sourceDeviceId: {
                    serializedName: "properties.sourceDeviceId",
                    type: {
                        name: "String"
                    }
                }, backupPointInTime: {
                    serializedName: "properties.backupPointInTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var JobFilter = {
        serializedName: "JobFilter",
        type: {
            name: "Composite",
            className: "JobFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                jobType: {
                    serializedName: "jobType",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Key = {
        serializedName: "Key",
        type: {
            name: "Composite",
            className: "Key",
            modelProperties: {
                activationKey: {
                    required: true,
                    serializedName: "activationKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListFailoverTargetsRequest = {
        serializedName: "ListFailoverTargetsRequest",
        type: {
            name: "Composite",
            className: "ListFailoverTargetsRequest",
            modelProperties: {
                volumeContainers: {
                    serializedName: "volumeContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagerIntrinsicSettings = {
        serializedName: "ManagerIntrinsicSettings",
        type: {
            name: "Composite",
            className: "ManagerIntrinsicSettings",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "GardaV1",
                            "HelsinkiV1"
                        ]
                    }
                }
            }
        }
    };
    var ManagerSku = {
        serializedName: "ManagerSku",
        type: {
            name: "Composite",
            className: "ManagerSku",
            modelProperties: {
                name: {
                    required: true,
                    isConstant: true,
                    serializedName: "name",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Manager = {
        serializedName: "Manager",
        type: {
            name: "Composite",
            className: "Manager",
            modelProperties: __assign({}, Resource.type.modelProperties, { cisIntrinsicSettings: {
                    serializedName: "properties.cisIntrinsicSettings",
                    type: {
                        name: "Composite",
                        className: "ManagerIntrinsicSettings"
                    }
                }, sku: {
                    isConstant: true,
                    serializedName: "properties.sku",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "ManagerSku"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagerExtendedInfo = {
        serializedName: "ManagerExtendedInfo",
        type: {
            name: "Composite",
            className: "ManagerExtendedInfo",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, integrityKey: {
                    required: true,
                    serializedName: "properties.integrityKey",
                    type: {
                        name: "String"
                    }
                }, encryptionKey: {
                    serializedName: "properties.encryptionKey",
                    type: {
                        name: "String"
                    }
                }, encryptionKeyThumbprint: {
                    serializedName: "properties.encryptionKeyThumbprint",
                    type: {
                        name: "String"
                    }
                }, portalCertificateThumbprint: {
                    serializedName: "properties.portalCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                }, algorithm: {
                    required: true,
                    serializedName: "properties.algorithm",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagerPatch = {
        serializedName: "ManagerPatch",
        type: {
            name: "Composite",
            className: "ManagerPatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAvailablity = {
        serializedName: "MetricAvailablity",
        type: {
            name: "Composite",
            className: "MetricAvailablity",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                retention: {
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricData = {
        serializedName: "MetricData",
        type: {
            name: "Composite",
            className: "MetricData",
            modelProperties: {
                timeStamp: {
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                sum: {
                    serializedName: "sum",
                    type: {
                        name: "Number"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                average: {
                    serializedName: "average",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDimension = {
        serializedName: "MetricDimension",
        type: {
            name: "Composite",
            className: "MetricDimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDefinition = {
        serializedName: "MetricDefinition",
        type: {
            name: "Composite",
            className: "MetricDefinition",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Bytes",
                            "BytesPerSecond",
                            "Count",
                            "CountPerSecond",
                            "Percent",
                            "Seconds"
                        ]
                    }
                },
                primaryAggregationType: {
                    serializedName: "primaryAggregationType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Last",
                            "Maximum",
                            "Minimum",
                            "None",
                            "Total"
                        ]
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                metricAvailabilities: {
                    serializedName: "metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailablity"
                            }
                        }
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricNameFilter = {
        serializedName: "MetricNameFilter",
        type: {
            name: "Composite",
            className: "MetricNameFilter",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricFilter = {
        serializedName: "MetricFilter",
        type: {
            name: "Composite",
            className: "MetricFilter",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricNameFilter"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    required: true,
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Composite",
                        className: "DimensionFilter"
                    }
                }
            }
        }
    };
    var Metrics = {
        serializedName: "Metrics",
        type: {
            name: "Composite",
            className: "Metrics",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                primaryAggregation: {
                    serializedName: "primaryAggregation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Average",
                            "Last",
                            "Maximum",
                            "Minimum",
                            "None",
                            "Total"
                        ]
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Bytes",
                            "BytesPerSecond",
                            "Count",
                            "CountPerSecond",
                            "Percent",
                            "Seconds"
                        ]
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricData"
                            }
                        }
                    }
                }
            }
        }
    };
    var NicIPv4 = {
        serializedName: "NicIPv4",
        type: {
            name: "Composite",
            className: "NicIPv4",
            modelProperties: {
                ipv4Address: {
                    serializedName: "ipv4Address",
                    type: {
                        name: "String"
                    }
                },
                ipv4Netmask: {
                    serializedName: "ipv4Netmask",
                    type: {
                        name: "String"
                    }
                },
                ipv4Gateway: {
                    serializedName: "ipv4Gateway",
                    type: {
                        name: "String"
                    }
                },
                controller0Ipv4Address: {
                    serializedName: "controller0Ipv4Address",
                    type: {
                        name: "String"
                    }
                },
                controller1Ipv4Address: {
                    serializedName: "controller1Ipv4Address",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NicIPv6 = {
        serializedName: "NicIPv6",
        type: {
            name: "Composite",
            className: "NicIPv6",
            modelProperties: {
                ipv6Address: {
                    serializedName: "ipv6Address",
                    type: {
                        name: "String"
                    }
                },
                ipv6Prefix: {
                    serializedName: "ipv6Prefix",
                    type: {
                        name: "String"
                    }
                },
                ipv6Gateway: {
                    serializedName: "ipv6Gateway",
                    type: {
                        name: "String"
                    }
                },
                controller0Ipv6Address: {
                    serializedName: "controller0Ipv6Address",
                    type: {
                        name: "String"
                    }
                },
                controller1Ipv6Address: {
                    serializedName: "controller1Ipv6Address",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkAdapters = {
        serializedName: "NetworkAdapters",
        type: {
            name: "Composite",
            className: "NetworkAdapters",
            modelProperties: {
                interfaceId: {
                    required: true,
                    serializedName: "interfaceId",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Data0",
                            "Data1",
                            "Data2",
                            "Data3",
                            "Data4",
                            "Data5"
                        ]
                    }
                },
                netInterfaceStatus: {
                    required: true,
                    serializedName: "netInterfaceStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                isDefault: {
                    serializedName: "isDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                iscsiAndCloudStatus: {
                    required: true,
                    serializedName: "iscsiAndCloudStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "IscsiEnabled",
                            "CloudEnabled",
                            "IscsiAndCloudEnabled"
                        ]
                    }
                },
                speed: {
                    serializedName: "speed",
                    type: {
                        name: "Number"
                    }
                },
                mode: {
                    required: true,
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "IPV4",
                            "IPV6",
                            "BOTH"
                        ]
                    }
                },
                nicIpv4Settings: {
                    serializedName: "nicIpv4Settings",
                    type: {
                        name: "Composite",
                        className: "NicIPv4"
                    }
                },
                nicIpv6Settings: {
                    serializedName: "nicIpv6Settings",
                    type: {
                        name: "Composite",
                        className: "NicIPv6"
                    }
                }
            }
        }
    };
    var NetworkAdapterList = {
        serializedName: "NetworkAdapterList",
        type: {
            name: "Composite",
            className: "NetworkAdapterList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkAdapters"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebproxySettings = {
        serializedName: "WebproxySettings",
        type: {
            name: "Composite",
            className: "WebproxySettings",
            modelProperties: {
                connectionUri: {
                    serializedName: "connectionUri",
                    type: {
                        name: "String"
                    }
                },
                authentication: {
                    required: true,
                    serializedName: "authentication",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "None",
                            "Basic",
                            "NTLM"
                        ]
                    }
                },
                username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkSettings = {
        serializedName: "NetworkSettings",
        type: {
            name: "Composite",
            className: "NetworkSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { dnsSettings: {
                    required: true,
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "DNSSettings"
                    }
                }, networkAdapters: {
                    required: true,
                    serializedName: "properties.networkAdapters",
                    type: {
                        name: "Composite",
                        className: "NetworkAdapterList"
                    }
                }, webproxySettings: {
                    required: true,
                    serializedName: "properties.webproxySettings",
                    type: {
                        name: "Composite",
                        className: "WebproxySettings"
                    }
                } })
        }
    };
    var NetworkSettingsPatch = {
        serializedName: "NetworkSettingsPatch",
        type: {
            name: "Composite",
            className: "NetworkSettingsPatch",
            modelProperties: {
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "DNSSettings"
                    }
                },
                networkAdapters: {
                    serializedName: "properties.networkAdapters",
                    type: {
                        name: "Composite",
                        className: "NetworkAdapterList"
                    }
                }
            }
        }
    };
    var PublicKey = {
        serializedName: "PublicKey",
        type: {
            name: "Composite",
            className: "PublicKey",
            modelProperties: {
                key: {
                    required: true,
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RemoteManagementSettings = {
        serializedName: "RemoteManagementSettings",
        type: {
            name: "Composite",
            className: "RemoteManagementSettings",
            modelProperties: {
                remoteManagementMode: {
                    required: true,
                    serializedName: "remoteManagementMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Disabled",
                            "HttpsEnabled",
                            "HttpsAndHttpEnabled"
                        ]
                    }
                },
                remoteManagementCertificate: {
                    serializedName: "remoteManagementCertificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RemoteManagementSettingsPatch = {
        serializedName: "RemoteManagementSettingsPatch",
        type: {
            name: "Composite",
            className: "RemoteManagementSettingsPatch",
            modelProperties: {
                remoteManagementMode: {
                    required: true,
                    serializedName: "remoteManagementMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "Disabled",
                            "HttpsEnabled",
                            "HttpsAndHttpEnabled"
                        ]
                    }
                }
            }
        }
    };
    var SecuritySettings = {
        serializedName: "SecuritySettings",
        type: {
            name: "Composite",
            className: "SecuritySettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { remoteManagementSettings: {
                    required: true,
                    serializedName: "properties.remoteManagementSettings",
                    type: {
                        name: "Composite",
                        className: "RemoteManagementSettings"
                    }
                }, chapSettings: {
                    required: true,
                    serializedName: "properties.chapSettings",
                    type: {
                        name: "Composite",
                        className: "ChapSettings"
                    }
                } })
        }
    };
    var SecuritySettingsPatch = {
        serializedName: "SecuritySettingsPatch",
        type: {
            name: "Composite",
            className: "SecuritySettingsPatch",
            modelProperties: {
                remoteManagementSettings: {
                    serializedName: "properties.remoteManagementSettings",
                    type: {
                        name: "Composite",
                        className: "RemoteManagementSettingsPatch"
                    }
                },
                deviceAdminPassword: {
                    serializedName: "properties.deviceAdminPassword",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                },
                snapshotPassword: {
                    serializedName: "properties.snapshotPassword",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                },
                chapSettings: {
                    serializedName: "properties.chapSettings",
                    type: {
                        name: "Composite",
                        className: "ChapSettings"
                    }
                },
                cloudApplianceSettings: {
                    serializedName: "properties.cloudApplianceSettings",
                    type: {
                        name: "Composite",
                        className: "CloudApplianceSettings"
                    }
                }
            }
        }
    };
    var SendTestAlertEmailRequest = {
        serializedName: "SendTestAlertEmailRequest",
        type: {
            name: "Composite",
            className: "SendTestAlertEmailRequest",
            modelProperties: {
                emailList: {
                    required: true,
                    serializedName: "emailList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountCredential = {
        serializedName: "StorageAccountCredential",
        type: {
            name: "Composite",
            className: "StorageAccountCredential",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { endPoint: {
                    required: true,
                    serializedName: "properties.endPoint",
                    type: {
                        name: "String"
                    }
                }, sslStatus: {
                    required: true,
                    serializedName: "properties.sslStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, accessKey: {
                    serializedName: "properties.accessKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }, volumesCount: {
                    readOnly: true,
                    serializedName: "properties.volumesCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var SymmetricEncryptedSecret = {
        serializedName: "SymmetricEncryptedSecret",
        type: {
            name: "Composite",
            className: "SymmetricEncryptedSecret",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                valueCertificateThumbprint: {
                    serializedName: "valueCertificateThumbprint",
                    type: {
                        name: "String"
                    }
                },
                encryptionAlgorithm: {
                    required: true,
                    serializedName: "encryptionAlgorithm",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "AES256",
                            "RSAES_PKCS1_v_1_5"
                        ]
                    }
                }
            }
        }
    };
    var TimeSettings = {
        serializedName: "TimeSettings",
        type: {
            name: "Composite",
            className: "TimeSettings",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { timeZone: {
                    required: true,
                    serializedName: "properties.timeZone",
                    type: {
                        name: "String"
                    }
                }, primaryTimeServer: {
                    serializedName: "properties.primaryTimeServer",
                    type: {
                        name: "String"
                    }
                }, secondaryTimeServer: {
                    serializedName: "properties.secondaryTimeServer",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var Updates = {
        serializedName: "Updates",
        type: {
            name: "Composite",
            className: "Updates",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { regularUpdatesAvailable: {
                    serializedName: "properties.regularUpdatesAvailable",
                    type: {
                        name: "Boolean"
                    }
                }, maintenanceModeUpdatesAvailable: {
                    serializedName: "properties.maintenanceModeUpdatesAvailable",
                    type: {
                        name: "Boolean"
                    }
                }, isUpdateInProgress: {
                    serializedName: "properties.isUpdateInProgress",
                    type: {
                        name: "Boolean"
                    }
                }, lastUpdatedTime: {
                    serializedName: "properties.lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var Volume = {
        serializedName: "Volume",
        type: {
            name: "Composite",
            className: "Volume",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { sizeInBytes: {
                    required: true,
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, volumeType: {
                    required: true,
                    serializedName: "properties.volumeType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Tiered",
                            "Archival",
                            "LocallyPinned"
                        ]
                    }
                }, volumeContainerId: {
                    readOnly: true,
                    serializedName: "properties.volumeContainerId",
                    type: {
                        name: "String"
                    }
                }, accessControlRecordIds: {
                    required: true,
                    serializedName: "properties.accessControlRecordIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, volumeStatus: {
                    required: true,
                    serializedName: "properties.volumeStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Online",
                            "Offline"
                        ]
                    }
                }, operationStatus: {
                    readOnly: true,
                    serializedName: "properties.operationStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "Updating",
                            "Deleting",
                            "Restoring"
                        ]
                    }
                }, backupStatus: {
                    readOnly: true,
                    serializedName: "properties.backupStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, monitoringStatus: {
                    required: true,
                    serializedName: "properties.monitoringStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, backupPolicyIds: {
                    readOnly: true,
                    serializedName: "properties.backupPolicyIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VolumeContainer = {
        serializedName: "VolumeContainer",
        type: {
            name: "Composite",
            className: "VolumeContainer",
            modelProperties: __assign({}, BaseModel.type.modelProperties, { encryptionKey: {
                    serializedName: "properties.encryptionKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }, encryptionStatus: {
                    readOnly: true,
                    serializedName: "properties.encryptionStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, volumeCount: {
                    readOnly: true,
                    serializedName: "properties.volumeCount",
                    type: {
                        name: "Number"
                    }
                }, storageAccountCredentialId: {
                    required: true,
                    serializedName: "properties.storageAccountCredentialId",
                    type: {
                        name: "String"
                    }
                }, ownerShipStatus: {
                    readOnly: true,
                    serializedName: "properties.ownerShipStatus",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Owned",
                            "NotOwned"
                        ]
                    }
                }, bandWidthRateInMbps: {
                    serializedName: "properties.bandWidthRateInMbps",
                    type: {
                        name: "Number"
                    }
                }, bandwidthSettingId: {
                    serializedName: "properties.bandwidthSettingId",
                    type: {
                        name: "String"
                    }
                }, totalCloudStorageUsageInBytes: {
                    readOnly: true,
                    serializedName: "properties.totalCloudStorageUsageInBytes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var AvailableProviderOperationList = {
        serializedName: "AvailableProviderOperationList",
        type: {
            name: "Composite",
            className: "AvailableProviderOperationList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableProviderOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagerList = {
        serializedName: "ManagerList",
        type: {
            name: "Composite",
            className: "ManagerList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Manager"
                            }
                        }
                    }
                }
            }
        }
    };
    var FeatureList = {
        serializedName: "FeatureList",
        type: {
            name: "Composite",
            className: "FeatureList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Feature"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricList = {
        serializedName: "MetricList",
        type: {
            name: "Composite",
            className: "MetricList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metrics"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDefinitionList = {
        serializedName: "MetricDefinitionList",
        type: {
            name: "Composite",
            className: "MetricDefinitionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var AccessControlRecordList = {
        serializedName: "AccessControlRecordList",
        type: {
            name: "Composite",
            className: "AccessControlRecordList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccessControlRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var AlertList = {
        serializedName: "AlertList",
        type: {
            name: "Composite",
            className: "AlertList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Alert"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BandwidthSettingList = {
        serializedName: "BandwidthSettingList",
        type: {
            name: "Composite",
            className: "BandwidthSettingList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BandwidthSetting"
                            }
                        }
                    }
                }
            }
        }
    };
    var CloudApplianceConfigurationList = {
        serializedName: "CloudApplianceConfigurationList",
        type: {
            name: "Composite",
            className: "CloudApplianceConfigurationList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudApplianceConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeviceList = {
        serializedName: "DeviceList",
        type: {
            name: "Composite",
            className: "DeviceList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Device"
                            }
                        }
                    }
                }
            }
        }
    };
    var FailoverSetsList = {
        serializedName: "FailoverSetsList",
        type: {
            name: "Composite",
            className: "FailoverSetsList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverSet"
                            }
                        }
                    }
                }
            }
        }
    };
    var FailoverTargetsList = {
        serializedName: "FailoverTargetsList",
        type: {
            name: "Composite",
            className: "FailoverTargetsList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverTarget"
                            }
                        }
                    }
                }
            }
        }
    };
    var BackupPolicyList = {
        serializedName: "BackupPolicyList",
        type: {
            name: "Composite",
            className: "BackupPolicyList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupPolicy"
                            }
                        }
                    }
                }
            }
        }
    };
    var BackupScheduleList = {
        serializedName: "BackupScheduleList",
        type: {
            name: "Composite",
            className: "BackupScheduleList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupSchedule"
                            }
                        }
                    }
                }
            }
        }
    };
    var BackupList = {
        serializedName: "BackupList",
        type: {
            name: "Composite",
            className: "BackupList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Backup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HardwareComponentGroupList = {
        serializedName: "HardwareComponentGroupList",
        type: {
            name: "Composite",
            className: "HardwareComponentGroupList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HardwareComponentGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobList = {
        serializedName: "JobList",
        type: {
            name: "Composite",
            className: "JobList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VolumeContainerList = {
        serializedName: "VolumeContainerList",
        type: {
            name: "Composite",
            className: "VolumeContainerList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeContainer"
                            }
                        }
                    }
                }
            }
        }
    };
    var VolumeList = {
        serializedName: "VolumeList",
        type: {
            name: "Composite",
            className: "VolumeList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Volume"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountCredentialList = {
        serializedName: "StorageAccountCredentialList",
        type: {
            name: "Composite",
            className: "StorageAccountCredentialList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountCredential"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        BaseModel: BaseModel,
        AccessControlRecord: AccessControlRecord,
        AcsConfiguration: AcsConfiguration,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        Alert: Alert,
        AlertFilter: AlertFilter,
        AlertSettings: AlertSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        AvailableProviderOperationDisplay: AvailableProviderOperationDisplay,
        AvailableProviderOperation: AvailableProviderOperation,
        BackupElement: BackupElement,
        Backup: Backup,
        BackupFilter: BackupFilter,
        BackupPolicy: BackupPolicy,
        ScheduleRecurrence: ScheduleRecurrence,
        BackupSchedule: BackupSchedule,
        Time: Time,
        BandwidthSchedule: BandwidthSchedule,
        BandwidthSetting: BandwidthSetting,
        ChapSettings: ChapSettings,
        ClearAlertRequest: ClearAlertRequest,
        CloneRequest: CloneRequest,
        CloudAppliance: CloudAppliance,
        VmImage: VmImage,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        CloudApplianceSettings: CloudApplianceSettings,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        DataStatistics: DataStatistics,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        Device: Device,
        DevicePatch: DevicePatch,
        DimensionFilter: DimensionFilter,
        DNSSettings: DNSSettings,
        EncryptionSettings: EncryptionSettings,
        FailoverRequest: FailoverRequest,
        VolumeFailoverMetadata: VolumeFailoverMetadata,
        VolumeContainerFailoverMetadata: VolumeContainerFailoverMetadata,
        FailoverSetEligibilityResult: FailoverSetEligibilityResult,
        FailoverSet: FailoverSet,
        TargetEligibilityErrorMessage: TargetEligibilityErrorMessage,
        TargetEligibilityResult: TargetEligibilityResult,
        FailoverTarget: FailoverTarget,
        Feature: Feature,
        FeatureFilter: FeatureFilter,
        HardwareComponent: HardwareComponent,
        HardwareComponentGroup: HardwareComponentGroup,
        JobErrorItem: JobErrorItem,
        JobErrorDetails: JobErrorDetails,
        JobStage: JobStage,
        Job: Job,
        JobFilter: JobFilter,
        Key: Key,
        ListFailoverTargetsRequest: ListFailoverTargetsRequest,
        ManagerIntrinsicSettings: ManagerIntrinsicSettings,
        ManagerSku: ManagerSku,
        Resource: Resource,
        Manager: Manager,
        ManagerExtendedInfo: ManagerExtendedInfo,
        ManagerPatch: ManagerPatch,
        MetricAvailablity: MetricAvailablity,
        MetricData: MetricData,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricDefinition: MetricDefinition,
        MetricNameFilter: MetricNameFilter,
        MetricFilter: MetricFilter,
        Metrics: Metrics,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        NetworkAdapters: NetworkAdapters,
        NetworkAdapterList: NetworkAdapterList,
        WebproxySettings: WebproxySettings,
        NetworkSettings: NetworkSettings,
        NetworkSettingsPatch: NetworkSettingsPatch,
        PublicKey: PublicKey,
        RemoteManagementSettings: RemoteManagementSettings,
        RemoteManagementSettingsPatch: RemoteManagementSettingsPatch,
        SecuritySettings: SecuritySettings,
        SecuritySettingsPatch: SecuritySettingsPatch,
        SendTestAlertEmailRequest: SendTestAlertEmailRequest,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricEncryptedSecret: SymmetricEncryptedSecret,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer,
        AvailableProviderOperationList: AvailableProviderOperationList,
        ManagerList: ManagerList,
        FeatureList: FeatureList,
        MetricList: MetricList,
        MetricDefinitionList: MetricDefinitionList,
        AccessControlRecordList: AccessControlRecordList,
        AlertList: AlertList,
        BandwidthSettingList: BandwidthSettingList,
        CloudApplianceConfigurationList: CloudApplianceConfigurationList,
        DeviceList: DeviceList,
        FailoverSetsList: FailoverSetsList,
        FailoverTargetsList: FailoverTargetsList,
        BackupPolicyList: BackupPolicyList,
        BackupScheduleList: BackupScheduleList,
        BackupList: BackupList,
        HardwareComponentGroupList: HardwareComponentGroupList,
        JobList: JobList,
        VolumeContainerList: VolumeContainerList,
        VolumeList: VolumeList,
        StorageAccountCredentialList: StorageAccountCredentialList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        AvailableProviderOperationList: AvailableProviderOperationList,
        AvailableProviderOperation: AvailableProviderOperation,
        AvailableProviderOperationDisplay: AvailableProviderOperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accessControlRecordName = {
        parameterPath: "accessControlRecordName",
        mapper: {
            required: true,
            serializedName: "accessControlRecordName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var backupElementName = {
        parameterPath: "backupElementName",
        mapper: {
            required: true,
            serializedName: "backupElementName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var backupName = {
        parameterPath: "backupName",
        mapper: {
            required: true,
            serializedName: "backupName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var backupPolicyName = {
        parameterPath: "backupPolicyName",
        mapper: {
            required: true,
            serializedName: "backupPolicyName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var backupScheduleName = {
        parameterPath: "backupScheduleName",
        mapper: {
            required: true,
            serializedName: "backupScheduleName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var backupType = {
        parameterPath: "backupType",
        mapper: {
            required: true,
            serializedName: "backupType",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var bandwidthSettingName = {
        parameterPath: "bandwidthSettingName",
        mapper: {
            required: true,
            serializedName: "bandwidthSettingName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var deviceName = {
        parameterPath: "deviceName",
        mapper: {
            required: true,
            serializedName: "deviceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var hardwareComponentGroupName = {
        parameterPath: "hardwareComponentGroupName",
        mapper: {
            required: true,
            serializedName: "hardwareComponentGroupName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var ifMatch = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var managerName = {
        parameterPath: "managerName",
        mapper: {
            required: true,
            serializedName: "managerName",
            constraints: {
                MaxLength: 50,
                MinLength: 2
            },
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var sourceDeviceName = {
        parameterPath: "sourceDeviceName",
        mapper: {
            required: true,
            serializedName: "sourceDeviceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var storageAccountCredentialName = {
        parameterPath: "storageAccountCredentialName",
        mapper: {
            required: true,
            serializedName: "storageAccountCredentialName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var volumeContainerName = {
        parameterPath: "volumeContainerName",
        mapper: {
            required: true,
            serializedName: "volumeContainerName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var volumeName = {
        parameterPath: "volumeName",
        mapper: {
            required: true,
            serializedName: "volumeName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.StorSimple/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableProviderOperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableProviderOperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ManagerList: ManagerList,
        Manager: Manager,
        Resource: Resource,
        BaseResource: BaseResource,
        ManagerIntrinsicSettings: ManagerIntrinsicSettings,
        ManagerSku: ManagerSku,
        CloudError: CloudError,
        ManagerPatch: ManagerPatch,
        PublicKey: PublicKey,
        EncryptionSettings: EncryptionSettings,
        BaseModel: BaseModel,
        ManagerExtendedInfo: ManagerExtendedInfo,
        FeatureList: FeatureList,
        Feature: Feature,
        Key: Key,
        SymmetricEncryptedSecret: SymmetricEncryptedSecret,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Managers. */
    var Managers = /** @class */ (function () {
        /**
         * Create a Managers.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Managers(client) {
            this.client = client;
        }
        Managers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Managers.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Managers.prototype.get = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Managers.prototype.createOrUpdate = function (parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Managers.prototype.deleteMethod = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Managers.prototype.update = function (parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        Managers.prototype.getDevicePublicEncryptionKey = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getDevicePublicEncryptionKeyOperationSpec, callback);
        };
        Managers.prototype.getEncryptionSettings = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getEncryptionSettingsOperationSpec, callback);
        };
        Managers.prototype.getExtendedInfo = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.createExtendedInfo = function (parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, createExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.deleteExtendedInfo = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, deleteExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.updateExtendedInfo = function (parameters, resourceGroupName$$1, managerName$$1, ifMatch$$1, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                ifMatch: ifMatch$$1,
                options: options
            }, updateExtendedInfoOperationSpec, callback);
        };
        Managers.prototype.listFeatureSupportStatus = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listFeatureSupportStatusOperationSpec, callback);
        };
        Managers.prototype.getActivationKey = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getActivationKeyOperationSpec, callback);
        };
        Managers.prototype.getPublicEncryptionKey = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getPublicEncryptionKeyOperationSpec, callback);
        };
        Managers.prototype.listMetrics = function (resourceGroupName$$1, managerName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec, callback);
        };
        Managers.prototype.listMetricDefinition = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec, callback);
        };
        Managers.prototype.regenerateActivationKey = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, regenerateActivationKeyOperationSpec, callback);
        };
        return Managers;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.StorSimple/managers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagerList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagerList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Manager
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Manager, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Manager
            },
            201: {
                bodyMapper: Manager
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagerPatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Manager
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getDevicePublicEncryptionKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/publicEncryptionKey",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PublicKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getEncryptionSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/encryptionSettings/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionSettings
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getExtendedInfoOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagerExtendedInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createExtendedInfoOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagerExtendedInfo, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagerExtendedInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteExtendedInfoOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateExtendedInfoOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagerExtendedInfo, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagerExtendedInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listFeatureSupportStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/features",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FeatureList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getActivationKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/listActivationKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Key
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getPublicEncryptionKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/listPublicEncryptionKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SymmetricEncryptedSecret
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listMetricsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listMetricDefinitionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metricsDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var regenerateActivationKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/regenerateActivationKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Key
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        AccessControlRecordList: AccessControlRecordList,
        AccessControlRecord: AccessControlRecord,
        BaseModel: BaseModel,
        CloudError: CloudError,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AccessControlRecords. */
    var AccessControlRecords = /** @class */ (function () {
        /**
         * Create a AccessControlRecords.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function AccessControlRecords(client) {
            this.client = client;
        }
        AccessControlRecords.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec, callback);
        };
        AccessControlRecords.prototype.get = function (accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                accessControlRecordName: accessControlRecordName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates or Updates an access control record.
         * @param accessControlRecordName The name of the access control record.
         * @param parameters The access control record to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.AccessControlRecordsCreateOrUpdateResponse>
         */
        AccessControlRecords.prototype.createOrUpdate = function (accessControlRecordName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(accessControlRecordName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the access control record.
         * @param accessControlRecordName The name of the access control record to delete.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        AccessControlRecords.prototype.deleteMethod = function (accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or Updates an access control record.
         * @param accessControlRecordName The name of the access control record.
         * @param parameters The access control record to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AccessControlRecords.prototype.beginCreateOrUpdate = function (accessControlRecordName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                accessControlRecordName: accessControlRecordName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes the access control record.
         * @param accessControlRecordName The name of the access control record to delete.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AccessControlRecords.prototype.beginDeleteMethod = function (accessControlRecordName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                accessControlRecordName: accessControlRecordName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        return AccessControlRecords;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByManagerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessControlRecordList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
        urlParameters: [
            accessControlRecordName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessControlRecord
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
        urlParameters: [
            accessControlRecordName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AccessControlRecord, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessControlRecord
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/accessControlRecords/{accessControlRecordName}",
        urlParameters: [
            accessControlRecordName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        AlertList: AlertList,
        Alert: Alert,
        BaseModel: BaseModel,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        CloudError: CloudError,
        ClearAlertRequest: ClearAlertRequest,
        SendTestAlertEmailRequest: SendTestAlertEmailRequest,
        AccessControlRecord: AccessControlRecord,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Alerts. */
    var Alerts = /** @class */ (function () {
        /**
         * Create a Alerts.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Alerts(client) {
            this.client = client;
        }
        Alerts.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$1, callback);
        };
        Alerts.prototype.clear = function (parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, clearOperationSpec, callback);
        };
        Alerts.prototype.sendTestEmail = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, sendTestEmailOperationSpec, callback);
        };
        Alerts.prototype.listByManagerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByManagerNextOperationSpec, callback);
        };
        return Alerts;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByManagerOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/alerts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var clearOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/clearAlerts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ClearAlertRequest, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var sendTestEmailOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/sendTestAlertEmail",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SendTestAlertEmailRequest, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByManagerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        BandwidthSettingList: BandwidthSettingList,
        BandwidthSetting: BandwidthSetting,
        BaseModel: BaseModel,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudError: CloudError,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BandwidthSettings. */
    var BandwidthSettings = /** @class */ (function () {
        /**
         * Create a BandwidthSettings.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function BandwidthSettings(client) {
            this.client = client;
        }
        BandwidthSettings.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$2, callback);
        };
        BandwidthSettings.prototype.get = function (bandwidthSettingName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                bandwidthSettingName: bandwidthSettingName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates the bandwidth setting
         * @param bandwidthSettingName The bandwidth setting name.
         * @param parameters The bandwidth setting to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.BandwidthSettingsCreateOrUpdateResponse>
         */
        BandwidthSettings.prototype.createOrUpdate = function (bandwidthSettingName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(bandwidthSettingName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the bandwidth setting
         * @param bandwidthSettingName The name of the bandwidth setting.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BandwidthSettings.prototype.deleteMethod = function (bandwidthSettingName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(bandwidthSettingName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the bandwidth setting
         * @param bandwidthSettingName The bandwidth setting name.
         * @param parameters The bandwidth setting to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BandwidthSettings.prototype.beginCreateOrUpdate = function (bandwidthSettingName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                bandwidthSettingName: bandwidthSettingName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the bandwidth setting
         * @param bandwidthSettingName The name of the bandwidth setting.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BandwidthSettings.prototype.beginDeleteMethod = function (bandwidthSettingName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                bandwidthSettingName: bandwidthSettingName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        return BandwidthSettings;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByManagerOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BandwidthSettingList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}",
        urlParameters: [
            bandwidthSettingName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BandwidthSetting
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}",
        urlParameters: [
            bandwidthSettingName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BandwidthSetting, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BandwidthSetting
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/bandwidthSettings/{bandwidthSettingName}",
        urlParameters: [
            bandwidthSettingName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        CloudApplianceConfigurationList: CloudApplianceConfigurationList,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        BaseModel: BaseModel,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        CloudError: CloudError,
        CloudAppliance: CloudAppliance,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CloudAppliances. */
    var CloudAppliances = /** @class */ (function () {
        /**
         * Create a CloudAppliances.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function CloudAppliances(client) {
            this.client = client;
        }
        CloudAppliances.prototype.listSupportedConfigurations = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listSupportedConfigurationsOperationSpec, callback);
        };
        /**
         * Provisions cloud appliance.
         * @param parameters The cloud appliance
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CloudAppliances.prototype.provision = function (parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginProvision(parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Provisions cloud appliance.
         * @param parameters The cloud appliance
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CloudAppliances.prototype.beginProvision = function (parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginProvisionOperationSpec, options);
        };
        return CloudAppliances;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listSupportedConfigurationsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/cloudApplianceConfigurations",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CloudApplianceConfigurationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginProvisionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/provisionCloudAppliance",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CloudAppliance, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        BaseModel: BaseModel,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        CloudError: CloudError,
        DeviceList: DeviceList,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        DevicePatch: DevicePatch,
        FailoverSetsList: FailoverSetsList,
        FailoverSet: FailoverSet,
        VolumeContainerFailoverMetadata: VolumeContainerFailoverMetadata,
        VolumeFailoverMetadata: VolumeFailoverMetadata,
        FailoverSetEligibilityResult: FailoverSetEligibilityResult,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        Updates: Updates,
        FailoverRequest: FailoverRequest,
        ListFailoverTargetsRequest: ListFailoverTargetsRequest,
        FailoverTargetsList: FailoverTargetsList,
        FailoverTarget: FailoverTarget,
        TargetEligibilityResult: TargetEligibilityResult,
        TargetEligibilityErrorMessage: TargetEligibilityErrorMessage,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Devices. */
    var Devices = /** @class */ (function () {
        /**
         * Create a Devices.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Devices(client) {
            this.client = client;
        }
        /**
         * Complete minimal setup before using the device.
         * @param parameters The minimal properties to configure a device.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.configure = function (parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginConfigure(parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$3, callback);
        };
        Devices.prototype.get = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Deletes the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.deleteMethod = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.update = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Devices.prototype.authorizeForServiceEncryptionKeyRollover = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, authorizeForServiceEncryptionKeyRolloverOperationSpec, callback);
        };
        /**
         * Deactivates the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.deactivate = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeactivate(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Downloads and installs the updates on the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.installUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginInstallUpdates(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.listFailoverSets = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listFailoverSetsOperationSpec, callback);
        };
        Devices.prototype.listMetrics = function (deviceName$$1, resourceGroupName$$1, managerName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$1, callback);
        };
        Devices.prototype.listMetricDefinition = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$1, callback);
        };
        /**
         * Scans for updates on the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.scanForUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginScanForUpdates(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.getUpdateSummary = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getUpdateSummaryOperationSpec, callback);
        };
        /**
         * Failovers a set of volume containers from a specified source device to a target device.
         * @param sourceDeviceName The source device name on which failover is performed.
         * @param parameters FailoverRequest containing the source device and the list of volume containers
         * to be failed over.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.failover = function (sourceDeviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginFailover(sourceDeviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.listFailoverTargets = function (sourceDeviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                sourceDeviceName: sourceDeviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listFailoverTargetsOperationSpec, callback);
        };
        /**
         * Complete minimal setup before using the device.
         * @param parameters The minimal properties to configure a device.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginConfigure = function (parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginConfigureOperationSpec, options);
        };
        /**
         * Deletes the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDeleteMethod = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Deactivates the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDeactivate = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeactivateOperationSpec, options);
        };
        /**
         * Downloads and installs the updates on the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginInstallUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginInstallUpdatesOperationSpec, options);
        };
        /**
         * Scans for updates on the device.
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginScanForUpdates = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginScanForUpdatesOperationSpec, options);
        };
        /**
         * Failovers a set of volume containers from a specified source device to a target device.
         * @param sourceDeviceName The source device name on which failover is performed.
         * @param parameters FailoverRequest containing the source device and the list of volume containers
         * to be failed over.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginFailover = function (sourceDeviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                sourceDeviceName: sourceDeviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginFailoverOperationSpec, options);
        };
        return Devices;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByManagerOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeviceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Device
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DevicePatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Device
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var authorizeForServiceEncryptionKeyRolloverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/authorizeForServiceEncryptionKeyRollover",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listFailoverSetsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/listFailoverSets",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverSetsList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listMetricsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metrics",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listMetricDefinitionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getUpdateSummaryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/updateSummary/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Updates
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listFailoverTargetsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{sourceDeviceName}/listFailoverTargets",
        urlParameters: [
            sourceDeviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ListFailoverTargetsRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FailoverTargetsList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginConfigureOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/configureDevice",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConfigureDeviceRequest, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeactivateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/deactivate",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginInstallUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/installUpdates",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginScanForUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/scanForUpdates",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginFailoverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{sourceDeviceName}/failover",
        urlParameters: [
            sourceDeviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FailoverRequest, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        AlertSettings: AlertSettings,
        BaseModel: BaseModel,
        CloudError: CloudError,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        NetworkSettingsPatch: NetworkSettingsPatch,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        SecuritySettingsPatch: SecuritySettingsPatch,
        RemoteManagementSettingsPatch: RemoteManagementSettingsPatch,
        CloudApplianceSettings: CloudApplianceSettings,
        TimeSettings: TimeSettings,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        StorageAccountCredential: StorageAccountCredential,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DeviceSettings. */
    var DeviceSettings = /** @class */ (function () {
        /**
         * Create a DeviceSettings.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function DeviceSettings(client) {
            this.client = client;
        }
        DeviceSettings.prototype.getAlertSettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getAlertSettingsOperationSpec, callback);
        };
        /**
         * Creates or updates the alert settings of the specified device.
         * @param deviceName The device name
         * @param parameters The alert settings to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.DeviceSettingsCreateOrUpdateAlertSettingsResponse>
         */
        DeviceSettings.prototype.createOrUpdateAlertSettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdateAlertSettings(deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DeviceSettings.prototype.getNetworkSettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getNetworkSettingsOperationSpec, callback);
        };
        /**
         * Updates the network settings on the specified device.
         * @param deviceName The device name
         * @param parameters The network settings to be updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.DeviceSettingsUpdateNetworkSettingsResponse>
         */
        DeviceSettings.prototype.updateNetworkSettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginUpdateNetworkSettings(deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DeviceSettings.prototype.getSecuritySettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getSecuritySettingsOperationSpec, callback);
        };
        /**
         * Patch Security properties of the specified device name.
         * @param deviceName The device name
         * @param parameters The security settings properties to be patched.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.DeviceSettingsUpdateSecuritySettingsResponse>
         */
        DeviceSettings.prototype.updateSecuritySettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginUpdateSecuritySettings(deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * sync Remote management Certificate between appliance and Service
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DeviceSettings.prototype.syncRemotemanagementCertificate = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginSyncRemotemanagementCertificate(deviceName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DeviceSettings.prototype.getTimeSettings = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getTimeSettingsOperationSpec, callback);
        };
        /**
         * Creates or updates the time settings of the specified device.
         * @param deviceName The device name
         * @param parameters The time settings to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.DeviceSettingsCreateOrUpdateTimeSettingsResponse>
         */
        DeviceSettings.prototype.createOrUpdateTimeSettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdateTimeSettings(deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the alert settings of the specified device.
         * @param deviceName The device name
         * @param parameters The alert settings to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DeviceSettings.prototype.beginCreateOrUpdateAlertSettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateAlertSettingsOperationSpec, options);
        };
        /**
         * Updates the network settings on the specified device.
         * @param deviceName The device name
         * @param parameters The network settings to be updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DeviceSettings.prototype.beginUpdateNetworkSettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginUpdateNetworkSettingsOperationSpec, options);
        };
        /**
         * Patch Security properties of the specified device name.
         * @param deviceName The device name
         * @param parameters The security settings properties to be patched.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DeviceSettings.prototype.beginUpdateSecuritySettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginUpdateSecuritySettingsOperationSpec, options);
        };
        /**
         * sync Remote management Certificate between appliance and Service
         * @param deviceName The device name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DeviceSettings.prototype.beginSyncRemotemanagementCertificate = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginSyncRemotemanagementCertificateOperationSpec, options);
        };
        /**
         * Creates or updates the time settings of the specified device.
         * @param deviceName The device name
         * @param parameters The time settings to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DeviceSettings.prototype.beginCreateOrUpdateTimeSettings = function (deviceName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateTimeSettingsOperationSpec, options);
        };
        return DeviceSettings;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getAlertSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertSettings
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getNetworkSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSettings
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getSecuritySettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecuritySettings
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getTimeSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TimeSettings
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateAlertSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AlertSettings, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AlertSettings
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginUpdateNetworkSettingsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, NetworkSettingsPatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkSettings
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginUpdateSecuritySettingsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SecuritySettingsPatch, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SecuritySettings
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginSyncRemotemanagementCertificateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/syncRemoteManagementCertificate",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateTimeSettingsOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TimeSettings, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TimeSettings
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        BackupPolicyList: BackupPolicyList,
        BackupPolicy: BackupPolicy,
        BaseModel: BaseModel,
        CloudError: CloudError,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupPolicies. */
    var BackupPolicies = /** @class */ (function () {
        /**
         * Create a BackupPolicies.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function BackupPolicies(client) {
            this.client = client;
        }
        BackupPolicies.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec, callback);
        };
        BackupPolicies.prototype.get = function (deviceName$$1, backupPolicyName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Creates or updates the backup policy.
         * @param deviceName The device name
         * @param backupPolicyName The name of the backup policy to be created/updated.
         * @param parameters The backup policy.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupPoliciesCreateOrUpdateResponse>
         */
        BackupPolicies.prototype.createOrUpdate = function (deviceName$$1, backupPolicyName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, backupPolicyName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the backup policy.
         * @param deviceName The device name
         * @param backupPolicyName The name of the backup policy.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BackupPolicies.prototype.deleteMethod = function (deviceName$$1, backupPolicyName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, backupPolicyName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Backup the backup policy now.
         * @param deviceName The device name
         * @param backupPolicyName The backup policy name.
         * @param backupType The backup Type. This can be cloudSnapshot or localSnapshot.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BackupPolicies.prototype.backupNow = function (deviceName$$1, backupPolicyName$$1, backupType$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginBackupNow(deviceName$$1, backupPolicyName$$1, backupType$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the backup policy.
         * @param deviceName The device name
         * @param backupPolicyName The name of the backup policy to be created/updated.
         * @param parameters The backup policy.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupPolicies.prototype.beginCreateOrUpdate = function (deviceName$$1, backupPolicyName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes the backup policy.
         * @param deviceName The device name
         * @param backupPolicyName The name of the backup policy.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupPolicies.prototype.beginDeleteMethod = function (deviceName$$1, backupPolicyName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * Backup the backup policy now.
         * @param deviceName The device name
         * @param backupPolicyName The backup policy name.
         * @param backupType The backup Type. This can be cloudSnapshot or localSnapshot.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupPolicies.prototype.beginBackupNow = function (deviceName$$1, backupPolicyName$$1, backupType$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                backupType: backupType$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginBackupNowOperationSpec, options);
        };
        return BackupPolicies;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listByDeviceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupPolicyList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}",
        urlParameters: [
            deviceName,
            backupPolicyName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}",
        urlParameters: [
            deviceName,
            backupPolicyName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}",
        urlParameters: [
            deviceName,
            backupPolicyName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginBackupNowOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/backup",
        urlParameters: [
            deviceName,
            backupPolicyName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            backupType,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        BackupScheduleList: BackupScheduleList,
        BackupSchedule: BackupSchedule,
        BaseModel: BaseModel,
        ScheduleRecurrence: ScheduleRecurrence,
        CloudError: CloudError,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupSchedules. */
    var BackupSchedules = /** @class */ (function () {
        /**
         * Create a BackupSchedules.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function BackupSchedules(client) {
            this.client = client;
        }
        BackupSchedules.prototype.listByBackupPolicy = function (deviceName$$1, backupPolicyName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByBackupPolicyOperationSpec, callback);
        };
        BackupSchedules.prototype.get = function (deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                backupScheduleName: backupScheduleName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Creates or updates the backup schedule.
         * @param deviceName The device name
         * @param backupPolicyName The backup policy name.
         * @param backupScheduleName The backup schedule name.
         * @param parameters The backup schedule.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupSchedulesCreateOrUpdateResponse>
         */
        BackupSchedules.prototype.createOrUpdate = function (deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the backup schedule.
         * @param deviceName The device name
         * @param backupPolicyName The backup policy name.
         * @param backupScheduleName The name the backup schedule.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BackupSchedules.prototype.deleteMethod = function (deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the backup schedule.
         * @param deviceName The device name
         * @param backupPolicyName The backup policy name.
         * @param backupScheduleName The backup schedule name.
         * @param parameters The backup schedule.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupSchedules.prototype.beginCreateOrUpdate = function (deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                backupScheduleName: backupScheduleName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes the backup schedule.
         * @param deviceName The device name
         * @param backupPolicyName The backup policy name.
         * @param backupScheduleName The name the backup schedule.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupSchedules.prototype.beginDeleteMethod = function (deviceName$$1, backupPolicyName$$1, backupScheduleName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupPolicyName: backupPolicyName$$1,
                backupScheduleName: backupScheduleName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        return BackupSchedules;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listByBackupPolicyOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules",
        urlParameters: [
            deviceName,
            backupPolicyName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupScheduleList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules/{backupScheduleName}",
        urlParameters: [
            deviceName,
            backupPolicyName,
            backupScheduleName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules/{backupScheduleName}",
        urlParameters: [
            deviceName,
            backupPolicyName,
            backupScheduleName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupSchedule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupSchedule
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupPolicies/{backupPolicyName}/schedules/{backupScheduleName}",
        urlParameters: [
            deviceName,
            backupPolicyName,
            backupScheduleName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        BackupList: BackupList,
        Backup: Backup,
        BaseModel: BaseModel,
        BackupElement: BackupElement,
        CloudError: CloudError,
        CloneRequest: CloneRequest,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Backups. */
    var Backups = /** @class */ (function () {
        /**
         * Create a Backups.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Backups(client) {
            this.client = client;
        }
        Backups.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$1, callback);
        };
        /**
         * Deletes the backup.
         * @param deviceName The device name
         * @param backupName The backup name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Backups.prototype.deleteMethod = function (deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Clones the backup element as a new volume.
         * @param deviceName The device name
         * @param backupName The backup name.
         * @param backupElementName The backup element name.
         * @param parameters The clone request object.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Backups.prototype.clone = function (deviceName$$1, backupName$$1, backupElementName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginClone(deviceName$$1, backupName$$1, backupElementName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restores the backup on the device.
         * @param deviceName The device name
         * @param backupName The backupSet name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Backups.prototype.restore = function (deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginRestore(deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the backup.
         * @param deviceName The device name
         * @param backupName The backup name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Backups.prototype.beginDeleteMethod = function (deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupName: backupName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Clones the backup element as a new volume.
         * @param deviceName The device name
         * @param backupName The backup name.
         * @param backupElementName The backup element name.
         * @param parameters The clone request object.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Backups.prototype.beginClone = function (deviceName$$1, backupName$$1, backupElementName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupName: backupName$$1,
                backupElementName: backupElementName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCloneOperationSpec, options);
        };
        /**
         * Restores the backup on the device.
         * @param deviceName The device name
         * @param backupName The backupSet name
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Backups.prototype.beginRestore = function (deviceName$$1, backupName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                backupName: backupName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginRestoreOperationSpec, options);
        };
        Backups.prototype.listByDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDeviceNextOperationSpec, callback);
        };
        return Backups;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByDeviceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}",
        urlParameters: [
            deviceName,
            backupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCloneOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/elements/{backupElementName}/clone",
        urlParameters: [
            deviceName,
            backupName,
            backupElementName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CloneRequest, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backups/{backupName}/restore",
        urlParameters: [
            deviceName,
            backupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByDeviceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        HardwareComponentGroupList: HardwareComponentGroupList,
        HardwareComponentGroup: HardwareComponentGroup,
        BaseModel: BaseModel,
        HardwareComponent: HardwareComponent,
        CloudError: CloudError,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HardwareComponentGroups. */
    var HardwareComponentGroups = /** @class */ (function () {
        /**
         * Create a HardwareComponentGroups.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function HardwareComponentGroups(client) {
            this.client = client;
        }
        HardwareComponentGroups.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$2, callback);
        };
        /**
         * Changes the power state of the controller.
         * @param deviceName The device name
         * @param hardwareComponentGroupName The hardware component group name.
         * @param parameters The controller power state change request.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        HardwareComponentGroups.prototype.changeControllerPowerState = function (deviceName$$1, hardwareComponentGroupName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginChangeControllerPowerState(deviceName$$1, hardwareComponentGroupName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Changes the power state of the controller.
         * @param deviceName The device name
         * @param hardwareComponentGroupName The hardware component group name.
         * @param parameters The controller power state change request.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HardwareComponentGroups.prototype.beginChangeControllerPowerState = function (deviceName$$1, hardwareComponentGroupName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                hardwareComponentGroupName: hardwareComponentGroupName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginChangeControllerPowerStateOperationSpec, options);
        };
        return HardwareComponentGroups;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByDeviceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/hardwareComponentGroups",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HardwareComponentGroupList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginChangeControllerPowerStateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/hardwareComponentGroups/{hardwareComponentGroupName}/changeControllerPowerState",
        urlParameters: [
            deviceName,
            hardwareComponentGroupName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ControllerPowerStateChangeRequest, { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        JobList: JobList,
        Job: Job,
        BaseModel: BaseModel,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        CloudError: CloudError,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$3, callback);
        };
        Jobs.prototype.get = function (deviceName$$1, jobName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                jobName: jobName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Cancels a job on the device.
         * @param deviceName The device name
         * @param jobName The jobName.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Jobs.prototype.cancel = function (deviceName$$1, jobName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCancel(deviceName$$1, jobName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Jobs.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$4, callback);
        };
        /**
         * Cancels a job on the device.
         * @param deviceName The device name
         * @param jobName The jobName.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Jobs.prototype.beginCancel = function (deviceName$$1, jobName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                jobName: jobName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCancelOperationSpec, options);
        };
        Jobs.prototype.listByDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDeviceNextOperationSpec$1, callback);
        };
        Jobs.prototype.listByManagerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByManagerNextOperationSpec$1, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByDeviceOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs/{jobName}",
        urlParameters: [
            deviceName,
            jobName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByManagerOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/jobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginCancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/jobs/{jobName}/cancel",
        urlParameters: [
            deviceName,
            jobName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByDeviceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByManagerNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        VolumeContainerList: VolumeContainerList,
        VolumeContainer: VolumeContainer,
        BaseModel: BaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        CloudError: CloudError,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VolumeContainers. */
    var VolumeContainers = /** @class */ (function () {
        /**
         * Create a VolumeContainers.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function VolumeContainers(client) {
            this.client = client;
        }
        VolumeContainers.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$4, callback);
        };
        VolumeContainers.prototype.get = function (deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        /**
         * Creates or updates the volume container.
         * @param deviceName The device name
         * @param volumeContainerName The name of the volume container.
         * @param parameters The volume container to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.VolumeContainersCreateOrUpdateResponse>
         */
        VolumeContainers.prototype.createOrUpdate = function (deviceName$$1, volumeContainerName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, volumeContainerName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the volume container.
         * @param deviceName The device name
         * @param volumeContainerName The name of the volume container.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VolumeContainers.prototype.deleteMethod = function (deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VolumeContainers.prototype.listMetrics = function (deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$2, callback);
        };
        VolumeContainers.prototype.listMetricDefinition = function (deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$2, callback);
        };
        /**
         * Creates or updates the volume container.
         * @param deviceName The device name
         * @param volumeContainerName The name of the volume container.
         * @param parameters The volume container to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VolumeContainers.prototype.beginCreateOrUpdate = function (deviceName$$1, volumeContainerName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Deletes the volume container.
         * @param deviceName The device name
         * @param volumeContainerName The name of the volume container.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VolumeContainers.prototype.beginDeleteMethod = function (deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        return VolumeContainers;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listByDeviceOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeContainerList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}",
        urlParameters: [
            deviceName,
            volumeContainerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listMetricsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/metrics",
        urlParameters: [
            deviceName,
            volumeContainerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listMetricDefinitionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            volumeContainerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}",
        urlParameters: [
            deviceName,
            volumeContainerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VolumeContainer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VolumeContainer
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}",
        urlParameters: [
            deviceName,
            volumeContainerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        VolumeList: VolumeList,
        Volume: Volume,
        BaseModel: BaseModel,
        CloudError: CloudError,
        MetricList: MetricList,
        Metrics: Metrics,
        MetricName: MetricName,
        MetricDimension: MetricDimension,
        MetricData: MetricData,
        MetricDefinitionList: MetricDefinitionList,
        MetricDefinition: MetricDefinition,
        MetricAvailablity: MetricAvailablity,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        StorageAccountCredential: StorageAccountCredential,
        TimeSettings: TimeSettings,
        Updates: Updates,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Volumes. */
    var Volumes = /** @class */ (function () {
        /**
         * Create a Volumes.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function Volumes(client) {
            this.client = client;
        }
        Volumes.prototype.listByVolumeContainer = function (deviceName$$1, volumeContainerName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByVolumeContainerOperationSpec, callback);
        };
        Volumes.prototype.get = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                volumeName: volumeName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Creates or updates the volume.
         * @param deviceName The device name
         * @param volumeContainerName The volume container name.
         * @param volumeName The volume name.
         * @param parameters Volume to be created or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.VolumesCreateOrUpdateResponse>
         */
        Volumes.prototype.createOrUpdate = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, volumeContainerName$$1, volumeName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the volume.
         * @param deviceName The device name
         * @param volumeContainerName The volume container name.
         * @param volumeName The volume name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Volumes.prototype.deleteMethod = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, volumeContainerName$$1, volumeName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Volumes.prototype.listMetrics = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, resourceGroupName$$1, managerName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                volumeName: volumeName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$3, callback);
        };
        Volumes.prototype.listMetricDefinition = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                volumeName: volumeName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listMetricDefinitionOperationSpec$3, callback);
        };
        Volumes.prototype.listByDevice = function (deviceName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByDeviceOperationSpec$5, callback);
        };
        /**
         * Creates or updates the volume.
         * @param deviceName The device name
         * @param volumeContainerName The volume container name.
         * @param volumeName The volume name.
         * @param parameters Volume to be created or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Volumes.prototype.beginCreateOrUpdate = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                volumeName: volumeName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Deletes the volume.
         * @param deviceName The device name
         * @param volumeContainerName The volume container name.
         * @param volumeName The volume name.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Volumes.prototype.beginDeleteMethod = function (deviceName$$1, volumeContainerName$$1, volumeName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                volumeContainerName: volumeContainerName$$1,
                volumeName: volumeName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        return Volumes;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listByVolumeContainerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes",
        urlParameters: [
            deviceName,
            volumeContainerName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}",
        urlParameters: [
            deviceName,
            volumeContainerName,
            volumeName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Volume
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listMetricsOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}/metrics",
        urlParameters: [
            deviceName,
            volumeContainerName,
            volumeName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion,
            filter1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listMetricDefinitionOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}/metricsDefinitions",
        urlParameters: [
            deviceName,
            volumeContainerName,
            volumeName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByDeviceOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumes",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}",
        urlParameters: [
            deviceName,
            volumeContainerName,
            volumeName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Volume, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Volume
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/volumeContainers/{volumeContainerName}/volumes/{volumeName}",
        urlParameters: [
            deviceName,
            volumeContainerName,
            volumeName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        StorageAccountCredentialList: StorageAccountCredentialList,
        StorageAccountCredential: StorageAccountCredential,
        BaseModel: BaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        CloudError: CloudError,
        AccessControlRecord: AccessControlRecord,
        Alert: Alert,
        AlertSource: AlertSource,
        AlertErrorDetails: AlertErrorDetails,
        AlertSettings: AlertSettings,
        Backup: Backup,
        BackupElement: BackupElement,
        BackupPolicy: BackupPolicy,
        BackupSchedule: BackupSchedule,
        ScheduleRecurrence: ScheduleRecurrence,
        BandwidthSetting: BandwidthSetting,
        BandwidthSchedule: BandwidthSchedule,
        Time: Time,
        CloudApplianceConfiguration: CloudApplianceConfiguration,
        AcsConfiguration: AcsConfiguration,
        VmImage: VmImage,
        ConfigureDeviceRequest: ConfigureDeviceRequest,
        SecondaryDNSSettings: SecondaryDNSSettings,
        NetworkInterfaceData0Settings: NetworkInterfaceData0Settings,
        ControllerPowerStateChangeRequest: ControllerPowerStateChangeRequest,
        Device: Device,
        DeviceDetails: DeviceDetails,
        DeviceRolloverDetails: DeviceRolloverDetails,
        EncryptionSettings: EncryptionSettings,
        HardwareComponentGroup: HardwareComponentGroup,
        HardwareComponent: HardwareComponent,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        DataStatistics: DataStatistics,
        JobStage: JobStage,
        ManagerExtendedInfo: ManagerExtendedInfo,
        NetworkSettings: NetworkSettings,
        DNSSettings: DNSSettings,
        NetworkAdapterList: NetworkAdapterList,
        NetworkAdapters: NetworkAdapters,
        NicIPv4: NicIPv4,
        NicIPv6: NicIPv6,
        WebproxySettings: WebproxySettings,
        SecuritySettings: SecuritySettings,
        RemoteManagementSettings: RemoteManagementSettings,
        ChapSettings: ChapSettings,
        TimeSettings: TimeSettings,
        Updates: Updates,
        Volume: Volume,
        VolumeContainer: VolumeContainer
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageAccountCredentials. */
    var StorageAccountCredentials = /** @class */ (function () {
        /**
         * Create a StorageAccountCredentials.
         * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
         */
        function StorageAccountCredentials(client) {
            this.client = client;
        }
        StorageAccountCredentials.prototype.listByManager = function (resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, listByManagerOperationSpec$5, callback);
        };
        StorageAccountCredentials.prototype.get = function (storageAccountCredentialName$$1, resourceGroupName$$1, managerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                storageAccountCredentialName: storageAccountCredentialName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        /**
         * Creates or updates the storage account credential.
         * @param storageAccountCredentialName The storage account credential name.
         * @param parameters The storage account credential to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageAccountCredentialsCreateOrUpdateResponse>
         */
        StorageAccountCredentials.prototype.createOrUpdate = function (storageAccountCredentialName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.beginCreateOrUpdate(storageAccountCredentialName$$1, parameters, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the storage account credential.
         * @param storageAccountCredentialName The name of the storage account credential.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StorageAccountCredentials.prototype.deleteMethod = function (storageAccountCredentialName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.beginDeleteMethod(storageAccountCredentialName$$1, resourceGroupName$$1, managerName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the storage account credential.
         * @param storageAccountCredentialName The storage account credential name.
         * @param parameters The storage account credential to be added or updated.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccountCredentials.prototype.beginCreateOrUpdate = function (storageAccountCredentialName$$1, parameters, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                storageAccountCredentialName: storageAccountCredentialName$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Deletes the storage account credential.
         * @param storageAccountCredentialName The name of the storage account credential.
         * @param resourceGroupName The resource group name
         * @param managerName The manager name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccountCredentials.prototype.beginDeleteMethod = function (storageAccountCredentialName$$1, resourceGroupName$$1, managerName$$1, options) {
            return this.client.sendLRORequest({
                storageAccountCredentialName: storageAccountCredentialName$$1,
                resourceGroupName: resourceGroupName$$1,
                managerName: managerName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        return StorageAccountCredentials;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listByManagerOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredentialList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{storageAccountCredentialName}",
        urlParameters: [
            storageAccountCredentialName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredential
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{storageAccountCredentialName}",
        urlParameters: [
            storageAccountCredentialName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StorageAccountCredential, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccountCredential
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageAccountCredentials/{storageAccountCredentialName}",
        urlParameters: [
            storageAccountCredentialName,
            subscriptionId,
            resourceGroupName,
            managerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-storsimple8000series";
    var packageVersion = "1.0.0";
    var StorSimple8000SeriesManagementClientContext = /** @class */ (function (_super) {
        __extends(StorSimple8000SeriesManagementClientContext, _super);
        /**
         * Initializes a new instance of the StorSimple8000SeriesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id
         * @param [options] The parameter options
         */
        function StorSimple8000SeriesManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-06-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return StorSimple8000SeriesManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var StorSimple8000SeriesManagementClient = /** @class */ (function (_super) {
        __extends(StorSimple8000SeriesManagementClient, _super);
        /**
         * Initializes a new instance of the StorSimple8000SeriesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id
         * @param [options] The parameter options
         */
        function StorSimple8000SeriesManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.managers = new Managers(_this);
            _this.accessControlRecords = new AccessControlRecords(_this);
            _this.alerts = new Alerts(_this);
            _this.bandwidthSettings = new BandwidthSettings(_this);
            _this.cloudAppliances = new CloudAppliances(_this);
            _this.devices = new Devices(_this);
            _this.deviceSettings = new DeviceSettings(_this);
            _this.backupPolicies = new BackupPolicies(_this);
            _this.backupSchedules = new BackupSchedules(_this);
            _this.backups = new Backups(_this);
            _this.hardwareComponentGroups = new HardwareComponentGroups(_this);
            _this.jobs = new Jobs(_this);
            _this.volumeContainers = new VolumeContainers(_this);
            _this.volumes = new Volumes(_this);
            _this.storageAccountCredentials = new StorageAccountCredentials(_this);
            return _this;
        }
        return StorSimple8000SeriesManagementClient;
    }(StorSimple8000SeriesManagementClientContext));

    exports.StorSimple8000SeriesManagementClient = StorSimple8000SeriesManagementClient;
    exports.StorSimple8000SeriesManagementClientContext = StorSimple8000SeriesManagementClientContext;
    exports.StorSimple8000SeriesManagementModels = index;
    exports.StorSimple8000SeriesManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Managers = Managers;
    exports.AccessControlRecords = AccessControlRecords;
    exports.Alerts = Alerts;
    exports.BandwidthSettings = BandwidthSettings;
    exports.CloudAppliances = CloudAppliances;
    exports.Devices = Devices;
    exports.DeviceSettings = DeviceSettings;
    exports.BackupPolicies = BackupPolicies;
    exports.BackupSchedules = BackupSchedules;
    exports.Backups = Backups;
    exports.HardwareComponentGroups = HardwareComponentGroups;
    exports.Jobs = Jobs;
    exports.VolumeContainers = VolumeContainers;
    exports.Volumes = Volumes;
    exports.StorageAccountCredentials = StorageAccountCredentials;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-storsimple8000series.js.map
