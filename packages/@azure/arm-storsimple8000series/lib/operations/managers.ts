/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/managersMappers";
import * as Parameters from "../models/parameters";
import { StorSimple8000SeriesManagementClientContext } from "../storSimple8000SeriesManagementClientContext";

/** Class representing a Managers. */
export class Managers {
  private readonly client: StorSimple8000SeriesManagementClientContext;

  /**
   * Create a Managers.
   * @param {StorSimple8000SeriesManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorSimple8000SeriesManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves all the managers in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.ManagersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ManagerList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagerList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagerList>, callback?: msRest.ServiceCallback<Models.ManagerList>): Promise<Models.ManagersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ManagersListResponse>;
  }

  /**
   * Retrieves all the managers in a resource group.
   * @param resourceGroupName The resource group name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ManagerList>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagerList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagerList>, callback?: msRest.ServiceCallback<Models.ManagerList>): Promise<Models.ManagersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ManagersListByResourceGroupResponse>;
  }

  /**
   * Returns the properties of the specified manager name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersGetResponse>
   */
  get(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersGetResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  get(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.Manager>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Manager>): void;
  get(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Manager>, callback?: msRest.ServiceCallback<Models.Manager>): Promise<Models.ManagersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ManagersGetResponse>;
  }

  /**
   * Creates or updates the manager.
   * @param parameters The manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersCreateOrUpdateResponse>
   */
  createOrUpdate(parameters: Models.Manager, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersCreateOrUpdateResponse>;
  /**
   * @param parameters The manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.Manager, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.Manager>): void;
  /**
   * @param parameters The manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.Manager, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Manager>): void;
  createOrUpdate(parameters: Models.Manager, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Manager>, callback?: msRest.ServiceCallback<Models.Manager>): Promise<Models.ManagersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        managerName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ManagersCreateOrUpdateResponse>;
  }

  /**
   * Deletes the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates the StorSimple Manager.
   * @param parameters The manager update parameters.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersUpdateResponse>
   */
  update(parameters: Models.ManagerPatch, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersUpdateResponse>;
  /**
   * @param parameters The manager update parameters.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  update(parameters: Models.ManagerPatch, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.Manager>): void;
  /**
   * @param parameters The manager update parameters.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  update(parameters: Models.ManagerPatch, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Manager>): void;
  update(parameters: Models.ManagerPatch, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Manager>, callback?: msRest.ServiceCallback<Models.Manager>): Promise<Models.ManagersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        managerName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ManagersUpdateResponse>;
  }

  /**
   * Returns the public encryption key of the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersGetDevicePublicEncryptionKeyResponse>
   */
  getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersGetDevicePublicEncryptionKeyResponse>;
  /**
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.PublicKey>): void;
  /**
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicKey>): void;
  getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PublicKey>, callback?: msRest.ServiceCallback<Models.PublicKey>): Promise<Models.ManagersGetDevicePublicEncryptionKeyResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        resourceGroupName,
        managerName,
        options
      },
      getDevicePublicEncryptionKeyOperationSpec,
      callback) as Promise<Models.ManagersGetDevicePublicEncryptionKeyResponse>;
  }

  /**
   * Returns the encryption settings of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersGetEncryptionSettingsResponse>
   */
  getEncryptionSettings(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersGetEncryptionSettingsResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  getEncryptionSettings(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.EncryptionSettings>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  getEncryptionSettings(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EncryptionSettings>): void;
  getEncryptionSettings(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EncryptionSettings>, callback?: msRest.ServiceCallback<Models.EncryptionSettings>): Promise<Models.ManagersGetEncryptionSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      getEncryptionSettingsOperationSpec,
      callback) as Promise<Models.ManagersGetEncryptionSettingsResponse>;
  }

  /**
   * Returns the extended information of the specified manager name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersGetExtendedInfoResponse>
   */
  getExtendedInfo(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersGetExtendedInfoResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  getExtendedInfo(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.ManagerExtendedInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  getExtendedInfo(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagerExtendedInfo>): void;
  getExtendedInfo(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagerExtendedInfo>, callback?: msRest.ServiceCallback<Models.ManagerExtendedInfo>): Promise<Models.ManagersGetExtendedInfoResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      getExtendedInfoOperationSpec,
      callback) as Promise<Models.ManagersGetExtendedInfoResponse>;
  }

  /**
   * Creates the extended info of the manager.
   * @param parameters The manager extended information.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersCreateExtendedInfoResponse>
   */
  createExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersCreateExtendedInfoResponse>;
  /**
   * @param parameters The manager extended information.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  createExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.ManagerExtendedInfo>): void;
  /**
   * @param parameters The manager extended information.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  createExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagerExtendedInfo>): void;
  createExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagerExtendedInfo>, callback?: msRest.ServiceCallback<Models.ManagerExtendedInfo>): Promise<Models.ManagersCreateExtendedInfoResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        managerName,
        options
      },
      createExtendedInfoOperationSpec,
      callback) as Promise<Models.ManagersCreateExtendedInfoResponse>;
  }

  /**
   * Deletes the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteExtendedInfo(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  deleteExtendedInfo(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteExtendedInfo(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteExtendedInfo(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      deleteExtendedInfoOperationSpec,
      callback);
  }

  /**
   * Updates the extended info of the manager.
   * @param parameters The manager extended information.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param ifMatch Pass the ETag of ExtendedInfo fetched from GET call
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersUpdateExtendedInfoResponse>
   */
  updateExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersUpdateExtendedInfoResponse>;
  /**
   * @param parameters The manager extended information.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param ifMatch Pass the ETag of ExtendedInfo fetched from GET call
   * @param callback The callback
   */
  updateExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, callback: msRest.ServiceCallback<Models.ManagerExtendedInfo>): void;
  /**
   * @param parameters The manager extended information.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param ifMatch Pass the ETag of ExtendedInfo fetched from GET call
   * @param options The optional parameters
   * @param callback The callback
   */
  updateExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagerExtendedInfo>): void;
  updateExtendedInfo(parameters: Models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagerExtendedInfo>, callback?: msRest.ServiceCallback<Models.ManagerExtendedInfo>): Promise<Models.ManagersUpdateExtendedInfoResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        managerName,
        ifMatch,
        options
      },
      updateExtendedInfoOperationSpec,
      callback) as Promise<Models.ManagersUpdateExtendedInfoResponse>;
  }

  /**
   * Lists the features and their support status
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersListFeatureSupportStatusResponse>
   */
  listFeatureSupportStatus(resourceGroupName: string, managerName: string, options?: Models.ManagersListFeatureSupportStatusOptionalParams): Promise<Models.ManagersListFeatureSupportStatusResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listFeatureSupportStatus(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.FeatureList>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listFeatureSupportStatus(resourceGroupName: string, managerName: string, options: Models.ManagersListFeatureSupportStatusOptionalParams, callback: msRest.ServiceCallback<Models.FeatureList>): void;
  listFeatureSupportStatus(resourceGroupName: string, managerName: string, options?: Models.ManagersListFeatureSupportStatusOptionalParams | msRest.ServiceCallback<Models.FeatureList>, callback?: msRest.ServiceCallback<Models.FeatureList>): Promise<Models.ManagersListFeatureSupportStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      listFeatureSupportStatusOperationSpec,
      callback) as Promise<Models.ManagersListFeatureSupportStatusResponse>;
  }

  /**
   * Returns the activation key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersGetActivationKeyResponse>
   */
  getActivationKey(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersGetActivationKeyResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  getActivationKey(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.Key>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  getActivationKey(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Key>): void;
  getActivationKey(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Key>, callback?: msRest.ServiceCallback<Models.Key>): Promise<Models.ManagersGetActivationKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      getActivationKeyOperationSpec,
      callback) as Promise<Models.ManagersGetActivationKeyResponse>;
  }

  /**
   * Returns the symmetric encrypted public encryption key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersGetPublicEncryptionKeyResponse>
   */
  getPublicEncryptionKey(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersGetPublicEncryptionKeyResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  getPublicEncryptionKey(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.SymmetricEncryptedSecret>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublicEncryptionKey(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SymmetricEncryptedSecret>): void;
  getPublicEncryptionKey(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SymmetricEncryptedSecret>, callback?: msRest.ServiceCallback<Models.SymmetricEncryptedSecret>): Promise<Models.ManagersGetPublicEncryptionKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      getPublicEncryptionKeyOperationSpec,
      callback) as Promise<Models.ManagersGetPublicEncryptionKeyResponse>;
  }

  /**
   * Gets the metrics for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersListMetricsResponse>
   */
  listMetrics(resourceGroupName: string, managerName: string, filter: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersListMetricsResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param callback The callback
   */
  listMetrics(resourceGroupName: string, managerName: string, filter: string, callback: msRest.ServiceCallback<Models.MetricList>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetrics(resourceGroupName: string, managerName: string, filter: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricList>): void;
  listMetrics(resourceGroupName: string, managerName: string, filter: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricList>, callback?: msRest.ServiceCallback<Models.MetricList>): Promise<Models.ManagersListMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        filter,
        options
      },
      listMetricsOperationSpec,
      callback) as Promise<Models.ManagersListMetricsResponse>;
  }

  /**
   * Gets the metric definitions for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersListMetricDefinitionResponse>
   */
  listMetricDefinition(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersListMetricDefinitionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listMetricDefinition(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.MetricDefinitionList>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listMetricDefinition(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionList>): void;
  listMetricDefinition(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionList>, callback?: msRest.ServiceCallback<Models.MetricDefinitionList>): Promise<Models.ManagersListMetricDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      listMetricDefinitionOperationSpec,
      callback) as Promise<Models.ManagersListMetricDefinitionResponse>;
  }

  /**
   * Re-generates and returns the activation key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagersRegenerateActivationKeyResponse>
   */
  regenerateActivationKey(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagersRegenerateActivationKeyResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  regenerateActivationKey(resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.Key>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateActivationKey(resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Key>): void;
  regenerateActivationKey(resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Key>, callback?: msRest.ServiceCallback<Models.Key>): Promise<Models.ManagersRegenerateActivationKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managerName,
        options
      },
      regenerateActivationKeyOperationSpec,
      callback) as Promise<Models.ManagersRegenerateActivationKeyResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.StorSimple/managers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Manager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Manager,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Manager
    },
    201: {
      bodyMapper: Mappers.Manager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ManagerPatch,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Manager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDevicePublicEncryptionKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/publicEncryptionKey",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublicKey
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getEncryptionSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/encryptionSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EncryptionSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getExtendedInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagerExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createExtendedInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ManagerExtendedInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagerExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteExtendedInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateExtendedInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ManagerExtendedInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagerExtendedInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listFeatureSupportStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/features",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FeatureList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getActivationKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/listActivationKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPublicEncryptionKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/listPublicEncryptionKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SymmetricEncryptedSecret
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metrics",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listMetricDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metricsDefinitions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const regenerateActivationKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/regenerateActivationKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Key
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
