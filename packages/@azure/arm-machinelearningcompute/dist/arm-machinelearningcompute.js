/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmMachinelearningcompute = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for OperationStatus.
     * Possible values include: 'Unknown', 'Updating', 'Creating', 'Deleting',
     * 'Succeeded', 'Failed', 'Canceled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperationStatus =
     * <OperationStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperationStatus;
    (function (OperationStatus) {
        OperationStatus["Unknown"] = "Unknown";
        OperationStatus["Updating"] = "Updating";
        OperationStatus["Creating"] = "Creating";
        OperationStatus["Deleting"] = "Deleting";
        OperationStatus["Succeeded"] = "Succeeded";
        OperationStatus["Failed"] = "Failed";
        OperationStatus["Canceled"] = "Canceled";
    })(OperationStatus || (OperationStatus = {}));
    /**
     * Defines values for ClusterType.
     * Possible values include: 'ACS', 'Local'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ClusterType =
     * <ClusterType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ClusterType;
    (function (ClusterType) {
        ClusterType["ACS"] = "ACS";
        ClusterType["Local"] = "Local";
    })(ClusterType || (ClusterType = {}));
    /**
     * Defines values for OrchestratorType.
     * Possible values include: 'Kubernetes', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OrchestratorType =
     * <OrchestratorType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OrchestratorType;
    (function (OrchestratorType) {
        OrchestratorType["Kubernetes"] = "Kubernetes";
        OrchestratorType["None"] = "None";
    })(OrchestratorType || (OrchestratorType = {}));
    /**
     * Defines values for SystemServiceType.
     * Possible values include: 'None', 'ScoringFrontEnd', 'BatchFrontEnd'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SystemServiceType =
     * <SystemServiceType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SystemServiceType;
    (function (SystemServiceType) {
        SystemServiceType["None"] = "None";
        SystemServiceType["ScoringFrontEnd"] = "ScoringFrontEnd";
        SystemServiceType["BatchFrontEnd"] = "BatchFrontEnd";
    })(SystemServiceType || (SystemServiceType = {}));
    /**
     * Defines values for AgentVMSizeTypes.
     * Possible values include: 'Standard_A0', 'Standard_A1', 'Standard_A2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
     * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1',
     * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
     * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
     * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
     * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1',
     * 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11',
     * 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AgentVMSizeTypes =
     * <AgentVMSizeTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AgentVMSizeTypes;
    (function (AgentVMSizeTypes) {
        AgentVMSizeTypes["StandardA0"] = "Standard_A0";
        AgentVMSizeTypes["StandardA1"] = "Standard_A1";
        AgentVMSizeTypes["StandardA2"] = "Standard_A2";
        AgentVMSizeTypes["StandardA3"] = "Standard_A3";
        AgentVMSizeTypes["StandardA4"] = "Standard_A4";
        AgentVMSizeTypes["StandardA5"] = "Standard_A5";
        AgentVMSizeTypes["StandardA6"] = "Standard_A6";
        AgentVMSizeTypes["StandardA7"] = "Standard_A7";
        AgentVMSizeTypes["StandardA8"] = "Standard_A8";
        AgentVMSizeTypes["StandardA9"] = "Standard_A9";
        AgentVMSizeTypes["StandardA10"] = "Standard_A10";
        AgentVMSizeTypes["StandardA11"] = "Standard_A11";
        AgentVMSizeTypes["StandardD1"] = "Standard_D1";
        AgentVMSizeTypes["StandardD2"] = "Standard_D2";
        AgentVMSizeTypes["StandardD3"] = "Standard_D3";
        AgentVMSizeTypes["StandardD4"] = "Standard_D4";
        AgentVMSizeTypes["StandardD11"] = "Standard_D11";
        AgentVMSizeTypes["StandardD12"] = "Standard_D12";
        AgentVMSizeTypes["StandardD13"] = "Standard_D13";
        AgentVMSizeTypes["StandardD14"] = "Standard_D14";
        AgentVMSizeTypes["StandardD1V2"] = "Standard_D1_v2";
        AgentVMSizeTypes["StandardD2V2"] = "Standard_D2_v2";
        AgentVMSizeTypes["StandardD3V2"] = "Standard_D3_v2";
        AgentVMSizeTypes["StandardD4V2"] = "Standard_D4_v2";
        AgentVMSizeTypes["StandardD5V2"] = "Standard_D5_v2";
        AgentVMSizeTypes["StandardD11V2"] = "Standard_D11_v2";
        AgentVMSizeTypes["StandardD12V2"] = "Standard_D12_v2";
        AgentVMSizeTypes["StandardD13V2"] = "Standard_D13_v2";
        AgentVMSizeTypes["StandardD14V2"] = "Standard_D14_v2";
        AgentVMSizeTypes["StandardG1"] = "Standard_G1";
        AgentVMSizeTypes["StandardG2"] = "Standard_G2";
        AgentVMSizeTypes["StandardG3"] = "Standard_G3";
        AgentVMSizeTypes["StandardG4"] = "Standard_G4";
        AgentVMSizeTypes["StandardG5"] = "Standard_G5";
        AgentVMSizeTypes["StandardDS1"] = "Standard_DS1";
        AgentVMSizeTypes["StandardDS2"] = "Standard_DS2";
        AgentVMSizeTypes["StandardDS3"] = "Standard_DS3";
        AgentVMSizeTypes["StandardDS4"] = "Standard_DS4";
        AgentVMSizeTypes["StandardDS11"] = "Standard_DS11";
        AgentVMSizeTypes["StandardDS12"] = "Standard_DS12";
        AgentVMSizeTypes["StandardDS13"] = "Standard_DS13";
        AgentVMSizeTypes["StandardDS14"] = "Standard_DS14";
        AgentVMSizeTypes["StandardGS1"] = "Standard_GS1";
        AgentVMSizeTypes["StandardGS2"] = "Standard_GS2";
        AgentVMSizeTypes["StandardGS3"] = "Standard_GS3";
        AgentVMSizeTypes["StandardGS4"] = "Standard_GS4";
        AgentVMSizeTypes["StandardGS5"] = "Standard_GS5";
    })(AgentVMSizeTypes || (AgentVMSizeTypes = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["Enabled"] = "Enabled";
        Status["Disabled"] = "Disabled";
    })(Status || (Status = {}));
    /**
     * Defines values for UpdatesAvailable.
     * Possible values include: 'Yes', 'No'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UpdatesAvailable =
     * <UpdatesAvailable>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UpdatesAvailable;
    (function (UpdatesAvailable) {
        UpdatesAvailable["Yes"] = "Yes";
        UpdatesAvailable["No"] = "No";
    })(UpdatesAvailable || (UpdatesAvailable = {}));

    var index = /*#__PURE__*/Object.freeze({
        get OperationStatus () { return OperationStatus; },
        get ClusterType () { return ClusterType; },
        get OrchestratorType () { return OrchestratorType; },
        get SystemServiceType () { return SystemServiceType; },
        get AgentVMSizeTypes () { return AgentVMSizeTypes; },
        get Status () { return Status; },
        get UpdatesAvailable () { return UpdatesAvailable; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorDetail = {
        serializedName: "ErrorDetail",
        type: {
            name: "Composite",
            className: "ErrorDetail",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponseWrapper = {
        serializedName: "ErrorResponseWrapper",
        type: {
            name: "Composite",
            className: "ErrorResponseWrapper",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var StorageAccountProperties = {
        serializedName: "StorageAccountProperties",
        type: {
            name: "Composite",
            className: "StorageAccountProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryProperties = {
        serializedName: "ContainerRegistryProperties",
        type: {
            name: "Composite",
            className: "ContainerRegistryProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServicePrincipalProperties = {
        serializedName: "ServicePrincipalProperties",
        type: {
            name: "Composite",
            className: "ServicePrincipalProperties",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    required: true,
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KubernetesClusterProperties = {
        serializedName: "Kubernetes",
        type: {
            name: "Composite",
            className: "KubernetesClusterProperties",
            modelProperties: {
                servicePrincipal: {
                    serializedName: "servicePrincipal",
                    type: {
                        name: "Composite",
                        className: "ServicePrincipalProperties"
                    }
                }
            }
        }
    };
    var SystemService = {
        serializedName: "SystemService",
        type: {
            name: "Composite",
            className: "SystemService",
            modelProperties: {
                systemServiceType: {
                    required: true,
                    serializedName: "systemServiceType",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddress: {
                    readOnly: true,
                    serializedName: "publicIpAddress",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AcsClusterProperties = {
        serializedName: "AcsClusterProperties",
        type: {
            name: "Composite",
            className: "AcsClusterProperties",
            modelProperties: {
                clusterFqdn: {
                    readOnly: true,
                    serializedName: "clusterFqdn",
                    type: {
                        name: "String"
                    }
                },
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorProperties: {
                    serializedName: "orchestratorProperties",
                    type: {
                        name: "Composite",
                        className: "KubernetesClusterProperties"
                    }
                },
                systemServices: {
                    serializedName: "systemServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SystemService"
                            }
                        }
                    }
                },
                masterCount: {
                    serializedName: "masterCount",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 5,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                agentCount: {
                    serializedName: "agentCount",
                    defaultValue: 2,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                agentVmSize: {
                    serializedName: "agentVmSize",
                    defaultValue: 'Standard_D3_v2',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppInsightsProperties = {
        serializedName: "AppInsightsProperties",
        type: {
            name: "Composite",
            className: "AppInsightsProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SslConfiguration = {
        serializedName: "SslConfiguration",
        type: {
            name: "Composite",
            className: "SslConfiguration",
            modelProperties: {
                status: {
                    serializedName: "status",
                    defaultValue: 'Enabled',
                    type: {
                        name: "String"
                    }
                },
                cert: {
                    serializedName: "cert",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                cname: {
                    serializedName: "cname",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceAuthConfiguration = {
        serializedName: "ServiceAuthConfiguration",
        type: {
            name: "Composite",
            className: "ServiceAuthConfiguration",
            modelProperties: {
                primaryAuthKeyHash: {
                    required: true,
                    serializedName: "primaryAuthKeyHash",
                    type: {
                        name: "String"
                    }
                },
                secondaryAuthKeyHash: {
                    required: true,
                    serializedName: "secondaryAuthKeyHash",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoScaleConfiguration = {
        serializedName: "AutoScaleConfiguration",
        type: {
            name: "Composite",
            className: "AutoScaleConfiguration",
            modelProperties: {
                status: {
                    serializedName: "status",
                    defaultValue: 'Disabled',
                    type: {
                        name: "String"
                    }
                },
                minReplicas: {
                    serializedName: "minReplicas",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxReplicas: {
                    serializedName: "maxReplicas",
                    defaultValue: 100,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                targetUtilization: {
                    serializedName: "targetUtilization",
                    type: {
                        name: "Number"
                    }
                },
                refreshPeriodInSeconds: {
                    serializedName: "refreshPeriodInSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var GlobalServiceConfiguration = {
        serializedName: "GlobalServiceConfiguration",
        type: {
            name: "Composite",
            className: "GlobalServiceConfiguration",
            modelProperties: {
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                ssl: {
                    serializedName: "ssl",
                    type: {
                        name: "Composite",
                        className: "SslConfiguration"
                    }
                },
                serviceAuth: {
                    serializedName: "serviceAuth",
                    type: {
                        name: "Composite",
                        className: "ServiceAuthConfiguration"
                    }
                },
                autoScale: {
                    serializedName: "autoScale",
                    type: {
                        name: "Composite",
                        className: "AutoScaleConfiguration"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var OperationalizationCluster = {
        serializedName: "OperationalizationCluster",
        type: {
            name: "Composite",
            className: "OperationalizationCluster",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, createdOn: {
                    readOnly: true,
                    serializedName: "properties.createdOn",
                    type: {
                        name: "DateTime"
                    }
                }, modifiedOn: {
                    readOnly: true,
                    serializedName: "properties.modifiedOn",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisioningErrors: {
                    readOnly: true,
                    serializedName: "properties.provisioningErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorResponseWrapper"
                            }
                        }
                    }
                }, clusterType: {
                    required: true,
                    serializedName: "properties.clusterType",
                    type: {
                        name: "String"
                    }
                }, storageAccount: {
                    serializedName: "properties.storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                }, containerRegistry: {
                    serializedName: "properties.containerRegistry",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryProperties"
                    }
                }, containerService: {
                    serializedName: "properties.containerService",
                    type: {
                        name: "Composite",
                        className: "AcsClusterProperties"
                    }
                }, appInsights: {
                    serializedName: "properties.appInsights",
                    type: {
                        name: "Composite",
                        className: "AppInsightsProperties"
                    }
                }, globalServiceConfiguration: {
                    serializedName: "properties.globalServiceConfiguration",
                    type: {
                        name: "Composite",
                        className: "GlobalServiceConfiguration",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var OperationalizationClusterUpdateParameters = {
        serializedName: "OperationalizationClusterUpdateParameters",
        type: {
            name: "Composite",
            className: "OperationalizationClusterUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountCredentials = {
        serializedName: "StorageAccountCredentials",
        type: {
            name: "Composite",
            className: "StorageAccountCredentials",
            modelProperties: {
                resourceId: {
                    readOnly: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryCredentials = {
        serializedName: "ContainerRegistryCredentials",
        type: {
            name: "Composite",
            className: "ContainerRegistryCredentials",
            modelProperties: {
                loginServer: {
                    readOnly: true,
                    serializedName: "loginServer",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    readOnly: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                password2: {
                    readOnly: true,
                    serializedName: "password2",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    readOnly: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceCredentials = {
        serializedName: "ContainerServiceCredentials",
        type: {
            name: "Composite",
            className: "ContainerServiceCredentials",
            modelProperties: {
                acsKubeConfig: {
                    readOnly: true,
                    serializedName: "acsKubeConfig",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalConfiguration: {
                    readOnly: true,
                    serializedName: "servicePrincipalConfiguration",
                    type: {
                        name: "Composite",
                        className: "ServicePrincipalProperties"
                    }
                },
                imagePullSecretName: {
                    readOnly: true,
                    serializedName: "imagePullSecretName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppInsightsCredentials = {
        serializedName: "AppInsightsCredentials",
        type: {
            name: "Composite",
            className: "AppInsightsCredentials",
            modelProperties: {
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                instrumentationKey: {
                    serializedName: "instrumentationKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationalizationClusterCredentials = {
        serializedName: "OperationalizationClusterCredentials",
        type: {
            name: "Composite",
            className: "OperationalizationClusterCredentials",
            modelProperties: {
                storageAccount: {
                    serializedName: "storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountCredentials"
                    }
                },
                containerRegistry: {
                    serializedName: "containerRegistry",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryCredentials"
                    }
                },
                containerService: {
                    serializedName: "containerService",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceCredentials"
                    }
                },
                appInsights: {
                    serializedName: "appInsights",
                    type: {
                        name: "Composite",
                        className: "AppInsightsCredentials"
                    }
                },
                serviceAuthConfiguration: {
                    serializedName: "serviceAuthConfiguration",
                    type: {
                        name: "Composite",
                        className: "ServiceAuthConfiguration"
                    }
                },
                sslConfiguration: {
                    serializedName: "sslConfiguration",
                    type: {
                        name: "Composite",
                        className: "SslConfiguration"
                    }
                }
            }
        }
    };
    var CheckSystemServicesUpdatesAvailableResponse = {
        serializedName: "CheckSystemServicesUpdatesAvailableResponse",
        type: {
            name: "Composite",
            className: "CheckSystemServicesUpdatesAvailableResponse",
            modelProperties: {
                updatesAvailable: {
                    readOnly: true,
                    serializedName: "updatesAvailable",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateSystemServicesResponse = {
        serializedName: "UpdateSystemServicesResponse",
        type: {
            name: "Composite",
            className: "UpdateSystemServicesResponse",
            modelProperties: {
                updateStatus: {
                    readOnly: true,
                    serializedName: "updateStatus",
                    type: {
                        name: "String"
                    }
                },
                updateStartedOn: {
                    readOnly: true,
                    serializedName: "updateStartedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                updateCompletedOn: {
                    readOnly: true,
                    serializedName: "updateCompletedOn",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ResourceOperationDisplay = {
        serializedName: "ResourceOperation_display",
        type: {
            name: "Composite",
            className: "ResourceOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceOperation = {
        serializedName: "ResourceOperation",
        type: {
            name: "Composite",
            className: "ResourceOperation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "ResourceOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableOperations = {
        serializedName: "AvailableOperations",
        type: {
            name: "Composite",
            className: "AvailableOperations",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceOperation"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationalizationClustersDeleteHeaders = {
        serializedName: "operationalizationclusters-delete-headers",
        type: {
            name: "Composite",
            className: "OperationalizationClustersDeleteHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationalizationClustersUpdateSystemServicesHeaders = {
        serializedName: "operationalizationclusters-updatesystemservices-headers",
        type: {
            name: "Composite",
            className: "OperationalizationClustersUpdateSystemServicesHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PaginatedOperationalizationClustersList = {
        serializedName: "PaginatedOperationalizationClustersList",
        type: {
            name: "Composite",
            className: "PaginatedOperationalizationClustersList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationalizationCluster"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        ErrorResponseWrapper: ErrorResponseWrapper,
        StorageAccountProperties: StorageAccountProperties,
        ContainerRegistryProperties: ContainerRegistryProperties,
        ServicePrincipalProperties: ServicePrincipalProperties,
        KubernetesClusterProperties: KubernetesClusterProperties,
        SystemService: SystemService,
        AcsClusterProperties: AcsClusterProperties,
        AppInsightsProperties: AppInsightsProperties,
        SslConfiguration: SslConfiguration,
        ServiceAuthConfiguration: ServiceAuthConfiguration,
        AutoScaleConfiguration: AutoScaleConfiguration,
        GlobalServiceConfiguration: GlobalServiceConfiguration,
        OperationalizationCluster: OperationalizationCluster,
        OperationalizationClusterUpdateParameters: OperationalizationClusterUpdateParameters,
        StorageAccountCredentials: StorageAccountCredentials,
        ContainerRegistryCredentials: ContainerRegistryCredentials,
        ContainerServiceCredentials: ContainerServiceCredentials,
        AppInsightsCredentials: AppInsightsCredentials,
        OperationalizationClusterCredentials: OperationalizationClusterCredentials,
        CheckSystemServicesUpdatesAvailableResponse: CheckSystemServicesUpdatesAvailableResponse,
        UpdateSystemServicesResponse: UpdateSystemServicesResponse,
        ResourceOperationDisplay: ResourceOperationDisplay,
        ResourceOperation: ResourceOperation,
        AvailableOperations: AvailableOperations,
        OperationalizationClustersDeleteHeaders: OperationalizationClustersDeleteHeaders,
        OperationalizationClustersUpdateSystemServicesHeaders: OperationalizationClustersUpdateSystemServicesHeaders,
        PaginatedOperationalizationClustersList: PaginatedOperationalizationClustersList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationalizationCluster: OperationalizationCluster,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponseWrapper: ErrorResponseWrapper,
        ErrorResponse: ErrorResponse,
        ErrorDetail: ErrorDetail,
        StorageAccountProperties: StorageAccountProperties,
        ContainerRegistryProperties: ContainerRegistryProperties,
        AcsClusterProperties: AcsClusterProperties,
        KubernetesClusterProperties: KubernetesClusterProperties,
        ServicePrincipalProperties: ServicePrincipalProperties,
        SystemService: SystemService,
        AppInsightsProperties: AppInsightsProperties,
        GlobalServiceConfiguration: GlobalServiceConfiguration,
        SslConfiguration: SslConfiguration,
        ServiceAuthConfiguration: ServiceAuthConfiguration,
        AutoScaleConfiguration: AutoScaleConfiguration,
        OperationalizationClusterUpdateParameters: OperationalizationClusterUpdateParameters,
        OperationalizationClustersDeleteHeaders: OperationalizationClustersDeleteHeaders,
        OperationalizationClusterCredentials: OperationalizationClusterCredentials,
        StorageAccountCredentials: StorageAccountCredentials,
        ContainerRegistryCredentials: ContainerRegistryCredentials,
        ContainerServiceCredentials: ContainerServiceCredentials,
        AppInsightsCredentials: AppInsightsCredentials,
        CloudError: CloudError,
        CheckSystemServicesUpdatesAvailableResponse: CheckSystemServicesUpdatesAvailableResponse,
        UpdateSystemServicesResponse: UpdateSystemServicesResponse,
        OperationalizationClustersUpdateSystemServicesHeaders: OperationalizationClustersUpdateSystemServicesHeaders,
        PaginatedOperationalizationClustersList: PaginatedOperationalizationClustersList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var clusterName = {
        parameterPath: "clusterName",
        mapper: {
            required: true,
            serializedName: "clusterName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[a-zA-Z][-\w\._\(\)]+[a-zA-Z0-9]$/
            },
            type: {
                name: "String"
            }
        }
    };
    var deleteAll = {
        parameterPath: [
            "options",
            "deleteAll"
        ],
        mapper: {
            serializedName: "deleteAll",
            type: {
                name: "Boolean"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var skiptoken = {
        parameterPath: [
            "options",
            "skiptoken"
        ],
        mapper: {
            serializedName: "$skiptoken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OperationalizationClusters. */
    var OperationalizationClusters = /** @class */ (function () {
        /**
         * Create a OperationalizationClusters.
         * @param {MachineLearningComputeManagementClientContext} client Reference to the service client.
         */
        function OperationalizationClusters(client) {
            this.client = client;
        }
        /**
         * Create or update an operationalization cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param parameters Parameters supplied to create or update an Operationalization cluster.
         * @param [options] The optional parameters
         * @returns Promise<Models.OperationalizationClustersCreateOrUpdateResponse>
         */
        OperationalizationClusters.prototype.createOrUpdate = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, clusterName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        OperationalizationClusters.prototype.get = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        OperationalizationClusters.prototype.update = function (resourceGroupName$$1, clusterName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes the specified cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<Models.OperationalizationClustersDeleteResponse>
         */
        OperationalizationClusters.prototype.deleteMethod = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, clusterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        OperationalizationClusters.prototype.listKeys = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        OperationalizationClusters.prototype.checkSystemServicesUpdatesAvailable = function (resourceGroupName$$1, clusterName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, checkSystemServicesUpdatesAvailableOperationSpec, callback);
        };
        /**
         * Updates system services in a cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<Models.OperationalizationClustersUpdateSystemServicesResponse>
         */
        OperationalizationClusters.prototype.updateSystemServices = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.beginUpdateSystemServices(resourceGroupName$$1, clusterName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        OperationalizationClusters.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        OperationalizationClusters.prototype.listBySubscriptionId = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionIdOperationSpec, callback);
        };
        /**
         * Create or update an operationalization cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param parameters Parameters supplied to create or update an Operationalization cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OperationalizationClusters.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, clusterName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes the specified cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OperationalizationClusters.prototype.beginDeleteMethod = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates system services in a cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OperationalizationClusters.prototype.beginUpdateSystemServices = function (resourceGroupName$$1, clusterName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                clusterName: clusterName$$1,
                options: options
            }, beginUpdateSystemServicesOperationSpec, options);
        };
        OperationalizationClusters.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        OperationalizationClusters.prototype.listBySubscriptionIdNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionIdNextOperationSpec, callback);
        };
        return OperationalizationClusters;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationalizationCluster
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, OperationalizationClusterUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationalizationCluster
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationalizationClusterCredentials
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkSystemServicesUpdatesAvailableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/checkSystemServicesUpdatesAvailable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CheckSystemServicesUpdatesAvailableResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionIdOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, OperationalizationCluster, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationalizationCluster
            },
            201: {
                bodyMapper: OperationalizationCluster
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion,
            deleteAll
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {
                headersMapper: OperationalizationClustersDeleteHeaders
            },
            204: {
                headersMapper: OperationalizationClustersDeleteHeaders
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var beginUpdateSystemServicesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UpdateSystemServicesResponse,
                headersMapper: OperationalizationClustersUpdateSystemServicesHeaders
            },
            202: {
                headersMapper: OperationalizationClustersUpdateSystemServicesHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionIdNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        AvailableOperations: AvailableOperations,
        ResourceOperation: ResourceOperation,
        ResourceOperationDisplay: ResourceOperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MachineLearningCompute. */
    var MachineLearningCompute = /** @class */ (function () {
        /**
         * Create a MachineLearningCompute.
         * @param {MachineLearningComputeManagementClientContext} client Reference to the service client.
         */
        function MachineLearningCompute(client) {
            this.client = client;
        }
        MachineLearningCompute.prototype.listAvailableOperations = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAvailableOperationsOperationSpec, callback);
        };
        return MachineLearningCompute;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listAvailableOperationsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.MachineLearningCompute/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableOperations
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-machinelearningcompute";
    var packageVersion = "1.0.0-preview";
    var MachineLearningComputeManagementClientContext = /** @class */ (function (_super) {
        __extends(MachineLearningComputeManagementClientContext, _super);
        /**
         * Initializes a new instance of the MachineLearningComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription ID.
         * @param [options] The parameter options
         */
        function MachineLearningComputeManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-08-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return MachineLearningComputeManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MachineLearningComputeManagementClient = /** @class */ (function (_super) {
        __extends(MachineLearningComputeManagementClient, _super);
        /**
         * Initializes a new instance of the MachineLearningComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription ID.
         * @param [options] The parameter options
         */
        function MachineLearningComputeManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operationalizationClusters = new OperationalizationClusters(_this);
            _this.machineLearningCompute = new MachineLearningCompute(_this);
            return _this;
        }
        return MachineLearningComputeManagementClient;
    }(MachineLearningComputeManagementClientContext));

    exports.MachineLearningComputeManagementClient = MachineLearningComputeManagementClient;
    exports.MachineLearningComputeManagementClientContext = MachineLearningComputeManagementClientContext;
    exports.MachineLearningComputeManagementModels = index;
    exports.MachineLearningComputeManagementMappers = mappers;
    exports.OperationalizationClusters = OperationalizationClusters;
    exports.MachineLearningCompute = MachineLearningCompute;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-machinelearningcompute.js.map
