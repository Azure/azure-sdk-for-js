/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmSql = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for CheckNameAvailabilityReason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * @readonly
     * @enum {string}
     */
    var CheckNameAvailabilityReason;
    (function (CheckNameAvailabilityReason) {
        CheckNameAvailabilityReason["Invalid"] = "Invalid";
        CheckNameAvailabilityReason["AlreadyExists"] = "AlreadyExists";
    })(CheckNameAvailabilityReason || (CheckNameAvailabilityReason = {}));
    /**
     * Defines values for ServerConnectionType.
     * Possible values include: 'Default', 'Proxy', 'Redirect'
     * @readonly
     * @enum {string}
     */
    var ServerConnectionType;
    (function (ServerConnectionType) {
        ServerConnectionType["Default"] = "Default";
        ServerConnectionType["Proxy"] = "Proxy";
        ServerConnectionType["Redirect"] = "Redirect";
    })(ServerConnectionType || (ServerConnectionType = {}));
    /**
     * Defines values for SecurityAlertPolicyState.
     * Possible values include: 'New', 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var SecurityAlertPolicyState;
    (function (SecurityAlertPolicyState) {
        SecurityAlertPolicyState["New"] = "New";
        SecurityAlertPolicyState["Enabled"] = "Enabled";
        SecurityAlertPolicyState["Disabled"] = "Disabled";
    })(SecurityAlertPolicyState || (SecurityAlertPolicyState = {}));
    /**
     * Defines values for SecurityAlertPolicyEmailAccountAdmins.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var SecurityAlertPolicyEmailAccountAdmins;
    (function (SecurityAlertPolicyEmailAccountAdmins) {
        SecurityAlertPolicyEmailAccountAdmins["Enabled"] = "Enabled";
        SecurityAlertPolicyEmailAccountAdmins["Disabled"] = "Disabled";
    })(SecurityAlertPolicyEmailAccountAdmins || (SecurityAlertPolicyEmailAccountAdmins = {}));
    /**
     * Defines values for SecurityAlertPolicyUseServerDefault.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var SecurityAlertPolicyUseServerDefault;
    (function (SecurityAlertPolicyUseServerDefault) {
        SecurityAlertPolicyUseServerDefault["Enabled"] = "Enabled";
        SecurityAlertPolicyUseServerDefault["Disabled"] = "Disabled";
    })(SecurityAlertPolicyUseServerDefault || (SecurityAlertPolicyUseServerDefault = {}));
    /**
     * Defines values for DataMaskingState.
     * Possible values include: 'Disabled', 'Enabled'
     * @readonly
     * @enum {string}
     */
    var DataMaskingState;
    (function (DataMaskingState) {
        DataMaskingState["Disabled"] = "Disabled";
        DataMaskingState["Enabled"] = "Enabled";
    })(DataMaskingState || (DataMaskingState = {}));
    /**
     * Defines values for DataMaskingRuleState.
     * Possible values include: 'Disabled', 'Enabled'
     * @readonly
     * @enum {string}
     */
    var DataMaskingRuleState;
    (function (DataMaskingRuleState) {
        DataMaskingRuleState["Disabled"] = "Disabled";
        DataMaskingRuleState["Enabled"] = "Enabled";
    })(DataMaskingRuleState || (DataMaskingRuleState = {}));
    /**
     * Defines values for DataMaskingFunction.
     * Possible values include: 'Default', 'CCN', 'Email', 'Number', 'SSN', 'Text'
     * @readonly
     * @enum {string}
     */
    var DataMaskingFunction;
    (function (DataMaskingFunction) {
        DataMaskingFunction["Default"] = "Default";
        DataMaskingFunction["CCN"] = "CCN";
        DataMaskingFunction["Email"] = "Email";
        DataMaskingFunction["Number"] = "Number";
        DataMaskingFunction["SSN"] = "SSN";
        DataMaskingFunction["Text"] = "Text";
    })(DataMaskingFunction || (DataMaskingFunction = {}));
    /**
     * Defines values for GeoBackupPolicyState.
     * Possible values include: 'Disabled', 'Enabled'
     * @readonly
     * @enum {string}
     */
    var GeoBackupPolicyState;
    (function (GeoBackupPolicyState) {
        GeoBackupPolicyState["Disabled"] = "Disabled";
        GeoBackupPolicyState["Enabled"] = "Enabled";
    })(GeoBackupPolicyState || (GeoBackupPolicyState = {}));
    /**
     * Defines values for DatabaseEdition.
     * Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium',
     * 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DatabaseEdition =
     * <DatabaseEdition>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DatabaseEdition;
    (function (DatabaseEdition) {
        DatabaseEdition["Web"] = "Web";
        DatabaseEdition["Business"] = "Business";
        DatabaseEdition["Basic"] = "Basic";
        DatabaseEdition["Standard"] = "Standard";
        DatabaseEdition["Premium"] = "Premium";
        DatabaseEdition["PremiumRS"] = "PremiumRS";
        DatabaseEdition["Free"] = "Free";
        DatabaseEdition["Stretch"] = "Stretch";
        DatabaseEdition["DataWarehouse"] = "DataWarehouse";
        DatabaseEdition["System"] = "System";
        DatabaseEdition["System2"] = "System2";
    })(DatabaseEdition || (DatabaseEdition = {}));
    /**
     * Defines values for ServiceObjectiveName.
     * Possible values include: 'System', 'System0', 'System1', 'System2',
     * 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free', 'Basic',
     * 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3',
     * 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200',
     * 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500',
     * 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000',
     * 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c',
     * 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200',
     * 'DS1500', 'DS2000', 'ElasticPool'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServiceObjectiveName =
     * <ServiceObjectiveName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServiceObjectiveName;
    (function (ServiceObjectiveName) {
        ServiceObjectiveName["System"] = "System";
        ServiceObjectiveName["System0"] = "System0";
        ServiceObjectiveName["System1"] = "System1";
        ServiceObjectiveName["System2"] = "System2";
        ServiceObjectiveName["System3"] = "System3";
        ServiceObjectiveName["System4"] = "System4";
        ServiceObjectiveName["System2L"] = "System2L";
        ServiceObjectiveName["System3L"] = "System3L";
        ServiceObjectiveName["System4L"] = "System4L";
        ServiceObjectiveName["Free"] = "Free";
        ServiceObjectiveName["Basic"] = "Basic";
        ServiceObjectiveName["S0"] = "S0";
        ServiceObjectiveName["S1"] = "S1";
        ServiceObjectiveName["S2"] = "S2";
        ServiceObjectiveName["S3"] = "S3";
        ServiceObjectiveName["S4"] = "S4";
        ServiceObjectiveName["S6"] = "S6";
        ServiceObjectiveName["S7"] = "S7";
        ServiceObjectiveName["S9"] = "S9";
        ServiceObjectiveName["S12"] = "S12";
        ServiceObjectiveName["P1"] = "P1";
        ServiceObjectiveName["P2"] = "P2";
        ServiceObjectiveName["P3"] = "P3";
        ServiceObjectiveName["P4"] = "P4";
        ServiceObjectiveName["P6"] = "P6";
        ServiceObjectiveName["P11"] = "P11";
        ServiceObjectiveName["P15"] = "P15";
        ServiceObjectiveName["PRS1"] = "PRS1";
        ServiceObjectiveName["PRS2"] = "PRS2";
        ServiceObjectiveName["PRS4"] = "PRS4";
        ServiceObjectiveName["PRS6"] = "PRS6";
        ServiceObjectiveName["DW100"] = "DW100";
        ServiceObjectiveName["DW200"] = "DW200";
        ServiceObjectiveName["DW300"] = "DW300";
        ServiceObjectiveName["DW400"] = "DW400";
        ServiceObjectiveName["DW500"] = "DW500";
        ServiceObjectiveName["DW600"] = "DW600";
        ServiceObjectiveName["DW1000"] = "DW1000";
        ServiceObjectiveName["DW1200"] = "DW1200";
        ServiceObjectiveName["DW1000c"] = "DW1000c";
        ServiceObjectiveName["DW1500"] = "DW1500";
        ServiceObjectiveName["DW1500c"] = "DW1500c";
        ServiceObjectiveName["DW2000"] = "DW2000";
        ServiceObjectiveName["DW2000c"] = "DW2000c";
        ServiceObjectiveName["DW3000"] = "DW3000";
        ServiceObjectiveName["DW2500c"] = "DW2500c";
        ServiceObjectiveName["DW3000c"] = "DW3000c";
        ServiceObjectiveName["DW6000"] = "DW6000";
        ServiceObjectiveName["DW5000c"] = "DW5000c";
        ServiceObjectiveName["DW6000c"] = "DW6000c";
        ServiceObjectiveName["DW7500c"] = "DW7500c";
        ServiceObjectiveName["DW10000c"] = "DW10000c";
        ServiceObjectiveName["DW15000c"] = "DW15000c";
        ServiceObjectiveName["DW30000c"] = "DW30000c";
        ServiceObjectiveName["DS100"] = "DS100";
        ServiceObjectiveName["DS200"] = "DS200";
        ServiceObjectiveName["DS300"] = "DS300";
        ServiceObjectiveName["DS400"] = "DS400";
        ServiceObjectiveName["DS500"] = "DS500";
        ServiceObjectiveName["DS600"] = "DS600";
        ServiceObjectiveName["DS1000"] = "DS1000";
        ServiceObjectiveName["DS1200"] = "DS1200";
        ServiceObjectiveName["DS1500"] = "DS1500";
        ServiceObjectiveName["DS2000"] = "DS2000";
        ServiceObjectiveName["ElasticPool"] = "ElasticPool";
    })(ServiceObjectiveName || (ServiceObjectiveName = {}));
    /**
     * Defines values for StorageKeyType.
     * Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     * @readonly
     * @enum {string}
     */
    var StorageKeyType;
    (function (StorageKeyType) {
        StorageKeyType["StorageAccessKey"] = "StorageAccessKey";
        StorageKeyType["SharedAccessKey"] = "SharedAccessKey";
    })(StorageKeyType || (StorageKeyType = {}));
    /**
     * Defines values for AuthenticationType.
     * Possible values include: 'SQL', 'ADPassword'
     * @readonly
     * @enum {string}
     */
    var AuthenticationType;
    (function (AuthenticationType) {
        AuthenticationType["SQL"] = "SQL";
        AuthenticationType["ADPassword"] = "ADPassword";
    })(AuthenticationType || (AuthenticationType = {}));
    /**
     * Defines values for UnitType.
     * Possible values include: 'count', 'bytes', 'seconds', 'percent',
     * 'countPerSecond', 'bytesPerSecond'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UnitType = <UnitType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UnitType;
    (function (UnitType) {
        UnitType["Count"] = "count";
        UnitType["Bytes"] = "bytes";
        UnitType["Seconds"] = "seconds";
        UnitType["Percent"] = "percent";
        UnitType["CountPerSecond"] = "countPerSecond";
        UnitType["BytesPerSecond"] = "bytesPerSecond";
    })(UnitType || (UnitType = {}));
    /**
     * Defines values for PrimaryAggregationType.
     * Possible values include: 'None', 'Average', 'Count', 'Minimum', 'Maximum',
     * 'Total'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PrimaryAggregationType =
     * <PrimaryAggregationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PrimaryAggregationType;
    (function (PrimaryAggregationType) {
        PrimaryAggregationType["None"] = "None";
        PrimaryAggregationType["Average"] = "Average";
        PrimaryAggregationType["Count"] = "Count";
        PrimaryAggregationType["Minimum"] = "Minimum";
        PrimaryAggregationType["Maximum"] = "Maximum";
        PrimaryAggregationType["Total"] = "Total";
    })(PrimaryAggregationType || (PrimaryAggregationType = {}));
    /**
     * Defines values for UnitDefinitionType.
     * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
     * 'CountPerSecond', 'BytesPerSecond'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UnitDefinitionType =
     * <UnitDefinitionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UnitDefinitionType;
    (function (UnitDefinitionType) {
        UnitDefinitionType["Count"] = "Count";
        UnitDefinitionType["Bytes"] = "Bytes";
        UnitDefinitionType["Seconds"] = "Seconds";
        UnitDefinitionType["Percent"] = "Percent";
        UnitDefinitionType["CountPerSecond"] = "CountPerSecond";
        UnitDefinitionType["BytesPerSecond"] = "BytesPerSecond";
    })(UnitDefinitionType || (UnitDefinitionType = {}));
    /**
     * Defines values for ElasticPoolEdition.
     * Possible values include: 'Basic', 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ElasticPoolEdition =
     * <ElasticPoolEdition>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ElasticPoolEdition;
    (function (ElasticPoolEdition) {
        ElasticPoolEdition["Basic"] = "Basic";
        ElasticPoolEdition["Standard"] = "Standard";
        ElasticPoolEdition["Premium"] = "Premium";
    })(ElasticPoolEdition || (ElasticPoolEdition = {}));
    /**
     * Defines values for ReplicationRole.
     * Possible values include: 'Primary', 'Secondary', 'NonReadableSecondary',
     * 'Source', 'Copy'
     * @readonly
     * @enum {string}
     */
    var ReplicationRole;
    (function (ReplicationRole) {
        ReplicationRole["Primary"] = "Primary";
        ReplicationRole["Secondary"] = "Secondary";
        ReplicationRole["NonReadableSecondary"] = "NonReadableSecondary";
        ReplicationRole["Source"] = "Source";
        ReplicationRole["Copy"] = "Copy";
    })(ReplicationRole || (ReplicationRole = {}));
    /**
     * Defines values for ReplicationState.
     * Possible values include: 'PENDING', 'SEEDING', 'CATCH_UP', 'SUSPENDED'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReplicationState =
     * <ReplicationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReplicationState;
    (function (ReplicationState) {
        ReplicationState["PENDING"] = "PENDING";
        ReplicationState["SEEDING"] = "SEEDING";
        ReplicationState["CATCHUP"] = "CATCH_UP";
        ReplicationState["SUSPENDED"] = "SUSPENDED";
    })(ReplicationState || (ReplicationState = {}));
    /**
     * Defines values for RecommendedIndexAction.
     * Possible values include: 'Create', 'Drop', 'Rebuild'
     * @readonly
     * @enum {string}
     */
    var RecommendedIndexAction;
    (function (RecommendedIndexAction) {
        RecommendedIndexAction["Create"] = "Create";
        RecommendedIndexAction["Drop"] = "Drop";
        RecommendedIndexAction["Rebuild"] = "Rebuild";
    })(RecommendedIndexAction || (RecommendedIndexAction = {}));
    /**
     * Defines values for RecommendedIndexState.
     * Possible values include: 'Active', 'Pending', 'Executing', 'Verifying',
     * 'Pending Revert', 'Reverting', 'Reverted', 'Ignored', 'Expired', 'Blocked',
     * 'Success'
     * @readonly
     * @enum {string}
     */
    var RecommendedIndexState;
    (function (RecommendedIndexState) {
        RecommendedIndexState["Active"] = "Active";
        RecommendedIndexState["Pending"] = "Pending";
        RecommendedIndexState["Executing"] = "Executing";
        RecommendedIndexState["Verifying"] = "Verifying";
        RecommendedIndexState["PendingRevert"] = "Pending Revert";
        RecommendedIndexState["Reverting"] = "Reverting";
        RecommendedIndexState["Reverted"] = "Reverted";
        RecommendedIndexState["Ignored"] = "Ignored";
        RecommendedIndexState["Expired"] = "Expired";
        RecommendedIndexState["Blocked"] = "Blocked";
        RecommendedIndexState["Success"] = "Success";
    })(RecommendedIndexState || (RecommendedIndexState = {}));
    /**
     * Defines values for RecommendedIndexType.
     * Possible values include: 'CLUSTERED', 'NONCLUSTERED', 'COLUMNSTORE',
     * 'CLUSTERED COLUMNSTORE'
     * @readonly
     * @enum {string}
     */
    var RecommendedIndexType;
    (function (RecommendedIndexType) {
        RecommendedIndexType["CLUSTERED"] = "CLUSTERED";
        RecommendedIndexType["NONCLUSTERED"] = "NONCLUSTERED";
        RecommendedIndexType["COLUMNSTORE"] = "COLUMNSTORE";
        RecommendedIndexType["CLUSTEREDCOLUMNSTORE"] = "CLUSTERED COLUMNSTORE";
    })(RecommendedIndexType || (RecommendedIndexType = {}));
    /**
     * Defines values for TransparentDataEncryptionStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var TransparentDataEncryptionStatus;
    (function (TransparentDataEncryptionStatus) {
        TransparentDataEncryptionStatus["Enabled"] = "Enabled";
        TransparentDataEncryptionStatus["Disabled"] = "Disabled";
    })(TransparentDataEncryptionStatus || (TransparentDataEncryptionStatus = {}));
    /**
     * Defines values for TransparentDataEncryptionActivityStatus.
     * Possible values include: 'Encrypting', 'Decrypting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TransparentDataEncryptionActivityStatus =
     * <TransparentDataEncryptionActivityStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TransparentDataEncryptionActivityStatus;
    (function (TransparentDataEncryptionActivityStatus) {
        TransparentDataEncryptionActivityStatus["Encrypting"] = "Encrypting";
        TransparentDataEncryptionActivityStatus["Decrypting"] = "Decrypting";
    })(TransparentDataEncryptionActivityStatus || (TransparentDataEncryptionActivityStatus = {}));
    /**
     * Defines values for AutomaticTuningMode.
     * Possible values include: 'Inherit', 'Custom', 'Auto', 'Unspecified'
     * @readonly
     * @enum {string}
     */
    var AutomaticTuningMode;
    (function (AutomaticTuningMode) {
        AutomaticTuningMode["Inherit"] = "Inherit";
        AutomaticTuningMode["Custom"] = "Custom";
        AutomaticTuningMode["Auto"] = "Auto";
        AutomaticTuningMode["Unspecified"] = "Unspecified";
    })(AutomaticTuningMode || (AutomaticTuningMode = {}));
    /**
     * Defines values for AutomaticTuningOptionModeDesired.
     * Possible values include: 'Off', 'On', 'Default'
     * @readonly
     * @enum {string}
     */
    var AutomaticTuningOptionModeDesired;
    (function (AutomaticTuningOptionModeDesired) {
        AutomaticTuningOptionModeDesired["Off"] = "Off";
        AutomaticTuningOptionModeDesired["On"] = "On";
        AutomaticTuningOptionModeDesired["Default"] = "Default";
    })(AutomaticTuningOptionModeDesired || (AutomaticTuningOptionModeDesired = {}));
    /**
     * Defines values for AutomaticTuningOptionModeActual.
     * Possible values include: 'Off', 'On'
     * @readonly
     * @enum {string}
     */
    var AutomaticTuningOptionModeActual;
    (function (AutomaticTuningOptionModeActual) {
        AutomaticTuningOptionModeActual["Off"] = "Off";
        AutomaticTuningOptionModeActual["On"] = "On";
    })(AutomaticTuningOptionModeActual || (AutomaticTuningOptionModeActual = {}));
    /**
     * Defines values for AutomaticTuningDisabledReason.
     * Possible values include: 'Default', 'Disabled', 'AutoConfigured',
     * 'InheritedFromServer', 'QueryStoreOff', 'QueryStoreReadOnly', 'NotSupported'
     * @readonly
     * @enum {string}
     */
    var AutomaticTuningDisabledReason;
    (function (AutomaticTuningDisabledReason) {
        AutomaticTuningDisabledReason["Default"] = "Default";
        AutomaticTuningDisabledReason["Disabled"] = "Disabled";
        AutomaticTuningDisabledReason["AutoConfigured"] = "AutoConfigured";
        AutomaticTuningDisabledReason["InheritedFromServer"] = "InheritedFromServer";
        AutomaticTuningDisabledReason["QueryStoreOff"] = "QueryStoreOff";
        AutomaticTuningDisabledReason["QueryStoreReadOnly"] = "QueryStoreReadOnly";
        AutomaticTuningDisabledReason["NotSupported"] = "NotSupported";
    })(AutomaticTuningDisabledReason || (AutomaticTuningDisabledReason = {}));
    /**
     * Defines values for ServerKeyType.
     * Possible values include: 'ServiceManaged', 'AzureKeyVault'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ServerKeyType =
     * <ServerKeyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ServerKeyType;
    (function (ServerKeyType) {
        ServerKeyType["ServiceManaged"] = "ServiceManaged";
        ServerKeyType["AzureKeyVault"] = "AzureKeyVault";
    })(ServerKeyType || (ServerKeyType = {}));
    /**
     * Defines values for ReadWriteEndpointFailoverPolicy.
     * Possible values include: 'Manual', 'Automatic'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadWriteEndpointFailoverPolicy =
     * <ReadWriteEndpointFailoverPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadWriteEndpointFailoverPolicy;
    (function (ReadWriteEndpointFailoverPolicy) {
        ReadWriteEndpointFailoverPolicy["Manual"] = "Manual";
        ReadWriteEndpointFailoverPolicy["Automatic"] = "Automatic";
    })(ReadWriteEndpointFailoverPolicy || (ReadWriteEndpointFailoverPolicy = {}));
    /**
     * Defines values for ReadOnlyEndpointFailoverPolicy.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReadOnlyEndpointFailoverPolicy =
     * <ReadOnlyEndpointFailoverPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReadOnlyEndpointFailoverPolicy;
    (function (ReadOnlyEndpointFailoverPolicy) {
        ReadOnlyEndpointFailoverPolicy["Disabled"] = "Disabled";
        ReadOnlyEndpointFailoverPolicy["Enabled"] = "Enabled";
    })(ReadOnlyEndpointFailoverPolicy || (ReadOnlyEndpointFailoverPolicy = {}));
    /**
     * Defines values for FailoverGroupReplicationRole.
     * Possible values include: 'Primary', 'Secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FailoverGroupReplicationRole =
     * <FailoverGroupReplicationRole>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FailoverGroupReplicationRole;
    (function (FailoverGroupReplicationRole) {
        FailoverGroupReplicationRole["Primary"] = "Primary";
        FailoverGroupReplicationRole["Secondary"] = "Secondary";
    })(FailoverGroupReplicationRole || (FailoverGroupReplicationRole = {}));
    /**
     * Defines values for IdentityType.
     * Possible values include: 'SystemAssigned'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IdentityType =
     * <IdentityType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IdentityType;
    (function (IdentityType) {
        IdentityType["SystemAssigned"] = "SystemAssigned";
    })(IdentityType || (IdentityType = {}));
    /**
     * Defines values for OperationOrigin.
     * Possible values include: 'user', 'system'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperationOrigin =
     * <OperationOrigin>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperationOrigin;
    (function (OperationOrigin) {
        OperationOrigin["User"] = "user";
        OperationOrigin["System"] = "system";
    })(OperationOrigin || (OperationOrigin = {}));
    /**
     * Defines values for SyncAgentState.
     * Possible values include: 'Online', 'Offline', 'NeverConnected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncAgentState =
     * <SyncAgentState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncAgentState;
    (function (SyncAgentState) {
        SyncAgentState["Online"] = "Online";
        SyncAgentState["Offline"] = "Offline";
        SyncAgentState["NeverConnected"] = "NeverConnected";
    })(SyncAgentState || (SyncAgentState = {}));
    /**
     * Defines values for SyncMemberDbType.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncMemberDbType =
     * <SyncMemberDbType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncMemberDbType;
    (function (SyncMemberDbType) {
        SyncMemberDbType["AzureSqlDatabase"] = "AzureSqlDatabase";
        SyncMemberDbType["SqlServerDatabase"] = "SqlServerDatabase";
    })(SyncMemberDbType || (SyncMemberDbType = {}));
    /**
     * Defines values for SyncGroupLogType.
     * Possible values include: 'All', 'Error', 'Warning', 'Success'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncGroupLogType =
     * <SyncGroupLogType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncGroupLogType;
    (function (SyncGroupLogType) {
        SyncGroupLogType["All"] = "All";
        SyncGroupLogType["Error"] = "Error";
        SyncGroupLogType["Warning"] = "Warning";
        SyncGroupLogType["Success"] = "Success";
    })(SyncGroupLogType || (SyncGroupLogType = {}));
    /**
     * Defines values for SyncConflictResolutionPolicy.
     * Possible values include: 'HubWin', 'MemberWin'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncConflictResolutionPolicy =
     * <SyncConflictResolutionPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncConflictResolutionPolicy;
    (function (SyncConflictResolutionPolicy) {
        SyncConflictResolutionPolicy["HubWin"] = "HubWin";
        SyncConflictResolutionPolicy["MemberWin"] = "MemberWin";
    })(SyncConflictResolutionPolicy || (SyncConflictResolutionPolicy = {}));
    /**
     * Defines values for SyncGroupState.
     * Possible values include: 'NotReady', 'Error', 'Warning', 'Progressing',
     * 'Good'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncGroupState =
     * <SyncGroupState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncGroupState;
    (function (SyncGroupState) {
        SyncGroupState["NotReady"] = "NotReady";
        SyncGroupState["Error"] = "Error";
        SyncGroupState["Warning"] = "Warning";
        SyncGroupState["Progressing"] = "Progressing";
        SyncGroupState["Good"] = "Good";
    })(SyncGroupState || (SyncGroupState = {}));
    /**
     * Defines values for SyncDirection.
     * Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncDirection =
     * <SyncDirection>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncDirection;
    (function (SyncDirection) {
        SyncDirection["Bidirectional"] = "Bidirectional";
        SyncDirection["OneWayMemberToHub"] = "OneWayMemberToHub";
        SyncDirection["OneWayHubToMember"] = "OneWayHubToMember";
    })(SyncDirection || (SyncDirection = {}));
    /**
     * Defines values for SyncMemberState.
     * Possible values include: 'SyncInProgress', 'SyncSucceeded', 'SyncFailed',
     * 'DisabledTombstoneCleanup', 'DisabledBackupRestore',
     * 'SyncSucceededWithWarnings', 'SyncCancelling', 'SyncCancelled',
     * 'UnProvisioned', 'Provisioning', 'Provisioned', 'ProvisionFailed',
     * 'DeProvisioning', 'DeProvisioned', 'DeProvisionFailed', 'Reprovisioning',
     * 'ReprovisionFailed', 'UnReprovisioned'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncMemberState =
     * <SyncMemberState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncMemberState;
    (function (SyncMemberState) {
        SyncMemberState["SyncInProgress"] = "SyncInProgress";
        SyncMemberState["SyncSucceeded"] = "SyncSucceeded";
        SyncMemberState["SyncFailed"] = "SyncFailed";
        SyncMemberState["DisabledTombstoneCleanup"] = "DisabledTombstoneCleanup";
        SyncMemberState["DisabledBackupRestore"] = "DisabledBackupRestore";
        SyncMemberState["SyncSucceededWithWarnings"] = "SyncSucceededWithWarnings";
        SyncMemberState["SyncCancelling"] = "SyncCancelling";
        SyncMemberState["SyncCancelled"] = "SyncCancelled";
        SyncMemberState["UnProvisioned"] = "UnProvisioned";
        SyncMemberState["Provisioning"] = "Provisioning";
        SyncMemberState["Provisioned"] = "Provisioned";
        SyncMemberState["ProvisionFailed"] = "ProvisionFailed";
        SyncMemberState["DeProvisioning"] = "DeProvisioning";
        SyncMemberState["DeProvisioned"] = "DeProvisioned";
        SyncMemberState["DeProvisionFailed"] = "DeProvisionFailed";
        SyncMemberState["Reprovisioning"] = "Reprovisioning";
        SyncMemberState["ReprovisionFailed"] = "ReprovisionFailed";
        SyncMemberState["UnReprovisioned"] = "UnReprovisioned";
    })(SyncMemberState || (SyncMemberState = {}));
    /**
     * Defines values for VirtualNetworkRuleState.
     * Possible values include: 'Initializing', 'InProgress', 'Ready', 'Deleting',
     * 'Unknown'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualNetworkRuleState =
     * <VirtualNetworkRuleState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualNetworkRuleState;
    (function (VirtualNetworkRuleState) {
        VirtualNetworkRuleState["Initializing"] = "Initializing";
        VirtualNetworkRuleState["InProgress"] = "InProgress";
        VirtualNetworkRuleState["Ready"] = "Ready";
        VirtualNetworkRuleState["Deleting"] = "Deleting";
        VirtualNetworkRuleState["Unknown"] = "Unknown";
    })(VirtualNetworkRuleState || (VirtualNetworkRuleState = {}));
    /**
     * Defines values for BlobAuditingPolicyState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var BlobAuditingPolicyState;
    (function (BlobAuditingPolicyState) {
        BlobAuditingPolicyState["Enabled"] = "Enabled";
        BlobAuditingPolicyState["Disabled"] = "Disabled";
    })(BlobAuditingPolicyState || (BlobAuditingPolicyState = {}));
    /**
     * Defines values for JobAgentState.
     * Possible values include: 'Creating', 'Ready', 'Updating', 'Deleting',
     * 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobAgentState =
     * <JobAgentState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobAgentState;
    (function (JobAgentState) {
        JobAgentState["Creating"] = "Creating";
        JobAgentState["Ready"] = "Ready";
        JobAgentState["Updating"] = "Updating";
        JobAgentState["Deleting"] = "Deleting";
        JobAgentState["Disabled"] = "Disabled";
    })(JobAgentState || (JobAgentState = {}));
    /**
     * Defines values for JobExecutionLifecycle.
     * Possible values include: 'Created', 'InProgress',
     * 'WaitingForChildJobExecutions', 'WaitingForRetry', 'Succeeded',
     * 'SucceededWithSkipped', 'Failed', 'TimedOut', 'Canceled', 'Skipped'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobExecutionLifecycle =
     * <JobExecutionLifecycle>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobExecutionLifecycle;
    (function (JobExecutionLifecycle) {
        JobExecutionLifecycle["Created"] = "Created";
        JobExecutionLifecycle["InProgress"] = "InProgress";
        JobExecutionLifecycle["WaitingForChildJobExecutions"] = "WaitingForChildJobExecutions";
        JobExecutionLifecycle["WaitingForRetry"] = "WaitingForRetry";
        JobExecutionLifecycle["Succeeded"] = "Succeeded";
        JobExecutionLifecycle["SucceededWithSkipped"] = "SucceededWithSkipped";
        JobExecutionLifecycle["Failed"] = "Failed";
        JobExecutionLifecycle["TimedOut"] = "TimedOut";
        JobExecutionLifecycle["Canceled"] = "Canceled";
        JobExecutionLifecycle["Skipped"] = "Skipped";
    })(JobExecutionLifecycle || (JobExecutionLifecycle = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Created', 'InProgress', 'Succeeded', 'Failed',
     * 'Canceled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Created"] = "Created";
        ProvisioningState["InProgress"] = "InProgress";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Canceled"] = "Canceled";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for JobTargetType.
     * Possible values include: 'TargetGroup', 'SqlDatabase', 'SqlElasticPool',
     * 'SqlShardMap', 'SqlServer'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobTargetType =
     * <JobTargetType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobTargetType;
    (function (JobTargetType) {
        JobTargetType["TargetGroup"] = "TargetGroup";
        JobTargetType["SqlDatabase"] = "SqlDatabase";
        JobTargetType["SqlElasticPool"] = "SqlElasticPool";
        JobTargetType["SqlShardMap"] = "SqlShardMap";
        JobTargetType["SqlServer"] = "SqlServer";
    })(JobTargetType || (JobTargetType = {}));
    /**
     * Defines values for JobScheduleType.
     * Possible values include: 'Once', 'Recurring'
     * @readonly
     * @enum {string}
     */
    var JobScheduleType;
    (function (JobScheduleType) {
        JobScheduleType["Once"] = "Once";
        JobScheduleType["Recurring"] = "Recurring";
    })(JobScheduleType || (JobScheduleType = {}));
    /**
     * Defines values for JobStepActionType.
     * Possible values include: 'TSql'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobStepActionType =
     * <JobStepActionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobStepActionType;
    (function (JobStepActionType) {
        JobStepActionType["TSql"] = "TSql";
    })(JobStepActionType || (JobStepActionType = {}));
    /**
     * Defines values for JobStepActionSource.
     * Possible values include: 'Inline'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobStepActionSource =
     * <JobStepActionSource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobStepActionSource;
    (function (JobStepActionSource) {
        JobStepActionSource["Inline"] = "Inline";
    })(JobStepActionSource || (JobStepActionSource = {}));
    /**
     * Defines values for JobStepOutputType.
     * Possible values include: 'SqlDatabase'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobStepOutputType =
     * <JobStepOutputType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobStepOutputType;
    (function (JobStepOutputType) {
        JobStepOutputType["SqlDatabase"] = "SqlDatabase";
    })(JobStepOutputType || (JobStepOutputType = {}));
    /**
     * Defines values for JobTargetGroupMembershipType.
     * Possible values include: 'Include', 'Exclude'
     * @readonly
     * @enum {string}
     */
    var JobTargetGroupMembershipType;
    (function (JobTargetGroupMembershipType) {
        JobTargetGroupMembershipType["Include"] = "Include";
        JobTargetGroupMembershipType["Exclude"] = "Exclude";
    })(JobTargetGroupMembershipType || (JobTargetGroupMembershipType = {}));
    /**
     * Defines values for ManagedDatabaseStatus.
     * Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating',
     * 'Inaccessible'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ManagedDatabaseStatus =
     * <ManagedDatabaseStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ManagedDatabaseStatus;
    (function (ManagedDatabaseStatus) {
        ManagedDatabaseStatus["Online"] = "Online";
        ManagedDatabaseStatus["Offline"] = "Offline";
        ManagedDatabaseStatus["Shutdown"] = "Shutdown";
        ManagedDatabaseStatus["Creating"] = "Creating";
        ManagedDatabaseStatus["Inaccessible"] = "Inaccessible";
    })(ManagedDatabaseStatus || (ManagedDatabaseStatus = {}));
    /**
     * Defines values for CatalogCollationType.
     * Possible values include: 'DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CatalogCollationType =
     * <CatalogCollationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CatalogCollationType;
    (function (CatalogCollationType) {
        CatalogCollationType["DATABASEDEFAULT"] = "DATABASE_DEFAULT";
        CatalogCollationType["SQLLatin1GeneralCP1CIAS"] = "SQL_Latin1_General_CP1_CI_AS";
    })(CatalogCollationType || (CatalogCollationType = {}));
    /**
     * Defines values for ManagedDatabaseCreateMode.
     * Possible values include: 'Default', 'RestoreExternalBackup',
     * 'PointInTimeRestore'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ManagedDatabaseCreateMode =
     * <ManagedDatabaseCreateMode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ManagedDatabaseCreateMode;
    (function (ManagedDatabaseCreateMode) {
        ManagedDatabaseCreateMode["Default"] = "Default";
        ManagedDatabaseCreateMode["RestoreExternalBackup"] = "RestoreExternalBackup";
        ManagedDatabaseCreateMode["PointInTimeRestore"] = "PointInTimeRestore";
    })(ManagedDatabaseCreateMode || (ManagedDatabaseCreateMode = {}));
    /**
     * Defines values for AutomaticTuningServerMode.
     * Possible values include: 'Custom', 'Auto', 'Unspecified'
     * @readonly
     * @enum {string}
     */
    var AutomaticTuningServerMode;
    (function (AutomaticTuningServerMode) {
        AutomaticTuningServerMode["Custom"] = "Custom";
        AutomaticTuningServerMode["Auto"] = "Auto";
        AutomaticTuningServerMode["Unspecified"] = "Unspecified";
    })(AutomaticTuningServerMode || (AutomaticTuningServerMode = {}));
    /**
     * Defines values for AutomaticTuningServerReason.
     * Possible values include: 'Default', 'Disabled', 'AutoConfigured'
     * @readonly
     * @enum {string}
     */
    var AutomaticTuningServerReason;
    (function (AutomaticTuningServerReason) {
        AutomaticTuningServerReason["Default"] = "Default";
        AutomaticTuningServerReason["Disabled"] = "Disabled";
        AutomaticTuningServerReason["AutoConfigured"] = "AutoConfigured";
    })(AutomaticTuningServerReason || (AutomaticTuningServerReason = {}));
    /**
     * Defines values for RestorePointType.
     * Possible values include: 'CONTINUOUS', 'DISCRETE'
     * @readonly
     * @enum {string}
     */
    var RestorePointType;
    (function (RestorePointType) {
        RestorePointType["CONTINUOUS"] = "CONTINUOUS";
        RestorePointType["DISCRETE"] = "DISCRETE";
    })(RestorePointType || (RestorePointType = {}));
    /**
     * Defines values for ManagementOperationState.
     * Possible values include: 'Pending', 'InProgress', 'Succeeded', 'Failed',
     * 'CancelInProgress', 'Cancelled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ManagementOperationState =
     * <ManagementOperationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ManagementOperationState;
    (function (ManagementOperationState) {
        ManagementOperationState["Pending"] = "Pending";
        ManagementOperationState["InProgress"] = "InProgress";
        ManagementOperationState["Succeeded"] = "Succeeded";
        ManagementOperationState["Failed"] = "Failed";
        ManagementOperationState["CancelInProgress"] = "CancelInProgress";
        ManagementOperationState["Cancelled"] = "Cancelled";
    })(ManagementOperationState || (ManagementOperationState = {}));
    /**
     * Defines values for MaxSizeUnit.
     * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes', 'Petabytes'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MaxSizeUnit =
     * <MaxSizeUnit>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MaxSizeUnit;
    (function (MaxSizeUnit) {
        MaxSizeUnit["Megabytes"] = "Megabytes";
        MaxSizeUnit["Gigabytes"] = "Gigabytes";
        MaxSizeUnit["Terabytes"] = "Terabytes";
        MaxSizeUnit["Petabytes"] = "Petabytes";
    })(MaxSizeUnit || (MaxSizeUnit = {}));
    /**
     * Defines values for LogSizeUnit.
     * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes', 'Petabytes',
     * 'Percent'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LogSizeUnit =
     * <LogSizeUnit>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LogSizeUnit;
    (function (LogSizeUnit) {
        LogSizeUnit["Megabytes"] = "Megabytes";
        LogSizeUnit["Gigabytes"] = "Gigabytes";
        LogSizeUnit["Terabytes"] = "Terabytes";
        LogSizeUnit["Petabytes"] = "Petabytes";
        LogSizeUnit["Percent"] = "Percent";
    })(LogSizeUnit || (LogSizeUnit = {}));
    /**
     * Defines values for CapabilityStatus.
     * Possible values include: 'Visible', 'Available', 'Default', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var CapabilityStatus;
    (function (CapabilityStatus) {
        CapabilityStatus["Visible"] = "Visible";
        CapabilityStatus["Available"] = "Available";
        CapabilityStatus["Default"] = "Default";
        CapabilityStatus["Disabled"] = "Disabled";
    })(CapabilityStatus || (CapabilityStatus = {}));
    /**
     * Defines values for PerformanceLevelUnit.
     * Possible values include: 'DTU', 'VCores'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PerformanceLevelUnit =
     * <PerformanceLevelUnit>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PerformanceLevelUnit;
    (function (PerformanceLevelUnit) {
        PerformanceLevelUnit["DTU"] = "DTU";
        PerformanceLevelUnit["VCores"] = "VCores";
    })(PerformanceLevelUnit || (PerformanceLevelUnit = {}));
    /**
     * Defines values for CreateMode.
     * Possible values include: 'Default', 'Copy', 'Secondary',
     * 'PointInTimeRestore', 'Restore', 'Recovery', 'RestoreExternalBackup',
     * 'RestoreExternalBackupSecondary', 'RestoreLongTermRetentionBackup',
     * 'OnlineSecondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CreateMode = <CreateMode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CreateMode;
    (function (CreateMode) {
        CreateMode["Default"] = "Default";
        CreateMode["Copy"] = "Copy";
        CreateMode["Secondary"] = "Secondary";
        CreateMode["PointInTimeRestore"] = "PointInTimeRestore";
        CreateMode["Restore"] = "Restore";
        CreateMode["Recovery"] = "Recovery";
        CreateMode["RestoreExternalBackup"] = "RestoreExternalBackup";
        CreateMode["RestoreExternalBackupSecondary"] = "RestoreExternalBackupSecondary";
        CreateMode["RestoreLongTermRetentionBackup"] = "RestoreLongTermRetentionBackup";
        CreateMode["OnlineSecondary"] = "OnlineSecondary";
    })(CreateMode || (CreateMode = {}));
    /**
     * Defines values for SampleName.
     * Possible values include: 'AdventureWorksLT', 'WideWorldImportersStd',
     * 'WideWorldImportersFull'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SampleName = <SampleName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SampleName;
    (function (SampleName) {
        SampleName["AdventureWorksLT"] = "AdventureWorksLT";
        SampleName["WideWorldImportersStd"] = "WideWorldImportersStd";
        SampleName["WideWorldImportersFull"] = "WideWorldImportersFull";
    })(SampleName || (SampleName = {}));
    /**
     * Defines values for DatabaseStatus.
     * Possible values include: 'Online', 'Restoring', 'RecoveryPending',
     * 'Recovering', 'Suspect', 'Offline', 'Standby', 'Shutdown', 'EmergencyMode',
     * 'AutoClosed', 'Copying', 'Creating', 'Inaccessible', 'OfflineSecondary',
     * 'Pausing', 'Paused', 'Resuming', 'Scaling'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DatabaseStatus =
     * <DatabaseStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DatabaseStatus;
    (function (DatabaseStatus) {
        DatabaseStatus["Online"] = "Online";
        DatabaseStatus["Restoring"] = "Restoring";
        DatabaseStatus["RecoveryPending"] = "RecoveryPending";
        DatabaseStatus["Recovering"] = "Recovering";
        DatabaseStatus["Suspect"] = "Suspect";
        DatabaseStatus["Offline"] = "Offline";
        DatabaseStatus["Standby"] = "Standby";
        DatabaseStatus["Shutdown"] = "Shutdown";
        DatabaseStatus["EmergencyMode"] = "EmergencyMode";
        DatabaseStatus["AutoClosed"] = "AutoClosed";
        DatabaseStatus["Copying"] = "Copying";
        DatabaseStatus["Creating"] = "Creating";
        DatabaseStatus["Inaccessible"] = "Inaccessible";
        DatabaseStatus["OfflineSecondary"] = "OfflineSecondary";
        DatabaseStatus["Pausing"] = "Pausing";
        DatabaseStatus["Paused"] = "Paused";
        DatabaseStatus["Resuming"] = "Resuming";
        DatabaseStatus["Scaling"] = "Scaling";
    })(DatabaseStatus || (DatabaseStatus = {}));
    /**
     * Defines values for DatabaseLicenseType.
     * Possible values include: 'LicenseIncluded', 'BasePrice'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DatabaseLicenseType =
     * <DatabaseLicenseType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DatabaseLicenseType;
    (function (DatabaseLicenseType) {
        DatabaseLicenseType["LicenseIncluded"] = "LicenseIncluded";
        DatabaseLicenseType["BasePrice"] = "BasePrice";
    })(DatabaseLicenseType || (DatabaseLicenseType = {}));
    /**
     * Defines values for DatabaseReadScale.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DatabaseReadScale =
     * <DatabaseReadScale>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DatabaseReadScale;
    (function (DatabaseReadScale) {
        DatabaseReadScale["Enabled"] = "Enabled";
        DatabaseReadScale["Disabled"] = "Disabled";
    })(DatabaseReadScale || (DatabaseReadScale = {}));
    /**
     * Defines values for ElasticPoolState.
     * Possible values include: 'Creating', 'Ready', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ElasticPoolState =
     * <ElasticPoolState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ElasticPoolState;
    (function (ElasticPoolState) {
        ElasticPoolState["Creating"] = "Creating";
        ElasticPoolState["Ready"] = "Ready";
        ElasticPoolState["Disabled"] = "Disabled";
    })(ElasticPoolState || (ElasticPoolState = {}));
    /**
     * Defines values for ElasticPoolLicenseType.
     * Possible values include: 'LicenseIncluded', 'BasePrice'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ElasticPoolLicenseType =
     * <ElasticPoolLicenseType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ElasticPoolLicenseType;
    (function (ElasticPoolLicenseType) {
        ElasticPoolLicenseType["LicenseIncluded"] = "LicenseIncluded";
        ElasticPoolLicenseType["BasePrice"] = "BasePrice";
    })(ElasticPoolLicenseType || (ElasticPoolLicenseType = {}));
    /**
     * Defines values for VulnerabilityAssessmentScanTriggerType.
     * Possible values include: 'OnDemand', 'Recurring'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VulnerabilityAssessmentScanTriggerType =
     * <VulnerabilityAssessmentScanTriggerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VulnerabilityAssessmentScanTriggerType;
    (function (VulnerabilityAssessmentScanTriggerType) {
        VulnerabilityAssessmentScanTriggerType["OnDemand"] = "OnDemand";
        VulnerabilityAssessmentScanTriggerType["Recurring"] = "Recurring";
    })(VulnerabilityAssessmentScanTriggerType || (VulnerabilityAssessmentScanTriggerType = {}));
    /**
     * Defines values for VulnerabilityAssessmentScanState.
     * Possible values include: 'Passed', 'Failed', 'FailedToRun', 'InProgress'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VulnerabilityAssessmentScanState =
     * <VulnerabilityAssessmentScanState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VulnerabilityAssessmentScanState;
    (function (VulnerabilityAssessmentScanState) {
        VulnerabilityAssessmentScanState["Passed"] = "Passed";
        VulnerabilityAssessmentScanState["Failed"] = "Failed";
        VulnerabilityAssessmentScanState["FailedToRun"] = "FailedToRun";
        VulnerabilityAssessmentScanState["InProgress"] = "InProgress";
    })(VulnerabilityAssessmentScanState || (VulnerabilityAssessmentScanState = {}));
    /**
     * Defines values for InstanceFailoverGroupReplicationRole.
     * Possible values include: 'Primary', 'Secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: InstanceFailoverGroupReplicationRole =
     * <InstanceFailoverGroupReplicationRole>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var InstanceFailoverGroupReplicationRole;
    (function (InstanceFailoverGroupReplicationRole) {
        InstanceFailoverGroupReplicationRole["Primary"] = "Primary";
        InstanceFailoverGroupReplicationRole["Secondary"] = "Secondary";
    })(InstanceFailoverGroupReplicationRole || (InstanceFailoverGroupReplicationRole = {}));
    /**
     * Defines values for LongTermRetentionDatabaseState.
     * Possible values include: 'All', 'Live', 'Deleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LongTermRetentionDatabaseState =
     * <LongTermRetentionDatabaseState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LongTermRetentionDatabaseState;
    (function (LongTermRetentionDatabaseState) {
        LongTermRetentionDatabaseState["All"] = "All";
        LongTermRetentionDatabaseState["Live"] = "Live";
        LongTermRetentionDatabaseState["Deleted"] = "Deleted";
    })(LongTermRetentionDatabaseState || (LongTermRetentionDatabaseState = {}));
    /**
     * Defines values for VulnerabilityAssessmentPolicyBaselineName.
     * Possible values include: 'master', 'default'
     * @readonly
     * @enum {string}
     */
    var VulnerabilityAssessmentPolicyBaselineName;
    (function (VulnerabilityAssessmentPolicyBaselineName) {
        VulnerabilityAssessmentPolicyBaselineName["Master"] = "master";
        VulnerabilityAssessmentPolicyBaselineName["Default"] = "default";
    })(VulnerabilityAssessmentPolicyBaselineName || (VulnerabilityAssessmentPolicyBaselineName = {}));
    /**
     * Defines values for CapabilityGroup.
     * Possible values include: 'supportedEditions',
     * 'supportedElasticPoolEditions', 'supportedManagedInstanceVersions'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CapabilityGroup =
     * <CapabilityGroup>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CapabilityGroup;
    (function (CapabilityGroup) {
        CapabilityGroup["SupportedEditions"] = "supportedEditions";
        CapabilityGroup["SupportedElasticPoolEditions"] = "supportedElasticPoolEditions";
        CapabilityGroup["SupportedManagedInstanceVersions"] = "supportedManagedInstanceVersions";
    })(CapabilityGroup || (CapabilityGroup = {}));
    /**
     * Defines values for Type.
     * Possible values include: 'All', 'Error', 'Warning', 'Success'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Type;
    (function (Type) {
        Type["All"] = "All";
        Type["Error"] = "Error";
        Type["Warning"] = "Warning";
        Type["Success"] = "Success";
    })(Type || (Type = {}));

    var index = /*#__PURE__*/Object.freeze({
        get CheckNameAvailabilityReason () { return CheckNameAvailabilityReason; },
        get ServerConnectionType () { return ServerConnectionType; },
        get SecurityAlertPolicyState () { return SecurityAlertPolicyState; },
        get SecurityAlertPolicyEmailAccountAdmins () { return SecurityAlertPolicyEmailAccountAdmins; },
        get SecurityAlertPolicyUseServerDefault () { return SecurityAlertPolicyUseServerDefault; },
        get DataMaskingState () { return DataMaskingState; },
        get DataMaskingRuleState () { return DataMaskingRuleState; },
        get DataMaskingFunction () { return DataMaskingFunction; },
        get GeoBackupPolicyState () { return GeoBackupPolicyState; },
        get DatabaseEdition () { return DatabaseEdition; },
        get ServiceObjectiveName () { return ServiceObjectiveName; },
        get StorageKeyType () { return StorageKeyType; },
        get AuthenticationType () { return AuthenticationType; },
        get UnitType () { return UnitType; },
        get PrimaryAggregationType () { return PrimaryAggregationType; },
        get UnitDefinitionType () { return UnitDefinitionType; },
        get ElasticPoolEdition () { return ElasticPoolEdition; },
        get ReplicationRole () { return ReplicationRole; },
        get ReplicationState () { return ReplicationState; },
        get RecommendedIndexAction () { return RecommendedIndexAction; },
        get RecommendedIndexState () { return RecommendedIndexState; },
        get RecommendedIndexType () { return RecommendedIndexType; },
        get TransparentDataEncryptionStatus () { return TransparentDataEncryptionStatus; },
        get TransparentDataEncryptionActivityStatus () { return TransparentDataEncryptionActivityStatus; },
        get AutomaticTuningMode () { return AutomaticTuningMode; },
        get AutomaticTuningOptionModeDesired () { return AutomaticTuningOptionModeDesired; },
        get AutomaticTuningOptionModeActual () { return AutomaticTuningOptionModeActual; },
        get AutomaticTuningDisabledReason () { return AutomaticTuningDisabledReason; },
        get ServerKeyType () { return ServerKeyType; },
        get ReadWriteEndpointFailoverPolicy () { return ReadWriteEndpointFailoverPolicy; },
        get ReadOnlyEndpointFailoverPolicy () { return ReadOnlyEndpointFailoverPolicy; },
        get FailoverGroupReplicationRole () { return FailoverGroupReplicationRole; },
        get IdentityType () { return IdentityType; },
        get OperationOrigin () { return OperationOrigin; },
        get SyncAgentState () { return SyncAgentState; },
        get SyncMemberDbType () { return SyncMemberDbType; },
        get SyncGroupLogType () { return SyncGroupLogType; },
        get SyncConflictResolutionPolicy () { return SyncConflictResolutionPolicy; },
        get SyncGroupState () { return SyncGroupState; },
        get SyncDirection () { return SyncDirection; },
        get SyncMemberState () { return SyncMemberState; },
        get VirtualNetworkRuleState () { return VirtualNetworkRuleState; },
        get BlobAuditingPolicyState () { return BlobAuditingPolicyState; },
        get JobAgentState () { return JobAgentState; },
        get JobExecutionLifecycle () { return JobExecutionLifecycle; },
        get ProvisioningState () { return ProvisioningState; },
        get JobTargetType () { return JobTargetType; },
        get JobScheduleType () { return JobScheduleType; },
        get JobStepActionType () { return JobStepActionType; },
        get JobStepActionSource () { return JobStepActionSource; },
        get JobStepOutputType () { return JobStepOutputType; },
        get JobTargetGroupMembershipType () { return JobTargetGroupMembershipType; },
        get ManagedDatabaseStatus () { return ManagedDatabaseStatus; },
        get CatalogCollationType () { return CatalogCollationType; },
        get ManagedDatabaseCreateMode () { return ManagedDatabaseCreateMode; },
        get AutomaticTuningServerMode () { return AutomaticTuningServerMode; },
        get AutomaticTuningServerReason () { return AutomaticTuningServerReason; },
        get RestorePointType () { return RestorePointType; },
        get ManagementOperationState () { return ManagementOperationState; },
        get MaxSizeUnit () { return MaxSizeUnit; },
        get LogSizeUnit () { return LogSizeUnit; },
        get CapabilityStatus () { return CapabilityStatus; },
        get PerformanceLevelUnit () { return PerformanceLevelUnit; },
        get CreateMode () { return CreateMode; },
        get SampleName () { return SampleName; },
        get DatabaseStatus () { return DatabaseStatus; },
        get DatabaseLicenseType () { return DatabaseLicenseType; },
        get DatabaseReadScale () { return DatabaseReadScale; },
        get ElasticPoolState () { return ElasticPoolState; },
        get ElasticPoolLicenseType () { return ElasticPoolLicenseType; },
        get VulnerabilityAssessmentScanTriggerType () { return VulnerabilityAssessmentScanTriggerType; },
        get VulnerabilityAssessmentScanState () { return VulnerabilityAssessmentScanState; },
        get InstanceFailoverGroupReplicationRole () { return InstanceFailoverGroupReplicationRole; },
        get LongTermRetentionDatabaseState () { return LongTermRetentionDatabaseState; },
        get VulnerabilityAssessmentPolicyBaselineName () { return VulnerabilityAssessmentPolicyBaselineName; },
        get CapabilityGroup () { return CapabilityGroup; },
        get Type () { return Type; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var RecoverableDatabase = {
        serializedName: "RecoverableDatabase",
        type: {
            name: "Composite",
            className: "RecoverableDatabase",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { edition: {
                    readOnly: true,
                    serializedName: "properties.edition",
                    type: {
                        name: "String"
                    }
                }, serviceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.serviceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, lastAvailableBackupDate: {
                    readOnly: true,
                    serializedName: "properties.lastAvailableBackupDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var RestorableDroppedDatabase = {
        serializedName: "RestorableDroppedDatabase",
        type: {
            name: "Composite",
            className: "RestorableDroppedDatabase",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, edition: {
                    readOnly: true,
                    serializedName: "properties.edition",
                    type: {
                        name: "String"
                    }
                }, maxSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "String"
                    }
                }, serviceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.serviceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, deletionDate: {
                    readOnly: true,
                    serializedName: "properties.deletionDate",
                    type: {
                        name: "DateTime"
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var CheckNameAvailabilityRequest = {
        serializedName: "CheckNameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityRequest",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.Sql/servers',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResponse = {
        serializedName: "CheckNameAvailabilityResponse",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResponse",
            modelProperties: {
                available: {
                    readOnly: true,
                    serializedName: "available",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                }
            }
        }
    };
    var ServerConnectionPolicy = {
        serializedName: "ServerConnectionPolicy",
        type: {
            name: "Composite",
            className: "ServerConnectionPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, connectionType: {
                    required: true,
                    serializedName: "properties.connectionType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Proxy",
                            "Redirect"
                        ]
                    }
                } })
        }
    };
    var DatabaseSecurityAlertPolicy = {
        serializedName: "DatabaseSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "DatabaseSecurityAlertPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "New",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "String"
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "String"
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, useServerDefault: {
                    serializedName: "properties.useServerDefault",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var DataMaskingPolicy = {
        serializedName: "DataMaskingPolicy",
        type: {
            name: "Composite",
            className: "DataMaskingPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { dataMaskingState: {
                    required: true,
                    serializedName: "properties.dataMaskingState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, exemptPrincipals: {
                    serializedName: "properties.exemptPrincipals",
                    type: {
                        name: "String"
                    }
                }, applicationPrincipals: {
                    readOnly: true,
                    serializedName: "properties.applicationPrincipals",
                    type: {
                        name: "String"
                    }
                }, maskingLevel: {
                    readOnly: true,
                    serializedName: "properties.maskingLevel",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataMaskingRule = {
        serializedName: "DataMaskingRule",
        type: {
            name: "Composite",
            className: "DataMaskingRule",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { dataMaskingRuleId: {
                    readOnly: true,
                    serializedName: "properties.id",
                    type: {
                        name: "String"
                    }
                }, aliasName: {
                    serializedName: "properties.aliasName",
                    type: {
                        name: "String"
                    }
                }, ruleState: {
                    serializedName: "properties.ruleState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, schemaName: {
                    required: true,
                    serializedName: "properties.schemaName",
                    type: {
                        name: "String"
                    }
                }, tableName: {
                    required: true,
                    serializedName: "properties.tableName",
                    type: {
                        name: "String"
                    }
                }, columnName: {
                    required: true,
                    serializedName: "properties.columnName",
                    type: {
                        name: "String"
                    }
                }, maskingFunction: {
                    required: true,
                    serializedName: "properties.maskingFunction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "CCN",
                            "Email",
                            "Number",
                            "SSN",
                            "Text"
                        ]
                    }
                }, numberFrom: {
                    serializedName: "properties.numberFrom",
                    type: {
                        name: "String"
                    }
                }, numberTo: {
                    serializedName: "properties.numberTo",
                    type: {
                        name: "String"
                    }
                }, prefixSize: {
                    serializedName: "properties.prefixSize",
                    type: {
                        name: "String"
                    }
                }, suffixSize: {
                    serializedName: "properties.suffixSize",
                    type: {
                        name: "String"
                    }
                }, replacementString: {
                    serializedName: "properties.replacementString",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FirewallRule = {
        serializedName: "FirewallRule",
        type: {
            name: "Composite",
            className: "FirewallRule",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                }, endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GeoBackupPolicy = {
        serializedName: "GeoBackupPolicy",
        type: {
            name: "Composite",
            className: "GeoBackupPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Disabled",
                            "Enabled"
                        ]
                    }
                }, storageType: {
                    readOnly: true,
                    serializedName: "properties.storageType",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImportExtensionRequest = {
        serializedName: "ImportExtensionRequest",
        type: {
            name: "Composite",
            className: "ImportExtensionRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                storageKeyType: {
                    required: true,
                    serializedName: "properties.storageKeyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StorageAccessKey",
                            "SharedAccessKey"
                        ]
                    }
                },
                storageKey: {
                    required: true,
                    serializedName: "properties.storageKey",
                    type: {
                        name: "String"
                    }
                },
                storageUri: {
                    required: true,
                    serializedName: "properties.storageUri",
                    type: {
                        name: "String"
                    }
                },
                administratorLogin: {
                    required: true,
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    required: true,
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "properties.authenticationType",
                    defaultValue: 'SQL',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SQL",
                            "ADPassword"
                        ]
                    }
                },
                operationMode: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.operationMode",
                    defaultValue: 'Import',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImportExportResponse = {
        serializedName: "ImportExportResponse",
        type: {
            name: "Composite",
            className: "ImportExportResponse",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { requestType: {
                    readOnly: true,
                    serializedName: "properties.requestType",
                    type: {
                        name: "String"
                    }
                }, requestId: {
                    readOnly: true,
                    serializedName: "properties.requestId",
                    type: {
                        name: "Uuid"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "String"
                    }
                }, queuedTime: {
                    readOnly: true,
                    serializedName: "properties.queuedTime",
                    type: {
                        name: "String"
                    }
                }, blobUri: {
                    readOnly: true,
                    serializedName: "properties.blobUri",
                    type: {
                        name: "String"
                    }
                }, errorMessage: {
                    readOnly: true,
                    serializedName: "properties.errorMessage",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExportRequest = {
        serializedName: "ExportRequest",
        type: {
            name: "Composite",
            className: "ExportRequest",
            modelProperties: {
                storageKeyType: {
                    required: true,
                    serializedName: "storageKeyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "StorageAccessKey",
                            "SharedAccessKey"
                        ]
                    }
                },
                storageKey: {
                    required: true,
                    serializedName: "storageKey",
                    type: {
                        name: "String"
                    }
                },
                storageUri: {
                    required: true,
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                },
                administratorLogin: {
                    required: true,
                    serializedName: "administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    required: true,
                    serializedName: "administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    defaultValue: 'SQL',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SQL",
                            "ADPassword"
                        ]
                    }
                }
            }
        }
    };
    var ImportRequest = {
        serializedName: "ImportRequest",
        type: {
            name: "Composite",
            className: "ImportRequest",
            modelProperties: __assign({}, ExportRequest.type.modelProperties, { databaseName: {
                    required: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, edition: {
                    required: true,
                    serializedName: "edition",
                    type: {
                        name: "String"
                    }
                }, serviceObjectiveName: {
                    required: true,
                    serializedName: "serviceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, maxSizeBytes: {
                    required: true,
                    serializedName: "maxSizeBytes",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MetricValue = {
        serializedName: "MetricValue",
        type: {
            name: "Composite",
            className: "MetricValue",
            modelProperties: {
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                average: {
                    readOnly: true,
                    serializedName: "average",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                total: {
                    readOnly: true,
                    serializedName: "total",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MetricName = {
        serializedName: "MetricName",
        type: {
            name: "Composite",
            className: "MetricName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Metric = {
        serializedName: "Metric",
        type: {
            name: "Composite",
            className: "Metric",
            modelProperties: {
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                metricValues: {
                    readOnly: true,
                    serializedName: "metricValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricAvailability = {
        serializedName: "MetricAvailability",
        type: {
            name: "Composite",
            className: "MetricAvailability",
            modelProperties: {
                retention: {
                    readOnly: true,
                    serializedName: "retention",
                    type: {
                        name: "String"
                    }
                },
                timeGrain: {
                    readOnly: true,
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDefinition = {
        serializedName: "MetricDefinition",
        type: {
            name: "Composite",
            className: "MetricDefinition",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "MetricName"
                    }
                },
                primaryAggregationType: {
                    readOnly: true,
                    serializedName: "primaryAggregationType",
                    type: {
                        name: "String"
                    }
                },
                resourceUri: {
                    readOnly: true,
                    serializedName: "resourceUri",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                metricAvailabilities: {
                    readOnly: true,
                    serializedName: "metricAvailabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricAvailability"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecommendedElasticPoolMetric = {
        serializedName: "RecommendedElasticPoolMetric",
        type: {
            name: "Composite",
            className: "RecommendedElasticPoolMetric",
            modelProperties: {
                dateTime: {
                    serializedName: "dateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                dtu: {
                    serializedName: "dtu",
                    type: {
                        name: "Number"
                    }
                },
                sizeGB: {
                    serializedName: "sizeGB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecommendedElasticPool = {
        serializedName: "RecommendedElasticPool",
        type: {
            name: "Composite",
            className: "RecommendedElasticPool",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { databaseEdition: {
                    readOnly: true,
                    serializedName: "properties.databaseEdition",
                    type: {
                        name: "String"
                    }
                }, dtu: {
                    serializedName: "properties.dtu",
                    type: {
                        name: "Number"
                    }
                }, databaseDtuMin: {
                    serializedName: "properties.databaseDtuMin",
                    type: {
                        name: "Number"
                    }
                }, databaseDtuMax: {
                    serializedName: "properties.databaseDtuMax",
                    type: {
                        name: "Number"
                    }
                }, storageMB: {
                    serializedName: "properties.storageMB",
                    type: {
                        name: "Number"
                    }
                }, observationPeriodStart: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodStart",
                    type: {
                        name: "DateTime"
                    }
                }, observationPeriodEnd: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodEnd",
                    type: {
                        name: "DateTime"
                    }
                }, maxObservedDtu: {
                    readOnly: true,
                    serializedName: "properties.maxObservedDtu",
                    type: {
                        name: "Number"
                    }
                }, maxObservedStorageMB: {
                    readOnly: true,
                    serializedName: "properties.maxObservedStorageMB",
                    type: {
                        name: "Number"
                    }
                }, databases: {
                    readOnly: true,
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackedResource"
                            }
                        }
                    }
                }, metrics: {
                    readOnly: true,
                    serializedName: "properties.metrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecommendedElasticPoolMetric"
                            }
                        }
                    }
                } })
        }
    };
    var ReplicationLink = {
        serializedName: "ReplicationLink",
        type: {
            name: "Composite",
            className: "ReplicationLink",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, isTerminationAllowed: {
                    readOnly: true,
                    serializedName: "properties.isTerminationAllowed",
                    type: {
                        name: "Boolean"
                    }
                }, replicationMode: {
                    readOnly: true,
                    serializedName: "properties.replicationMode",
                    type: {
                        name: "String"
                    }
                }, partnerServer: {
                    readOnly: true,
                    serializedName: "properties.partnerServer",
                    type: {
                        name: "String"
                    }
                }, partnerDatabase: {
                    readOnly: true,
                    serializedName: "properties.partnerDatabase",
                    type: {
                        name: "String"
                    }
                }, partnerLocation: {
                    readOnly: true,
                    serializedName: "properties.partnerLocation",
                    type: {
                        name: "String"
                    }
                }, role: {
                    readOnly: true,
                    serializedName: "properties.role",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary",
                            "NonReadableSecondary",
                            "Source",
                            "Copy"
                        ]
                    }
                }, partnerRole: {
                    readOnly: true,
                    serializedName: "properties.partnerRole",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary",
                            "NonReadableSecondary",
                            "Source",
                            "Copy"
                        ]
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, replicationState: {
                    readOnly: true,
                    serializedName: "properties.replicationState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerAzureADAdministrator = {
        serializedName: "ServerAzureADAdministrator",
        type: {
            name: "Composite",
            className: "ServerAzureADAdministrator",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { administratorType: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.administratorType",
                    defaultValue: 'ActiveDirectory',
                    type: {
                        name: "String"
                    }
                }, login: {
                    required: true,
                    serializedName: "properties.login",
                    type: {
                        name: "String"
                    }
                }, sid: {
                    required: true,
                    serializedName: "properties.sid",
                    type: {
                        name: "Uuid"
                    }
                }, tenantId: {
                    required: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "Uuid"
                    }
                } })
        }
    };
    var ServerCommunicationLink = {
        serializedName: "ServerCommunicationLink",
        type: {
            name: "Composite",
            className: "ServerCommunicationLink",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, partnerServer: {
                    required: true,
                    serializedName: "properties.partnerServer",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceObjective = {
        serializedName: "ServiceObjective",
        type: {
            name: "Composite",
            className: "ServiceObjective",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { serviceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.serviceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, isDefault: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.isDefault",
                    type: {
                        name: "Boolean"
                    }
                }, isSystem: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.isSystem",
                    type: {
                        name: "Boolean"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ElasticPoolActivity = {
        serializedName: "ElasticPoolActivity",
        type: {
            name: "Composite",
            className: "ElasticPoolActivity",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorMessage: {
                    readOnly: true,
                    serializedName: "properties.errorMessage",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.operationId",
                    type: {
                        name: "Uuid"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuMax: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuMax",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuMin: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuMin",
                    type: {
                        name: "Number"
                    }
                }, requestedDtu: {
                    readOnly: true,
                    serializedName: "properties.requestedDtu",
                    type: {
                        name: "Number"
                    }
                }, requestedElasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.requestedElasticPoolName",
                    type: {
                        name: "String"
                    }
                }, requestedStorageLimitInGB: {
                    readOnly: true,
                    serializedName: "properties.requestedStorageLimitInGB",
                    type: {
                        name: "Number"
                    }
                }, elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, requestedStorageLimitInMB: {
                    readOnly: true,
                    serializedName: "properties.requestedStorageLimitInMB",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuGuarantee: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuGuarantee",
                    type: {
                        name: "Number"
                    }
                }, requestedDatabaseDtuCap: {
                    readOnly: true,
                    serializedName: "properties.requestedDatabaseDtuCap",
                    type: {
                        name: "Number"
                    }
                }, requestedDtuGuarantee: {
                    readOnly: true,
                    serializedName: "properties.requestedDtuGuarantee",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ElasticPoolDatabaseActivity = {
        serializedName: "ElasticPoolDatabaseActivity",
        type: {
            name: "Composite",
            className: "ElasticPoolDatabaseActivity",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorMessage: {
                    readOnly: true,
                    serializedName: "properties.errorMessage",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.operationId",
                    type: {
                        name: "Uuid"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, requestedElasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.requestedElasticPoolName",
                    type: {
                        name: "String"
                    }
                }, currentElasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.currentElasticPoolName",
                    type: {
                        name: "String"
                    }
                }, currentServiceObjective: {
                    readOnly: true,
                    serializedName: "properties.currentServiceObjective",
                    type: {
                        name: "String"
                    }
                }, requestedServiceObjective: {
                    readOnly: true,
                    serializedName: "properties.requestedServiceObjective",
                    type: {
                        name: "String"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationImpact = {
        serializedName: "OperationImpact",
        type: {
            name: "Composite",
            className: "OperationImpact",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                changeValueAbsolute: {
                    readOnly: true,
                    serializedName: "changeValueAbsolute",
                    type: {
                        name: "Number"
                    }
                },
                changeValueRelative: {
                    readOnly: true,
                    serializedName: "changeValueRelative",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecommendedIndex = {
        serializedName: "RecommendedIndex",
        type: {
            name: "Composite",
            className: "RecommendedIndex",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { action: {
                    readOnly: true,
                    serializedName: "properties.action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Create",
                            "Drop",
                            "Rebuild"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Pending",
                            "Executing",
                            "Verifying",
                            "Pending Revert",
                            "Reverting",
                            "Reverted",
                            "Ignored",
                            "Expired",
                            "Blocked",
                            "Success"
                        ]
                    }
                }, created: {
                    readOnly: true,
                    serializedName: "properties.created",
                    type: {
                        name: "DateTime"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, indexType: {
                    readOnly: true,
                    serializedName: "properties.indexType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CLUSTERED",
                            "NONCLUSTERED",
                            "COLUMNSTORE",
                            "CLUSTERED COLUMNSTORE"
                        ]
                    }
                }, schema: {
                    readOnly: true,
                    serializedName: "properties.schema",
                    type: {
                        name: "String"
                    }
                }, table: {
                    readOnly: true,
                    serializedName: "properties.table",
                    type: {
                        name: "String"
                    }
                }, columns: {
                    readOnly: true,
                    serializedName: "properties.columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, includedColumns: {
                    readOnly: true,
                    serializedName: "properties.includedColumns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, indexScript: {
                    readOnly: true,
                    serializedName: "properties.indexScript",
                    type: {
                        name: "String"
                    }
                }, estimatedImpact: {
                    readOnly: true,
                    serializedName: "properties.estimatedImpact",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationImpact"
                            }
                        }
                    }
                }, reportedImpact: {
                    readOnly: true,
                    serializedName: "properties.reportedImpact",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationImpact"
                            }
                        }
                    }
                } })
        }
    };
    var TransparentDataEncryption = {
        serializedName: "TransparentDataEncryption",
        type: {
            name: "Composite",
            className: "TransparentDataEncryption",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                } })
        }
    };
    var SloUsageMetric = {
        serializedName: "SloUsageMetric",
        type: {
            name: "Composite",
            className: "SloUsageMetric",
            modelProperties: {
                serviceLevelObjective: {
                    readOnly: true,
                    serializedName: "serviceLevelObjective",
                    type: {
                        name: "String"
                    }
                },
                serviceLevelObjectiveId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "serviceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                },
                inRangeTimeRatio: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "inRangeTimeRatio",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ServiceTierAdvisor = {
        serializedName: "ServiceTierAdvisor",
        type: {
            name: "Composite",
            className: "ServiceTierAdvisor",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { observationPeriodStart: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodStart",
                    type: {
                        name: "DateTime"
                    }
                }, observationPeriodEnd: {
                    readOnly: true,
                    serializedName: "properties.observationPeriodEnd",
                    type: {
                        name: "DateTime"
                    }
                }, activeTimeRatio: {
                    readOnly: true,
                    serializedName: "properties.activeTimeRatio",
                    type: {
                        name: "Number"
                    }
                }, minDtu: {
                    readOnly: true,
                    serializedName: "properties.minDtu",
                    type: {
                        name: "Number"
                    }
                }, avgDtu: {
                    readOnly: true,
                    serializedName: "properties.avgDtu",
                    type: {
                        name: "Number"
                    }
                }, maxDtu: {
                    readOnly: true,
                    serializedName: "properties.maxDtu",
                    type: {
                        name: "Number"
                    }
                }, maxSizeInGB: {
                    readOnly: true,
                    serializedName: "properties.maxSizeInGB",
                    type: {
                        name: "Number"
                    }
                }, serviceLevelObjectiveUsageMetrics: {
                    readOnly: true,
                    serializedName: "properties.serviceLevelObjectiveUsageMetrics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SloUsageMetric"
                            }
                        }
                    }
                }, currentServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.currentServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, currentServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.currentServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, usageBasedRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.usageBasedRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, usageBasedRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.usageBasedRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, databaseSizeBasedRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, databaseSizeBasedRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, disasterPlanBasedRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, disasterPlanBasedRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, overallRecommendationServiceLevelObjective: {
                    readOnly: true,
                    serializedName: "properties.overallRecommendationServiceLevelObjective",
                    type: {
                        name: "String"
                    }
                }, overallRecommendationServiceLevelObjectiveId: {
                    readOnly: true,
                    serializedName: "properties.overallRecommendationServiceLevelObjectiveId",
                    type: {
                        name: "Uuid"
                    }
                }, confidence: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.confidence",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var TransparentDataEncryptionActivity = {
        serializedName: "TransparentDataEncryptionActivity",
        type: {
            name: "Composite",
            className: "TransparentDataEncryptionActivity",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ServerUsage = {
        serializedName: "ServerUsage",
        type: {
            name: "Composite",
            className: "ServerUsage",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    readOnly: true,
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                nextResetTime: {
                    readOnly: true,
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var DatabaseUsage = {
        serializedName: "DatabaseUsage",
        type: {
            name: "Composite",
            className: "DatabaseUsage",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    readOnly: true,
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                nextResetTime: {
                    readOnly: true,
                    serializedName: "nextResetTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AutomaticTuningOptions = {
        serializedName: "AutomaticTuningOptions",
        type: {
            name: "Composite",
            className: "AutomaticTuningOptions",
            modelProperties: {
                desiredState: {
                    serializedName: "desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On",
                            "Default"
                        ]
                    }
                },
                actualState: {
                    readOnly: true,
                    serializedName: "actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On"
                        ]
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "Number"
                    }
                },
                reasonDesc: {
                    readOnly: true,
                    serializedName: "reasonDesc",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Disabled",
                            "AutoConfigured",
                            "InheritedFromServer",
                            "QueryStoreOff",
                            "QueryStoreReadOnly",
                            "NotSupported"
                        ]
                    }
                }
            }
        }
    };
    var DatabaseAutomaticTuning = {
        serializedName: "DatabaseAutomaticTuning",
        type: {
            name: "Composite",
            className: "DatabaseAutomaticTuning",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { desiredState: {
                    serializedName: "properties.desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Inherit",
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, actualState: {
                    readOnly: true,
                    serializedName: "properties.actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Inherit",
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, options: {
                    serializedName: "properties.options",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AutomaticTuningOptions"
                            }
                        }
                    }
                } })
        }
    };
    var EncryptionProtector = {
        serializedName: "EncryptionProtector",
        type: {
            name: "Composite",
            className: "EncryptionProtector",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, subregion: {
                    readOnly: true,
                    serializedName: "properties.subregion",
                    type: {
                        name: "String"
                    }
                }, serverKeyName: {
                    serializedName: "properties.serverKeyName",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    readOnly: true,
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FailoverGroupReadWriteEndpoint = {
        serializedName: "FailoverGroupReadWriteEndpoint",
        type: {
            name: "Composite",
            className: "FailoverGroupReadWriteEndpoint",
            modelProperties: {
                failoverPolicy: {
                    required: true,
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                },
                failoverWithDataLossGracePeriodMinutes: {
                    serializedName: "failoverWithDataLossGracePeriodMinutes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FailoverGroupReadOnlyEndpoint = {
        serializedName: "FailoverGroupReadOnlyEndpoint",
        type: {
            name: "Composite",
            className: "FailoverGroupReadOnlyEndpoint",
            modelProperties: {
                failoverPolicy: {
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PartnerInfo = {
        serializedName: "PartnerInfo",
        type: {
            name: "Composite",
            className: "PartnerInfo",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                replicationRole: {
                    readOnly: true,
                    serializedName: "replicationRole",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverGroup = {
        serializedName: "FailoverGroup",
        type: {
            name: "Composite",
            className: "FailoverGroup",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, readWriteEndpoint: {
                    required: true,
                    serializedName: "properties.readWriteEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadWriteEndpoint"
                    }
                }, readOnlyEndpoint: {
                    serializedName: "properties.readOnlyEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadOnlyEndpoint"
                    }
                }, replicationRole: {
                    readOnly: true,
                    serializedName: "properties.replicationRole",
                    type: {
                        name: "String"
                    }
                }, replicationState: {
                    readOnly: true,
                    serializedName: "properties.replicationState",
                    type: {
                        name: "String"
                    }
                }, partnerServers: {
                    required: true,
                    serializedName: "properties.partnerServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartnerInfo"
                            }
                        }
                    }
                }, databases: {
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var FailoverGroupUpdate = {
        serializedName: "FailoverGroupUpdate",
        type: {
            name: "Composite",
            className: "FailoverGroupUpdate",
            modelProperties: {
                readWriteEndpoint: {
                    serializedName: "properties.readWriteEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadWriteEndpoint"
                    }
                },
                readOnlyEndpoint: {
                    serializedName: "properties.readOnlyEndpoint",
                    type: {
                        name: "Composite",
                        className: "FailoverGroupReadOnlyEndpoint"
                    }
                },
                databases: {
                    serializedName: "properties.databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceIdentity = {
        serializedName: "ResourceIdentity",
        type: {
            name: "Composite",
            className: "ResourceIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagedInstance = {
        serializedName: "ManagedInstance",
        type: {
            name: "Composite",
            className: "ManagedInstance",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ResourceIdentity"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                }, administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                }, administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                }, subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, vCores: {
                    serializedName: "properties.vCores",
                    type: {
                        name: "Number"
                    }
                }, storageSizeInGB: {
                    serializedName: "properties.storageSizeInGB",
                    type: {
                        name: "Number"
                    }
                }, collation: {
                    readOnly: true,
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                }, dnsZone: {
                    readOnly: true,
                    serializedName: "properties.dnsZone",
                    type: {
                        name: "String"
                    }
                }, dnsZonePartner: {
                    serializedName: "properties.dnsZonePartner",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedInstanceUpdate = {
        serializedName: "ManagedInstanceUpdate",
        type: {
            name: "Composite",
            className: "ManagedInstanceUpdate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                },
                administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                },
                vCores: {
                    serializedName: "properties.vCores",
                    type: {
                        name: "Number"
                    }
                },
                storageSizeInGB: {
                    serializedName: "properties.storageSizeInGB",
                    type: {
                        name: "Number"
                    }
                },
                collation: {
                    readOnly: true,
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                },
                dnsZone: {
                    readOnly: true,
                    serializedName: "properties.dnsZone",
                    type: {
                        name: "String"
                    }
                },
                dnsZonePartner: {
                    serializedName: "properties.dnsZonePartner",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerKey = {
        serializedName: "ServerKey",
        type: {
            name: "Composite",
            className: "ServerKey",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, subregion: {
                    readOnly: true,
                    serializedName: "properties.subregion",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var Server = {
        serializedName: "Server",
        type: {
            name: "Composite",
            className: "Server",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ResourceIdentity"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                }, administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerUpdate = {
        serializedName: "ServerUpdate",
        type: {
            name: "Composite",
            className: "ServerUpdate",
            modelProperties: {
                administratorLogin: {
                    serializedName: "properties.administratorLogin",
                    type: {
                        name: "String"
                    }
                },
                administratorLoginPassword: {
                    serializedName: "properties.administratorLoginPassword",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                fullyQualifiedDomainName: {
                    readOnly: true,
                    serializedName: "properties.fullyQualifiedDomainName",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SyncAgent = {
        serializedName: "SyncAgent",
        type: {
            name: "Composite",
            className: "SyncAgent",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { syncAgentName: {
                    readOnly: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, syncDatabaseId: {
                    serializedName: "properties.syncDatabaseId",
                    type: {
                        name: "String"
                    }
                }, lastAliveTime: {
                    readOnly: true,
                    serializedName: "properties.lastAliveTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, isUpToDate: {
                    readOnly: true,
                    serializedName: "properties.isUpToDate",
                    type: {
                        name: "Boolean"
                    }
                }, expiryTime: {
                    readOnly: true,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SyncAgentKeyProperties = {
        serializedName: "SyncAgentKeyProperties",
        type: {
            name: "Composite",
            className: "SyncAgentKeyProperties",
            modelProperties: {
                syncAgentKey: {
                    readOnly: true,
                    serializedName: "syncAgentKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncAgentLinkedDatabase = {
        serializedName: "SyncAgentLinkedDatabase",
        type: {
            name: "Composite",
            className: "SyncAgentLinkedDatabase",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { databaseType: {
                    readOnly: true,
                    serializedName: "properties.databaseType",
                    type: {
                        name: "String"
                    }
                }, databaseId: {
                    readOnly: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    readOnly: true,
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SyncDatabaseIdProperties = {
        serializedName: "SyncDatabaseIdProperties",
        type: {
            name: "Composite",
            className: "SyncDatabaseIdProperties",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaTableColumn = {
        serializedName: "SyncFullSchemaTableColumn",
        type: {
            name: "Composite",
            className: "SyncFullSchemaTableColumn",
            modelProperties: {
                dataSize: {
                    readOnly: true,
                    serializedName: "dataSize",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    readOnly: true,
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                },
                errorId: {
                    readOnly: true,
                    serializedName: "errorId",
                    type: {
                        name: "String"
                    }
                },
                hasError: {
                    readOnly: true,
                    serializedName: "hasError",
                    type: {
                        name: "Boolean"
                    }
                },
                isPrimaryKey: {
                    readOnly: true,
                    serializedName: "isPrimaryKey",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                quotedName: {
                    readOnly: true,
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaTable = {
        serializedName: "SyncFullSchemaTable",
        type: {
            name: "Composite",
            className: "SyncFullSchemaTable",
            modelProperties: {
                columns: {
                    readOnly: true,
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncFullSchemaTableColumn"
                            }
                        }
                    }
                },
                errorId: {
                    readOnly: true,
                    serializedName: "errorId",
                    type: {
                        name: "String"
                    }
                },
                hasError: {
                    readOnly: true,
                    serializedName: "hasError",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                quotedName: {
                    readOnly: true,
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaProperties = {
        serializedName: "SyncFullSchemaProperties",
        type: {
            name: "Composite",
            className: "SyncFullSchemaProperties",
            modelProperties: {
                tables: {
                    readOnly: true,
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncFullSchemaTable"
                            }
                        }
                    }
                },
                lastUpdateTime: {
                    readOnly: true,
                    serializedName: "lastUpdateTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var SyncGroupLogProperties = {
        serializedName: "SyncGroupLogProperties",
        type: {
            name: "Composite",
            className: "SyncGroupLogProperties",
            modelProperties: {
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    readOnly: true,
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                },
                tracingId: {
                    readOnly: true,
                    serializedName: "tracingId",
                    type: {
                        name: "Uuid"
                    }
                },
                operationStatus: {
                    readOnly: true,
                    serializedName: "operationStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupSchemaTableColumn = {
        serializedName: "SyncGroupSchemaTableColumn",
        type: {
            name: "Composite",
            className: "SyncGroupSchemaTableColumn",
            modelProperties: {
                quotedName: {
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                },
                dataSize: {
                    serializedName: "dataSize",
                    type: {
                        name: "String"
                    }
                },
                dataType: {
                    serializedName: "dataType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupSchemaTable = {
        serializedName: "SyncGroupSchemaTable",
        type: {
            name: "Composite",
            className: "SyncGroupSchemaTable",
            modelProperties: {
                columns: {
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroupSchemaTableColumn"
                            }
                        }
                    }
                },
                quotedName: {
                    serializedName: "quotedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupSchema = {
        serializedName: "SyncGroupSchema",
        type: {
            name: "Composite",
            className: "SyncGroupSchema",
            modelProperties: {
                tables: {
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroupSchemaTable"
                            }
                        }
                    }
                },
                masterSyncMemberName: {
                    serializedName: "masterSyncMemberName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroup = {
        serializedName: "SyncGroup",
        type: {
            name: "Composite",
            className: "SyncGroup",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { interval: {
                    serializedName: "properties.interval",
                    type: {
                        name: "Number"
                    }
                }, lastSyncTime: {
                    readOnly: true,
                    serializedName: "properties.lastSyncTime",
                    type: {
                        name: "DateTime"
                    }
                }, conflictResolutionPolicy: {
                    serializedName: "properties.conflictResolutionPolicy",
                    type: {
                        name: "String"
                    }
                }, syncDatabaseId: {
                    serializedName: "properties.syncDatabaseId",
                    type: {
                        name: "String"
                    }
                }, hubDatabaseUserName: {
                    serializedName: "properties.hubDatabaseUserName",
                    type: {
                        name: "String"
                    }
                }, hubDatabasePassword: {
                    serializedName: "properties.hubDatabasePassword",
                    type: {
                        name: "String"
                    }
                }, syncState: {
                    readOnly: true,
                    serializedName: "properties.syncState",
                    type: {
                        name: "String"
                    }
                }, schema: {
                    serializedName: "properties.schema",
                    type: {
                        name: "Composite",
                        className: "SyncGroupSchema"
                    }
                } })
        }
    };
    var SyncMember = {
        serializedName: "SyncMember",
        type: {
            name: "Composite",
            className: "SyncMember",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { databaseType: {
                    serializedName: "properties.databaseType",
                    type: {
                        name: "String"
                    }
                }, syncAgentId: {
                    serializedName: "properties.syncAgentId",
                    type: {
                        name: "String"
                    }
                }, sqlServerDatabaseId: {
                    serializedName: "properties.sqlServerDatabaseId",
                    type: {
                        name: "Uuid"
                    }
                }, serverName: {
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, syncDirection: {
                    serializedName: "properties.syncDirection",
                    type: {
                        name: "String"
                    }
                }, syncState: {
                    readOnly: true,
                    serializedName: "properties.syncState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SubscriptionUsage = {
        serializedName: "SubscriptionUsage",
        type: {
            name: "Composite",
            className: "SubscriptionUsage",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, currentValue: {
                    readOnly: true,
                    serializedName: "properties.currentValue",
                    type: {
                        name: "Number"
                    }
                }, limit: {
                    readOnly: true,
                    serializedName: "properties.limit",
                    type: {
                        name: "Number"
                    }
                }, unit: {
                    readOnly: true,
                    serializedName: "properties.unit",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { virtualNetworkSubnetId: {
                    required: true,
                    serializedName: "properties.virtualNetworkSubnetId",
                    type: {
                        name: "String"
                    }
                }, ignoreMissingVnetServiceEndpoint: {
                    serializedName: "properties.ignoreMissingVnetServiceEndpoint",
                    type: {
                        name: "Boolean"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ExtendedDatabaseBlobAuditingPolicy = {
        serializedName: "ExtendedDatabaseBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "ExtendedDatabaseBlobAuditingPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { predicateExpression: {
                    serializedName: "properties.predicateExpression",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ExtendedServerBlobAuditingPolicy = {
        serializedName: "ExtendedServerBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "ExtendedServerBlobAuditingPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { predicateExpression: {
                    serializedName: "properties.predicateExpression",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ServerBlobAuditingPolicy = {
        serializedName: "ServerBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "ServerBlobAuditingPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DatabaseBlobAuditingPolicy = {
        serializedName: "DatabaseBlobAuditingPolicy",
        type: {
            name: "Composite",
            className: "DatabaseBlobAuditingPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                }, auditActionsAndGroups: {
                    serializedName: "properties.auditActionsAndGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, storageAccountSubscriptionId: {
                    serializedName: "properties.storageAccountSubscriptionId",
                    type: {
                        name: "Uuid"
                    }
                }, isStorageSecondaryKeyInUse: {
                    serializedName: "properties.isStorageSecondaryKeyInUse",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DatabaseVulnerabilityAssessmentRuleBaselineItem = {
        serializedName: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
            modelProperties: {
                result: {
                    required: true,
                    serializedName: "result",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseVulnerabilityAssessmentRuleBaseline = {
        serializedName: "DatabaseVulnerabilityAssessmentRuleBaseline",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentRuleBaseline",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { baselineResults: {
                    required: true,
                    serializedName: "properties.baselineResults",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseVulnerabilityAssessmentRuleBaselineItem"
                            }
                        }
                    }
                } })
        }
    };
    var VulnerabilityAssessmentRecurringScansProperties = {
        serializedName: "VulnerabilityAssessmentRecurringScansProperties",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentRecurringScansProperties",
            modelProperties: {
                isEnabled: {
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                emailSubscriptionAdmins: {
                    serializedName: "emailSubscriptionAdmins",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                emails: {
                    serializedName: "emails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseVulnerabilityAssessment = {
        serializedName: "DatabaseVulnerabilityAssessment",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessment",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { storageContainerPath: {
                    required: true,
                    serializedName: "properties.storageContainerPath",
                    type: {
                        name: "String"
                    }
                }, storageContainerSasKey: {
                    serializedName: "properties.storageContainerSasKey",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, recurringScans: {
                    serializedName: "properties.recurringScans",
                    type: {
                        name: "Composite",
                        className: "VulnerabilityAssessmentRecurringScansProperties"
                    }
                } })
        }
    };
    var JobAgent = {
        serializedName: "JobAgent",
        type: {
            name: "Composite",
            className: "JobAgent",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, databaseId: {
                    required: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobAgentUpdate = {
        serializedName: "JobAgentUpdate",
        type: {
            name: "Composite",
            className: "JobAgentUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobCredential = {
        serializedName: "JobCredential",
        type: {
            name: "Composite",
            className: "JobCredential",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { username: {
                    required: true,
                    serializedName: "properties.username",
                    type: {
                        name: "String"
                    }
                }, password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobExecutionTarget = {
        serializedName: "JobExecutionTarget",
        type: {
            name: "Composite",
            className: "JobExecutionTarget",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    readOnly: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobExecution = {
        serializedName: "JobExecution",
        type: {
            name: "Composite",
            className: "JobExecution",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { jobVersion: {
                    readOnly: true,
                    serializedName: "properties.jobVersion",
                    type: {
                        name: "Number"
                    }
                }, stepName: {
                    readOnly: true,
                    serializedName: "properties.stepName",
                    type: {
                        name: "String"
                    }
                }, stepId: {
                    readOnly: true,
                    serializedName: "properties.stepId",
                    type: {
                        name: "Number"
                    }
                }, jobExecutionId: {
                    readOnly: true,
                    serializedName: "properties.jobExecutionId",
                    type: {
                        name: "Uuid"
                    }
                }, lifecycle: {
                    readOnly: true,
                    serializedName: "properties.lifecycle",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createTime: {
                    readOnly: true,
                    serializedName: "properties.createTime",
                    type: {
                        name: "DateTime"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, currentAttempts: {
                    serializedName: "properties.currentAttempts",
                    type: {
                        name: "Number"
                    }
                }, currentAttemptStartTime: {
                    readOnly: true,
                    serializedName: "properties.currentAttemptStartTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastMessage: {
                    readOnly: true,
                    serializedName: "properties.lastMessage",
                    type: {
                        name: "String"
                    }
                }, target: {
                    readOnly: true,
                    serializedName: "properties.target",
                    type: {
                        name: "Composite",
                        className: "JobExecutionTarget"
                    }
                } })
        }
    };
    var JobSchedule = {
        serializedName: "JobSchedule",
        type: {
            name: "Composite",
            className: "JobSchedule",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    defaultValue: new Date('0001-01-01T00:00:00Z'),
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    defaultValue: new Date('9999-12-31T11:59:59Z'),
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    serializedName: "type",
                    defaultValue: 'Once',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Once",
                            "Recurring"
                        ]
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    defaultValue: '',
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "Number"
                    }
                }, schedule: {
                    serializedName: "properties.schedule",
                    type: {
                        name: "Composite",
                        className: "JobSchedule"
                    }
                } })
        }
    };
    var JobStepAction = {
        serializedName: "JobStepAction",
        type: {
            name: "Composite",
            className: "JobStepAction",
            modelProperties: {
                type: {
                    serializedName: "type",
                    defaultValue: 'TSql',
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    defaultValue: 'Inline',
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStepOutput = {
        serializedName: "JobStepOutput",
        type: {
            name: "Composite",
            className: "JobStepOutput",
            modelProperties: {
                type: {
                    serializedName: "type",
                    defaultValue: 'SqlDatabase',
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "Uuid"
                    }
                },
                resourceGroupName: {
                    serializedName: "resourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    required: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    required: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    serializedName: "schemaName",
                    defaultValue: 'dbo',
                    type: {
                        name: "String"
                    }
                },
                tableName: {
                    required: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                },
                credential: {
                    required: true,
                    serializedName: "credential",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStepExecutionOptions = {
        serializedName: "JobStepExecutionOptions",
        type: {
            name: "Composite",
            className: "JobStepExecutionOptions",
            modelProperties: {
                timeoutSeconds: {
                    serializedName: "timeoutSeconds",
                    defaultValue: 43200,
                    type: {
                        name: "Number"
                    }
                },
                retryAttempts: {
                    serializedName: "retryAttempts",
                    defaultValue: 10,
                    type: {
                        name: "Number"
                    }
                },
                initialRetryIntervalSeconds: {
                    serializedName: "initialRetryIntervalSeconds",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                maximumRetryIntervalSeconds: {
                    serializedName: "maximumRetryIntervalSeconds",
                    defaultValue: 120,
                    type: {
                        name: "Number"
                    }
                },
                retryIntervalBackoffMultiplier: {
                    serializedName: "retryIntervalBackoffMultiplier",
                    defaultValue: 2,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobStep = {
        serializedName: "JobStep",
        type: {
            name: "Composite",
            className: "JobStep",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { stepId: {
                    serializedName: "properties.stepId",
                    type: {
                        name: "Number"
                    }
                }, targetGroup: {
                    required: true,
                    serializedName: "properties.targetGroup",
                    type: {
                        name: "String"
                    }
                }, credential: {
                    required: true,
                    serializedName: "properties.credential",
                    type: {
                        name: "String"
                    }
                }, action: {
                    required: true,
                    serializedName: "properties.action",
                    type: {
                        name: "Composite",
                        className: "JobStepAction"
                    }
                }, output: {
                    serializedName: "properties.output",
                    type: {
                        name: "Composite",
                        className: "JobStepOutput"
                    }
                }, executionOptions: {
                    serializedName: "properties.executionOptions",
                    type: {
                        name: "Composite",
                        className: "JobStepExecutionOptions"
                    }
                } })
        }
    };
    var JobTarget = {
        serializedName: "JobTarget",
        type: {
            name: "Composite",
            className: "JobTarget",
            modelProperties: {
                membershipType: {
                    serializedName: "membershipType",
                    defaultValue: 'Include',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Include",
                            "Exclude"
                        ]
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                elasticPoolName: {
                    serializedName: "elasticPoolName",
                    type: {
                        name: "String"
                    }
                },
                shardMapName: {
                    serializedName: "shardMapName",
                    type: {
                        name: "String"
                    }
                },
                refreshCredential: {
                    serializedName: "refreshCredential",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobTargetGroup = {
        serializedName: "JobTargetGroup",
        type: {
            name: "Composite",
            className: "JobTargetGroup",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { members: {
                    required: true,
                    serializedName: "properties.members",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobTarget"
                            }
                        }
                    }
                } })
        }
    };
    var JobVersion = {
        serializedName: "JobVersion",
        type: {
            name: "Composite",
            className: "JobVersion",
            modelProperties: __assign({}, ProxyResource.type.modelProperties)
        }
    };
    var LongTermRetentionBackup = {
        serializedName: "LongTermRetentionBackup",
        type: {
            name: "Composite",
            className: "LongTermRetentionBackup",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, serverCreateTime: {
                    readOnly: true,
                    serializedName: "properties.serverCreateTime",
                    type: {
                        name: "DateTime"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, databaseDeletionTime: {
                    readOnly: true,
                    serializedName: "properties.databaseDeletionTime",
                    type: {
                        name: "DateTime"
                    }
                }, backupTime: {
                    readOnly: true,
                    serializedName: "properties.backupTime",
                    type: {
                        name: "DateTime"
                    }
                }, backupExpirationTime: {
                    readOnly: true,
                    serializedName: "properties.backupExpirationTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var BackupLongTermRetentionPolicy = {
        serializedName: "BackupLongTermRetentionPolicy",
        type: {
            name: "Composite",
            className: "BackupLongTermRetentionPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { weeklyRetention: {
                    serializedName: "properties.weeklyRetention",
                    type: {
                        name: "String"
                    }
                }, monthlyRetention: {
                    serializedName: "properties.monthlyRetention",
                    type: {
                        name: "String"
                    }
                }, yearlyRetention: {
                    serializedName: "properties.yearlyRetention",
                    type: {
                        name: "String"
                    }
                }, weekOfYear: {
                    serializedName: "properties.weekOfYear",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var CompleteDatabaseRestoreDefinition = {
        serializedName: "CompleteDatabaseRestoreDefinition",
        type: {
            name: "Composite",
            className: "CompleteDatabaseRestoreDefinition",
            modelProperties: {
                lastBackupName: {
                    required: true,
                    serializedName: "lastBackupName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedDatabase = {
        serializedName: "ManagedDatabase",
        type: {
            name: "Composite",
            className: "ManagedDatabase",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, earliestRestorePoint: {
                    readOnly: true,
                    serializedName: "properties.earliestRestorePoint",
                    type: {
                        name: "DateTime"
                    }
                }, restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                }, defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                }, catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                }, createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                }, storageContainerUri: {
                    serializedName: "properties.storageContainerUri",
                    type: {
                        name: "String"
                    }
                }, sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                }, storageContainerSasToken: {
                    serializedName: "properties.storageContainerSasToken",
                    type: {
                        name: "String"
                    }
                }, failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedDatabaseUpdate = {
        serializedName: "ManagedDatabaseUpdate",
        type: {
            name: "Composite",
            className: "ManagedDatabaseUpdate",
            modelProperties: {
                collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                earliestRestorePoint: {
                    readOnly: true,
                    serializedName: "properties.earliestRestorePoint",
                    type: {
                        name: "DateTime"
                    }
                },
                restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                },
                defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                },
                catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                },
                createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                },
                storageContainerUri: {
                    serializedName: "properties.storageContainerUri",
                    type: {
                        name: "String"
                    }
                },
                sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                storageContainerSasToken: {
                    serializedName: "properties.storageContainerSasToken",
                    type: {
                        name: "String"
                    }
                },
                failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutomaticTuningServerOptions = {
        serializedName: "AutomaticTuningServerOptions",
        type: {
            name: "Composite",
            className: "AutomaticTuningServerOptions",
            modelProperties: {
                desiredState: {
                    serializedName: "desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On",
                            "Default"
                        ]
                    }
                },
                actualState: {
                    readOnly: true,
                    serializedName: "actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Off",
                            "On"
                        ]
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "Number"
                    }
                },
                reasonDesc: {
                    readOnly: true,
                    serializedName: "reasonDesc",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "Disabled",
                            "AutoConfigured"
                        ]
                    }
                }
            }
        }
    };
    var ServerAutomaticTuning = {
        serializedName: "ServerAutomaticTuning",
        type: {
            name: "Composite",
            className: "ServerAutomaticTuning",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { desiredState: {
                    serializedName: "properties.desiredState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, actualState: {
                    readOnly: true,
                    serializedName: "properties.actualState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Custom",
                            "Auto",
                            "Unspecified"
                        ]
                    }
                }, options: {
                    serializedName: "properties.options",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "AutomaticTuningServerOptions"
                            }
                        }
                    }
                } })
        }
    };
    var ServerDnsAlias = {
        serializedName: "ServerDnsAlias",
        type: {
            name: "Composite",
            className: "ServerDnsAlias",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { azureDnsRecord: {
                    readOnly: true,
                    serializedName: "properties.azureDnsRecord",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServerDnsAliasAcquisition = {
        serializedName: "ServerDnsAliasAcquisition",
        type: {
            name: "Composite",
            className: "ServerDnsAliasAcquisition",
            modelProperties: {
                oldServerDnsAliasId: {
                    serializedName: "oldServerDnsAliasId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerSecurityAlertPolicy = {
        serializedName: "ServerSecurityAlertPolicy",
        type: {
            name: "Composite",
            className: "ServerSecurityAlertPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { state: {
                    required: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "New",
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, disabledAlerts: {
                    serializedName: "properties.disabledAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAddresses: {
                    serializedName: "properties.emailAddresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, emailAccountAdmins: {
                    serializedName: "properties.emailAccountAdmins",
                    type: {
                        name: "Boolean"
                    }
                }, storageEndpoint: {
                    serializedName: "properties.storageEndpoint",
                    type: {
                        name: "String"
                    }
                }, storageAccountAccessKey: {
                    serializedName: "properties.storageAccountAccessKey",
                    type: {
                        name: "String"
                    }
                }, retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var RestorePoint = {
        serializedName: "RestorePoint",
        type: {
            name: "Composite",
            className: "RestorePoint",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, restorePointType: {
                    readOnly: true,
                    serializedName: "properties.restorePointType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CONTINUOUS",
                            "DISCRETE"
                        ]
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                }, restorePointCreationDate: {
                    readOnly: true,
                    serializedName: "properties.restorePointCreationDate",
                    type: {
                        name: "DateTime"
                    }
                }, restorePointLabel: {
                    readOnly: true,
                    serializedName: "properties.restorePointLabel",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CreateDatabaseRestorePointDefinition = {
        serializedName: "CreateDatabaseRestorePointDefinition",
        type: {
            name: "Composite",
            className: "CreateDatabaseRestorePointDefinition",
            modelProperties: {
                restorePointLabel: {
                    required: true,
                    serializedName: "restorePointLabel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseOperation = {
        serializedName: "DatabaseOperation",
        type: {
            name: "Composite",
            className: "DatabaseOperation",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationFriendlyName: {
                    readOnly: true,
                    serializedName: "properties.operationFriendlyName",
                    type: {
                        name: "String"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorDescription: {
                    readOnly: true,
                    serializedName: "properties.errorDescription",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, isUserError: {
                    readOnly: true,
                    serializedName: "properties.isUserError",
                    type: {
                        name: "Boolean"
                    }
                }, estimatedCompletionTime: {
                    readOnly: true,
                    serializedName: "properties.estimatedCompletionTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isCancellable: {
                    readOnly: true,
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ElasticPoolOperation = {
        serializedName: "ElasticPoolOperation",
        type: {
            name: "Composite",
            className: "ElasticPoolOperation",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { elasticPoolName: {
                    readOnly: true,
                    serializedName: "properties.elasticPoolName",
                    type: {
                        name: "String"
                    }
                }, operation: {
                    readOnly: true,
                    serializedName: "properties.operation",
                    type: {
                        name: "String"
                    }
                }, operationFriendlyName: {
                    readOnly: true,
                    serializedName: "properties.operationFriendlyName",
                    type: {
                        name: "String"
                    }
                }, percentComplete: {
                    readOnly: true,
                    serializedName: "properties.percentComplete",
                    type: {
                        name: "Number"
                    }
                }, serverName: {
                    readOnly: true,
                    serializedName: "properties.serverName",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, errorCode: {
                    readOnly: true,
                    serializedName: "properties.errorCode",
                    type: {
                        name: "Number"
                    }
                }, errorDescription: {
                    readOnly: true,
                    serializedName: "properties.errorDescription",
                    type: {
                        name: "String"
                    }
                }, errorSeverity: {
                    readOnly: true,
                    serializedName: "properties.errorSeverity",
                    type: {
                        name: "Number"
                    }
                }, isUserError: {
                    readOnly: true,
                    serializedName: "properties.isUserError",
                    type: {
                        name: "Boolean"
                    }
                }, estimatedCompletionTime: {
                    readOnly: true,
                    serializedName: "properties.estimatedCompletionTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isCancellable: {
                    readOnly: true,
                    serializedName: "properties.isCancellable",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MaxSizeCapability = {
        serializedName: "MaxSizeCapability",
        type: {
            name: "Composite",
            className: "MaxSizeCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSizeCapability = {
        serializedName: "LogSizeCapability",
        type: {
            name: "Composite",
            className: "LogSizeCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MaxSizeRangeCapability = {
        serializedName: "MaxSizeRangeCapability",
        type: {
            name: "Composite",
            className: "MaxSizeRangeCapability",
            modelProperties: {
                minValue: {
                    readOnly: true,
                    serializedName: "minValue",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                maxValue: {
                    readOnly: true,
                    serializedName: "maxValue",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                scaleSize: {
                    readOnly: true,
                    serializedName: "scaleSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                logSize: {
                    readOnly: true,
                    serializedName: "logSize",
                    type: {
                        name: "Composite",
                        className: "LogSizeCapability"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PerformanceLevelCapability = {
        serializedName: "PerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "PerformanceLevelCapability",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LicenseTypeCapability = {
        serializedName: "LicenseTypeCapability",
        type: {
            name: "Composite",
            className: "LicenseTypeCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceObjectiveCapability = {
        serializedName: "ServiceObjectiveCapability",
        type: {
            name: "Composite",
            className: "ServiceObjectiveCapability",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedMaxSizes: {
                    readOnly: true,
                    serializedName: "supportedMaxSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                performanceLevel: {
                    readOnly: true,
                    serializedName: "performanceLevel",
                    type: {
                        name: "Composite",
                        className: "PerformanceLevelCapability"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                supportedLicenseTypes: {
                    readOnly: true,
                    serializedName: "supportedLicenseTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LicenseTypeCapability"
                            }
                        }
                    }
                },
                includedMaxSize: {
                    readOnly: true,
                    serializedName: "includedMaxSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EditionCapability = {
        serializedName: "EditionCapability",
        type: {
            name: "Composite",
            className: "EditionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedServiceLevelObjectives: {
                    readOnly: true,
                    serializedName: "supportedServiceLevelObjectives",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceObjectiveCapability"
                            }
                        }
                    }
                },
                zoneRedundant: {
                    readOnly: true,
                    serializedName: "zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerDatabaseMinPerformanceLevelCapability = {
        serializedName: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerDatabaseMaxPerformanceLevelCapability = {
        serializedName: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
            modelProperties: {
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                supportedPerDatabaseMinPerformanceLevels: {
                    readOnly: true,
                    serializedName: "supportedPerDatabaseMinPerformanceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerformanceLevelCapability = {
        serializedName: "ElasticPoolPerformanceLevelCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolPerformanceLevelCapability",
            modelProperties: {
                performanceLevel: {
                    readOnly: true,
                    serializedName: "performanceLevel",
                    type: {
                        name: "Composite",
                        className: "PerformanceLevelCapability"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                supportedLicenseTypes: {
                    readOnly: true,
                    serializedName: "supportedLicenseTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LicenseTypeCapability"
                            }
                        }
                    }
                },
                maxDatabaseCount: {
                    readOnly: true,
                    serializedName: "maxDatabaseCount",
                    type: {
                        name: "Number"
                    }
                },
                includedMaxSize: {
                    readOnly: true,
                    serializedName: "includedMaxSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                supportedMaxSizes: {
                    readOnly: true,
                    serializedName: "supportedMaxSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                supportedPerDatabaseMaxSizes: {
                    readOnly: true,
                    serializedName: "supportedPerDatabaseMaxSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                supportedPerDatabaseMaxPerformanceLevels: {
                    readOnly: true,
                    serializedName: "supportedPerDatabaseMaxPerformanceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolEditionCapability = {
        serializedName: "ElasticPoolEditionCapability",
        type: {
            name: "Composite",
            className: "ElasticPoolEditionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedElasticPoolPerformanceLevels: {
                    readOnly: true,
                    serializedName: "supportedElasticPoolPerformanceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolPerformanceLevelCapability"
                            }
                        }
                    }
                },
                zoneRedundant: {
                    readOnly: true,
                    serializedName: "zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerVersionCapability = {
        serializedName: "ServerVersionCapability",
        type: {
            name: "Composite",
            className: "ServerVersionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedEditions: {
                    readOnly: true,
                    serializedName: "supportedEditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EditionCapability"
                            }
                        }
                    }
                },
                supportedElasticPoolEditions: {
                    readOnly: true,
                    serializedName: "supportedElasticPoolEditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolEditionCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceVcoresCapability = {
        serializedName: "ManagedInstanceVcoresCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceVcoresCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceFamilyCapability = {
        serializedName: "ManagedInstanceFamilyCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceFamilyCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                supportedLicenseTypes: {
                    readOnly: true,
                    serializedName: "supportedLicenseTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LicenseTypeCapability"
                            }
                        }
                    }
                },
                supportedVcoresValues: {
                    readOnly: true,
                    serializedName: "supportedVcoresValues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceVcoresCapability"
                            }
                        }
                    }
                },
                includedMaxSize: {
                    readOnly: true,
                    serializedName: "includedMaxSize",
                    type: {
                        name: "Composite",
                        className: "MaxSizeCapability"
                    }
                },
                supportedStorageSizes: {
                    readOnly: true,
                    serializedName: "supportedStorageSizes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MaxSizeRangeCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceEditionCapability = {
        serializedName: "ManagedInstanceEditionCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceEditionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedFamilies: {
                    readOnly: true,
                    serializedName: "supportedFamilies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceFamilyCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceVersionCapability = {
        serializedName: "ManagedInstanceVersionCapability",
        type: {
            name: "Composite",
            className: "ManagedInstanceVersionCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedEditions: {
                    readOnly: true,
                    serializedName: "supportedEditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceEditionCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LocationCapabilities = {
        serializedName: "LocationCapabilities",
        type: {
            name: "Composite",
            className: "LocationCapabilities",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                supportedServerVersions: {
                    readOnly: true,
                    serializedName: "supportedServerVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerVersionCapability"
                            }
                        }
                    }
                },
                supportedManagedInstanceVersions: {
                    readOnly: true,
                    serializedName: "supportedManagedInstanceVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceVersionCapability"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Visible",
                            "Available",
                            "Default",
                            "Disabled"
                        ]
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Database = {
        serializedName: "Database",
        type: {
            name: "Composite",
            className: "Database",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, managedBy: {
                    readOnly: true,
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                }, collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                }, maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, sampleName: {
                    serializedName: "properties.sampleName",
                    type: {
                        name: "String"
                    }
                }, elasticPoolId: {
                    serializedName: "properties.elasticPoolId",
                    type: {
                        name: "String"
                    }
                }, sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, databaseId: {
                    readOnly: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "Uuid"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, currentServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.currentServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, requestedServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.requestedServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                }, defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                }, failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                }, restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                }, sourceDatabaseDeletionDate: {
                    serializedName: "properties.sourceDatabaseDeletionDate",
                    type: {
                        name: "DateTime"
                    }
                }, recoveryServicesRecoveryPointId: {
                    serializedName: "properties.recoveryServicesRecoveryPointId",
                    type: {
                        name: "String"
                    }
                }, longTermRetentionBackupResourceId: {
                    serializedName: "properties.longTermRetentionBackupResourceId",
                    type: {
                        name: "String"
                    }
                }, recoverableDatabaseId: {
                    serializedName: "properties.recoverableDatabaseId",
                    type: {
                        name: "String"
                    }
                }, restorableDroppedDatabaseId: {
                    serializedName: "properties.restorableDroppedDatabaseId",
                    type: {
                        name: "String"
                    }
                }, catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                }, zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, maxLogSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.maxLogSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                }, readScale: {
                    serializedName: "properties.readScale",
                    type: {
                        name: "String"
                    }
                }, currentSku: {
                    readOnly: true,
                    serializedName: "properties.currentSku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var DatabaseUpdate = {
        serializedName: "DatabaseUpdate",
        type: {
            name: "Composite",
            className: "DatabaseUpdate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                createMode: {
                    serializedName: "properties.createMode",
                    type: {
                        name: "String"
                    }
                },
                collation: {
                    serializedName: "properties.collation",
                    type: {
                        name: "String"
                    }
                },
                maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                sampleName: {
                    serializedName: "properties.sampleName",
                    type: {
                        name: "String"
                    }
                },
                elasticPoolId: {
                    serializedName: "properties.elasticPoolId",
                    type: {
                        name: "String"
                    }
                },
                sourceDatabaseId: {
                    serializedName: "properties.sourceDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                databaseId: {
                    readOnly: true,
                    serializedName: "properties.databaseId",
                    type: {
                        name: "Uuid"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                currentServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.currentServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                },
                requestedServiceObjectiveName: {
                    readOnly: true,
                    serializedName: "properties.requestedServiceObjectiveName",
                    type: {
                        name: "String"
                    }
                },
                defaultSecondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.defaultSecondaryLocation",
                    type: {
                        name: "String"
                    }
                },
                failoverGroupId: {
                    readOnly: true,
                    serializedName: "properties.failoverGroupId",
                    type: {
                        name: "String"
                    }
                },
                restorePointInTime: {
                    serializedName: "properties.restorePointInTime",
                    type: {
                        name: "DateTime"
                    }
                },
                sourceDatabaseDeletionDate: {
                    serializedName: "properties.sourceDatabaseDeletionDate",
                    type: {
                        name: "DateTime"
                    }
                },
                recoveryServicesRecoveryPointId: {
                    serializedName: "properties.recoveryServicesRecoveryPointId",
                    type: {
                        name: "String"
                    }
                },
                longTermRetentionBackupResourceId: {
                    serializedName: "properties.longTermRetentionBackupResourceId",
                    type: {
                        name: "String"
                    }
                },
                recoverableDatabaseId: {
                    serializedName: "properties.recoverableDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                restorableDroppedDatabaseId: {
                    serializedName: "properties.restorableDroppedDatabaseId",
                    type: {
                        name: "String"
                    }
                },
                catalogCollation: {
                    serializedName: "properties.catalogCollation",
                    type: {
                        name: "String"
                    }
                },
                zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                },
                maxLogSizeBytes: {
                    readOnly: true,
                    serializedName: "properties.maxLogSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                earliestRestoreDate: {
                    readOnly: true,
                    serializedName: "properties.earliestRestoreDate",
                    type: {
                        name: "DateTime"
                    }
                },
                readScale: {
                    serializedName: "properties.readScale",
                    type: {
                        name: "String"
                    }
                },
                currentSku: {
                    readOnly: true,
                    serializedName: "properties.currentSku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceMoveDefinition = {
        serializedName: "ResourceMoveDefinition",
        type: {
            name: "Composite",
            className: "ResourceMoveDefinition",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolPerDatabaseSettings = {
        serializedName: "ElasticPoolPerDatabaseSettings",
        type: {
            name: "Composite",
            className: "ElasticPoolPerDatabaseSettings",
            modelProperties: {
                minCapacity: {
                    serializedName: "minCapacity",
                    type: {
                        name: "Number"
                    }
                },
                maxCapacity: {
                    serializedName: "maxCapacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ElasticPool = {
        serializedName: "ElasticPool",
        type: {
            name: "Composite",
            className: "ElasticPool",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                }, perDatabaseSettings: {
                    serializedName: "properties.perDatabaseSettings",
                    type: {
                        name: "Composite",
                        className: "ElasticPoolPerDatabaseSettings"
                    }
                }, zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ElasticPoolUpdate = {
        serializedName: "ElasticPoolUpdate",
        type: {
            name: "Composite",
            className: "ElasticPoolUpdate",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                maxSizeBytes: {
                    serializedName: "properties.maxSizeBytes",
                    type: {
                        name: "Number"
                    }
                },
                perDatabaseSettings: {
                    serializedName: "properties.perDatabaseSettings",
                    type: {
                        name: "Composite",
                        className: "ElasticPoolPerDatabaseSettings"
                    }
                },
                zoneRedundant: {
                    serializedName: "properties.zoneRedundant",
                    type: {
                        name: "Boolean"
                    }
                },
                licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VulnerabilityAssessmentScanError = {
        serializedName: "VulnerabilityAssessmentScanError",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentScanError",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VulnerabilityAssessmentScanRecord = {
        serializedName: "VulnerabilityAssessmentScanRecord",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentScanRecord",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { scanId: {
                    readOnly: true,
                    serializedName: "properties.scanId",
                    type: {
                        name: "String"
                    }
                }, triggerType: {
                    readOnly: true,
                    serializedName: "properties.triggerType",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, errors: {
                    readOnly: true,
                    serializedName: "properties.errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VulnerabilityAssessmentScanError"
                            }
                        }
                    }
                }, storageContainerPath: {
                    readOnly: true,
                    serializedName: "properties.storageContainerPath",
                    type: {
                        name: "String"
                    }
                }, numberOfFailedSecurityChecks: {
                    readOnly: true,
                    serializedName: "properties.numberOfFailedSecurityChecks",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var DatabaseVulnerabilityAssessmentScansExport = {
        serializedName: "DatabaseVulnerabilityAssessmentScansExport",
        type: {
            name: "Composite",
            className: "DatabaseVulnerabilityAssessmentScansExport",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { exportedReportLocation: {
                    readOnly: true,
                    serializedName: "properties.exportedReportLocation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InstanceFailoverGroupReadWriteEndpoint = {
        serializedName: "InstanceFailoverGroupReadWriteEndpoint",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroupReadWriteEndpoint",
            modelProperties: {
                failoverPolicy: {
                    required: true,
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                },
                failoverWithDataLossGracePeriodMinutes: {
                    serializedName: "failoverWithDataLossGracePeriodMinutes",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var InstanceFailoverGroupReadOnlyEndpoint = {
        serializedName: "InstanceFailoverGroupReadOnlyEndpoint",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroupReadOnlyEndpoint",
            modelProperties: {
                failoverPolicy: {
                    serializedName: "failoverPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PartnerRegionInfo = {
        serializedName: "PartnerRegionInfo",
        type: {
            name: "Composite",
            className: "PartnerRegionInfo",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                replicationRole: {
                    readOnly: true,
                    serializedName: "replicationRole",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstancePairInfo = {
        serializedName: "ManagedInstancePairInfo",
        type: {
            name: "Composite",
            className: "ManagedInstancePairInfo",
            modelProperties: {
                primaryManagedInstanceId: {
                    serializedName: "primaryManagedInstanceId",
                    type: {
                        name: "String"
                    }
                },
                partnerManagedInstanceId: {
                    serializedName: "partnerManagedInstanceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstanceFailoverGroup = {
        serializedName: "InstanceFailoverGroup",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroup",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { readWriteEndpoint: {
                    required: true,
                    serializedName: "properties.readWriteEndpoint",
                    type: {
                        name: "Composite",
                        className: "InstanceFailoverGroupReadWriteEndpoint"
                    }
                }, readOnlyEndpoint: {
                    serializedName: "properties.readOnlyEndpoint",
                    type: {
                        name: "Composite",
                        className: "InstanceFailoverGroupReadOnlyEndpoint"
                    }
                }, replicationRole: {
                    readOnly: true,
                    serializedName: "properties.replicationRole",
                    type: {
                        name: "String"
                    }
                }, replicationState: {
                    readOnly: true,
                    serializedName: "properties.replicationState",
                    type: {
                        name: "String"
                    }
                }, partnerRegions: {
                    required: true,
                    serializedName: "properties.partnerRegions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PartnerRegionInfo"
                            }
                        }
                    }
                }, managedInstancePairs: {
                    required: true,
                    serializedName: "properties.managedInstancePairs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstancePairInfo"
                            }
                        }
                    }
                } })
        }
    };
    var BackupShortTermRetentionPolicy = {
        serializedName: "BackupShortTermRetentionPolicy",
        type: {
            name: "Composite",
            className: "BackupShortTermRetentionPolicy",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { retentionDays: {
                    serializedName: "properties.retentionDays",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var TdeCertificate = {
        serializedName: "TdeCertificate",
        type: {
            name: "Composite",
            className: "TdeCertificate",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { privateBlob: {
                    required: true,
                    serializedName: "properties.privateBlob",
                    type: {
                        name: "String"
                    }
                }, certPassword: {
                    serializedName: "properties.certPassword",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ManagedInstanceKey = {
        serializedName: "ManagedInstanceKey",
        type: {
            name: "Composite",
            className: "ManagedInstanceKey",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ManagedInstanceEncryptionProtector = {
        serializedName: "ManagedInstanceEncryptionProtector",
        type: {
            name: "Composite",
            className: "ManagedInstanceEncryptionProtector",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, serverKeyName: {
                    serializedName: "properties.serverKeyName",
                    type: {
                        name: "String"
                    }
                }, serverKeyType: {
                    required: true,
                    serializedName: "properties.serverKeyType",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    readOnly: true,
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RecoverableDatabaseListResult = {
        serializedName: "RecoverableDatabaseListResult",
        type: {
            name: "Composite",
            className: "RecoverableDatabaseListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecoverableDatabase"
                            }
                        }
                    }
                }
            }
        }
    };
    var RestorableDroppedDatabaseListResult = {
        serializedName: "RestorableDroppedDatabaseListResult",
        type: {
            name: "Composite",
            className: "RestorableDroppedDatabaseListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorableDroppedDatabase"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerListResult = {
        serializedName: "ServerListResult",
        type: {
            name: "Composite",
            className: "ServerListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Server"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataMaskingRuleListResult = {
        serializedName: "DataMaskingRuleListResult",
        type: {
            name: "Composite",
            className: "DataMaskingRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataMaskingRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var FirewallRuleListResult = {
        serializedName: "FirewallRuleListResult",
        type: {
            name: "Composite",
            className: "FirewallRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var GeoBackupPolicyListResult = {
        serializedName: "GeoBackupPolicyListResult",
        type: {
            name: "Composite",
            className: "GeoBackupPolicyListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GeoBackupPolicy"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricListResult = {
        serializedName: "MetricListResult",
        type: {
            name: "Composite",
            className: "MetricListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Metric"
                            }
                        }
                    }
                }
            }
        }
    };
    var MetricDefinitionListResult = {
        serializedName: "MetricDefinitionListResult",
        type: {
            name: "Composite",
            className: "MetricDefinitionListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseListResult = {
        serializedName: "DatabaseListResult",
        type: {
            name: "Composite",
            className: "DatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Database"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolListResult = {
        serializedName: "ElasticPoolListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPool"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecommendedElasticPoolListResult = {
        serializedName: "RecommendedElasticPoolListResult",
        type: {
            name: "Composite",
            className: "RecommendedElasticPoolListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecommendedElasticPool"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecommendedElasticPoolListMetricsResult = {
        serializedName: "RecommendedElasticPoolListMetricsResult",
        type: {
            name: "Composite",
            className: "RecommendedElasticPoolListMetricsResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecommendedElasticPoolMetric"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReplicationLinkListResult = {
        serializedName: "ReplicationLinkListResult",
        type: {
            name: "Composite",
            className: "ReplicationLinkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReplicationLink"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerAdministratorListResult = {
        serializedName: "ServerAdministratorListResult",
        type: {
            name: "Composite",
            className: "ServerAdministratorListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerAzureADAdministrator"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerCommunicationLinkListResult = {
        serializedName: "ServerCommunicationLinkListResult",
        type: {
            name: "Composite",
            className: "ServerCommunicationLinkListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerCommunicationLink"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceObjectiveListResult = {
        serializedName: "ServiceObjectiveListResult",
        type: {
            name: "Composite",
            className: "ServiceObjectiveListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceObjective"
                            }
                        }
                    }
                }
            }
        }
    };
    var ElasticPoolActivityListResult = {
        serializedName: "ElasticPoolActivityListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolActivityListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolActivity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ElasticPoolDatabaseActivityListResult = {
        serializedName: "ElasticPoolDatabaseActivityListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolDatabaseActivityListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolDatabaseActivity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceTierAdvisorListResult = {
        serializedName: "ServiceTierAdvisorListResult",
        type: {
            name: "Composite",
            className: "ServiceTierAdvisorListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceTierAdvisor"
                            }
                        }
                    }
                }
            }
        }
    };
    var TransparentDataEncryptionActivityListResult = {
        serializedName: "TransparentDataEncryptionActivityListResult",
        type: {
            name: "Composite",
            className: "TransparentDataEncryptionActivityListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TransparentDataEncryptionActivity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServerUsageListResult = {
        serializedName: "ServerUsageListResult",
        type: {
            name: "Composite",
            className: "ServerUsageListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseUsageListResult = {
        serializedName: "DatabaseUsageListResult",
        type: {
            name: "Composite",
            className: "DatabaseUsageListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseUsage"
                            }
                        }
                    }
                }
            }
        }
    };
    var EncryptionProtectorListResult = {
        serializedName: "EncryptionProtectorListResult",
        type: {
            name: "Composite",
            className: "EncryptionProtectorListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EncryptionProtector"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverGroupListResult = {
        serializedName: "FailoverGroupListResult",
        type: {
            name: "Composite",
            className: "FailoverGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FailoverGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceListResult = {
        serializedName: "ManagedInstanceListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstance"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerKeyListResult = {
        serializedName: "ServerKeyListResult",
        type: {
            name: "Composite",
            className: "ServerKeyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerKey"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncAgentListResult = {
        serializedName: "SyncAgentListResult",
        type: {
            name: "Composite",
            className: "SyncAgentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncAgent"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncAgentLinkedDatabaseListResult = {
        serializedName: "SyncAgentLinkedDatabaseListResult",
        type: {
            name: "Composite",
            className: "SyncAgentLinkedDatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncAgentLinkedDatabase"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncDatabaseIdListResult = {
        serializedName: "SyncDatabaseIdListResult",
        type: {
            name: "Composite",
            className: "SyncDatabaseIdListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncDatabaseIdProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncFullSchemaPropertiesListResult = {
        serializedName: "SyncFullSchemaPropertiesListResult",
        type: {
            name: "Composite",
            className: "SyncFullSchemaPropertiesListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncFullSchemaProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupLogListResult = {
        serializedName: "SyncGroupLogListResult",
        type: {
            name: "Composite",
            className: "SyncGroupLogListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroupLogProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncGroupListResult = {
        serializedName: "SyncGroupListResult",
        type: {
            name: "Composite",
            className: "SyncGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SyncMemberListResult = {
        serializedName: "SyncMemberListResult",
        type: {
            name: "Composite",
            className: "SyncMemberListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncMember"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubscriptionUsageListResult = {
        serializedName: "SubscriptionUsageListResult",
        type: {
            name: "Composite",
            className: "SubscriptionUsageListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubscriptionUsage"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRuleListResult = {
        serializedName: "VirtualNetworkRuleListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobAgentListResult = {
        serializedName: "JobAgentListResult",
        type: {
            name: "Composite",
            className: "JobAgentListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobAgent"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobCredentialListResult = {
        serializedName: "JobCredentialListResult",
        type: {
            name: "Composite",
            className: "JobCredentialListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobCredential"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobExecutionListResult = {
        serializedName: "JobExecutionListResult",
        type: {
            name: "Composite",
            className: "JobExecutionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobExecution"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobListResult = {
        serializedName: "JobListResult",
        type: {
            name: "Composite",
            className: "JobListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Job"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStepListResult = {
        serializedName: "JobStepListResult",
        type: {
            name: "Composite",
            className: "JobStepListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobStep"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobTargetGroupListResult = {
        serializedName: "JobTargetGroupListResult",
        type: {
            name: "Composite",
            className: "JobTargetGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobTargetGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobVersionListResult = {
        serializedName: "JobVersionListResult",
        type: {
            name: "Composite",
            className: "JobVersionListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LongTermRetentionBackupListResult = {
        serializedName: "LongTermRetentionBackupListResult",
        type: {
            name: "Composite",
            className: "LongTermRetentionBackupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LongTermRetentionBackup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedDatabaseListResult = {
        serializedName: "ManagedDatabaseListResult",
        type: {
            name: "Composite",
            className: "ManagedDatabaseListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedDatabase"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServerDnsAliasListResult = {
        serializedName: "ServerDnsAliasListResult",
        type: {
            name: "Composite",
            className: "ServerDnsAliasListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServerDnsAlias"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestorePointListResult = {
        serializedName: "RestorePointListResult",
        type: {
            name: "Composite",
            className: "RestorePointListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestorePoint"
                            }
                        }
                    }
                }
            }
        }
    };
    var DatabaseOperationListResult = {
        serializedName: "DatabaseOperationListResult",
        type: {
            name: "Composite",
            className: "DatabaseOperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ElasticPoolOperationListResult = {
        serializedName: "ElasticPoolOperationListResult",
        type: {
            name: "Composite",
            className: "ElasticPoolOperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ElasticPoolOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VulnerabilityAssessmentScanRecordListResult = {
        serializedName: "VulnerabilityAssessmentScanRecordListResult",
        type: {
            name: "Composite",
            className: "VulnerabilityAssessmentScanRecordListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VulnerabilityAssessmentScanRecord"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstanceFailoverGroupListResult = {
        serializedName: "InstanceFailoverGroupListResult",
        type: {
            name: "Composite",
            className: "InstanceFailoverGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceFailoverGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackupShortTermRetentionPolicyListResult = {
        serializedName: "BackupShortTermRetentionPolicyListResult",
        type: {
            name: "Composite",
            className: "BackupShortTermRetentionPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupShortTermRetentionPolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceKeyListResult = {
        serializedName: "ManagedInstanceKeyListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceKeyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceKey"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedInstanceEncryptionProtectorListResult = {
        serializedName: "ManagedInstanceEncryptionProtectorListResult",
        type: {
            name: "Composite",
            className: "ManagedInstanceEncryptionProtectorListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedInstanceEncryptionProtector"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ProxyResource: ProxyResource,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
        CheckNameAvailabilityResponse: CheckNameAvailabilityResponse,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExtensionRequest: ImportExtensionRequest,
        ImportExportResponse: ImportExportResponse,
        ExportRequest: ExportRequest,
        ImportRequest: ImportRequest,
        MetricValue: MetricValue,
        MetricName: MetricName,
        Metric: Metric,
        MetricAvailability: MetricAvailability,
        MetricDefinition: MetricDefinition,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        RecommendedElasticPool: RecommendedElasticPool,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        OperationImpact: OperationImpact,
        RecommendedIndex: RecommendedIndex,
        TransparentDataEncryption: TransparentDataEncryption,
        SloUsageMetric: SloUsageMetric,
        ServiceTierAdvisor: ServiceTierAdvisor,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        ServerUsage: ServerUsage,
        DatabaseUsage: DatabaseUsage,
        AutomaticTuningOptions: AutomaticTuningOptions,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        EncryptionProtector: EncryptionProtector,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        FailoverGroup: FailoverGroup,
        FailoverGroupUpdate: FailoverGroupUpdate,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ManagedInstance: ManagedInstance,
        ManagedInstanceUpdate: ManagedInstanceUpdate,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ServerKey: ServerKey,
        Server: Server,
        ServerUpdate: ServerUpdate,
        SyncAgent: SyncAgent,
        SyncAgentKeyProperties: SyncAgentKeyProperties,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncDatabaseIdProperties: SyncDatabaseIdProperties,
        SyncFullSchemaTableColumn: SyncFullSchemaTableColumn,
        SyncFullSchemaTable: SyncFullSchemaTable,
        SyncFullSchemaProperties: SyncFullSchemaProperties,
        SyncGroupLogProperties: SyncGroupLogProperties,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroup: SyncGroup,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        JobAgent: JobAgent,
        JobAgentUpdate: JobAgentUpdate,
        JobCredential: JobCredential,
        JobExecutionTarget: JobExecutionTarget,
        JobExecution: JobExecution,
        JobSchedule: JobSchedule,
        Job: Job,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobStep: JobStep,
        JobTarget: JobTarget,
        JobTargetGroup: JobTargetGroup,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        CompleteDatabaseRestoreDefinition: CompleteDatabaseRestoreDefinition,
        ManagedDatabase: ManagedDatabase,
        ManagedDatabaseUpdate: ManagedDatabaseUpdate,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerAutomaticTuning: ServerAutomaticTuning,
        ServerDnsAlias: ServerDnsAlias,
        ServerDnsAliasAcquisition: ServerDnsAliasAcquisition,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        CreateDatabaseRestorePointDefinition: CreateDatabaseRestorePointDefinition,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        MaxSizeCapability: MaxSizeCapability,
        LogSizeCapability: LogSizeCapability,
        MaxSizeRangeCapability: MaxSizeRangeCapability,
        PerformanceLevelCapability: PerformanceLevelCapability,
        LicenseTypeCapability: LicenseTypeCapability,
        ServiceObjectiveCapability: ServiceObjectiveCapability,
        EditionCapability: EditionCapability,
        ElasticPoolPerDatabaseMinPerformanceLevelCapability: ElasticPoolPerDatabaseMinPerformanceLevelCapability,
        ElasticPoolPerDatabaseMaxPerformanceLevelCapability: ElasticPoolPerDatabaseMaxPerformanceLevelCapability,
        ElasticPoolPerformanceLevelCapability: ElasticPoolPerformanceLevelCapability,
        ElasticPoolEditionCapability: ElasticPoolEditionCapability,
        ServerVersionCapability: ServerVersionCapability,
        ManagedInstanceVcoresCapability: ManagedInstanceVcoresCapability,
        ManagedInstanceFamilyCapability: ManagedInstanceFamilyCapability,
        ManagedInstanceEditionCapability: ManagedInstanceEditionCapability,
        ManagedInstanceVersionCapability: ManagedInstanceVersionCapability,
        LocationCapabilities: LocationCapabilities,
        Database: Database,
        DatabaseUpdate: DatabaseUpdate,
        ResourceMoveDefinition: ResourceMoveDefinition,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        ElasticPool: ElasticPool,
        ElasticPoolUpdate: ElasticPoolUpdate,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        InstanceFailoverGroup: InstanceFailoverGroup,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableDatabaseListResult: RecoverableDatabaseListResult,
        RestorableDroppedDatabaseListResult: RestorableDroppedDatabaseListResult,
        ServerListResult: ServerListResult,
        DataMaskingRuleListResult: DataMaskingRuleListResult,
        FirewallRuleListResult: FirewallRuleListResult,
        GeoBackupPolicyListResult: GeoBackupPolicyListResult,
        MetricListResult: MetricListResult,
        MetricDefinitionListResult: MetricDefinitionListResult,
        DatabaseListResult: DatabaseListResult,
        ElasticPoolListResult: ElasticPoolListResult,
        RecommendedElasticPoolListResult: RecommendedElasticPoolListResult,
        RecommendedElasticPoolListMetricsResult: RecommendedElasticPoolListMetricsResult,
        ReplicationLinkListResult: ReplicationLinkListResult,
        ServerAdministratorListResult: ServerAdministratorListResult,
        ServerCommunicationLinkListResult: ServerCommunicationLinkListResult,
        ServiceObjectiveListResult: ServiceObjectiveListResult,
        ElasticPoolActivityListResult: ElasticPoolActivityListResult,
        ElasticPoolDatabaseActivityListResult: ElasticPoolDatabaseActivityListResult,
        ServiceTierAdvisorListResult: ServiceTierAdvisorListResult,
        TransparentDataEncryptionActivityListResult: TransparentDataEncryptionActivityListResult,
        ServerUsageListResult: ServerUsageListResult,
        DatabaseUsageListResult: DatabaseUsageListResult,
        EncryptionProtectorListResult: EncryptionProtectorListResult,
        FailoverGroupListResult: FailoverGroupListResult,
        ManagedInstanceListResult: ManagedInstanceListResult,
        OperationListResult: OperationListResult,
        ServerKeyListResult: ServerKeyListResult,
        SyncAgentListResult: SyncAgentListResult,
        SyncAgentLinkedDatabaseListResult: SyncAgentLinkedDatabaseListResult,
        SyncDatabaseIdListResult: SyncDatabaseIdListResult,
        SyncFullSchemaPropertiesListResult: SyncFullSchemaPropertiesListResult,
        SyncGroupLogListResult: SyncGroupLogListResult,
        SyncGroupListResult: SyncGroupListResult,
        SyncMemberListResult: SyncMemberListResult,
        SubscriptionUsageListResult: SubscriptionUsageListResult,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        JobAgentListResult: JobAgentListResult,
        JobCredentialListResult: JobCredentialListResult,
        JobExecutionListResult: JobExecutionListResult,
        JobListResult: JobListResult,
        JobStepListResult: JobStepListResult,
        JobTargetGroupListResult: JobTargetGroupListResult,
        JobVersionListResult: JobVersionListResult,
        LongTermRetentionBackupListResult: LongTermRetentionBackupListResult,
        ManagedDatabaseListResult: ManagedDatabaseListResult,
        ServerDnsAliasListResult: ServerDnsAliasListResult,
        RestorePointListResult: RestorePointListResult,
        DatabaseOperationListResult: DatabaseOperationListResult,
        ElasticPoolOperationListResult: ElasticPoolOperationListResult,
        VulnerabilityAssessmentScanRecordListResult: VulnerabilityAssessmentScanRecordListResult,
        InstanceFailoverGroupListResult: InstanceFailoverGroupListResult,
        BackupShortTermRetentionPolicyListResult: BackupShortTermRetentionPolicyListResult,
        ManagedInstanceKeyListResult: ManagedInstanceKeyListResult,
        ManagedInstanceEncryptionProtectorListResult: ManagedInstanceEncryptionProtectorListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        RecoverableDatabase: RecoverableDatabase,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabaseListResult: RecoverableDatabaseListResult,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var administratorName = {
        parameterPath: "administratorName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "administratorName",
            defaultValue: 'activeDirectory',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2014-04-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-05-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-10-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-03-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var backupName = {
        parameterPath: "backupName",
        mapper: {
            required: true,
            serializedName: "backupName",
            type: {
                name: "String"
            }
        }
    };
    var baselineName = {
        parameterPath: "baselineName",
        mapper: {
            required: true,
            serializedName: "baselineName",
            type: {
                name: "Enum",
                allowedValues: [
                    "master",
                    "default"
                ]
            }
        }
    };
    var blobAuditingPolicyName = {
        parameterPath: "blobAuditingPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "blobAuditingPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var communicationLinkName = {
        parameterPath: "communicationLinkName",
        mapper: {
            required: true,
            serializedName: "communicationLinkName",
            type: {
                name: "String"
            }
        }
    };
    var connectionPolicyName = {
        parameterPath: "connectionPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "connectionPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var continuationToken = {
        parameterPath: [
            "options",
            "continuationToken"
        ],
        mapper: {
            serializedName: "continuationToken",
            type: {
                name: "String"
            }
        }
    };
    var createTimeMax = {
        parameterPath: [
            "options",
            "createTimeMax"
        ],
        mapper: {
            serializedName: "createTimeMax",
            type: {
                name: "DateTime"
            }
        }
    };
    var createTimeMin = {
        parameterPath: [
            "options",
            "createTimeMin"
        ],
        mapper: {
            serializedName: "createTimeMin",
            type: {
                name: "DateTime"
            }
        }
    };
    var credentialName = {
        parameterPath: "credentialName",
        mapper: {
            required: true,
            serializedName: "credentialName",
            type: {
                name: "String"
            }
        }
    };
    var databaseName = {
        parameterPath: "databaseName",
        mapper: {
            required: true,
            serializedName: "databaseName",
            type: {
                name: "String"
            }
        }
    };
    var databaseState = {
        parameterPath: [
            "options",
            "databaseState"
        ],
        mapper: {
            serializedName: "databaseState",
            type: {
                name: "String"
            }
        }
    };
    var dataMaskingPolicyName = {
        parameterPath: "dataMaskingPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "dataMaskingPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var dataMaskingRuleName = {
        parameterPath: "dataMaskingRuleName",
        mapper: {
            required: true,
            serializedName: "dataMaskingRuleName",
            type: {
                name: "String"
            }
        }
    };
    var dnsAliasName = {
        parameterPath: "dnsAliasName",
        mapper: {
            required: true,
            serializedName: "dnsAliasName",
            type: {
                name: "String"
            }
        }
    };
    var elasticPoolName = {
        parameterPath: "elasticPoolName",
        mapper: {
            required: true,
            serializedName: "elasticPoolName",
            type: {
                name: "String"
            }
        }
    };
    var encryptionProtectorName = {
        parameterPath: "encryptionProtectorName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "encryptionProtectorName",
            defaultValue: 'current',
            type: {
                name: "String"
            }
        }
    };
    var endTime = {
        parameterPath: "endTime",
        mapper: {
            required: true,
            serializedName: "endTime",
            type: {
                name: "String"
            }
        }
    };
    var endTimeMax = {
        parameterPath: [
            "options",
            "endTimeMax"
        ],
        mapper: {
            serializedName: "endTimeMax",
            type: {
                name: "DateTime"
            }
        }
    };
    var endTimeMin = {
        parameterPath: [
            "options",
            "endTimeMin"
        ],
        mapper: {
            serializedName: "endTimeMin",
            type: {
                name: "DateTime"
            }
        }
    };
    var extensionName = {
        parameterPath: "extensionName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "extensionName",
            defaultValue: 'import',
            type: {
                name: "String"
            }
        }
    };
    var failoverGroupName = {
        parameterPath: "failoverGroupName",
        mapper: {
            required: true,
            serializedName: "failoverGroupName",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var firewallRuleName = {
        parameterPath: "firewallRuleName",
        mapper: {
            required: true,
            serializedName: "firewallRuleName",
            type: {
                name: "String"
            }
        }
    };
    var geoBackupPolicyName = {
        parameterPath: "geoBackupPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "geoBackupPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var include = {
        parameterPath: [
            "options",
            "include"
        ],
        mapper: {
            serializedName: "include",
            type: {
                name: "String"
            }
        }
    };
    var isActive = {
        parameterPath: [
            "options",
            "isActive"
        ],
        mapper: {
            serializedName: "isActive",
            type: {
                name: "Boolean"
            }
        }
    };
    var jobAgentName = {
        parameterPath: "jobAgentName",
        mapper: {
            required: true,
            serializedName: "jobAgentName",
            type: {
                name: "String"
            }
        }
    };
    var jobExecutionId = {
        parameterPath: "jobExecutionId",
        mapper: {
            required: true,
            serializedName: "jobExecutionId",
            type: {
                name: "Uuid"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var jobVersion = {
        parameterPath: "jobVersion",
        mapper: {
            required: true,
            serializedName: "jobVersion",
            type: {
                name: "Number"
            }
        }
    };
    var keyName = {
        parameterPath: "keyName",
        mapper: {
            required: true,
            serializedName: "keyName",
            type: {
                name: "String"
            }
        }
    };
    var linkId = {
        parameterPath: "linkId",
        mapper: {
            required: true,
            serializedName: "linkId",
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var longTermRetentionDatabaseName = {
        parameterPath: "longTermRetentionDatabaseName",
        mapper: {
            required: true,
            serializedName: "longTermRetentionDatabaseName",
            type: {
                name: "String"
            }
        }
    };
    var longTermRetentionServerName = {
        parameterPath: "longTermRetentionServerName",
        mapper: {
            required: true,
            serializedName: "longTermRetentionServerName",
            type: {
                name: "String"
            }
        }
    };
    var managedInstanceName = {
        parameterPath: "managedInstanceName",
        mapper: {
            required: true,
            serializedName: "managedInstanceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var onlyLatestPerDatabase = {
        parameterPath: [
            "options",
            "onlyLatestPerDatabase"
        ],
        mapper: {
            serializedName: "onlyLatestPerDatabase",
            type: {
                name: "Boolean"
            }
        }
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "Uuid"
            }
        }
    };
    var policyName = {
        parameterPath: "policyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "policyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var recommendedElasticPoolName = {
        parameterPath: "recommendedElasticPoolName",
        mapper: {
            required: true,
            serializedName: "recommendedElasticPoolName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var restorableDroppededDatabaseId = {
        parameterPath: "restorableDroppededDatabaseId",
        mapper: {
            required: true,
            serializedName: "restorableDroppededDatabaseId",
            type: {
                name: "String"
            }
        }
    };
    var restorePointName = {
        parameterPath: "restorePointName",
        mapper: {
            required: true,
            serializedName: "restorePointName",
            type: {
                name: "String"
            }
        }
    };
    var ruleId = {
        parameterPath: "ruleId",
        mapper: {
            required: true,
            serializedName: "ruleId",
            type: {
                name: "String"
            }
        }
    };
    var scanId = {
        parameterPath: "scanId",
        mapper: {
            required: true,
            serializedName: "scanId",
            type: {
                name: "String"
            }
        }
    };
    var securityAlertPolicyName0 = {
        parameterPath: "securityAlertPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "securityAlertPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var securityAlertPolicyName1 = {
        parameterPath: "securityAlertPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "securityAlertPolicyName",
            defaultValue: 'Default',
            type: {
                name: "String"
            }
        }
    };
    var serverName = {
        parameterPath: "serverName",
        mapper: {
            required: true,
            serializedName: "serverName",
            type: {
                name: "String"
            }
        }
    };
    var serviceObjectiveName = {
        parameterPath: "serviceObjectiveName",
        mapper: {
            required: true,
            serializedName: "serviceObjectiveName",
            type: {
                name: "String"
            }
        }
    };
    var serviceTierAdvisorName = {
        parameterPath: "serviceTierAdvisorName",
        mapper: {
            required: true,
            serializedName: "serviceTierAdvisorName",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var startTime = {
        parameterPath: "startTime",
        mapper: {
            required: true,
            serializedName: "startTime",
            type: {
                name: "String"
            }
        }
    };
    var stepName = {
        parameterPath: "stepName",
        mapper: {
            required: true,
            serializedName: "stepName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var syncAgentName = {
        parameterPath: "syncAgentName",
        mapper: {
            required: true,
            serializedName: "syncAgentName",
            type: {
                name: "String"
            }
        }
    };
    var syncGroupName = {
        parameterPath: "syncGroupName",
        mapper: {
            required: true,
            serializedName: "syncGroupName",
            type: {
                name: "String"
            }
        }
    };
    var syncMemberName = {
        parameterPath: "syncMemberName",
        mapper: {
            required: true,
            serializedName: "syncMemberName",
            type: {
                name: "String"
            }
        }
    };
    var targetGroupName = {
        parameterPath: "targetGroupName",
        mapper: {
            required: true,
            serializedName: "targetGroupName",
            type: {
                name: "String"
            }
        }
    };
    var targetId = {
        parameterPath: "targetId",
        mapper: {
            required: true,
            serializedName: "targetId",
            type: {
                name: "Uuid"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var transparentDataEncryptionName = {
        parameterPath: "transparentDataEncryptionName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "transparentDataEncryptionName",
            defaultValue: 'current',
            type: {
                name: "String"
            }
        }
    };
    var type = {
        parameterPath: "type",
        mapper: {
            required: true,
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };
    var usageName = {
        parameterPath: "usageName",
        mapper: {
            required: true,
            serializedName: "usageName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkRuleName = {
        parameterPath: "virtualNetworkRuleName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkRuleName",
            type: {
                name: "String"
            }
        }
    };
    var vulnerabilityAssessmentName = {
        parameterPath: "vulnerabilityAssessmentName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "vulnerabilityAssessmentName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecoverableDatabases. */
    var RecoverableDatabases = /** @class */ (function () {
        /**
         * Create a RecoverableDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RecoverableDatabases(client) {
            this.client = client;
        }
        RecoverableDatabases.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        RecoverableDatabases.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec, callback);
        };
        return RecoverableDatabases;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases/{databaseName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByServerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoverableDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RestorableDroppedDatabaseListResult: RestorableDroppedDatabaseListResult,
        RecoverableDatabase: RecoverableDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorableDroppedDatabases. */
    var RestorableDroppedDatabases = /** @class */ (function () {
        /**
         * Create a RestorableDroppedDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RestorableDroppedDatabases(client) {
            this.client = client;
        }
        RestorableDroppedDatabases.prototype.get = function (resourceGroupName$$1, serverName$$1, restorableDroppededDatabaseId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                restorableDroppededDatabaseId: restorableDroppededDatabaseId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        RestorableDroppedDatabases.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$1, callback);
        };
        return RestorableDroppedDatabases;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases/{restorableDroppededDatabaseId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            restorableDroppededDatabaseId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByServerOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorableDroppedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
        CheckNameAvailabilityResponse: CheckNameAvailabilityResponse,
        CloudError: CloudError,
        ServerListResult: ServerListResult,
        Server: Server,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceIdentity: ResourceIdentity,
        ServerUpdate: ServerUpdate,
        ProxyResource: ProxyResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        Sku: Sku,
        ServerKey: ServerKey,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Servers. */
    var Servers = /** @class */ (function () {
        /**
         * Create a Servers.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Servers(client) {
            this.client = client;
        }
        Servers.prototype.checkNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Servers.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Servers.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Servers.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersCreateOrUpdateResponse>
         */
        Servers.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Servers.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServersUpdateResponse>
         */
        Servers.prototype.update = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates a server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested server resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Servers.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        Servers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        Servers.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Servers;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailabilityRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Server
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Server, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Server
            },
            201: {
                bodyMapper: Server
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Server
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ServerConnectionPolicy: ServerConnectionPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerConnectionPolicies. */
    var ServerConnectionPolicies = /** @class */ (function () {
        /**
         * Create a ServerConnectionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerConnectionPolicies(client) {
            this.client = client;
        }
        ServerConnectionPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ServerConnectionPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        return ServerConnectionPolicies;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/{connectionPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            connectionPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerConnectionPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerConnectionPolicy
            },
            201: {
                bodyMapper: ServerConnectionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/{connectionPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            connectionPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerConnectionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseThreatDetectionPolicies. */
    var DatabaseThreatDetectionPolicies = /** @class */ (function () {
        /**
         * Create a DatabaseThreatDetectionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseThreatDetectionPolicies(client) {
            this.client = client;
        }
        DatabaseThreatDetectionPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        DatabaseThreatDetectionPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        return DatabaseThreatDetectionPolicies;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            securityAlertPolicyName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            securityAlertPolicyName0
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseSecurityAlertPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseSecurityAlertPolicy
            },
            201: {
                bodyMapper: DatabaseSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        DataMaskingPolicy: DataMaskingPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DataMaskingPolicies. */
    var DataMaskingPolicies = /** @class */ (function () {
        /**
         * Create a DataMaskingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DataMaskingPolicies(client) {
            this.client = client;
        }
        DataMaskingPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        DataMaskingPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        return DataMaskingPolicies;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DataMaskingPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataMaskingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMaskingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        DataMaskingRule: DataMaskingRule,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        DataMaskingRuleListResult: DataMaskingRuleListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DataMaskingRules. */
    var DataMaskingRules = /** @class */ (function () {
        /**
         * Create a DataMaskingRules.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DataMaskingRules(client) {
            this.client = client;
        }
        DataMaskingRules.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, dataMaskingRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                dataMaskingRuleName: dataMaskingRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        DataMaskingRules.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec, callback);
        };
        return DataMaskingRules;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName,
            dataMaskingRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DataMaskingRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataMaskingRule
            },
            201: {
                bodyMapper: DataMaskingRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByDatabaseOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            dataMaskingPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMaskingRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        FirewallRule: FirewallRule,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        FirewallRuleListResult: FirewallRuleListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FirewallRules. */
    var FirewallRules = /** @class */ (function () {
        /**
         * Create a FirewallRules.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function FirewallRules(client) {
            this.client = client;
        }
        FirewallRules.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                firewallRuleName: firewallRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        FirewallRules.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        FirewallRules.prototype.get = function (resourceGroupName$$1, serverName$$1, firewallRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        FirewallRules.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$2, callback);
        };
        return FirewallRules;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FirewallRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            201: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listByServerOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        GeoBackupPolicy: GeoBackupPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        GeoBackupPolicyListResult: GeoBackupPolicyListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GeoBackupPolicies. */
    var GeoBackupPolicies = /** @class */ (function () {
        /**
         * Create a GeoBackupPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function GeoBackupPolicies(client) {
            this.client = client;
        }
        GeoBackupPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        GeoBackupPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        GeoBackupPolicies.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$1, callback);
        };
        return GeoBackupPolicies;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            geoBackupPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GeoBackupPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GeoBackupPolicy
            },
            201: {
                bodyMapper: GeoBackupPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            geoBackupPolicyName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GeoBackupPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByDatabaseOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GeoBackupPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        ImportRequest: ImportRequest,
        ExportRequest: ExportRequest,
        ImportExportResponse: ImportExportResponse,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ImportExtensionRequest: ImportExtensionRequest,
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        MetricDefinitionListResult: MetricDefinitionListResult,
        MetricDefinition: MetricDefinition,
        MetricAvailability: MetricAvailability,
        DatabaseListResult: DatabaseListResult,
        Database: Database,
        TrackedResource: TrackedResource,
        Sku: Sku,
        DatabaseUpdate: DatabaseUpdate,
        ResourceMoveDefinition: ResourceMoveDefinition,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Databases. */
    var Databases = /** @class */ (function () {
        /**
         * Create a Databases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Databases(client) {
            this.client = client;
        }
        /**
         * Imports a bacpac into a new database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesImportMethodResponse>
         */
        Databases.prototype.importMethod = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginImportMethod(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates an import operation that imports a bacpac into an existing database. The existing
         * database must be empty.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to import into
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesCreateImportOperationResponse>
         */
        Databases.prototype.createImportOperation = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginCreateImportOperation(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Exports a database to a bacpac.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be exported.
         * @param parameters The required parameters for exporting a database.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesExportMethodResponse>
         */
        Databases.prototype.exportMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginExportMethod(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.listMetrics = function (resourceGroupName$$1, serverName$$1, databaseName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec, callback);
        };
        Databases.prototype.listMetricDefinitions = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listMetricDefinitionsOperationSpec, callback);
        };
        /**
         * Upgrades a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be upgraded.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Databases.prototype.upgradeDataWarehouse = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.beginUpgradeDataWarehouse(resourceGroupName$$1, serverName$$1, databaseName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$3, callback);
        };
        Databases.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesCreateOrUpdateResponse>
         */
        Databases.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Databases.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, databaseName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesUpdateResponse>
         */
        Databases.prototype.update = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.listByElasticPool = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, listByElasticPoolOperationSpec, callback);
        };
        /**
         * Pauses a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be paused.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesPauseResponse>
         */
        Databases.prototype.pause = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.beginPause(resourceGroupName$$1, serverName$$1, databaseName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Resumes a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be resumed.
         * @param [options] The optional parameters
         * @returns Promise<Models.DatabasesResumeResponse>
         */
        Databases.prototype.resume = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.beginResume(resourceGroupName$$1, serverName$$1, databaseName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Databases.prototype.rename = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, renameOperationSpec, callback);
        };
        /**
         * Imports a bacpac into a new database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginImportMethod = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginImportMethodOperationSpec, options);
        };
        /**
         * Creates an import operation that imports a bacpac into an existing database. The existing
         * database must be empty.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to import into
         * @param parameters The required parameters for importing a Bacpac into a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginCreateImportOperation = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateImportOperationOperationSpec, options);
        };
        /**
         * Exports a database to a bacpac.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be exported.
         * @param parameters The required parameters for exporting a database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginExportMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginExportMethodOperationSpec, options);
        };
        /**
         * Upgrades a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be upgraded.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginUpgradeDataWarehouse = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, beginUpgradeDataWarehouseOperationSpec, options);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * Pauses a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be paused.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginPause = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, beginPauseOperationSpec, options);
        };
        /**
         * Resumes a database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database to be resumed.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Databases.prototype.beginResume = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, beginResumeOperationSpec, options);
        };
        Databases.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec, callback);
        };
        Databases.prototype.listByElasticPoolNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByElasticPoolNextOperationSpec, callback);
        };
        return Databases;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listMetricsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listMetricDefinitionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByServerOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByElasticPoolOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var renameOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ResourceMoveDefinition, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginImportMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ImportRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImportExportResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateImportOperationOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            extensionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ImportExtensionRequest, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ImportExportResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginExportMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExportRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImportExportResponse
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpgradeDataWarehouseOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Database, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Database
            },
            201: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginPauseOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginResumeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Database
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByServerNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByElasticPoolNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        MetricListResult: MetricListResult,
        Metric: Metric,
        MetricName: MetricName,
        MetricValue: MetricValue,
        CloudError: CloudError,
        MetricDefinitionListResult: MetricDefinitionListResult,
        MetricDefinition: MetricDefinition,
        MetricAvailability: MetricAvailability,
        ElasticPoolListResult: ElasticPoolListResult,
        ElasticPool: ElasticPool,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        ElasticPoolUpdate: ElasticPoolUpdate,
        ProxyResource: ProxyResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPools. */
    var ElasticPools = /** @class */ (function () {
        /**
         * Create a ElasticPools.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPools(client) {
            this.client = client;
        }
        ElasticPools.prototype.listMetrics = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                filter: filter,
                options: options
            }, listMetricsOperationSpec$1, callback);
        };
        ElasticPools.prototype.listMetricDefinitions = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, listMetricDefinitionsOperationSpec$1, callback);
        };
        ElasticPools.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$4, callback);
        };
        ElasticPools.prototype.get = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        /**
         * Creates or updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ElasticPoolsCreateOrUpdateResponse>
         */
        ElasticPools.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, elasticPoolName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ElasticPools.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool update parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.ElasticPoolsUpdateResponse>
         */
        ElasticPools.prototype.update = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, elasticPoolName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Updates an elastic pool.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param elasticPoolName The name of the elastic pool.
         * @param parameters The elastic pool update parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ElasticPools.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        ElasticPools.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$1, callback);
        };
        return ElasticPools;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listMetricsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listMetricDefinitionsOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/metricDefinitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MetricDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByServerOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            skip,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ElasticPool, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ElasticPool
            },
            201: {
                bodyMapper: ElasticPool
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ElasticPoolUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ElasticPool
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByServerNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        RecommendedElasticPool: RecommendedElasticPool,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        TrackedResource: TrackedResource,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        CloudError: CloudError,
        RecommendedElasticPoolListResult: RecommendedElasticPoolListResult,
        RecommendedElasticPoolListMetricsResult: RecommendedElasticPoolListMetricsResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RecommendedElasticPools. */
    var RecommendedElasticPools = /** @class */ (function () {
        /**
         * Create a RecommendedElasticPools.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RecommendedElasticPools(client) {
            this.client = client;
        }
        RecommendedElasticPools.prototype.get = function (resourceGroupName$$1, serverName$$1, recommendedElasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                recommendedElasticPoolName: recommendedElasticPoolName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        RecommendedElasticPools.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$5, callback);
        };
        RecommendedElasticPools.prototype.listMetrics = function (resourceGroupName$$1, serverName$$1, recommendedElasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                recommendedElasticPoolName: recommendedElasticPoolName$$1,
                options: options
            }, listMetricsOperationSpec$2, callback);
        };
        return RecommendedElasticPools;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            recommendedElasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendedElasticPool
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listByServerOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendedElasticPoolListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listMetricsOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/metrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            recommendedElasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecommendedElasticPoolListMetricsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ReplicationLink: ReplicationLink,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ReplicationLinkListResult: ReplicationLinkListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReplicationLinks. */
    var ReplicationLinks = /** @class */ (function () {
        /**
         * Create a ReplicationLinks.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ReplicationLinks(client) {
            this.client = client;
        }
        ReplicationLinks.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                linkId: linkId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ReplicationLinks.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                linkId: linkId$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationLinks.prototype.failover = function (resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options) {
            return this.beginFailover(resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database. This operation might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ReplicationLinks.prototype.failoverAllowDataLoss = function (resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options) {
            return this.beginFailoverAllowDataLoss(resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ReplicationLinks.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$2, callback);
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationLinks.prototype.beginFailover = function (resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                linkId: linkId$$1,
                options: options
            }, beginFailoverOperationSpec, options);
        };
        /**
         * Sets which replica database is primary by failing over from the current primary replica
         * database. This operation might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database that has the replication link to be failed over.
         * @param linkId The ID of the replication link to be failed over.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ReplicationLinks.prototype.beginFailoverAllowDataLoss = function (resourceGroupName$$1, serverName$$1, databaseName$$1, linkId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                linkId: linkId$$1,
                options: options
            }, beginFailoverAllowDataLossOperationSpec, options);
        };
        return ReplicationLinks;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationLink
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByDatabaseOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReplicationLinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginFailoverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/failover",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginFailoverAllowDataLossOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/forceFailoverAllowDataLoss",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            linkId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ServerAdministratorListResult: ServerAdministratorListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerAzureADAdministrators. */
    var ServerAzureADAdministrators = /** @class */ (function () {
        /**
         * Create a ServerAzureADAdministrators.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerAzureADAdministrators(client) {
            this.client = client;
        }
        /**
         * Creates a new Server Active Directory Administrator or updates an existing server Active
         * Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param properties The required parameters for creating or updating an Active Directory
         * Administrator.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerAzureADAdministratorsCreateOrUpdateResponse>
         */
        ServerAzureADAdministrators.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, properties, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, properties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing server Active Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerAzureADAdministratorsDeleteMethodResponse>
         */
        ServerAzureADAdministrators.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerAzureADAdministrators.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        ServerAzureADAdministrators.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$6, callback);
        };
        /**
         * Creates a new Server Active Directory Administrator or updates an existing server Active
         * Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param properties The required parameters for creating or updating an Active Directory
         * Administrator.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerAzureADAdministrators.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, properties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                properties: properties,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes an existing server Active Directory Administrator.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerAzureADAdministrators.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        return ServerAzureADAdministrators;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            administratorName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAzureADAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByServerOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAdministratorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            administratorName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "properties",
            mapper: __assign({}, ServerAzureADAdministrator, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerAzureADAdministrator
            },
            201: {
                bodyMapper: ServerAzureADAdministrator
            },
            202: {
                bodyMapper: ServerAzureADAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            administratorName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAzureADAdministrator
            },
            202: {
                bodyMapper: ServerAzureADAdministrator
            },
            204: {
                bodyMapper: ServerAzureADAdministrator
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ServerCommunicationLink: ServerCommunicationLink,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ServerCommunicationLinkListResult: ServerCommunicationLinkListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerCommunicationLinks. */
    var ServerCommunicationLinks = /** @class */ (function () {
        /**
         * Create a ServerCommunicationLinks.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerCommunicationLinks(client) {
            this.client = client;
        }
        ServerCommunicationLinks.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, communicationLinkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                communicationLinkName: communicationLinkName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ServerCommunicationLinks.prototype.get = function (resourceGroupName$$1, serverName$$1, communicationLinkName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                communicationLinkName: communicationLinkName$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * Creates a server communication link.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param communicationLinkName The name of the server communication link.
         * @param parameters The required parameters for creating a server communication link.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerCommunicationLinksCreateOrUpdateResponse>
         */
        ServerCommunicationLinks.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, communicationLinkName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, communicationLinkName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerCommunicationLinks.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$7, callback);
        };
        /**
         * Creates a server communication link.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param communicationLinkName The name of the server communication link.
         * @param parameters The required parameters for creating a server communication link.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerCommunicationLinks.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, communicationLinkName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                communicationLinkName: communicationLinkName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        return ServerCommunicationLinks;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            communicationLinkName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            communicationLinkName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerCommunicationLink
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listByServerOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerCommunicationLinkListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            communicationLinkName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerCommunicationLink, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServerCommunicationLink
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        ServiceObjective: ServiceObjective,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ServiceObjectiveListResult: ServiceObjectiveListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceObjectives. */
    var ServiceObjectives = /** @class */ (function () {
        /**
         * Create a ServiceObjectives.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServiceObjectives(client) {
            this.client = client;
        }
        ServiceObjectives.prototype.get = function (resourceGroupName$$1, serverName$$1, serviceObjectiveName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                serviceObjectiveName: serviceObjectiveName$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        ServiceObjectives.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$8, callback);
        };
        return ServiceObjectives;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives/{serviceObjectiveName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            serviceObjectiveName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceObjective
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listByServerOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceObjectiveListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        ElasticPoolActivityListResult: ElasticPoolActivityListResult,
        ElasticPoolActivity: ElasticPoolActivity,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPoolActivities. */
    var ElasticPoolActivities = /** @class */ (function () {
        /**
         * Create a ElasticPoolActivities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPoolActivities(client) {
            this.client = client;
        }
        ElasticPoolActivities.prototype.listByElasticPool = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, listByElasticPoolOperationSpec$1, callback);
        };
        return ElasticPoolActivities;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listByElasticPoolOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolActivity",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolActivityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        ElasticPoolDatabaseActivityListResult: ElasticPoolDatabaseActivityListResult,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPoolDatabaseActivities. */
    var ElasticPoolDatabaseActivities = /** @class */ (function () {
        /**
         * Create a ElasticPoolDatabaseActivities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPoolDatabaseActivities(client) {
            this.client = client;
        }
        ElasticPoolDatabaseActivities.prototype.listByElasticPool = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, listByElasticPoolOperationSpec$2, callback);
        };
        return ElasticPoolDatabaseActivities;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listByElasticPoolOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolDatabaseActivity",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            elasticPoolName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolDatabaseActivityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        ServiceTierAdvisor: ServiceTierAdvisor,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        SloUsageMetric: SloUsageMetric,
        CloudError: CloudError,
        ServiceTierAdvisorListResult: ServiceTierAdvisorListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceTierAdvisors. */
    var ServiceTierAdvisors = /** @class */ (function () {
        /**
         * Create a ServiceTierAdvisors.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServiceTierAdvisors(client) {
            this.client = client;
        }
        ServiceTierAdvisors.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, serviceTierAdvisorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                serviceTierAdvisorName: serviceTierAdvisorName$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        ServiceTierAdvisors.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$3, callback);
        };
        return ServiceTierAdvisors;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors/{serviceTierAdvisorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            serviceTierAdvisorName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceTierAdvisor
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listByDatabaseOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/serviceTierAdvisors",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceTierAdvisorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        TransparentDataEncryption: TransparentDataEncryption,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TransparentDataEncryptions. */
    var TransparentDataEncryptions = /** @class */ (function () {
        /**
         * Create a TransparentDataEncryptions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function TransparentDataEncryptions(client) {
            this.client = client;
        }
        TransparentDataEncryptions.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        TransparentDataEncryptions.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$g, callback);
        };
        return TransparentDataEncryptions;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            transparentDataEncryptionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TransparentDataEncryption, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TransparentDataEncryption
            },
            201: {
                bodyMapper: TransparentDataEncryption
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            transparentDataEncryptionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TransparentDataEncryption
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        TransparentDataEncryptionActivityListResult: TransparentDataEncryptionActivityListResult,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TransparentDataEncryptionActivities. */
    var TransparentDataEncryptionActivities = /** @class */ (function () {
        /**
         * Create a TransparentDataEncryptionActivities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function TransparentDataEncryptionActivities(client) {
            this.client = client;
        }
        TransparentDataEncryptionActivities.prototype.listByConfiguration = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByConfigurationOperationSpec, callback);
        };
        return TransparentDataEncryptionActivities;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var listByConfigurationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{transparentDataEncryptionName}/operationResults",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName,
            transparentDataEncryptionName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TransparentDataEncryptionActivityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        ServerUsageListResult: ServerUsageListResult,
        ServerUsage: ServerUsage,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerUsages. */
    var ServerUsages = /** @class */ (function () {
        /**
         * Create a ServerUsages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerUsages(client) {
            this.client = client;
        }
        ServerUsages.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$9, callback);
        };
        return ServerUsages;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var listByServerOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        DatabaseUsageListResult: DatabaseUsageListResult,
        DatabaseUsage: DatabaseUsage,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseUsages. */
    var DatabaseUsages = /** @class */ (function () {
        /**
         * Create a DatabaseUsages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseUsages(client) {
            this.client = client;
        }
        DatabaseUsages.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$4, callback);
        };
        return DatabaseUsages;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$m);
    var listByDatabaseOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/usages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serverName,
            databaseName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$n = /*#__PURE__*/Object.freeze({
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        AutomaticTuningOptions: AutomaticTuningOptions,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseAutomaticTuningOperations. */
    var DatabaseAutomaticTuningOperations = /** @class */ (function () {
        /**
         * Create a DatabaseAutomaticTuningOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseAutomaticTuningOperations(client) {
            this.client = client;
        }
        DatabaseAutomaticTuningOperations.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$h, callback);
        };
        DatabaseAutomaticTuningOperations.prototype.update = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        return DatabaseAutomaticTuningOperations;
    }());
    // Operation Specifications
    var serializer$n = new msRest.Serializer(Mappers$n);
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseAutomaticTuning, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$n
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$o = /*#__PURE__*/Object.freeze({
        EncryptionProtectorListResult: EncryptionProtectorListResult,
        EncryptionProtector: EncryptionProtector,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EncryptionProtectors. */
    var EncryptionProtectors = /** @class */ (function () {
        /**
         * Create a EncryptionProtectors.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function EncryptionProtectors(client) {
            this.client = client;
        }
        EncryptionProtectors.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$a, callback);
        };
        EncryptionProtectors.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$i, callback);
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.EncryptionProtectorsCreateOrUpdateResponse>
         */
        EncryptionProtectors.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EncryptionProtectors.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        EncryptionProtectors.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$2, callback);
        };
        return EncryptionProtectors;
    }());
    // Operation Specifications
    var serializer$o = new msRest.Serializer(Mappers$o);
    var listByServerOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionProtector
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, EncryptionProtector, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EncryptionProtector
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };
    var listByServerNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$o
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$p = /*#__PURE__*/Object.freeze({
        FailoverGroup: FailoverGroup,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        CloudError: CloudError,
        FailoverGroupUpdate: FailoverGroupUpdate,
        FailoverGroupListResult: FailoverGroupListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FailoverGroups. */
    var FailoverGroups = /** @class */ (function () {
        /**
         * Create a FailoverGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function FailoverGroups(client) {
            this.client = client;
        }
        FailoverGroups.prototype.get = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, getOperationSpec$j, callback);
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsCreateOrUpdateResponse>
         */
        FailoverGroups.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, failoverGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FailoverGroups.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsUpdateResponse>
         */
        FailoverGroups.prototype.update = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, failoverGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FailoverGroups.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$b, callback);
        };
        /**
         * Fails over from the current primary server to this server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsFailoverResponse>
         */
        FailoverGroups.prototype.failover = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options) {
            return this.beginFailover(resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Fails over from the current primary server to this server. This operation might result in data
         * loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.FailoverGroupsForceFailoverAllowDataLossResponse>
         */
        FailoverGroups.prototype.forceFailoverAllowDataLoss = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options) {
            return this.beginForceFailoverAllowDataLoss(resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                failoverGroupName: failoverGroupName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        /**
         * Updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                failoverGroupName: failoverGroupName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        /**
         * Fails over from the current primary server to this server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginFailover = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, beginFailoverOperationSpec$1, options);
        };
        /**
         * Fails over from the current primary server to this server. This operation might result in data
         * loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server containing the failover group.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FailoverGroups.prototype.beginForceFailoverAllowDataLoss = function (resourceGroupName$$1, serverName$$1, failoverGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, beginForceFailoverAllowDataLossOperationSpec, options);
        };
        FailoverGroups.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$3, callback);
        };
        return FailoverGroups;
    }());
    // Operation Specifications
    var serializer$p = new msRest.Serializer(Mappers$p);
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listByServerOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FailoverGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            201: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, FailoverGroupUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginFailoverOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/failover",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var beginForceFailoverAllowDataLossOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss",
        urlParameters: [
            resourceGroupName,
            serverName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };
    var listByServerNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$p
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$q = /*#__PURE__*/Object.freeze({
        ManagedInstanceListResult: ManagedInstanceListResult,
        ManagedInstance: ManagedInstance,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        CloudError: CloudError,
        ManagedInstanceUpdate: ManagedInstanceUpdate,
        ProxyResource: ProxyResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstances. */
    var ManagedInstances = /** @class */ (function () {
        /**
         * Create a ManagedInstances.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstances(client) {
            this.client = client;
        }
        ManagedInstances.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        ManagedInstances.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        ManagedInstances.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                options: options
            }, getOperationSpec$k, callback);
        };
        /**
         * Creates or updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstancesCreateOrUpdateResponse>
         */
        ManagedInstances.prototype.createOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, managedInstanceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstances.prototype.deleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, managedInstanceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstancesUpdateResponse>
         */
        ManagedInstances.prototype.update = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, managedInstanceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstances.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * Deletes a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstances.prototype.beginDeleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Updates a managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested managed instance resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstances.prototype.beginUpdate = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        ManagedInstances.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        ManagedInstances.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return ManagedInstances;
    }());
    // Operation Specifications
    var serializer$q = new msRest.Serializer(Mappers$q);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var getOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstance
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedInstance, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstance
            },
            201: {
                bodyMapper: ManagedInstance
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedInstanceUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstance
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$r = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$r = new msRest.Serializer(Mappers$r);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Sql/operations",
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$s = /*#__PURE__*/Object.freeze({
        ServerKeyListResult: ServerKeyListResult,
        ServerKey: ServerKey,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerKeys. */
    var ServerKeys = /** @class */ (function () {
        /**
         * Create a ServerKeys.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerKeys(client) {
            this.client = client;
        }
        ServerKeys.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$c, callback);
        };
        ServerKeys.prototype.get = function (resourceGroupName$$1, serverName$$1, keyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                keyName: keyName$$1,
                options: options
            }, getOperationSpec$l, callback);
        };
        /**
         * Creates or updates a server key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be operated on (updated or created). The key name
         * is required to be in the format of 'vault_key_version'. For example, if the keyId is
         * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901, then
         * the server key name should be formatted as:
         * YourVaultName_YourKeyName_01234567890123456789012345678901
         * @param parameters The requested server key resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerKeysCreateOrUpdateResponse>
         */
        ServerKeys.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, keyName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, keyName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the server key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServerKeys.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, keyName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, keyName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a server key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be operated on (updated or created). The key name
         * is required to be in the format of 'vault_key_version'. For example, if the keyId is
         * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901, then
         * the server key name should be formatted as:
         * YourVaultName_YourKeyName_01234567890123456789012345678901
         * @param parameters The requested server key resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerKeys.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, keyName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                keyName: keyName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * Deletes the server key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param keyName The name of the server key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerKeys.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, keyName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                keyName: keyName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        ServerKeys.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$4, callback);
        };
        return ServerKeys;
    }());
    // Operation Specifications
    var serializer$s = new msRest.Serializer(Mappers$s);
    var listByServerOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var getOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerKey, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerKey
            },
            201: {
                bodyMapper: ServerKey
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };
    var listByServerNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$s
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$t = /*#__PURE__*/Object.freeze({
        SyncAgent: SyncAgent,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        SyncAgentListResult: SyncAgentListResult,
        SyncAgentKeyProperties: SyncAgentKeyProperties,
        SyncAgentLinkedDatabaseListResult: SyncAgentLinkedDatabaseListResult,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncAgents. */
    var SyncAgents = /** @class */ (function () {
        /**
         * Create a SyncAgents.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SyncAgents(client) {
            this.client = client;
        }
        SyncAgents.prototype.get = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                syncAgentName: syncAgentName$$1,
                options: options
            }, getOperationSpec$m, callback);
        };
        /**
         * Creates or updates a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param parameters The requested sync agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncAgentsCreateOrUpdateResponse>
         */
        SyncAgents.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, syncAgentName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncAgents.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, syncAgentName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncAgents.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$d, callback);
        };
        SyncAgents.prototype.generateKey = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                syncAgentName: syncAgentName$$1,
                options: options
            }, generateKeyOperationSpec, callback);
        };
        SyncAgents.prototype.listLinkedDatabases = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                syncAgentName: syncAgentName$$1,
                options: options
            }, listLinkedDatabasesOperationSpec, callback);
        };
        /**
         * Creates or updates a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param parameters The requested sync agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncAgents.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                syncAgentName: syncAgentName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$9, options);
        };
        /**
         * Deletes a sync agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server on which the sync agent is hosted.
         * @param syncAgentName The name of the sync agent.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncAgents.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, syncAgentName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                syncAgentName: syncAgentName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        SyncAgents.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$5, callback);
        };
        SyncAgents.prototype.listLinkedDatabasesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listLinkedDatabasesNextOperationSpec, callback);
        };
        return SyncAgents;
    }());
    // Operation Specifications
    var serializer$t = new msRest.Serializer(Mappers$t);
    var getOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listByServerOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var generateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}/generateKey",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentKeyProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listLinkedDatabasesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}/linkedDatabases",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentLinkedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginCreateOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncAgent, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncAgent
            },
            201: {
                bodyMapper: SyncAgent
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            syncAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listByServerNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };
    var listLinkedDatabasesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncAgentLinkedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$t
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$u = /*#__PURE__*/Object.freeze({
        SyncDatabaseIdListResult: SyncDatabaseIdListResult,
        SyncDatabaseIdProperties: SyncDatabaseIdProperties,
        CloudError: CloudError,
        SyncFullSchemaPropertiesListResult: SyncFullSchemaPropertiesListResult,
        SyncFullSchemaProperties: SyncFullSchemaProperties,
        SyncFullSchemaTable: SyncFullSchemaTable,
        SyncFullSchemaTableColumn: SyncFullSchemaTableColumn,
        SyncGroupLogListResult: SyncGroupLogListResult,
        SyncGroupLogProperties: SyncGroupLogProperties,
        SyncGroup: SyncGroup,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncGroupListResult: SyncGroupListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncGroups. */
    var SyncGroups = /** @class */ (function () {
        /**
         * Create a SyncGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SyncGroups(client) {
            this.client = client;
        }
        SyncGroups.prototype.listSyncDatabaseIds = function (locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                options: options
            }, listSyncDatabaseIdsOperationSpec, callback);
        };
        /**
         * Refreshes a hub database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncGroups.prototype.refreshHubSchema = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options) {
            return this.beginRefreshHubSchema(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncGroups.prototype.listHubSchemas = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, listHubSchemasOperationSpec, callback);
        };
        SyncGroups.prototype.listLogs = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, startTime$$1, endTime$$1, type$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                startTime: startTime$$1,
                endTime: endTime$$1,
                type: type$$1,
                options: options
            }, listLogsOperationSpec, callback);
        };
        SyncGroups.prototype.cancelSync = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, cancelSyncOperationSpec, callback);
        };
        SyncGroups.prototype.triggerSync = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, triggerSyncOperationSpec, callback);
        };
        SyncGroups.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, getOperationSpec$n, callback);
        };
        /**
         * Creates or updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncGroupsCreateOrUpdateResponse>
         */
        SyncGroups.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncGroups.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncGroupsUpdateResponse>
         */
        SyncGroups.prototype.update = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncGroups.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$5, callback);
        };
        /**
         * Refreshes a hub database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginRefreshHubSchema = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, beginRefreshHubSchemaOperationSpec, options);
        };
        /**
         * Creates or updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$a, options);
        };
        /**
         * Deletes a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        /**
         * Updates a sync group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group.
         * @param parameters The requested sync group resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncGroups.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$5, options);
        };
        SyncGroups.prototype.listSyncDatabaseIdsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listSyncDatabaseIdsNextOperationSpec, callback);
        };
        SyncGroups.prototype.listHubSchemasNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listHubSchemasNextOperationSpec, callback);
        };
        SyncGroups.prototype.listLogsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listLogsNextOperationSpec, callback);
        };
        SyncGroups.prototype.listByDatabaseNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDatabaseNextOperationSpec, callback);
        };
        return SyncGroups;
    }());
    // Operation Specifications
    var serializer$u = new msRest.Serializer(Mappers$u);
    var listSyncDatabaseIdsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncDatabaseIdListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listHubSchemasOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/hubSchemas",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listLogsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/logs",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            startTime,
            endTime,
            type,
            continuationToken,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupLogListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var cancelSyncOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/cancelSync",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var triggerSyncOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/triggerSync",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var getOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listByDatabaseOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginRefreshHubSchemaOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/refreshHubSchema",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginCreateOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncGroup
            },
            201: {
                bodyMapper: SyncGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var beginUpdateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listSyncDatabaseIdsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncDatabaseIdListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listHubSchemasNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listLogsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupLogListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };
    var listByDatabaseNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$u
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$v = /*#__PURE__*/Object.freeze({
        SyncMember: SyncMember,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        SyncMemberListResult: SyncMemberListResult,
        SyncFullSchemaPropertiesListResult: SyncFullSchemaPropertiesListResult,
        SyncFullSchemaProperties: SyncFullSchemaProperties,
        SyncFullSchemaTable: SyncFullSchemaTable,
        SyncFullSchemaTableColumn: SyncFullSchemaTableColumn,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SyncMembers. */
    var SyncMembers = /** @class */ (function () {
        /**
         * Create a SyncMembers.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SyncMembers(client) {
            this.client = client;
        }
        SyncMembers.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                syncMemberName: syncMemberName$$1,
                options: options
            }, getOperationSpec$o, callback);
        };
        /**
         * Creates or updates a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncMembersCreateOrUpdateResponse>
         */
        SyncMembers.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncMembers.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.SyncMembersUpdateResponse>
         */
        SyncMembers.prototype.update = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SyncMembers.prototype.listBySyncGroup = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                options: options
            }, listBySyncGroupOperationSpec, callback);
        };
        SyncMembers.prototype.listMemberSchemas = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                syncMemberName: syncMemberName$$1,
                options: options
            }, listMemberSchemasOperationSpec, callback);
        };
        /**
         * Refreshes a sync member database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SyncMembers.prototype.refreshMemberSchema = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options) {
            return this.beginRefreshMemberSchema(resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                syncMemberName: syncMemberName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$b, options);
        };
        /**
         * Deletes a sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                syncMemberName: syncMemberName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        /**
         * Updates an existing sync member.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param parameters The requested sync member resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                syncMemberName: syncMemberName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$6, options);
        };
        /**
         * Refreshes a sync member database schema.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database on which the sync group is hosted.
         * @param syncGroupName The name of the sync group on which the sync member is hosted.
         * @param syncMemberName The name of the sync member.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SyncMembers.prototype.beginRefreshMemberSchema = function (resourceGroupName$$1, serverName$$1, databaseName$$1, syncGroupName$$1, syncMemberName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                syncGroupName: syncGroupName$$1,
                syncMemberName: syncMemberName$$1,
                options: options
            }, beginRefreshMemberSchemaOperationSpec, options);
        };
        SyncMembers.prototype.listBySyncGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySyncGroupNextOperationSpec, callback);
        };
        SyncMembers.prototype.listMemberSchemasNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listMemberSchemasNextOperationSpec, callback);
        };
        return SyncMembers;
    }());
    // Operation Specifications
    var serializer$v = new msRest.Serializer(Mappers$v);
    var getOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncMember
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listBySyncGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncMemberListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listMemberSchemasOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/schemas",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginCreateOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncMember, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncMember
            },
            201: {
                bodyMapper: SyncMember
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginUpdateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SyncMember, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SyncMember
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var beginRefreshMemberSchemaOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/refreshSchema",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            syncGroupName,
            syncMemberName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listBySyncGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncMemberListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };
    var listMemberSchemasNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SyncFullSchemaPropertiesListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$v
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$w = /*#__PURE__*/Object.freeze({
        SubscriptionUsageListResult: SubscriptionUsageListResult,
        SubscriptionUsage: SubscriptionUsage,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SubscriptionUsages. */
    var SubscriptionUsages = /** @class */ (function () {
        /**
         * Create a SubscriptionUsages.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function SubscriptionUsages(client) {
            this.client = client;
        }
        SubscriptionUsages.prototype.listByLocation = function (locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        SubscriptionUsages.prototype.get = function (locationName$$1, usageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                usageName: usageName$$1,
                options: options
            }, getOperationSpec$p, callback);
        };
        SubscriptionUsages.prototype.listByLocationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByLocationNextOperationSpec, callback);
        };
        return SubscriptionUsages;
    }());
    // Operation Specifications
    var serializer$w = new msRest.Serializer(Mappers$w);
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var getOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}",
        urlParameters: [
            locationName,
            usageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionUsage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };
    var listByLocationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SubscriptionUsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$w
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$x = /*#__PURE__*/Object.freeze({
        VirtualNetworkRule: VirtualNetworkRule,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkRules. */
    var VirtualNetworkRules = /** @class */ (function () {
        /**
         * Create a VirtualNetworkRules.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkRules(client) {
            this.client = client;
        }
        VirtualNetworkRules.prototype.get = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, getOperationSpec$q, callback);
        };
        /**
         * Creates or updates an existing virtual network rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param parameters The requested virtual Network Rule Resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworkRulesCreateOrUpdateResponse>
         */
        VirtualNetworkRules.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the virtual network rule with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworkRules.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworkRules.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$e, callback);
        };
        /**
         * Creates or updates an existing virtual network rule.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param parameters The requested virtual Network Rule Resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkRules.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$c, options);
        };
        /**
         * Deletes the virtual network rule with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param virtualNetworkRuleName The name of the virtual network rule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworkRules.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, virtualNetworkRuleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$a, options);
        };
        VirtualNetworkRules.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$6, callback);
        };
        return VirtualNetworkRules;
    }());
    // Operation Specifications
    var serializer$x = new msRest.Serializer(Mappers$x);
    var getOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var listByServerOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginCreateOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualNetworkRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            201: {
                bodyMapper: VirtualNetworkRule
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var beginDeleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            virtualNetworkRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };
    var listByServerNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$x
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$y = /*#__PURE__*/Object.freeze({
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExtendedDatabaseBlobAuditingPolicies. */
    var ExtendedDatabaseBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a ExtendedDatabaseBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ExtendedDatabaseBlobAuditingPolicies(client) {
            this.client = client;
        }
        ExtendedDatabaseBlobAuditingPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$r, callback);
        };
        ExtendedDatabaseBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        return ExtendedDatabaseBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$y = new msRest.Serializer(Mappers$y);
    var getOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtendedDatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExtendedDatabaseBlobAuditingPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExtendedDatabaseBlobAuditingPolicy
            },
            201: {
                bodyMapper: ExtendedDatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$z = /*#__PURE__*/Object.freeze({
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExtendedServerBlobAuditingPolicies. */
    var ExtendedServerBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a ExtendedServerBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ExtendedServerBlobAuditingPolicies(client) {
            this.client = client;
        }
        ExtendedServerBlobAuditingPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$s, callback);
        };
        /**
         * Creates or updates an extended server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of extended blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<Models.ExtendedServerBlobAuditingPoliciesCreateOrUpdateResponse>
         */
        ExtendedServerBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates an extended server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of extended blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ExtendedServerBlobAuditingPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$d, options);
        };
        return ExtendedServerBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$z = new msRest.Serializer(Mappers$z);
    var getOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtendedServerBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };
    var beginCreateOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ExtendedServerBlobAuditingPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExtendedServerBlobAuditingPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$A = /*#__PURE__*/Object.freeze({
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerBlobAuditingPolicies. */
    var ServerBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a ServerBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerBlobAuditingPolicies(client) {
            this.client = client;
        }
        ServerBlobAuditingPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$t, callback);
        };
        /**
         * Creates or updates a server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerBlobAuditingPoliciesCreateOrUpdateResponse>
         */
        ServerBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a server's blob auditing policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters Properties of blob auditing policy
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerBlobAuditingPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$e, options);
        };
        return ServerBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$A = new msRest.Serializer(Mappers$A);
    var getOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var beginCreateOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerBlobAuditingPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerBlobAuditingPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$B = /*#__PURE__*/Object.freeze({
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseBlobAuditingPolicies. */
    var DatabaseBlobAuditingPolicies = /** @class */ (function () {
        /**
         * Create a DatabaseBlobAuditingPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseBlobAuditingPolicies(client) {
            this.client = client;
        }
        DatabaseBlobAuditingPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$u, callback);
        };
        DatabaseBlobAuditingPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$8, callback);
        };
        return DatabaseBlobAuditingPolicies;
    }());
    // Operation Specifications
    var serializer$B = new msRest.Serializer(Mappers$B);
    var getOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var createOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            blobAuditingPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseBlobAuditingPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseBlobAuditingPolicy
            },
            201: {
                bodyMapper: DatabaseBlobAuditingPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$C = /*#__PURE__*/Object.freeze({
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseVulnerabilityAssessmentRuleBaselines. */
    var DatabaseVulnerabilityAssessmentRuleBaselines = /** @class */ (function () {
        /**
         * Create a DatabaseVulnerabilityAssessmentRuleBaselines.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseVulnerabilityAssessmentRuleBaselines(client) {
            this.client = client;
        }
        DatabaseVulnerabilityAssessmentRuleBaselines.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, ruleId$$1, baselineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                ruleId: ruleId$$1,
                baselineName: baselineName$$1,
                options: options
            }, getOperationSpec$v, callback);
        };
        DatabaseVulnerabilityAssessmentRuleBaselines.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, ruleId$$1, baselineName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                ruleId: ruleId$$1,
                baselineName: baselineName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$9, callback);
        };
        DatabaseVulnerabilityAssessmentRuleBaselines.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, ruleId$$1, baselineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                ruleId: ruleId$$1,
                baselineName: baselineName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        return DatabaseVulnerabilityAssessmentRuleBaselines;
    }());
    // Operation Specifications
    var serializer$C = new msRest.Serializer(Mappers$C);
    var getOperationSpec$v = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var createOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseVulnerabilityAssessmentRuleBaseline, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$C
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$D = /*#__PURE__*/Object.freeze({
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseVulnerabilityAssessments. */
    var DatabaseVulnerabilityAssessments = /** @class */ (function () {
        /**
         * Create a DatabaseVulnerabilityAssessments.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseVulnerabilityAssessments(client) {
            this.client = client;
        }
        DatabaseVulnerabilityAssessments.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$w, callback);
        };
        DatabaseVulnerabilityAssessments.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$a, callback);
        };
        DatabaseVulnerabilityAssessments.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        return DatabaseVulnerabilityAssessments;
    }());
    // Operation Specifications
    var serializer$D = new msRest.Serializer(Mappers$D);
    var getOperationSpec$w = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var createOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseVulnerabilityAssessment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$D
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$E = /*#__PURE__*/Object.freeze({
        JobAgentListResult: JobAgentListResult,
        JobAgent: JobAgent,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        CloudError: CloudError,
        JobAgentUpdate: JobAgentUpdate,
        ProxyResource: ProxyResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobAgents. */
    var JobAgents = /** @class */ (function () {
        /**
         * Create a JobAgents.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobAgents(client) {
            this.client = client;
        }
        JobAgents.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$f, callback);
        };
        JobAgents.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                options: options
            }, getOperationSpec$x, callback);
        };
        /**
         * Creates or updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be created or updated.
         * @param parameters The requested job agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobAgentsCreateOrUpdateResponse>
         */
        JobAgents.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, jobAgentName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        JobAgents.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, jobAgentName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be updated.
         * @param parameters The update to the job agent.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobAgentsUpdateResponse>
         */
        JobAgents.prototype.update = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, jobAgentName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be created or updated.
         * @param parameters The requested job agent resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobAgents.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$f, options);
        };
        /**
         * Deletes a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobAgents.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$b, options);
        };
        /**
         * Updates a job agent.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent to be updated.
         * @param parameters The update to the job agent.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobAgents.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$7, options);
        };
        JobAgents.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$7, callback);
        };
        return JobAgents;
    }());
    // Operation Specifications
    var serializer$E = new msRest.Serializer(Mappers$E);
    var listByServerOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var getOperationSpec$x = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobAgent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginCreateOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobAgent, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobAgent
            },
            201: {
                bodyMapper: JobAgent
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginDeleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var beginUpdateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobAgentUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobAgent
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };
    var listByServerNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobAgentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$E
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$F = /*#__PURE__*/Object.freeze({
        JobCredentialListResult: JobCredentialListResult,
        JobCredential: JobCredential,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobCredentials. */
    var JobCredentials = /** @class */ (function () {
        /**
         * Create a JobCredentials.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobCredentials(client) {
            this.client = client;
        }
        JobCredentials.prototype.listByAgent = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                options: options
            }, listByAgentOperationSpec, callback);
        };
        JobCredentials.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, credentialName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                credentialName: credentialName$$1,
                options: options
            }, getOperationSpec$y, callback);
        };
        JobCredentials.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, credentialName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                credentialName: credentialName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$b, callback);
        };
        JobCredentials.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, credentialName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                credentialName: credentialName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        JobCredentials.prototype.listByAgentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAgentNextOperationSpec, callback);
        };
        return JobCredentials;
    }());
    // Operation Specifications
    var serializer$F = new msRest.Serializer(Mappers$F);
    var listByAgentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCredentialListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var getOperationSpec$y = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCredential
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var createOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobCredential, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobCredential
            },
            201: {
                bodyMapper: JobCredential
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };
    var listByAgentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobCredentialListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$F
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$G = /*#__PURE__*/Object.freeze({
        JobExecutionListResult: JobExecutionListResult,
        JobExecution: JobExecution,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobExecutionTarget: JobExecutionTarget,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobExecutions. */
    var JobExecutions = /** @class */ (function () {
        /**
         * Create a JobExecutions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobExecutions(client) {
            this.client = client;
        }
        JobExecutions.prototype.listByAgent = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                options: options
            }, listByAgentOperationSpec$1, callback);
        };
        JobExecutions.prototype.cancel = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                options: options
            }, cancelOperationSpec, callback);
        };
        /**
         * Starts an elastic job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobExecutionsCreateResponse>
         */
        JobExecutions.prototype.create = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options) {
            return this.beginCreate(resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        JobExecutions.prototype.listByJob = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                options: options
            }, listByJobOperationSpec, callback);
        };
        JobExecutions.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                options: options
            }, getOperationSpec$z, callback);
        };
        /**
         * Creates or updatess a job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param jobExecutionId The job execution id to create the job execution under.
         * @param [options] The optional parameters
         * @returns Promise<Models.JobExecutionsCreateOrUpdateResponse>
         */
        JobExecutions.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts an elastic job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobExecutions.prototype.beginCreate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Creates or updatess a job execution.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param jobAgentName The name of the job agent.
         * @param jobName The name of the job to get.
         * @param jobExecutionId The job execution id to create the job execution under.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        JobExecutions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$g, options);
        };
        JobExecutions.prototype.listByAgentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAgentNextOperationSpec$1, callback);
        };
        JobExecutions.prototype.listByJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByJobNextOperationSpec, callback);
        };
        return JobExecutions;
    }());
    // Operation Specifications
    var serializer$G = new msRest.Serializer(Mappers$G);
    var listByAgentOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/executions",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/cancel",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listByJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var getOperationSpec$z = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var beginCreateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/start",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var beginCreateOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            201: {
                bodyMapper: JobExecution
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listByAgentNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };
    var listByJobNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$G
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$H = /*#__PURE__*/Object.freeze({
        JobListResult: JobListResult,
        Job: Job,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobSchedule: JobSchedule,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.listByAgent = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                options: options
            }, listByAgentOperationSpec$2, callback);
        };
        Jobs.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec$A, callback);
        };
        Jobs.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$c, callback);
        };
        Jobs.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        Jobs.prototype.listByAgentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAgentNextOperationSpec$2, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$H = new msRest.Serializer(Mappers$H);
    var listByAgentOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var getOperationSpec$A = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var createOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Job, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Job
            },
            201: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };
    var listByAgentNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$H
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$I = /*#__PURE__*/Object.freeze({
        JobExecutionListResult: JobExecutionListResult,
        JobExecution: JobExecution,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobExecutionTarget: JobExecutionTarget,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobStepExecutions. */
    var JobStepExecutions = /** @class */ (function () {
        /**
         * Create a JobStepExecutions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobStepExecutions(client) {
            this.client = client;
        }
        JobStepExecutions.prototype.listByJobExecution = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                options: options
            }, listByJobExecutionOperationSpec, callback);
        };
        JobStepExecutions.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                stepName: stepName$$1,
                options: options
            }, getOperationSpec$B, callback);
        };
        JobStepExecutions.prototype.listByJobExecutionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByJobExecutionNextOperationSpec, callback);
        };
        return JobStepExecutions;
    }());
    // Operation Specifications
    var serializer$I = new msRest.Serializer(Mappers$I);
    var listByJobExecutionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var getOperationSpec$B = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };
    var listByJobExecutionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$I
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$J = /*#__PURE__*/Object.freeze({
        JobStepListResult: JobStepListResult,
        JobStep: JobStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobSteps. */
    var JobSteps = /** @class */ (function () {
        /**
         * Create a JobSteps.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobSteps(client) {
            this.client = client;
        }
        JobSteps.prototype.listByVersion = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobVersion$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobVersion: jobVersion$$1,
                options: options
            }, listByVersionOperationSpec, callback);
        };
        JobSteps.prototype.getByVersion = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobVersion$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobVersion: jobVersion$$1,
                stepName: stepName$$1,
                options: options
            }, getByVersionOperationSpec, callback);
        };
        JobSteps.prototype.listByJob = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                options: options
            }, listByJobOperationSpec$1, callback);
        };
        JobSteps.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                stepName: stepName$$1,
                options: options
            }, getOperationSpec$C, callback);
        };
        JobSteps.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, stepName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                stepName: stepName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$d, callback);
        };
        JobSteps.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                stepName: stepName$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        JobSteps.prototype.listByVersionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByVersionNextOperationSpec, callback);
        };
        JobSteps.prototype.listByJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByJobNextOperationSpec$1, callback);
        };
        return JobSteps;
    }());
    // Operation Specifications
    var serializer$J = new msRest.Serializer(Mappers$J);
    var listByVersionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobVersion,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var getByVersionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobVersion,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStep
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByJobOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var getOperationSpec$C = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStep
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var createOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobStep, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobStep
            },
            201: {
                bodyMapper: JobStep
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByVersionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };
    var listByJobNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStepListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$J
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$K = /*#__PURE__*/Object.freeze({
        JobExecutionListResult: JobExecutionListResult,
        JobExecution: JobExecution,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobExecutionTarget: JobExecutionTarget,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobTargetExecutions. */
    var JobTargetExecutions = /** @class */ (function () {
        /**
         * Create a JobTargetExecutions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobTargetExecutions(client) {
            this.client = client;
        }
        JobTargetExecutions.prototype.listByJobExecution = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                options: options
            }, listByJobExecutionOperationSpec$1, callback);
        };
        JobTargetExecutions.prototype.listByStep = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, stepName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                stepName: stepName$$1,
                options: options
            }, listByStepOperationSpec, callback);
        };
        JobTargetExecutions.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobExecutionId$$1, stepName$$1, targetId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobExecutionId: jobExecutionId$$1,
                stepName: stepName$$1,
                targetId: targetId$$1,
                options: options
            }, getOperationSpec$D, callback);
        };
        JobTargetExecutions.prototype.listByJobExecutionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByJobExecutionNextOperationSpec$1, callback);
        };
        JobTargetExecutions.prototype.listByStepNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByStepNextOperationSpec, callback);
        };
        return JobTargetExecutions;
    }());
    // Operation Specifications
    var serializer$K = new msRest.Serializer(Mappers$K);
    var listByJobExecutionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/targets",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listByStepOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            stepName,
            subscriptionId
        ],
        queryParameters: [
            createTimeMin,
            createTimeMax,
            endTimeMin,
            endTimeMax,
            isActive,
            skip,
            top,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var getOperationSpec$D = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets/{targetId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobExecutionId,
            stepName,
            targetId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecution
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listByJobExecutionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };
    var listByStepNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobExecutionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$K
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$L = /*#__PURE__*/Object.freeze({
        JobTargetGroupListResult: JobTargetGroupListResult,
        JobTargetGroup: JobTargetGroup,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        JobTarget: JobTarget,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobTargetGroups. */
    var JobTargetGroups = /** @class */ (function () {
        /**
         * Create a JobTargetGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobTargetGroups(client) {
            this.client = client;
        }
        JobTargetGroups.prototype.listByAgent = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                options: options
            }, listByAgentOperationSpec$3, callback);
        };
        JobTargetGroups.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, targetGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                targetGroupName: targetGroupName$$1,
                options: options
            }, getOperationSpec$E, callback);
        };
        JobTargetGroups.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, targetGroupName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                targetGroupName: targetGroupName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$e, callback);
        };
        JobTargetGroups.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, targetGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                targetGroupName: targetGroupName$$1,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        JobTargetGroups.prototype.listByAgentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAgentNextOperationSpec$3, callback);
        };
        return JobTargetGroups;
    }());
    // Operation Specifications
    var serializer$L = new msRest.Serializer(Mappers$L);
    var listByAgentOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobTargetGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var getOperationSpec$E = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            targetGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobTargetGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var createOrUpdateOperationSpec$e = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            targetGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobTargetGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobTargetGroup
            },
            201: {
                bodyMapper: JobTargetGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            targetGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };
    var listByAgentNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobTargetGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$L
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$M = /*#__PURE__*/Object.freeze({
        JobVersionListResult: JobVersionListResult,
        JobVersion: JobVersion,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobVersions. */
    var JobVersions = /** @class */ (function () {
        /**
         * Create a JobVersions.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function JobVersions(client) {
            this.client = client;
        }
        JobVersions.prototype.listByJob = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                options: options
            }, listByJobOperationSpec$2, callback);
        };
        JobVersions.prototype.get = function (resourceGroupName$$1, serverName$$1, jobAgentName$$1, jobName$$1, jobVersion$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                jobAgentName: jobAgentName$$1,
                jobName: jobName$$1,
                jobVersion: jobVersion$$1,
                options: options
            }, getOperationSpec$F, callback);
        };
        JobVersions.prototype.listByJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByJobNextOperationSpec$2, callback);
        };
        return JobVersions;
    }());
    // Operation Specifications
    var serializer$M = new msRest.Serializer(Mappers$M);
    var listByJobOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var getOperationSpec$F = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}",
        urlParameters: [
            resourceGroupName,
            serverName,
            jobAgentName,
            jobName,
            jobVersion,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };
    var listByJobNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$M
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$N = /*#__PURE__*/Object.freeze({
        LongTermRetentionBackup: LongTermRetentionBackup,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        LongTermRetentionBackupListResult: LongTermRetentionBackupListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LongTermRetentionBackups. */
    var LongTermRetentionBackups = /** @class */ (function () {
        /**
         * Create a LongTermRetentionBackups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function LongTermRetentionBackups(client) {
            this.client = client;
        }
        LongTermRetentionBackups.prototype.get = function (locationName$$1, longTermRetentionServerName$$1, longTermRetentionDatabaseName$$1, backupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                longTermRetentionServerName: longTermRetentionServerName$$1,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName$$1,
                backupName: backupName$$1,
                options: options
            }, getOperationSpec$G, callback);
        };
        /**
         * Deletes a long term retention backup.
         * @param locationName The location of the database
         * @param longTermRetentionServerName
         * @param longTermRetentionDatabaseName
         * @param backupName The backup name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LongTermRetentionBackups.prototype.deleteMethod = function (locationName$$1, longTermRetentionServerName$$1, longTermRetentionDatabaseName$$1, backupName$$1, options) {
            return this.beginDeleteMethod(locationName$$1, longTermRetentionServerName$$1, longTermRetentionDatabaseName$$1, backupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LongTermRetentionBackups.prototype.listByDatabase = function (locationName$$1, longTermRetentionServerName$$1, longTermRetentionDatabaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                longTermRetentionServerName: longTermRetentionServerName$$1,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$6, callback);
        };
        LongTermRetentionBackups.prototype.listByLocation = function (locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                options: options
            }, listByLocationOperationSpec$1, callback);
        };
        LongTermRetentionBackups.prototype.listByServer = function (locationName$$1, longTermRetentionServerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                longTermRetentionServerName: longTermRetentionServerName$$1,
                options: options
            }, listByServerOperationSpec$g, callback);
        };
        /**
         * Deletes a long term retention backup.
         * @param locationName The location of the database
         * @param longTermRetentionServerName
         * @param longTermRetentionDatabaseName
         * @param backupName The backup name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LongTermRetentionBackups.prototype.beginDeleteMethod = function (locationName$$1, longTermRetentionServerName$$1, longTermRetentionDatabaseName$$1, backupName$$1, options) {
            return this.client.sendLRORequest({
                locationName: locationName$$1,
                longTermRetentionServerName: longTermRetentionServerName$$1,
                longTermRetentionDatabaseName: longTermRetentionDatabaseName$$1,
                backupName: backupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$c, options);
        };
        LongTermRetentionBackups.prototype.listByDatabaseNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDatabaseNextOperationSpec$1, callback);
        };
        LongTermRetentionBackups.prototype.listByLocationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByLocationNextOperationSpec$1, callback);
        };
        LongTermRetentionBackups.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$8, callback);
        };
        return LongTermRetentionBackups;
    }());
    // Operation Specifications
    var serializer$N = new msRest.Serializer(Mappers$N);
    var getOperationSpec$G = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByDatabaseOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByLocationOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByServerOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            subscriptionId
        ],
        queryParameters: [
            onlyLatestPerDatabase,
            databaseState,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var beginDeleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
        urlParameters: [
            locationName,
            longTermRetentionServerName,
            longTermRetentionDatabaseName,
            backupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByDatabaseNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByLocationNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };
    var listByServerNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LongTermRetentionBackupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$N
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$O = /*#__PURE__*/Object.freeze({
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupLongTermRetentionPolicies. */
    var BackupLongTermRetentionPolicies = /** @class */ (function () {
        /**
         * Create a BackupLongTermRetentionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function BackupLongTermRetentionPolicies(client) {
            this.client = client;
        }
        BackupLongTermRetentionPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$H, callback);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupLongTermRetentionPoliciesCreateOrUpdateResponse>
         */
        BackupLongTermRetentionPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        BackupLongTermRetentionPolicies.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$7, callback);
        };
        /**
         * Sets a database's long term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The long term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupLongTermRetentionPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$h, options);
        };
        return BackupLongTermRetentionPolicies;
    }());
    // Operation Specifications
    var serializer$O = new msRest.Serializer(Mappers$O);
    var getOperationSpec$H = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupLongTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var listByDatabaseOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupLongTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };
    var beginCreateOrUpdateOperationSpec$h = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupLongTermRetentionPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupLongTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$O
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$P = /*#__PURE__*/Object.freeze({
        CompleteDatabaseRestoreDefinition: CompleteDatabaseRestoreDefinition,
        CloudError: CloudError,
        ManagedDatabaseListResult: ManagedDatabaseListResult,
        ManagedDatabase: ManagedDatabase,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ManagedDatabaseUpdate: ManagedDatabaseUpdate,
        ProxyResource: ProxyResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabases. */
    var ManagedDatabases = /** @class */ (function () {
        /**
         * Create a ManagedDatabases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabases(client) {
            this.client = client;
        }
        /**
         * Completes the restore operation on a managed database.
         * @param locationName The name of the region where the resource is located.
         * @param operationId Management operation id that this request tries to complete.
         * @param parameters The definition for completing the restore of this managed database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedDatabases.prototype.completeRestore = function (locationName$$1, operationId$$1, parameters, options) {
            return this.beginCompleteRestore(locationName$$1, operationId$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedDatabases.prototype.listByInstance = function (resourceGroupName$$1, managedInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                options: options
            }, listByInstanceOperationSpec, callback);
        };
        ManagedDatabases.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$I, callback);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedDatabasesCreateOrUpdateResponse>
         */
        ManagedDatabases.prototype.createOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the managed database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedDatabases.prototype.deleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedDatabasesUpdateResponse>
         */
        ManagedDatabases.prototype.update = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Completes the restore operation on a managed database.
         * @param locationName The name of the region where the resource is located.
         * @param operationId Management operation id that this request tries to complete.
         * @param parameters The definition for completing the restore of this managed database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginCompleteRestore = function (locationName$$1, operationId$$1, parameters, options) {
            return this.client.sendLRORequest({
                locationName: locationName$$1,
                operationId: operationId$$1,
                parameters: parameters,
                options: options
            }, beginCompleteRestoreOperationSpec, options);
        };
        /**
         * Creates a new database or updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$i, options);
        };
        /**
         * Deletes the managed database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginDeleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$d, options);
        };
        /**
         * Updates an existing database.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param parameters The requested database resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabases.prototype.beginUpdate = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$8, options);
        };
        ManagedDatabases.prototype.listByInstanceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByInstanceNextOperationSpec, callback);
        };
        return ManagedDatabases;
    }());
    // Operation Specifications
    var serializer$P = new msRest.Serializer(Mappers$P);
    var listByInstanceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var getOperationSpec$I = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabase
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginCompleteRestoreOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseRestoreAzureAsyncOperation/{operationId}/completeRestore",
        urlParameters: [
            locationName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CompleteDatabaseRestoreDefinition, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginCreateOrUpdateOperationSpec$i = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedDatabase, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedDatabase
            },
            201: {
                bodyMapper: ManagedDatabase
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginDeleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var beginUpdateOperationSpec$8 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedDatabaseUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedDatabase
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };
    var listByInstanceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedDatabaseListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$P
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$Q = /*#__PURE__*/Object.freeze({
        ServerAutomaticTuning: ServerAutomaticTuning,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerAutomaticTuningOperations. */
    var ServerAutomaticTuningOperations = /** @class */ (function () {
        /**
         * Create a ServerAutomaticTuningOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerAutomaticTuningOperations(client) {
            this.client = client;
        }
        ServerAutomaticTuningOperations.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$J, callback);
        };
        ServerAutomaticTuningOperations.prototype.update = function (resourceGroupName$$1, serverName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return ServerAutomaticTuningOperations;
    }());
    // Operation Specifications
    var serializer$Q = new msRest.Serializer(Mappers$Q);
    var getOperationSpec$J = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/automaticTuning/current",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerAutomaticTuning, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerAutomaticTuning
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$R = /*#__PURE__*/Object.freeze({
        ServerDnsAlias: ServerDnsAlias,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ServerDnsAliasListResult: ServerDnsAliasListResult,
        ServerDnsAliasAcquisition: ServerDnsAliasAcquisition,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerDnsAliases. */
    var ServerDnsAliases = /** @class */ (function () {
        /**
         * Create a ServerDnsAliases.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerDnsAliases(client) {
            this.client = client;
        }
        ServerDnsAliases.prototype.get = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                dnsAliasName: dnsAliasName$$1,
                options: options
            }, getOperationSpec$K, callback);
        };
        /**
         * Creates a server dns alias.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerDnsAliasesCreateOrUpdateResponse>
         */
        ServerDnsAliases.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the server DNS alias with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServerDnsAliases.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServerDnsAliases.prototype.listByServer = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, listByServerOperationSpec$h, callback);
        };
        /**
         * Acquires server DNS alias from another server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server dns alias.
         * @param parameters
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ServerDnsAliases.prototype.acquire = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, parameters, options) {
            return this.beginAcquire(resourceGroupName$$1, serverName$$1, dnsAliasName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a server dns alias.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerDnsAliases.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                dnsAliasName: dnsAliasName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$j, options);
        };
        /**
         * Deletes the server DNS alias with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server DNS alias.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerDnsAliases.prototype.beginDeleteMethod = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                dnsAliasName: dnsAliasName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$e, options);
        };
        /**
         * Acquires server DNS alias from another server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server that the alias is pointing to.
         * @param dnsAliasName The name of the server dns alias.
         * @param parameters
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerDnsAliases.prototype.beginAcquire = function (resourceGroupName$$1, serverName$$1, dnsAliasName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                dnsAliasName: dnsAliasName$$1,
                parameters: parameters,
                options: options
            }, beginAcquireOperationSpec, options);
        };
        ServerDnsAliases.prototype.listByServerNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByServerNextOperationSpec$9, callback);
        };
        return ServerDnsAliases;
    }());
    // Operation Specifications
    var serializer$R = new msRest.Serializer(Mappers$R);
    var getOperationSpec$K = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAlias
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var listByServerOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAliasListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var beginCreateOrUpdateOperationSpec$j = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAlias
            },
            201: {
                bodyMapper: ServerDnsAlias
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var beginDeleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var beginAcquireOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}/acquire",
        urlParameters: [
            resourceGroupName,
            serverName,
            dnsAliasName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerDnsAliasAcquisition, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };
    var listByServerNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerDnsAliasListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$R
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$S = /*#__PURE__*/Object.freeze({
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServerSecurityAlertPolicies. */
    var ServerSecurityAlertPolicies = /** @class */ (function () {
        /**
         * Create a ServerSecurityAlertPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ServerSecurityAlertPolicies(client) {
            this.client = client;
        }
        ServerSecurityAlertPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                options: options
            }, getOperationSpec$L, callback);
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServerSecurityAlertPoliciesCreateOrUpdateResponse>
         */
        ServerSecurityAlertPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a threat detection policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The server security alert policy.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServerSecurityAlertPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$k, options);
        };
        return ServerSecurityAlertPolicies;
    }());
    // Operation Specifications
    var serializer$S = new msRest.Serializer(Mappers$S);
    var getOperationSpec$L = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            securityAlertPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServerSecurityAlertPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };
    var beginCreateOrUpdateOperationSpec$k = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            securityAlertPolicyName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServerSecurityAlertPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServerSecurityAlertPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$S
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$T = /*#__PURE__*/Object.freeze({
        RestorePointListResult: RestorePointListResult,
        RestorePoint: RestorePoint,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CreateDatabaseRestorePointDefinition: CreateDatabaseRestorePointDefinition,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RestorePoints. */
    var RestorePoints = /** @class */ (function () {
        /**
         * Create a RestorePoints.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function RestorePoints(client) {
            this.client = client;
        }
        RestorePoints.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$8, callback);
        };
        /**
         * Creates a restore point for a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The definition for creating the restore point of this database.
         * @param [options] The optional parameters
         * @returns Promise<Models.RestorePointsCreateResponse>
         */
        RestorePoints.prototype.create = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RestorePoints.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, restorePointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                restorePointName: restorePointName$$1,
                options: options
            }, getOperationSpec$M, callback);
        };
        RestorePoints.prototype.deleteMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, restorePointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                restorePointName: restorePointName$$1,
                options: options
            }, deleteMethodOperationSpec$9, callback);
        };
        /**
         * Creates a restore point for a data warehouse.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The definition for creating the restore point of this database.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RestorePoints.prototype.beginCreate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        return RestorePoints;
    }());
    // Operation Specifications
    var serializer$T = new msRest.Serializer(Mappers$T);
    var listByDatabaseOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePointListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };
    var getOperationSpec$M = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            restorePointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RestorePoint
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };
    var deleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            restorePointName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CreateDatabaseRestorePointDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RestorePoint
            },
            201: {
                bodyMapper: RestorePoint
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$T
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$U = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        DatabaseOperationListResult: DatabaseOperationListResult,
        DatabaseOperation: DatabaseOperation,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseOperations. */
    var DatabaseOperations = /** @class */ (function () {
        /**
         * Create a DatabaseOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseOperations(client) {
            this.client = client;
        }
        DatabaseOperations.prototype.cancel = function (resourceGroupName$$1, serverName$$1, databaseName$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                operationId: operationId$$1,
                options: options
            }, cancelOperationSpec$1, callback);
        };
        DatabaseOperations.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$9, callback);
        };
        DatabaseOperations.prototype.listByDatabaseNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDatabaseNextOperationSpec$2, callback);
        };
        return DatabaseOperations;
    }());
    // Operation Specifications
    var serializer$U = new msRest.Serializer(Mappers$U);
    var cancelOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations/{operationId}/cancel",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$U
    };
    var listByDatabaseOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$U
    };
    var listByDatabaseNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$U
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$V = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ElasticPoolOperationListResult: ElasticPoolOperationListResult,
        ElasticPoolOperation: ElasticPoolOperation,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ElasticPoolOperations. */
    var ElasticPoolOperations = /** @class */ (function () {
        /**
         * Create a ElasticPoolOperations.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ElasticPoolOperations(client) {
            this.client = client;
        }
        ElasticPoolOperations.prototype.cancel = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                operationId: operationId$$1,
                options: options
            }, cancelOperationSpec$2, callback);
        };
        ElasticPoolOperations.prototype.listByElasticPool = function (resourceGroupName$$1, serverName$$1, elasticPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                elasticPoolName: elasticPoolName$$1,
                options: options
            }, listByElasticPoolOperationSpec$3, callback);
        };
        ElasticPoolOperations.prototype.listByElasticPoolNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByElasticPoolNextOperationSpec$1, callback);
        };
        return ElasticPoolOperations;
    }());
    // Operation Specifications
    var serializer$V = new msRest.Serializer(Mappers$V);
    var cancelOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations/{operationId}/cancel",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            operationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };
    var listByElasticPoolOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations",
        urlParameters: [
            resourceGroupName,
            serverName,
            elasticPoolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };
    var listByElasticPoolNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ElasticPoolOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$V
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$W = /*#__PURE__*/Object.freeze({
        LocationCapabilities: LocationCapabilities,
        ServerVersionCapability: ServerVersionCapability,
        EditionCapability: EditionCapability,
        ServiceObjectiveCapability: ServiceObjectiveCapability,
        MaxSizeRangeCapability: MaxSizeRangeCapability,
        MaxSizeCapability: MaxSizeCapability,
        LogSizeCapability: LogSizeCapability,
        PerformanceLevelCapability: PerformanceLevelCapability,
        Sku: Sku,
        LicenseTypeCapability: LicenseTypeCapability,
        ElasticPoolEditionCapability: ElasticPoolEditionCapability,
        ElasticPoolPerformanceLevelCapability: ElasticPoolPerformanceLevelCapability,
        ElasticPoolPerDatabaseMaxPerformanceLevelCapability: ElasticPoolPerDatabaseMaxPerformanceLevelCapability,
        ElasticPoolPerDatabaseMinPerformanceLevelCapability: ElasticPoolPerDatabaseMinPerformanceLevelCapability,
        ManagedInstanceVersionCapability: ManagedInstanceVersionCapability,
        ManagedInstanceEditionCapability: ManagedInstanceEditionCapability,
        ManagedInstanceFamilyCapability: ManagedInstanceFamilyCapability,
        ManagedInstanceVcoresCapability: ManagedInstanceVcoresCapability,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Capabilities. */
    var Capabilities = /** @class */ (function () {
        /**
         * Create a Capabilities.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function Capabilities(client) {
            this.client = client;
        }
        Capabilities.prototype.listByLocation = function (locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                options: options
            }, listByLocationOperationSpec$2, callback);
        };
        return Capabilities;
    }());
    // Operation Specifications
    var serializer$W = new msRest.Serializer(Mappers$W);
    var listByLocationOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            include,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LocationCapabilities
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$W
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$X = /*#__PURE__*/Object.freeze({
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        CloudError: CloudError,
        VulnerabilityAssessmentScanRecordListResult: VulnerabilityAssessmentScanRecordListResult,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DatabaseVulnerabilityAssessmentScans. */
    var DatabaseVulnerabilityAssessmentScans = /** @class */ (function () {
        /**
         * Create a DatabaseVulnerabilityAssessmentScans.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function DatabaseVulnerabilityAssessmentScans(client) {
            this.client = client;
        }
        DatabaseVulnerabilityAssessmentScans.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, scanId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                scanId: scanId$$1,
                options: options
            }, getOperationSpec$N, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        DatabaseVulnerabilityAssessmentScans.prototype.initiateScan = function (resourceGroupName$$1, serverName$$1, databaseName$$1, scanId$$1, options) {
            return this.beginInitiateScan(resourceGroupName$$1, serverName$$1, databaseName$$1, scanId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DatabaseVulnerabilityAssessmentScans.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$a, callback);
        };
        DatabaseVulnerabilityAssessmentScans.prototype.exportMethod = function (resourceGroupName$$1, serverName$$1, databaseName$$1, scanId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                scanId: scanId$$1,
                options: options
            }, exportMethodOperationSpec, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DatabaseVulnerabilityAssessmentScans.prototype.beginInitiateScan = function (resourceGroupName$$1, serverName$$1, databaseName$$1, scanId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                scanId: scanId$$1,
                options: options
            }, beginInitiateScanOperationSpec, options);
        };
        DatabaseVulnerabilityAssessmentScans.prototype.listByDatabaseNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDatabaseNextOperationSpec$3, callback);
        };
        return DatabaseVulnerabilityAssessmentScans;
    }());
    // Operation Specifications
    var serializer$X = new msRest.Serializer(Mappers$X);
    var getOperationSpec$N = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecord
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var listByDatabaseOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var exportMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var beginInitiateScanOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };
    var listByDatabaseNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$X
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$Y = /*#__PURE__*/Object.freeze({
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseVulnerabilityAssessmentRuleBaselines. */
    var ManagedDatabaseVulnerabilityAssessmentRuleBaselines = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseVulnerabilityAssessmentRuleBaselines.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseVulnerabilityAssessmentRuleBaselines(client) {
            this.client = client;
        }
        ManagedDatabaseVulnerabilityAssessmentRuleBaselines.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, ruleId$$1, baselineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                ruleId: ruleId$$1,
                baselineName: baselineName$$1,
                options: options
            }, getOperationSpec$O, callback);
        };
        ManagedDatabaseVulnerabilityAssessmentRuleBaselines.prototype.createOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, ruleId$$1, baselineName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                ruleId: ruleId$$1,
                baselineName: baselineName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$f, callback);
        };
        ManagedDatabaseVulnerabilityAssessmentRuleBaselines.prototype.deleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, ruleId$$1, baselineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                ruleId: ruleId$$1,
                baselineName: baselineName$$1,
                options: options
            }, deleteMethodOperationSpec$a, callback);
        };
        return ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
    }());
    // Operation Specifications
    var serializer$Y = new msRest.Serializer(Mappers$Y);
    var getOperationSpec$O = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var createOrUpdateOperationSpec$f = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseVulnerabilityAssessmentRuleBaseline, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentRuleBaseline
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };
    var deleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            ruleId,
            baselineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$Z = /*#__PURE__*/Object.freeze({
        VulnerabilityAssessmentScanRecordListResult: VulnerabilityAssessmentScanRecordListResult,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        CloudError: CloudError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseVulnerabilityAssessmentScans. */
    var ManagedDatabaseVulnerabilityAssessmentScans = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseVulnerabilityAssessmentScans.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseVulnerabilityAssessmentScans(client) {
            this.client = client;
        }
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.listByDatabase = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$b, callback);
        };
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, scanId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                scanId: scanId$$1,
                options: options
            }, getOperationSpec$P, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.initiateScan = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, scanId$$1, options) {
            return this.beginInitiateScan(resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, scanId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.exportMethod = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, scanId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                scanId: scanId$$1,
                options: options
            }, exportMethodOperationSpec$1, callback);
        };
        /**
         * Executes a Vulnerability Assessment database scan.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param databaseName The name of the database.
         * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.beginInitiateScan = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, scanId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                scanId: scanId$$1,
                options: options
            }, beginInitiateScanOperationSpec$1, options);
        };
        ManagedDatabaseVulnerabilityAssessmentScans.prototype.listByDatabaseNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDatabaseNextOperationSpec$4, callback);
        };
        return ManagedDatabaseVulnerabilityAssessmentScans;
    }());
    // Operation Specifications
    var serializer$Z = new msRest.Serializer(Mappers$Z);
    var listByDatabaseOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var getOperationSpec$P = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecord
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var exportMethodOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessmentScansExport
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var beginInitiateScanOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };
    var listByDatabaseNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VulnerabilityAssessmentScanRecordListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$Z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$_ = /*#__PURE__*/Object.freeze({
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedDatabaseVulnerabilityAssessments. */
    var ManagedDatabaseVulnerabilityAssessments = /** @class */ (function () {
        /**
         * Create a ManagedDatabaseVulnerabilityAssessments.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedDatabaseVulnerabilityAssessments(client) {
            this.client = client;
        }
        ManagedDatabaseVulnerabilityAssessments.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$Q, callback);
        };
        ManagedDatabaseVulnerabilityAssessments.prototype.createOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$g, callback);
        };
        ManagedDatabaseVulnerabilityAssessments.prototype.deleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                databaseName: databaseName$$1,
                options: options
            }, deleteMethodOperationSpec$b, callback);
        };
        return ManagedDatabaseVulnerabilityAssessments;
    }());
    // Operation Specifications
    var serializer$_ = new msRest.Serializer(Mappers$_);
    var getOperationSpec$Q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };
    var createOrUpdateOperationSpec$g = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DatabaseVulnerabilityAssessment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            201: {
                bodyMapper: DatabaseVulnerabilityAssessment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };
    var deleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            databaseName,
            vulnerabilityAssessmentName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$_
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$10 = /*#__PURE__*/Object.freeze({
        InstanceFailoverGroup: InstanceFailoverGroup,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        CloudError: CloudError,
        InstanceFailoverGroupListResult: InstanceFailoverGroupListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a InstanceFailoverGroups. */
    var InstanceFailoverGroups = /** @class */ (function () {
        /**
         * Create a InstanceFailoverGroups.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function InstanceFailoverGroups(client) {
            this.client = client;
        }
        InstanceFailoverGroups.prototype.get = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                locationName: locationName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, getOperationSpec$R, callback);
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstanceFailoverGroupsCreateOrUpdateResponse>
         */
        InstanceFailoverGroups.prototype.createOrUpdate = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, locationName$$1, failoverGroupName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        InstanceFailoverGroups.prototype.deleteMethod = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        InstanceFailoverGroups.prototype.listByLocation = function (resourceGroupName$$1, locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                locationName: locationName$$1,
                options: options
            }, listByLocationOperationSpec$3, callback);
        };
        /**
         * Fails over from the current primary managed instance to this managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstanceFailoverGroupsFailoverResponse>
         */
        InstanceFailoverGroups.prototype.failover = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options) {
            return this.beginFailover(resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Fails over from the current primary managed instance to this managed instance. This operation
         * might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<Models.InstanceFailoverGroupsForceFailoverAllowDataLossResponse>
         */
        InstanceFailoverGroups.prototype.forceFailoverAllowDataLoss = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options) {
            return this.beginForceFailoverAllowDataLoss(resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param parameters The failover group parameters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                locationName: locationName$$1,
                failoverGroupName: failoverGroupName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$l, options);
        };
        /**
         * Deletes a failover group.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginDeleteMethod = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                locationName: locationName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$f, options);
        };
        /**
         * Fails over from the current primary managed instance to this managed instance.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginFailover = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                locationName: locationName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, beginFailoverOperationSpec$2, options);
        };
        /**
         * Fails over from the current primary managed instance to this managed instance. This operation
         * might result in data loss.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param locationName The name of the region where the resource is located.
         * @param failoverGroupName The name of the failover group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        InstanceFailoverGroups.prototype.beginForceFailoverAllowDataLoss = function (resourceGroupName$$1, locationName$$1, failoverGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                locationName: locationName$$1,
                failoverGroupName: failoverGroupName$$1,
                options: options
            }, beginForceFailoverAllowDataLossOperationSpec$1, options);
        };
        InstanceFailoverGroups.prototype.listByLocationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByLocationNextOperationSpec$2, callback);
        };
        return InstanceFailoverGroups;
    }());
    // Operation Specifications
    var serializer$10 = new msRest.Serializer(Mappers$10);
    var getOperationSpec$R = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var listByLocationOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups",
        urlParameters: [
            resourceGroupName,
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var beginCreateOrUpdateOperationSpec$l = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, InstanceFailoverGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            201: {
                bodyMapper: InstanceFailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var beginDeleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var beginFailoverOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/failover",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var beginForceFailoverAllowDataLossOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss",
        urlParameters: [
            resourceGroupName,
            locationName,
            failoverGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroup
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };
    var listByLocationNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: InstanceFailoverGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$10
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$11 = /*#__PURE__*/Object.freeze({
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        BackupShortTermRetentionPolicyListResult: BackupShortTermRetentionPolicyListResult,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackupShortTermRetentionPolicies. */
    var BackupShortTermRetentionPolicies = /** @class */ (function () {
        /**
         * Create a BackupShortTermRetentionPolicies.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function BackupShortTermRetentionPolicies(client) {
            this.client = client;
        }
        BackupShortTermRetentionPolicies.prototype.get = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, getOperationSpec$S, callback);
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupShortTermRetentionPoliciesCreateOrUpdateResponse>
         */
        BackupShortTermRetentionPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackupShortTermRetentionPoliciesUpdateResponse>
         */
        BackupShortTermRetentionPolicies.prototype.update = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        BackupShortTermRetentionPolicies.prototype.listByDatabase = function (resourceGroupName$$1, serverName$$1, databaseName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                options: options
            }, listByDatabaseOperationSpec$c, callback);
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupShortTermRetentionPolicies.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$m, options);
        };
        /**
         * Updates a database's short term retention policy.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param databaseName The name of the database.
         * @param parameters The short term retention policy info.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackupShortTermRetentionPolicies.prototype.beginUpdate = function (resourceGroupName$$1, serverName$$1, databaseName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                databaseName: databaseName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$9, options);
        };
        BackupShortTermRetentionPolicies.prototype.listByDatabaseNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDatabaseNextOperationSpec$5, callback);
        };
        return BackupShortTermRetentionPolicies;
    }());
    // Operation Specifications
    var serializer$11 = new msRest.Serializer(Mappers$11);
    var getOperationSpec$S = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var listByDatabaseOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var beginCreateOrUpdateOperationSpec$m = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupShortTermRetentionPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var beginUpdateOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}",
        urlParameters: [
            resourceGroupName,
            serverName,
            databaseName,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BackupShortTermRetentionPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicy
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };
    var listByDatabaseNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackupShortTermRetentionPolicyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$11
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$12 = /*#__PURE__*/Object.freeze({
        TdeCertificate: TdeCertificate,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TdeCertificates. */
    var TdeCertificates = /** @class */ (function () {
        /**
         * Create a TdeCertificates.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function TdeCertificates(client) {
            this.client = client;
        }
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        TdeCertificates.prototype.create = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, serverName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serverName The name of the server.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        TdeCertificates.prototype.beginCreate = function (resourceGroupName$$1, serverName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                serverName: serverName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        return TdeCertificates;
    }());
    // Operation Specifications
    var serializer$12 = new msRest.Serializer(Mappers$12);
    var beginCreateOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/tdeCertificates",
        urlParameters: [
            resourceGroupName,
            serverName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TdeCertificate, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$12
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$13 = /*#__PURE__*/Object.freeze({
        TdeCertificate: TdeCertificate,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        ManagedInstanceKey: ManagedInstanceKey,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceTdeCertificates. */
    var ManagedInstanceTdeCertificates = /** @class */ (function () {
        /**
         * Create a ManagedInstanceTdeCertificates.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceTdeCertificates(client) {
            this.client = client;
        }
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstanceTdeCertificates.prototype.create = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, managedInstanceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a TDE certificate for a given server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested TDE certificate to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceTdeCertificates.prototype.beginCreate = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$3, options);
        };
        return ManagedInstanceTdeCertificates;
    }());
    // Operation Specifications
    var serializer$13 = new msRest.Serializer(Mappers$13);
    var beginCreateOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/tdeCertificates",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TdeCertificate, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$13
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$14 = /*#__PURE__*/Object.freeze({
        ManagedInstanceKeyListResult: ManagedInstanceKeyListResult,
        ManagedInstanceKey: ManagedInstanceKey,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceKeys. */
    var ManagedInstanceKeys = /** @class */ (function () {
        /**
         * Create a ManagedInstanceKeys.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceKeys(client) {
            this.client = client;
        }
        ManagedInstanceKeys.prototype.listByInstance = function (resourceGroupName$$1, managedInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                options: options
            }, listByInstanceOperationSpec$1, callback);
        };
        ManagedInstanceKeys.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, keyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                keyName: keyName$$1,
                options: options
            }, getOperationSpec$T, callback);
        };
        /**
         * Creates or updates a managed instance key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be operated on (updated or created).
         * @param parameters The requested managed instance key resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstanceKeysCreateOrUpdateResponse>
         */
        ManagedInstanceKeys.prototype.createOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, keyName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, managedInstanceName$$1, keyName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the managed instance key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedInstanceKeys.prototype.deleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, keyName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, managedInstanceName$$1, keyName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a managed instance key.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be operated on (updated or created).
         * @param parameters The requested managed instance key resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceKeys.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, keyName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                keyName: keyName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$n, options);
        };
        /**
         * Deletes the managed instance key with the given name.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param keyName The name of the managed instance key to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceKeys.prototype.beginDeleteMethod = function (resourceGroupName$$1, managedInstanceName$$1, keyName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                keyName: keyName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$g, options);
        };
        ManagedInstanceKeys.prototype.listByInstanceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByInstanceNextOperationSpec$1, callback);
        };
        return ManagedInstanceKeys;
    }());
    // Operation Specifications
    var serializer$14 = new msRest.Serializer(Mappers$14);
    var listByInstanceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            filter1,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var getOperationSpec$T = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var beginCreateOrUpdateOperationSpec$n = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedInstanceKey, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstanceKey
            },
            201: {
                bodyMapper: ManagedInstanceKey
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var beginDeleteMethodOperationSpec$g = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            keyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };
    var listByInstanceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$14
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$15 = /*#__PURE__*/Object.freeze({
        ManagedInstanceEncryptionProtectorListResult: ManagedInstanceEncryptionProtectorListResult,
        ManagedInstanceEncryptionProtector: ManagedInstanceEncryptionProtector,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        RecoverableDatabase: RecoverableDatabase,
        RestorableDroppedDatabase: RestorableDroppedDatabase,
        TrackedResource: TrackedResource,
        ServerConnectionPolicy: ServerConnectionPolicy,
        DatabaseSecurityAlertPolicy: DatabaseSecurityAlertPolicy,
        DataMaskingPolicy: DataMaskingPolicy,
        DataMaskingRule: DataMaskingRule,
        FirewallRule: FirewallRule,
        GeoBackupPolicy: GeoBackupPolicy,
        ImportExportResponse: ImportExportResponse,
        RecommendedElasticPool: RecommendedElasticPool,
        RecommendedElasticPoolMetric: RecommendedElasticPoolMetric,
        ReplicationLink: ReplicationLink,
        ServerAzureADAdministrator: ServerAzureADAdministrator,
        ServerCommunicationLink: ServerCommunicationLink,
        ServiceObjective: ServiceObjective,
        ElasticPoolActivity: ElasticPoolActivity,
        ElasticPoolDatabaseActivity: ElasticPoolDatabaseActivity,
        RecommendedIndex: RecommendedIndex,
        OperationImpact: OperationImpact,
        TransparentDataEncryption: TransparentDataEncryption,
        ServiceTierAdvisor: ServiceTierAdvisor,
        SloUsageMetric: SloUsageMetric,
        TransparentDataEncryptionActivity: TransparentDataEncryptionActivity,
        DatabaseAutomaticTuning: DatabaseAutomaticTuning,
        AutomaticTuningOptions: AutomaticTuningOptions,
        EncryptionProtector: EncryptionProtector,
        FailoverGroup: FailoverGroup,
        FailoverGroupReadWriteEndpoint: FailoverGroupReadWriteEndpoint,
        FailoverGroupReadOnlyEndpoint: FailoverGroupReadOnlyEndpoint,
        PartnerInfo: PartnerInfo,
        ManagedInstance: ManagedInstance,
        ResourceIdentity: ResourceIdentity,
        Sku: Sku,
        ServerKey: ServerKey,
        Server: Server,
        SyncAgent: SyncAgent,
        SyncAgentLinkedDatabase: SyncAgentLinkedDatabase,
        SyncGroup: SyncGroup,
        SyncGroupSchema: SyncGroupSchema,
        SyncGroupSchemaTable: SyncGroupSchemaTable,
        SyncGroupSchemaTableColumn: SyncGroupSchemaTableColumn,
        SyncMember: SyncMember,
        SubscriptionUsage: SubscriptionUsage,
        VirtualNetworkRule: VirtualNetworkRule,
        ExtendedDatabaseBlobAuditingPolicy: ExtendedDatabaseBlobAuditingPolicy,
        ExtendedServerBlobAuditingPolicy: ExtendedServerBlobAuditingPolicy,
        ServerBlobAuditingPolicy: ServerBlobAuditingPolicy,
        DatabaseBlobAuditingPolicy: DatabaseBlobAuditingPolicy,
        DatabaseVulnerabilityAssessmentRuleBaseline: DatabaseVulnerabilityAssessmentRuleBaseline,
        DatabaseVulnerabilityAssessmentRuleBaselineItem: DatabaseVulnerabilityAssessmentRuleBaselineItem,
        DatabaseVulnerabilityAssessment: DatabaseVulnerabilityAssessment,
        VulnerabilityAssessmentRecurringScansProperties: VulnerabilityAssessmentRecurringScansProperties,
        JobAgent: JobAgent,
        JobCredential: JobCredential,
        JobExecution: JobExecution,
        JobExecutionTarget: JobExecutionTarget,
        Job: Job,
        JobSchedule: JobSchedule,
        JobStep: JobStep,
        JobStepAction: JobStepAction,
        JobStepOutput: JobStepOutput,
        JobStepExecutionOptions: JobStepExecutionOptions,
        JobTargetGroup: JobTargetGroup,
        JobTarget: JobTarget,
        JobVersion: JobVersion,
        LongTermRetentionBackup: LongTermRetentionBackup,
        BackupLongTermRetentionPolicy: BackupLongTermRetentionPolicy,
        ManagedDatabase: ManagedDatabase,
        ServerAutomaticTuning: ServerAutomaticTuning,
        AutomaticTuningServerOptions: AutomaticTuningServerOptions,
        ServerDnsAlias: ServerDnsAlias,
        ServerSecurityAlertPolicy: ServerSecurityAlertPolicy,
        RestorePoint: RestorePoint,
        DatabaseOperation: DatabaseOperation,
        ElasticPoolOperation: ElasticPoolOperation,
        Database: Database,
        ElasticPool: ElasticPool,
        ElasticPoolPerDatabaseSettings: ElasticPoolPerDatabaseSettings,
        VulnerabilityAssessmentScanRecord: VulnerabilityAssessmentScanRecord,
        VulnerabilityAssessmentScanError: VulnerabilityAssessmentScanError,
        DatabaseVulnerabilityAssessmentScansExport: DatabaseVulnerabilityAssessmentScansExport,
        InstanceFailoverGroup: InstanceFailoverGroup,
        InstanceFailoverGroupReadWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint,
        InstanceFailoverGroupReadOnlyEndpoint: InstanceFailoverGroupReadOnlyEndpoint,
        PartnerRegionInfo: PartnerRegionInfo,
        ManagedInstancePairInfo: ManagedInstancePairInfo,
        BackupShortTermRetentionPolicy: BackupShortTermRetentionPolicy,
        TdeCertificate: TdeCertificate,
        ManagedInstanceKey: ManagedInstanceKey
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedInstanceEncryptionProtectors. */
    var ManagedInstanceEncryptionProtectors = /** @class */ (function () {
        /**
         * Create a ManagedInstanceEncryptionProtectors.
         * @param {SqlManagementClientContext} client Reference to the service client.
         */
        function ManagedInstanceEncryptionProtectors(client) {
            this.client = client;
        }
        ManagedInstanceEncryptionProtectors.prototype.listByInstance = function (resourceGroupName$$1, managedInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                options: options
            }, listByInstanceOperationSpec$2, callback);
        };
        ManagedInstanceEncryptionProtectors.prototype.get = function (resourceGroupName$$1, managedInstanceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                options: options
            }, getOperationSpec$U, callback);
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedInstanceEncryptionProtectorsCreateOrUpdateResponse>
         */
        ManagedInstanceEncryptionProtectors.prototype.createOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, managedInstanceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an existing encryption protector.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param managedInstanceName The name of the managed instance.
         * @param parameters The requested encryption protector resource state.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedInstanceEncryptionProtectors.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, managedInstanceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                managedInstanceName: managedInstanceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$o, options);
        };
        ManagedInstanceEncryptionProtectors.prototype.listByInstanceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByInstanceNextOperationSpec$2, callback);
        };
        return ManagedInstanceEncryptionProtectors;
    }());
    // Operation Specifications
    var serializer$15 = new msRest.Serializer(Mappers$15);
    var listByInstanceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var getOperationSpec$U = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtector
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var beginCreateOrUpdateOperationSpec$o = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}",
        urlParameters: [
            resourceGroupName,
            managedInstanceName,
            encryptionProtectorName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedInstanceEncryptionProtector, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtector
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };
    var listByInstanceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedInstanceEncryptionProtectorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$15
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-sql";
    var packageVersion = "1.0.0-preview";
    var SqlManagementClientContext = /** @class */ (function (_super) {
        __extends(SqlManagementClientContext, _super);
        /**
         * Initializes a new instance of the SqlManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function SqlManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SqlManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SqlManagementClient = /** @class */ (function (_super) {
        __extends(SqlManagementClient, _super);
        /**
         * Initializes a new instance of the SqlManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function SqlManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.recoverableDatabases = new RecoverableDatabases(_this);
            _this.restorableDroppedDatabases = new RestorableDroppedDatabases(_this);
            _this.servers = new Servers(_this);
            _this.serverConnectionPolicies = new ServerConnectionPolicies(_this);
            _this.databaseThreatDetectionPolicies = new DatabaseThreatDetectionPolicies(_this);
            _this.dataMaskingPolicies = new DataMaskingPolicies(_this);
            _this.dataMaskingRules = new DataMaskingRules(_this);
            _this.firewallRules = new FirewallRules(_this);
            _this.geoBackupPolicies = new GeoBackupPolicies(_this);
            _this.databases = new Databases(_this);
            _this.elasticPools = new ElasticPools(_this);
            _this.recommendedElasticPools = new RecommendedElasticPools(_this);
            _this.replicationLinks = new ReplicationLinks(_this);
            _this.serverAzureADAdministrators = new ServerAzureADAdministrators(_this);
            _this.serverCommunicationLinks = new ServerCommunicationLinks(_this);
            _this.serviceObjectives = new ServiceObjectives(_this);
            _this.elasticPoolActivities = new ElasticPoolActivities(_this);
            _this.elasticPoolDatabaseActivities = new ElasticPoolDatabaseActivities(_this);
            _this.serviceTierAdvisors = new ServiceTierAdvisors(_this);
            _this.transparentDataEncryptions = new TransparentDataEncryptions(_this);
            _this.transparentDataEncryptionActivities = new TransparentDataEncryptionActivities(_this);
            _this.serverUsages = new ServerUsages(_this);
            _this.databaseUsages = new DatabaseUsages(_this);
            _this.databaseAutomaticTuning = new DatabaseAutomaticTuningOperations(_this);
            _this.encryptionProtectors = new EncryptionProtectors(_this);
            _this.failoverGroups = new FailoverGroups(_this);
            _this.managedInstances = new ManagedInstances(_this);
            _this.operations = new Operations(_this);
            _this.serverKeys = new ServerKeys(_this);
            _this.syncAgents = new SyncAgents(_this);
            _this.syncGroups = new SyncGroups(_this);
            _this.syncMembers = new SyncMembers(_this);
            _this.subscriptionUsages = new SubscriptionUsages(_this);
            _this.virtualNetworkRules = new VirtualNetworkRules(_this);
            _this.extendedDatabaseBlobAuditingPolicies = new ExtendedDatabaseBlobAuditingPolicies(_this);
            _this.extendedServerBlobAuditingPolicies = new ExtendedServerBlobAuditingPolicies(_this);
            _this.serverBlobAuditingPolicies = new ServerBlobAuditingPolicies(_this);
            _this.databaseBlobAuditingPolicies = new DatabaseBlobAuditingPolicies(_this);
            _this.databaseVulnerabilityAssessmentRuleBaselines = new DatabaseVulnerabilityAssessmentRuleBaselines(_this);
            _this.databaseVulnerabilityAssessments = new DatabaseVulnerabilityAssessments(_this);
            _this.jobAgents = new JobAgents(_this);
            _this.jobCredentials = new JobCredentials(_this);
            _this.jobExecutions = new JobExecutions(_this);
            _this.jobs = new Jobs(_this);
            _this.jobStepExecutions = new JobStepExecutions(_this);
            _this.jobSteps = new JobSteps(_this);
            _this.jobTargetExecutions = new JobTargetExecutions(_this);
            _this.jobTargetGroups = new JobTargetGroups(_this);
            _this.jobVersions = new JobVersions(_this);
            _this.longTermRetentionBackups = new LongTermRetentionBackups(_this);
            _this.backupLongTermRetentionPolicies = new BackupLongTermRetentionPolicies(_this);
            _this.managedDatabases = new ManagedDatabases(_this);
            _this.serverAutomaticTuning = new ServerAutomaticTuningOperations(_this);
            _this.serverDnsAliases = new ServerDnsAliases(_this);
            _this.serverSecurityAlertPolicies = new ServerSecurityAlertPolicies(_this);
            _this.restorePoints = new RestorePoints(_this);
            _this.databaseOperations = new DatabaseOperations(_this);
            _this.elasticPoolOperations = new ElasticPoolOperations(_this);
            _this.capabilities = new Capabilities(_this);
            _this.databaseVulnerabilityAssessmentScans = new DatabaseVulnerabilityAssessmentScans(_this);
            _this.managedDatabaseVulnerabilityAssessmentRuleBaselines = new ManagedDatabaseVulnerabilityAssessmentRuleBaselines(_this);
            _this.managedDatabaseVulnerabilityAssessmentScans = new ManagedDatabaseVulnerabilityAssessmentScans(_this);
            _this.managedDatabaseVulnerabilityAssessments = new ManagedDatabaseVulnerabilityAssessments(_this);
            _this.instanceFailoverGroups = new InstanceFailoverGroups(_this);
            _this.backupShortTermRetentionPolicies = new BackupShortTermRetentionPolicies(_this);
            _this.tdeCertificates = new TdeCertificates(_this);
            _this.managedInstanceTdeCertificates = new ManagedInstanceTdeCertificates(_this);
            _this.managedInstanceKeys = new ManagedInstanceKeys(_this);
            _this.managedInstanceEncryptionProtectors = new ManagedInstanceEncryptionProtectors(_this);
            return _this;
        }
        return SqlManagementClient;
    }(SqlManagementClientContext));

    exports.SqlManagementClient = SqlManagementClient;
    exports.SqlManagementClientContext = SqlManagementClientContext;
    exports.SqlManagementModels = index;
    exports.SqlManagementMappers = mappers;
    exports.RecoverableDatabases = RecoverableDatabases;
    exports.RestorableDroppedDatabases = RestorableDroppedDatabases;
    exports.Servers = Servers;
    exports.ServerConnectionPolicies = ServerConnectionPolicies;
    exports.DatabaseThreatDetectionPolicies = DatabaseThreatDetectionPolicies;
    exports.DataMaskingPolicies = DataMaskingPolicies;
    exports.DataMaskingRules = DataMaskingRules;
    exports.FirewallRules = FirewallRules;
    exports.GeoBackupPolicies = GeoBackupPolicies;
    exports.Databases = Databases;
    exports.ElasticPools = ElasticPools;
    exports.RecommendedElasticPools = RecommendedElasticPools;
    exports.ReplicationLinks = ReplicationLinks;
    exports.ServerAzureADAdministrators = ServerAzureADAdministrators;
    exports.ServerCommunicationLinks = ServerCommunicationLinks;
    exports.ServiceObjectives = ServiceObjectives;
    exports.ElasticPoolActivities = ElasticPoolActivities;
    exports.ElasticPoolDatabaseActivities = ElasticPoolDatabaseActivities;
    exports.ServiceTierAdvisors = ServiceTierAdvisors;
    exports.TransparentDataEncryptions = TransparentDataEncryptions;
    exports.TransparentDataEncryptionActivities = TransparentDataEncryptionActivities;
    exports.ServerUsages = ServerUsages;
    exports.DatabaseUsages = DatabaseUsages;
    exports.DatabaseAutomaticTuningOperations = DatabaseAutomaticTuningOperations;
    exports.EncryptionProtectors = EncryptionProtectors;
    exports.FailoverGroups = FailoverGroups;
    exports.ManagedInstances = ManagedInstances;
    exports.Operations = Operations;
    exports.ServerKeys = ServerKeys;
    exports.SyncAgents = SyncAgents;
    exports.SyncGroups = SyncGroups;
    exports.SyncMembers = SyncMembers;
    exports.SubscriptionUsages = SubscriptionUsages;
    exports.VirtualNetworkRules = VirtualNetworkRules;
    exports.ExtendedDatabaseBlobAuditingPolicies = ExtendedDatabaseBlobAuditingPolicies;
    exports.ExtendedServerBlobAuditingPolicies = ExtendedServerBlobAuditingPolicies;
    exports.ServerBlobAuditingPolicies = ServerBlobAuditingPolicies;
    exports.DatabaseBlobAuditingPolicies = DatabaseBlobAuditingPolicies;
    exports.DatabaseVulnerabilityAssessmentRuleBaselines = DatabaseVulnerabilityAssessmentRuleBaselines;
    exports.DatabaseVulnerabilityAssessments = DatabaseVulnerabilityAssessments;
    exports.JobAgents = JobAgents;
    exports.JobCredentials = JobCredentials;
    exports.JobExecutions = JobExecutions;
    exports.Jobs = Jobs;
    exports.JobStepExecutions = JobStepExecutions;
    exports.JobSteps = JobSteps;
    exports.JobTargetExecutions = JobTargetExecutions;
    exports.JobTargetGroups = JobTargetGroups;
    exports.JobVersions = JobVersions;
    exports.LongTermRetentionBackups = LongTermRetentionBackups;
    exports.BackupLongTermRetentionPolicies = BackupLongTermRetentionPolicies;
    exports.ManagedDatabases = ManagedDatabases;
    exports.ServerAutomaticTuningOperations = ServerAutomaticTuningOperations;
    exports.ServerDnsAliases = ServerDnsAliases;
    exports.ServerSecurityAlertPolicies = ServerSecurityAlertPolicies;
    exports.RestorePoints = RestorePoints;
    exports.DatabaseOperations = DatabaseOperations;
    exports.ElasticPoolOperations = ElasticPoolOperations;
    exports.Capabilities = Capabilities;
    exports.DatabaseVulnerabilityAssessmentScans = DatabaseVulnerabilityAssessmentScans;
    exports.ManagedDatabaseVulnerabilityAssessmentRuleBaselines = ManagedDatabaseVulnerabilityAssessmentRuleBaselines;
    exports.ManagedDatabaseVulnerabilityAssessmentScans = ManagedDatabaseVulnerabilityAssessmentScans;
    exports.ManagedDatabaseVulnerabilityAssessments = ManagedDatabaseVulnerabilityAssessments;
    exports.InstanceFailoverGroups = InstanceFailoverGroups;
    exports.BackupShortTermRetentionPolicies = BackupShortTermRetentionPolicies;
    exports.TdeCertificates = TdeCertificates;
    exports.ManagedInstanceTdeCertificates = ManagedInstanceTdeCertificates;
    exports.ManagedInstanceKeys = ManagedInstanceKeys;
    exports.ManagedInstanceEncryptionProtectors = ManagedInstanceEncryptionProtectors;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-sql.js.map
