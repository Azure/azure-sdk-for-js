/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/databaseVulnerabilityAssessmentScansMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a DatabaseVulnerabilityAssessmentScans. */
export class DatabaseVulnerabilityAssessmentScans {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a DatabaseVulnerabilityAssessmentScans.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the vulnerability assessment scans of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseResponse>
   */
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param callback The callback
   */
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>): void;
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>, callback?: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>): Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        options
      },
      listByDatabaseOperationSpec,
      callback) as Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseResponse>;
  }

  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseVulnerabilityAssessmentScansGetResponse>
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseVulnerabilityAssessmentScansGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, callback: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecord>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecord>): void;
  get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecord>, callback?: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecord>): Promise<Models.DatabaseVulnerabilityAssessmentScansGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        scanId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DatabaseVulnerabilityAssessmentScansGetResponse>;
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  initiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginInitiateScan(resourceGroupName,serverName,databaseName,scanId,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Convert an existing scan result to a human readable format. If already exists nothing happens
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the scanned database.
   * @param scanId The vulnerability assessment scan Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseVulnerabilityAssessmentScansExportMethodResponse>
   */
  exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseVulnerabilityAssessmentScansExportMethodResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the scanned database.
   * @param scanId The vulnerability assessment scan Id.
   * @param callback The callback
   */
  exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, callback: msRest.ServiceCallback<Models.DatabaseVulnerabilityAssessmentScansExport>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the scanned database.
   * @param scanId The vulnerability assessment scan Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatabaseVulnerabilityAssessmentScansExport>): void;
  exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatabaseVulnerabilityAssessmentScansExport>, callback?: msRest.ServiceCallback<Models.DatabaseVulnerabilityAssessmentScansExport>): Promise<Models.DatabaseVulnerabilityAssessmentScansExportMethodResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        scanId,
        options
      },
      exportMethodOperationSpec,
      callback) as Promise<Models.DatabaseVulnerabilityAssessmentScansExportMethodResponse>;
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginInitiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        scanId,
        options
      },
      beginInitiateScanOperationSpec,
      options);
  }

  /**
   * Lists the vulnerability assessment scans of a database.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse>
   */
  listByDatabaseNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDatabaseNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabaseNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>): void;
  listByDatabaseNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>, callback?: msRest.ServiceCallback<Models.VulnerabilityAssessmentScanRecordListResult>): Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDatabaseNextOperationSpec,
      callback) as Promise<Models.DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecord
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const exportMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseVulnerabilityAssessmentScansExport
    },
    201: {
      bodyMapper: Mappers.DatabaseVulnerabilityAssessmentScansExport
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginInitiateScanOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDatabaseNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
