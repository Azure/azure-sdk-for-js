/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft NetApp.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed etc.
   */
  resource?: string;
  /**
   * Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * Operation description.
   */
  description?: string;
}

/**
 * Dimension of blobs, possibly be blob type or access tier.
 */
export interface Dimension {
  /**
   * Display name of dimension.
   */
  name?: string;
  /**
   * Display name of dimension.
   */
  displayName?: string;
}

/**
 * Metric specification of operation.
 */
export interface MetricSpecification {
  /**
   * Name of metric specification.
   */
  name?: string;
  /**
   * Display name of metric specification.
   */
  displayName?: string;
  /**
   * Display description of metric specification.
   */
  displayDescription?: string;
  /**
   * Unit could be Bytes or Count.
   */
  unit?: string;
  /**
   * Dimensions of blobs, including blob type and access tier.
   */
  dimensions?: Dimension[];
  /**
   * Aggregation type could be Average.
   */
  aggregationType?: string;
  /**
   * The property to decide fill gap with zero or not.
   */
  fillGapWithZero?: boolean;
  /**
   * The category this metric specification belong to, could be Capacity.
   */
  category?: string;
  /**
   * Account Resource Id.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * One property of operation, include metric specifications.
 */
export interface ServiceSpecification {
  /**
   * Metric specifications of operation.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Microsoft.NetApp REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
  /**
   * The origin of operations.
   */
  origin?: string;
  /**
   * One property of operation, include metric specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * Active Directory
 */
export interface ActiveDirectory {
  /**
   * Id of the Active Directory
   */
  activeDirectoryId?: string;
  /**
   * Username of Active Directory domain administrator
   */
  username?: string;
  /**
   * Plain text password of Active Directory domain administrator
   */
  password?: string;
  /**
   * Name of the Active Directory domain
   */
  domain?: string;
  /**
   * Comma separated list of DNS server IP addresses for the Active Directory domain
   */
  dNS?: string;
  /**
   * Status of the Active Directory
   */
  status?: string;
  /**
   * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD
   * and used to mount volumes
   */
  sMBServerName?: string;
  /**
   * The Organizational Unit (OU) within the Windows Active Directory
   */
  organizationalUnit?: string;
}

/**
 * NetApp account resource
 */
export interface NetAppAccount extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Active Directories
   */
  activeDirectories?: ActiveDirectory[];
}

/**
 * NetApp account patch resource
 */
export interface NetAppAccountPatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Active Directories
   */
  activeDirectories?: ActiveDirectory[];
}

/**
 * Capacity pool resource
 */
export interface CapacityPool extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * poolId. UUID v4 used to identify the Pool
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly poolId?: string;
  /**
   * size. Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must
   * be multiply of 4398046511104). Default value: 4398046511104.
   */
  size?: number;
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel?: ServiceLevel;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Capacity pool patch resource
 */
export interface CapacityPoolPatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * size. Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must
   * be multiply of 4398046511104). Default value: 4398046511104.
   */
  size?: number;
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel?: ServiceLevel;
}

/**
 * Volume Export Policy Rule
 */
export interface ExportPolicyRule {
  /**
   * Order index
   */
  ruleIndex?: number;
  /**
   * Read only access
   */
  unixReadOnly?: boolean;
  /**
   * Read and write access
   */
  unixReadWrite?: boolean;
  /**
   * Allows CIFS protocol
   */
  cifs?: boolean;
  /**
   * Allows NFSv3 protocol
   */
  nfsv3?: boolean;
  /**
   * Allows NFSv4 protocol
   */
  nfsv4?: boolean;
  /**
   * Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses
   * and host names
   */
  allowedClients?: string;
}

/**
 * Export policy rule
 */
export interface VolumePropertiesExportPolicy {
  rules?: ExportPolicyRule[];
}

/**
 * Volume resource
 */
export interface Volume extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * FileSystem ID. Unique FileSystem Identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fileSystemId?: string;
  /**
   * Creation Token or File Path. A unique file path for the volume. Used when creating mount
   * targets
   */
  creationToken: string;
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel: ServiceLevel;
  /**
   * usageThreshold. Maximum storage quota allowed for a file system in bytes. This is a soft quota
   * used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Default value:
   * 107374182400.
   */
  usageThreshold?: number;
  /**
   * Export policy rule
   */
  exportPolicy?: VolumePropertiesExportPolicy;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The Azure Resource URI for a delegated subnet. Must have the delegation
   * Microsoft.NetApp/volumes
   */
  subnetId?: string;
}

/**
 * Export policy rule
 */
export interface VolumePatchPropertiesExportPolicy {
  rules?: ExportPolicyRule[];
}

/**
 * Volume patch resource
 */
export interface VolumePatch extends BaseResource {
  /**
   * Resource location
   */
  location?: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * serviceLevel. The service level of the file system. Possible values include: 'Standard',
   * 'Premium', 'Ultra'. Default value: 'Premium'.
   */
  serviceLevel?: ServiceLevel;
  /**
   * usageThreshold. Maximum storage quota allowed for a file system in bytes. This is a soft quota
   * used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Default value:
   * 107374182400.
   */
  usageThreshold?: number;
  /**
   * Export policy rule
   */
  exportPolicy?: VolumePatchPropertiesExportPolicy;
}

/**
 * Mount Target
 */
export interface MountTarget {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * mountTargetId. UUID v4 used to identify the MountTarget
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly mountTargetId?: string;
  /**
   * fileSystemId. UUID v4 used to identify the MountTarget
   */
  fileSystemId: string;
  /**
   * ipAddress. The mount target's IPv4 address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddress?: string;
  /**
   * subnet. The subnet
   */
  subnet?: string;
  /**
   * startIp. The start of IPv4 address range to use when creating a new mount target
   */
  startIp?: string;
  /**
   * endIp. The end of IPv4 address range to use when creating a new mount target
   */
  endIp?: string;
  /**
   * gateway. The gateway of the IPv4 address range to use when creating a new mount target
   */
  gateway?: string;
  /**
   * netmask. The netmask of the IPv4 address range to use when creating a new mount target
   */
  netmask?: string;
  /**
   * smbServerFQDN. The SMB server's Fully Qualified Domain Name, FQDN
   */
  smbServerFqdn?: string;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Snapshot of a Volume
 */
export interface Snapshot extends BaseResource {
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags
   */
  tags?: any;
  /**
   * snapshotId. UUID v4 used to identify the Snapshot
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly snapshotId?: string;
  /**
   * fileSystemId. UUID v4 used to identify the FileSystem
   */
  fileSystemId: string;
  /**
   * name. The creation date of the snapshot
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Azure lifecycle management
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
}

/**
 * Snapshot patch
 */
export interface SnapshotPatch extends BaseResource {
  /**
   * Resource tags
   */
  tags?: any;
}

/**
 * Error response describing why the operation failed.
 */
export interface ErrorModel {
  /**
   * Error code
   */
  code: string;
  /**
   * Detailed error message
   */
  message: string;
}

/**
 * Optional Parameters.
 */
export interface SnapshotsUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Resource tags
   */
  tags?: any;
}

/**
 * An interface representing AzureNetAppFilesManagementClientOptions.
 */
export interface AzureNetAppFilesManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Result of the request to list Cloud Volume operations. It contains a list of operations and a
 * URL link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
}

/**
 * @interface
 * List of NetApp account resources
 * @extends Array<NetAppAccount>
 */
export interface NetAppAccountList extends Array<NetAppAccount> {
}

/**
 * @interface
 * List of capacity pool resources
 * @extends Array<CapacityPool>
 */
export interface CapacityPoolList extends Array<CapacityPool> {
}

/**
 * @interface
 * List of volume resources
 * @extends Array<Volume>
 */
export interface VolumeList extends Array<Volume> {
}

/**
 * @interface
 * List of Mount Targets
 * @extends Array<MountTarget>
 */
export interface MountTargetList extends Array<MountTarget> {
}

/**
 * @interface
 * List of Snapshots
 * @extends Array<Snapshot>
 */
export interface SnapshotsList extends Array<Snapshot> {
}

/**
 * Defines values for ServiceLevel.
 * Possible values include: 'Standard', 'Premium', 'Ultra'
 * @readonly
 * @enum {string}
 */
export type ServiceLevel = 'Standard' | 'Premium' | 'Ultra';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccountsListResponse = NetAppAccountList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetAppAccountList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AccountsGetResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetAppAccount;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AccountsCreateOrUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetAppAccount;
    };
};

/**
 * Contains response data for the update operation.
 */
export type AccountsUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetAppAccount;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AccountsBeginCreateOrUpdateResponse = NetAppAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetAppAccount;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PoolsListResponse = CapacityPoolList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CapacityPoolList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PoolsGetResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CapacityPool;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PoolsCreateOrUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CapacityPool;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PoolsUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CapacityPool;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PoolsBeginCreateOrUpdateResponse = CapacityPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CapacityPool;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VolumesListResponse = VolumeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VolumeList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VolumesGetResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Volume;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VolumesCreateOrUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Volume;
    };
};

/**
 * Contains response data for the update operation.
 */
export type VolumesUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Volume;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VolumesBeginCreateOrUpdateResponse = Volume & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Volume;
    };
};

/**
 * Contains response data for the list operation.
 */
export type MountTargetsListResponse = MountTargetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MountTargetList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SnapshotsListResponse = SnapshotsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SnapshotsList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SnapshotsGetResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Snapshot;
    };
};

/**
 * Contains response data for the create operation.
 */
export type SnapshotsCreateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Snapshot;
    };
};

/**
 * Contains response data for the update operation.
 */
export type SnapshotsUpdateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Snapshot;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type SnapshotsBeginCreateResponse = Snapshot & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Snapshot;
    };
};
