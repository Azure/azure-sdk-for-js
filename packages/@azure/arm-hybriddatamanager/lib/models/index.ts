/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing AvailableProviderOperationDisplay.
 * Contains the localized display information for this particular operation /
 * action.
 * These value will be used by several clients for
 * (1) custom role definitions for RBAC;
 * (2) complex query filters for the event service; and (3) audit history /
 * records for management operations.
 *
 */
export interface AvailableProviderOperationDisplay {
  /**
   * @member {string} [provider] Gets or sets Provider
   * The localized friendly form of the resource provider name – it is expected
   * to also include the publisher/company responsible.
   * It should use Title Casing and begin with “Microsoft” for 1st party
   * services.
   */
  provider?: string;
  /**
   * @member {string} [resource] Gets or sets Resource
   * The localized friendly form of the resource type related to this
   * action/operation – it should match the public documentation for the
   * resource provider.
   * It should use Title Casing – for examples, please refer to the “name”
   * section.
   */
  resource?: string;
  /**
   * @member {string} [operation] Gets or sets Operation
   * The localized friendly name for the operation, as it should be shown to
   * the user.
   * It should be concise (to fit in drop downs) but clear (i.e.
   * self-documenting). It should use Title Casing and include the
   * entity/resource to which it applies.
   */
  operation?: string;
  /**
   * @member {string} [description] Gets or sets Description
   * The localized friendly description for the operation, as it should be
   * shown to the user.
   * It should be thorough, yet concise – it will be used in tool tips and
   * detailed views.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing AvailableProviderOperation.
 * Class represents provider operation
 *
 */
export interface AvailableProviderOperation {
  /**
   * @member {string} name Gets or Sets Name of the operations
   */
  name: string;
  /**
   * @member {AvailableProviderOperationDisplay} [display] Gets or sets Display
   * information
   * Contains the localized display information for this particular
   * operation/action
   */
  display?: AvailableProviderOperationDisplay;
  /**
   * @member {string} [origin] Gets or sets Origin
   * The intended executor of the operation; governs the display of the
   * operation in the RBAC UX and the audit logs UX.
   * Default value is “user,system”
   */
  origin?: string;
  /**
   * @member {any} [properties] Gets or sets Properties
   * Reserved for future use
   */
  properties?: any;
}

/**
 * @interface
 * An interface representing CustomerSecret.
 * The pair of customer secret.
 *
 */
export interface CustomerSecret {
  /**
   * @member {string} keyIdentifier The identifier to the data service input
   * object which this secret corresponds to.
   */
  keyIdentifier: string;
  /**
   * @member {string} keyValue It contains the encrypted customer secret.
   */
  keyValue: string;
  /**
   * @member {SupportedAlgorithm} algorithm The encryption algorithm used to
   * encrypt data. Possible values include: 'None', 'RSA1_5', 'RSA_OAEP',
   * 'PlainText'
   */
  algorithm: SupportedAlgorithm;
}

/**
 * @interface
 * An interface representing Resource.
 * Model of the Resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The Resource Name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} location The location of the resource. This will be one
   * of the supported and registered Azure Geo Regions (e.g. West US, East
   * US, Southeast Asia, etc.). The geo region of a resource cannot be changed
   * once it is created, but if an identical geo
   * region is specified on update the request will succeed.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The list of key value
   * pairs that describe the resource. These tags can be used in viewing and
   * grouping this resource
   * (across resource groups).
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {Sku} [sku] The sku type.
   */
  sku?: Sku;
}

/**
 * @interface
 * An interface representing DataManager.
 * The DataManager resource.
 *
 * @extends Resource
 */
export interface DataManager extends Resource {
  /**
   * @member {string} [etag] Etag of the Resource.
   */
  etag?: string;
}

/**
 * @interface
 * An interface representing Sku.
 * The sku type.
 *
 */
export interface Sku {
  /**
   * @member {string} [name] The sku name. Required for data manager creation,
   * optional for update.
   */
  name?: string;
  /**
   * @member {string} [tier] The sku tier. This is based on the SKU name.
   */
  tier?: string;
}

/**
 * @interface
 * An interface representing DataManagerUpdateParameter.
 * The DataManagerUpdateParameter.
 *
 */
export interface DataManagerUpdateParameter {
  /**
   * @member {Sku} [sku] The sku type.
   */
  sku?: Sku;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The list of key value
   * pairs that describe the resource. These tags can be used in viewing and
   * grouping this resource
   * (across resource groups).
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing DmsBaseObject.
 * Base class for all objects under DataManager Service
 *
 */
export interface DmsBaseObject {
  /**
   * @member {string} [name] Name of the object.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [id] Id of the object.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [type] Type of the object.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing DataService.
 * Data Service.
 *
 * @extends DmsBaseObject
 */
export interface DataService extends DmsBaseObject {
  /**
   * @member {State} state State of the data service. Possible values include:
   * 'Disabled', 'Enabled', 'Supported'
   */
  state: State;
  /**
   * @member {string[]} [supportedDataSinkTypes] Supported data store types
   * which can be used as a sink.
   */
  supportedDataSinkTypes?: string[];
  /**
   * @member {string[]} [supportedDataSourceTypes] Supported data store types
   * which can be used as a source.
   */
  supportedDataSourceTypes?: string[];
}

/**
 * @interface
 * An interface representing DataStore.
 * Data store.
 *
 * @extends DmsBaseObject
 */
export interface DataStore extends DmsBaseObject {
  /**
   * @member {string} [repositoryId] Arm Id for the manager resource to which
   * the data source is associated. This is optional.
   */
  repositoryId?: string;
  /**
   * @member {State} state State of the data source. Possible values include:
   * 'Disabled', 'Enabled', 'Supported'
   */
  state: State;
  /**
   * @member {any} [extendedProperties] A generic json used differently by each
   * data source type.
   */
  extendedProperties?: any;
  /**
   * @member {string} dataStoreTypeId The arm id of the data store type.
   */
  dataStoreTypeId: string;
  /**
   * @member {CustomerSecret[]} [customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   */
  customerSecrets?: CustomerSecret[];
}

/**
 * @interface
 * An interface representing DataStoreFilter.
 * Contains the information about the filters for the DataStore.
 *
 */
export interface DataStoreFilter {
  /**
   * @member {string} [dataStoreTypeId] The data store type id.
   */
  dataStoreTypeId?: string;
}

/**
 * @interface
 * An interface representing DataStoreType.
 * Data Store Type.
 *
 * @extends DmsBaseObject
 */
export interface DataStoreType extends DmsBaseObject {
  /**
   * @member {string} [repositoryType] Arm type for the manager resource to
   * which the data source type is associated. This is optional.
   */
  repositoryType?: string;
  /**
   * @member {State} state State of the data store type. Possible values
   * include: 'Disabled', 'Enabled', 'Supported'
   */
  state: State;
  /**
   * @member {string[]} [supportedDataServicesAsSink] Supported data services
   * where it can be used as a sink.
   */
  supportedDataServicesAsSink?: string[];
  /**
   * @member {string[]} [supportedDataServicesAsSource] Supported data services
   * where it can be used as a source.
   */
  supportedDataServicesAsSource?: string[];
}

/**
 * @interface
 * An interface representing ErrorModel.
 * Top level error for the job.
 *
 */
export interface ErrorModel {
  /**
   * @member {string} code Error code that can be used to programmatically
   * identify the error.
   */
  code: string;
  /**
   * @member {string} [message] Describes the error in detail and provides
   * debugging information.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ErrorDetails.
 * Error Details
 *
 */
export interface ErrorDetails {
  /**
   * @member {string} [errorMessage] Error message.
   */
  errorMessage?: string;
  /**
   * @member {number} [errorCode] Error code.
   */
  errorCode?: number;
  /**
   * @member {string} [recommendedAction] Recommended action for the error.
   */
  recommendedAction?: string;
  /**
   * @member {string} [exceptionMessage] Contains the non localized exception
   * message
   */
  exceptionMessage?: string;
}

/**
 * @interface
 * An interface representing JobStages.
 * Job stages.
 *
 */
export interface JobStages {
  /**
   * @member {string} [stageName] Name of the job stage.
   */
  stageName?: string;
  /**
   * @member {JobStatus} stageStatus Status of the job stage. Possible values
   * include: 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
   * 'Cancelled', 'Cancelling'
   */
  stageStatus: JobStatus;
  /**
   * @member {any} [jobStageDetails] Job Stage Details
   */
  jobStageDetails?: any;
  /**
   * @member {ErrorDetails[]} [errorDetails] Error details for the stage. This
   * is optional
   */
  errorDetails?: ErrorDetails[];
}

/**
 * @interface
 * An interface representing Schedule.
 * Schedule for the job run.
 *
 */
export interface Schedule {
  /**
   * @member {string} [name] Name of the schedule.
   */
  name?: string;
  /**
   * @member {string[]} [policyList] A list of repetition intervals in ISO 8601
   * format.
   */
  policyList?: string[];
}

/**
 * @interface
 * An interface representing JobDefinition.
 * Job Definition.
 *
 * @extends DmsBaseObject
 */
export interface JobDefinition extends DmsBaseObject {
  /**
   * @member {string} dataSourceId Data Source Id associated to the job
   * definition.
   */
  dataSourceId: string;
  /**
   * @member {string} dataSinkId Data Sink Id associated to the job definition.
   */
  dataSinkId: string;
  /**
   * @member {Schedule[]} [schedules] Schedule for running the job definition
   */
  schedules?: Schedule[];
  /**
   * @member {State} state State of the job definition. Possible values
   * include: 'Disabled', 'Enabled', 'Supported'
   */
  state: State;
  /**
   * @member {Date} [lastModifiedTime] Last modified time of the job
   * definition.
   */
  lastModifiedTime?: Date;
  /**
   * @member {RunLocation} [runLocation] This is the preferred geo location for
   * the job to run. Possible values include: 'none', 'australiaeast',
   * 'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
   * 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast',
   * 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
   * 'southcentralus', 'southindia', 'northcentralus', 'northeurope',
   * 'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus',
   * 'westus2'
   */
  runLocation?: RunLocation;
  /**
   * @member {UserConfirmation} [userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'. Default value:
   * 'NotRequired' .
   */
  userConfirmation?: UserConfirmation;
  /**
   * @member {any} [dataServiceInput] A generic json used differently by each
   * data service type.
   */
  dataServiceInput?: any;
  /**
   * @member {CustomerSecret[]} [customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   */
  customerSecrets?: CustomerSecret[];
}

/**
 * @interface
 * An interface representing JobDetails.
 * Job details.
 *
 */
export interface JobDetails {
  /**
   * @member {JobStages[]} [jobStages] List of stages that ran in the job
   */
  jobStages?: JobStages[];
  /**
   * @member {JobDefinition} [jobDefinition] JobDefinition at the time of the
   * run
   */
  jobDefinition?: JobDefinition;
  /**
   * @member {ErrorDetails[]} [errorDetails] Error details for failure. This is
   * optional.
   */
  errorDetails?: ErrorDetails[];
  /**
   * @member {string} [itemDetailsLink] Item Details Link to download files or
   * see details
   */
  itemDetailsLink?: string;
}

/**
 * @interface
 * An interface representing Job.
 * Data service job.
 *
 * @extends DmsBaseObject
 */
export interface Job extends DmsBaseObject {
  /**
   * @member {JobStatus} status Status of the job. Possible values include:
   * 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
   * 'Cancelled', 'Cancelling'
   */
  status: JobStatus;
  /**
   * @member {Date} startTime Time at which the job was started in UTC ISO 8601
   * format.
   */
  startTime: Date;
  /**
   * @member {Date} [endTime] Time at which the job ended in UTC ISO 8601
   * format.
   */
  endTime?: Date;
  /**
   * @member {IsJobCancellable} isCancellable Describes whether the job is
   * cancellable. Possible values include: 'NotCancellable', 'Cancellable'
   */
  isCancellable: IsJobCancellable;
  /**
   * @member {number} [bytesProcessed] Number of bytes processed by the job as
   * of now.
   */
  bytesProcessed?: number;
  /**
   * @member {number} [itemsProcessed] Number of items processed by the job as
   * of now
   */
  itemsProcessed?: number;
  /**
   * @member {number} [totalBytesToProcess] Number of bytes to be processed by
   * the job in total.
   */
  totalBytesToProcess?: number;
  /**
   * @member {number} [totalItemsToProcess] Number of items to be processed by
   * the job in total
   */
  totalItemsToProcess?: number;
  /**
   * @member {JobDetails} [details] Details of a job run. This field will only
   * be sent for expand details filter.
   */
  details?: JobDetails;
  /**
   * @member {string} [dataSourceName] Name of the data source on which the job
   * was triggered.
   */
  dataSourceName?: string;
  /**
   * @member {string} [dataSinkName] Name of the data sink on which the job was
   * triggered.
   */
  dataSinkName?: string;
  /**
   * @member {ErrorModel} [error] Top level error for the job.
   */
  error?: ErrorModel;
}

/**
 * @interface
 * An interface representing JobDefinitionFilter.
 * Contains the supported job definition filters.
 *
 */
export interface JobDefinitionFilter {
  /**
   * @member {State} state The state of the job definition. Possible values
   * include: 'Disabled', 'Enabled', 'Supported'
   */
  state: State;
  /**
   * @member {string} [dataSource] The data source associated with the job
   * definition
   */
  dataSource?: string;
  /**
   * @member {Date} [lastModified] The last modified date time of the data
   * source.
   */
  lastModified?: Date;
}

/**
 * @interface
 * An interface representing JobFilter.
 * Contains the information about the filters for the job.
 *
 */
export interface JobFilter {
  /**
   * @member {JobStatus} status The status of the job. Possible values include:
   * 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
   * 'Cancelled', 'Cancelling'
   */
  status: JobStatus;
  /**
   * @member {Date} [startTime] The start time of the job.
   */
  startTime?: Date;
}

/**
 * @interface
 * An interface representing Key.
 * Encryption Key.
 *
 */
export interface Key {
  /**
   * @member {string} keyModulus Modulus of the encryption key.
   */
  keyModulus: string;
  /**
   * @member {string} keyExponent Exponent of the encryption key.
   */
  keyExponent: string;
  /**
   * @member {number} encryptionChunkSizeInBytes The maximum byte size that can
   * be encrypted by the key. For a key size larger than the size, break into
   * chunks and encrypt each chunk, append each encrypted chunk with : to mark
   * the end of the chunk.
   */
  encryptionChunkSizeInBytes: number;
}

/**
 * @interface
 * An interface representing PublicKey.
 * Public key
 *
 * @extends DmsBaseObject
 */
export interface PublicKey extends DmsBaseObject {
  /**
   * @member {Key} dataServiceLevel1Key Level one public key for encryption
   */
  dataServiceLevel1Key: Key;
  /**
   * @member {Key} dataServiceLevel2Key Level two public key for encryption
   */
  dataServiceLevel2Key: Key;
}

/**
 * @interface
 * An interface representing RunParameters.
 * Run parameters for a job.
 *
 */
export interface RunParameters {
  /**
   * @member {UserConfirmation} [userConfirmation] Enum to detect if user
   * confirmation is required. If not passed will default to NotRequired.
   * Possible values include: 'NotRequired', 'Required'. Default value:
   * 'NotRequired' .
   */
  userConfirmation?: UserConfirmation;
  /**
   * @member {any} [dataServiceInput] A generic json used differently by each
   * data service type.
   */
  dataServiceInput?: any;
  /**
   * @member {CustomerSecret[]} [customerSecrets] List of customer secrets
   * containing a key identifier and key value. The key identifier is a way for
   * the specific data source to understand the key. Value contains customer
   * secret encrypted by the encryptionKeys.
   */
  customerSecrets?: CustomerSecret[];
}

/**
 * @interface
 * An interface representing DataManagersUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DataManagersUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] Defines the If-Match condition. The patch will
   * be performed only if the ETag of the data manager resource on the server
   * matches this value.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing DataManagersBeginUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DataManagersBeginUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] Defines the If-Match condition. The patch will
   * be performed only if the ETag of the data manager resource on the server
   * matches this value.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing JobDefinitionsListByDataServiceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface JobDefinitionsListByDataServiceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData Filter options
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing JobDefinitionsListByDataManagerOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface JobDefinitionsListByDataManagerOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData Filter options
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing JobsListByJobDefinitionOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface JobsListByJobDefinitionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData Filter options
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing JobsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface JobsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] $expand is supported on details parameter for
   * job, which provides details on the job stages.
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing JobsListByDataServiceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface JobsListByDataServiceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData Filter options
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing JobsListByDataManagerOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface JobsListByDataManagerOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData Filter options
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing DataStoresListByDataManagerOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DataStoresListByDataManagerOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData Filter options
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing HybridDataManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface HybridDataManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the AvailableProviderOperations.
 * Class for set of operations used for discovery of available provider
 * operations.
 *
 * @extends Array<AvailableProviderOperation>
 */
export interface AvailableProviderOperations extends Array<AvailableProviderOperation> {
  /**
   * @member {string} [nextLink] Link for the next set of operations.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DataManagerList.
 * DataManager resources Collection.
 *
 * @extends Array<DataManager>
 */
export interface DataManagerList extends Array<DataManager> {
  /**
   * @member {string} [nextLink] Link for the next set of data stores.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DataServiceList.
 * Data Service Collection.
 *
 * @extends Array<DataService>
 */
export interface DataServiceList extends Array<DataService> {
  /**
   * @member {string} [nextLink] Link for the next set of data services.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the JobDefinitionList.
 * Job Definition Collection.
 *
 * @extends Array<JobDefinition>
 */
export interface JobDefinitionList extends Array<JobDefinition> {
  /**
   * @member {string} [nextLink] Link for the next set of job definitions.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the JobList.
 * Job Collection.
 *
 * @extends Array<Job>
 */
export interface JobList extends Array<Job> {
  /**
   * @member {string} [nextLink] Link for the next set of jobs.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DataStoreList.
 * Data Store Collection.
 *
 * @extends Array<DataStore>
 */
export interface DataStoreList extends Array<DataStore> {
  /**
   * @member {string} [nextLink] Link for the next set of data stores.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DataStoreTypeList.
 * Data Store Type Collection.
 *
 * @extends Array<DataStoreType>
 */
export interface DataStoreTypeList extends Array<DataStoreType> {
  /**
   * @member {string} [nextLink] Link for the next set of data store types.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PublicKeyList.
 * PublicKey Collection
 *
 * @extends Array<PublicKey>
 */
export interface PublicKeyList extends Array<PublicKey> {
  /**
   * @member {string} [nextLink] Link for the next set of public keys.
   */
  nextLink?: string;
}

/**
 * Defines values for SupportedAlgorithm.
 * Possible values include: 'None', 'RSA1_5', 'RSA_OAEP', 'PlainText'
 * @readonly
 * @enum {string}
 */
export type SupportedAlgorithm = 'None' | 'RSA1_5' | 'RSA_OAEP' | 'PlainText';

/**
 * Defines values for State.
 * Possible values include: 'Disabled', 'Enabled', 'Supported'
 * @readonly
 * @enum {string}
 */
export type State = 'Disabled' | 'Enabled' | 'Supported';

/**
 * Defines values for JobStatus.
 * Possible values include: 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
 * 'Cancelled', 'Cancelling'
 * @readonly
 * @enum {string}
 */
export type JobStatus = 'None' | 'InProgress' | 'Succeeded' | 'WaitingForAction' | 'Failed' | 'Cancelled' | 'Cancelling';

/**
 * Defines values for IsJobCancellable.
 * Possible values include: 'NotCancellable', 'Cancellable'
 * @readonly
 * @enum {string}
 */
export type IsJobCancellable = 'NotCancellable' | 'Cancellable';

/**
 * Defines values for RunLocation.
 * Possible values include: 'none', 'australiaeast', 'australiasoutheast', 'brazilsouth',
 * 'canadacentral', 'canadaeast', 'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2',
 * 'japaneast', 'japanwest', 'koreacentral', 'koreasouth', 'southeastasia', 'southcentralus',
 * 'southindia', 'northcentralus', 'northeurope', 'uksouth', 'ukwest', 'westcentralus',
 * 'westeurope', 'westindia', 'westus', 'westus2'
 * @readonly
 * @enum {string}
 */
export type RunLocation = 'none' | 'australiaeast' | 'australiasoutheast' | 'brazilsouth' | 'canadacentral' | 'canadaeast' | 'centralindia' | 'centralus' | 'eastasia' | 'eastus' | 'eastus2' | 'japaneast' | 'japanwest' | 'koreacentral' | 'koreasouth' | 'southeastasia' | 'southcentralus' | 'southindia' | 'northcentralus' | 'northeurope' | 'uksouth' | 'ukwest' | 'westcentralus' | 'westeurope' | 'westindia' | 'westus' | 'westus2';

/**
 * Defines values for UserConfirmation.
 * Possible values include: 'NotRequired', 'Required'
 * @readonly
 * @enum {string}
 */
export type UserConfirmation = 'NotRequired' | 'Required';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = AvailableProviderOperations & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableProviderOperations;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = AvailableProviderOperations & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableProviderOperations;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DataManagersListResponse = DataManagerList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManagerList;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DataManagersListByResourceGroupResponse = DataManagerList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManagerList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DataManagersGetResponse = DataManager & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManager;
    };
};

/**
 * Contains response data for the create operation.
 */
export type DataManagersCreateResponse = DataManager & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManager;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DataManagersUpdateResponse = DataManager & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManager;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type DataManagersBeginCreateResponse = DataManager & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManager;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DataManagersBeginUpdateResponse = DataManager & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataManager;
    };
};

/**
 * Contains response data for the listByDataManager operation.
 */
export type DataServicesListByDataManagerResponse = DataServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataServiceList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DataServicesGetResponse = DataService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataService;
    };
};

/**
 * Contains response data for the listByDataManagerNext operation.
 */
export type DataServicesListByDataManagerNextResponse = DataServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataServiceList;
    };
};

/**
 * Contains response data for the listByDataService operation.
 */
export type JobDefinitionsListByDataServiceResponse = JobDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinitionList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type JobDefinitionsGetResponse = JobDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinition;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type JobDefinitionsCreateOrUpdateResponse = JobDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinition;
    };
};

/**
 * Contains response data for the listByDataManager operation.
 */
export type JobDefinitionsListByDataManagerResponse = JobDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinitionList;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type JobDefinitionsBeginCreateOrUpdateResponse = JobDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinition;
    };
};

/**
 * Contains response data for the listByDataServiceNext operation.
 */
export type JobDefinitionsListByDataServiceNextResponse = JobDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinitionList;
    };
};

/**
 * Contains response data for the listByDataManagerNext operation.
 */
export type JobDefinitionsListByDataManagerNextResponse = JobDefinitionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobDefinitionList;
    };
};

/**
 * Contains response data for the listByJobDefinition operation.
 */
export type JobsListByJobDefinitionResponse = JobList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type JobsGetResponse = Job & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Job;
    };
};

/**
 * Contains response data for the listByDataService operation.
 */
export type JobsListByDataServiceResponse = JobList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobList;
    };
};

/**
 * Contains response data for the listByDataManager operation.
 */
export type JobsListByDataManagerResponse = JobList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobList;
    };
};

/**
 * Contains response data for the listByJobDefinitionNext operation.
 */
export type JobsListByJobDefinitionNextResponse = JobList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobList;
    };
};

/**
 * Contains response data for the listByDataServiceNext operation.
 */
export type JobsListByDataServiceNextResponse = JobList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobList;
    };
};

/**
 * Contains response data for the listByDataManagerNext operation.
 */
export type JobsListByDataManagerNextResponse = JobList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobList;
    };
};

/**
 * Contains response data for the listByDataManager operation.
 */
export type DataStoresListByDataManagerResponse = DataStoreList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStoreList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DataStoresGetResponse = DataStore & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStore;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataStoresCreateOrUpdateResponse = DataStore & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStore;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DataStoresBeginCreateOrUpdateResponse = DataStore & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStore;
    };
};

/**
 * Contains response data for the listByDataManagerNext operation.
 */
export type DataStoresListByDataManagerNextResponse = DataStoreList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStoreList;
    };
};

/**
 * Contains response data for the listByDataManager operation.
 */
export type DataStoreTypesListByDataManagerResponse = DataStoreTypeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStoreTypeList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DataStoreTypesGetResponse = DataStoreType & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStoreType;
    };
};

/**
 * Contains response data for the listByDataManagerNext operation.
 */
export type DataStoreTypesListByDataManagerNextResponse = DataStoreTypeList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataStoreTypeList;
    };
};

/**
 * Contains response data for the listByDataManager operation.
 */
export type PublicKeysListByDataManagerResponse = PublicKeyList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicKeyList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PublicKeysGetResponse = PublicKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicKey;
    };
};

/**
 * Contains response data for the listByDataManagerNext operation.
 */
export type PublicKeysListByDataManagerNextResponse = PublicKeyList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicKeyList;
    };
};
