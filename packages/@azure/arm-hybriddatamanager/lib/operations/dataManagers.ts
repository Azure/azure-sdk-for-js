/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/dataManagersMappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClientContext } from "../hybridDataManagementClientContext";

/** Class representing a DataManagers. */
export class DataManagers {
  private readonly client: HybridDataManagementClientContext;

  /**
   * Create a DataManagers.
   * @param {HybridDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: HybridDataManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all the data manager resources available under the subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataManagersListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DataManagersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DataManagerList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataManagerList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataManagerList>, callback?: msRest.ServiceCallback<Models.DataManagerList>): Promise<Models.DataManagersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DataManagersListResponse>;
  }

  /**
   * Lists all the data manager resources available under the given resource group.
   * @param resourceGroupName The Resource Group Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DataManagersListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataManagersListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DataManagerList>): void;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataManagerList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataManagerList>, callback?: msRest.ServiceCallback<Models.DataManagerList>): Promise<Models.DataManagersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DataManagersListByResourceGroupResponse>;
  }

  /**
   * Gets information about the specified data manager resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.DataManagersGetResponse>
   */
  get(resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataManagersGetResponse>;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  get(resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.DataManager>): void;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, dataManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataManager>): void;
  get(resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataManager>, callback?: msRest.ServiceCallback<Models.DataManager>): Promise<Models.DataManagersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DataManagersGetResponse>;
  }

  /**
   * Creates a new data manager resource with the specified parameters. Existing resources cannot be
   * updated with this API
   * and should instead be updated with the Update data manager resource API.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param dataManager Data manager resource details from request body.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataManagersCreateResponse>
   */
  create(resourceGroupName: string, dataManagerName: string, dataManager: Models.DataManager, options?: msRest.RequestOptionsBase): Promise<Models.DataManagersCreateResponse> {
    return this.beginCreate(resourceGroupName,dataManagerName,dataManager,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DataManagersCreateResponse>;
  }

  /**
   * Deletes a data manager resource in Microsoft Azure.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates the properties of an existing data manager resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param dataManagerUpdateParameter Data manager resource details from request body.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataManagersUpdateResponse>
   */
  update(resourceGroupName: string, dataManagerName: string, dataManagerUpdateParameter: Models.DataManagerUpdateParameter, options?: Models.DataManagersUpdateOptionalParams): Promise<Models.DataManagersUpdateResponse> {
    return this.beginUpdate(resourceGroupName,dataManagerName,dataManagerUpdateParameter,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DataManagersUpdateResponse>;
  }

  /**
   * Creates a new data manager resource with the specified parameters. Existing resources cannot be
   * updated with this API
   * and should instead be updated with the Update data manager resource API.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param dataManager Data manager resource details from request body.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, dataManagerName: string, dataManager: Models.DataManager, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        dataManagerName,
        dataManager,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a data manager resource in Microsoft Azure.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        dataManagerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates the properties of an existing data manager resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param dataManagerUpdateParameter Data manager resource details from request body.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, dataManagerName: string, dataManagerUpdateParameter: Models.DataManagerUpdateParameter, options?: Models.DataManagersBeginUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        dataManagerName,
        dataManagerUpdateParameter,
        options
      },
      beginUpdateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataManagerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataManager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataManager",
    mapper: {
      ...Mappers.DataManager,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataManager
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataManagerUpdateParameter",
    mapper: {
      ...Mappers.DataManagerUpdateParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataManager
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
