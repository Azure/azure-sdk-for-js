/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/jobsMappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClientContext } from "../hybridDataManagementClientContext";

/** Class representing a Jobs. */
export class Jobs {
  private readonly client: HybridDataManagementClientContext;

  /**
   * Create a Jobs.
   * @param {HybridDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: HybridDataManagementClientContext) {
    this.client = client;
  }

  /**
   * This method gets all the jobs of a given job definition.
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition for which jobs are needed.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByJobDefinitionResponse>
   */
  listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobsListByJobDefinitionOptionalParams): Promise<Models.JobsListByJobDefinitionResponse>;
  /**
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition for which jobs are needed.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.JobList>): void;
  /**
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition for which jobs are needed.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options: Models.JobsListByJobDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.JobList>): void;
  listByJobDefinition(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobsListByJobDefinitionOptionalParams | msRest.ServiceCallback<Models.JobList>, callback?: msRest.ServiceCallback<Models.JobList>): Promise<Models.JobsListByJobDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        dataServiceName,
        jobDefinitionName,
        resourceGroupName,
        dataManagerName,
        options
      },
      listByJobDefinitionOperationSpec,
      callback) as Promise<Models.JobsListByJobDefinitionResponse>;
  }

  /**
   * This method gets a data manager job given the jobId.
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetResponse>
   */
  get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobsGetOptionalParams): Promise<Models.JobsGetResponse>;
  /**
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.Job>): void;
  /**
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options: Models.JobsGetOptionalParams, callback: msRest.ServiceCallback<Models.Job>): void;
  get(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobsGetOptionalParams | msRest.ServiceCallback<Models.Job>, callback?: msRest.ServiceCallback<Models.Job>): Promise<Models.JobsGetResponse> {
    return this.client.sendOperationRequest(
      {
        dataServiceName,
        jobDefinitionName,
        jobId,
        resourceGroupName,
        dataManagerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobsGetResponse>;
  }

  /**
   * Cancels the given job.
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginCancel(dataServiceName,jobDefinitionName,jobId,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Resumes the given job.
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginResume(dataServiceName,jobDefinitionName,jobId,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * This method gets all the jobs of a data service type in a given resource.
   * @param dataServiceName The name of the data service of interest.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByDataServiceResponse>
   */
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobsListByDataServiceOptionalParams): Promise<Models.JobsListByDataServiceResponse>;
  /**
   * @param dataServiceName The name of the data service of interest.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.JobList>): void;
  /**
   * @param dataServiceName The name of the data service of interest.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options: Models.JobsListByDataServiceOptionalParams, callback: msRest.ServiceCallback<Models.JobList>): void;
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobsListByDataServiceOptionalParams | msRest.ServiceCallback<Models.JobList>, callback?: msRest.ServiceCallback<Models.JobList>): Promise<Models.JobsListByDataServiceResponse> {
    return this.client.sendOperationRequest(
      {
        dataServiceName,
        resourceGroupName,
        dataManagerName,
        options
      },
      listByDataServiceOperationSpec,
      callback) as Promise<Models.JobsListByDataServiceResponse>;
  }

  /**
   * This method gets all the jobs at the data manager resource level.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByDataManagerResponse>
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, options?: Models.JobsListByDataManagerOptionalParams): Promise<Models.JobsListByDataManagerResponse>;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.JobList>): void;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, options: Models.JobsListByDataManagerOptionalParams, callback: msRest.ServiceCallback<Models.JobList>): void;
  listByDataManager(resourceGroupName: string, dataManagerName: string, options?: Models.JobsListByDataManagerOptionalParams | msRest.ServiceCallback<Models.JobList>, callback?: msRest.ServiceCallback<Models.JobList>): Promise<Models.JobsListByDataManagerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        options
      },
      listByDataManagerOperationSpec,
      callback) as Promise<Models.JobsListByDataManagerResponse>;
  }

  /**
   * Cancels the given job.
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCancel(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataServiceName,
        jobDefinitionName,
        jobId,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginCancelOperationSpec,
      options);
  }

  /**
   * Resumes the given job.
   * @param dataServiceName The name of the data service of the job definition.
   * @param jobDefinitionName The name of the job definition of the job.
   * @param jobId The job id of the job queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResume(dataServiceName: string, jobDefinitionName: string, jobId: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataServiceName,
        jobDefinitionName,
        jobId,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginResumeOperationSpec,
      options);
  }

  /**
   * This method gets all the jobs of a given job definition.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByJobDefinitionNextResponse>
   */
  listByJobDefinitionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListByJobDefinitionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByJobDefinitionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByJobDefinitionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobList>): void;
  listByJobDefinitionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobList>, callback?: msRest.ServiceCallback<Models.JobList>): Promise<Models.JobsListByJobDefinitionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByJobDefinitionNextOperationSpec,
      callback) as Promise<Models.JobsListByJobDefinitionNextResponse>;
  }

  /**
   * This method gets all the jobs of a data service type in a given resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByDataServiceNextResponse>
   */
  listByDataServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListByDataServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDataServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobList>): void;
  listByDataServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobList>, callback?: msRest.ServiceCallback<Models.JobList>): Promise<Models.JobsListByDataServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDataServiceNextOperationSpec,
      callback) as Promise<Models.JobsListByDataServiceNextResponse>;
  }

  /**
   * This method gets all the jobs at the data manager resource level.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByDataManagerNextResponse>
   */
  listByDataManagerNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListByDataManagerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDataManagerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataManagerNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobList>): void;
  listByDataManagerNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobList>, callback?: msRest.ServiceCallback<Models.JobList>): Promise<Models.JobsListByDataManagerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDataManagerNextOperationSpec,
      callback) as Promise<Models.JobsListByDataManagerNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByJobDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.jobId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataManagerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.jobId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResumeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.jobId,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByJobDefinitionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataManagerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
