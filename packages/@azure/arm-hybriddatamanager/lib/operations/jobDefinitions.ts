/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/jobDefinitionsMappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClientContext } from "../hybridDataManagementClientContext";

/** Class representing a JobDefinitions. */
export class JobDefinitions {
  private readonly client: HybridDataManagementClientContext;

  /**
   * Create a JobDefinitions.
   * @param {HybridDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: HybridDataManagementClientContext) {
    this.client = client;
  }

  /**
   * This method gets all the job definitions of the given data service name.
   * @param dataServiceName The data service type of interest.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDefinitionsListByDataServiceResponse>
   */
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobDefinitionsListByDataServiceOptionalParams): Promise<Models.JobDefinitionsListByDataServiceResponse>;
  /**
   * @param dataServiceName The data service type of interest.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  /**
   * @param dataServiceName The data service type of interest.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options: Models.JobDefinitionsListByDataServiceOptionalParams, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  listByDataService(dataServiceName: string, resourceGroupName: string, dataManagerName: string, options?: Models.JobDefinitionsListByDataServiceOptionalParams | msRest.ServiceCallback<Models.JobDefinitionList>, callback?: msRest.ServiceCallback<Models.JobDefinitionList>): Promise<Models.JobDefinitionsListByDataServiceResponse> {
    return this.client.sendOperationRequest(
      {
        dataServiceName,
        resourceGroupName,
        dataManagerName,
        options
      },
      listByDataServiceOperationSpec,
      callback) as Promise<Models.JobDefinitionsListByDataServiceResponse>;
  }

  /**
   * This method gets job definition object by name.
   * @param dataServiceName The data service name of the job definition
   * @param jobDefinitionName The job definition name that is being queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDefinitionsGetResponse>
   */
  get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobDefinitionsGetResponse>;
  /**
   * @param dataServiceName The data service name of the job definition
   * @param jobDefinitionName The job definition name that is being queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  /**
   * @param dataServiceName The data service name of the job definition
   * @param jobDefinitionName The job definition name that is being queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobDefinition>): void;
  get(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobDefinition>, callback?: msRest.ServiceCallback<Models.JobDefinition>): Promise<Models.JobDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        dataServiceName,
        jobDefinitionName,
        resourceGroupName,
        dataManagerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobDefinitionsGetResponse>;
  }

  /**
   * Creates or updates a job definition.
   * @param dataServiceName The data service type of the job definition.
   * @param jobDefinitionName The job definition name to be created or updated.
   * @param jobDefinition Job Definition object to be created or updated.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDefinitionsCreateOrUpdateResponse>
   */
  createOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: Models.JobDefinition, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobDefinitionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(dataServiceName,jobDefinitionName,jobDefinition,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.JobDefinitionsCreateOrUpdateResponse>;
  }

  /**
   * This method deletes the given job definition.
   * @param dataServiceName The data service type of the job definition.
   * @param jobDefinitionName The job definition name to be deleted.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(dataServiceName,jobDefinitionName,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * This method runs a job instance of the given job definition.
   * @param dataServiceName The data service type of the job definition.
   * @param jobDefinitionName Name of the job definition.
   * @param runParameters Run time parameters for the job definition.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  run(dataServiceName: string, jobDefinitionName: string, runParameters: Models.RunParameters, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRun(dataServiceName,jobDefinitionName,runParameters,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * This method gets all the job definitions of the given data manager resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDefinitionsListByDataManagerResponse>
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, options?: Models.JobDefinitionsListByDataManagerOptionalParams): Promise<Models.JobDefinitionsListByDataManagerResponse>;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, options: Models.JobDefinitionsListByDataManagerOptionalParams, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  listByDataManager(resourceGroupName: string, dataManagerName: string, options?: Models.JobDefinitionsListByDataManagerOptionalParams | msRest.ServiceCallback<Models.JobDefinitionList>, callback?: msRest.ServiceCallback<Models.JobDefinitionList>): Promise<Models.JobDefinitionsListByDataManagerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        options
      },
      listByDataManagerOperationSpec,
      callback) as Promise<Models.JobDefinitionsListByDataManagerResponse>;
  }

  /**
   * Creates or updates a job definition.
   * @param dataServiceName The data service type of the job definition.
   * @param jobDefinitionName The job definition name to be created or updated.
   * @param jobDefinition Job Definition object to be created or updated.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(dataServiceName: string, jobDefinitionName: string, jobDefinition: Models.JobDefinition, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataServiceName,
        jobDefinitionName,
        jobDefinition,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * This method deletes the given job definition.
   * @param dataServiceName The data service type of the job definition.
   * @param jobDefinitionName The job definition name to be deleted.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(dataServiceName: string, jobDefinitionName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataServiceName,
        jobDefinitionName,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * This method runs a job instance of the given job definition.
   * @param dataServiceName The data service type of the job definition.
   * @param jobDefinitionName Name of the job definition.
   * @param runParameters Run time parameters for the job definition.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRun(dataServiceName: string, jobDefinitionName: string, runParameters: Models.RunParameters, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataServiceName,
        jobDefinitionName,
        runParameters,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginRunOperationSpec,
      options);
  }

  /**
   * This method gets all the job definitions of the given data service name.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDefinitionsListByDataServiceNextResponse>
   */
  listByDataServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobDefinitionsListByDataServiceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDataServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  listByDataServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobDefinitionList>, callback?: msRest.ServiceCallback<Models.JobDefinitionList>): Promise<Models.JobDefinitionsListByDataServiceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDataServiceNextOperationSpec,
      callback) as Promise<Models.JobDefinitionsListByDataServiceNextResponse>;
  }

  /**
   * This method gets all the job definitions of the given data manager resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobDefinitionsListByDataManagerNextResponse>
   */
  listByDataManagerNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobDefinitionsListByDataManagerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDataManagerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataManagerNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobDefinitionList>): void;
  listByDataManagerNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobDefinitionList>, callback?: msRest.ServiceCallback<Models.JobDefinitionList>): Promise<Models.JobDefinitionsListByDataManagerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDataManagerNextOperationSpec,
      callback) as Promise<Models.JobDefinitionsListByDataManagerNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDataServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinitionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataManagerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinitionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "jobDefinition",
    mapper: {
      ...Mappers.JobDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRunOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/run",
  urlParameters: [
    Parameters.dataServiceName,
    Parameters.jobDefinitionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "runParameters",
    mapper: {
      ...Mappers.RunParameters,
      required: true
    }
  },
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataServiceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinitionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataManagerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinitionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
