/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/dataStoresMappers";
import * as Parameters from "../models/parameters";
import { HybridDataManagementClientContext } from "../hybridDataManagementClientContext";

/** Class representing a DataStores. */
export class DataStores {
  private readonly client: HybridDataManagementClientContext;

  /**
   * Create a DataStores.
   * @param {HybridDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: HybridDataManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets all the data stores/repositories in the given resource.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.DataStoresListByDataManagerResponse>
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, options?: Models.DataStoresListByDataManagerOptionalParams): Promise<Models.DataStoresListByDataManagerResponse>;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.DataStoreList>): void;
  /**
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataManager(resourceGroupName: string, dataManagerName: string, options: Models.DataStoresListByDataManagerOptionalParams, callback: msRest.ServiceCallback<Models.DataStoreList>): void;
  listByDataManager(resourceGroupName: string, dataManagerName: string, options?: Models.DataStoresListByDataManagerOptionalParams | msRest.ServiceCallback<Models.DataStoreList>, callback?: msRest.ServiceCallback<Models.DataStoreList>): Promise<Models.DataStoresListByDataManagerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataManagerName,
        options
      },
      listByDataManagerOperationSpec,
      callback) as Promise<Models.DataStoresListByDataManagerResponse>;
  }

  /**
   * This method gets the data store/repository by name.
   * @param dataStoreName The data store/repository name queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.DataStoresGetResponse>
   */
  get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataStoresGetResponse>;
  /**
   * @param dataStoreName The data store/repository name queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param callback The callback
   */
  get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, callback: msRest.ServiceCallback<Models.DataStore>): void;
  /**
   * @param dataStoreName The data store/repository name queried.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param options The optional parameters
   * @param callback The callback
   */
  get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataStore>): void;
  get(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataStore>, callback?: msRest.ServiceCallback<Models.DataStore>): Promise<Models.DataStoresGetResponse> {
    return this.client.sendOperationRequest(
      {
        dataStoreName,
        resourceGroupName,
        dataManagerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DataStoresGetResponse>;
  }

  /**
   * Creates or updates the data store/repository in the data manager.
   * @param dataStoreName The data store/repository name to be created or updated.
   * @param dataStore The data store/repository object to be created or updated.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<Models.DataStoresCreateOrUpdateResponse>
   */
  createOrUpdate(dataStoreName: string, dataStore: Models.DataStore, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataStoresCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(dataStoreName,dataStore,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DataStoresCreateOrUpdateResponse>;
  }

  /**
   * This method deletes the given data store/repository.
   * @param dataStoreName The data store/repository name to be deleted.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(dataStoreName,resourceGroupName,dataManagerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates or updates the data store/repository in the data manager.
   * @param dataStoreName The data store/repository name to be created or updated.
   * @param dataStore The data store/repository object to be created or updated.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(dataStoreName: string, dataStore: Models.DataStore, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataStoreName,
        dataStore,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * This method deletes the given data store/repository.
   * @param dataStoreName The data store/repository name to be deleted.
   * @param resourceGroupName The Resource Group Name
   * @param dataManagerName The name of the DataManager Resource within the specified resource group.
   * DataManager names must be between 3 and 24 characters in length and use any alphanumeric and
   * underscore only
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(dataStoreName: string, resourceGroupName: string, dataManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        dataStoreName,
        resourceGroupName,
        dataManagerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets all the data stores/repositories in the given resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataStoresListByDataManagerNextResponse>
   */
  listByDataManagerNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DataStoresListByDataManagerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDataManagerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DataStoreList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDataManagerNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataStoreList>): void;
  listByDataManagerNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataStoreList>, callback?: msRest.ServiceCallback<Models.DataStoreList>): Promise<Models.DataStoresListByDataManagerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDataManagerNextOperationSpec,
      callback) as Promise<Models.DataStoresListByDataManagerNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDataManagerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}",
  urlParameters: [
    Parameters.dataStoreName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataStore
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}",
  urlParameters: [
    Parameters.dataStoreName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataStore",
    mapper: {
      ...Mappers.DataStore,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataStore
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}",
  urlParameters: [
    Parameters.dataStoreName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataManagerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDataManagerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataStoreList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
