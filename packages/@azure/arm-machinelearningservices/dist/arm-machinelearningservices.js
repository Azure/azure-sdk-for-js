/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmMachinelearningservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Unknown', 'Updating', 'Creating', 'Deleting',
     * 'Succeeded', 'Failed', 'Canceled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Unknown"] = "Unknown";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Canceled"] = "Canceled";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for ResourceIdentityType.
     * Possible values include: 'SystemAssigned'
     * @readonly
     * @enum {string}
     */
    var ResourceIdentityType;
    (function (ResourceIdentityType) {
        ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
    })(ResourceIdentityType || (ResourceIdentityType = {}));
    /**
     * Defines values for ComputeType.
     * Possible values include: 'AKS', 'BatchAI', 'DataFactory', 'VirtualMachine',
     * 'HDInsight'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ComputeType =
     * <ComputeType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ComputeType;
    (function (ComputeType) {
        ComputeType["AKS"] = "AKS";
        ComputeType["BatchAI"] = "BatchAI";
        ComputeType["DataFactory"] = "DataFactory";
        ComputeType["VirtualMachine"] = "VirtualMachine";
        ComputeType["HDInsight"] = "HDInsight";
    })(ComputeType || (ComputeType = {}));
    /**
     * Defines values for Status.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Status;
    (function (Status) {
        Status["Disabled"] = "Disabled";
        Status["Enabled"] = "Enabled";
    })(Status || (Status = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ProvisioningState () { return ProvisioningState; },
        get ResourceIdentityType () { return ResourceIdentityType; },
        get ComputeType () { return ComputeType; },
        get Status () { return Status; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var WorkspaceProperties = {
        serializedName: "WorkspaceProperties",
        type: {
            name: "Composite",
            className: "WorkspaceProperties",
            modelProperties: {
                workspaceId: {
                    readOnly: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                creationTime: {
                    readOnly: true,
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                batchaiWorkspace: {
                    serializedName: "batchaiWorkspace",
                    type: {
                        name: "String"
                    }
                },
                keyVault: {
                    serializedName: "keyVault",
                    type: {
                        name: "String"
                    }
                },
                applicationInsights: {
                    serializedName: "applicationInsights",
                    type: {
                        name: "String"
                    }
                },
                containerRegistry: {
                    serializedName: "containerRegistry",
                    type: {
                        name: "String"
                    }
                },
                storageAccount: {
                    serializedName: "storageAccount",
                    type: {
                        name: "String"
                    }
                },
                discoveryUrl: {
                    serializedName: "discoveryUrl",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    readOnly: true,
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Workspace = {
        serializedName: "Workspace",
        type: {
            name: "Composite",
            className: "Workspace",
            modelProperties: __assign({}, Resource.type.modelProperties, { workspaceId: {
                    readOnly: true,
                    serializedName: "properties.workspaceId",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, batchaiWorkspace: {
                    serializedName: "properties.batchaiWorkspace",
                    type: {
                        name: "String"
                    }
                }, keyVault: {
                    serializedName: "properties.keyVault",
                    type: {
                        name: "String"
                    }
                }, applicationInsights: {
                    serializedName: "properties.applicationInsights",
                    type: {
                        name: "String"
                    }
                }, containerRegistry: {
                    serializedName: "properties.containerRegistry",
                    type: {
                        name: "String"
                    }
                }, storageAccount: {
                    serializedName: "properties.storageAccount",
                    type: {
                        name: "String"
                    }
                }, discoveryUrl: {
                    serializedName: "properties.discoveryUrl",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WorkspacePropertiesUpdateParameters = {
        serializedName: "WorkspacePropertiesUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkspacePropertiesUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkspaceUpdateParameters = {
        serializedName: "WorkspaceUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkspaceUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned"
                        ]
                    }
                }
            }
        }
    };
    var Password = {
        serializedName: "Password",
        type: {
            name: "Composite",
            className: "Password",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryListCredentialsResult = {
        serializedName: "RegistryListCredentialsResult",
        type: {
            name: "Composite",
            className: "RegistryListCredentialsResult",
            modelProperties: {
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    readOnly: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                passwords: {
                    serializedName: "passwords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Password"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListWorkspaceKeysResult = {
        serializedName: "ListWorkspaceKeysResult",
        type: {
            name: "Composite",
            className: "ListWorkspaceKeysResult",
            modelProperties: {
                userStorageKey: {
                    readOnly: true,
                    serializedName: "userStorageKey",
                    type: {
                        name: "String"
                    }
                },
                userStorageResourceId: {
                    readOnly: true,
                    serializedName: "userStorageResourceId",
                    type: {
                        name: "String"
                    }
                },
                appInsightsInstrumentationKey: {
                    readOnly: true,
                    serializedName: "appInsightsInstrumentationKey",
                    type: {
                        name: "String"
                    }
                },
                containerRegistryCredentials: {
                    readOnly: true,
                    serializedName: "containerRegistryCredentials",
                    type: {
                        name: "Composite",
                        className: "RegistryListCredentialsResult"
                    }
                }
            }
        }
    };
    var ErrorDetail = {
        serializedName: "ErrorDetail",
        type: {
            name: "Composite",
            className: "ErrorDetail",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var MachineLearningServiceError = {
        serializedName: "MachineLearningServiceError",
        type: {
            name: "Composite",
            className: "MachineLearningServiceError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var Compute = {
        serializedName: "Compute",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "computeType",
                clientName: "computeType"
            },
            uberParent: "Compute",
            className: "Compute",
            modelProperties: {
                computeLocation: {
                    serializedName: "computeLocation",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                createdOn: {
                    readOnly: true,
                    serializedName: "createdOn",
                    type: {
                        name: "DateTime"
                    }
                },
                modifiedOn: {
                    readOnly: true,
                    serializedName: "modifiedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                provisioningErrors: {
                    readOnly: true,
                    serializedName: "provisioningErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MachineLearningServiceError"
                            }
                        }
                    }
                },
                computeType: {
                    required: true,
                    serializedName: "computeType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeResource = {
        serializedName: "ComputeResource",
        type: {
            name: "Composite",
            className: "ComputeResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "computeType",
                            clientName: "computeType"
                        },
                        uberParent: "Compute",
                        className: "Compute"
                    }
                } })
        }
    };
    var SystemService = {
        serializedName: "SystemService",
        type: {
            name: "Composite",
            className: "SystemService",
            modelProperties: {
                systemServiceType: {
                    readOnly: true,
                    serializedName: "systemServiceType",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddress: {
                    readOnly: true,
                    serializedName: "publicIpAddress",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SslConfiguration = {
        serializedName: "SslConfiguration",
        type: {
            name: "Composite",
            className: "SslConfiguration",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                cert: {
                    serializedName: "cert",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                cname: {
                    serializedName: "cname",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AKSProperties = {
        serializedName: "AKS_properties",
        type: {
            name: "Composite",
            className: "AKSProperties",
            modelProperties: {
                clusterFqdn: {
                    serializedName: "clusterFqdn",
                    type: {
                        name: "String"
                    }
                },
                systemServices: {
                    serializedName: "systemServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SystemService"
                            }
                        }
                    }
                },
                agentCount: {
                    serializedName: "agentCount",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                agentVMSize: {
                    serializedName: "agentVMSize",
                    type: {
                        name: "String"
                    }
                },
                sslConfiguration: {
                    serializedName: "sslConfiguration",
                    type: {
                        name: "Composite",
                        className: "SslConfiguration"
                    }
                }
            }
        }
    };
    var AKS = {
        serializedName: "AKS",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
            uberParent: "Compute",
            className: "AKS",
            modelProperties: __assign({}, Compute.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "AKSProperties"
                    }
                } })
        }
    };
    var ScaleSettings = {
        serializedName: "ScaleSettings",
        type: {
            name: "Composite",
            className: "ScaleSettings",
            modelProperties: {
                maxNodeCount: {
                    serializedName: "maxNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                minNodeCount: {
                    serializedName: "minNodeCount",
                    type: {
                        name: "Number"
                    }
                },
                autoScaleEnabled: {
                    serializedName: "autoScaleEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var BatchAIProperties = {
        serializedName: "BatchAI_properties",
        type: {
            name: "Composite",
            className: "BatchAIProperties",
            modelProperties: {
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                vmPriority: {
                    serializedName: "vmPriority",
                    type: {
                        name: "String"
                    }
                },
                scaleSettings: {
                    serializedName: "scaleSettings",
                    type: {
                        name: "Composite",
                        className: "ScaleSettings"
                    }
                }
            }
        }
    };
    var BatchAI = {
        serializedName: "BatchAI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
            uberParent: "Compute",
            className: "BatchAI",
            modelProperties: __assign({}, Compute.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "BatchAIProperties"
                    }
                } })
        }
    };
    var VirtualMachineSshCredentials = {
        serializedName: "VirtualMachineSshCredentials",
        type: {
            name: "Composite",
            className: "VirtualMachineSshCredentials",
            modelProperties: {
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                publicKeyData: {
                    serializedName: "publicKeyData",
                    type: {
                        name: "String"
                    }
                },
                privateKeyData: {
                    serializedName: "privateKeyData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineProperties = {
        serializedName: "VirtualMachine_properties",
        type: {
            name: "Composite",
            className: "VirtualMachineProperties",
            modelProperties: {
                virtualMachineSize: {
                    serializedName: "virtualMachineSize",
                    type: {
                        name: "String"
                    }
                },
                sshPort: {
                    serializedName: "sshPort",
                    type: {
                        name: "Number"
                    }
                },
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                administratorAccount: {
                    serializedName: "administratorAccount",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineSshCredentials"
                    }
                }
            }
        }
    };
    var VirtualMachine = {
        serializedName: "VirtualMachine",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
            uberParent: "Compute",
            className: "VirtualMachine",
            modelProperties: __assign({}, Compute.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineProperties"
                    }
                } })
        }
    };
    var HDInsightProperties = {
        serializedName: "HDInsight_properties",
        type: {
            name: "Composite",
            className: "HDInsightProperties",
            modelProperties: {
                sshPort: {
                    serializedName: "sshPort",
                    type: {
                        name: "Number"
                    }
                },
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                administratorAccount: {
                    serializedName: "administratorAccount",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineSshCredentials"
                    }
                }
            }
        }
    };
    var HDInsight = {
        serializedName: "HDInsight",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
            uberParent: "Compute",
            className: "HDInsight",
            modelProperties: __assign({}, Compute.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "HDInsightProperties"
                    }
                } })
        }
    };
    var DataFactory = {
        serializedName: "DataFactory",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
            uberParent: "Compute",
            className: "DataFactory",
            modelProperties: __assign({}, Compute.type.modelProperties)
        }
    };
    var ServicePrincipalCredentials = {
        serializedName: "ServicePrincipalCredentials",
        type: {
            name: "Composite",
            className: "ServicePrincipalCredentials",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    required: true,
                    serializedName: "clientSecret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeSecrets = {
        serializedName: "ComputeSecrets",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "computeType",
                clientName: "computeType"
            },
            uberParent: "ComputeSecrets",
            className: "ComputeSecrets",
            modelProperties: {
                computeType: {
                    required: true,
                    serializedName: "computeType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AksComputeSecrets = {
        serializedName: "AKS",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
            uberParent: "ComputeSecrets",
            className: "AksComputeSecrets",
            modelProperties: __assign({}, ComputeSecrets.type.modelProperties, { userKubeConfig: {
                    serializedName: "userKubeConfig",
                    type: {
                        name: "String"
                    }
                }, adminKubeConfig: {
                    serializedName: "adminKubeConfig",
                    type: {
                        name: "String"
                    }
                }, imagePullSecretName: {
                    serializedName: "imagePullSecretName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineSecrets = {
        serializedName: "VirtualMachine",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
            uberParent: "ComputeSecrets",
            className: "VirtualMachineSecrets",
            modelProperties: __assign({}, ComputeSecrets.type.modelProperties, { administratorAccount: {
                    serializedName: "administratorAccount",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineSshCredentials"
                    }
                } })
        }
    };
    var MachineLearningComputeCreateOrUpdateHeaders = {
        serializedName: "machinelearningcompute-createorupdate-headers",
        type: {
            name: "Composite",
            className: "MachineLearningComputeCreateOrUpdateHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MachineLearningComputeDeleteHeaders = {
        serializedName: "machinelearningcompute-delete-headers",
        type: {
            name: "Composite",
            className: "MachineLearningComputeDeleteHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MachineLearningComputeSystemUpdateHeaders = {
        serializedName: "machinelearningcompute-systemupdate-headers",
        type: {
            name: "Composite",
            className: "MachineLearningComputeSystemUpdateHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkspaceListResult = {
        serializedName: "WorkspaceListResult",
        type: {
            name: "Composite",
            className: "WorkspaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workspace"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PaginatedComputeResourcesList = {
        serializedName: "PaginatedComputeResourcesList",
        type: {
            name: "Composite",
            className: "PaginatedComputeResourcesList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'Compute': Compute,
        'Compute.AKS': AKS,
        'Compute.BatchAI': BatchAI,
        'Compute.VirtualMachine': VirtualMachine,
        'Compute.HDInsight': HDInsight,
        'Compute.DataFactory': DataFactory,
        'ComputeSecrets': ComputeSecrets,
        'ComputeSecrets.AKS': AksComputeSecrets,
        'ComputeSecrets.VirtualMachine': VirtualMachineSecrets
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        WorkspaceProperties: WorkspaceProperties,
        Resource: Resource,
        Workspace: Workspace,
        WorkspacePropertiesUpdateParameters: WorkspacePropertiesUpdateParameters,
        WorkspaceUpdateParameters: WorkspaceUpdateParameters,
        Identity: Identity,
        Password: Password,
        RegistryListCredentialsResult: RegistryListCredentialsResult,
        ListWorkspaceKeysResult: ListWorkspaceKeysResult,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        MachineLearningServiceError: MachineLearningServiceError,
        Compute: Compute,
        ComputeResource: ComputeResource,
        SystemService: SystemService,
        SslConfiguration: SslConfiguration,
        AKSProperties: AKSProperties,
        AKS: AKS,
        ScaleSettings: ScaleSettings,
        BatchAIProperties: BatchAIProperties,
        BatchAI: BatchAI,
        VirtualMachineSshCredentials: VirtualMachineSshCredentials,
        VirtualMachineProperties: VirtualMachineProperties,
        VirtualMachine: VirtualMachine,
        HDInsightProperties: HDInsightProperties,
        HDInsight: HDInsight,
        DataFactory: DataFactory,
        ServicePrincipalCredentials: ServicePrincipalCredentials,
        ComputeSecrets: ComputeSecrets,
        AksComputeSecrets: AksComputeSecrets,
        VirtualMachineSecrets: VirtualMachineSecrets,
        MachineLearningComputeCreateOrUpdateHeaders: MachineLearningComputeCreateOrUpdateHeaders,
        MachineLearningComputeDeleteHeaders: MachineLearningComputeDeleteHeaders,
        MachineLearningComputeSystemUpdateHeaders: MachineLearningComputeSystemUpdateHeaders,
        OperationListResult: OperationListResult,
        WorkspaceListResult: WorkspaceListResult,
        PaginatedComputeResourcesList: PaginatedComputeResourcesList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        MachineLearningServiceError: MachineLearningServiceError,
        ErrorResponse: ErrorResponse,
        ErrorDetail: ErrorDetail
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var computeName = {
        parameterPath: "computeName",
        mapper: {
            required: true,
            serializedName: "computeName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skiptoken = {
        parameterPath: [
            "options",
            "skiptoken"
        ],
        mapper: {
            serializedName: "$skiptoken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var workspaceName = {
        parameterPath: "workspaceName",
        mapper: {
            required: true,
            serializedName: "workspaceName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.MachineLearningServices/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Workspace: Workspace,
        Resource: Resource,
        BaseResource: BaseResource,
        Identity: Identity,
        MachineLearningServiceError: MachineLearningServiceError,
        ErrorResponse: ErrorResponse,
        ErrorDetail: ErrorDetail,
        WorkspaceUpdateParameters: WorkspaceUpdateParameters,
        WorkspaceListResult: WorkspaceListResult,
        ListWorkspaceKeysResult: ListWorkspaceKeysResult,
        RegistryListCredentialsResult: RegistryListCredentialsResult,
        Password: Password,
        ComputeResource: ComputeResource,
        Compute: Compute,
        AKS: AKS,
        AKSProperties: AKSProperties,
        SystemService: SystemService,
        SslConfiguration: SslConfiguration,
        BatchAI: BatchAI,
        BatchAIProperties: BatchAIProperties,
        ScaleSettings: ScaleSettings,
        VirtualMachine: VirtualMachine,
        VirtualMachineProperties: VirtualMachineProperties,
        VirtualMachineSshCredentials: VirtualMachineSshCredentials,
        HDInsight: HDInsight,
        HDInsightProperties: HDInsightProperties,
        DataFactory: DataFactory
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workspaces. */
    var Workspaces = /** @class */ (function () {
        /**
         * Create a Workspaces.
         * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
         */
        function Workspaces(client) {
            this.client = client;
        }
        Workspaces.prototype.get = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Workspaces.prototype.createOrUpdate = function (resourceGroupName$$1, workspaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Workspaces.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Workspaces.prototype.update = function (resourceGroupName$$1, workspaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Workspaces.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Workspaces.prototype.listKeys = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Workspaces.prototype.resyncKeys = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, resyncKeysOperationSpec, callback);
        };
        Workspaces.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Workspaces.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Workspaces.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return Workspaces;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Workspace, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            201: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WorkspaceUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workspace
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListWorkspaceKeysResult
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var resyncKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/resyncKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/workspaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkspaceListResult
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        PaginatedComputeResourcesList: PaginatedComputeResourcesList,
        ComputeResource: ComputeResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Identity: Identity,
        Compute: Compute,
        MachineLearningServiceError: MachineLearningServiceError,
        ErrorResponse: ErrorResponse,
        ErrorDetail: ErrorDetail,
        MachineLearningComputeCreateOrUpdateHeaders: MachineLearningComputeCreateOrUpdateHeaders,
        MachineLearningComputeDeleteHeaders: MachineLearningComputeDeleteHeaders,
        MachineLearningComputeSystemUpdateHeaders: MachineLearningComputeSystemUpdateHeaders,
        ComputeSecrets: ComputeSecrets,
        Workspace: Workspace,
        AKS: AKS,
        AKSProperties: AKSProperties,
        SystemService: SystemService,
        SslConfiguration: SslConfiguration,
        BatchAI: BatchAI,
        BatchAIProperties: BatchAIProperties,
        ScaleSettings: ScaleSettings,
        VirtualMachine: VirtualMachine,
        VirtualMachineProperties: VirtualMachineProperties,
        VirtualMachineSshCredentials: VirtualMachineSshCredentials,
        HDInsight: HDInsight,
        HDInsightProperties: HDInsightProperties,
        DataFactory: DataFactory,
        AksComputeSecrets: AksComputeSecrets,
        VirtualMachineSecrets: VirtualMachineSecrets
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MachineLearningCompute. */
    var MachineLearningCompute = /** @class */ (function () {
        /**
         * Create a MachineLearningCompute.
         * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
         */
        function MachineLearningCompute(client) {
            this.client = client;
        }
        MachineLearningCompute.prototype.listByWorkspace = function (resourceGroupName$$1, workspaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                options: options
            }, listByWorkspaceOperationSpec, callback);
        };
        MachineLearningCompute.prototype.get = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                computeName: computeName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates or updates compute. This call will overwrite a compute if it exists. This is a
         * nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify
         * that it does not exist yet.
         * @param resourceGroupName Name of the resource group in which workspace is located.
         * @param workspaceName Name of Azure Machine Learning workspace.
         * @param computeName Name of the Azure Machine Learning compute.
         * @param parameters Payload with Machine Learning compute definition.
         * @param [options] The optional parameters
         * @returns Promise<Models.MachineLearningComputeCreateOrUpdateResponse>
         */
        MachineLearningCompute.prototype.createOrUpdate = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, workspaceName$$1, computeName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes specified Machine Learning compute.
         * @param resourceGroupName Name of the resource group in which workspace is located.
         * @param workspaceName Name of Azure Machine Learning workspace.
         * @param computeName Name of the Azure Machine Learning compute.
         * @param [options] The optional parameters
         * @returns Promise<Models.MachineLearningComputeDeleteResponse>
         */
        MachineLearningCompute.prototype.deleteMethod = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, workspaceName$$1, computeName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * System Update On Machine Learning compute.
         * @param resourceGroupName Name of the resource group in which workspace is located.
         * @param workspaceName Name of Azure Machine Learning workspace.
         * @param computeName Name of the Azure Machine Learning compute.
         * @param [options] The optional parameters
         * @returns Promise<Models.MachineLearningComputeSystemUpdateResponse>
         */
        MachineLearningCompute.prototype.systemUpdate = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, options) {
            return this.beginSystemUpdate(resourceGroupName$$1, workspaceName$$1, computeName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        MachineLearningCompute.prototype.listKeys = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                computeName: computeName$$1,
                options: options
            }, listKeysOperationSpec$1, callback);
        };
        /**
         * Creates or updates compute. This call will overwrite a compute if it exists. This is a
         * nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify
         * that it does not exist yet.
         * @param resourceGroupName Name of the resource group in which workspace is located.
         * @param workspaceName Name of Azure Machine Learning workspace.
         * @param computeName Name of the Azure Machine Learning compute.
         * @param parameters Payload with Machine Learning compute definition.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        MachineLearningCompute.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                computeName: computeName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes specified Machine Learning compute.
         * @param resourceGroupName Name of the resource group in which workspace is located.
         * @param workspaceName Name of Azure Machine Learning workspace.
         * @param computeName Name of the Azure Machine Learning compute.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        MachineLearningCompute.prototype.beginDeleteMethod = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                computeName: computeName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * System Update On Machine Learning compute.
         * @param resourceGroupName Name of the resource group in which workspace is located.
         * @param workspaceName Name of Azure Machine Learning workspace.
         * @param computeName Name of the Azure Machine Learning compute.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        MachineLearningCompute.prototype.beginSystemUpdate = function (resourceGroupName$$1, workspaceName$$1, computeName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                workspaceName: workspaceName$$1,
                computeName: computeName$$1,
                options: options
            }, beginSystemUpdateOperationSpec, options);
        };
        MachineLearningCompute.prototype.listByWorkspaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByWorkspaceNextOperationSpec, callback);
        };
        return MachineLearningCompute;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByWorkspaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedComputeResourcesList
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            computeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputeResource
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            computeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputeSecrets
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            computeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ComputeResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ComputeResource,
                headersMapper: MachineLearningComputeCreateOrUpdateHeaders
            },
            201: {
                bodyMapper: ComputeResource,
                headersMapper: MachineLearningComputeCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            computeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: MachineLearningComputeDeleteHeaders
            },
            202: {
                headersMapper: MachineLearningComputeDeleteHeaders
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };
    var beginSystemUpdateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/computes/{computeName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workspaceName,
            computeName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: MachineLearningComputeSystemUpdateHeaders
            },
            202: {
                headersMapper: MachineLearningComputeSystemUpdateHeaders
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };
    var listByWorkspaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedComputeResourcesList
            },
            default: {
                bodyMapper: MachineLearningServiceError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-machinelearningservices";
    var packageVersion = "1.0.0-preview";
    var AzureMachineLearningWorkspacesContext = /** @class */ (function (_super) {
        __extends(AzureMachineLearningWorkspacesContext, _super);
        /**
         * Initializes a new instance of the AzureMachineLearningWorkspaces class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription identifier.
         * @param [options] The parameter options
         */
        function AzureMachineLearningWorkspacesContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-03-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureMachineLearningWorkspacesContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureMachineLearningWorkspaces = /** @class */ (function (_super) {
        __extends(AzureMachineLearningWorkspaces, _super);
        /**
         * Initializes a new instance of the AzureMachineLearningWorkspaces class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure subscription identifier.
         * @param [options] The parameter options
         */
        function AzureMachineLearningWorkspaces(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.workspaces = new Workspaces(_this);
            _this.machineLearningCompute = new MachineLearningCompute(_this);
            return _this;
        }
        return AzureMachineLearningWorkspaces;
    }(AzureMachineLearningWorkspacesContext));

    exports.AzureMachineLearningWorkspaces = AzureMachineLearningWorkspaces;
    exports.AzureMachineLearningWorkspacesContext = AzureMachineLearningWorkspacesContext;
    exports.AzureMachineLearningWorkspacesModels = index;
    exports.AzureMachineLearningWorkspacesMappers = mappers;
    exports.Operations = Operations;
    exports.Workspaces = Workspaces;
    exports.MachineLearningCompute = MachineLearningCompute;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-machinelearningservices.js.map
