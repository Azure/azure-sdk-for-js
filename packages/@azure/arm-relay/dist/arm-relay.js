/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmRelay = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Relaytype.
     * Possible values include: 'NetTcp', 'Http'
     * @readonly
     * @enum {string}
     */
    var Relaytype;
    (function (Relaytype) {
        Relaytype["NetTcp"] = "NetTcp";
        Relaytype["Http"] = "Http";
    })(Relaytype || (Relaytype = {}));
    /**
     * Defines values for SkuTier.
     * Possible values include: 'Standard'
     * @readonly
     * @enum {string}
     */
    var SkuTier;
    (function (SkuTier) {
        SkuTier["Standard"] = "Standard";
    })(SkuTier || (SkuTier = {}));
    /**
     * Defines values for ProvisioningStateEnum.
     * Possible values include: 'Created', 'Succeeded', 'Deleted', 'Failed',
     * 'Updating', 'Unknown'
     * @readonly
     * @enum {string}
     */
    var ProvisioningStateEnum;
    (function (ProvisioningStateEnum) {
        ProvisioningStateEnum["Created"] = "Created";
        ProvisioningStateEnum["Succeeded"] = "Succeeded";
        ProvisioningStateEnum["Deleted"] = "Deleted";
        ProvisioningStateEnum["Failed"] = "Failed";
        ProvisioningStateEnum["Updating"] = "Updating";
        ProvisioningStateEnum["Unknown"] = "Unknown";
    })(ProvisioningStateEnum || (ProvisioningStateEnum = {}));
    /**
     * Defines values for AccessRights.
     * Possible values include: 'Manage', 'Send', 'Listen'
     * @readonly
     * @enum {string}
     */
    var AccessRights;
    (function (AccessRights) {
        AccessRights["Manage"] = "Manage";
        AccessRights["Send"] = "Send";
        AccessRights["Listen"] = "Listen";
    })(AccessRights || (AccessRights = {}));
    /**
     * Defines values for KeyType.
     * Possible values include: 'PrimaryKey', 'SecondaryKey'
     * @readonly
     * @enum {string}
     */
    var KeyType;
    (function (KeyType) {
        KeyType["PrimaryKey"] = "PrimaryKey";
        KeyType["SecondaryKey"] = "SecondaryKey";
    })(KeyType || (KeyType = {}));
    /**
     * Defines values for UnavailableReason.
     * Possible values include: 'None', 'InvalidName', 'SubscriptionIsDisabled',
     * 'NameInUse', 'NameInLockdown', 'TooManyNamespaceInCurrentSubscription'
     * @readonly
     * @enum {string}
     */
    var UnavailableReason;
    (function (UnavailableReason) {
        UnavailableReason["None"] = "None";
        UnavailableReason["InvalidName"] = "InvalidName";
        UnavailableReason["SubscriptionIsDisabled"] = "SubscriptionIsDisabled";
        UnavailableReason["NameInUse"] = "NameInUse";
        UnavailableReason["NameInLockdown"] = "NameInLockdown";
        UnavailableReason["TooManyNamespaceInCurrentSubscription"] = "TooManyNamespaceInCurrentSubscription";
    })(UnavailableReason || (UnavailableReason = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Relaytype () { return Relaytype; },
        get SkuTier () { return SkuTier; },
        get ProvisioningStateEnum () { return ProvisioningStateEnum; },
        get AccessRights () { return AccessRights; },
        get KeyType () { return KeyType; },
        get UnavailableReason () { return UnavailableReason; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ResourceNamespacePatch = {
        serializedName: "ResourceNamespacePatch",
        type: {
            name: "Composite",
            className: "ResourceNamespacePatch",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var HybridConnectionProperties = {
        serializedName: "HybridConnection_properties",
        type: {
            name: "Composite",
            className: "HybridConnectionProperties",
            modelProperties: {
                createdAt: {
                    readOnly: true,
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedAt: {
                    readOnly: true,
                    serializedName: "updatedAt",
                    type: {
                        name: "DateTime"
                    }
                },
                listenerCount: {
                    readOnly: true,
                    serializedName: "listenerCount",
                    constraints: {
                        InclusiveMaximum: 25,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                requiresClientAuthorization: {
                    serializedName: "requiresClientAuthorization",
                    type: {
                        name: "Boolean"
                    }
                },
                userMetadata: {
                    serializedName: "userMetadata",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HybridConnection = {
        serializedName: "HybridConnection",
        type: {
            name: "Composite",
            className: "HybridConnection",
            modelProperties: __assign({}, Resource.type.modelProperties, { createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, listenerCount: {
                    readOnly: true,
                    serializedName: "properties.listenerCount",
                    constraints: {
                        InclusiveMaximum: 25,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, requiresClientAuthorization: {
                    serializedName: "properties.requiresClientAuthorization",
                    type: {
                        name: "Boolean"
                    }
                }, userMetadata: {
                    serializedName: "properties.userMetadata",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WcfRelayProperties = {
        serializedName: "WcfRelay_properties",
        type: {
            name: "Composite",
            className: "WcfRelayProperties",
            modelProperties: {
                isDynamic: {
                    readOnly: true,
                    serializedName: "isDynamic",
                    type: {
                        name: "Boolean"
                    }
                },
                createdAt: {
                    readOnly: true,
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedAt: {
                    readOnly: true,
                    serializedName: "updatedAt",
                    type: {
                        name: "DateTime"
                    }
                },
                listenerCount: {
                    readOnly: true,
                    serializedName: "listenerCount",
                    constraints: {
                        InclusiveMaximum: 25,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                relayType: {
                    serializedName: "relayType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NetTcp",
                            "Http"
                        ]
                    }
                },
                requiresClientAuthorization: {
                    serializedName: "requiresClientAuthorization",
                    type: {
                        name: "Boolean"
                    }
                },
                requiresTransportSecurity: {
                    serializedName: "requiresTransportSecurity",
                    type: {
                        name: "Boolean"
                    }
                },
                userMetadata: {
                    serializedName: "userMetadata",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WcfRelay = {
        serializedName: "WcfRelay",
        type: {
            name: "Composite",
            className: "WcfRelay",
            modelProperties: __assign({}, Resource.type.modelProperties, { isDynamic: {
                    readOnly: true,
                    serializedName: "properties.isDynamic",
                    type: {
                        name: "Boolean"
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, listenerCount: {
                    readOnly: true,
                    serializedName: "properties.listenerCount",
                    constraints: {
                        InclusiveMaximum: 25,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }, relayType: {
                    serializedName: "properties.relayType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NetTcp",
                            "Http"
                        ]
                    }
                }, requiresClientAuthorization: {
                    serializedName: "properties.requiresClientAuthorization",
                    type: {
                        name: "Boolean"
                    }
                }, requiresTransportSecurity: {
                    serializedName: "properties.requiresTransportSecurity",
                    type: {
                        name: "Boolean"
                    }
                }, userMetadata: {
                    serializedName: "properties.userMetadata",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    isConstant: true,
                    serializedName: "name",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard"
                        ]
                    }
                }
            }
        }
    };
    var RelayNamespaceProperties = {
        serializedName: "RelayNamespaceProperties",
        type: {
            name: "Composite",
            className: "RelayNamespaceProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Created",
                            "Succeeded",
                            "Deleted",
                            "Failed",
                            "Updating",
                            "Unknown"
                        ]
                    }
                },
                createdAt: {
                    readOnly: true,
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                updatedAt: {
                    readOnly: true,
                    serializedName: "updatedAt",
                    type: {
                        name: "DateTime"
                    }
                },
                serviceBusEndpoint: {
                    readOnly: true,
                    serializedName: "serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                },
                metricId: {
                    readOnly: true,
                    serializedName: "metricId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelayNamespace = {
        serializedName: "RelayNamespace",
        type: {
            name: "Composite",
            className: "RelayNamespace",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Created",
                            "Succeeded",
                            "Deleted",
                            "Failed",
                            "Updating",
                            "Unknown"
                        ]
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, serviceBusEndpoint: {
                    readOnly: true,
                    serializedName: "properties.serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                }, metricId: {
                    readOnly: true,
                    serializedName: "properties.metricId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RelayUpdateParameters = {
        serializedName: "RelayUpdateParameters",
        type: {
            name: "Composite",
            className: "RelayUpdateParameters",
            modelProperties: __assign({}, ResourceNamespacePatch.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Created",
                            "Succeeded",
                            "Deleted",
                            "Failed",
                            "Updating",
                            "Unknown"
                        ]
                    }
                }, createdAt: {
                    readOnly: true,
                    serializedName: "properties.createdAt",
                    type: {
                        name: "DateTime"
                    }
                }, updatedAt: {
                    readOnly: true,
                    serializedName: "properties.updatedAt",
                    type: {
                        name: "DateTime"
                    }
                }, serviceBusEndpoint: {
                    readOnly: true,
                    serializedName: "properties.serviceBusEndpoint",
                    type: {
                        name: "String"
                    }
                }, metricId: {
                    readOnly: true,
                    serializedName: "properties.metricId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AuthorizationRuleProperties = {
        serializedName: "AuthorizationRule_properties",
        type: {
            name: "Composite",
            className: "AuthorizationRuleProperties",
            modelProperties: {
                rights: {
                    required: true,
                    serializedName: "rights",
                    constraints: {
                        UniqueItems: true
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Manage",
                                    "Send",
                                    "Listen"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var AuthorizationRule = {
        serializedName: "AuthorizationRule",
        type: {
            name: "Composite",
            className: "AuthorizationRule",
            modelProperties: __assign({}, Resource.type.modelProperties, { rights: {
                    required: true,
                    serializedName: "properties.rights",
                    constraints: {
                        UniqueItems: true
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Manage",
                                    "Send",
                                    "Listen"
                                ]
                            }
                        }
                    }
                } })
        }
    };
    var AccessKeys = {
        serializedName: "AccessKeys",
        type: {
            name: "Composite",
            className: "AccessKeys",
            modelProperties: {
                primaryConnectionString: {
                    serializedName: "primaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                secondaryConnectionString: {
                    serializedName: "secondaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                keyName: {
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegenerateAccessKeyParameters = {
        serializedName: "RegenerateAccessKeyParameters",
        type: {
            name: "Composite",
            className: "RegenerateAccessKeyParameters",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "PrimaryKey",
                            "SecondaryKey"
                        ]
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailability = {
        serializedName: "CheckNameAvailability",
        type: {
            name: "Composite",
            className: "CheckNameAvailability",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "InvalidName",
                            "SubscriptionIsDisabled",
                            "NameInUse",
                            "NameInLockdown",
                            "TooManyNamespaceInCurrentSubscription"
                        ]
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RelayNamespaceListResult = {
        serializedName: "RelayNamespaceListResult",
        type: {
            name: "Composite",
            className: "RelayNamespaceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RelayNamespace"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AuthorizationRuleListResult = {
        serializedName: "AuthorizationRuleListResult",
        type: {
            name: "Composite",
            className: "AuthorizationRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AuthorizationRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HybridConnectionListResult = {
        serializedName: "HybridConnectionListResult",
        type: {
            name: "Composite",
            className: "HybridConnectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HybridConnection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WcfRelaysListResult = {
        serializedName: "WcfRelaysListResult",
        type: {
            name: "Composite",
            className: "WcfRelaysListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WcfRelay"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        HybridConnectionProperties: HybridConnectionProperties,
        HybridConnection: HybridConnection,
        WcfRelayProperties: WcfRelayProperties,
        WcfRelay: WcfRelay,
        Sku: Sku,
        RelayNamespaceProperties: RelayNamespaceProperties,
        RelayNamespace: RelayNamespace,
        RelayUpdateParameters: RelayUpdateParameters,
        AuthorizationRuleProperties: AuthorizationRuleProperties,
        AuthorizationRule: AuthorizationRule,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        CheckNameAvailability: CheckNameAvailability,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ErrorResponse: ErrorResponse,
        OperationListResult: OperationListResult,
        RelayNamespaceListResult: RelayNamespaceListResult,
        AuthorizationRuleListResult: AuthorizationRuleListResult,
        HybridConnectionListResult: HybridConnectionListResult,
        WcfRelaysListResult: WcfRelaysListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var authorizationRuleName = {
        parameterPath: "authorizationRuleName",
        mapper: {
            required: true,
            serializedName: "authorizationRuleName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var hybridConnectionName = {
        parameterPath: "hybridConnectionName",
        mapper: {
            required: true,
            serializedName: "hybridConnectionName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var namespaceName = {
        parameterPath: "namespaceName",
        mapper: {
            required: true,
            serializedName: "namespaceName",
            constraints: {
                MaxLength: 50,
                MinLength: 6
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var relayName = {
        parameterPath: "relayName",
        mapper: {
            required: true,
            serializedName: "relayName",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {RelayManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Relay/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CheckNameAvailability: CheckNameAvailability,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        ErrorResponse: ErrorResponse,
        RelayNamespaceListResult: RelayNamespaceListResult,
        RelayNamespace: RelayNamespace,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        RelayUpdateParameters: RelayUpdateParameters,
        ResourceNamespacePatch: ResourceNamespacePatch,
        AuthorizationRuleListResult: AuthorizationRuleListResult,
        AuthorizationRule: AuthorizationRule,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        HybridConnection: HybridConnection,
        WcfRelay: WcfRelay
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Namespaces. */
    var Namespaces = /** @class */ (function () {
        /**
         * Create a Namespaces.
         * @param {RelayManagementClientContext} client Reference to the service client.
         */
        function Namespaces(client) {
            this.client = client;
        }
        Namespaces.prototype.checkNameAvailabilityMethod = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityMethodOperationSpec, callback);
        };
        Namespaces.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Namespaces.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Create Azure Relay namespace.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param parameters Parameters supplied to create a namespace resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.NamespacesCreateOrUpdateResponse>
         */
        Namespaces.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, namespaceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing namespace. This operation also removes all associated resources under the
         * namespace.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Namespaces.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, namespaceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Namespaces.prototype.get = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Namespaces.prototype.update = function (resourceGroupName$$1, namespaceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        Namespaces.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec, callback);
        };
        Namespaces.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec, callback);
        };
        Namespaces.prototype.listKeys = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Namespaces.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec, callback);
        };
        /**
         * Create Azure Relay namespace.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param parameters Parameters supplied to create a namespace resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Namespaces.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, namespaceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes an existing namespace. This operation also removes all associated resources under the
         * namespace.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param namespaceName The namespace name
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Namespaces.prototype.beginDeleteMethod = function (resourceGroupName$$1, namespaceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Namespaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Namespaces.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Namespaces.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec, callback);
        };
        return Namespaces;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkNameAvailabilityMethodOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Relay/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailability, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Relay/namespaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayNamespace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RelayUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelayNamespace
            },
            201: {
                bodyMapper: RelayNamespace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listAuthorizationRulesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAuthorizationRuleOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AuthorizationRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteAuthorizationRuleOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getAuthorizationRuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var regenerateKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegenerateAccessKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RelayNamespace, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RelayNamespace
            },
            201: {
                bodyMapper: RelayNamespace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RelayNamespaceListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listAuthorizationRulesNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        HybridConnectionListResult: HybridConnectionListResult,
        HybridConnection: HybridConnection,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        AuthorizationRuleListResult: AuthorizationRuleListResult,
        AuthorizationRule: AuthorizationRule,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        WcfRelay: WcfRelay,
        RelayNamespace: RelayNamespace,
        Sku: Sku,
        RelayUpdateParameters: RelayUpdateParameters
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HybridConnections. */
    var HybridConnections = /** @class */ (function () {
        /**
         * Create a HybridConnections.
         * @param {RelayManagementClientContext} client Reference to the service client.
         */
        function HybridConnections(client) {
            this.client = client;
        }
        HybridConnections.prototype.listByNamespace = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, listByNamespaceOperationSpec, callback);
        };
        HybridConnections.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        HybridConnections.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        HybridConnections.prototype.get = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        HybridConnections.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec$1, callback);
        };
        HybridConnections.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec$1, callback);
        };
        HybridConnections.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec$1, callback);
        };
        HybridConnections.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec$1, callback);
        };
        HybridConnections.prototype.listKeys = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec$1, callback);
        };
        HybridConnections.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName$$1, hybridConnectionName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                hybridConnectionName: hybridConnectionName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec$1, callback);
        };
        HybridConnections.prototype.listByNamespaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByNamespaceNextOperationSpec, callback);
        };
        HybridConnections.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec$1, callback);
        };
        return HybridConnections;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByNamespaceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnectionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, HybridConnection, { required: true })
        },
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listAuthorizationRulesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateAuthorizationRuleOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AuthorizationRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteAuthorizationRuleOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getAuthorizationRuleOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var regenerateKeysOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/hybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            hybridConnectionName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegenerateAccessKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByNamespaceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridConnectionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listAuthorizationRulesNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        WcfRelaysListResult: WcfRelaysListResult,
        WcfRelay: WcfRelay,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        AuthorizationRuleListResult: AuthorizationRuleListResult,
        AuthorizationRule: AuthorizationRule,
        CloudError: CloudError,
        AccessKeys: AccessKeys,
        RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
        TrackedResource: TrackedResource,
        ResourceNamespacePatch: ResourceNamespacePatch,
        HybridConnection: HybridConnection,
        RelayNamespace: RelayNamespace,
        Sku: Sku,
        RelayUpdateParameters: RelayUpdateParameters
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WCFRelays. */
    var WCFRelays = /** @class */ (function () {
        /**
         * Create a WCFRelays.
         * @param {RelayManagementClientContext} client Reference to the service client.
         */
        function WCFRelays(client) {
            this.client = client;
        }
        WCFRelays.prototype.listByNamespace = function (resourceGroupName$$1, namespaceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                options: options
            }, listByNamespaceOperationSpec$1, callback);
        };
        WCFRelays.prototype.createOrUpdate = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        WCFRelays.prototype.deleteMethod = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        WCFRelays.prototype.get = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        WCFRelays.prototype.listAuthorizationRules = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                options: options
            }, listAuthorizationRulesOperationSpec$2, callback);
        };
        WCFRelays.prototype.createOrUpdateAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAuthorizationRuleOperationSpec$2, callback);
        };
        WCFRelays.prototype.deleteAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, deleteAuthorizationRuleOperationSpec$2, callback);
        };
        WCFRelays.prototype.getAuthorizationRule = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, getAuthorizationRuleOperationSpec$2, callback);
        };
        WCFRelays.prototype.listKeys = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, authorizationRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                options: options
            }, listKeysOperationSpec$2, callback);
        };
        WCFRelays.prototype.regenerateKeys = function (resourceGroupName$$1, namespaceName$$1, relayName$$1, authorizationRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                namespaceName: namespaceName$$1,
                relayName: relayName$$1,
                authorizationRuleName: authorizationRuleName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeysOperationSpec$2, callback);
        };
        WCFRelays.prototype.listByNamespaceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByNamespaceNextOperationSpec$1, callback);
        };
        WCFRelays.prototype.listAuthorizationRulesNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAuthorizationRulesNextOperationSpec$2, callback);
        };
        return WCFRelays;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByNamespaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WcfRelaysListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WcfRelay, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WcfRelay
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WcfRelay
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listAuthorizationRulesOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateAuthorizationRuleOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AuthorizationRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteAuthorizationRuleOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getAuthorizationRuleOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listKeysOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}/listKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var regenerateKeysOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            namespaceName,
            relayName,
            authorizationRuleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RegenerateAccessKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessKeys
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByNamespaceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WcfRelaysListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listAuthorizationRulesNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AuthorizationRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-relay";
    var packageVersion = "1.0.0";
    var RelayManagementClientContext = /** @class */ (function (_super) {
        __extends(RelayManagementClientContext, _super);
        /**
         * Initializes a new instance of the RelayManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function RelayManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return RelayManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var RelayManagementClient = /** @class */ (function (_super) {
        __extends(RelayManagementClient, _super);
        /**
         * Initializes a new instance of the RelayManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function RelayManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.namespaces = new Namespaces(_this);
            _this.hybridConnections = new HybridConnections(_this);
            _this.wCFRelays = new WCFRelays(_this);
            return _this;
        }
        return RelayManagementClient;
    }(RelayManagementClientContext));

    exports.RelayManagementClient = RelayManagementClient;
    exports.RelayManagementClientContext = RelayManagementClientContext;
    exports.RelayManagementModels = index;
    exports.RelayManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Namespaces = Namespaces;
    exports.HybridConnections = HybridConnections;
    exports.WCFRelays = WCFRelays;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-relay.js.map
