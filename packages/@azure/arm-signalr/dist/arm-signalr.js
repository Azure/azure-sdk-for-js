/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmSignalr = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SignalRSkuTier.
     * Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SignalRSkuTier =
     * <SignalRSkuTier>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SignalRSkuTier;
    (function (SignalRSkuTier) {
        SignalRSkuTier["Free"] = "Free";
        SignalRSkuTier["Basic"] = "Basic";
        SignalRSkuTier["Standard"] = "Standard";
        SignalRSkuTier["Premium"] = "Premium";
    })(SignalRSkuTier || (SignalRSkuTier = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Unknown', 'Succeeded', 'Failed', 'Canceled',
     * 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Unknown"] = "Unknown";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Canceled"] = "Canceled";
        ProvisioningState["Running"] = "Running";
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Moving"] = "Moving";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for KeyType.
     * Possible values include: 'Primary', 'Secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: KeyType = <KeyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var KeyType;
    (function (KeyType) {
        KeyType["Primary"] = "Primary";
        KeyType["Secondary"] = "Secondary";
    })(KeyType || (KeyType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SignalRSkuTier () { return SignalRSkuTier; },
        get ProvisioningState () { return ProvisioningState; },
        get KeyType () { return KeyType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dimension = {
        serializedName: "Dimension",
        type: {
            name: "Composite",
            className: "Dimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                internalName: {
                    serializedName: "internalName",
                    type: {
                        name: "String"
                    }
                },
                toBeExportedForShoebox: {
                    serializedName: "toBeExportedForShoebox",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MetricSpecification = {
        serializedName: "MetricSpecification",
        type: {
            name: "Composite",
            className: "MetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dimension"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationProperties = {
        serializedName: "OperationProperties",
        type: {
            name: "Composite",
            className: "OperationProperties",
            modelProperties: {
                serviceSpecification: {
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "OperationProperties"
                    }
                }
            }
        }
    };
    var NameAvailabilityParameters = {
        serializedName: "NameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "NameAvailabilityParameters",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameAvailability = {
        serializedName: "NameAvailability",
        type: {
            name: "Composite",
            className: "NameAvailability",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var SignalRResource = {
        serializedName: "SignalRResource",
        type: {
            name: "Composite",
            className: "SignalRResource",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                }, hostNamePrefix: {
                    serializedName: "properties.hostNamePrefix",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, externalIP: {
                    readOnly: true,
                    serializedName: "properties.externalIP",
                    type: {
                        name: "String"
                    }
                }, hostName: {
                    readOnly: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, publicPort: {
                    readOnly: true,
                    serializedName: "properties.publicPort",
                    type: {
                        name: "Number"
                    }
                }, serverPort: {
                    readOnly: true,
                    serializedName: "properties.serverPort",
                    type: {
                        name: "Number"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SignalRCreateOrUpdateProperties = {
        serializedName: "SignalRCreateOrUpdateProperties",
        type: {
            name: "Composite",
            className: "SignalRCreateOrUpdateProperties",
            modelProperties: {
                hostNamePrefix: {
                    serializedName: "hostNamePrefix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignalRKeys = {
        serializedName: "SignalRKeys",
        type: {
            name: "Composite",
            className: "SignalRKeys",
            modelProperties: {
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                primaryConnectionString: {
                    serializedName: "primaryConnectionString",
                    type: {
                        name: "String"
                    }
                },
                secondaryConnectionString: {
                    serializedName: "secondaryConnectionString",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegenerateKeyParameters = {
        serializedName: "RegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "RegenerateKeyParameters",
            modelProperties: {
                keyType: {
                    serializedName: "keyType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignalRUpdateParameters = {
        serializedName: "SignalRUpdateParameters",
        type: {
            name: "Composite",
            className: "SignalRUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SignalRCreateOrUpdateProperties"
                    }
                }
            }
        }
    };
    var SignalRCreateParameters = {
        serializedName: "SignalRCreateParameters",
        type: {
            name: "Composite",
            className: "SignalRCreateParameters",
            modelProperties: __assign({}, SignalRUpdateParameters.type.modelProperties, { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SignalRUsageName = {
        serializedName: "SignalRUsageName",
        type: {
            name: "Composite",
            className: "SignalRUsageName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignalRUsage = {
        serializedName: "SignalRUsage",
        type: {
            name: "Composite",
            className: "SignalRUsage",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "SignalRUsageName"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationList = {
        serializedName: "OperationList",
        type: {
            name: "Composite",
            className: "OperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignalRResourceList = {
        serializedName: "SignalRResourceList",
        type: {
            name: "Composite",
            className: "SignalRResourceList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SignalRResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SignalRUsageList = {
        serializedName: "SignalRUsageList",
        type: {
            name: "Composite",
            className: "SignalRUsageList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SignalRUsage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification,
        OperationProperties: OperationProperties,
        Operation: Operation,
        NameAvailabilityParameters: NameAvailabilityParameters,
        NameAvailability: NameAvailability,
        ResourceSku: ResourceSku,
        Resource: Resource,
        TrackedResource: TrackedResource,
        SignalRResource: SignalRResource,
        SignalRCreateOrUpdateProperties: SignalRCreateOrUpdateProperties,
        SignalRKeys: SignalRKeys,
        RegenerateKeyParameters: RegenerateKeyParameters,
        SignalRUpdateParameters: SignalRUpdateParameters,
        SignalRCreateParameters: SignalRCreateParameters,
        SignalRUsageName: SignalRUsageName,
        SignalRUsage: SignalRUsage,
        OperationList: OperationList,
        SignalRResourceList: SignalRResourceList,
        SignalRUsageList: SignalRUsageList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationList: OperationList,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationProperties: OperationProperties,
        ServiceSpecification: ServiceSpecification,
        MetricSpecification: MetricSpecification,
        Dimension: Dimension,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-03-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SignalRManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.SignalRService/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        NameAvailabilityParameters: NameAvailabilityParameters,
        NameAvailability: NameAvailability,
        CloudError: CloudError,
        SignalRResourceList: SignalRResourceList,
        SignalRResource: SignalRResource,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ResourceSku: ResourceSku,
        SignalRKeys: SignalRKeys,
        RegenerateKeyParameters: RegenerateKeyParameters,
        SignalRCreateParameters: SignalRCreateParameters,
        SignalRUpdateParameters: SignalRUpdateParameters,
        SignalRCreateOrUpdateProperties: SignalRCreateOrUpdateProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SignalR. */
    var SignalR = /** @class */ (function () {
        /**
         * Create a SignalR.
         * @param {SignalRManagementClientContext} client Reference to the service client.
         */
        function SignalR(client) {
            this.client = client;
        }
        SignalR.prototype.checkNameAvailability = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        SignalR.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        SignalR.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        SignalR.prototype.listKeys = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        /**
         * Regenerate SignalR service access key. PrimaryKey and SecondaryKey cannot be regenerated at the
         * same time.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.SignalRRegenerateKeyResponse>
         */
        SignalR.prototype.regenerateKey = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginRegenerateKey(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SignalR.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create a new SignalR service and update an exiting SignalR service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.SignalRCreateOrUpdateResponse>
         */
        SignalR.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to delete a SignalR service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SignalR.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to update an exiting SignalR service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.SignalRUpdateResponse>
         */
        SignalR.prototype.update = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginUpdate(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Regenerate SignalR service access key. PrimaryKey and SecondaryKey cannot be regenerated at the
         * same time.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SignalR.prototype.beginRegenerateKey = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginRegenerateKeyOperationSpec, options);
        };
        /**
         * Create a new SignalR service and update an exiting SignalR service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SignalR.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Operation to delete a SignalR service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SignalR.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Operation to update an exiting SignalR service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param resourceName The name of the SignalR resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SignalR.prototype.beginUpdate = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        SignalR.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        SignalR.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return SignalR;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/checkNameAvailability",
        urlParameters: [
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: NameAvailabilityParameters
        },
        responses: {
            200: {
                bodyMapper: NameAvailability
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/SignalR",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginRegenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}/regenerateKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: RegenerateKeyParameters
        },
        responses: {
            201: {
                bodyMapper: SignalRKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: SignalRCreateParameters
        },
        responses: {
            201: {
                bodyMapper: SignalRResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/SignalR/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: SignalRUpdateParameters
        },
        responses: {
            200: {
                bodyMapper: SignalRResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        SignalRUsageList: SignalRUsageList,
        SignalRUsage: SignalRUsage,
        SignalRUsageName: SignalRUsageName,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {SignalRManagementClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.list = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        Usages.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/usages",
        urlParameters: [
            location,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRUsageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SignalRUsageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-signalr";
    var packageVersion = "1.0.0-preview";
    var SignalRManagementClientContext = /** @class */ (function (_super) {
        __extends(SignalRManagementClientContext, _super);
        /**
         * Initializes a new instance of the SignalRManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function SignalRManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-03-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SignalRManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SignalRManagementClient = /** @class */ (function (_super) {
        __extends(SignalRManagementClient, _super);
        /**
         * Initializes a new instance of the SignalRManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription Id which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function SignalRManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.signalR = new SignalR(_this);
            _this.usages = new Usages(_this);
            return _this;
        }
        return SignalRManagementClient;
    }(SignalRManagementClientContext));

    exports.SignalRManagementClient = SignalRManagementClient;
    exports.SignalRManagementClientContext = SignalRManagementClientContext;
    exports.SignalRManagementModels = index;
    exports.SignalRManagementMappers = mappers;
    exports.Operations = Operations;
    exports.SignalR = SignalR;
    exports.Usages = Usages;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-signalr.js.map
