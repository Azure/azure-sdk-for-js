/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/billingSubscriptionMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a BillingSubscription. */
export class BillingSubscription {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a BillingSubscription.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * Get a single billing subscription by name.
   * @param billingAccountName billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionGetResponse>
   */
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.BillingSubscriptionGetResponse>;
  /**
   * @param billingAccountName billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param callback The callback
   */
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, callback: msRest.ServiceCallback<Models.BillingSubscriptionSummary>): void;
  /**
   * @param billingAccountName billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BillingSubscriptionSummary>): void;
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BillingSubscriptionSummary>, callback?: msRest.ServiceCallback<Models.BillingSubscriptionSummary>): Promise<Models.BillingSubscriptionGetResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        invoiceSectionName,
        billingSubscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BillingSubscriptionGetResponse>;
  }

  /**
   * Transfers the GTM subscription from one invoice section to another within a billing account.
   * @param billingAccountName billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionTransferResponse>
   */
  transfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options?: Models.BillingSubscriptionTransferOptionalParams): Promise<Models.BillingSubscriptionTransferResponse> {
    return this.beginTransfer(billingAccountName,invoiceSectionName,billingSubscriptionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BillingSubscriptionTransferResponse>;
  }

  /**
   * Transfers the GTM subscription from one invoice section to another within a billing account.
   * @param billingAccountName billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTransfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options?: Models.BillingSubscriptionBeginTransferOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        billingAccountName,
        invoiceSectionName,
        billingSubscriptionName,
        options
      },
      beginTransferOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginTransferOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      destinationInvoiceSectionName: [
        "options",
        "destinationInvoiceSectionName"
      ]
    },
    mapper: {
      ...Mappers.TransferBillingSubscriptionRequestProperties,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TransferBillingSubscriptionResult,
      headersMapper: Mappers.BillingSubscriptionTransferHeaders
    },
    202: {
      headersMapper: Mappers.BillingSubscriptionTransferHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
