/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmContainerservice = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for OSType.
     * Possible values include: 'Linux', 'Windows'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OSType = <OSType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OSType;
    (function (OSType) {
        OSType["Linux"] = "Linux";
        OSType["Windows"] = "Windows";
    })(OSType || (OSType = {}));
    /**
     * Defines values for OpenShiftContainerServiceVMSize.
     * Possible values include: 'Standard_D2s_v3', 'Standard_D4s_v3'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OpenShiftContainerServiceVMSize =
     * <OpenShiftContainerServiceVMSize>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OpenShiftContainerServiceVMSize;
    (function (OpenShiftContainerServiceVMSize) {
        OpenShiftContainerServiceVMSize["StandardD2sV3"] = "Standard_D2s_v3";
        OpenShiftContainerServiceVMSize["StandardD4sV3"] = "Standard_D4s_v3";
    })(OpenShiftContainerServiceVMSize || (OpenShiftContainerServiceVMSize = {}));
    /**
     * Defines values for OpenShiftAgentPoolProfileRole.
     * Possible values include: 'compute', 'infra'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OpenShiftAgentPoolProfileRole =
     * <OpenShiftAgentPoolProfileRole>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OpenShiftAgentPoolProfileRole;
    (function (OpenShiftAgentPoolProfileRole) {
        OpenShiftAgentPoolProfileRole["Compute"] = "compute";
        OpenShiftAgentPoolProfileRole["Infra"] = "infra";
    })(OpenShiftAgentPoolProfileRole || (OpenShiftAgentPoolProfileRole = {}));
    /**
     * Defines values for ContainerServiceStorageProfileTypes.
     * Possible values include: 'StorageAccount', 'ManagedDisks'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerServiceStorageProfileTypes =
     * <ContainerServiceStorageProfileTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerServiceStorageProfileTypes;
    (function (ContainerServiceStorageProfileTypes) {
        ContainerServiceStorageProfileTypes["StorageAccount"] = "StorageAccount";
        ContainerServiceStorageProfileTypes["ManagedDisks"] = "ManagedDisks";
    })(ContainerServiceStorageProfileTypes || (ContainerServiceStorageProfileTypes = {}));
    /**
     * Defines values for ContainerServiceVMSizeTypes.
     * Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
     * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
     * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
     * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
     * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12',
     * 'Standard_D12_v2', 'Standard_D12_v2_Promo', 'Standard_D13',
     * 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14',
     * 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
     * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2',
     * 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
     * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3',
     * 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
     * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3',
     * 'Standard_D5_v2', 'Standard_D5_v2_Promo', 'Standard_D64_v3',
     * 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
     * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo',
     * 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
     * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2',
     * 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
     * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2',
     * 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
     * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3',
     * 'Standard_DS3_v2', 'Standard_DS3_v2_Promo', 'Standard_DS4',
     * 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
     * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
     * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3',
     * 'Standard_E32-8s_v3', 'Standard_E32_v3', 'Standard_E32s_v3',
     * 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
     * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
     * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16',
     * 'Standard_F16s', 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2',
     * 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4',
     * 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
     * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
     * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
     * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
     * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
     * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms',
     * 'Standard_M128ms', 'Standard_M128s', 'Standard_M64-16ms',
     * 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
     * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
     * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
     * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3',
     * 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s', 'Standard_ND6s',
     * 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerServiceVMSizeTypes =
     * <ContainerServiceVMSizeTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerServiceVMSizeTypes;
    (function (ContainerServiceVMSizeTypes) {
        ContainerServiceVMSizeTypes["StandardA1"] = "Standard_A1";
        ContainerServiceVMSizeTypes["StandardA10"] = "Standard_A10";
        ContainerServiceVMSizeTypes["StandardA11"] = "Standard_A11";
        ContainerServiceVMSizeTypes["StandardA1V2"] = "Standard_A1_v2";
        ContainerServiceVMSizeTypes["StandardA2"] = "Standard_A2";
        ContainerServiceVMSizeTypes["StandardA2V2"] = "Standard_A2_v2";
        ContainerServiceVMSizeTypes["StandardA2mV2"] = "Standard_A2m_v2";
        ContainerServiceVMSizeTypes["StandardA3"] = "Standard_A3";
        ContainerServiceVMSizeTypes["StandardA4"] = "Standard_A4";
        ContainerServiceVMSizeTypes["StandardA4V2"] = "Standard_A4_v2";
        ContainerServiceVMSizeTypes["StandardA4mV2"] = "Standard_A4m_v2";
        ContainerServiceVMSizeTypes["StandardA5"] = "Standard_A5";
        ContainerServiceVMSizeTypes["StandardA6"] = "Standard_A6";
        ContainerServiceVMSizeTypes["StandardA7"] = "Standard_A7";
        ContainerServiceVMSizeTypes["StandardA8"] = "Standard_A8";
        ContainerServiceVMSizeTypes["StandardA8V2"] = "Standard_A8_v2";
        ContainerServiceVMSizeTypes["StandardA8mV2"] = "Standard_A8m_v2";
        ContainerServiceVMSizeTypes["StandardA9"] = "Standard_A9";
        ContainerServiceVMSizeTypes["StandardB2ms"] = "Standard_B2ms";
        ContainerServiceVMSizeTypes["StandardB2s"] = "Standard_B2s";
        ContainerServiceVMSizeTypes["StandardB4ms"] = "Standard_B4ms";
        ContainerServiceVMSizeTypes["StandardB8ms"] = "Standard_B8ms";
        ContainerServiceVMSizeTypes["StandardD1"] = "Standard_D1";
        ContainerServiceVMSizeTypes["StandardD11"] = "Standard_D11";
        ContainerServiceVMSizeTypes["StandardD11V2"] = "Standard_D11_v2";
        ContainerServiceVMSizeTypes["StandardD11V2Promo"] = "Standard_D11_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD12"] = "Standard_D12";
        ContainerServiceVMSizeTypes["StandardD12V2"] = "Standard_D12_v2";
        ContainerServiceVMSizeTypes["StandardD12V2Promo"] = "Standard_D12_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD13"] = "Standard_D13";
        ContainerServiceVMSizeTypes["StandardD13V2"] = "Standard_D13_v2";
        ContainerServiceVMSizeTypes["StandardD13V2Promo"] = "Standard_D13_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD14"] = "Standard_D14";
        ContainerServiceVMSizeTypes["StandardD14V2"] = "Standard_D14_v2";
        ContainerServiceVMSizeTypes["StandardD14V2Promo"] = "Standard_D14_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD15V2"] = "Standard_D15_v2";
        ContainerServiceVMSizeTypes["StandardD16V3"] = "Standard_D16_v3";
        ContainerServiceVMSizeTypes["StandardD16sV3"] = "Standard_D16s_v3";
        ContainerServiceVMSizeTypes["StandardD1V2"] = "Standard_D1_v2";
        ContainerServiceVMSizeTypes["StandardD2"] = "Standard_D2";
        ContainerServiceVMSizeTypes["StandardD2V2"] = "Standard_D2_v2";
        ContainerServiceVMSizeTypes["StandardD2V2Promo"] = "Standard_D2_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD2V3"] = "Standard_D2_v3";
        ContainerServiceVMSizeTypes["StandardD2sV3"] = "Standard_D2s_v3";
        ContainerServiceVMSizeTypes["StandardD3"] = "Standard_D3";
        ContainerServiceVMSizeTypes["StandardD32V3"] = "Standard_D32_v3";
        ContainerServiceVMSizeTypes["StandardD32sV3"] = "Standard_D32s_v3";
        ContainerServiceVMSizeTypes["StandardD3V2"] = "Standard_D3_v2";
        ContainerServiceVMSizeTypes["StandardD3V2Promo"] = "Standard_D3_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD4"] = "Standard_D4";
        ContainerServiceVMSizeTypes["StandardD4V2"] = "Standard_D4_v2";
        ContainerServiceVMSizeTypes["StandardD4V2Promo"] = "Standard_D4_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD4V3"] = "Standard_D4_v3";
        ContainerServiceVMSizeTypes["StandardD4sV3"] = "Standard_D4s_v3";
        ContainerServiceVMSizeTypes["StandardD5V2"] = "Standard_D5_v2";
        ContainerServiceVMSizeTypes["StandardD5V2Promo"] = "Standard_D5_v2_Promo";
        ContainerServiceVMSizeTypes["StandardD64V3"] = "Standard_D64_v3";
        ContainerServiceVMSizeTypes["StandardD64sV3"] = "Standard_D64s_v3";
        ContainerServiceVMSizeTypes["StandardD8V3"] = "Standard_D8_v3";
        ContainerServiceVMSizeTypes["StandardD8sV3"] = "Standard_D8s_v3";
        ContainerServiceVMSizeTypes["StandardDS1"] = "Standard_DS1";
        ContainerServiceVMSizeTypes["StandardDS11"] = "Standard_DS11";
        ContainerServiceVMSizeTypes["StandardDS11V2"] = "Standard_DS11_v2";
        ContainerServiceVMSizeTypes["StandardDS11V2Promo"] = "Standard_DS11_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS12"] = "Standard_DS12";
        ContainerServiceVMSizeTypes["StandardDS12V2"] = "Standard_DS12_v2";
        ContainerServiceVMSizeTypes["StandardDS12V2Promo"] = "Standard_DS12_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS13"] = "Standard_DS13";
        ContainerServiceVMSizeTypes["StandardDS132V2"] = "Standard_DS13-2_v2";
        ContainerServiceVMSizeTypes["StandardDS134V2"] = "Standard_DS13-4_v2";
        ContainerServiceVMSizeTypes["StandardDS13V2"] = "Standard_DS13_v2";
        ContainerServiceVMSizeTypes["StandardDS13V2Promo"] = "Standard_DS13_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS14"] = "Standard_DS14";
        ContainerServiceVMSizeTypes["StandardDS144V2"] = "Standard_DS14-4_v2";
        ContainerServiceVMSizeTypes["StandardDS148V2"] = "Standard_DS14-8_v2";
        ContainerServiceVMSizeTypes["StandardDS14V2"] = "Standard_DS14_v2";
        ContainerServiceVMSizeTypes["StandardDS14V2Promo"] = "Standard_DS14_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS15V2"] = "Standard_DS15_v2";
        ContainerServiceVMSizeTypes["StandardDS1V2"] = "Standard_DS1_v2";
        ContainerServiceVMSizeTypes["StandardDS2"] = "Standard_DS2";
        ContainerServiceVMSizeTypes["StandardDS2V2"] = "Standard_DS2_v2";
        ContainerServiceVMSizeTypes["StandardDS2V2Promo"] = "Standard_DS2_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS3"] = "Standard_DS3";
        ContainerServiceVMSizeTypes["StandardDS3V2"] = "Standard_DS3_v2";
        ContainerServiceVMSizeTypes["StandardDS3V2Promo"] = "Standard_DS3_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS4"] = "Standard_DS4";
        ContainerServiceVMSizeTypes["StandardDS4V2"] = "Standard_DS4_v2";
        ContainerServiceVMSizeTypes["StandardDS4V2Promo"] = "Standard_DS4_v2_Promo";
        ContainerServiceVMSizeTypes["StandardDS5V2"] = "Standard_DS5_v2";
        ContainerServiceVMSizeTypes["StandardDS5V2Promo"] = "Standard_DS5_v2_Promo";
        ContainerServiceVMSizeTypes["StandardE16V3"] = "Standard_E16_v3";
        ContainerServiceVMSizeTypes["StandardE16sV3"] = "Standard_E16s_v3";
        ContainerServiceVMSizeTypes["StandardE2V3"] = "Standard_E2_v3";
        ContainerServiceVMSizeTypes["StandardE2sV3"] = "Standard_E2s_v3";
        ContainerServiceVMSizeTypes["StandardE3216sV3"] = "Standard_E32-16s_v3";
        ContainerServiceVMSizeTypes["StandardE328sV3"] = "Standard_E32-8s_v3";
        ContainerServiceVMSizeTypes["StandardE32V3"] = "Standard_E32_v3";
        ContainerServiceVMSizeTypes["StandardE32sV3"] = "Standard_E32s_v3";
        ContainerServiceVMSizeTypes["StandardE4V3"] = "Standard_E4_v3";
        ContainerServiceVMSizeTypes["StandardE4sV3"] = "Standard_E4s_v3";
        ContainerServiceVMSizeTypes["StandardE6416sV3"] = "Standard_E64-16s_v3";
        ContainerServiceVMSizeTypes["StandardE6432sV3"] = "Standard_E64-32s_v3";
        ContainerServiceVMSizeTypes["StandardE64V3"] = "Standard_E64_v3";
        ContainerServiceVMSizeTypes["StandardE64sV3"] = "Standard_E64s_v3";
        ContainerServiceVMSizeTypes["StandardE8V3"] = "Standard_E8_v3";
        ContainerServiceVMSizeTypes["StandardE8sV3"] = "Standard_E8s_v3";
        ContainerServiceVMSizeTypes["StandardF1"] = "Standard_F1";
        ContainerServiceVMSizeTypes["StandardF16"] = "Standard_F16";
        ContainerServiceVMSizeTypes["StandardF16s"] = "Standard_F16s";
        ContainerServiceVMSizeTypes["StandardF16sV2"] = "Standard_F16s_v2";
        ContainerServiceVMSizeTypes["StandardF1s"] = "Standard_F1s";
        ContainerServiceVMSizeTypes["StandardF2"] = "Standard_F2";
        ContainerServiceVMSizeTypes["StandardF2s"] = "Standard_F2s";
        ContainerServiceVMSizeTypes["StandardF2sV2"] = "Standard_F2s_v2";
        ContainerServiceVMSizeTypes["StandardF32sV2"] = "Standard_F32s_v2";
        ContainerServiceVMSizeTypes["StandardF4"] = "Standard_F4";
        ContainerServiceVMSizeTypes["StandardF4s"] = "Standard_F4s";
        ContainerServiceVMSizeTypes["StandardF4sV2"] = "Standard_F4s_v2";
        ContainerServiceVMSizeTypes["StandardF64sV2"] = "Standard_F64s_v2";
        ContainerServiceVMSizeTypes["StandardF72sV2"] = "Standard_F72s_v2";
        ContainerServiceVMSizeTypes["StandardF8"] = "Standard_F8";
        ContainerServiceVMSizeTypes["StandardF8s"] = "Standard_F8s";
        ContainerServiceVMSizeTypes["StandardF8sV2"] = "Standard_F8s_v2";
        ContainerServiceVMSizeTypes["StandardG1"] = "Standard_G1";
        ContainerServiceVMSizeTypes["StandardG2"] = "Standard_G2";
        ContainerServiceVMSizeTypes["StandardG3"] = "Standard_G3";
        ContainerServiceVMSizeTypes["StandardG4"] = "Standard_G4";
        ContainerServiceVMSizeTypes["StandardG5"] = "Standard_G5";
        ContainerServiceVMSizeTypes["StandardGS1"] = "Standard_GS1";
        ContainerServiceVMSizeTypes["StandardGS2"] = "Standard_GS2";
        ContainerServiceVMSizeTypes["StandardGS3"] = "Standard_GS3";
        ContainerServiceVMSizeTypes["StandardGS4"] = "Standard_GS4";
        ContainerServiceVMSizeTypes["StandardGS44"] = "Standard_GS4-4";
        ContainerServiceVMSizeTypes["StandardGS48"] = "Standard_GS4-8";
        ContainerServiceVMSizeTypes["StandardGS5"] = "Standard_GS5";
        ContainerServiceVMSizeTypes["StandardGS516"] = "Standard_GS5-16";
        ContainerServiceVMSizeTypes["StandardGS58"] = "Standard_GS5-8";
        ContainerServiceVMSizeTypes["StandardH16"] = "Standard_H16";
        ContainerServiceVMSizeTypes["StandardH16m"] = "Standard_H16m";
        ContainerServiceVMSizeTypes["StandardH16mr"] = "Standard_H16mr";
        ContainerServiceVMSizeTypes["StandardH16r"] = "Standard_H16r";
        ContainerServiceVMSizeTypes["StandardH8"] = "Standard_H8";
        ContainerServiceVMSizeTypes["StandardH8m"] = "Standard_H8m";
        ContainerServiceVMSizeTypes["StandardL16s"] = "Standard_L16s";
        ContainerServiceVMSizeTypes["StandardL32s"] = "Standard_L32s";
        ContainerServiceVMSizeTypes["StandardL4s"] = "Standard_L4s";
        ContainerServiceVMSizeTypes["StandardL8s"] = "Standard_L8s";
        ContainerServiceVMSizeTypes["StandardM12832ms"] = "Standard_M128-32ms";
        ContainerServiceVMSizeTypes["StandardM12864ms"] = "Standard_M128-64ms";
        ContainerServiceVMSizeTypes["StandardM128ms"] = "Standard_M128ms";
        ContainerServiceVMSizeTypes["StandardM128s"] = "Standard_M128s";
        ContainerServiceVMSizeTypes["StandardM6416ms"] = "Standard_M64-16ms";
        ContainerServiceVMSizeTypes["StandardM6432ms"] = "Standard_M64-32ms";
        ContainerServiceVMSizeTypes["StandardM64ms"] = "Standard_M64ms";
        ContainerServiceVMSizeTypes["StandardM64s"] = "Standard_M64s";
        ContainerServiceVMSizeTypes["StandardNC12"] = "Standard_NC12";
        ContainerServiceVMSizeTypes["StandardNC12sV2"] = "Standard_NC12s_v2";
        ContainerServiceVMSizeTypes["StandardNC12sV3"] = "Standard_NC12s_v3";
        ContainerServiceVMSizeTypes["StandardNC24"] = "Standard_NC24";
        ContainerServiceVMSizeTypes["StandardNC24r"] = "Standard_NC24r";
        ContainerServiceVMSizeTypes["StandardNC24rsV2"] = "Standard_NC24rs_v2";
        ContainerServiceVMSizeTypes["StandardNC24rsV3"] = "Standard_NC24rs_v3";
        ContainerServiceVMSizeTypes["StandardNC24sV2"] = "Standard_NC24s_v2";
        ContainerServiceVMSizeTypes["StandardNC24sV3"] = "Standard_NC24s_v3";
        ContainerServiceVMSizeTypes["StandardNC6"] = "Standard_NC6";
        ContainerServiceVMSizeTypes["StandardNC6sV2"] = "Standard_NC6s_v2";
        ContainerServiceVMSizeTypes["StandardNC6sV3"] = "Standard_NC6s_v3";
        ContainerServiceVMSizeTypes["StandardND12s"] = "Standard_ND12s";
        ContainerServiceVMSizeTypes["StandardND24rs"] = "Standard_ND24rs";
        ContainerServiceVMSizeTypes["StandardND24s"] = "Standard_ND24s";
        ContainerServiceVMSizeTypes["StandardND6s"] = "Standard_ND6s";
        ContainerServiceVMSizeTypes["StandardNV12"] = "Standard_NV12";
        ContainerServiceVMSizeTypes["StandardNV24"] = "Standard_NV24";
        ContainerServiceVMSizeTypes["StandardNV6"] = "Standard_NV6";
    })(ContainerServiceVMSizeTypes || (ContainerServiceVMSizeTypes = {}));
    /**
     * Defines values for ContainerServiceOrchestratorTypes.
     * Possible values include: 'Kubernetes', 'Swarm', 'DCOS', 'DockerCE', 'Custom'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerServiceOrchestratorTypes =
     * <ContainerServiceOrchestratorTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerServiceOrchestratorTypes;
    (function (ContainerServiceOrchestratorTypes) {
        ContainerServiceOrchestratorTypes["Kubernetes"] = "Kubernetes";
        ContainerServiceOrchestratorTypes["Swarm"] = "Swarm";
        ContainerServiceOrchestratorTypes["DCOS"] = "DCOS";
        ContainerServiceOrchestratorTypes["DockerCE"] = "DockerCE";
        ContainerServiceOrchestratorTypes["Custom"] = "Custom";
    })(ContainerServiceOrchestratorTypes || (ContainerServiceOrchestratorTypes = {}));
    /**
     * Defines values for NetworkPlugin.
     * Possible values include: 'azure', 'kubenet'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NetworkPlugin =
     * <NetworkPlugin>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NetworkPlugin;
    (function (NetworkPlugin) {
        NetworkPlugin["Azure"] = "azure";
        NetworkPlugin["Kubenet"] = "kubenet";
    })(NetworkPlugin || (NetworkPlugin = {}));
    /**
     * Defines values for NetworkPolicy.
     * Possible values include: 'calico'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NetworkPolicy =
     * <NetworkPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NetworkPolicy;
    (function (NetworkPolicy) {
        NetworkPolicy["Calico"] = "calico";
    })(NetworkPolicy || (NetworkPolicy = {}));

    var index = /*#__PURE__*/Object.freeze({
        get OSType () { return OSType; },
        get OpenShiftContainerServiceVMSize () { return OpenShiftContainerServiceVMSize; },
        get OpenShiftAgentPoolProfileRole () { return OpenShiftAgentPoolProfileRole; },
        get ContainerServiceStorageProfileTypes () { return ContainerServiceStorageProfileTypes; },
        get ContainerServiceVMSizeTypes () { return ContainerServiceVMSizeTypes; },
        get ContainerServiceOrchestratorTypes () { return ContainerServiceOrchestratorTypes; },
        get NetworkPlugin () { return NetworkPlugin; },
        get NetworkPolicy () { return NetworkPolicy; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PurchasePlan = {
        serializedName: "PurchasePlan",
        type: {
            name: "Composite",
            className: "PurchasePlan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftRouterProfile = {
        serializedName: "OpenShiftRouterProfile",
        type: {
            name: "Composite",
            className: "OpenShiftRouterProfile",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publicSubdomain: {
                    serializedName: "publicSubdomain",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                vnetCidr: {
                    serializedName: "vnetCidr",
                    defaultValue: '10.0.0.0/8',
                    type: {
                        name: "String"
                    }
                },
                peerVnetId: {
                    serializedName: "peerVnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterMasterPoolProfile = {
        serializedName: "OpenShiftManagedClusterMasterPoolProfile",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterMasterPoolProfile",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    defaultValue: 3,
                    constraints: {
                        InclusiveMaximum: 10,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                subnetCidr: {
                    serializedName: "subnetCidr",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterAgentPoolProfile = {
        serializedName: "OpenShiftManagedClusterAgentPoolProfile",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterAgentPoolProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    defaultValue: 2,
                    constraints: {
                        InclusiveMaximum: 5,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                subnetCidr: {
                    serializedName: "subnetCidr",
                    defaultValue: '10.0.0.0/24',
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                },
                role: {
                    serializedName: "role",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterBaseIdentityProvider = {
        serializedName: "OpenShiftManagedClusterBaseIdentityProvider",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "OpenShiftManagedClusterBaseIdentityProvider",
            className: "OpenShiftManagedClusterBaseIdentityProvider",
            modelProperties: {
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterIdentityProvider = {
        serializedName: "OpenShiftManagedClusterIdentityProvider",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterIdentityProvider",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "kind",
                            clientName: "kind"
                        },
                        uberParent: "OpenShiftManagedClusterBaseIdentityProvider",
                        className: "OpenShiftManagedClusterBaseIdentityProvider"
                    }
                }
            }
        }
    };
    var OpenShiftManagedClusterAuthProfile = {
        serializedName: "OpenShiftManagedClusterAuthProfile",
        type: {
            name: "Composite",
            className: "OpenShiftManagedClusterAuthProfile",
            modelProperties: {
                identityProviders: {
                    serializedName: "identityProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftManagedClusterIdentityProvider"
                            }
                        }
                    }
                }
            }
        }
    };
    var OpenShiftManagedCluster = {
        serializedName: "OpenShiftManagedCluster",
        type: {
            name: "Composite",
            className: "OpenShiftManagedCluster",
            modelProperties: __assign({}, Resource.type.modelProperties, { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, openShiftVersion: {
                    required: true,
                    serializedName: "properties.openShiftVersion",
                    type: {
                        name: "String"
                    }
                }, publicHostname: {
                    serializedName: "properties.publicHostname",
                    type: {
                        name: "String"
                    }
                }, fqdn: {
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, routerProfiles: {
                    serializedName: "properties.routerProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftRouterProfile"
                            }
                        }
                    }
                }, masterPoolProfile: {
                    serializedName: "properties.masterPoolProfile",
                    type: {
                        name: "Composite",
                        className: "OpenShiftManagedClusterMasterPoolProfile"
                    }
                }, agentPoolProfiles: {
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OpenShiftManagedClusterAgentPoolProfile"
                            }
                        }
                    }
                }, authProfile: {
                    serializedName: "properties.authProfile",
                    type: {
                        name: "Composite",
                        className: "OpenShiftManagedClusterAuthProfile"
                    }
                } })
        }
    };
    var OpenShiftManagedClusterAADIdentityProvider = {
        serializedName: "AADIdentityProvider",
        type: {
            name: "Composite",
            polymorphicDiscriminator: OpenShiftManagedClusterBaseIdentityProvider.type.polymorphicDiscriminator,
            uberParent: "OpenShiftManagedClusterBaseIdentityProvider",
            className: "OpenShiftManagedClusterAADIdentityProvider",
            modelProperties: __assign({}, OpenShiftManagedClusterBaseIdentityProvider.type.modelProperties, { clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }, secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }, tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TagsObject = {
        serializedName: "TagsObject",
        type: {
            name: "Composite",
            className: "TagsObject",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerServiceCustomProfile = {
        serializedName: "ContainerServiceCustomProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceCustomProfile",
            modelProperties: {
                orchestrator: {
                    required: true,
                    serializedName: "orchestrator",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultSecretRef = {
        serializedName: "KeyVaultSecretRef",
        type: {
            name: "Composite",
            className: "KeyVaultSecretRef",
            modelProperties: {
                vaultID: {
                    required: true,
                    serializedName: "vaultID",
                    type: {
                        name: "String"
                    }
                },
                secretName: {
                    required: true,
                    serializedName: "secretName",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceServicePrincipalProfile = {
        serializedName: "ContainerServiceServicePrincipalProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceServicePrincipalProfile",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                },
                keyVaultSecretRef: {
                    serializedName: "keyVaultSecretRef",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretRef"
                    }
                }
            }
        }
    };
    var ContainerServiceOrchestratorProfile = {
        serializedName: "ContainerServiceOrchestratorProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceOrchestratorProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceMasterProfile = {
        serializedName: "ContainerServiceMasterProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceMasterProfile",
            modelProperties: {
                count: {
                    serializedName: "count",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                dnsPrefix: {
                    required: true,
                    serializedName: "dnsPrefix",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                osDiskSizeGB: {
                    serializedName: "osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                vnetSubnetID: {
                    serializedName: "vnetSubnetID",
                    type: {
                        name: "String"
                    }
                },
                firstConsecutiveStaticIP: {
                    serializedName: "firstConsecutiveStaticIP",
                    defaultValue: '10.240.255.5',
                    type: {
                        name: "String"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceAgentPoolProfile = {
        serializedName: "ContainerServiceAgentPoolProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceAgentPoolProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                osDiskSizeGB: {
                    serializedName: "osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                dnsPrefix: {
                    serializedName: "dnsPrefix",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                ports: {
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "String"
                    }
                },
                vnetSubnetID: {
                    serializedName: "vnetSubnetID",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceWindowsProfile = {
        serializedName: "ContainerServiceWindowsProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceWindowsProfile",
            modelProperties: {
                adminUsername: {
                    required: true,
                    serializedName: "adminUsername",
                    constraints: {
                        Pattern: /^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    required: true,
                    serializedName: "adminPassword",
                    constraints: {
                        Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\^&\*\(\)])[a-zA-Z\d!@#$%\^&\*\(\)]{12,123}$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceSshPublicKey = {
        serializedName: "ContainerServiceSshPublicKey",
        type: {
            name: "Composite",
            className: "ContainerServiceSshPublicKey",
            modelProperties: {
                keyData: {
                    required: true,
                    serializedName: "keyData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceSshConfiguration = {
        serializedName: "ContainerServiceSshConfiguration",
        type: {
            name: "Composite",
            className: "ContainerServiceSshConfiguration",
            modelProperties: {
                publicKeys: {
                    required: true,
                    serializedName: "publicKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerServiceSshPublicKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerServiceLinuxProfile = {
        serializedName: "ContainerServiceLinuxProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceLinuxProfile",
            modelProperties: {
                adminUsername: {
                    required: true,
                    serializedName: "adminUsername",
                    constraints: {
                        Pattern: /^[A-Za-z][-A-Za-z0-9_]*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                ssh: {
                    required: true,
                    serializedName: "ssh",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceSshConfiguration"
                    }
                }
            }
        }
    };
    var ContainerServiceVMDiagnostics = {
        serializedName: "ContainerServiceVMDiagnostics",
        type: {
            name: "Composite",
            className: "ContainerServiceVMDiagnostics",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageUri: {
                    readOnly: true,
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceDiagnosticsProfile = {
        serializedName: "ContainerServiceDiagnosticsProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceDiagnosticsProfile",
            modelProperties: {
                vmDiagnostics: {
                    required: true,
                    serializedName: "vmDiagnostics",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceVMDiagnostics"
                    }
                }
            }
        }
    };
    var ContainerService = {
        serializedName: "ContainerService",
        type: {
            name: "Composite",
            className: "ContainerService",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, orchestratorProfile: {
                    required: true,
                    serializedName: "properties.orchestratorProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceOrchestratorProfile"
                    }
                }, customProfile: {
                    serializedName: "properties.customProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceCustomProfile"
                    }
                }, servicePrincipalProfile: {
                    serializedName: "properties.servicePrincipalProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceServicePrincipalProfile"
                    }
                }, masterProfile: {
                    required: true,
                    serializedName: "properties.masterProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceMasterProfile"
                    }
                }, agentPoolProfiles: {
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerServiceAgentPoolProfile"
                            }
                        }
                    }
                }, windowsProfile: {
                    serializedName: "properties.windowsProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceWindowsProfile"
                    }
                }, linuxProfile: {
                    required: true,
                    serializedName: "properties.linuxProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceLinuxProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceDiagnosticsProfile"
                    }
                } })
        }
    };
    var OperationValue = {
        serializedName: "OperationValue",
        type: {
            name: "Composite",
            className: "OperationValue",
            modelProperties: {
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "display.operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "display.resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "display.description",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    readOnly: true,
                    serializedName: "display.provider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterServicePrincipalProfile = {
        serializedName: "ManagedClusterServicePrincipalProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterServicePrincipalProfile",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterAgentPoolProfile = {
        serializedName: "ManagedClusterAgentPoolProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAgentPoolProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                osDiskSizeGB: {
                    serializedName: "osDiskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                storageProfile: {
                    readOnly: true,
                    serializedName: "storageProfile",
                    type: {
                        name: "String"
                    }
                },
                vnetSubnetID: {
                    serializedName: "vnetSubnetID",
                    type: {
                        name: "String"
                    }
                },
                maxPods: {
                    serializedName: "maxPods",
                    type: {
                        name: "Number"
                    }
                },
                osType: {
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceNetworkProfile = {
        serializedName: "ContainerServiceNetworkProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceNetworkProfile",
            modelProperties: {
                networkPlugin: {
                    serializedName: "networkPlugin",
                    defaultValue: 'kubenet',
                    type: {
                        name: "String"
                    }
                },
                networkPolicy: {
                    serializedName: "networkPolicy",
                    type: {
                        name: "String"
                    }
                },
                podCidr: {
                    serializedName: "podCidr",
                    defaultValue: '10.244.0.0/16',
                    constraints: {
                        Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
                    },
                    type: {
                        name: "String"
                    }
                },
                serviceCidr: {
                    serializedName: "serviceCidr",
                    defaultValue: '10.0.0.0/16',
                    constraints: {
                        Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
                    },
                    type: {
                        name: "String"
                    }
                },
                dnsServiceIP: {
                    serializedName: "dnsServiceIP",
                    defaultValue: '10.0.0.10',
                    constraints: {
                        Pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
                    },
                    type: {
                        name: "String"
                    }
                },
                dockerBridgeCidr: {
                    serializedName: "dockerBridgeCidr",
                    defaultValue: '172.17.0.1/16',
                    constraints: {
                        Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterAddonProfile = {
        serializedName: "ManagedClusterAddonProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAddonProfile",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                config: {
                    serializedName: "config",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterAADProfile = {
        serializedName: "ManagedClusterAADProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAADProfile",
            modelProperties: {
                clientAppID: {
                    required: true,
                    serializedName: "clientAppID",
                    type: {
                        name: "String"
                    }
                },
                serverAppID: {
                    required: true,
                    serializedName: "serverAppID",
                    type: {
                        name: "String"
                    }
                },
                serverAppSecret: {
                    serializedName: "serverAppSecret",
                    type: {
                        name: "String"
                    }
                },
                tenantID: {
                    serializedName: "tenantID",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedCluster = {
        serializedName: "ManagedCluster",
        type: {
            name: "Composite",
            className: "ManagedCluster",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, kubernetesVersion: {
                    serializedName: "properties.kubernetesVersion",
                    type: {
                        name: "String"
                    }
                }, dnsPrefix: {
                    serializedName: "properties.dnsPrefix",
                    type: {
                        name: "String"
                    }
                }, fqdn: {
                    readOnly: true,
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, agentPoolProfiles: {
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedClusterAgentPoolProfile"
                            }
                        }
                    }
                }, linuxProfile: {
                    serializedName: "properties.linuxProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceLinuxProfile"
                    }
                }, servicePrincipalProfile: {
                    serializedName: "properties.servicePrincipalProfile",
                    type: {
                        name: "Composite",
                        className: "ManagedClusterServicePrincipalProfile"
                    }
                }, addonProfiles: {
                    serializedName: "properties.addonProfiles",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ManagedClusterAddonProfile"
                            }
                        }
                    }
                }, nodeResourceGroup: {
                    readOnly: true,
                    serializedName: "properties.nodeResourceGroup",
                    type: {
                        name: "String"
                    }
                }, enableRBAC: {
                    serializedName: "properties.enableRBAC",
                    type: {
                        name: "Boolean"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceNetworkProfile"
                    }
                }, aadProfile: {
                    serializedName: "properties.aadProfile",
                    type: {
                        name: "Composite",
                        className: "ManagedClusterAADProfile"
                    }
                } })
        }
    };
    var OrchestratorProfile = {
        serializedName: "OrchestratorProfile",
        type: {
            name: "Composite",
            className: "OrchestratorProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    required: true,
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedClusterAccessProfile = {
        serializedName: "ManagedClusterAccessProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterAccessProfile",
            modelProperties: __assign({}, Resource.type.modelProperties, { kubeConfig: {
                    serializedName: "properties.kubeConfig",
                    type: {
                        name: "ByteArray"
                    }
                } })
        }
    };
    var ManagedClusterPoolUpgradeProfile = {
        serializedName: "ManagedClusterPoolUpgradeProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterPoolUpgradeProfile",
            modelProperties: {
                kubernetesVersion: {
                    required: true,
                    serializedName: "kubernetesVersion",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    required: true,
                    serializedName: "osType",
                    defaultValue: 'Linux',
                    type: {
                        name: "String"
                    }
                },
                upgrades: {
                    serializedName: "upgrades",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterUpgradeProfile = {
        serializedName: "ManagedClusterUpgradeProfile",
        type: {
            name: "Composite",
            className: "ManagedClusterUpgradeProfile",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                controlPlaneProfile: {
                    required: true,
                    serializedName: "properties.controlPlaneProfile",
                    type: {
                        name: "Composite",
                        className: "ManagedClusterPoolUpgradeProfile"
                    }
                },
                agentPoolProfiles: {
                    required: true,
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedClusterPoolUpgradeProfile"
                            }
                        }
                    }
                }
            }
        }
    };
    var CredentialResult = {
        serializedName: "CredentialResult",
        type: {
            name: "Composite",
            className: "CredentialResult",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "ByteArray"
                    }
                }
            }
        }
    };
    var CredentialResults = {
        serializedName: "CredentialResults",
        type: {
            name: "Composite",
            className: "CredentialResults",
            modelProperties: {
                kubeconfigs: {
                    readOnly: true,
                    serializedName: "kubeconfigs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CredentialResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrchestratorVersionProfile = {
        serializedName: "OrchestratorVersionProfile",
        type: {
            name: "Composite",
            className: "OrchestratorVersionProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorVersion: {
                    required: true,
                    serializedName: "orchestratorVersion",
                    type: {
                        name: "String"
                    }
                },
                default: {
                    required: true,
                    serializedName: "default",
                    type: {
                        name: "Boolean"
                    }
                },
                upgrades: {
                    required: true,
                    serializedName: "upgrades",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrchestratorProfile"
                            }
                        }
                    }
                }
            }
        }
    };
    var OrchestratorVersionProfileListResult = {
        serializedName: "OrchestratorVersionProfileListResult",
        type: {
            name: "Composite",
            className: "OrchestratorVersionProfileListResult",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                orchestrators: {
                    required: true,
                    serializedName: "properties.orchestrators",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrchestratorVersionProfile"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerServiceListResult = {
        serializedName: "ContainerServiceListResult",
        type: {
            name: "Composite",
            className: "ContainerServiceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerService"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedClusterListResult = {
        serializedName: "ManagedClusterListResult",
        type: {
            name: "Composite",
            className: "ManagedClusterListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagedCluster"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'OpenShiftManagedClusterBaseIdentityProvider': OpenShiftManagedClusterBaseIdentityProvider,
        'OpenShiftManagedClusterBaseIdentityProvider.AADIdentityProvider': OpenShiftManagedClusterAADIdentityProvider
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        PurchasePlan: PurchasePlan,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        NetworkProfile: NetworkProfile,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        TagsObject: TagsObject,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerService: ContainerService,
        OperationValue: OperationValue,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedCluster: ManagedCluster,
        OrchestratorProfile: OrchestratorProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        ManagedClusterPoolUpgradeProfile: ManagedClusterPoolUpgradeProfile,
        ManagedClusterUpgradeProfile: ManagedClusterUpgradeProfile,
        CredentialResult: CredentialResult,
        CredentialResults: CredentialResults,
        OrchestratorVersionProfile: OrchestratorVersionProfile,
        OrchestratorVersionProfileListResult: OrchestratorVersionProfileListResult,
        ContainerServiceListResult: ContainerServiceListResult,
        OperationListResult: OperationListResult,
        ManagedClusterListResult: ManagedClusterListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        Resource: Resource,
        BaseResource: BaseResource,
        PurchasePlan: PurchasePlan,
        NetworkProfile: NetworkProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        CloudError: CloudError,
        TagsObject: TagsObject,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ManagedCluster: ManagedCluster,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-09-30-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-07-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-09-30',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-03-31',
            type: {
                name: "String"
            }
        }
    };
    var containerServiceName = {
        parameterPath: "containerServiceName",
        mapper: {
            required: true,
            serializedName: "containerServiceName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceType = {
        parameterPath: [
            "options",
            "resourceType"
        ],
        mapper: {
            serializedName: "resource-type",
            type: {
                name: "String"
            }
        }
    };
    var roleName = {
        parameterPath: "roleName",
        mapper: {
            required: true,
            serializedName: "roleName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OpenShiftManagedClusters. */
    var OpenShiftManagedClusters = /** @class */ (function () {
        /**
         * Create a OpenShiftManagedClusters.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function OpenShiftManagedClusters(client) {
            this.client = client;
        }
        OpenShiftManagedClusters.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates or updates a openshift managed cluster with the specified configuration for agents and
         * OpenShift version.
         * @summary Creates or updates an openshift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the openshift managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update an OpenShift Managed Cluster
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.OpenShiftManagedClustersCreateOrUpdateResponse>
         */
        OpenShiftManagedClusters.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an openshift managed cluster with the specified tags.
         * @summary Updates tags on an openshift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the openshift managed cluster resource.
         * @param parameters Parameters supplied to the Update OpenShift Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.OpenShiftManagedClustersUpdateTagsResponse>
         */
        OpenShiftManagedClusters.prototype.updateTags = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the openshift managed cluster with a specified resource group and name.
         * @summary Deletes an openshift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the openshift managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        OpenShiftManagedClusters.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a openshift managed cluster with the specified configuration for agents and
         * OpenShift version.
         * @summary Creates or updates an openshift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the openshift managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update an OpenShift Managed Cluster
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OpenShiftManagedClusters.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Updates an openshift managed cluster with the specified tags.
         * @summary Updates tags on an openshift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the openshift managed cluster resource.
         * @param parameters Parameters supplied to the Update OpenShift Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OpenShiftManagedClusters.prototype.beginUpdateTags = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec, options);
        };
        /**
         * Deletes the openshift managed cluster with a specified resource group and name.
         * @summary Deletes an openshift managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the openshift managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OpenShiftManagedClusters.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        return OpenShiftManagedClusters;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OpenShiftManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, OpenShiftManagedCluster, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OpenShiftManagedCluster
            },
            201: {
                bodyMapper: OpenShiftManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateTagsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OpenShiftManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/openShiftManagedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ContainerServiceListResult: ContainerServiceListResult,
        ContainerService: ContainerService,
        Resource: Resource,
        BaseResource: BaseResource,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        CloudError: CloudError,
        OrchestratorVersionProfileListResult: OrchestratorVersionProfileListResult,
        OrchestratorVersionProfile: OrchestratorVersionProfile,
        OrchestratorProfile: OrchestratorProfile,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        PurchasePlan: PurchasePlan,
        NetworkProfile: NetworkProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        ManagedCluster: ManagedCluster,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerServices. */
    var ContainerServices = /** @class */ (function () {
        /**
         * Create a ContainerServices.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function ContainerServices(client) {
            this.client = client;
        }
        ContainerServices.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        /**
         * Creates or updates a container service with the specified configuration of orchestrator,
         * masters, and agents.
         * @summary Creates or updates a container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param parameters Parameters supplied to the Create or Update a Container Service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ContainerServicesCreateOrUpdateResponse>
         */
        ContainerServices.prototype.createOrUpdate = function (resourceGroupName$$1, containerServiceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, containerServiceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerServices.prototype.get = function (resourceGroupName$$1, containerServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerServiceName: containerServiceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Deletes the specified container service in the specified subscription and resource group. The
         * operation does not delete other resources created as part of creating a container service,
         * including storage accounts, VMs, and availability sets. All the other resources created with the
         * container service are part of the same resource group and can be deleted individually.
         * @summary Deletes the specified container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ContainerServices.prototype.deleteMethod = function (resourceGroupName$$1, containerServiceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, containerServiceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerServices.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        ContainerServices.prototype.listOrchestrators = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listOrchestratorsOperationSpec, callback);
        };
        /**
         * Creates or updates a container service with the specified configuration of orchestrator,
         * masters, and agents.
         * @summary Creates or updates a container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param parameters Parameters supplied to the Create or Update a Container Service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerServices.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, containerServiceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                containerServiceName: containerServiceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the specified container service in the specified subscription and resource group. The
         * operation does not delete other resources created as part of creating a container service,
         * including storage accounts, VMs, and availability sets. All the other resources created with the
         * container service are part of the same resource group and can be deleted individually.
         * @summary Deletes the specified container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerServices.prototype.beginDeleteMethod = function (resourceGroupName$$1, containerServiceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                containerServiceName: containerServiceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        ContainerServices.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        ContainerServices.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return ContainerServices;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/containerServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOrchestratorsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion2,
            resourceType
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OrchestratorVersionProfileListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ContainerService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerService
            },
            201: {
                bodyMapper: ContainerService
            },
            202: {
                bodyMapper: ContainerService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        OperationValue: OperationValue,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.ContainerService/operations",
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ManagedClusterListResult: ManagedClusterListResult,
        ManagedCluster: ManagedCluster,
        Resource: Resource,
        BaseResource: BaseResource,
        ManagedClusterAgentPoolProfile: ManagedClusterAgentPoolProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ManagedClusterServicePrincipalProfile: ManagedClusterServicePrincipalProfile,
        ManagedClusterAddonProfile: ManagedClusterAddonProfile,
        ContainerServiceNetworkProfile: ContainerServiceNetworkProfile,
        ManagedClusterAADProfile: ManagedClusterAADProfile,
        CloudError: CloudError,
        ManagedClusterUpgradeProfile: ManagedClusterUpgradeProfile,
        ManagedClusterPoolUpgradeProfile: ManagedClusterPoolUpgradeProfile,
        ManagedClusterAccessProfile: ManagedClusterAccessProfile,
        CredentialResults: CredentialResults,
        CredentialResult: CredentialResult,
        TagsObject: TagsObject,
        OpenShiftManagedCluster: OpenShiftManagedCluster,
        PurchasePlan: PurchasePlan,
        NetworkProfile: NetworkProfile,
        OpenShiftRouterProfile: OpenShiftRouterProfile,
        OpenShiftManagedClusterMasterPoolProfile: OpenShiftManagedClusterMasterPoolProfile,
        OpenShiftManagedClusterAgentPoolProfile: OpenShiftManagedClusterAgentPoolProfile,
        OpenShiftManagedClusterAuthProfile: OpenShiftManagedClusterAuthProfile,
        OpenShiftManagedClusterIdentityProvider: OpenShiftManagedClusterIdentityProvider,
        OpenShiftManagedClusterBaseIdentityProvider: OpenShiftManagedClusterBaseIdentityProvider,
        OpenShiftManagedClusterAADIdentityProvider: OpenShiftManagedClusterAADIdentityProvider,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        KeyVaultSecretRef: KeyVaultSecretRef,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagedClusters. */
    var ManagedClusters = /** @class */ (function () {
        /**
         * Create a ManagedClusters.
         * @param {ContainerServiceClientContext} client Reference to the service client.
         */
        function ManagedClusters(client) {
            this.client = client;
        }
        ManagedClusters.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        ManagedClusters.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        ManagedClusters.prototype.getUpgradeProfile = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getUpgradeProfileOperationSpec, callback);
        };
        ManagedClusters.prototype.getAccessProfile = function (resourceGroupName$$1, resourceName$$1, roleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                roleName: roleName$$1,
                options: options
            }, getAccessProfileOperationSpec, callback);
        };
        ManagedClusters.prototype.listClusterAdminCredentials = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listClusterAdminCredentialsOperationSpec, callback);
        };
        ManagedClusters.prototype.listClusterUserCredentials = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listClusterUserCredentialsOperationSpec, callback);
        };
        ManagedClusters.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates a managed cluster with the specified configuration for agents and Kubernetes
         * version.
         * @summary Creates or updates a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update a Managed Cluster operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedClustersCreateOrUpdateResponse>
         */
        ManagedClusters.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a managed cluster with the specified tags.
         * @summary Updates tags on a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ManagedClustersUpdateTagsResponse>
         */
        ManagedClusters.prototype.updateTags = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.beginUpdateTags(resourceGroupName$$1, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the managed cluster with a specified resource group and name.
         * @summary Deletes a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ManagedClusters.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a managed cluster with the specified configuration for agents and Kubernetes
         * version.
         * @summary Creates or updates a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Create or Update a Managed Cluster operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Updates a managed cluster with the specified tags.
         * @summary Updates tags on a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginUpdateTags = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateTagsOperationSpec$1, options);
        };
        /**
         * Deletes the managed cluster with a specified resource group and name.
         * @summary Deletes a managed cluster.
         * @param resourceGroupName The name of the resource group.
         * @param resourceName The name of the managed cluster resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ManagedClusters.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        ManagedClusters.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        ManagedClusters.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return ManagedClusters;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/managedClusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getUpgradeProfileOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/upgradeProfiles/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterUpgradeProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getAccessProfileOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/accessProfiles/{roleName}/listCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            roleName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterAccessProfile
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listClusterAdminCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterAdminCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CredentialResults
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listClusterUserCredentialsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterUserCredential",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CredentialResults
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ManagedCluster, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedCluster
            },
            201: {
                bodyMapper: ManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateTagsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TagsObject, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagedCluster
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagedClusterListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-containerservice";
    var packageVersion = "1.0.0-preview";
    var ContainerServiceClientContext = /** @class */ (function (_super) {
        __extends(ContainerServiceClientContext, _super);
        /**
         * Initializes a new instance of the ContainerServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerServiceClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ContainerServiceClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ContainerServiceClient = /** @class */ (function (_super) {
        __extends(ContainerServiceClient, _super);
        /**
         * Initializes a new instance of the ContainerServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerServiceClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.openShiftManagedClusters = new OpenShiftManagedClusters(_this);
            _this.containerServices = new ContainerServices(_this);
            _this.operations = new Operations(_this);
            _this.managedClusters = new ManagedClusters(_this);
            return _this;
        }
        return ContainerServiceClient;
    }(ContainerServiceClientContext));

    exports.ContainerServiceClient = ContainerServiceClient;
    exports.ContainerServiceClientContext = ContainerServiceClientContext;
    exports.ContainerServiceModels = index;
    exports.ContainerServiceMappers = mappers;
    exports.OpenShiftManagedClusters = OpenShiftManagedClusters;
    exports.ContainerServices = ContainerServices;
    exports.Operations = Operations;
    exports.ManagedClusters = ManagedClusters;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-containerservice.js.map
