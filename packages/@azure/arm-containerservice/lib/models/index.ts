/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing OperationValue.
 * Describes the properties of a Compute Operation value.
 *
 */
export interface OperationValue {
  /**
   * @member {string} [origin] The origin of the compute operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly origin?: string;
  /**
   * @member {string} [name] The name of the compute operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [operation] The display name of the compute operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operation?: string;
  /**
   * @member {string} [resource] The display name of the resource the operation
   * applies to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resource?: string;
  /**
   * @member {string} [description] The description of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly description?: string;
  /**
   * @member {string} [provider] The resource provider for the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provider?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * The Resource model definition.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} location Resource location
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing SubResource.
 * Reference to another subresource.
 *
 * @extends BaseResource
 */
export interface SubResource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource that is unique within a
   * resource group. This name can be used to access the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TagsObject.
 * Tags object for patch operations.
 *
 */
export interface TagsObject {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ManagedClusterServicePrincipalProfile.
 * Information about a service principal identity for the cluster to use for
 * manipulating Azure APIs.
 *
 */
export interface ManagedClusterServicePrincipalProfile {
  /**
   * @member {string} clientId The ID for the service principal.
   */
  clientId: string;
  /**
   * @member {string} [secret] The secret password associated with the service
   * principal in plain text.
   */
  secret?: string;
}

/**
 * @interface
 * An interface representing ContainerServiceMasterProfile.
 * Profile for the container service master.
 *
 */
export interface ContainerServiceMasterProfile {
  /**
   * @member {number} [count] Number of masters (VMs) in the container service
   * cluster. Allowed values are 1, 3, and 5. The default value is 1. Default
   * value: 1 .
   */
  count?: number;
  /**
   * @member {string} dnsPrefix DNS prefix to be used to create the FQDN for
   * the master pool.
   */
  dnsPrefix: string;
  /**
   * @member {ContainerServiceVMSizeTypes} vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo',
   * 'Standard_D12', 'Standard_D12_v2', 'Standard_D12_v2_Promo',
   * 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo',
   * 'Standard_D15_v2', 'Standard_D16_v3', 'Standard_D16s_v3',
   * 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2', 'Standard_D2_v2_Promo',
   * 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo',
   * 'Standard_D4', 'Standard_D4_v2', 'Standard_D4_v2_Promo', 'Standard_D4_v3',
   * 'Standard_D4s_v3', 'Standard_D5_v2', 'Standard_D5_v2_Promo',
   * 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2',
   * 'Standard_DS12_v2_Promo', 'Standard_DS13', 'Standard_DS13-2_v2',
   * 'Standard_DS13-4_v2', 'Standard_DS13_v2', 'Standard_DS13_v2_Promo',
   * 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2',
   * 'Standard_DS1_v2', 'Standard_DS2', 'Standard_DS2_v2',
   * 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2',
   * 'Standard_DS4_v2_Promo', 'Standard_DS5_v2', 'Standard_DS5_v2_Promo',
   * 'Standard_E16_v3', 'Standard_E16s_v3', 'Standard_E2_v3',
   * 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3',
   * 'Standard_E4s_v3', 'Standard_E64-16s_v3', 'Standard_E64-32s_v3',
   * 'Standard_E64_v3', 'Standard_E64s_v3', 'Standard_E8_v3',
   * 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s',
   * 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s',
   * 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2', 'Standard_F8',
   * 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1', 'Standard_G2',
   * 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms',
   * 'Standard_M128-64ms', 'Standard_M128ms', 'Standard_M128s',
   * 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms',
   * 'Standard_M64s', 'Standard_NC12', 'Standard_NC12s_v2',
   * 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2',
   * 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s',
   * 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: ContainerServiceVMSizeTypes;
  /**
   * @member {number} [osDiskSizeGB] OS Disk Size in GB to be used to specify
   * the disk size for every machine in this master/agent pool. If you specify
   * 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * @member {string} [vnetSubnetID] VNet SubnetID specifies the VNet's subnet
   * identifier.
   */
  vnetSubnetID?: string;
  /**
   * @member {string} [firstConsecutiveStaticIP] FirstConsecutiveStaticIP used
   * to specify the first static ip of masters. Default value: '10.240.255.5' .
   */
  firstConsecutiveStaticIP?: string;
  /**
   * @member {ContainerServiceStorageProfileTypes} [storageProfile] Storage
   * profile specifies what kind of storage used. Choose from StorageAccount
   * and ManagedDisks. Leave it empty, we will choose for you based on the
   * orchestrator choice. Possible values include: 'StorageAccount',
   * 'ManagedDisks'
   */
  storageProfile?: ContainerServiceStorageProfileTypes;
  /**
   * @member {string} [fqdn] FQDN for the master pool.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fqdn?: string;
}

/**
 * @interface
 * An interface representing ManagedClusterAgentPoolProfileProperties.
 * Properties for the container service agent pool profile.
 *
 */
export interface ManagedClusterAgentPoolProfileProperties {
  /**
   * @member {number} count Number of agents (VMs) to host docker containers.
   * Allowed values must be in the range of 1 to 100 (inclusive). The default
   * value is 1. . Default value: 1 .
   */
  count: number;
  /**
   * @member {ContainerServiceVMSizeTypes} vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo',
   * 'Standard_D12', 'Standard_D12_v2', 'Standard_D12_v2_Promo',
   * 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo',
   * 'Standard_D15_v2', 'Standard_D16_v3', 'Standard_D16s_v3',
   * 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2', 'Standard_D2_v2_Promo',
   * 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo',
   * 'Standard_D4', 'Standard_D4_v2', 'Standard_D4_v2_Promo', 'Standard_D4_v3',
   * 'Standard_D4s_v3', 'Standard_D5_v2', 'Standard_D5_v2_Promo',
   * 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2',
   * 'Standard_DS12_v2_Promo', 'Standard_DS13', 'Standard_DS13-2_v2',
   * 'Standard_DS13-4_v2', 'Standard_DS13_v2', 'Standard_DS13_v2_Promo',
   * 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2',
   * 'Standard_DS1_v2', 'Standard_DS2', 'Standard_DS2_v2',
   * 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2',
   * 'Standard_DS4_v2_Promo', 'Standard_DS5_v2', 'Standard_DS5_v2_Promo',
   * 'Standard_E16_v3', 'Standard_E16s_v3', 'Standard_E2_v3',
   * 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3',
   * 'Standard_E4s_v3', 'Standard_E64-16s_v3', 'Standard_E64-32s_v3',
   * 'Standard_E64_v3', 'Standard_E64s_v3', 'Standard_E8_v3',
   * 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s',
   * 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s',
   * 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2', 'Standard_F8',
   * 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1', 'Standard_G2',
   * 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms',
   * 'Standard_M128-64ms', 'Standard_M128ms', 'Standard_M128s',
   * 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms',
   * 'Standard_M64s', 'Standard_NC12', 'Standard_NC12s_v2',
   * 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2',
   * 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s',
   * 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: ContainerServiceVMSizeTypes;
  /**
   * @member {number} [osDiskSizeGB] OS Disk Size in GB to be used to specify
   * the disk size for every machine in this master/agent pool. If you specify
   * 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * @member {string} [vnetSubnetID] VNet SubnetID specifies the VNet's subnet
   * identifier.
   */
  vnetSubnetID?: string;
  /**
   * @member {number} [maxPods] Maximum number of pods that can run on a node.
   */
  maxPods?: number;
  /**
   * @member {OSType} [osType] OsType to be used to specify os type. Choose
   * from Linux and Windows. Default to Linux. Possible values include:
   * 'Linux', 'Windows'. Default value: 'Linux' .
   */
  osType?: OSType;
  /**
   * @member {number} [maxCount] Maximum number of nodes for auto-scaling
   */
  maxCount?: number;
  /**
   * @member {number} [minCount] Minimum number of nodes for auto-scaling
   */
  minCount?: number;
  /**
   * @member {boolean} [enableAutoScaling] Whether to enable auto-scaler
   */
  enableAutoScaling?: boolean;
  /**
   * @member {AgentPoolType} [type] AgentPoolType represents types of an agent
   * pool. Possible values include: 'VirtualMachineScaleSets',
   * 'AvailabilitySet'
   */
  type?: AgentPoolType;
  /**
   * @member {string} [orchestratorVersion] Version of orchestrator specified
   * when creating the managed cluster.
   */
  orchestratorVersion?: string;
  /**
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string[]} [availabilityZones] (PREVIEW) Availability zones for
   * nodes. Must use VirtualMachineScaleSets AgentPoolType.
   */
  availabilityZones?: string[];
}

/**
 * @interface
 * An interface representing ManagedClusterAgentPoolProfile.
 * Profile for the container service agent pool.
 *
 * @extends ManagedClusterAgentPoolProfileProperties
 */
export interface ManagedClusterAgentPoolProfile extends ManagedClusterAgentPoolProfileProperties {
  /**
   * @member {string} name Unique name of the agent pool profile in the context
   * of the subscription and resource group.
   */
  name: string;
}

/**
 * @interface
 * An interface representing AgentPool.
 * Agent Pool.
 *
 * @extends SubResource
 */
export interface AgentPool extends SubResource {
  /**
   * @member {number} count Number of agents (VMs) to host docker containers.
   * Allowed values must be in the range of 1 to 100 (inclusive). The default
   * value is 1. . Default value: 1 .
   */
  count: number;
  /**
   * @member {ContainerServiceVMSizeTypes} vmSize Size of agent VMs. Possible
   * values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2',
   * 'Standard_A3', 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2',
   * 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
   * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms',
   * 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo',
   * 'Standard_D12', 'Standard_D12_v2', 'Standard_D12_v2_Promo',
   * 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo',
   * 'Standard_D15_v2', 'Standard_D16_v3', 'Standard_D16s_v3',
   * 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2', 'Standard_D2_v2_Promo',
   * 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo',
   * 'Standard_D4', 'Standard_D4_v2', 'Standard_D4_v2_Promo', 'Standard_D4_v3',
   * 'Standard_D4s_v3', 'Standard_D5_v2', 'Standard_D5_v2_Promo',
   * 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2',
   * 'Standard_DS12_v2_Promo', 'Standard_DS13', 'Standard_DS13-2_v2',
   * 'Standard_DS13-4_v2', 'Standard_DS13_v2', 'Standard_DS13_v2_Promo',
   * 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2',
   * 'Standard_DS1_v2', 'Standard_DS2', 'Standard_DS2_v2',
   * 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2',
   * 'Standard_DS4_v2_Promo', 'Standard_DS5_v2', 'Standard_DS5_v2_Promo',
   * 'Standard_E16_v3', 'Standard_E16s_v3', 'Standard_E2_v3',
   * 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3',
   * 'Standard_E4s_v3', 'Standard_E64-16s_v3', 'Standard_E64-32s_v3',
   * 'Standard_E64_v3', 'Standard_E64s_v3', 'Standard_E8_v3',
   * 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s',
   * 'Standard_F2s_v2', 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s',
   * 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2', 'Standard_F8',
   * 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1', 'Standard_G2',
   * 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
   * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4',
   * 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
   * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r',
   * 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms',
   * 'Standard_M128-64ms', 'Standard_M128ms', 'Standard_M128s',
   * 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms',
   * 'Standard_M64s', 'Standard_NC12', 'Standard_NC12s_v2',
   * 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2',
   * 'Standard_NC24s_v3', 'Standard_NC6', 'Standard_NC6s_v2',
   * 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs', 'Standard_ND24s',
   * 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: ContainerServiceVMSizeTypes;
  /**
   * @member {number} [osDiskSizeGB] OS Disk Size in GB to be used to specify
   * the disk size for every machine in this master/agent pool. If you specify
   * 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * @member {string} [vnetSubnetID] VNet SubnetID specifies the VNet's subnet
   * identifier.
   */
  vnetSubnetID?: string;
  /**
   * @member {number} [maxPods] Maximum number of pods that can run on a node.
   */
  maxPods?: number;
  /**
   * @member {OSType} [osType] OsType to be used to specify os type. Choose
   * from Linux and Windows. Default to Linux. Possible values include:
   * 'Linux', 'Windows'. Default value: 'Linux' .
   */
  osType?: OSType;
  /**
   * @member {number} [maxCount] Maximum number of nodes for auto-scaling
   */
  maxCount?: number;
  /**
   * @member {number} [minCount] Minimum number of nodes for auto-scaling
   */
  minCount?: number;
  /**
   * @member {boolean} [enableAutoScaling] Whether to enable auto-scaler
   */
  enableAutoScaling?: boolean;
  /**
   * @member {AgentPoolType} [agentPoolType] AgentPoolType represents types of
   * an agent pool. Possible values include: 'VirtualMachineScaleSets',
   * 'AvailabilitySet'
   */
  agentPoolType?: AgentPoolType;
  /**
   * @member {string} [orchestratorVersion] Version of orchestrator specified
   * when creating the managed cluster.
   */
  orchestratorVersion?: string;
  /**
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string[]} [availabilityZones] (PREVIEW) Availability zones for
   * nodes. Must use VirtualMachineScaleSets AgentPoolType.
   */
  availabilityZones?: string[];
}

/**
 * @interface
 * An interface representing ContainerServiceWindowsProfile.
 * Profile for Windows VMs in the container service cluster.
 *
 */
export interface ContainerServiceWindowsProfile {
  /**
   * @member {string} adminUsername The administrator username to use for
   * Windows VMs.
   */
  adminUsername: string;
  /**
   * @member {string} adminPassword The administrator password to use for
   * Windows VMs.
   */
  adminPassword: string;
}

/**
 * @interface
 * An interface representing ContainerServiceSshPublicKey.
 * Contains information about SSH certificate public key data.
 *
 */
export interface ContainerServiceSshPublicKey {
  /**
   * @member {string} keyData Certificate public key used to authenticate with
   * VMs through SSH. The certificate must be in PEM format with or without
   * headers.
   */
  keyData: string;
}

/**
 * @interface
 * An interface representing ContainerServiceSshConfiguration.
 * SSH configuration for Linux-based VMs running on Azure.
 *
 */
export interface ContainerServiceSshConfiguration {
  /**
   * @member {ContainerServiceSshPublicKey[]} publicKeys The list of SSH public
   * keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   */
  publicKeys: ContainerServiceSshPublicKey[];
}

/**
 * @interface
 * An interface representing ContainerServiceLinuxProfile.
 * Profile for Linux VMs in the container service cluster.
 *
 */
export interface ContainerServiceLinuxProfile {
  /**
   * @member {string} adminUsername The administrator username to use for Linux
   * VMs.
   */
  adminUsername: string;
  /**
   * @member {ContainerServiceSshConfiguration} ssh SSH configuration for
   * Linux-based VMs running on Azure.
   */
  ssh: ContainerServiceSshConfiguration;
}

/**
 * @interface
 * An interface representing ContainerServiceNetworkProfile.
 * Profile of network configuration.
 *
 */
export interface ContainerServiceNetworkProfile {
  /**
   * @member {NetworkPlugin} [networkPlugin] Network plugin used for building
   * Kubernetes network. Possible values include: 'azure', 'kubenet'. Default
   * value: 'kubenet' .
   */
  networkPlugin?: NetworkPlugin;
  /**
   * @member {NetworkPolicy} [networkPolicy] Network policy used for building
   * Kubernetes network. Possible values include: 'calico', 'azure'
   */
  networkPolicy?: NetworkPolicy;
  /**
   * @member {string} [podCidr] A CIDR notation IP range from which to assign
   * pod IPs when kubenet is used. Default value: '10.244.0.0/16' .
   */
  podCidr?: string;
  /**
   * @member {string} [serviceCidr] A CIDR notation IP range from which to
   * assign service cluster IPs. It must not overlap with any Subnet IP ranges.
   * Default value: '10.0.0.0/16' .
   */
  serviceCidr?: string;
  /**
   * @member {string} [dnsServiceIP] An IP address assigned to the Kubernetes
   * DNS service. It must be within the Kubernetes service address range
   * specified in serviceCidr. Default value: '10.0.0.10' .
   */
  dnsServiceIP?: string;
  /**
   * @member {string} [dockerBridgeCidr] A CIDR notation IP range assigned to
   * the Docker bridge network. It must not overlap with any Subnet IP ranges
   * or the Kubernetes service address range. Default value: '172.17.0.1/16' .
   */
  dockerBridgeCidr?: string;
}

/**
 * @interface
 * An interface representing ContainerServiceVMDiagnostics.
 * Profile for diagnostics on the container service VMs.
 *
 */
export interface ContainerServiceVMDiagnostics {
  /**
   * @member {boolean} enabled Whether the VM diagnostic agent is provisioned
   * on the VM.
   */
  enabled: boolean;
  /**
   * @member {string} [storageUri] The URI of the storage account where
   * diagnostics are stored.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly storageUri?: string;
}

/**
 * @interface
 * An interface representing ContainerServiceDiagnosticsProfile.
 * Profile for diagnostics on the container service cluster.
 *
 */
export interface ContainerServiceDiagnosticsProfile {
  /**
   * @member {ContainerServiceVMDiagnostics} vmDiagnostics Profile for
   * diagnostics on the container service VMs.
   */
  vmDiagnostics: ContainerServiceVMDiagnostics;
}

/**
 * @interface
 * An interface representing ManagedClusterAddonProfile.
 * A Kubernetes add-on profile for a managed cluster.
 *
 */
export interface ManagedClusterAddonProfile {
  /**
   * @member {boolean} enabled Whether the add-on is enabled or not.
   */
  enabled: boolean;
  /**
   * @member {{ [propertyName: string]: string }} [config] Key-value pairs for
   * configuring an add-on.
   */
  config?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ManagedClusterAADProfile.
 * AADProfile specifies attributes for Azure Active Directory integration.
 *
 */
export interface ManagedClusterAADProfile {
  /**
   * @member {string} clientAppID The client AAD application ID.
   */
  clientAppID: string;
  /**
   * @member {string} serverAppID The server AAD application ID.
   */
  serverAppID: string;
  /**
   * @member {string} [serverAppSecret] The server AAD application secret.
   */
  serverAppSecret?: string;
  /**
   * @member {string} [tenantID] The AAD tenant ID to use for authentication.
   * If not specified, will use the tenant of the deployment subscription.
   */
  tenantID?: string;
}

/**
 * @interface
 * An interface representing ManagedCluster.
 * Managed cluster.
 *
 * @extends Resource
 */
export interface ManagedCluster extends Resource {
  /**
   * @member {string} [provisioningState] The current deployment or
   * provisioning state, which only appears in the response.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [kubernetesVersion] Version of Kubernetes specified when
   * creating the managed cluster.
   */
  kubernetesVersion?: string;
  /**
   * @member {string} [dnsPrefix] DNS prefix specified when creating the
   * managed cluster.
   */
  dnsPrefix?: string;
  /**
   * @member {string} [fqdn] FQDN for the master pool.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fqdn?: string;
  /**
   * @member {ManagedClusterAgentPoolProfile[]} [agentPoolProfiles] Properties
   * of the agent pool.
   */
  agentPoolProfiles?: ManagedClusterAgentPoolProfile[];
  /**
   * @member {ContainerServiceLinuxProfile} [linuxProfile] Profile for Linux
   * VMs in the container service cluster.
   */
  linuxProfile?: ContainerServiceLinuxProfile;
  /**
   * @member {ManagedClusterServicePrincipalProfile} [servicePrincipalProfile]
   * Information about a service principal identity for the cluster to use for
   * manipulating Azure APIs.
   */
  servicePrincipalProfile?: ManagedClusterServicePrincipalProfile;
  /**
   * @member {{ [propertyName: string]: ManagedClusterAddonProfile }}
   * [addonProfiles] Profile of managed cluster add-on.
   */
  addonProfiles?: { [propertyName: string]: ManagedClusterAddonProfile };
  /**
   * @member {string} [nodeResourceGroup] Name of the resource group containing
   * agent pool nodes.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nodeResourceGroup?: string;
  /**
   * @member {boolean} [enableRBAC] Whether to enable Kubernetes Role-Based
   * Access Control.
   */
  enableRBAC?: boolean;
  /**
   * @member {boolean} [enablePodSecurityPolicy] (PREVIEW) Whether to enable
   * Kubernetes Pod security policy.
   */
  enablePodSecurityPolicy?: boolean;
  /**
   * @member {ContainerServiceNetworkProfile} [networkProfile] Profile of
   * network configuration.
   */
  networkProfile?: ContainerServiceNetworkProfile;
  /**
   * @member {ManagedClusterAADProfile} [aadProfile] Profile of Azure Active
   * Directory configuration.
   */
  aadProfile?: ManagedClusterAADProfile;
  /**
   * @member {string[]} [apiServerAuthorizedIPRanges] (PREVIEW) Authorized IP
   * Ranges to kubernetes API server.
   */
  apiServerAuthorizedIPRanges?: string[];
}

/**
 * @interface
 * An interface representing OrchestratorProfile.
 * Contains information about orchestrator.
 *
 */
export interface OrchestratorProfile {
  /**
   * @member {string} orchestratorType Orchestrator type.
   */
  orchestratorType: string;
  /**
   * @member {string} orchestratorVersion Orchestrator version (major, minor,
   * patch).
   */
  orchestratorVersion: string;
}

/**
 * @interface
 * An interface representing ManagedClusterAccessProfile.
 * Managed cluster Access Profile.
 *
 * @extends Resource
 */
export interface ManagedClusterAccessProfile extends Resource {
  /**
   * @member {Uint8Array} [kubeConfig] Base64-encoded Kubernetes configuration
   * file.
   */
  kubeConfig?: Uint8Array;
}

/**
 * @interface
 * An interface representing ManagedClusterPoolUpgradeProfile.
 * The list of available upgrade versions.
 *
 */
export interface ManagedClusterPoolUpgradeProfile {
  /**
   * @member {string} kubernetesVersion Kubernetes version (major, minor,
   * patch).
   */
  kubernetesVersion: string;
  /**
   * @member {string} [name] Pool name.
   */
  name?: string;
  /**
   * @member {OSType} osType OsType to be used to specify os type. Choose from
   * Linux and Windows. Default to Linux. Possible values include: 'Linux',
   * 'Windows'. Default value: 'Linux' .
   */
  osType: OSType;
  /**
   * @member {string[]} [upgrades] List of orchestrator types and versions
   * available for upgrade.
   */
  upgrades?: string[];
}

/**
 * @interface
 * An interface representing ManagedClusterUpgradeProfile.
 * The list of available upgrades for compute pools.
 *
 */
export interface ManagedClusterUpgradeProfile {
  /**
   * @member {string} [id] Id of upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Name of upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Type of upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {ManagedClusterPoolUpgradeProfile} controlPlaneProfile The list of
   * available upgrade versions for the control plane.
   */
  controlPlaneProfile: ManagedClusterPoolUpgradeProfile;
  /**
   * @member {ManagedClusterPoolUpgradeProfile[]} agentPoolProfiles The list of
   * available upgrade versions for agent pools.
   */
  agentPoolProfiles: ManagedClusterPoolUpgradeProfile[];
}

/**
 * @interface
 * An interface representing CredentialResult.
 * The credential result response.
 *
 */
export interface CredentialResult {
  /**
   * @member {string} [name] The name of the credential.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {Uint8Array} [value] Base64-encoded Kubernetes configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * @interface
 * An interface representing CredentialResults.
 * The list of credential result response.
 *
 */
export interface CredentialResults {
  /**
   * @member {CredentialResult[]} [kubeconfigs] Base64-encoded Kubernetes
   * configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly kubeconfigs?: CredentialResult[];
}

/**
 * @interface
 * An interface representing ContainerServiceClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface ContainerServiceClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the OperationListResult.
 * The List Compute Operation operation response.
 *
 * @extends Array<OperationValue>
 */
export interface OperationListResult extends Array<OperationValue> {
}

/**
 * @interface
 * An interface representing the ManagedClusterListResult.
 * The response from the List Managed Clusters operation.
 *
 * @extends Array<ManagedCluster>
 */
export interface ManagedClusterListResult extends Array<ManagedCluster> {
  /**
   * @member {string} [nextLink] The URL to get the next set of managed cluster
   * results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the AgentPoolListResult.
 * The response from the List Agent Pools operation.
 *
 * @extends Array<AgentPool>
 */
export interface AgentPoolListResult extends Array<AgentPool> {
  /**
   * @member {string} [nextLink] The URL to get the next set of agent pool
   * results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for ContainerServiceStorageProfileTypes.
 * Possible values include: 'StorageAccount', 'ManagedDisks'
 * @readonly
 * @enum {string}
 */
export type ContainerServiceStorageProfileTypes = 'StorageAccount' | 'ManagedDisks';

/**
 * Defines values for ContainerServiceVMSizeTypes.
 * Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3', 'Standard_A4',
 * 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
 * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11', 'Standard_D11_v2',
 * 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2', 'Standard_D12_v2_Promo',
 * 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14', 'Standard_D14_v2',
 * 'Standard_D14_v2_Promo', 'Standard_D15_v2', 'Standard_D16_v3', 'Standard_D16s_v3',
 * 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3', 'Standard_D3_v2',
 * 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2', 'Standard_D4_v2_Promo',
 * 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2', 'Standard_D5_v2_Promo',
 * 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo', 'Standard_DS12',
 * 'Standard_DS12_v2', 'Standard_DS12_v2_Promo', 'Standard_DS13', 'Standard_DS13-2_v2',
 * 'Standard_DS13-4_v2', 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2', 'Standard_DS14_v2_Promo',
 * 'Standard_DS15_v2', 'Standard_DS1_v2', 'Standard_DS2', 'Standard_DS2_v2',
 * 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2', 'Standard_DS3_v2_Promo',
 * 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3', 'Standard_E2_v3',
 * 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3', 'Standard_E32_v3',
 * 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3', 'Standard_E8_v3',
 * 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s', 'Standard_F16s_v2',
 * 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2',
 * 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1', 'Standard_G2', 'Standard_G3',
 * 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
 * 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r', 'Standard_H8',
 * 'Standard_H8m', 'Standard_L16s', 'Standard_L32s', 'Standard_L4s', 'Standard_L8s',
 * 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms', 'Standard_M128s',
 * 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
 * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
 * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 * @readonly
 * @enum {string}
 */
export type ContainerServiceVMSizeTypes = 'Standard_A1' | 'Standard_A10' | 'Standard_A11' | 'Standard_A1_v2' | 'Standard_A2' | 'Standard_A2_v2' | 'Standard_A2m_v2' | 'Standard_A3' | 'Standard_A4' | 'Standard_A4_v2' | 'Standard_A4m_v2' | 'Standard_A5' | 'Standard_A6' | 'Standard_A7' | 'Standard_A8' | 'Standard_A8_v2' | 'Standard_A8m_v2' | 'Standard_A9' | 'Standard_B2ms' | 'Standard_B2s' | 'Standard_B4ms' | 'Standard_B8ms' | 'Standard_D1' | 'Standard_D11' | 'Standard_D11_v2' | 'Standard_D11_v2_Promo' | 'Standard_D12' | 'Standard_D12_v2' | 'Standard_D12_v2_Promo' | 'Standard_D13' | 'Standard_D13_v2' | 'Standard_D13_v2_Promo' | 'Standard_D14' | 'Standard_D14_v2' | 'Standard_D14_v2_Promo' | 'Standard_D15_v2' | 'Standard_D16_v3' | 'Standard_D16s_v3' | 'Standard_D1_v2' | 'Standard_D2' | 'Standard_D2_v2' | 'Standard_D2_v2_Promo' | 'Standard_D2_v3' | 'Standard_D2s_v3' | 'Standard_D3' | 'Standard_D32_v3' | 'Standard_D32s_v3' | 'Standard_D3_v2' | 'Standard_D3_v2_Promo' | 'Standard_D4' | 'Standard_D4_v2' | 'Standard_D4_v2_Promo' | 'Standard_D4_v3' | 'Standard_D4s_v3' | 'Standard_D5_v2' | 'Standard_D5_v2_Promo' | 'Standard_D64_v3' | 'Standard_D64s_v3' | 'Standard_D8_v3' | 'Standard_D8s_v3' | 'Standard_DS1' | 'Standard_DS11' | 'Standard_DS11_v2' | 'Standard_DS11_v2_Promo' | 'Standard_DS12' | 'Standard_DS12_v2' | 'Standard_DS12_v2_Promo' | 'Standard_DS13' | 'Standard_DS13-2_v2' | 'Standard_DS13-4_v2' | 'Standard_DS13_v2' | 'Standard_DS13_v2_Promo' | 'Standard_DS14' | 'Standard_DS14-4_v2' | 'Standard_DS14-8_v2' | 'Standard_DS14_v2' | 'Standard_DS14_v2_Promo' | 'Standard_DS15_v2' | 'Standard_DS1_v2' | 'Standard_DS2' | 'Standard_DS2_v2' | 'Standard_DS2_v2_Promo' | 'Standard_DS3' | 'Standard_DS3_v2' | 'Standard_DS3_v2_Promo' | 'Standard_DS4' | 'Standard_DS4_v2' | 'Standard_DS4_v2_Promo' | 'Standard_DS5_v2' | 'Standard_DS5_v2_Promo' | 'Standard_E16_v3' | 'Standard_E16s_v3' | 'Standard_E2_v3' | 'Standard_E2s_v3' | 'Standard_E32-16s_v3' | 'Standard_E32-8s_v3' | 'Standard_E32_v3' | 'Standard_E32s_v3' | 'Standard_E4_v3' | 'Standard_E4s_v3' | 'Standard_E64-16s_v3' | 'Standard_E64-32s_v3' | 'Standard_E64_v3' | 'Standard_E64s_v3' | 'Standard_E8_v3' | 'Standard_E8s_v3' | 'Standard_F1' | 'Standard_F16' | 'Standard_F16s' | 'Standard_F16s_v2' | 'Standard_F1s' | 'Standard_F2' | 'Standard_F2s' | 'Standard_F2s_v2' | 'Standard_F32s_v2' | 'Standard_F4' | 'Standard_F4s' | 'Standard_F4s_v2' | 'Standard_F64s_v2' | 'Standard_F72s_v2' | 'Standard_F8' | 'Standard_F8s' | 'Standard_F8s_v2' | 'Standard_G1' | 'Standard_G2' | 'Standard_G3' | 'Standard_G4' | 'Standard_G5' | 'Standard_GS1' | 'Standard_GS2' | 'Standard_GS3' | 'Standard_GS4' | 'Standard_GS4-4' | 'Standard_GS4-8' | 'Standard_GS5' | 'Standard_GS5-16' | 'Standard_GS5-8' | 'Standard_H16' | 'Standard_H16m' | 'Standard_H16mr' | 'Standard_H16r' | 'Standard_H8' | 'Standard_H8m' | 'Standard_L16s' | 'Standard_L32s' | 'Standard_L4s' | 'Standard_L8s' | 'Standard_M128-32ms' | 'Standard_M128-64ms' | 'Standard_M128ms' | 'Standard_M128s' | 'Standard_M64-16ms' | 'Standard_M64-32ms' | 'Standard_M64ms' | 'Standard_M64s' | 'Standard_NC12' | 'Standard_NC12s_v2' | 'Standard_NC12s_v3' | 'Standard_NC24' | 'Standard_NC24r' | 'Standard_NC24rs_v2' | 'Standard_NC24rs_v3' | 'Standard_NC24s_v2' | 'Standard_NC24s_v3' | 'Standard_NC6' | 'Standard_NC6s_v2' | 'Standard_NC6s_v3' | 'Standard_ND12s' | 'Standard_ND24rs' | 'Standard_ND24s' | 'Standard_ND6s' | 'Standard_NV12' | 'Standard_NV24' | 'Standard_NV6';

/**
 * Defines values for OSType.
 * Possible values include: 'Linux', 'Windows'
 * @readonly
 * @enum {string}
 */
export type OSType = 'Linux' | 'Windows';

/**
 * Defines values for AgentPoolType.
 * Possible values include: 'VirtualMachineScaleSets', 'AvailabilitySet'
 * @readonly
 * @enum {string}
 */
export type AgentPoolType = 'VirtualMachineScaleSets' | 'AvailabilitySet';

/**
 * Defines values for NetworkPlugin.
 * Possible values include: 'azure', 'kubenet'
 * @readonly
 * @enum {string}
 */
export type NetworkPlugin = 'azure' | 'kubenet';

/**
 * Defines values for NetworkPolicy.
 * Possible values include: 'calico', 'azure'
 * @readonly
 * @enum {string}
 */
export type NetworkPolicy = 'calico' | 'azure';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ManagedClustersListResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ManagedClustersListByResourceGroupResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the getUpgradeProfile operation.
 */
export type ManagedClustersGetUpgradeProfileResponse = ManagedClusterUpgradeProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterUpgradeProfile;
    };
};

/**
 * Contains response data for the getAccessProfile operation.
 */
export type ManagedClustersGetAccessProfileResponse = ManagedClusterAccessProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterAccessProfile;
    };
};

/**
 * Contains response data for the listClusterAdminCredentials operation.
 */
export type ManagedClustersListClusterAdminCredentialsResponse = CredentialResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CredentialResults;
    };
};

/**
 * Contains response data for the listClusterUserCredentials operation.
 */
export type ManagedClustersListClusterUserCredentialsResponse = CredentialResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CredentialResults;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedClustersGetResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedClustersCreateOrUpdateResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ManagedClustersUpdateTagsResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ManagedClustersBeginCreateOrUpdateResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type ManagedClustersBeginUpdateTagsResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ManagedClustersListNextResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ManagedClustersListByResourceGroupNextResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AgentPoolsListResponse = AgentPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AgentPoolsGetResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AgentPoolsCreateOrUpdateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AgentPoolsBeginCreateOrUpdateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AgentPoolsListNextResponse = AgentPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolListResult;
    };
};
