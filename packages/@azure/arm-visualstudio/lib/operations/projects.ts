/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/projectsMappers";
import * as Parameters from "../models/parameters";
import { VisualStudioResourceProviderClientContext } from "../visualStudioResourceProviderClientContext";

/** Class representing a Projects. */
export class Projects {
  private readonly client: VisualStudioResourceProviderClientContext;

  /**
   * Create a Projects.
   * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
   */
  constructor(client: VisualStudioResourceProviderClientContext) {
    this.client = client;
  }

  /**
   * Gets all Visual Studio Team Services project resources created in the specified Team Services
   * account.
   * @summary Projects_ListByResourceGroup
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, rootResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProjectsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, rootResourceName: string, callback: msRest.ServiceCallback<Models.ProjectResourceListResult>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, rootResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectResourceListResult>): void;
  listByResourceGroup(resourceGroupName: string, rootResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProjectResourceListResult>, callback?: msRest.ServiceCallback<Models.ProjectResourceListResult>): Promise<Models.ProjectsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        rootResourceName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ProjectsListByResourceGroupResponse>;
  }

  /**
   * Creates a Team Services project in the collection with the specified name.
   * 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties.
   * Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
   * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
   * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
   * templates).
   * @summary Projects_Create
   * @param body The request data.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectsCreateResponse>
   */
  create(body: Models.ProjectResource, resourceGroupName: string, rootResourceName: string, resourceName: string, options?: Models.ProjectsCreateOptionalParams): Promise<Models.ProjectsCreateResponse> {
    return this.beginCreate(body,resourceGroupName,rootResourceName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ProjectsCreateResponse>;
  }

  /**
   * Gets the details of a Team Services project resource.
   * @summary Projects_Get
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectsGetResponse>
   */
  get(resourceGroupName: string, rootResourceName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProjectsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param callback The callback
   */
  get(resourceGroupName: string, rootResourceName: string, resourceName: string, callback: msRest.ServiceCallback<Models.ProjectResource>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, rootResourceName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectResource>): void;
  get(resourceGroupName: string, rootResourceName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProjectResource>, callback?: msRest.ServiceCallback<Models.ProjectResource>): Promise<Models.ProjectsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        rootResourceName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProjectsGetResponse>;
  }

  /**
   * Updates the tags of the specified Team Services project.
   * @summary Projects_Update
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param body The request data.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectsUpdateResponse>
   */
  update(resourceGroupName: string, body: Models.ProjectResource, rootResourceName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProjectsUpdateResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param body The request data.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param callback The callback
   */
  update(resourceGroupName: string, body: Models.ProjectResource, rootResourceName: string, resourceName: string, callback: msRest.ServiceCallback<Models.ProjectResource>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param body The request data.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, body: Models.ProjectResource, rootResourceName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectResource>): void;
  update(resourceGroupName: string, body: Models.ProjectResource, rootResourceName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProjectResource>, callback?: msRest.ServiceCallback<Models.ProjectResource>): Promise<Models.ProjectsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        body,
        rootResourceName,
        resourceName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ProjectsUpdateResponse>;
  }

  /**
   * Gets the status of the project resource creation job.
   * @summary Projects_GetJobStatus
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param subContainerName This parameter should be set to the resourceName.
   * @param operation The operation type. The only supported value is 'put'.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProjectsGetJobStatusResponse>
   */
  getJobStatus(resourceGroupName: string, rootResourceName: string, resourceName: string, subContainerName: string, operation: string, options?: Models.ProjectsGetJobStatusOptionalParams): Promise<Models.ProjectsGetJobStatusResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param subContainerName This parameter should be set to the resourceName.
   * @param operation The operation type. The only supported value is 'put'.
   * @param callback The callback
   */
  getJobStatus(resourceGroupName: string, rootResourceName: string, resourceName: string, subContainerName: string, operation: string, callback: msRest.ServiceCallback<Models.ProjectResource>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param subContainerName This parameter should be set to the resourceName.
   * @param operation The operation type. The only supported value is 'put'.
   * @param options The optional parameters
   * @param callback The callback
   */
  getJobStatus(resourceGroupName: string, rootResourceName: string, resourceName: string, subContainerName: string, operation: string, options: Models.ProjectsGetJobStatusOptionalParams, callback: msRest.ServiceCallback<Models.ProjectResource>): void;
  getJobStatus(resourceGroupName: string, rootResourceName: string, resourceName: string, subContainerName: string, operation: string, options?: Models.ProjectsGetJobStatusOptionalParams | msRest.ServiceCallback<Models.ProjectResource>, callback?: msRest.ServiceCallback<Models.ProjectResource>): Promise<Models.ProjectsGetJobStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        rootResourceName,
        resourceName,
        subContainerName,
        operation,
        options
      },
      getJobStatusOperationSpec,
      callback) as Promise<Models.ProjectsGetJobStatusResponse>;
  }

  /**
   * Creates a Team Services project in the collection with the specified name.
   * 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties.
   * Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
   * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
   * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
   * templates).
   * @summary Projects_Create
   * @param body The request data.
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param rootResourceName Name of the Team Services account.
   * @param resourceName Name of the Team Services project.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(body: Models.ProjectResource, resourceGroupName: string, rootResourceName: string, resourceName: string, options?: Models.ProjectsBeginCreateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        rootResourceName,
        resourceName,
        options
      },
      beginCreateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.rootResourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProjectResourceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.rootResourceName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProjectResource
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.rootResourceName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ProjectResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProjectResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJobStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}/subContainers/{subContainerName}/status",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.rootResourceName,
    Parameters.resourceName,
    Parameters.subContainerName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.operation,
    Parameters.jobId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProjectResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.rootResourceName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.validating
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ProjectResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProjectResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
