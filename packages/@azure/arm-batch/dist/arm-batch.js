/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmBatch = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for PoolAllocationMode.
     * Possible values include: 'BatchService', 'UserSubscription'
     * @readonly
     * @enum {string}
     */
    var PoolAllocationMode;
    (function (PoolAllocationMode) {
        PoolAllocationMode["BatchService"] = "BatchService";
        PoolAllocationMode["UserSubscription"] = "UserSubscription";
    })(PoolAllocationMode || (PoolAllocationMode = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Invalid', 'Creating', 'Deleting', 'Succeeded',
     * 'Failed', 'Cancelled'
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Invalid"] = "Invalid";
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Cancelled"] = "Cancelled";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for AccountKeyType.
     * Possible values include: 'Primary', 'Secondary'
     * @readonly
     * @enum {string}
     */
    var AccountKeyType;
    (function (AccountKeyType) {
        AccountKeyType["Primary"] = "Primary";
        AccountKeyType["Secondary"] = "Secondary";
    })(AccountKeyType || (AccountKeyType = {}));
    /**
     * Defines values for PackageState.
     * Possible values include: 'Pending', 'Active', 'Unmapped'
     * @readonly
     * @enum {string}
     */
    var PackageState;
    (function (PackageState) {
        PackageState["Pending"] = "Pending";
        PackageState["Active"] = "Active";
        PackageState["Unmapped"] = "Unmapped";
    })(PackageState || (PackageState = {}));
    /**
     * Defines values for CertificateFormat.
     * Possible values include: 'Pfx', 'Cer'
     * @readonly
     * @enum {string}
     */
    var CertificateFormat;
    (function (CertificateFormat) {
        CertificateFormat["Pfx"] = "Pfx";
        CertificateFormat["Cer"] = "Cer";
    })(CertificateFormat || (CertificateFormat = {}));
    /**
     * Defines values for CertificateProvisioningState.
     * Possible values include: 'Succeeded', 'Deleting', 'Failed'
     * @readonly
     * @enum {string}
     */
    var CertificateProvisioningState;
    (function (CertificateProvisioningState) {
        CertificateProvisioningState["Succeeded"] = "Succeeded";
        CertificateProvisioningState["Deleting"] = "Deleting";
        CertificateProvisioningState["Failed"] = "Failed";
    })(CertificateProvisioningState || (CertificateProvisioningState = {}));
    /**
     * Defines values for PoolProvisioningState.
     * Possible values include: 'Succeeded', 'Deleting'
     * @readonly
     * @enum {string}
     */
    var PoolProvisioningState;
    (function (PoolProvisioningState) {
        PoolProvisioningState["Succeeded"] = "Succeeded";
        PoolProvisioningState["Deleting"] = "Deleting";
    })(PoolProvisioningState || (PoolProvisioningState = {}));
    /**
     * Defines values for AllocationState.
     * Possible values include: 'Steady', 'Resizing', 'Stopping'
     * @readonly
     * @enum {string}
     */
    var AllocationState;
    (function (AllocationState) {
        AllocationState["Steady"] = "Steady";
        AllocationState["Resizing"] = "Resizing";
        AllocationState["Stopping"] = "Stopping";
    })(AllocationState || (AllocationState = {}));
    /**
     * Defines values for CachingType.
     * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
     * @readonly
     * @enum {string}
     */
    var CachingType;
    (function (CachingType) {
        CachingType["None"] = "None";
        CachingType["ReadOnly"] = "ReadOnly";
        CachingType["ReadWrite"] = "ReadWrite";
    })(CachingType || (CachingType = {}));
    /**
     * Defines values for StorageAccountType.
     * Possible values include: 'Standard_LRS', 'Premium_LRS'
     * @readonly
     * @enum {string}
     */
    var StorageAccountType;
    (function (StorageAccountType) {
        StorageAccountType["StandardLRS"] = "Standard_LRS";
        StorageAccountType["PremiumLRS"] = "Premium_LRS";
    })(StorageAccountType || (StorageAccountType = {}));
    /**
     * Defines values for ComputeNodeDeallocationOption.
     * Possible values include: 'Requeue', 'Terminate', 'TaskCompletion',
     * 'RetainedData'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeDeallocationOption;
    (function (ComputeNodeDeallocationOption) {
        ComputeNodeDeallocationOption["Requeue"] = "Requeue";
        ComputeNodeDeallocationOption["Terminate"] = "Terminate";
        ComputeNodeDeallocationOption["TaskCompletion"] = "TaskCompletion";
        ComputeNodeDeallocationOption["RetainedData"] = "RetainedData";
    })(ComputeNodeDeallocationOption || (ComputeNodeDeallocationOption = {}));
    /**
     * Defines values for InterNodeCommunicationState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var InterNodeCommunicationState;
    (function (InterNodeCommunicationState) {
        InterNodeCommunicationState["Enabled"] = "Enabled";
        InterNodeCommunicationState["Disabled"] = "Disabled";
    })(InterNodeCommunicationState || (InterNodeCommunicationState = {}));
    /**
     * Defines values for InboundEndpointProtocol.
     * Possible values include: 'TCP', 'UDP'
     * @readonly
     * @enum {string}
     */
    var InboundEndpointProtocol;
    (function (InboundEndpointProtocol) {
        InboundEndpointProtocol["TCP"] = "TCP";
        InboundEndpointProtocol["UDP"] = "UDP";
    })(InboundEndpointProtocol || (InboundEndpointProtocol = {}));
    /**
     * Defines values for NetworkSecurityGroupRuleAccess.
     * Possible values include: 'Allow', 'Deny'
     * @readonly
     * @enum {string}
     */
    var NetworkSecurityGroupRuleAccess;
    (function (NetworkSecurityGroupRuleAccess) {
        NetworkSecurityGroupRuleAccess["Allow"] = "Allow";
        NetworkSecurityGroupRuleAccess["Deny"] = "Deny";
    })(NetworkSecurityGroupRuleAccess || (NetworkSecurityGroupRuleAccess = {}));
    /**
     * Defines values for ComputeNodeFillType.
     * Possible values include: 'Spread', 'Pack'
     * @readonly
     * @enum {string}
     */
    var ComputeNodeFillType;
    (function (ComputeNodeFillType) {
        ComputeNodeFillType["Spread"] = "Spread";
        ComputeNodeFillType["Pack"] = "Pack";
    })(ComputeNodeFillType || (ComputeNodeFillType = {}));
    /**
     * Defines values for ElevationLevel.
     * Possible values include: 'NonAdmin', 'Admin'
     * @readonly
     * @enum {string}
     */
    var ElevationLevel;
    (function (ElevationLevel) {
        ElevationLevel["NonAdmin"] = "NonAdmin";
        ElevationLevel["Admin"] = "Admin";
    })(ElevationLevel || (ElevationLevel = {}));
    /**
     * Defines values for AutoUserScope.
     * Possible values include: 'Task', 'Pool'
     * @readonly
     * @enum {string}
     */
    var AutoUserScope;
    (function (AutoUserScope) {
        AutoUserScope["Task"] = "Task";
        AutoUserScope["Pool"] = "Pool";
    })(AutoUserScope || (AutoUserScope = {}));
    /**
     * Defines values for CertificateStoreLocation.
     * Possible values include: 'CurrentUser', 'LocalMachine'
     * @readonly
     * @enum {string}
     */
    var CertificateStoreLocation;
    (function (CertificateStoreLocation) {
        CertificateStoreLocation["CurrentUser"] = "CurrentUser";
        CertificateStoreLocation["LocalMachine"] = "LocalMachine";
    })(CertificateStoreLocation || (CertificateStoreLocation = {}));
    /**
     * Defines values for CertificateVisibility.
     * Possible values include: 'StartTask', 'Task', 'RemoteUser'
     * @readonly
     * @enum {string}
     */
    var CertificateVisibility;
    (function (CertificateVisibility) {
        CertificateVisibility["StartTask"] = "StartTask";
        CertificateVisibility["Task"] = "Task";
        CertificateVisibility["RemoteUser"] = "RemoteUser";
    })(CertificateVisibility || (CertificateVisibility = {}));
    /**
     * Defines values for NameAvailabilityReason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * @readonly
     * @enum {string}
     */
    var NameAvailabilityReason;
    (function (NameAvailabilityReason) {
        NameAvailabilityReason["Invalid"] = "Invalid";
        NameAvailabilityReason["AlreadyExists"] = "AlreadyExists";
    })(NameAvailabilityReason || (NameAvailabilityReason = {}));

    var index = /*#__PURE__*/Object.freeze({
        get PoolAllocationMode () { return PoolAllocationMode; },
        get ProvisioningState () { return ProvisioningState; },
        get AccountKeyType () { return AccountKeyType; },
        get PackageState () { return PackageState; },
        get CertificateFormat () { return CertificateFormat; },
        get CertificateProvisioningState () { return CertificateProvisioningState; },
        get PoolProvisioningState () { return PoolProvisioningState; },
        get AllocationState () { return AllocationState; },
        get CachingType () { return CachingType; },
        get StorageAccountType () { return StorageAccountType; },
        get ComputeNodeDeallocationOption () { return ComputeNodeDeallocationOption; },
        get InterNodeCommunicationState () { return InterNodeCommunicationState; },
        get InboundEndpointProtocol () { return InboundEndpointProtocol; },
        get NetworkSecurityGroupRuleAccess () { return NetworkSecurityGroupRuleAccess; },
        get ComputeNodeFillType () { return ComputeNodeFillType; },
        get ElevationLevel () { return ElevationLevel; },
        get AutoUserScope () { return AutoUserScope; },
        get CertificateStoreLocation () { return CertificateStoreLocation; },
        get CertificateVisibility () { return CertificateVisibility; },
        get NameAvailabilityReason () { return NameAvailabilityReason; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var AutoStorageBaseProperties = {
        serializedName: "AutoStorageBaseProperties",
        type: {
            name: "Composite",
            className: "AutoStorageBaseProperties",
            modelProperties: {
                storageAccountId: {
                    required: true,
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultReference = {
        serializedName: "KeyVaultReference",
        type: {
            name: "Composite",
            className: "KeyVaultReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchAccountCreateParameters = {
        serializedName: "BatchAccountCreateParameters",
        type: {
            name: "Composite",
            className: "BatchAccountCreateParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                autoStorage: {
                    serializedName: "properties.autoStorage",
                    type: {
                        name: "Composite",
                        className: "AutoStorageBaseProperties"
                    }
                },
                poolAllocationMode: {
                    serializedName: "properties.poolAllocationMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "BatchService",
                            "UserSubscription"
                        ]
                    }
                },
                keyVaultReference: {
                    serializedName: "properties.keyVaultReference",
                    type: {
                        name: "Composite",
                        className: "KeyVaultReference"
                    }
                }
            }
        }
    };
    var AutoStorageProperties = {
        serializedName: "AutoStorageProperties",
        type: {
            name: "Composite",
            className: "AutoStorageProperties",
            modelProperties: __assign({}, AutoStorageBaseProperties.type.modelProperties, { lastKeySync: {
                    required: true,
                    serializedName: "lastKeySync",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var BatchAccount = {
        serializedName: "BatchAccount",
        type: {
            name: "Composite",
            className: "BatchAccount",
            modelProperties: __assign({}, Resource.type.modelProperties, { accountEndpoint: {
                    readOnly: true,
                    serializedName: "properties.accountEndpoint",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "Creating",
                            "Deleting",
                            "Succeeded",
                            "Failed",
                            "Cancelled"
                        ]
                    }
                }, poolAllocationMode: {
                    readOnly: true,
                    serializedName: "properties.poolAllocationMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "BatchService",
                            "UserSubscription"
                        ]
                    }
                }, keyVaultReference: {
                    readOnly: true,
                    serializedName: "properties.keyVaultReference",
                    type: {
                        name: "Composite",
                        className: "KeyVaultReference"
                    }
                }, autoStorage: {
                    readOnly: true,
                    serializedName: "properties.autoStorage",
                    type: {
                        name: "Composite",
                        className: "AutoStorageProperties"
                    }
                }, dedicatedCoreQuota: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.dedicatedCoreQuota",
                    type: {
                        name: "Number"
                    }
                }, lowPriorityCoreQuota: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lowPriorityCoreQuota",
                    type: {
                        name: "Number"
                    }
                }, poolQuota: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.poolQuota",
                    type: {
                        name: "Number"
                    }
                }, activeJobAndJobScheduleQuota: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.activeJobAndJobScheduleQuota",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var BatchAccountUpdateParameters = {
        serializedName: "BatchAccountUpdateParameters",
        type: {
            name: "Composite",
            className: "BatchAccountUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                autoStorage: {
                    serializedName: "properties.autoStorage",
                    type: {
                        name: "Composite",
                        className: "AutoStorageBaseProperties"
                    }
                }
            }
        }
    };
    var BatchAccountRegenerateKeyParameters = {
        serializedName: "BatchAccountRegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "BatchAccountRegenerateKeyParameters",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary"
                        ]
                    }
                }
            }
        }
    };
    var BatchAccountKeys = {
        serializedName: "BatchAccountKeys",
        type: {
            name: "Composite",
            className: "BatchAccountKeys",
            modelProperties: {
                accountName: {
                    readOnly: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                primary: {
                    readOnly: true,
                    serializedName: "primary",
                    type: {
                        name: "String"
                    }
                },
                secondary: {
                    readOnly: true,
                    serializedName: "secondary",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivateApplicationPackageParameters = {
        serializedName: "ActivateApplicationPackageParameters",
        type: {
            name: "Composite",
            className: "ActivateApplicationPackageParameters",
            modelProperties: {
                format: {
                    required: true,
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationCreateParameters = {
        serializedName: "ApplicationCreateParameters",
        type: {
            name: "Composite",
            className: "ApplicationCreateParameters",
            modelProperties: {
                allowUpdates: {
                    serializedName: "allowUpdates",
                    type: {
                        name: "Boolean"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationPackage = {
        serializedName: "ApplicationPackage",
        type: {
            name: "Composite",
            className: "ApplicationPackage",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Pending",
                            "Active",
                            "Unmapped"
                        ]
                    }
                },
                format: {
                    readOnly: true,
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                },
                storageUrl: {
                    readOnly: true,
                    serializedName: "storageUrl",
                    type: {
                        name: "String"
                    }
                },
                storageUrlExpiry: {
                    readOnly: true,
                    serializedName: "storageUrlExpiry",
                    type: {
                        name: "DateTime"
                    }
                },
                lastActivationTime: {
                    readOnly: true,
                    serializedName: "lastActivationTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Application = {
        serializedName: "Application",
        type: {
            name: "Composite",
            className: "Application",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                packages: {
                    serializedName: "packages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackage"
                            }
                        }
                    }
                },
                allowUpdates: {
                    serializedName: "allowUpdates",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultVersion: {
                    serializedName: "defaultVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationUpdateParameters = {
        serializedName: "ApplicationUpdateParameters",
        type: {
            name: "Composite",
            className: "ApplicationUpdateParameters",
            modelProperties: {
                allowUpdates: {
                    serializedName: "allowUpdates",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultVersion: {
                    serializedName: "defaultVersion",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchLocationQuota = {
        serializedName: "BatchLocationQuota",
        type: {
            name: "Composite",
            className: "BatchLocationQuota",
            modelProperties: {
                accountQuota: {
                    readOnly: true,
                    serializedName: "accountQuota",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateBaseProperties = {
        serializedName: "CertificateBaseProperties",
        type: {
            name: "Composite",
            className: "CertificateBaseProperties",
            modelProperties: {
                thumbprintAlgorithm: {
                    serializedName: "thumbprintAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                format: {
                    nullable: false,
                    serializedName: "format",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Pfx",
                            "Cer"
                        ]
                    }
                }
            }
        }
    };
    var DeleteCertificateError = {
        serializedName: "DeleteCertificateError",
        type: {
            name: "Composite",
            className: "DeleteCertificateError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeleteCertificateError"
                            }
                        }
                    }
                }
            }
        }
    };
    var Certificate = {
        serializedName: "Certificate",
        type: {
            name: "Composite",
            className: "Certificate",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { thumbprintAlgorithm: {
                    serializedName: "properties.thumbprintAlgorithm",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, format: {
                    nullable: false,
                    serializedName: "properties.format",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Pfx",
                            "Cer"
                        ]
                    }
                }, provisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Deleting",
                            "Failed"
                        ]
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, previousProvisioningState: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.previousProvisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Deleting",
                            "Failed"
                        ]
                    }
                }, previousProvisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.previousProvisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, publicData: {
                    readOnly: true,
                    serializedName: "properties.publicData",
                    type: {
                        name: "String"
                    }
                }, deleteCertificateError: {
                    readOnly: true,
                    serializedName: "properties.deleteCertificateError",
                    type: {
                        name: "Composite",
                        className: "DeleteCertificateError"
                    }
                } })
        }
    };
    var CertificateCreateOrUpdateParameters = {
        serializedName: "CertificateCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "CertificateCreateOrUpdateParameters",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { thumbprintAlgorithm: {
                    serializedName: "properties.thumbprintAlgorithm",
                    type: {
                        name: "String"
                    }
                }, thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, format: {
                    nullable: false,
                    serializedName: "properties.format",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Pfx",
                            "Cer"
                        ]
                    }
                }, data: {
                    required: true,
                    serializedName: "properties.data",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CloudServiceConfiguration = {
        serializedName: "CloudServiceConfiguration",
        type: {
            name: "Composite",
            className: "CloudServiceConfiguration",
            modelProperties: {
                osFamily: {
                    required: true,
                    serializedName: "osFamily",
                    type: {
                        name: "String"
                    }
                },
                targetOSVersion: {
                    serializedName: "targetOSVersion",
                    type: {
                        name: "String"
                    }
                },
                currentOSVersion: {
                    serializedName: "currentOSVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageReference = {
        serializedName: "ImageReference",
        type: {
            name: "Composite",
            className: "ImageReference",
            modelProperties: {
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                offer: {
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDisk = {
        serializedName: "OSDisk",
        type: {
            name: "Composite",
            className: "OSDisk",
            modelProperties: {
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                }
            }
        }
    };
    var WindowsConfiguration = {
        serializedName: "WindowsConfiguration",
        type: {
            name: "Composite",
            className: "WindowsConfiguration",
            modelProperties: {
                enableAutomaticUpdates: {
                    serializedName: "enableAutomaticUpdates",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DataDisk = {
        serializedName: "DataDisk",
        type: {
            name: "Composite",
            className: "DataDisk",
            modelProperties: {
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                diskSizeGB: {
                    required: true,
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard_LRS",
                            "Premium_LRS"
                        ]
                    }
                }
            }
        }
    };
    var VirtualMachineConfiguration = {
        serializedName: "VirtualMachineConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineConfiguration",
            modelProperties: {
                imageReference: {
                    required: true,
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "OSDisk"
                    }
                },
                nodeAgentSkuId: {
                    required: true,
                    serializedName: "nodeAgentSkuId",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDisk"
                            }
                        }
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentConfiguration = {
        serializedName: "DeploymentConfiguration",
        type: {
            name: "Composite",
            className: "DeploymentConfiguration",
            modelProperties: {
                cloudServiceConfiguration: {
                    serializedName: "cloudServiceConfiguration",
                    type: {
                        name: "Composite",
                        className: "CloudServiceConfiguration"
                    }
                },
                virtualMachineConfiguration: {
                    serializedName: "virtualMachineConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineConfiguration"
                    }
                }
            }
        }
    };
    var FixedScaleSettings = {
        serializedName: "FixedScaleSettings",
        type: {
            name: "Composite",
            className: "FixedScaleSettings",
            modelProperties: {
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                targetDedicatedNodes: {
                    serializedName: "targetDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetLowPriorityNodes: {
                    serializedName: "targetLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                nodeDeallocationOption: {
                    serializedName: "nodeDeallocationOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Requeue",
                            "Terminate",
                            "TaskCompletion",
                            "RetainedData"
                        ]
                    }
                }
            }
        }
    };
    var AutoScaleSettings = {
        serializedName: "AutoScaleSettings",
        type: {
            name: "Composite",
            className: "AutoScaleSettings",
            modelProperties: {
                formula: {
                    required: true,
                    serializedName: "formula",
                    type: {
                        name: "String"
                    }
                },
                evaluationInterval: {
                    serializedName: "evaluationInterval",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var ScaleSettings = {
        serializedName: "ScaleSettings",
        type: {
            name: "Composite",
            className: "ScaleSettings",
            modelProperties: {
                fixedScale: {
                    serializedName: "fixedScale",
                    type: {
                        name: "Composite",
                        className: "FixedScaleSettings"
                    }
                },
                autoScale: {
                    serializedName: "autoScale",
                    type: {
                        name: "Composite",
                        className: "AutoScaleSettings"
                    }
                }
            }
        }
    };
    var AutoScaleRunError = {
        serializedName: "AutoScaleRunError",
        type: {
            name: "Composite",
            className: "AutoScaleRunError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoScaleRunError"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutoScaleRun = {
        serializedName: "AutoScaleRun",
        type: {
            name: "Composite",
            className: "AutoScaleRun",
            modelProperties: {
                evaluationTime: {
                    required: true,
                    serializedName: "evaluationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "AutoScaleRunError"
                    }
                }
            }
        }
    };
    var NetworkSecurityGroupRule = {
        serializedName: "NetworkSecurityGroupRule",
        type: {
            name: "Composite",
            className: "NetworkSecurityGroupRule",
            modelProperties: {
                priority: {
                    required: true,
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                access: {
                    required: true,
                    serializedName: "access",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow",
                            "Deny"
                        ]
                    }
                },
                sourceAddressPrefix: {
                    required: true,
                    serializedName: "sourceAddressPrefix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundNatPool = {
        serializedName: "InboundNatPool",
        type: {
            name: "Composite",
            className: "InboundNatPool",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    required: true,
                    serializedName: "protocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "TCP",
                            "UDP"
                        ]
                    }
                },
                backendPort: {
                    required: true,
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                },
                frontendPortRangeStart: {
                    required: true,
                    serializedName: "frontendPortRangeStart",
                    type: {
                        name: "Number"
                    }
                },
                frontendPortRangeEnd: {
                    required: true,
                    serializedName: "frontendPortRangeEnd",
                    type: {
                        name: "Number"
                    }
                },
                networkSecurityGroupRules: {
                    serializedName: "networkSecurityGroupRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkSecurityGroupRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var PoolEndpointConfiguration = {
        serializedName: "PoolEndpointConfiguration",
        type: {
            name: "Composite",
            className: "PoolEndpointConfiguration",
            modelProperties: {
                inboundNatPools: {
                    required: true,
                    serializedName: "inboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatPool"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkConfiguration = {
        serializedName: "NetworkConfiguration",
        type: {
            name: "Composite",
            className: "NetworkConfiguration",
            modelProperties: {
                subnetId: {
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                },
                endpointConfiguration: {
                    serializedName: "endpointConfiguration",
                    type: {
                        name: "Composite",
                        className: "PoolEndpointConfiguration"
                    }
                }
            }
        }
    };
    var TaskSchedulingPolicy = {
        serializedName: "TaskSchedulingPolicy",
        type: {
            name: "Composite",
            className: "TaskSchedulingPolicy",
            modelProperties: {
                nodeFillType: {
                    required: true,
                    serializedName: "nodeFillType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Spread",
                            "Pack"
                        ]
                    }
                }
            }
        }
    };
    var LinuxUserConfiguration = {
        serializedName: "LinuxUserConfiguration",
        type: {
            name: "Composite",
            className: "LinuxUserConfiguration",
            modelProperties: {
                uid: {
                    serializedName: "uid",
                    type: {
                        name: "Number"
                    }
                },
                gid: {
                    serializedName: "gid",
                    type: {
                        name: "Number"
                    }
                },
                sshPrivateKey: {
                    serializedName: "sshPrivateKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserAccount = {
        serializedName: "UserAccount",
        type: {
            name: "Composite",
            className: "UserAccount",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                elevationLevel: {
                    serializedName: "elevationLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NonAdmin",
                            "Admin"
                        ]
                    }
                },
                linuxUserConfiguration: {
                    serializedName: "linuxUserConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxUserConfiguration"
                    }
                }
            }
        }
    };
    var MetadataItem = {
        serializedName: "MetadataItem",
        type: {
            name: "Composite",
            className: "MetadataItem",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceFile = {
        serializedName: "ResourceFile",
        type: {
            name: "Composite",
            className: "ResourceFile",
            modelProperties: {
                blobSource: {
                    required: true,
                    serializedName: "blobSource",
                    type: {
                        name: "String"
                    }
                },
                filePath: {
                    required: true,
                    serializedName: "filePath",
                    type: {
                        name: "String"
                    }
                },
                fileMode: {
                    serializedName: "fileMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnvironmentSetting = {
        serializedName: "EnvironmentSetting",
        type: {
            name: "Composite",
            className: "EnvironmentSetting",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoUserSpecification = {
        serializedName: "AutoUserSpecification",
        type: {
            name: "Composite",
            className: "AutoUserSpecification",
            modelProperties: {
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Task",
                            "Pool"
                        ]
                    }
                },
                elevationLevel: {
                    serializedName: "elevationLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NonAdmin",
                            "Admin"
                        ]
                    }
                }
            }
        }
    };
    var UserIdentity = {
        serializedName: "UserIdentity",
        type: {
            name: "Composite",
            className: "UserIdentity",
            modelProperties: {
                userName: {
                    serializedName: "userName",
                    type: {
                        name: "String"
                    }
                },
                autoUser: {
                    serializedName: "autoUser",
                    type: {
                        name: "Composite",
                        className: "AutoUserSpecification"
                    }
                }
            }
        }
    };
    var StartTask = {
        serializedName: "StartTask",
        type: {
            name: "Composite",
            className: "StartTask",
            modelProperties: {
                commandLine: {
                    serializedName: "commandLine",
                    type: {
                        name: "String"
                    }
                },
                resourceFiles: {
                    serializedName: "resourceFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceFile"
                            }
                        }
                    }
                },
                environmentSettings: {
                    serializedName: "environmentSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentSetting"
                            }
                        }
                    }
                },
                userIdentity: {
                    serializedName: "userIdentity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                },
                maxTaskRetryCount: {
                    serializedName: "maxTaskRetryCount",
                    type: {
                        name: "Number"
                    }
                },
                waitForSuccess: {
                    serializedName: "waitForSuccess",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CertificateReference = {
        serializedName: "CertificateReference",
        type: {
            name: "Composite",
            className: "CertificateReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                storeLocation: {
                    serializedName: "storeLocation",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "CurrentUser",
                            "LocalMachine"
                        ]
                    }
                },
                storeName: {
                    serializedName: "storeName",
                    type: {
                        name: "String"
                    }
                },
                visibility: {
                    serializedName: "visibility",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "StartTask",
                                    "Task",
                                    "RemoteUser"
                                ]
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationPackageReference = {
        serializedName: "ApplicationPackageReference",
        type: {
            name: "Composite",
            className: "ApplicationPackageReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResizeError = {
        serializedName: "ResizeError",
        type: {
            name: "Composite",
            className: "ResizeError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResizeError"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResizeOperationStatus = {
        serializedName: "ResizeOperationStatus",
        type: {
            name: "Composite",
            className: "ResizeOperationStatus",
            modelProperties: {
                targetDedicatedNodes: {
                    serializedName: "targetDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                },
                targetLowPriorityNodes: {
                    serializedName: "targetLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                },
                resizeTimeout: {
                    serializedName: "resizeTimeout",
                    type: {
                        name: "TimeSpan"
                    }
                },
                nodeDeallocationOption: {
                    serializedName: "nodeDeallocationOption",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Requeue",
                            "Terminate",
                            "TaskCompletion",
                            "RetainedData"
                        ]
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResizeError"
                            }
                        }
                    }
                }
            }
        }
    };
    var Pool = {
        serializedName: "Pool",
        type: {
            name: "Composite",
            className: "Pool",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, lastModified: {
                    readOnly: true,
                    serializedName: "properties.lastModified",
                    type: {
                        name: "DateTime"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Deleting"
                        ]
                    }
                }, provisioningStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.provisioningStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, allocationState: {
                    readOnly: true,
                    serializedName: "properties.allocationState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Steady",
                            "Resizing",
                            "Stopping"
                        ]
                    }
                }, allocationStateTransitionTime: {
                    readOnly: true,
                    serializedName: "properties.allocationStateTransitionTime",
                    type: {
                        name: "DateTime"
                    }
                }, vmSize: {
                    serializedName: "properties.vmSize",
                    type: {
                        name: "String"
                    }
                }, deploymentConfiguration: {
                    serializedName: "properties.deploymentConfiguration",
                    type: {
                        name: "Composite",
                        className: "DeploymentConfiguration"
                    }
                }, currentDedicatedNodes: {
                    readOnly: true,
                    serializedName: "properties.currentDedicatedNodes",
                    type: {
                        name: "Number"
                    }
                }, currentLowPriorityNodes: {
                    readOnly: true,
                    serializedName: "properties.currentLowPriorityNodes",
                    type: {
                        name: "Number"
                    }
                }, scaleSettings: {
                    serializedName: "properties.scaleSettings",
                    type: {
                        name: "Composite",
                        className: "ScaleSettings"
                    }
                }, autoScaleRun: {
                    readOnly: true,
                    serializedName: "properties.autoScaleRun",
                    type: {
                        name: "Composite",
                        className: "AutoScaleRun"
                    }
                }, interNodeCommunication: {
                    serializedName: "properties.interNodeCommunication",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, networkConfiguration: {
                    serializedName: "properties.networkConfiguration",
                    type: {
                        name: "Composite",
                        className: "NetworkConfiguration"
                    }
                }, maxTasksPerNode: {
                    serializedName: "properties.maxTasksPerNode",
                    type: {
                        name: "Number"
                    }
                }, taskSchedulingPolicy: {
                    serializedName: "properties.taskSchedulingPolicy",
                    type: {
                        name: "Composite",
                        className: "TaskSchedulingPolicy"
                    }
                }, userAccounts: {
                    serializedName: "properties.userAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserAccount"
                            }
                        }
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetadataItem"
                            }
                        }
                    }
                }, startTask: {
                    serializedName: "properties.startTask",
                    type: {
                        name: "Composite",
                        className: "StartTask"
                    }
                }, certificates: {
                    serializedName: "properties.certificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateReference"
                            }
                        }
                    }
                }, applicationPackages: {
                    serializedName: "properties.applicationPackages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationPackageReference"
                            }
                        }
                    }
                }, applicationLicenses: {
                    serializedName: "properties.applicationLicenses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, resizeOperationStatus: {
                    readOnly: true,
                    serializedName: "properties.resizeOperationStatus",
                    type: {
                        name: "Composite",
                        className: "ResizeOperationStatus"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityParameters = {
        serializedName: "CheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.Batch/batchAccounts',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchAccountCreateHeaders = {
        serializedName: "batchaccount-create-headers",
        type: {
            name: "Composite",
            className: "BatchAccountCreateHeaders",
            modelProperties: {
                locationHeader: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BatchAccountDeleteHeaders = {
        serializedName: "batchaccount-delete-headers",
        type: {
            name: "Composite",
            className: "BatchAccountDeleteHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CertificateCreateHeaders = {
        serializedName: "certificate-create-headers",
        type: {
            name: "Composite",
            className: "CertificateCreateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateUpdateHeaders = {
        serializedName: "certificate-update-headers",
        type: {
            name: "Composite",
            className: "CertificateUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateDeleteHeaders = {
        serializedName: "certificate-delete-headers",
        type: {
            name: "Composite",
            className: "CertificateDeleteHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CertificateGetHeaders = {
        serializedName: "certificate-get-headers",
        type: {
            name: "Composite",
            className: "CertificateGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateCancelDeletionHeaders = {
        serializedName: "certificate-canceldeletion-headers",
        type: {
            name: "Composite",
            className: "CertificateCancelDeletionHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolCreateHeaders = {
        serializedName: "pool-create-headers",
        type: {
            name: "Composite",
            className: "PoolCreateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolUpdateHeaders = {
        serializedName: "pool-update-headers",
        type: {
            name: "Composite",
            className: "PoolUpdateHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolDeleteHeaders = {
        serializedName: "pool-delete-headers",
        type: {
            name: "Composite",
            className: "PoolDeleteHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                retryAfter: {
                    serializedName: "retry-after",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PoolGetHeaders = {
        serializedName: "pool-get-headers",
        type: {
            name: "Composite",
            className: "PoolGetHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolDisableAutoScaleHeaders = {
        serializedName: "pool-disableautoscale-headers",
        type: {
            name: "Composite",
            className: "PoolDisableAutoScaleHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PoolStopResizeHeaders = {
        serializedName: "pool-stopresize-headers",
        type: {
            name: "Composite",
            className: "PoolStopResizeHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BatchAccountListResult = {
        serializedName: "BatchAccountListResult",
        type: {
            name: "Composite",
            className: "BatchAccountListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchAccount"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListApplicationsResult = {
        serializedName: "ListApplicationsResult",
        type: {
            name: "Composite",
            className: "ListApplicationsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Application"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListCertificatesResult = {
        serializedName: "ListCertificatesResult",
        type: {
            name: "Composite",
            className: "ListCertificatesResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Certificate"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListPoolsResult = {
        serializedName: "ListPoolsResult",
        type: {
            name: "Composite",
            className: "ListPoolsResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Pool"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        AutoStorageBaseProperties: AutoStorageBaseProperties,
        KeyVaultReference: KeyVaultReference,
        BatchAccountCreateParameters: BatchAccountCreateParameters,
        AutoStorageProperties: AutoStorageProperties,
        Resource: Resource,
        BatchAccount: BatchAccount,
        BatchAccountUpdateParameters: BatchAccountUpdateParameters,
        BatchAccountRegenerateKeyParameters: BatchAccountRegenerateKeyParameters,
        BatchAccountKeys: BatchAccountKeys,
        ActivateApplicationPackageParameters: ActivateApplicationPackageParameters,
        ApplicationCreateParameters: ApplicationCreateParameters,
        ApplicationPackage: ApplicationPackage,
        Application: Application,
        ApplicationUpdateParameters: ApplicationUpdateParameters,
        BatchLocationQuota: BatchLocationQuota,
        ProxyResource: ProxyResource,
        CertificateBaseProperties: CertificateBaseProperties,
        DeleteCertificateError: DeleteCertificateError,
        Certificate: Certificate,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        CloudServiceConfiguration: CloudServiceConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        DeploymentConfiguration: DeploymentConfiguration,
        FixedScaleSettings: FixedScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        ScaleSettings: ScaleSettings,
        AutoScaleRunError: AutoScaleRunError,
        AutoScaleRun: AutoScaleRun,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        InboundNatPool: InboundNatPool,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        NetworkConfiguration: NetworkConfiguration,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        LinuxUserConfiguration: LinuxUserConfiguration,
        UserAccount: UserAccount,
        MetadataItem: MetadataItem,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        AutoUserSpecification: AutoUserSpecification,
        UserIdentity: UserIdentity,
        StartTask: StartTask,
        CertificateReference: CertificateReference,
        ApplicationPackageReference: ApplicationPackageReference,
        ResizeError: ResizeError,
        ResizeOperationStatus: ResizeOperationStatus,
        Pool: Pool,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        BatchAccountCreateHeaders: BatchAccountCreateHeaders,
        BatchAccountDeleteHeaders: BatchAccountDeleteHeaders,
        CertificateCreateHeaders: CertificateCreateHeaders,
        CertificateUpdateHeaders: CertificateUpdateHeaders,
        CertificateDeleteHeaders: CertificateDeleteHeaders,
        CertificateGetHeaders: CertificateGetHeaders,
        CertificateCancelDeletionHeaders: CertificateCancelDeletionHeaders,
        PoolCreateHeaders: PoolCreateHeaders,
        PoolUpdateHeaders: PoolUpdateHeaders,
        PoolDeleteHeaders: PoolDeleteHeaders,
        PoolGetHeaders: PoolGetHeaders,
        PoolDisableAutoScaleHeaders: PoolDisableAutoScaleHeaders,
        PoolStopResizeHeaders: PoolStopResizeHeaders,
        BatchAccountListResult: BatchAccountListResult,
        ListApplicationsResult: ListApplicationsResult,
        OperationListResult: OperationListResult,
        ListCertificatesResult: ListCertificatesResult,
        ListPoolsResult: ListPoolsResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        BatchAccountCreateParameters: BatchAccountCreateParameters,
        AutoStorageBaseProperties: AutoStorageBaseProperties,
        KeyVaultReference: KeyVaultReference,
        BatchAccount: BatchAccount,
        Resource: Resource,
        BaseResource: BaseResource,
        AutoStorageProperties: AutoStorageProperties,
        BatchAccountCreateHeaders: BatchAccountCreateHeaders,
        CloudError: CloudError,
        BatchAccountUpdateParameters: BatchAccountUpdateParameters,
        BatchAccountDeleteHeaders: BatchAccountDeleteHeaders,
        BatchAccountListResult: BatchAccountListResult,
        BatchAccountRegenerateKeyParameters: BatchAccountRegenerateKeyParameters,
        BatchAccountKeys: BatchAccountKeys,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        DeleteCertificateError: DeleteCertificateError,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        Pool: Pool,
        DeploymentConfiguration: DeploymentConfiguration,
        CloudServiceConfiguration: CloudServiceConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ScaleSettings: ScaleSettings,
        FixedScaleSettings: FixedScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        AutoScaleRun: AutoScaleRun,
        AutoScaleRunError: AutoScaleRunError,
        NetworkConfiguration: NetworkConfiguration,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        InboundNatPool: InboundNatPool,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        UserAccount: UserAccount,
        LinuxUserConfiguration: LinuxUserConfiguration,
        MetadataItem: MetadataItem,
        StartTask: StartTask,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        CertificateReference: CertificateReference,
        ApplicationPackageReference: ApplicationPackageReference,
        ResizeOperationStatus: ResizeOperationStatus,
        ResizeError: ResizeError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            constraints: {
                MaxLength: 24,
                MinLength: 3,
                Pattern: /^[-\w\._]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var applicationId = {
        parameterPath: "applicationId",
        mapper: {
            required: true,
            serializedName: "applicationId",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            constraints: {
                MaxLength: 45,
                MinLength: 5,
                Pattern: /^[\w]+-[\w]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifNoneMatch = {
        parameterPath: [
            "options",
            "ifNoneMatch"
        ],
        mapper: {
            serializedName: "If-None-Match",
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var maxresults = {
        parameterPath: [
            "options",
            "maxresults"
        ],
        mapper: {
            serializedName: "maxresults",
            type: {
                name: "Number"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var poolName = {
        parameterPath: "poolName",
        mapper: {
            required: true,
            serializedName: "poolName",
            constraints: {
                MaxLength: 64,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9_-]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var version = {
        parameterPath: "version",
        mapper: {
            required: true,
            serializedName: "version",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BatchAccountOperations. */
    var BatchAccountOperations = /** @class */ (function () {
        /**
         * Create a BatchAccountOperations.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function BatchAccountOperations(client) {
            this.client = client;
        }
        /**
         * Creates a new Batch account with the specified parameters. Existing accounts cannot be updated
         * with this API and should instead be updated with the Update Batch Account API.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName A name for the Batch account which must be unique within the region. Batch
         * account names must be between 3 and 24 characters in length and must use only numbers and
         * lowercase letters. This name is used as part of the DNS name that is used to access the Batch
         * service in the region in which the account is created. For example:
         * http://accountname.region.batch.azure.com/.
         * @param parameters Additional parameters for account creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.BatchAccountCreateResponse>
         */
        BatchAccountOperations.prototype.create = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        BatchAccountOperations.prototype.update = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes the specified Batch account.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param [options] The optional parameters
         * @returns Promise<Models.BatchAccountDeleteResponse>
         */
        BatchAccountOperations.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        BatchAccountOperations.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        BatchAccountOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        BatchAccountOperations.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        BatchAccountOperations.prototype.synchronizeAutoStorageKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, synchronizeAutoStorageKeysOperationSpec, callback);
        };
        BatchAccountOperations.prototype.regenerateKey = function (resourceGroupName$$1, accountName$$1, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                keyName: keyName,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        BatchAccountOperations.prototype.getKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getKeysOperationSpec, callback);
        };
        /**
         * Creates a new Batch account with the specified parameters. Existing accounts cannot be updated
         * with this API and should instead be updated with the Update Batch Account API.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName A name for the Batch account which must be unique within the region. Batch
         * account names must be between 3 and 24 characters in length and must use only numbers and
         * lowercase letters. This name is used as part of the DNS name that is used to access the Batch
         * service in the region in which the account is created. For example:
         * http://accountname.region.batch.azure.com/.
         * @param parameters Additional parameters for account creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BatchAccountOperations.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes the specified Batch account.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BatchAccountOperations.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        BatchAccountOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        BatchAccountOperations.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return BatchAccountOperations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BatchAccountUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BatchAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Batch/batchAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var synchronizeAutoStorageKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/syncAutoStorageKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/regenerateKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                keyName: "keyName"
            },
            mapper: __assign({}, BatchAccountRegenerateKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BatchAccountKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/listKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchAccountKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BatchAccountCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BatchAccount,
                headersMapper: BatchAccountCreateHeaders
            },
            202: {
                headersMapper: BatchAccountCreateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: BatchAccountDeleteHeaders
            },
            202: {
                headersMapper: BatchAccountDeleteHeaders
            },
            204: {
                headersMapper: BatchAccountDeleteHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ActivateApplicationPackageParameters: ActivateApplicationPackageParameters,
        CloudError: CloudError,
        ApplicationPackage: ApplicationPackage
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApplicationPackageOperations. */
    var ApplicationPackageOperations = /** @class */ (function () {
        /**
         * Create a ApplicationPackageOperations.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function ApplicationPackageOperations(client) {
            this.client = client;
        }
        ApplicationPackageOperations.prototype.activate = function (resourceGroupName$$1, accountName$$1, applicationId$$1, version$$1, format, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                version: version$$1,
                format: format,
                options: options
            }, activateOperationSpec, callback);
        };
        ApplicationPackageOperations.prototype.create = function (resourceGroupName$$1, accountName$$1, applicationId$$1, version$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                version: version$$1,
                options: options
            }, createOperationSpec, callback);
        };
        ApplicationPackageOperations.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, applicationId$$1, version$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                version: version$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        ApplicationPackageOperations.prototype.get = function (resourceGroupName$$1, accountName$$1, applicationId$$1, version$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                version: version$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        return ApplicationPackageOperations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var activateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}/activate",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                format: "format"
            },
            mapper: __assign({}, ActivateApplicationPackageParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            201: {
                bodyMapper: ApplicationPackage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationPackage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ApplicationCreateParameters: ApplicationCreateParameters,
        Application: Application,
        ApplicationPackage: ApplicationPackage,
        CloudError: CloudError,
        ApplicationUpdateParameters: ApplicationUpdateParameters,
        ListApplicationsResult: ListApplicationsResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ApplicationOperations. */
    var ApplicationOperations = /** @class */ (function () {
        /**
         * Create a ApplicationOperations.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function ApplicationOperations(client) {
            this.client = client;
        }
        ApplicationOperations.prototype.create = function (resourceGroupName$$1, accountName$$1, applicationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                options: options
            }, createOperationSpec$1, callback);
        };
        ApplicationOperations.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, applicationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ApplicationOperations.prototype.get = function (resourceGroupName$$1, accountName$$1, applicationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        ApplicationOperations.prototype.update = function (resourceGroupName$$1, accountName$$1, applicationId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                applicationId: applicationId$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ApplicationOperations.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        ApplicationOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ApplicationOperations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: ApplicationCreateParameters
        },
        responses: {
            201: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Application
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}",
        urlParameters: [
            resourceGroupName,
            accountName,
            applicationId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ApplicationUpdateParameters, { required: true })
        },
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            maxresults,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListApplicationsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListApplicationsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        BatchLocationQuota: BatchLocationQuota,
        CloudError: CloudError,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Location. */
    var Location = /** @class */ (function () {
        /**
         * Create a Location.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function Location(client) {
            this.client = client;
        }
        Location.prototype.getQuotas = function (locationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                options: options
            }, getQuotasOperationSpec, callback);
        };
        Location.prototype.checkNameAvailability = function (locationName$$1, name, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                name: name,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        return Location;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getQuotasOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/quotas",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchLocationQuota
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/checkNameAvailability",
        urlParameters: [
            locationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign({}, CheckNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Batch/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ListCertificatesResult: ListCertificatesResult,
        Certificate: Certificate,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        DeleteCertificateError: DeleteCertificateError,
        CloudError: CloudError,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        CertificateCreateHeaders: CertificateCreateHeaders,
        CertificateUpdateHeaders: CertificateUpdateHeaders,
        CertificateDeleteHeaders: CertificateDeleteHeaders,
        CertificateGetHeaders: CertificateGetHeaders,
        CertificateCancelDeletionHeaders: CertificateCancelDeletionHeaders,
        Resource: Resource,
        Pool: Pool,
        DeploymentConfiguration: DeploymentConfiguration,
        CloudServiceConfiguration: CloudServiceConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ScaleSettings: ScaleSettings,
        FixedScaleSettings: FixedScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        AutoScaleRun: AutoScaleRun,
        AutoScaleRunError: AutoScaleRunError,
        NetworkConfiguration: NetworkConfiguration,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        InboundNatPool: InboundNatPool,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        UserAccount: UserAccount,
        LinuxUserConfiguration: LinuxUserConfiguration,
        MetadataItem: MetadataItem,
        StartTask: StartTask,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        CertificateReference: CertificateReference,
        ApplicationPackageReference: ApplicationPackageReference,
        ResizeOperationStatus: ResizeOperationStatus,
        ResizeError: ResizeError,
        BatchAccount: BatchAccount,
        KeyVaultReference: KeyVaultReference,
        AutoStorageProperties: AutoStorageProperties,
        AutoStorageBaseProperties: AutoStorageBaseProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CertificateOperations. */
    var CertificateOperations = /** @class */ (function () {
        /**
         * Create a CertificateOperations.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function CertificateOperations(client) {
            this.client = client;
        }
        CertificateOperations.prototype.listByBatchAccount = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listByBatchAccountOperationSpec, callback);
        };
        /**
         * Creates a new certificate inside the specified account.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param certificateName The identifier for the certificate. This must be made up of algorithm and
         * thumbprint separated by a dash, and must match the certificate data in the request. For example
         * SHA1-a3d1c5.
         * @param parameters Additional parameters for certificate creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.CertificateCreateResponse>
         */
        CertificateOperations.prototype.create = function (resourceGroupName$$1, accountName$$1, certificateName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, certificateName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CertificateOperations.prototype.update = function (resourceGroupName$$1, accountName$$1, certificateName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                certificateName: certificateName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        /**
         * Deletes the specified certificate.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param certificateName The identifier for the certificate. This must be made up of algorithm and
         * thumbprint separated by a dash, and must match the certificate data in the request. For example
         * SHA1-a3d1c5.
         * @param [options] The optional parameters
         * @returns Promise<Models.CertificateDeleteResponse>
         */
        CertificateOperations.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, certificateName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, certificateName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CertificateOperations.prototype.get = function (resourceGroupName$$1, accountName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        CertificateOperations.prototype.cancelDeletion = function (resourceGroupName$$1, accountName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, cancelDeletionOperationSpec, callback);
        };
        /**
         * Creates a new certificate inside the specified account.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param certificateName The identifier for the certificate. This must be made up of algorithm and
         * thumbprint separated by a dash, and must match the certificate data in the request. For example
         * SHA1-a3d1c5.
         * @param parameters Additional parameters for certificate creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CertificateOperations.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, certificateName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                certificateName: certificateName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        /**
         * Deletes the specified certificate.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param certificateName The identifier for the certificate. This must be made up of algorithm and
         * thumbprint separated by a dash, and must match the certificate data in the request. For example
         * SHA1-a3d1c5.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CertificateOperations.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, certificateName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        CertificateOperations.prototype.listByBatchAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBatchAccountNextOperationSpec, callback);
        };
        return CertificateOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listByBatchAccountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            maxresults,
            select,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListCertificatesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CertificateCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Certificate,
                headersMapper: CertificateUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Certificate,
                headersMapper: CertificateGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var cancelDeletionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}/cancelDelete",
        urlParameters: [
            resourceGroupName,
            accountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Certificate,
                headersMapper: CertificateCancelDeletionHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CertificateCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Certificate,
                headersMapper: CertificateCreateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: CertificateDeleteHeaders
            },
            202: {
                headersMapper: CertificateDeleteHeaders
            },
            204: {
                headersMapper: CertificateDeleteHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listByBatchAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListCertificatesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        ListPoolsResult: ListPoolsResult,
        Pool: Pool,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        DeploymentConfiguration: DeploymentConfiguration,
        CloudServiceConfiguration: CloudServiceConfiguration,
        VirtualMachineConfiguration: VirtualMachineConfiguration,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        WindowsConfiguration: WindowsConfiguration,
        DataDisk: DataDisk,
        ScaleSettings: ScaleSettings,
        FixedScaleSettings: FixedScaleSettings,
        AutoScaleSettings: AutoScaleSettings,
        AutoScaleRun: AutoScaleRun,
        AutoScaleRunError: AutoScaleRunError,
        NetworkConfiguration: NetworkConfiguration,
        PoolEndpointConfiguration: PoolEndpointConfiguration,
        InboundNatPool: InboundNatPool,
        NetworkSecurityGroupRule: NetworkSecurityGroupRule,
        TaskSchedulingPolicy: TaskSchedulingPolicy,
        UserAccount: UserAccount,
        LinuxUserConfiguration: LinuxUserConfiguration,
        MetadataItem: MetadataItem,
        StartTask: StartTask,
        ResourceFile: ResourceFile,
        EnvironmentSetting: EnvironmentSetting,
        UserIdentity: UserIdentity,
        AutoUserSpecification: AutoUserSpecification,
        CertificateReference: CertificateReference,
        ApplicationPackageReference: ApplicationPackageReference,
        ResizeOperationStatus: ResizeOperationStatus,
        ResizeError: ResizeError,
        CloudError: CloudError,
        PoolCreateHeaders: PoolCreateHeaders,
        PoolUpdateHeaders: PoolUpdateHeaders,
        PoolDeleteHeaders: PoolDeleteHeaders,
        PoolGetHeaders: PoolGetHeaders,
        PoolDisableAutoScaleHeaders: PoolDisableAutoScaleHeaders,
        PoolStopResizeHeaders: PoolStopResizeHeaders,
        Resource: Resource,
        Certificate: Certificate,
        DeleteCertificateError: DeleteCertificateError,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        BatchAccount: BatchAccount,
        KeyVaultReference: KeyVaultReference,
        AutoStorageProperties: AutoStorageProperties,
        AutoStorageBaseProperties: AutoStorageBaseProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PoolOperations. */
    var PoolOperations = /** @class */ (function () {
        /**
         * Create a PoolOperations.
         * @param {BatchManagementClientContext} client Reference to the service client.
         */
        function PoolOperations(client) {
            this.client = client;
        }
        PoolOperations.prototype.listByBatchAccount = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listByBatchAccountOperationSpec$1, callback);
        };
        /**
         * Creates a new pool inside the specified account.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param poolName The pool name. This must be unique within the account.
         * @param parameters Additional parameters for pool creation.
         * @param [options] The optional parameters
         * @returns Promise<Models.PoolCreateResponse>
         */
        PoolOperations.prototype.create = function (resourceGroupName$$1, accountName$$1, poolName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, poolName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PoolOperations.prototype.update = function (resourceGroupName$$1, accountName$$1, poolName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                poolName: poolName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$3, callback);
        };
        /**
         * Deletes the specified pool.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param poolName The pool name. This must be unique within the account.
         * @param [options] The optional parameters
         * @returns Promise<Models.PoolDeleteResponse>
         */
        PoolOperations.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, poolName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, poolName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        PoolOperations.prototype.get = function (resourceGroupName$$1, accountName$$1, poolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                poolName: poolName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        PoolOperations.prototype.disableAutoScale = function (resourceGroupName$$1, accountName$$1, poolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                poolName: poolName$$1,
                options: options
            }, disableAutoScaleOperationSpec, callback);
        };
        PoolOperations.prototype.stopResize = function (resourceGroupName$$1, accountName$$1, poolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                poolName: poolName$$1,
                options: options
            }, stopResizeOperationSpec, callback);
        };
        /**
         * Creates a new pool inside the specified account.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param poolName The pool name. This must be unique within the account.
         * @param parameters Additional parameters for pool creation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PoolOperations.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, poolName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                poolName: poolName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$2, options);
        };
        /**
         * Deletes the specified pool.
         * @param resourceGroupName The name of the resource group that contains the Batch account.
         * @param accountName The name of the Batch account.
         * @param poolName The pool name. This must be unique within the account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        PoolOperations.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, poolName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                poolName: poolName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        PoolOperations.prototype.listByBatchAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBatchAccountNextOperationSpec$1, callback);
        };
        return PoolOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByBatchAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            maxresults,
            select,
            filter,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListPoolsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            poolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Pool, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Pool,
                headersMapper: PoolUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            poolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Pool,
                headersMapper: PoolGetHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var disableAutoScaleOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/disableAutoScale",
        urlParameters: [
            resourceGroupName,
            accountName,
            poolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Pool,
                headersMapper: PoolDisableAutoScaleHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var stopResizeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/stopResize",
        urlParameters: [
            resourceGroupName,
            accountName,
            poolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Pool,
                headersMapper: PoolStopResizeHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            poolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch,
            ifNoneMatch,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Pool, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Pool,
                headersMapper: PoolCreateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            poolName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                headersMapper: PoolDeleteHeaders
            },
            202: {
                headersMapper: PoolDeleteHeaders
            },
            204: {
                headersMapper: PoolDeleteHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByBatchAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListPoolsResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-batch";
    var packageVersion = "1.0.0";
    var BatchManagementClientContext = /** @class */ (function (_super) {
        __extends(BatchManagementClientContext, _super);
        /**
         * Initializes a new instance of the BatchManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
         * 00000000-0000-0000-0000-000000000000)
         * @param [options] The parameter options
         */
        function BatchManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-09-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return BatchManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var BatchManagementClient = /** @class */ (function (_super) {
        __extends(BatchManagementClient, _super);
        /**
         * Initializes a new instance of the BatchManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
         * 00000000-0000-0000-0000-000000000000)
         * @param [options] The parameter options
         */
        function BatchManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.batchAccount = new BatchAccountOperations(_this);
            _this.applicationPackage = new ApplicationPackageOperations(_this);
            _this.application = new ApplicationOperations(_this);
            _this.location = new Location(_this);
            _this.operations = new Operations(_this);
            _this.certificate = new CertificateOperations(_this);
            _this.pool = new PoolOperations(_this);
            return _this;
        }
        return BatchManagementClient;
    }(BatchManagementClientContext));

    exports.BatchManagementClient = BatchManagementClient;
    exports.BatchManagementClientContext = BatchManagementClientContext;
    exports.BatchManagementModels = index;
    exports.BatchManagementMappers = mappers;
    exports.BatchAccountOperations = BatchAccountOperations;
    exports.ApplicationPackageOperations = ApplicationPackageOperations;
    exports.ApplicationOperations = ApplicationOperations;
    exports.Location = Location;
    exports.Operations = Operations;
    exports.CertificateOperations = CertificateOperations;
    exports.PoolOperations = PoolOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-batch.js.map
