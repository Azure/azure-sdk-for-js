/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesSpellcheck = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ErrorType.
     * Possible values include: 'UnknownToken', 'RepeatedToken'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ErrorType = <ErrorType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ErrorType;
    (function (ErrorType) {
        ErrorType["UnknownToken"] = "UnknownToken";
        ErrorType["RepeatedToken"] = "RepeatedToken";
    })(ErrorType || (ErrorType = {}));
    /**
     * Defines values for ErrorCode.
     * Possible values include: 'None', 'ServerError', 'InvalidRequest',
     * 'RateLimitExceeded', 'InvalidAuthorization', 'InsufficientAuthorization'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ErrorCode = <ErrorCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode["None"] = "None";
        ErrorCode["ServerError"] = "ServerError";
        ErrorCode["InvalidRequest"] = "InvalidRequest";
        ErrorCode["RateLimitExceeded"] = "RateLimitExceeded";
        ErrorCode["InvalidAuthorization"] = "InvalidAuthorization";
        ErrorCode["InsufficientAuthorization"] = "InsufficientAuthorization";
    })(ErrorCode || (ErrorCode = {}));
    /**
     * Defines values for ErrorSubCode.
     * Possible values include: 'UnexpectedError', 'ResourceError',
     * 'NotImplemented', 'ParameterMissing', 'ParameterInvalidValue',
     * 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
     * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ErrorSubCode =
     * <ErrorSubCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ErrorSubCode;
    (function (ErrorSubCode) {
        ErrorSubCode["UnexpectedError"] = "UnexpectedError";
        ErrorSubCode["ResourceError"] = "ResourceError";
        ErrorSubCode["NotImplemented"] = "NotImplemented";
        ErrorSubCode["ParameterMissing"] = "ParameterMissing";
        ErrorSubCode["ParameterInvalidValue"] = "ParameterInvalidValue";
        ErrorSubCode["HttpNotAllowed"] = "HttpNotAllowed";
        ErrorSubCode["Blocked"] = "Blocked";
        ErrorSubCode["AuthorizationMissing"] = "AuthorizationMissing";
        ErrorSubCode["AuthorizationRedundancy"] = "AuthorizationRedundancy";
        ErrorSubCode["AuthorizationDisabled"] = "AuthorizationDisabled";
        ErrorSubCode["AuthorizationExpired"] = "AuthorizationExpired";
    })(ErrorSubCode || (ErrorSubCode = {}));
    /**
     * Defines values for ActionType.
     * Possible values include: 'Edit', 'Load'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ActionType = <ActionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ActionType;
    (function (ActionType) {
        ActionType["Edit"] = "Edit";
        ActionType["Load"] = "Load";
    })(ActionType || (ActionType = {}));
    /**
     * Defines values for Mode.
     * Possible values include: 'proof', 'spell'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Mode = <Mode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Mode;
    (function (Mode) {
        Mode["Proof"] = "proof";
        Mode["Spell"] = "spell";
    })(Mode || (Mode = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ErrorType () { return ErrorType; },
        get ErrorCode () { return ErrorCode; },
        get ErrorSubCode () { return ErrorSubCode; },
        get ActionType () { return ActionType; },
        get Mode () { return Mode; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SpellingTokenSuggestion = {
        serializedName: "Spelling/TokenSuggestion",
        type: {
            name: "Composite",
            className: "SpellingTokenSuggestion",
            modelProperties: {
                suggestion: {
                    required: true,
                    serializedName: "suggestion",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    readOnly: true,
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                pingUrlSuffix: {
                    readOnly: true,
                    serializedName: "pingUrlSuffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SpellingFlaggedToken = {
        serializedName: "Spelling/FlaggedToken",
        type: {
            name: "Composite",
            className: "SpellingFlaggedToken",
            modelProperties: {
                offset: {
                    required: true,
                    serializedName: "offset",
                    type: {
                        name: "Number"
                    }
                },
                token: {
                    required: true,
                    serializedName: "token",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    defaultValue: 'UnknownToken',
                    type: {
                        name: "String"
                    }
                },
                suggestions: {
                    readOnly: true,
                    serializedName: "suggestions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SpellingTokenSuggestion"
                            }
                        }
                    }
                },
                pingUrlSuffix: {
                    readOnly: true,
                    serializedName: "pingUrlSuffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseBase = {
        serializedName: "ResponseBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "_type",
                clientName: "_type"
            },
            uberParent: "ResponseBase",
            className: "ResponseBase",
            modelProperties: {
                _type: {
                    required: true,
                    serializedName: "_type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identifiable = {
        serializedName: "Identifiable",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Identifiable",
            modelProperties: __assign({}, ResponseBase.type.modelProperties, { id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Response = {
        serializedName: "Response",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Response",
            modelProperties: __assign({}, Identifiable.type.modelProperties)
        }
    };
    var Answer = {
        serializedName: "Answer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "Answer",
            modelProperties: __assign({}, Response.type.modelProperties)
        }
    };
    var SpellCheck = {
        serializedName: "SpellCheck",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "SpellCheck",
            modelProperties: __assign({}, Answer.type.modelProperties, { flaggedTokens: {
                    required: true,
                    serializedName: "flaggedTokens",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SpellingFlaggedToken"
                            }
                        }
                    }
                } })
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    defaultValue: 'None',
                    type: {
                        name: "String"
                    }
                },
                subCode: {
                    readOnly: true,
                    serializedName: "subCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                moreDetails: {
                    readOnly: true,
                    serializedName: "moreDetails",
                    type: {
                        name: "String"
                    }
                },
                parameter: {
                    readOnly: true,
                    serializedName: "parameter",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ResponseBase.type.polymorphicDiscriminator,
            uberParent: "ResponseBase",
            className: "ErrorResponse",
            modelProperties: __assign({}, Response.type.modelProperties, { errors: {
                    required: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorModel"
                            }
                        }
                    }
                } })
        }
    };
    var discriminators = {
        'ResponseBase.SpellCheck': SpellCheck,
        'ResponseBase.Answer': Answer,
        'ResponseBase.Response': Response,
        'ResponseBase.Identifiable': Identifiable,
        'ResponseBase.ErrorResponse': ErrorResponse,
        'ResponseBase': ResponseBase
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        SpellingTokenSuggestion: SpellingTokenSuggestion,
        SpellingFlaggedToken: SpellingFlaggedToken,
        ResponseBase: ResponseBase,
        Identifiable: Identifiable,
        Response: Response,
        Answer: Answer,
        SpellCheck: SpellCheck,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: [
            "options",
            "acceptLanguage"
        ],
        mapper: {
            serializedName: "Accept-Language",
            type: {
                name: "String"
            }
        }
    };
    var actionType = {
        parameterPath: [
            "options",
            "actionType"
        ],
        mapper: {
            serializedName: "ActionType",
            type: {
                name: "String"
            }
        }
    };
    var appName = {
        parameterPath: [
            "options",
            "appName"
        ],
        mapper: {
            serializedName: "AppName",
            type: {
                name: "String"
            }
        }
    };
    var clientId = {
        parameterPath: [
            "options",
            "clientId"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientID",
            type: {
                name: "String"
            }
        }
    };
    var clientIp = {
        parameterPath: [
            "options",
            "clientIp"
        ],
        mapper: {
            serializedName: "X-MSEdge-ClientIP",
            type: {
                name: "String"
            }
        }
    };
    var clientMachineName = {
        parameterPath: [
            "options",
            "clientMachineName"
        ],
        mapper: {
            serializedName: "ClientMachineName",
            type: {
                name: "String"
            }
        }
    };
    var countryCode = {
        parameterPath: [
            "options",
            "countryCode"
        ],
        mapper: {
            serializedName: "cc",
            type: {
                name: "String"
            }
        }
    };
    var docId = {
        parameterPath: [
            "options",
            "docId"
        ],
        mapper: {
            serializedName: "DocId",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: [
            "options",
            "location"
        ],
        mapper: {
            serializedName: "X-Search-Location",
            type: {
                name: "String"
            }
        }
    };
    var market = {
        parameterPath: [
            "options",
            "market"
        ],
        mapper: {
            serializedName: "mkt",
            type: {
                name: "String"
            }
        }
    };
    var mode = {
        parameterPath: [
            "options",
            "mode"
        ],
        mapper: {
            serializedName: "Mode",
            type: {
                name: "String"
            }
        }
    };
    var postContextText = {
        parameterPath: [
            "options",
            "postContextText"
        ],
        mapper: {
            serializedName: "PostContextText",
            type: {
                name: "String"
            }
        }
    };
    var pragma = {
        parameterPath: [
            "options",
            "pragma"
        ],
        mapper: {
            serializedName: "Pragma",
            type: {
                name: "String"
            }
        }
    };
    var preContextText = {
        parameterPath: [
            "options",
            "preContextText"
        ],
        mapper: {
            serializedName: "PreContextText",
            type: {
                name: "String"
            }
        }
    };
    var sessionId = {
        parameterPath: [
            "options",
            "sessionId"
        ],
        mapper: {
            serializedName: "SessionId",
            type: {
                name: "String"
            }
        }
    };
    var setLang = {
        parameterPath: [
            "options",
            "setLang"
        ],
        mapper: {
            serializedName: "SetLang",
            type: {
                name: "String"
            }
        }
    };
    var text = {
        parameterPath: "text",
        mapper: {
            required: true,
            serializedName: "Text",
            type: {
                name: "String"
            }
        }
    };
    var userAgent = {
        parameterPath: [
            "options",
            "userAgent"
        ],
        mapper: {
            serializedName: "User-Agent",
            type: {
                name: "String"
            }
        }
    };
    var userId = {
        parameterPath: [
            "options",
            "userId"
        ],
        mapper: {
            serializedName: "UserId",
            type: {
                name: "String"
            }
        }
    };
    var xBingApisSDK = {
        parameterPath: "xBingApisSDK",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "X-BingApis-SDK",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-spellcheck";
    var packageVersion = "1.0.0";
    var SpellCheckAPIClientContext = /** @class */ (function (_super) {
        __extends(SpellCheckAPIClientContext, _super);
        /**
         * Initializes a new instance of the SpellCheckAPIClientContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function SpellCheckAPIClientContext(credentials, options) {
            var _this = this;
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = options.baseUri || _this.baseUri || "https://api.cognitive.microsoft.com";
            _this.requestContentType = "application/x-www-form-urlencoded";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return SpellCheckAPIClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SpellCheckAPIClient = /** @class */ (function (_super) {
        __extends(SpellCheckAPIClient, _super);
        /**
         * Initializes a new instance of the SpellCheckAPIClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function SpellCheckAPIClient(credentials, options) {
            return _super.call(this, credentials, options) || this;
        }
        SpellCheckAPIClient.prototype.spellChecker = function (text$$1, options, callback) {
            return this.sendOperationRequest({
                text: text$$1,
                options: options
            }, spellCheckerOperationSpec, callback);
        };
        return SpellCheckAPIClient;
    }(SpellCheckAPIClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var spellCheckerOperationSpec = {
        httpMethod: "POST",
        path: "bing/v7.0/spellcheck",
        queryParameters: [
            actionType,
            appName,
            countryCode,
            clientMachineName,
            docId,
            market,
            sessionId,
            setLang,
            userId
        ],
        headerParameters: [
            xBingApisSDK,
            acceptLanguage,
            pragma,
            userAgent,
            clientId,
            clientIp,
            location
        ],
        formDataParameters: [
            mode,
            preContextText,
            postContextText,
            text
        ],
        contentType: "application/x-www-form-urlencoded",
        responses: {
            200: {
                bodyMapper: SpellCheck
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    exports.SpellCheckAPIClient = SpellCheckAPIClient;
    exports.SpellCheckAPIClientContext = SpellCheckAPIClientContext;
    exports.SpellCheckAPIModels = index;
    exports.SpellCheckAPIMappers = Mappers;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-spellcheck.js.map
