/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmFrontdoor = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for FrontDoorResourceState.
     * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
     * 'Disabled', 'Deleting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorResourceState =
     * <FrontDoorResourceState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorResourceState;
    (function (FrontDoorResourceState) {
        FrontDoorResourceState["Creating"] = "Creating";
        FrontDoorResourceState["Enabling"] = "Enabling";
        FrontDoorResourceState["Enabled"] = "Enabled";
        FrontDoorResourceState["Disabling"] = "Disabling";
        FrontDoorResourceState["Disabled"] = "Disabled";
        FrontDoorResourceState["Deleting"] = "Deleting";
    })(FrontDoorResourceState || (FrontDoorResourceState = {}));
    /**
     * Defines values for CustomHttpsProvisioningState.
     * Possible values include: 'Enabling', 'Enabled', 'Disabling', 'Disabled',
     * 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CustomHttpsProvisioningState =
     * <CustomHttpsProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CustomHttpsProvisioningState;
    (function (CustomHttpsProvisioningState) {
        CustomHttpsProvisioningState["Enabling"] = "Enabling";
        CustomHttpsProvisioningState["Enabled"] = "Enabled";
        CustomHttpsProvisioningState["Disabling"] = "Disabling";
        CustomHttpsProvisioningState["Disabled"] = "Disabled";
        CustomHttpsProvisioningState["Failed"] = "Failed";
    })(CustomHttpsProvisioningState || (CustomHttpsProvisioningState = {}));
    /**
     * Defines values for CustomHttpsProvisioningSubstate.
     * Possible values include: 'SubmittingDomainControlValidationRequest',
     * 'PendingDomainControlValidationREquestApproval',
     * 'DomainControlValidationRequestApproved',
     * 'DomainControlValidationRequestRejected',
     * 'DomainControlValidationRequestTimedOut', 'IssuingCertificate',
     * 'DeployingCertificate', 'CertificateDeployed', 'DeletingCertificate',
     * 'CertificateDeleted'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CustomHttpsProvisioningSubstate =
     * <CustomHttpsProvisioningSubstate>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CustomHttpsProvisioningSubstate;
    (function (CustomHttpsProvisioningSubstate) {
        CustomHttpsProvisioningSubstate["SubmittingDomainControlValidationRequest"] = "SubmittingDomainControlValidationRequest";
        CustomHttpsProvisioningSubstate["PendingDomainControlValidationREquestApproval"] = "PendingDomainControlValidationREquestApproval";
        CustomHttpsProvisioningSubstate["DomainControlValidationRequestApproved"] = "DomainControlValidationRequestApproved";
        CustomHttpsProvisioningSubstate["DomainControlValidationRequestRejected"] = "DomainControlValidationRequestRejected";
        CustomHttpsProvisioningSubstate["DomainControlValidationRequestTimedOut"] = "DomainControlValidationRequestTimedOut";
        CustomHttpsProvisioningSubstate["IssuingCertificate"] = "IssuingCertificate";
        CustomHttpsProvisioningSubstate["DeployingCertificate"] = "DeployingCertificate";
        CustomHttpsProvisioningSubstate["CertificateDeployed"] = "CertificateDeployed";
        CustomHttpsProvisioningSubstate["DeletingCertificate"] = "DeletingCertificate";
        CustomHttpsProvisioningSubstate["CertificateDeleted"] = "CertificateDeleted";
    })(CustomHttpsProvisioningSubstate || (CustomHttpsProvisioningSubstate = {}));
    /**
     * Defines values for FrontDoorCertificateSource.
     * Possible values include: 'AzureKeyVault', 'FrontDoor'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorCertificateSource =
     * <FrontDoorCertificateSource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorCertificateSource;
    (function (FrontDoorCertificateSource) {
        FrontDoorCertificateSource["AzureKeyVault"] = "AzureKeyVault";
        FrontDoorCertificateSource["FrontDoor"] = "FrontDoor";
    })(FrontDoorCertificateSource || (FrontDoorCertificateSource = {}));
    /**
     * Defines values for FrontDoorTlsProtocolType.
     * Possible values include: 'ServerNameIndication'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorTlsProtocolType =
     * <FrontDoorTlsProtocolType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorTlsProtocolType;
    (function (FrontDoorTlsProtocolType) {
        FrontDoorTlsProtocolType["ServerNameIndication"] = "ServerNameIndication";
    })(FrontDoorTlsProtocolType || (FrontDoorTlsProtocolType = {}));
    /**
     * Defines values for FrontDoorCertificateType.
     * Possible values include: 'Dedicated'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorCertificateType =
     * <FrontDoorCertificateType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorCertificateType;
    (function (FrontDoorCertificateType) {
        FrontDoorCertificateType["Dedicated"] = "Dedicated";
    })(FrontDoorCertificateType || (FrontDoorCertificateType = {}));
    /**
     * Defines values for FrontDoorEnabledState.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorEnabledState =
     * <FrontDoorEnabledState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorEnabledState;
    (function (FrontDoorEnabledState) {
        FrontDoorEnabledState["Enabled"] = "Enabled";
        FrontDoorEnabledState["Disabled"] = "Disabled";
    })(FrontDoorEnabledState || (FrontDoorEnabledState = {}));
    /**
     * Defines values for FrontDoorProtocol.
     * Possible values include: 'Http', 'Https'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorProtocol =
     * <FrontDoorProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorProtocol;
    (function (FrontDoorProtocol) {
        FrontDoorProtocol["Http"] = "Http";
        FrontDoorProtocol["Https"] = "Https";
    })(FrontDoorProtocol || (FrontDoorProtocol = {}));
    /**
     * Defines values for FrontDoorForwardingProtocol.
     * Possible values include: 'HttpOnly', 'HttpsOnly', 'MatchRequest'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorForwardingProtocol =
     * <FrontDoorForwardingProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorForwardingProtocol;
    (function (FrontDoorForwardingProtocol) {
        FrontDoorForwardingProtocol["HttpOnly"] = "HttpOnly";
        FrontDoorForwardingProtocol["HttpsOnly"] = "HttpsOnly";
        FrontDoorForwardingProtocol["MatchRequest"] = "MatchRequest";
    })(FrontDoorForwardingProtocol || (FrontDoorForwardingProtocol = {}));
    /**
     * Defines values for FrontDoorQuery.
     * Possible values include: 'StripNone', 'StripAll'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FrontDoorQuery =
     * <FrontDoorQuery>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FrontDoorQuery;
    (function (FrontDoorQuery) {
        FrontDoorQuery["StripNone"] = "StripNone";
        FrontDoorQuery["StripAll"] = "StripAll";
    })(FrontDoorQuery || (FrontDoorQuery = {}));
    /**
     * Defines values for DynamicCompressionEnabled.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DynamicCompressionEnabled =
     * <DynamicCompressionEnabled>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DynamicCompressionEnabled;
    (function (DynamicCompressionEnabled) {
        DynamicCompressionEnabled["Enabled"] = "Enabled";
        DynamicCompressionEnabled["Disabled"] = "Disabled";
    })(DynamicCompressionEnabled || (DynamicCompressionEnabled = {}));
    /**
     * Defines values for SessionAffinityEnabledState.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SessionAffinityEnabledState =
     * <SessionAffinityEnabledState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SessionAffinityEnabledState;
    (function (SessionAffinityEnabledState) {
        SessionAffinityEnabledState["Enabled"] = "Enabled";
        SessionAffinityEnabledState["Disabled"] = "Disabled";
    })(SessionAffinityEnabledState || (SessionAffinityEnabledState = {}));
    /**
     * Defines values for ResourceType.
     * Possible values include: 'Microsoft.Network/frontDoors',
     * 'Microsoft.Network/frontDoors/frontendEndpoints'
     * @readonly
     * @enum {string}
     */
    var ResourceType;
    (function (ResourceType) {
        ResourceType["MicrosoftNetworkfrontDoors"] = "Microsoft.Network/frontDoors";
        ResourceType["MicrosoftNetworkfrontDoorsfrontendEndpoints"] = "Microsoft.Network/frontDoors/frontendEndpoints";
    })(ResourceType || (ResourceType = {}));
    /**
     * Defines values for Availability.
     * Possible values include: 'Available', 'Unavailable'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Availability =
     * <Availability>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Availability;
    (function (Availability) {
        Availability["Available"] = "Available";
        Availability["Unavailable"] = "Unavailable";
    })(Availability || (Availability = {}));
    /**
     * Defines values for NetworkOperationStatus.
     * Possible values include: 'InProgress', 'Succeeded', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NetworkOperationStatus =
     * <NetworkOperationStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NetworkOperationStatus;
    (function (NetworkOperationStatus) {
        NetworkOperationStatus["InProgress"] = "InProgress";
        NetworkOperationStatus["Succeeded"] = "Succeeded";
        NetworkOperationStatus["Failed"] = "Failed";
    })(NetworkOperationStatus || (NetworkOperationStatus = {}));
    /**
     * Defines values for EnabledState.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EnabledState =
     * <EnabledState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EnabledState;
    (function (EnabledState) {
        EnabledState["Disabled"] = "Disabled";
        EnabledState["Enabled"] = "Enabled";
    })(EnabledState || (EnabledState = {}));
    /**
     * Defines values for Mode.
     * Possible values include: 'Prevention', 'Detection'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Mode = <Mode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Mode;
    (function (Mode) {
        Mode["Prevention"] = "Prevention";
        Mode["Detection"] = "Detection";
    })(Mode || (Mode = {}));
    /**
     * Defines values for RuleType.
     * Possible values include: 'MatchRule', 'RateLimitRule'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RuleType = <RuleType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RuleType;
    (function (RuleType) {
        RuleType["MatchRule"] = "MatchRule";
        RuleType["RateLimitRule"] = "RateLimitRule";
    })(RuleType || (RuleType = {}));
    /**
     * Defines values for MatchCondition.
     * Possible values include: 'RemoteAddr', 'RequestMethod', 'QueryString',
     * 'PostArgs', 'RequestUri', 'RequestHeader', 'RequestBody'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MatchCondition =
     * <MatchCondition>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MatchCondition;
    (function (MatchCondition) {
        MatchCondition["RemoteAddr"] = "RemoteAddr";
        MatchCondition["RequestMethod"] = "RequestMethod";
        MatchCondition["QueryString"] = "QueryString";
        MatchCondition["PostArgs"] = "PostArgs";
        MatchCondition["RequestUri"] = "RequestUri";
        MatchCondition["RequestHeader"] = "RequestHeader";
        MatchCondition["RequestBody"] = "RequestBody";
    })(MatchCondition || (MatchCondition = {}));
    /**
     * Defines values for Operator.
     * Possible values include: 'Any', 'IPMatch', 'GeoMatch', 'Equal', 'Contains',
     * 'LessThan', 'GreaterThan', 'LessThanOrEqual', 'GreaterThanOrEqual',
     * 'BeginsWith', 'EndsWith'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Operator = <Operator>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Operator;
    (function (Operator) {
        Operator["Any"] = "Any";
        Operator["IPMatch"] = "IPMatch";
        Operator["GeoMatch"] = "GeoMatch";
        Operator["Equal"] = "Equal";
        Operator["Contains"] = "Contains";
        Operator["LessThan"] = "LessThan";
        Operator["GreaterThan"] = "GreaterThan";
        Operator["LessThanOrEqual"] = "LessThanOrEqual";
        Operator["GreaterThanOrEqual"] = "GreaterThanOrEqual";
        Operator["BeginsWith"] = "BeginsWith";
        Operator["EndsWith"] = "EndsWith";
    })(Operator || (Operator = {}));
    /**
     * Defines values for Action.
     * Possible values include: 'Allow', 'Block', 'Log'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Action = <Action>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Action;
    (function (Action) {
        Action["Allow"] = "Allow";
        Action["Block"] = "Block";
        Action["Log"] = "Log";
    })(Action || (Action = {}));
    /**
     * Defines values for Transform.
     * Possible values include: 'Lowercase', 'Uppercase', 'Trim', 'UrlDecode',
     * 'UrlEncode', 'RemoveNulls', 'HtmlEntityDecode'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Transform = <Transform>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Transform;
    (function (Transform) {
        Transform["Lowercase"] = "Lowercase";
        Transform["Uppercase"] = "Uppercase";
        Transform["Trim"] = "Trim";
        Transform["UrlDecode"] = "UrlDecode";
        Transform["UrlEncode"] = "UrlEncode";
        Transform["RemoveNulls"] = "RemoveNulls";
        Transform["HtmlEntityDecode"] = "HtmlEntityDecode";
    })(Transform || (Transform = {}));
    /**
     * Defines values for WebApplicationFirewallPolicy.
     * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
     * 'Disabled', 'Deleting'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WebApplicationFirewallPolicy =
     * <WebApplicationFirewallPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WebApplicationFirewallPolicy;
    (function (WebApplicationFirewallPolicy) {
        WebApplicationFirewallPolicy["Creating"] = "Creating";
        WebApplicationFirewallPolicy["Enabling"] = "Enabling";
        WebApplicationFirewallPolicy["Enabled"] = "Enabled";
        WebApplicationFirewallPolicy["Disabling"] = "Disabling";
        WebApplicationFirewallPolicy["Disabled"] = "Disabled";
        WebApplicationFirewallPolicy["Deleting"] = "Deleting";
    })(WebApplicationFirewallPolicy || (WebApplicationFirewallPolicy = {}));
    /**
     * Defines values for RuleGroupOverride.
     * Possible values include: 'SqlInjection', 'XSS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RuleGroupOverride =
     * <RuleGroupOverride>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RuleGroupOverride;
    (function (RuleGroupOverride) {
        RuleGroupOverride["SqlInjection"] = "SqlInjection";
        RuleGroupOverride["XSS"] = "XSS";
    })(RuleGroupOverride || (RuleGroupOverride = {}));

    var index = /*#__PURE__*/Object.freeze({
        get FrontDoorResourceState () { return FrontDoorResourceState; },
        get CustomHttpsProvisioningState () { return CustomHttpsProvisioningState; },
        get CustomHttpsProvisioningSubstate () { return CustomHttpsProvisioningSubstate; },
        get FrontDoorCertificateSource () { return FrontDoorCertificateSource; },
        get FrontDoorTlsProtocolType () { return FrontDoorTlsProtocolType; },
        get FrontDoorCertificateType () { return FrontDoorCertificateType; },
        get FrontDoorEnabledState () { return FrontDoorEnabledState; },
        get FrontDoorProtocol () { return FrontDoorProtocol; },
        get FrontDoorForwardingProtocol () { return FrontDoorForwardingProtocol; },
        get FrontDoorQuery () { return FrontDoorQuery; },
        get DynamicCompressionEnabled () { return DynamicCompressionEnabled; },
        get SessionAffinityEnabledState () { return SessionAffinityEnabledState; },
        get ResourceType () { return ResourceType; },
        get Availability () { return Availability; },
        get NetworkOperationStatus () { return NetworkOperationStatus; },
        get EnabledState () { return EnabledState; },
        get Mode () { return Mode; },
        get RuleType () { return RuleType; },
        get MatchCondition () { return MatchCondition; },
        get Operator () { return Operator; },
        get Action () { return Action; },
        get Transform () { return Transform; },
        get WebApplicationFirewallPolicy () { return WebApplicationFirewallPolicy; },
        get RuleGroupOverride () { return RuleGroupOverride; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var FrontDoorUpdateParameters = {
        serializedName: "FrontDoorUpdateParameters",
        type: {
            name: "Composite",
            className: "FrontDoorUpdateParameters",
            modelProperties: {
                friendlyName: {
                    serializedName: "friendlyName",
                    type: {
                        name: "String"
                    }
                },
                routingRules: {
                    serializedName: "routingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingRule"
                            }
                        }
                    }
                },
                loadBalancingSettings: {
                    serializedName: "loadBalancingSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancingSettingsModel"
                            }
                        }
                    }
                },
                healthProbeSettings: {
                    serializedName: "healthProbeSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthProbeSettingsModel"
                            }
                        }
                    }
                },
                backendPools: {
                    serializedName: "backendPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendPool"
                            }
                        }
                    }
                },
                frontendEndpoints: {
                    serializedName: "frontendEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FrontendEndpoint"
                            }
                        }
                    }
                },
                enabledState: {
                    serializedName: "enabledState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FrontDoorProperties = {
        serializedName: "FrontDoorProperties",
        type: {
            name: "Composite",
            className: "FrontDoorProperties",
            modelProperties: __assign({}, FrontDoorUpdateParameters.type.modelProperties, { resourceState: {
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }, cname: {
                    readOnly: true,
                    serializedName: "cname",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var FrontDoor = {
        serializedName: "FrontDoor",
        type: {
            name: "Composite",
            className: "FrontDoor",
            modelProperties: __assign({}, Resource.type.modelProperties, { friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, routingRules: {
                    serializedName: "properties.routingRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingRule"
                            }
                        }
                    }
                }, loadBalancingSettings: {
                    serializedName: "properties.loadBalancingSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancingSettingsModel"
                            }
                        }
                    }
                }, healthProbeSettings: {
                    serializedName: "properties.healthProbeSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthProbeSettingsModel"
                            }
                        }
                    }
                }, backendPools: {
                    serializedName: "properties.backendPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendPool"
                            }
                        }
                    }
                }, frontendEndpoints: {
                    serializedName: "properties.frontendEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FrontendEndpoint"
                            }
                        }
                    }
                }, enabledState: {
                    serializedName: "properties.enabledState",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, cname: {
                    readOnly: true,
                    serializedName: "properties.cname",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RoutingRuleUpdateParameters = {
        serializedName: "RoutingRuleUpdateParameters",
        type: {
            name: "Composite",
            className: "RoutingRuleUpdateParameters",
            modelProperties: {
                frontendEndpoints: {
                    serializedName: "frontendEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                },
                acceptedProtocols: {
                    serializedName: "acceptedProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                patternsToMatch: {
                    serializedName: "patternsToMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                customForwardingPath: {
                    serializedName: "customForwardingPath",
                    type: {
                        name: "String"
                    }
                },
                forwardingProtocol: {
                    serializedName: "forwardingProtocol",
                    type: {
                        name: "String"
                    }
                },
                cacheConfiguration: {
                    serializedName: "cacheConfiguration",
                    type: {
                        name: "Composite",
                        className: "CacheConfiguration"
                    }
                },
                backendPool: {
                    serializedName: "backendPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                enabledState: {
                    serializedName: "enabledState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingRuleProperties = {
        serializedName: "RoutingRuleProperties",
        type: {
            name: "Composite",
            className: "RoutingRuleProperties",
            modelProperties: __assign({}, RoutingRuleUpdateParameters.type.modelProperties, { resourceState: {
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingRule = {
        serializedName: "RoutingRule",
        type: {
            name: "Composite",
            className: "RoutingRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { frontendEndpoints: {
                    serializedName: "properties.frontendEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, acceptedProtocols: {
                    serializedName: "properties.acceptedProtocols",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, patternsToMatch: {
                    serializedName: "properties.patternsToMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, customForwardingPath: {
                    serializedName: "properties.customForwardingPath",
                    type: {
                        name: "String"
                    }
                }, forwardingProtocol: {
                    serializedName: "properties.forwardingProtocol",
                    type: {
                        name: "String"
                    }
                }, cacheConfiguration: {
                    serializedName: "properties.cacheConfiguration",
                    type: {
                        name: "Composite",
                        className: "CacheConfiguration"
                    }
                }, backendPool: {
                    serializedName: "properties.backendPool",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, enabledState: {
                    serializedName: "properties.enabledState",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LoadBalancingSettingsUpdateParameters = {
        serializedName: "LoadBalancingSettingsUpdateParameters",
        type: {
            name: "Composite",
            className: "LoadBalancingSettingsUpdateParameters",
            modelProperties: {
                sampleSize: {
                    serializedName: "sampleSize",
                    type: {
                        name: "Number"
                    }
                },
                successfulSamplesRequired: {
                    serializedName: "successfulSamplesRequired",
                    type: {
                        name: "Number"
                    }
                },
                additionalLatencyMilliseconds: {
                    serializedName: "additionalLatencyMilliseconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LoadBalancingSettingsProperties = {
        serializedName: "LoadBalancingSettingsProperties",
        type: {
            name: "Composite",
            className: "LoadBalancingSettingsProperties",
            modelProperties: __assign({}, LoadBalancingSettingsUpdateParameters.type.modelProperties, { resourceState: {
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LoadBalancingSettingsModel = {
        serializedName: "LoadBalancingSettingsModel",
        type: {
            name: "Composite",
            className: "LoadBalancingSettingsModel",
            modelProperties: __assign({}, SubResource.type.modelProperties, { sampleSize: {
                    serializedName: "properties.sampleSize",
                    type: {
                        name: "Number"
                    }
                }, successfulSamplesRequired: {
                    serializedName: "properties.successfulSamplesRequired",
                    type: {
                        name: "Number"
                    }
                }, additionalLatencyMilliseconds: {
                    serializedName: "properties.additionalLatencyMilliseconds",
                    type: {
                        name: "Number"
                    }
                }, resourceState: {
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HealthProbeSettingsUpdateParameters = {
        serializedName: "HealthProbeSettingsUpdateParameters",
        type: {
            name: "Composite",
            className: "HealthProbeSettingsUpdateParameters",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                intervalInSeconds: {
                    serializedName: "intervalInSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HealthProbeSettingsProperties = {
        serializedName: "HealthProbeSettingsProperties",
        type: {
            name: "Composite",
            className: "HealthProbeSettingsProperties",
            modelProperties: __assign({}, HealthProbeSettingsUpdateParameters.type.modelProperties, { resourceState: {
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var HealthProbeSettingsModel = {
        serializedName: "HealthProbeSettingsModel",
        type: {
            name: "Composite",
            className: "HealthProbeSettingsModel",
            modelProperties: __assign({}, SubResource.type.modelProperties, { path: {
                    serializedName: "properties.path",
                    type: {
                        name: "String"
                    }
                }, protocol: {
                    serializedName: "properties.protocol",
                    type: {
                        name: "String"
                    }
                }, intervalInSeconds: {
                    serializedName: "properties.intervalInSeconds",
                    type: {
                        name: "Number"
                    }
                }, resourceState: {
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BackendPoolUpdateParameters = {
        serializedName: "BackendPoolUpdateParameters",
        type: {
            name: "Composite",
            className: "BackendPoolUpdateParameters",
            modelProperties: {
                backends: {
                    serializedName: "backends",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Backend"
                            }
                        }
                    }
                },
                loadBalancingSettings: {
                    serializedName: "loadBalancingSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                healthProbeSettings: {
                    serializedName: "healthProbeSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var BackendPoolProperties = {
        serializedName: "BackendPoolProperties",
        type: {
            name: "Composite",
            className: "BackendPoolProperties",
            modelProperties: __assign({}, BackendPoolUpdateParameters.type.modelProperties, { resourceState: {
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var BackendPool = {
        serializedName: "BackendPool",
        type: {
            name: "Composite",
            className: "BackendPool",
            modelProperties: __assign({}, SubResource.type.modelProperties, { backends: {
                    serializedName: "properties.backends",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Backend"
                            }
                        }
                    }
                }, loadBalancingSettings: {
                    serializedName: "properties.loadBalancingSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, healthProbeSettings: {
                    serializedName: "properties.healthProbeSettings",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, resourceState: {
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var KeyVaultCertificateSourceParametersVault = {
        serializedName: "KeyVaultCertificateSourceParameters_vault",
        type: {
            name: "Composite",
            className: "KeyVaultCertificateSourceParametersVault",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultCertificateSourceParameters = {
        serializedName: "KeyVaultCertificateSourceParameters",
        type: {
            name: "Composite",
            className: "KeyVaultCertificateSourceParameters",
            modelProperties: {
                vault: {
                    serializedName: "vault",
                    type: {
                        name: "Composite",
                        className: "KeyVaultCertificateSourceParametersVault"
                    }
                },
                secretName: {
                    serializedName: "secretName",
                    type: {
                        name: "String"
                    }
                },
                secretVersion: {
                    serializedName: "secretVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FrontDoorCertificateSourceParameters = {
        serializedName: "FrontDoorCertificateSourceParameters",
        type: {
            name: "Composite",
            className: "FrontDoorCertificateSourceParameters",
            modelProperties: {
                certificateType: {
                    serializedName: "certificateType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomHttpsConfiguration = {
        serializedName: "CustomHttpsConfiguration",
        type: {
            name: "Composite",
            className: "CustomHttpsConfiguration",
            modelProperties: {
                certificateSource: {
                    serializedName: "certificateSource",
                    type: {
                        name: "String"
                    }
                },
                protocolType: {
                    serializedName: "protocolType",
                    type: {
                        name: "String"
                    }
                },
                vault: {
                    serializedName: "keyVaultCertificateSourceParameters.vault",
                    type: {
                        name: "Composite",
                        className: "KeyVaultCertificateSourceParametersVault"
                    }
                },
                secretName: {
                    serializedName: "keyVaultCertificateSourceParameters.secretName",
                    type: {
                        name: "String"
                    }
                },
                secretVersion: {
                    serializedName: "keyVaultCertificateSourceParameters.secretVersion",
                    type: {
                        name: "String"
                    }
                },
                certificateType: {
                    serializedName: "frontDoorCertificateSourceParameters.certificateType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FrontendEndpointUpdateParameters = {
        serializedName: "FrontendEndpointUpdateParameters",
        type: {
            name: "Composite",
            className: "FrontendEndpointUpdateParameters",
            modelProperties: {
                hostName: {
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                },
                sessionAffinityEnabledState: {
                    serializedName: "sessionAffinityEnabledState",
                    type: {
                        name: "String"
                    }
                },
                sessionAffinityTtlSeconds: {
                    serializedName: "sessionAffinityTtlSeconds",
                    type: {
                        name: "Number"
                    }
                },
                webApplicationFirewallPolicyLink: {
                    serializedName: "webApplicationFirewallPolicyLink",
                    type: {
                        name: "Composite",
                        className: "FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink"
                    }
                }
            }
        }
    };
    var FrontendEndpointProperties = {
        serializedName: "FrontendEndpointProperties",
        type: {
            name: "Composite",
            className: "FrontendEndpointProperties",
            modelProperties: __assign({}, FrontendEndpointUpdateParameters.type.modelProperties, { resourceState: {
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                }, customHttpsProvisioningState: {
                    readOnly: true,
                    serializedName: "customHttpsProvisioningState",
                    type: {
                        name: "String"
                    }
                }, customHttpsProvisioningSubstate: {
                    readOnly: true,
                    serializedName: "customHttpsProvisioningSubstate",
                    type: {
                        name: "String"
                    }
                }, customHttpsConfiguration: {
                    readOnly: true,
                    serializedName: "customHttpsConfiguration",
                    type: {
                        name: "Composite",
                        className: "CustomHttpsConfiguration"
                    }
                } })
        }
    };
    var FrontendEndpoint = {
        serializedName: "FrontendEndpoint",
        type: {
            name: "Composite",
            className: "FrontendEndpoint",
            modelProperties: __assign({}, SubResource.type.modelProperties, { hostName: {
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, sessionAffinityEnabledState: {
                    serializedName: "properties.sessionAffinityEnabledState",
                    type: {
                        name: "String"
                    }
                }, sessionAffinityTtlSeconds: {
                    serializedName: "properties.sessionAffinityTtlSeconds",
                    type: {
                        name: "Number"
                    }
                }, webApplicationFirewallPolicyLink: {
                    serializedName: "properties.webApplicationFirewallPolicyLink",
                    type: {
                        name: "Composite",
                        className: "FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink"
                    }
                }, resourceState: {
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, customHttpsProvisioningState: {
                    readOnly: true,
                    serializedName: "properties.customHttpsProvisioningState",
                    type: {
                        name: "String"
                    }
                }, customHttpsProvisioningSubstate: {
                    readOnly: true,
                    serializedName: "properties.customHttpsProvisioningSubstate",
                    type: {
                        name: "String"
                    }
                }, customHttpsConfiguration: {
                    readOnly: true,
                    serializedName: "properties.customHttpsConfiguration",
                    type: {
                        name: "Composite",
                        className: "CustomHttpsConfiguration"
                    }
                }, name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PurgeParameters = {
        serializedName: "PurgeParameters",
        type: {
            name: "Composite",
            className: "PurgeParameters",
            modelProperties: {
                contentPaths: {
                    required: true,
                    serializedName: "contentPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CacheConfiguration = {
        serializedName: "CacheConfiguration",
        type: {
            name: "Composite",
            className: "CacheConfiguration",
            modelProperties: {
                queryParameterStripDirective: {
                    serializedName: "queryParameterStripDirective",
                    type: {
                        name: "String"
                    }
                },
                dynamicCompression: {
                    serializedName: "dynamicCompression",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Backend = {
        serializedName: "Backend",
        type: {
            name: "Composite",
            className: "Backend",
            modelProperties: {
                address: {
                    serializedName: "address",
                    type: {
                        name: "String"
                    }
                },
                httpPort: {
                    serializedName: "httpPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                httpsPort: {
                    serializedName: "httpsPort",
                    constraints: {
                        InclusiveMaximum: 65535,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                enabledState: {
                    serializedName: "enabledState",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    constraints: {
                        InclusiveMaximum: 5,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                weight: {
                    serializedName: "weight",
                    constraints: {
                        InclusiveMaximum: 1000,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                backendHostHeader: {
                    serializedName: "backendHostHeader",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink = {
        serializedName: "FrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink",
        type: {
            name: "Composite",
            className: "FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateCustomDomainInput = {
        serializedName: "ValidateCustomDomainInput",
        type: {
            name: "Composite",
            className: "ValidateCustomDomainInput",
            modelProperties: {
                hostName: {
                    required: true,
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateCustomDomainOutput = {
        serializedName: "ValidateCustomDomainOutput",
        type: {
            name: "Composite",
            className: "ValidateCustomDomainOutput",
            modelProperties: {
                customDomainValidated: {
                    readOnly: true,
                    serializedName: "customDomainValidated",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityInput = {
        serializedName: "CheckNameAvailabilityInput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityInput",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Microsoft.Network/frontDoors",
                            "Microsoft.Network/frontDoors/frontendEndpoints"
                        ]
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityOutput = {
        serializedName: "CheckNameAvailabilityOutput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityOutput",
            modelProperties: {
                nameAvailability: {
                    readOnly: true,
                    serializedName: "nameAvailability",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetails"
                            }
                        }
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureAsyncOperationResult = {
        serializedName: "AzureAsyncOperationResult",
        type: {
            name: "Composite",
            className: "AzureAsyncOperationResult",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var TagsObject = {
        serializedName: "TagsObject",
        type: {
            name: "Composite",
            className: "TagsObject",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PolicySettings = {
        serializedName: "policySettings",
        type: {
            name: "Composite",
            className: "PolicySettings",
            modelProperties: {
                enabledState: {
                    serializedName: "enabledState",
                    type: {
                        name: "String"
                    }
                },
                mode: {
                    serializedName: "mode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MatchCondition1 = {
        serializedName: "MatchCondition",
        type: {
            name: "Composite",
            className: "MatchCondition1",
            modelProperties: {
                matchVariable: {
                    required: true,
                    serializedName: "matchVariable",
                    type: {
                        name: "String"
                    }
                },
                selector: {
                    serializedName: "selector",
                    type: {
                        name: "String"
                    }
                },
                operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "String"
                    }
                },
                negateCondition: {
                    serializedName: "negateCondition",
                    type: {
                        name: "Boolean"
                    }
                },
                matchValue: {
                    required: true,
                    serializedName: "matchValue",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CustomRule = {
        serializedName: "CustomRule",
        type: {
            name: "Composite",
            className: "CustomRule",
            modelProperties: {
                name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 128
                    },
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    required: true,
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                ruleType: {
                    required: true,
                    serializedName: "ruleType",
                    type: {
                        name: "String"
                    }
                },
                rateLimitDurationInMinutes: {
                    serializedName: "rateLimitDurationInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                rateLimitThreshold: {
                    serializedName: "rateLimitThreshold",
                    type: {
                        name: "Number"
                    }
                },
                matchConditions: {
                    required: true,
                    serializedName: "matchConditions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MatchCondition1"
                            }
                        }
                    }
                },
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                transforms: {
                    serializedName: "transforms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CustomRules = {
        serializedName: "CustomRules",
        type: {
            name: "Composite",
            className: "CustomRules",
            modelProperties: {
                rules: {
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CustomRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedRuleSet = {
        serializedName: "Unknown",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "ruleSetType",
                clientName: "ruleSetType"
            },
            uberParent: "ManagedRuleSet",
            className: "ManagedRuleSet",
            modelProperties: {
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "Number"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                },
                ruleSetType: {
                    required: true,
                    serializedName: "ruleSetType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedRuleSets = {
        serializedName: "ManagedRuleSets",
        type: {
            name: "Composite",
            className: "ManagedRuleSets",
            modelProperties: {
                ruleSets: {
                    serializedName: "ruleSets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                polymorphicDiscriminator: {
                                    serializedName: "ruleSetType",
                                    clientName: "ruleSetType"
                                },
                                uberParent: "ManagedRuleSet",
                                className: "ManagedRuleSet"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebApplicationFirewallPolicyPropertiesFormat = {
        serializedName: "WebApplicationFirewallPolicyPropertiesFormat",
        type: {
            name: "Composite",
            className: "WebApplicationFirewallPolicyPropertiesFormat",
            modelProperties: {
                policySettings: {
                    serializedName: "policySettings",
                    type: {
                        name: "Composite",
                        className: "PolicySettings"
                    }
                },
                customRules: {
                    serializedName: "customRules",
                    type: {
                        name: "Composite",
                        className: "CustomRules"
                    }
                },
                managedRules: {
                    serializedName: "managedRules",
                    type: {
                        name: "Composite",
                        className: "ManagedRuleSets"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                resourceState: {
                    readOnly: true,
                    serializedName: "resourceState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebApplicationFirewallPolicy1 = {
        serializedName: "WebApplicationFirewallPolicy",
        type: {
            name: "Composite",
            className: "WebApplicationFirewallPolicy1",
            modelProperties: __assign({}, Resource.type.modelProperties, { policySettings: {
                    serializedName: "properties.policySettings",
                    type: {
                        name: "Composite",
                        className: "PolicySettings"
                    }
                }, customRules: {
                    serializedName: "properties.customRules",
                    type: {
                        name: "Composite",
                        className: "CustomRules"
                    }
                }, managedRules: {
                    serializedName: "properties.managedRules",
                    type: {
                        name: "Composite",
                        className: "ManagedRuleSets"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, resourceState: {
                    readOnly: true,
                    serializedName: "properties.resourceState",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AzureManagedOverrideRuleGroup = {
        serializedName: "AzureManagedOverrideRuleGroup",
        type: {
            name: "Composite",
            className: "AzureManagedOverrideRuleGroup",
            modelProperties: {
                ruleGroupOverride: {
                    required: true,
                    serializedName: "ruleGroupOverride",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureManagedRuleSet = {
        serializedName: "AzureManagedRuleSet",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ManagedRuleSet.type.polymorphicDiscriminator,
            uberParent: "ManagedRuleSet",
            className: "AzureManagedRuleSet",
            modelProperties: __assign({}, ManagedRuleSet.type.modelProperties, { ruleGroupOverrides: {
                    serializedName: "ruleGroupOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureManagedOverrideRuleGroup"
                            }
                        }
                    }
                } })
        }
    };
    var FrontDoorListResult = {
        serializedName: "FrontDoorListResult",
        type: {
            name: "Composite",
            className: "FrontDoorListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FrontDoor"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingRuleListResult = {
        serializedName: "RoutingRuleListResult",
        type: {
            name: "Composite",
            className: "RoutingRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HealthProbeSettingsListResult = {
        serializedName: "HealthProbeSettingsListResult",
        type: {
            name: "Composite",
            className: "HealthProbeSettingsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthProbeSettingsModel"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancingSettingsListResult = {
        serializedName: "LoadBalancingSettingsListResult",
        type: {
            name: "Composite",
            className: "LoadBalancingSettingsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancingSettingsModel"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackendPoolListResult = {
        serializedName: "BackendPoolListResult",
        type: {
            name: "Composite",
            className: "BackendPoolListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackendPool"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FrontendEndpointsListResult = {
        serializedName: "FrontendEndpointsListResult",
        type: {
            name: "Composite",
            className: "FrontendEndpointsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FrontendEndpoint"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebApplicationFirewallPolicyListResult = {
        serializedName: "WebApplicationFirewallPolicyListResult",
        type: {
            name: "Composite",
            className: "WebApplicationFirewallPolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebApplicationFirewallPolicy1"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'Unknown': ManagedRuleSet,
        'ManagedRuleSet.AzureManagedRuleSet': AzureManagedRuleSet
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        FrontDoorUpdateParameters: FrontDoorUpdateParameters,
        FrontDoorProperties: FrontDoorProperties,
        Resource: Resource,
        FrontDoor: FrontDoor,
        RoutingRuleUpdateParameters: RoutingRuleUpdateParameters,
        RoutingRuleProperties: RoutingRuleProperties,
        SubResource: SubResource,
        RoutingRule: RoutingRule,
        LoadBalancingSettingsUpdateParameters: LoadBalancingSettingsUpdateParameters,
        LoadBalancingSettingsProperties: LoadBalancingSettingsProperties,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        HealthProbeSettingsUpdateParameters: HealthProbeSettingsUpdateParameters,
        HealthProbeSettingsProperties: HealthProbeSettingsProperties,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        BackendPoolUpdateParameters: BackendPoolUpdateParameters,
        BackendPoolProperties: BackendPoolProperties,
        BackendPool: BackendPool,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        KeyVaultCertificateSourceParameters: KeyVaultCertificateSourceParameters,
        FrontDoorCertificateSourceParameters: FrontDoorCertificateSourceParameters,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        FrontendEndpointUpdateParameters: FrontendEndpointUpdateParameters,
        FrontendEndpointProperties: FrontendEndpointProperties,
        FrontendEndpoint: FrontendEndpoint,
        PurgeParameters: PurgeParameters,
        CacheConfiguration: CacheConfiguration,
        Backend: Backend,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        ValidateCustomDomainInput: ValidateCustomDomainInput,
        ValidateCustomDomainOutput: ValidateCustomDomainOutput,
        ErrorResponse: ErrorResponse,
        CheckNameAvailabilityInput: CheckNameAvailabilityInput,
        CheckNameAvailabilityOutput: CheckNameAvailabilityOutput,
        ErrorDetails: ErrorDetails,
        ErrorModel: ErrorModel,
        AzureAsyncOperationResult: AzureAsyncOperationResult,
        TagsObject: TagsObject,
        PolicySettings: PolicySettings,
        MatchCondition1: MatchCondition1,
        CustomRule: CustomRule,
        CustomRules: CustomRules,
        ManagedRuleSet: ManagedRuleSet,
        ManagedRuleSets: ManagedRuleSets,
        WebApplicationFirewallPolicyPropertiesFormat: WebApplicationFirewallPolicyPropertiesFormat,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup,
        AzureManagedRuleSet: AzureManagedRuleSet,
        FrontDoorListResult: FrontDoorListResult,
        RoutingRuleListResult: RoutingRuleListResult,
        HealthProbeSettingsListResult: HealthProbeSettingsListResult,
        LoadBalancingSettingsListResult: LoadBalancingSettingsListResult,
        BackendPoolListResult: BackendPoolListResult,
        FrontendEndpointsListResult: FrontendEndpointsListResult,
        WebApplicationFirewallPolicyListResult: WebApplicationFirewallPolicyListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-08-01',
            type: {
                name: "String"
            }
        }
    };
    var backendPoolName = {
        parameterPath: "backendPoolName",
        mapper: {
            required: true,
            serializedName: "backendPoolName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var frontDoorName = {
        parameterPath: "frontDoorName",
        mapper: {
            required: true,
            serializedName: "frontDoorName",
            constraints: {
                MaxLength: 64,
                MinLength: 5,
                Pattern: /^[a-zA-Z0-9]+([-a-zA-Z0-9]?[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var frontendEndpointName = {
        parameterPath: "frontendEndpointName",
        mapper: {
            required: true,
            serializedName: "frontendEndpointName",
            constraints: {
                MaxLength: 255,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var healthProbeSettingsName = {
        parameterPath: "healthProbeSettingsName",
        mapper: {
            required: true,
            serializedName: "healthProbeSettingsName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var loadBalancingSettingsName = {
        parameterPath: "loadBalancingSettingsName",
        mapper: {
            required: true,
            serializedName: "loadBalancingSettingsName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var policyName = {
        parameterPath: "policyName",
        mapper: {
            required: true,
            serializedName: "policyName",
            constraints: {
                MaxLength: 128
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName0 = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 80,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName1 = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var routingRuleName = {
        parameterPath: "routingRuleName",
        mapper: {
            required: true,
            serializedName: "routingRuleName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        FrontDoorListResult: FrontDoorListResult,
        FrontDoor: FrontDoor,
        Resource: Resource,
        BaseResource: BaseResource,
        RoutingRule: RoutingRule,
        SubResource: SubResource,
        CacheConfiguration: CacheConfiguration,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        BackendPool: BackendPool,
        Backend: Backend,
        FrontendEndpoint: FrontendEndpoint,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        ErrorResponse: ErrorResponse,
        ValidateCustomDomainInput: ValidateCustomDomainInput,
        ValidateCustomDomainOutput: ValidateCustomDomainOutput,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FrontDoors. */
    var FrontDoors = /** @class */ (function () {
        /**
         * Create a FrontDoors.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function FrontDoors(client) {
            this.client = client;
        }
        FrontDoors.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        FrontDoors.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        FrontDoors.prototype.get = function (resourceGroupName, frontDoorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates a new Front Door with a Front Door name under the specified subscription and resource
         * group.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontDoorParameters Front Door properties needed to create a new Front Door.
         * @param [options] The optional parameters
         * @returns Promise<Models.FrontDoorsCreateOrUpdateResponse>
         */
        FrontDoors.prototype.createOrUpdate = function (resourceGroupName, frontDoorName$$1, frontDoorParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, frontDoorName$$1, frontDoorParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing Front Door with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FrontDoors.prototype.deleteMethod = function (resourceGroupName, frontDoorName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, frontDoorName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        FrontDoors.prototype.validateCustomDomain = function (resourceGroupName, frontDoorName$$1, customDomainProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                customDomainProperties: customDomainProperties,
                options: options
            }, validateCustomDomainOperationSpec, callback);
        };
        /**
         * Creates a new Front Door with a Front Door name under the specified subscription and resource
         * group.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontDoorParameters Front Door properties needed to create a new Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FrontDoors.prototype.beginCreateOrUpdate = function (resourceGroupName, frontDoorName$$1, frontDoorParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                frontDoorParameters: frontDoorParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes an existing Front Door with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FrontDoors.prototype.beginDeleteMethod = function (resourceGroupName, frontDoorName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        FrontDoors.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        FrontDoors.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return FrontDoors;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/frontDoors",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontDoorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors",
        urlParameters: [
            subscriptionId,
            resourceGroupName0
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontDoorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontDoor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var validateCustomDomainOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/validateCustomDomain",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "customDomainProperties",
            mapper: __assign({}, ValidateCustomDomainInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ValidateCustomDomainOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "frontDoorParameters",
            mapper: __assign({}, FrontDoor, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FrontDoor
            },
            201: {
                bodyMapper: FrontDoor
            },
            202: {
                bodyMapper: FrontDoor
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontDoorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontDoorListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        RoutingRuleListResult: RoutingRuleListResult,
        RoutingRule: RoutingRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CacheConfiguration: CacheConfiguration,
        ErrorResponse: ErrorResponse,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        BackendPool: BackendPool,
        Backend: Backend,
        FrontendEndpoint: FrontendEndpoint,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        Resource: Resource,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup,
        FrontDoor: FrontDoor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RoutingRules. */
    var RoutingRules = /** @class */ (function () {
        /**
         * Create a RoutingRules.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function RoutingRules(client) {
            this.client = client;
        }
        RoutingRules.prototype.listByFrontDoor = function (resourceGroupName, frontDoorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, listByFrontDoorOperationSpec, callback);
        };
        RoutingRules.prototype.get = function (resourceGroupName, frontDoorName$$1, routingRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                routingRuleName: routingRuleName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates a new Routing Rule with the specified Rule name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param routingRuleName Name of the Routing Rule which is unique within the Front Door.
         * @param routingRuleParameters Routing Rule properties needed to create a new Front Door.
         * @param [options] The optional parameters
         * @returns Promise<Models.RoutingRulesCreateOrUpdateResponse>
         */
        RoutingRules.prototype.createOrUpdate = function (resourceGroupName, frontDoorName$$1, routingRuleName$$1, routingRuleParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, frontDoorName$$1, routingRuleName$$1, routingRuleParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing Routing Rule with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param routingRuleName Name of the Routing Rule which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        RoutingRules.prototype.deleteMethod = function (resourceGroupName, frontDoorName$$1, routingRuleName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, frontDoorName$$1, routingRuleName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new Routing Rule with the specified Rule name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param routingRuleName Name of the Routing Rule which is unique within the Front Door.
         * @param routingRuleParameters Routing Rule properties needed to create a new Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RoutingRules.prototype.beginCreateOrUpdate = function (resourceGroupName, frontDoorName$$1, routingRuleName$$1, routingRuleParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                routingRuleName: routingRuleName$$1,
                routingRuleParameters: routingRuleParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes an existing Routing Rule with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param routingRuleName Name of the Routing Rule which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RoutingRules.prototype.beginDeleteMethod = function (resourceGroupName, frontDoorName$$1, routingRuleName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                routingRuleName: routingRuleName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        RoutingRules.prototype.listByFrontDoorNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFrontDoorNextOperationSpec, callback);
        };
        return RoutingRules;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$2);
    var listByFrontDoorOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoutingRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules/{routingRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            routingRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoutingRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules/{routingRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            routingRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "routingRuleParameters",
            mapper: __assign({}, RoutingRule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RoutingRule
            },
            201: {
                bodyMapper: RoutingRule
            },
            202: {
                bodyMapper: RoutingRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules/{routingRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            routingRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByFrontDoorNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoutingRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        HealthProbeSettingsListResult: HealthProbeSettingsListResult,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        RoutingRule: RoutingRule,
        CacheConfiguration: CacheConfiguration,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        BackendPool: BackendPool,
        Backend: Backend,
        FrontendEndpoint: FrontendEndpoint,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        Resource: Resource,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup,
        FrontDoor: FrontDoor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HealthProbeSettings. */
    var HealthProbeSettings = /** @class */ (function () {
        /**
         * Create a HealthProbeSettings.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function HealthProbeSettings(client) {
            this.client = client;
        }
        HealthProbeSettings.prototype.listByFrontDoor = function (resourceGroupName, frontDoorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, listByFrontDoorOperationSpec$1, callback);
        };
        HealthProbeSettings.prototype.get = function (resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                healthProbeSettingsName: healthProbeSettingsName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates a new HealthProbeSettings with the specified Rule name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param healthProbeSettingsName Name of the health probe settings which is unique within the
         * Front Door.
         * @param healthProbeSettingsParameters HealthProbeSettings properties needed to create a new Front
         * Door.
         * @param [options] The optional parameters
         * @returns Promise<Models.HealthProbeSettingsCreateOrUpdateResponse>
         */
        HealthProbeSettings.prototype.createOrUpdate = function (resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, healthProbeSettingsParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, healthProbeSettingsParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing HealthProbeSettings with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param healthProbeSettingsName Name of the health probe settings which is unique within the
         * Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        HealthProbeSettings.prototype.deleteMethod = function (resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new HealthProbeSettings with the specified Rule name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param healthProbeSettingsName Name of the health probe settings which is unique within the
         * Front Door.
         * @param healthProbeSettingsParameters HealthProbeSettings properties needed to create a new Front
         * Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HealthProbeSettings.prototype.beginCreateOrUpdate = function (resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, healthProbeSettingsParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                healthProbeSettingsName: healthProbeSettingsName$$1,
                healthProbeSettingsParameters: healthProbeSettingsParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes an existing HealthProbeSettings with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param healthProbeSettingsName Name of the health probe settings which is unique within the
         * Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        HealthProbeSettings.prototype.beginDeleteMethod = function (resourceGroupName, frontDoorName$$1, healthProbeSettingsName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                healthProbeSettingsName: healthProbeSettingsName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        HealthProbeSettings.prototype.listByFrontDoorNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFrontDoorNextOperationSpec$1, callback);
        };
        return HealthProbeSettings;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$3);
    var listByFrontDoorOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HealthProbeSettingsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings/{healthProbeSettingsName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            healthProbeSettingsName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HealthProbeSettingsModel
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings/{healthProbeSettingsName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            healthProbeSettingsName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "healthProbeSettingsParameters",
            mapper: __assign({}, HealthProbeSettingsModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: HealthProbeSettingsModel
            },
            201: {
                bodyMapper: HealthProbeSettingsModel
            },
            202: {
                bodyMapper: HealthProbeSettingsModel
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings/{healthProbeSettingsName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            healthProbeSettingsName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByFrontDoorNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HealthProbeSettingsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        LoadBalancingSettingsListResult: LoadBalancingSettingsListResult,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        SubResource: SubResource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        RoutingRule: RoutingRule,
        CacheConfiguration: CacheConfiguration,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        BackendPool: BackendPool,
        Backend: Backend,
        FrontendEndpoint: FrontendEndpoint,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        Resource: Resource,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup,
        FrontDoor: FrontDoor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LoadBalancingSettings. */
    var LoadBalancingSettings = /** @class */ (function () {
        /**
         * Create a LoadBalancingSettings.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function LoadBalancingSettings(client) {
            this.client = client;
        }
        LoadBalancingSettings.prototype.listByFrontDoor = function (resourceGroupName, frontDoorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, listByFrontDoorOperationSpec$2, callback);
        };
        LoadBalancingSettings.prototype.get = function (resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                loadBalancingSettingsName: loadBalancingSettingsName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Creates a new LoadBalancingSettings with the specified Rule name within the specified Front
         * Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
         * Front Door.
         * @param loadBalancingSettingsParameters LoadBalancingSettings properties needed to create a new
         * Front Door.
         * @param [options] The optional parameters
         * @returns Promise<Models.LoadBalancingSettingsCreateOrUpdateResponse>
         */
        LoadBalancingSettings.prototype.createOrUpdate = function (resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, loadBalancingSettingsParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, loadBalancingSettingsParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing LoadBalancingSettings with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
         * Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        LoadBalancingSettings.prototype.deleteMethod = function (resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new LoadBalancingSettings with the specified Rule name within the specified Front
         * Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
         * Front Door.
         * @param loadBalancingSettingsParameters LoadBalancingSettings properties needed to create a new
         * Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LoadBalancingSettings.prototype.beginCreateOrUpdate = function (resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, loadBalancingSettingsParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                loadBalancingSettingsName: loadBalancingSettingsName$$1,
                loadBalancingSettingsParameters: loadBalancingSettingsParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes an existing LoadBalancingSettings with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
         * Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LoadBalancingSettings.prototype.beginDeleteMethod = function (resourceGroupName, frontDoorName$$1, loadBalancingSettingsName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                loadBalancingSettingsName: loadBalancingSettingsName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        LoadBalancingSettings.prototype.listByFrontDoorNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFrontDoorNextOperationSpec$2, callback);
        };
        return LoadBalancingSettings;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$4);
    var listByFrontDoorOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancingSettingsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings/{loadBalancingSettingsName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            loadBalancingSettingsName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancingSettingsModel
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings/{loadBalancingSettingsName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            loadBalancingSettingsName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "loadBalancingSettingsParameters",
            mapper: __assign({}, LoadBalancingSettingsModel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LoadBalancingSettingsModel
            },
            201: {
                bodyMapper: LoadBalancingSettingsModel
            },
            202: {
                bodyMapper: LoadBalancingSettingsModel
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings/{loadBalancingSettingsName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            loadBalancingSettingsName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByFrontDoorNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LoadBalancingSettingsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        BackendPoolListResult: BackendPoolListResult,
        BackendPool: BackendPool,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Backend: Backend,
        ErrorResponse: ErrorResponse,
        RoutingRule: RoutingRule,
        CacheConfiguration: CacheConfiguration,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        FrontendEndpoint: FrontendEndpoint,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        Resource: Resource,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup,
        FrontDoor: FrontDoor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BackendPools. */
    var BackendPools = /** @class */ (function () {
        /**
         * Create a BackendPools.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function BackendPools(client) {
            this.client = client;
        }
        BackendPools.prototype.listByFrontDoor = function (resourceGroupName, frontDoorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, listByFrontDoorOperationSpec$3, callback);
        };
        BackendPools.prototype.get = function (resourceGroupName, frontDoorName$$1, backendPoolName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                backendPoolName: backendPoolName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Creates a new Backend Pool with the specified Pool name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param backendPoolName Name of the Backend Pool which is unique within the Front Door.
         * @param backendPoolParameters Backend Pool properties needed to create a new Pool.
         * @param [options] The optional parameters
         * @returns Promise<Models.BackendPoolsCreateOrUpdateResponse>
         */
        BackendPools.prototype.createOrUpdate = function (resourceGroupName, frontDoorName$$1, backendPoolName$$1, backendPoolParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, frontDoorName$$1, backendPoolName$$1, backendPoolParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing Backend Pool with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param backendPoolName Name of the Backend Pool which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BackendPools.prototype.deleteMethod = function (resourceGroupName, frontDoorName$$1, backendPoolName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, frontDoorName$$1, backendPoolName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new Backend Pool with the specified Pool name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param backendPoolName Name of the Backend Pool which is unique within the Front Door.
         * @param backendPoolParameters Backend Pool properties needed to create a new Pool.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackendPools.prototype.beginCreateOrUpdate = function (resourceGroupName, frontDoorName$$1, backendPoolName$$1, backendPoolParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                backendPoolName: backendPoolName$$1,
                backendPoolParameters: backendPoolParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Deletes an existing Backend Pool with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param backendPoolName Name of the Backend Pool which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BackendPools.prototype.beginDeleteMethod = function (resourceGroupName, frontDoorName$$1, backendPoolName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                backendPoolName: backendPoolName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        BackendPools.prototype.listByFrontDoorNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFrontDoorNextOperationSpec$3, callback);
        };
        return BackendPools;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$5);
    var listByFrontDoorOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/backendPools",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendPoolListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/backendPools/{backendPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            backendPoolName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendPool
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/backendPools/{backendPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            backendPoolName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "backendPoolParameters",
            mapper: __assign({}, BackendPool, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BackendPool
            },
            201: {
                bodyMapper: BackendPool
            },
            202: {
                bodyMapper: BackendPool
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/backendPools/{backendPoolName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            backendPoolName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listByFrontDoorNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BackendPoolListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        FrontendEndpointsListResult: FrontendEndpointsListResult,
        FrontendEndpoint: FrontendEndpoint,
        SubResource: SubResource,
        BaseResource: BaseResource,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        ErrorResponse: ErrorResponse,
        RoutingRule: RoutingRule,
        CacheConfiguration: CacheConfiguration,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        BackendPool: BackendPool,
        Backend: Backend,
        Resource: Resource,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup,
        FrontDoor: FrontDoor
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FrontendEndpoints. */
    var FrontendEndpoints = /** @class */ (function () {
        /**
         * Create a FrontendEndpoints.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function FrontendEndpoints(client) {
            this.client = client;
        }
        FrontendEndpoints.prototype.listByFrontDoor = function (resourceGroupName, frontDoorName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                options: options
            }, listByFrontDoorOperationSpec$4, callback);
        };
        FrontendEndpoints.prototype.get = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                frontendEndpointName: frontendEndpointName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Creates a new frontend endpoint with the specified host name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param frontendEndpointParameters Frontend endpoint properties needed to create a new endpoint.
         * @param [options] The optional parameters
         * @returns Promise<Models.FrontendEndpointsCreateOrUpdateResponse>
         */
        FrontendEndpoints.prototype.createOrUpdate = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, frontendEndpointParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, frontendEndpointParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an existing frontend endpoint with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FrontendEndpoints.prototype.deleteMethod = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Enables a frontendEndpoint for HTTPS traffic
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FrontendEndpoints.prototype.enableHttps = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, customHttpsConfiguration, options) {
            return this.beginEnableHttps(resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, customHttpsConfiguration, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Disables a frontendEndpoint for HTTPS traffic
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        FrontendEndpoints.prototype.disableHttps = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options) {
            return this.beginDisableHttps(resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new frontend endpoint with the specified host name within the specified Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param frontendEndpointParameters Frontend endpoint properties needed to create a new endpoint.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FrontendEndpoints.prototype.beginCreateOrUpdate = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, frontendEndpointParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                frontendEndpointName: frontendEndpointName$$1,
                frontendEndpointParameters: frontendEndpointParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Deletes an existing frontend endpoint with the specified parameters.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FrontendEndpoints.prototype.beginDeleteMethod = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                frontendEndpointName: frontendEndpointName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Enables a frontendEndpoint for HTTPS traffic
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param customHttpsConfiguration The configuration specifying how to enable HTTPS
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FrontendEndpoints.prototype.beginEnableHttps = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, customHttpsConfiguration, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                frontendEndpointName: frontendEndpointName$$1,
                customHttpsConfiguration: customHttpsConfiguration,
                options: options
            }, beginEnableHttpsOperationSpec, options);
        };
        /**
         * Disables a frontendEndpoint for HTTPS traffic
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        FrontendEndpoints.prototype.beginDisableHttps = function (resourceGroupName, frontDoorName$$1, frontendEndpointName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                frontendEndpointName: frontendEndpointName$$1,
                options: options
            }, beginDisableHttpsOperationSpec, options);
        };
        FrontendEndpoints.prototype.listByFrontDoorNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByFrontDoorNextOperationSpec$4, callback);
        };
        return FrontendEndpoints;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$6);
    var listByFrontDoorOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontendEndpointsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            frontendEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontendEndpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            frontendEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "frontendEndpointParameters",
            mapper: __assign({}, FrontendEndpoint, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FrontendEndpoint
            },
            201: {
                bodyMapper: FrontendEndpoint
            },
            202: {
                bodyMapper: FrontendEndpoint
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            frontendEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var beginEnableHttpsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/enableHttps",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            frontendEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "customHttpsConfiguration",
            mapper: __assign({}, CustomHttpsConfiguration, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var beginDisableHttpsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/provider/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/disableHttps",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName,
            frontendEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByFrontDoorNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FrontendEndpointsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        PurgeParameters: PurgeParameters,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Endpoints. */
    var Endpoints = /** @class */ (function () {
        /**
         * Create a Endpoints.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function Endpoints(client) {
            this.client = client;
        }
        /**
         * Removes a content from Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g.
         * '/pictures/city.png' which removes a single file, or a directory with a wildcard, e.g.
         * '/pictures/*' which removes all folders and files in the directory.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Endpoints.prototype.purgeContent = function (resourceGroupName, frontDoorName$$1, contentFilePaths, options) {
            return this.beginPurgeContent(resourceGroupName, frontDoorName$$1, contentFilePaths, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Removes a content from Front Door.
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * @param frontDoorName Name of the Front Door which is globally unique.
         * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g.
         * '/pictures/city.png' which removes a single file, or a directory with a wildcard, e.g.
         * '/pictures/*' which removes all folders and files in the directory.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Endpoints.prototype.beginPurgeContent = function (resourceGroupName, frontDoorName$$1, contentFilePaths, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                frontDoorName: frontDoorName$$1,
                contentFilePaths: contentFilePaths,
                options: options
            }, beginPurgeContentOperationSpec, options);
        };
        return Endpoints;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$7);
    var beginPurgeContentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/purge",
        urlParameters: [
            subscriptionId,
            resourceGroupName0,
            frontDoorName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "contentFilePaths",
            mapper: __assign({}, PurgeParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        WebApplicationFirewallPolicyListResult: WebApplicationFirewallPolicyListResult,
        WebApplicationFirewallPolicy1: WebApplicationFirewallPolicy1,
        Resource: Resource,
        BaseResource: BaseResource,
        PolicySettings: PolicySettings,
        CustomRules: CustomRules,
        CustomRule: CustomRule,
        MatchCondition1: MatchCondition1,
        ManagedRuleSets: ManagedRuleSets,
        ManagedRuleSet: ManagedRuleSet,
        ErrorResponse: ErrorResponse,
        CloudError: CloudError,
        FrontDoor: FrontDoor,
        RoutingRule: RoutingRule,
        SubResource: SubResource,
        CacheConfiguration: CacheConfiguration,
        LoadBalancingSettingsModel: LoadBalancingSettingsModel,
        HealthProbeSettingsModel: HealthProbeSettingsModel,
        BackendPool: BackendPool,
        Backend: Backend,
        FrontendEndpoint: FrontendEndpoint,
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink,
        CustomHttpsConfiguration: CustomHttpsConfiguration,
        KeyVaultCertificateSourceParametersVault: KeyVaultCertificateSourceParametersVault,
        AzureManagedRuleSet: AzureManagedRuleSet,
        AzureManagedOverrideRuleGroup: AzureManagedOverrideRuleGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Policies. */
    var Policies = /** @class */ (function () {
        /**
         * Create a Policies.
         * @param {FrontDoorManagementClientContext} client Reference to the service client.
         */
        function Policies(client) {
            this.client = client;
        }
        Policies.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$1, callback);
        };
        Policies.prototype.get = function (resourceGroupName, policyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                policyName: policyName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        Policies.prototype.createOrUpdate = function (resourceGroupName, policyName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                policyName: policyName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        /**
         * Deletes Policy
         * @param resourceGroupName The name of the resource group.
         * @param policyName The name of the resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Policies.prototype.deleteMethod = function (resourceGroupName, policyName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName, policyName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes Policy
         * @param resourceGroupName The name of the resource group.
         * @param policyName The name of the resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Policies.prototype.beginDeleteMethod = function (resourceGroupName, policyName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                policyName: policyName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        Policies.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Policies;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
        urlParameters: [
            resourceGroupName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebApplicationFirewallPolicyListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
        urlParameters: [
            resourceGroupName1,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebApplicationFirewallPolicy1
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
        urlParameters: [
            resourceGroupName1,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WebApplicationFirewallPolicy1, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WebApplicationFirewallPolicy1
            },
            201: {
                bodyMapper: WebApplicationFirewallPolicy1
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
        urlParameters: [
            resourceGroupName1,
            policyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebApplicationFirewallPolicyListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-frontdoor";
    var packageVersion = "1.0.0-preview";
    var FrontDoorManagementClientContext = /** @class */ (function (_super) {
        __extends(FrontDoorManagementClientContext, _super);
        /**
         * Initializes a new instance of the FrontDoorManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function FrontDoorManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return FrontDoorManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var FrontDoorManagementClient = /** @class */ (function (_super) {
        __extends(FrontDoorManagementClient, _super);
        /**
         * Initializes a new instance of the FrontDoorManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function FrontDoorManagementClient(credentials, subscriptionId$$1, options) {
            var _this = _super.call(this, credentials, subscriptionId$$1, options) || this;
            _this.frontDoors = new FrontDoors(_this);
            _this.routingRules = new RoutingRules(_this);
            _this.healthProbeSettings = new HealthProbeSettings(_this);
            _this.loadBalancingSettings = new LoadBalancingSettings(_this);
            _this.backendPools = new BackendPools(_this);
            _this.frontendEndpoints = new FrontendEndpoints(_this);
            _this.endpoints = new Endpoints(_this);
            _this.policies = new Policies(_this);
            return _this;
        }
        FrontDoorManagementClient.prototype.checkFrontDoorNameAvailability = function (checkFrontDoorNameAvailabilityInput, options, callback) {
            return this.sendOperationRequest({
                checkFrontDoorNameAvailabilityInput: checkFrontDoorNameAvailabilityInput,
                options: options
            }, checkFrontDoorNameAvailabilityOperationSpec, callback);
        };
        FrontDoorManagementClient.prototype.checkFrontDoorNameAvailabilityWithSubscription = function (checkFrontDoorNameAvailabilityInput, options, callback) {
            return this.sendOperationRequest({
                checkFrontDoorNameAvailabilityInput: checkFrontDoorNameAvailabilityInput,
                options: options
            }, checkFrontDoorNameAvailabilityWithSubscriptionOperationSpec, callback);
        };
        return FrontDoorManagementClient;
    }(FrontDoorManagementClientContext));
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers);
    var checkFrontDoorNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.Network/checkFrontDoorNameAvailability",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "checkFrontDoorNameAvailabilityInput",
            mapper: __assign({}, CheckNameAvailabilityInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var checkFrontDoorNameAvailabilityWithSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/checkFrontDoorNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "checkFrontDoorNameAvailabilityInput",
            mapper: __assign({}, CheckNameAvailabilityInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityOutput
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };

    exports.FrontDoorManagementClient = FrontDoorManagementClient;
    exports.FrontDoorManagementClientContext = FrontDoorManagementClientContext;
    exports.FrontDoorManagementModels = index;
    exports.FrontDoorManagementMappers = Mappers;
    exports.FrontDoors = FrontDoors;
    exports.RoutingRules = RoutingRules;
    exports.HealthProbeSettings = HealthProbeSettings;
    exports.LoadBalancingSettings = LoadBalancingSettings;
    exports.BackendPools = BackendPools;
    exports.FrontendEndpoints = FrontendEndpoints;
    exports.Endpoints = Endpoints;
    exports.Policies = Policies;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-frontdoor.js.map
