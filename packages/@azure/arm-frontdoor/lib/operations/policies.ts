/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/policiesMappers";
import * as Parameters from "../models/parameters";
import { FrontDoorManagementClientContext } from "../frontDoorManagementClientContext";

/** Class representing a Policies. */
export class Policies {
  private readonly client: FrontDoorManagementClientContext;

  /**
   * Create a Policies.
   * @param {FrontDoorManagementClientContext} client Reference to the service client.
   */
  constructor(client: FrontDoorManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the protection policies within a resource group.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesListResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>, callback?: msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>): Promise<Models.PoliciesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PoliciesListResponse>;
  }

  /**
   * Retrieve protection policy with specified name within a resource group.
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesGetResponse>
   */
  get(policyName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesGetResponse>;
  /**
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param callback The callback
   */
  get(policyName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.WebApplicationFirewallPolicy1>): void;
  /**
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(policyName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebApplicationFirewallPolicy1>): void;
  get(policyName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebApplicationFirewallPolicy1>, callback?: msRest.ServiceCallback<Models.WebApplicationFirewallPolicy1>): Promise<Models.PoliciesGetResponse> {
    return this.client.sendOperationRequest(
      {
        policyName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PoliciesGetResponse>;
  }

  /**
   * Create or update policy with specified ruleset name within a resource group.
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param parameters Policy to be created.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesCreateOrUpdateResponse>
   */
  createOrUpdate(policyName: string, resourceGroupName: string, parameters: Models.WebApplicationFirewallPolicy1, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(policyName,resourceGroupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PoliciesCreateOrUpdateResponse>;
  }

  /**
   * Deletes Policy
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(policyName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(policyName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create or update policy with specified ruleset name within a resource group.
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param parameters Policy to be created.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(policyName: string, resourceGroupName: string, parameters: Models.WebApplicationFirewallPolicy1, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        policyName,
        resourceGroupName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes Policy
   * @param policyName The name of the Web Application Firewall Policy.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(policyName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        policyName,
        resourceGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all of the protection policies within a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>, callback?: msRest.ServiceCallback<Models.WebApplicationFirewallPolicyList>): Promise<Models.PoliciesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PoliciesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebApplicationFirewallPolicyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
  urlParameters: [
    Parameters.policyName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebApplicationFirewallPolicy1
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
  urlParameters: [
    Parameters.policyName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.WebApplicationFirewallPolicy1,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WebApplicationFirewallPolicy1
    },
    201: {
      bodyMapper: Mappers.WebApplicationFirewallPolicy1
    },
    202: {
      bodyMapper: Mappers.WebApplicationFirewallPolicy1
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
  urlParameters: [
    Parameters.policyName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WebApplicationFirewallPolicyList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
