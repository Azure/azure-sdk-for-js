/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as msRestAzure from "ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/loadBalancingSettingsMappers";
import * as Parameters from "../models/parameters";
import { FrontDoorManagementClientContext } from "../frontDoorManagementClientContext";

/** Class representing a LoadBalancingSettings. */
export class LoadBalancingSettings {
  private readonly client: FrontDoorManagementClientContext;

  /**
   * Create a LoadBalancingSettings.
   * @param {FrontDoorManagementClientContext} client Reference to the service client.
   */
  constructor(client: FrontDoorManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the LoadBalancingSettings within a Front Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param [options] The optional parameters
   * @returns Promise<Models.LoadBalancingSettingsListByFrontDoorResponse>
   */
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, options?: msRest.RequestOptionsBase): Promise<Models.LoadBalancingSettingsListByFrontDoorResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param callback The callback
   */
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, callback: msRest.ServiceCallback<Models.LoadBalancingSettingsListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoadBalancingSettingsListResult>): void;
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LoadBalancingSettingsListResult>): Promise<Models.LoadBalancingSettingsListByFrontDoorResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        frontDoorName,
        options
      },
      listByFrontDoorOperationSpec,
      callback) as Promise<Models.LoadBalancingSettingsListByFrontDoorResponse>;
  }

  /**
   * Gets a LoadBalancingSettings with the specified Rule name within the specified Front Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<Models.LoadBalancingSettingsGetResponse>
   */
  get(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, options?: msRest.RequestOptionsBase): Promise<Models.LoadBalancingSettingsGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param callback The callback
   */
  get(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, callback: msRest.ServiceCallback<Models.LoadBalancingSettingsModel>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoadBalancingSettingsModel>): void;
  get(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LoadBalancingSettingsModel>): Promise<Models.LoadBalancingSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        frontDoorName,
        loadBalancingSettingsName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LoadBalancingSettingsGetResponse>;
  }

  /**
   * Creates a new LoadBalancingSettings with the specified Rule name within the specified Front
   * Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param loadBalancingSettingsParameters LoadBalancingSettings properties needed to create a new
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<Models.LoadBalancingSettingsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, loadBalancingSettingsParameters: Models.LoadBalancingSettingsModel, options?: msRest.RequestOptionsBase): Promise<Models.LoadBalancingSettingsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,frontDoorName,loadBalancingSettingsName,loadBalancingSettingsParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LoadBalancingSettingsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing LoadBalancingSettings with the specified parameters.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,frontDoorName,loadBalancingSettingsName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new LoadBalancingSettings with the specified Rule name within the specified Front
   * Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param loadBalancingSettingsParameters LoadBalancingSettings properties needed to create a new
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, loadBalancingSettingsParameters: Models.LoadBalancingSettingsModel, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        frontDoorName,
        loadBalancingSettingsName,
        loadBalancingSettingsParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes an existing LoadBalancingSettings with the specified parameters.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param loadBalancingSettingsName Name of the load balancing settings which is unique within the
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, frontDoorName: string, loadBalancingSettingsName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        frontDoorName,
        loadBalancingSettingsName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all of the LoadBalancingSettings within a Front Door.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LoadBalancingSettingsListByFrontDoorNextResponse>
   */
  listByFrontDoorNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LoadBalancingSettingsListByFrontDoorNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByFrontDoorNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LoadBalancingSettingsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFrontDoorNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LoadBalancingSettingsListResult>): void;
  listByFrontDoorNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.LoadBalancingSettingsListResult>): Promise<Models.LoadBalancingSettingsListByFrontDoorNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByFrontDoorNextOperationSpec,
      callback) as Promise<Models.LoadBalancingSettingsListByFrontDoorNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByFrontDoorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancingSettingsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings/{loadBalancingSettingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName,
    Parameters.loadBalancingSettingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancingSettingsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings/{loadBalancingSettingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName,
    Parameters.loadBalancingSettingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "loadBalancingSettingsParameters",
    mapper: {
      ...Mappers.LoadBalancingSettingsModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancingSettingsModel
    },
    201: {
      bodyMapper: Mappers.LoadBalancingSettingsModel
    },
    202: {
      bodyMapper: Mappers.LoadBalancingSettingsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/loadBalancingSettings/{loadBalancingSettingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName,
    Parameters.loadBalancingSettingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByFrontDoorNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancingSettingsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
