/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/eventHubConnectionsMappers";
import * as Parameters from "../models/parameters";
import { KustoManagementClientContext } from "../kustoManagementClientContext";

/** Class representing a EventHubConnections. */
export class EventHubConnections {
  private readonly client: KustoManagementClientContext;

  /**
   * Create a EventHubConnections.
   * @param {KustoManagementClientContext} client Reference to the service client.
   */
  constructor(client: KustoManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns the list of Event Hub connections of the given Kusto database.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventHubConnectionsListByDatabaseResponse>
   */
  listByDatabase(resourceGroupName: string, clusterName: string, databaseName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventHubConnectionsListByDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param callback The callback
   */
  listByDatabase(resourceGroupName: string, clusterName: string, databaseName: string, callback: msRest.ServiceCallback<Models.EventHubConnectionListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabase(resourceGroupName: string, clusterName: string, databaseName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventHubConnectionListResult>): void;
  listByDatabase(resourceGroupName: string, clusterName: string, databaseName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventHubConnectionListResult>, callback?: msRest.ServiceCallback<Models.EventHubConnectionListResult>): Promise<Models.EventHubConnectionsListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        options
      },
      listByDatabaseOperationSpec,
      callback) as Promise<Models.EventHubConnectionsListByDatabaseResponse>;
  }

  /**
   * Checks that the Event Hub data connection parameters are valid.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventHubConnectionsEventhubConnectionValidationResponse>
   */
  eventhubConnectionValidation(resourceGroupName: string, clusterName: string, databaseName: string, parameters: Models.EventHubConnectionValidation, options?: msRest.RequestOptionsBase): Promise<Models.EventHubConnectionsEventhubConnectionValidationResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
   * @param callback The callback
   */
  eventhubConnectionValidation(resourceGroupName: string, clusterName: string, databaseName: string, parameters: Models.EventHubConnectionValidation, callback: msRest.ServiceCallback<Models.EventHubConnectionValidationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  eventhubConnectionValidation(resourceGroupName: string, clusterName: string, databaseName: string, parameters: Models.EventHubConnectionValidation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventHubConnectionValidationListResult>): void;
  eventhubConnectionValidation(resourceGroupName: string, clusterName: string, databaseName: string, parameters: Models.EventHubConnectionValidation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventHubConnectionValidationListResult>, callback?: msRest.ServiceCallback<Models.EventHubConnectionValidationListResult>): Promise<Models.EventHubConnectionsEventhubConnectionValidationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        parameters,
        options
      },
      eventhubConnectionValidationOperationSpec,
      callback) as Promise<Models.EventHubConnectionsEventhubConnectionValidationResponse>;
  }

  /**
   * Returns an Event Hub connection.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventHubConnectionsGetResponse>
   */
  get(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.EventHubConnectionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, callback: msRest.ServiceCallback<Models.EventHubConnection>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventHubConnection>): void;
  get(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventHubConnection>, callback?: msRest.ServiceCallback<Models.EventHubConnection>): Promise<Models.EventHubConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        eventHubConnectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EventHubConnectionsGetResponse>;
  }

  /**
   * Creates or updates a Event Hub connection.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventHubConnectionsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, parameters: Models.EventHubConnection, options?: msRest.RequestOptionsBase): Promise<Models.EventHubConnectionsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,clusterName,databaseName,eventHubConnectionName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.EventHubConnectionsCreateOrUpdateResponse>;
  }

  /**
   * Updates a Event Hub connection.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param parameters The Event Hub connection parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventHubConnectionsUpdateResponse>
   */
  update(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, parameters: Models.EventHubConnectionUpdate, options?: msRest.RequestOptionsBase): Promise<Models.EventHubConnectionsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,clusterName,databaseName,eventHubConnectionName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.EventHubConnectionsUpdateResponse>;
  }

  /**
   * Deletes the Event Hub connection with the given name.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,clusterName,databaseName,eventHubConnectionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates or updates a Event Hub connection.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, parameters: Models.EventHubConnection, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        eventHubConnectionName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Updates a Event Hub connection.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param parameters The Event Hub connection parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, parameters: Models.EventHubConnectionUpdate, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        eventHubConnectionName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the Event Hub connection with the given name.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param eventHubConnectionName The name of the event hub connection.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, clusterName: string, databaseName: string, eventHubConnectionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        eventHubConnectionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConnectionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const eventhubConnectionValidationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubConnectionValidation",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.EventHubConnectionValidation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConnectionValidationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.eventHubConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.eventHubConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.EventHubConnection,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConnection
    },
    201: {
      bodyMapper: Mappers.EventHubConnection
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.eventHubConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.EventHubConnectionUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EventHubConnection
    },
    201: {
      bodyMapper: Mappers.EventHubConnection
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.eventHubConnectionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
