/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmAutomation = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for SkuNameEnum.
     * Possible values include: 'Free', 'Basic'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuNameEnum =
     * <SkuNameEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuNameEnum;
    (function (SkuNameEnum) {
        SkuNameEnum["Free"] = "Free";
        SkuNameEnum["Basic"] = "Basic";
    })(SkuNameEnum || (SkuNameEnum = {}));
    /**
     * Defines values for AutomationAccountState.
     * Possible values include: 'Ok', 'Unavailable', 'Suspended'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AutomationAccountState =
     * <AutomationAccountState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AutomationAccountState;
    (function (AutomationAccountState) {
        AutomationAccountState["Ok"] = "Ok";
        AutomationAccountState["Unavailable"] = "Unavailable";
        AutomationAccountState["Suspended"] = "Suspended";
    })(AutomationAccountState || (AutomationAccountState = {}));
    /**
     * Defines values for AutomationKeyName.
     * Possible values include: 'Primary', 'Secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AutomationKeyName =
     * <AutomationKeyName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AutomationKeyName;
    (function (AutomationKeyName) {
        AutomationKeyName["Primary"] = "Primary";
        AutomationKeyName["Secondary"] = "Secondary";
    })(AutomationKeyName || (AutomationKeyName = {}));
    /**
     * Defines values for AutomationKeyPermissions.
     * Possible values include: 'Read', 'Full'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AutomationKeyPermissions =
     * <AutomationKeyPermissions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AutomationKeyPermissions;
    (function (AutomationKeyPermissions) {
        AutomationKeyPermissions["Read"] = "Read";
        AutomationKeyPermissions["Full"] = "Full";
    })(AutomationKeyPermissions || (AutomationKeyPermissions = {}));
    /**
     * Defines values for ContentSourceType.
     * Possible values include: 'embeddedContent', 'uri'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContentSourceType =
     * <ContentSourceType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContentSourceType;
    (function (ContentSourceType) {
        ContentSourceType["EmbeddedContent"] = "embeddedContent";
        ContentSourceType["Uri"] = "uri";
    })(ContentSourceType || (ContentSourceType = {}));
    /**
     * Defines values for DscConfigurationProvisioningState.
     * Possible values include: 'Succeeded'
     * @readonly
     * @enum {string}
     */
    var DscConfigurationProvisioningState;
    (function (DscConfigurationProvisioningState) {
        DscConfigurationProvisioningState["Succeeded"] = "Succeeded";
    })(DscConfigurationProvisioningState || (DscConfigurationProvisioningState = {}));
    /**
     * Defines values for DscConfigurationState.
     * Possible values include: 'New', 'Edit', 'Published'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DscConfigurationState =
     * <DscConfigurationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DscConfigurationState;
    (function (DscConfigurationState) {
        DscConfigurationState["New"] = "New";
        DscConfigurationState["Edit"] = "Edit";
        DscConfigurationState["Published"] = "Published";
    })(DscConfigurationState || (DscConfigurationState = {}));
    /**
     * Defines values for GroupTypeEnum.
     * Possible values include: 'User', 'System'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: GroupTypeEnum =
     * <GroupTypeEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var GroupTypeEnum;
    (function (GroupTypeEnum) {
        GroupTypeEnum["User"] = "User";
        GroupTypeEnum["System"] = "System";
    })(GroupTypeEnum || (GroupTypeEnum = {}));
    /**
     * Defines values for ModuleProvisioningState.
     * Possible values include: 'Created', 'Creating',
     * 'StartingImportModuleRunbook', 'RunningImportModuleRunbook',
     * 'ContentRetrieved', 'ContentDownloaded', 'ContentValidated',
     * 'ConnectionTypeImported', 'ContentStored', 'ModuleDataStored',
     * 'ActivitiesStored', 'ModuleImportRunbookComplete', 'Succeeded', 'Failed',
     * 'Cancelled', 'Updating'
     * @readonly
     * @enum {string}
     */
    var ModuleProvisioningState;
    (function (ModuleProvisioningState) {
        ModuleProvisioningState["Created"] = "Created";
        ModuleProvisioningState["Creating"] = "Creating";
        ModuleProvisioningState["StartingImportModuleRunbook"] = "StartingImportModuleRunbook";
        ModuleProvisioningState["RunningImportModuleRunbook"] = "RunningImportModuleRunbook";
        ModuleProvisioningState["ContentRetrieved"] = "ContentRetrieved";
        ModuleProvisioningState["ContentDownloaded"] = "ContentDownloaded";
        ModuleProvisioningState["ContentValidated"] = "ContentValidated";
        ModuleProvisioningState["ConnectionTypeImported"] = "ConnectionTypeImported";
        ModuleProvisioningState["ContentStored"] = "ContentStored";
        ModuleProvisioningState["ModuleDataStored"] = "ModuleDataStored";
        ModuleProvisioningState["ActivitiesStored"] = "ActivitiesStored";
        ModuleProvisioningState["ModuleImportRunbookComplete"] = "ModuleImportRunbookComplete";
        ModuleProvisioningState["Succeeded"] = "Succeeded";
        ModuleProvisioningState["Failed"] = "Failed";
        ModuleProvisioningState["Cancelled"] = "Cancelled";
        ModuleProvisioningState["Updating"] = "Updating";
    })(ModuleProvisioningState || (ModuleProvisioningState = {}));
    /**
     * Defines values for ScheduleDay.
     * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
     * 'Friday', 'Saturday', 'Sunday'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ScheduleDay =
     * <ScheduleDay>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ScheduleDay;
    (function (ScheduleDay) {
        ScheduleDay["Monday"] = "Monday";
        ScheduleDay["Tuesday"] = "Tuesday";
        ScheduleDay["Wednesday"] = "Wednesday";
        ScheduleDay["Thursday"] = "Thursday";
        ScheduleDay["Friday"] = "Friday";
        ScheduleDay["Saturday"] = "Saturday";
        ScheduleDay["Sunday"] = "Sunday";
    })(ScheduleDay || (ScheduleDay = {}));
    /**
     * Defines values for ScheduleFrequency.
     * Possible values include: 'OneTime', 'Day', 'Hour', 'Week', 'Month'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ScheduleFrequency =
     * <ScheduleFrequency>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ScheduleFrequency;
    (function (ScheduleFrequency) {
        ScheduleFrequency["OneTime"] = "OneTime";
        ScheduleFrequency["Day"] = "Day";
        ScheduleFrequency["Hour"] = "Hour";
        ScheduleFrequency["Week"] = "Week";
        ScheduleFrequency["Month"] = "Month";
    })(ScheduleFrequency || (ScheduleFrequency = {}));
    /**
     * Defines values for OperatingSystemType.
     * Possible values include: 'Windows', 'Linux'
     * @readonly
     * @enum {string}
     */
    var OperatingSystemType;
    (function (OperatingSystemType) {
        OperatingSystemType["Windows"] = "Windows";
        OperatingSystemType["Linux"] = "Linux";
    })(OperatingSystemType || (OperatingSystemType = {}));
    /**
     * Defines values for WindowsUpdateClasses.
     * Possible values include: 'Unclassified', 'Critical', 'Security',
     * 'UpdateRollup', 'FeaturePack', 'ServicePack', 'Definition', 'Tools',
     * 'Updates'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WindowsUpdateClasses =
     * <WindowsUpdateClasses>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WindowsUpdateClasses;
    (function (WindowsUpdateClasses) {
        WindowsUpdateClasses["Unclassified"] = "Unclassified";
        WindowsUpdateClasses["Critical"] = "Critical";
        WindowsUpdateClasses["Security"] = "Security";
        WindowsUpdateClasses["UpdateRollup"] = "UpdateRollup";
        WindowsUpdateClasses["FeaturePack"] = "FeaturePack";
        WindowsUpdateClasses["ServicePack"] = "ServicePack";
        WindowsUpdateClasses["Definition"] = "Definition";
        WindowsUpdateClasses["Tools"] = "Tools";
        WindowsUpdateClasses["Updates"] = "Updates";
    })(WindowsUpdateClasses || (WindowsUpdateClasses = {}));
    /**
     * Defines values for LinuxUpdateClasses.
     * Possible values include: 'Unclassified', 'Critical', 'Security', 'Other'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LinuxUpdateClasses =
     * <LinuxUpdateClasses>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LinuxUpdateClasses;
    (function (LinuxUpdateClasses) {
        LinuxUpdateClasses["Unclassified"] = "Unclassified";
        LinuxUpdateClasses["Critical"] = "Critical";
        LinuxUpdateClasses["Security"] = "Security";
        LinuxUpdateClasses["Other"] = "Other";
    })(LinuxUpdateClasses || (LinuxUpdateClasses = {}));
    /**
     * Defines values for TagOperators.
     * Possible values include: 'All', 'Any'
     * @readonly
     * @enum {string}
     */
    var TagOperators;
    (function (TagOperators) {
        TagOperators["All"] = "All";
        TagOperators["Any"] = "Any";
    })(TagOperators || (TagOperators = {}));
    /**
     * Defines values for SourceType.
     * Possible values include: 'VsoGit', 'VsoTfvc', 'GitHub'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SourceType = <SourceType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SourceType;
    (function (SourceType) {
        SourceType["VsoGit"] = "VsoGit";
        SourceType["VsoTfvc"] = "VsoTfvc";
        SourceType["GitHub"] = "GitHub";
    })(SourceType || (SourceType = {}));
    /**
     * Defines values for TokenType.
     * Possible values include: 'PersonalAccessToken', 'Oauth'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TokenType = <TokenType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TokenType;
    (function (TokenType) {
        TokenType["PersonalAccessToken"] = "PersonalAccessToken";
        TokenType["Oauth"] = "Oauth";
    })(TokenType || (TokenType = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Completed', 'Failed', 'Running'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Completed"] = "Completed";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Running"] = "Running";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for SyncType.
     * Possible values include: 'PartialSync', 'FullSync'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncType = <SyncType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncType;
    (function (SyncType) {
        SyncType["PartialSync"] = "PartialSync";
        SyncType["FullSync"] = "FullSync";
    })(SyncType || (SyncType = {}));
    /**
     * Defines values for StreamType.
     * Possible values include: 'Error', 'Output'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StreamType = <StreamType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StreamType;
    (function (StreamType) {
        StreamType["Error"] = "Error";
        StreamType["Output"] = "Output";
    })(StreamType || (StreamType = {}));
    /**
     * Defines values for JobStreamType.
     * Possible values include: 'Progress', 'Output', 'Warning', 'Error', 'Debug',
     * 'Verbose', 'Any'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobStreamType =
     * <JobStreamType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobStreamType;
    (function (JobStreamType) {
        JobStreamType["Progress"] = "Progress";
        JobStreamType["Output"] = "Output";
        JobStreamType["Warning"] = "Warning";
        JobStreamType["Error"] = "Error";
        JobStreamType["Debug"] = "Debug";
        JobStreamType["Verbose"] = "Verbose";
        JobStreamType["Any"] = "Any";
    })(JobStreamType || (JobStreamType = {}));
    /**
     * Defines values for JobStatus.
     * Possible values include: 'New', 'Activating', 'Running', 'Completed',
     * 'Failed', 'Stopped', 'Blocked', 'Suspended', 'Disconnected', 'Suspending',
     * 'Stopping', 'Resuming', 'Removing'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobStatus = <JobStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobStatus;
    (function (JobStatus) {
        JobStatus["New"] = "New";
        JobStatus["Activating"] = "Activating";
        JobStatus["Running"] = "Running";
        JobStatus["Completed"] = "Completed";
        JobStatus["Failed"] = "Failed";
        JobStatus["Stopped"] = "Stopped";
        JobStatus["Blocked"] = "Blocked";
        JobStatus["Suspended"] = "Suspended";
        JobStatus["Disconnected"] = "Disconnected";
        JobStatus["Suspending"] = "Suspending";
        JobStatus["Stopping"] = "Stopping";
        JobStatus["Resuming"] = "Resuming";
        JobStatus["Removing"] = "Removing";
    })(JobStatus || (JobStatus = {}));
    /**
     * Defines values for JobProvisioningState.
     * Possible values include: 'Failed', 'Succeeded', 'Suspended', 'Processing'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobProvisioningState =
     * <JobProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobProvisioningState;
    (function (JobProvisioningState) {
        JobProvisioningState["Failed"] = "Failed";
        JobProvisioningState["Succeeded"] = "Succeeded";
        JobProvisioningState["Suspended"] = "Suspended";
        JobProvisioningState["Processing"] = "Processing";
    })(JobProvisioningState || (JobProvisioningState = {}));
    /**
     * Defines values for AgentRegistrationKeyName.
     * Possible values include: 'primary', 'secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AgentRegistrationKeyName =
     * <AgentRegistrationKeyName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AgentRegistrationKeyName;
    (function (AgentRegistrationKeyName) {
        AgentRegistrationKeyName["Primary"] = "primary";
        AgentRegistrationKeyName["Secondary"] = "secondary";
    })(AgentRegistrationKeyName || (AgentRegistrationKeyName = {}));
    /**
     * Defines values for RunbookTypeEnum.
     * Possible values include: 'Script', 'Graph', 'PowerShellWorkflow',
     * 'PowerShell', 'GraphPowerShellWorkflow', 'GraphPowerShell'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunbookTypeEnum =
     * <RunbookTypeEnum>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunbookTypeEnum;
    (function (RunbookTypeEnum) {
        RunbookTypeEnum["Script"] = "Script";
        RunbookTypeEnum["Graph"] = "Graph";
        RunbookTypeEnum["PowerShellWorkflow"] = "PowerShellWorkflow";
        RunbookTypeEnum["PowerShell"] = "PowerShell";
        RunbookTypeEnum["GraphPowerShellWorkflow"] = "GraphPowerShellWorkflow";
        RunbookTypeEnum["GraphPowerShell"] = "GraphPowerShell";
    })(RunbookTypeEnum || (RunbookTypeEnum = {}));
    /**
     * Defines values for RunbookState.
     * Possible values include: 'New', 'Edit', 'Published'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RunbookState =
     * <RunbookState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RunbookState;
    (function (RunbookState) {
        RunbookState["New"] = "New";
        RunbookState["Edit"] = "Edit";
        RunbookState["Published"] = "Published";
    })(RunbookState || (RunbookState = {}));
    /**
     * Defines values for RunbookProvisioningState.
     * Possible values include: 'Succeeded'
     * @readonly
     * @enum {string}
     */
    var RunbookProvisioningState;
    (function (RunbookProvisioningState) {
        RunbookProvisioningState["Succeeded"] = "Succeeded";
    })(RunbookProvisioningState || (RunbookProvisioningState = {}));
    /**
     * Defines values for HttpStatusCode.
     * Possible values include: 'Continue', 'SwitchingProtocols', 'OK', 'Created',
     * 'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent',
     * 'PartialContent', 'MultipleChoices', 'Ambiguous', 'MovedPermanently',
     * 'Moved', 'Found', 'Redirect', 'SeeOther', 'RedirectMethod', 'NotModified',
     * 'UseProxy', 'Unused', 'TemporaryRedirect', 'RedirectKeepVerb', 'BadRequest',
     * 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound',
     * 'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired',
     * 'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired',
     * 'PreconditionFailed', 'RequestEntityTooLarge', 'RequestUriTooLong',
     * 'UnsupportedMediaType', 'RequestedRangeNotSatisfiable', 'ExpectationFailed',
     * 'UpgradeRequired', 'InternalServerError', 'NotImplemented', 'BadGateway',
     * 'ServiceUnavailable', 'GatewayTimeout', 'HttpVersionNotSupported'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HttpStatusCode =
     * <HttpStatusCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HttpStatusCode;
    (function (HttpStatusCode) {
        HttpStatusCode["Continue"] = "Continue";
        HttpStatusCode["SwitchingProtocols"] = "SwitchingProtocols";
        HttpStatusCode["OK"] = "OK";
        HttpStatusCode["Created"] = "Created";
        HttpStatusCode["Accepted"] = "Accepted";
        HttpStatusCode["NonAuthoritativeInformation"] = "NonAuthoritativeInformation";
        HttpStatusCode["NoContent"] = "NoContent";
        HttpStatusCode["ResetContent"] = "ResetContent";
        HttpStatusCode["PartialContent"] = "PartialContent";
        HttpStatusCode["MultipleChoices"] = "MultipleChoices";
        HttpStatusCode["Ambiguous"] = "Ambiguous";
        HttpStatusCode["MovedPermanently"] = "MovedPermanently";
        HttpStatusCode["Moved"] = "Moved";
        HttpStatusCode["Found"] = "Found";
        HttpStatusCode["Redirect"] = "Redirect";
        HttpStatusCode["SeeOther"] = "SeeOther";
        HttpStatusCode["RedirectMethod"] = "RedirectMethod";
        HttpStatusCode["NotModified"] = "NotModified";
        HttpStatusCode["UseProxy"] = "UseProxy";
        HttpStatusCode["Unused"] = "Unused";
        HttpStatusCode["TemporaryRedirect"] = "TemporaryRedirect";
        HttpStatusCode["RedirectKeepVerb"] = "RedirectKeepVerb";
        HttpStatusCode["BadRequest"] = "BadRequest";
        HttpStatusCode["Unauthorized"] = "Unauthorized";
        HttpStatusCode["PaymentRequired"] = "PaymentRequired";
        HttpStatusCode["Forbidden"] = "Forbidden";
        HttpStatusCode["NotFound"] = "NotFound";
        HttpStatusCode["MethodNotAllowed"] = "MethodNotAllowed";
        HttpStatusCode["NotAcceptable"] = "NotAcceptable";
        HttpStatusCode["ProxyAuthenticationRequired"] = "ProxyAuthenticationRequired";
        HttpStatusCode["RequestTimeout"] = "RequestTimeout";
        HttpStatusCode["Conflict"] = "Conflict";
        HttpStatusCode["Gone"] = "Gone";
        HttpStatusCode["LengthRequired"] = "LengthRequired";
        HttpStatusCode["PreconditionFailed"] = "PreconditionFailed";
        HttpStatusCode["RequestEntityTooLarge"] = "RequestEntityTooLarge";
        HttpStatusCode["RequestUriTooLong"] = "RequestUriTooLong";
        HttpStatusCode["UnsupportedMediaType"] = "UnsupportedMediaType";
        HttpStatusCode["RequestedRangeNotSatisfiable"] = "RequestedRangeNotSatisfiable";
        HttpStatusCode["ExpectationFailed"] = "ExpectationFailed";
        HttpStatusCode["UpgradeRequired"] = "UpgradeRequired";
        HttpStatusCode["InternalServerError"] = "InternalServerError";
        HttpStatusCode["NotImplemented"] = "NotImplemented";
        HttpStatusCode["BadGateway"] = "BadGateway";
        HttpStatusCode["ServiceUnavailable"] = "ServiceUnavailable";
        HttpStatusCode["GatewayTimeout"] = "GatewayTimeout";
        HttpStatusCode["HttpVersionNotSupported"] = "HttpVersionNotSupported";
    })(HttpStatusCode || (HttpStatusCode = {}));
    /**
     * Defines values for CountType.
     * Possible values include: 'status', 'nodeconfiguration'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CountType = <CountType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CountType;
    (function (CountType) {
        CountType["Status"] = "status";
        CountType["Nodeconfiguration"] = "nodeconfiguration";
    })(CountType || (CountType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get SkuNameEnum () { return SkuNameEnum; },
        get AutomationAccountState () { return AutomationAccountState; },
        get AutomationKeyName () { return AutomationKeyName; },
        get AutomationKeyPermissions () { return AutomationKeyPermissions; },
        get ContentSourceType () { return ContentSourceType; },
        get DscConfigurationProvisioningState () { return DscConfigurationProvisioningState; },
        get DscConfigurationState () { return DscConfigurationState; },
        get GroupTypeEnum () { return GroupTypeEnum; },
        get ModuleProvisioningState () { return ModuleProvisioningState; },
        get ScheduleDay () { return ScheduleDay; },
        get ScheduleFrequency () { return ScheduleFrequency; },
        get OperatingSystemType () { return OperatingSystemType; },
        get WindowsUpdateClasses () { return WindowsUpdateClasses; },
        get LinuxUpdateClasses () { return LinuxUpdateClasses; },
        get TagOperators () { return TagOperators; },
        get SourceType () { return SourceType; },
        get TokenType () { return TokenType; },
        get ProvisioningState () { return ProvisioningState; },
        get SyncType () { return SyncType; },
        get StreamType () { return StreamType; },
        get JobStreamType () { return JobStreamType; },
        get JobStatus () { return JobStatus; },
        get JobProvisioningState () { return JobProvisioningState; },
        get AgentRegistrationKeyName () { return AgentRegistrationKeyName; },
        get RunbookTypeEnum () { return RunbookTypeEnum; },
        get RunbookState () { return RunbookState; },
        get RunbookProvisioningState () { return RunbookProvisioningState; },
        get HttpStatusCode () { return HttpStatusCode; },
        get CountType () { return CountType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AutomationAccount = {
        serializedName: "AutomationAccount",
        type: {
            name: "Composite",
            className: "AutomationAccount",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, lastModifiedBy: {
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AutomationAccountCreateOrUpdateParameters = {
        serializedName: "AutomationAccountCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "AutomationAccountCreateOrUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var Statistics = {
        serializedName: "Statistics",
        type: {
            name: "Composite",
            className: "Statistics",
            modelProperties: {
                counterProperty: {
                    readOnly: true,
                    serializedName: "counterProperty",
                    type: {
                        name: "String"
                    }
                },
                counterValue: {
                    readOnly: true,
                    serializedName: "counterValue",
                    type: {
                        name: "Number"
                    }
                },
                startTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageCounterName = {
        serializedName: "UsageCounterName",
        type: {
            name: "Composite",
            className: "UsageCounterName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageCounterName"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                throttleStatus: {
                    serializedName: "throttleStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Key = {
        serializedName: "Key",
        type: {
            name: "Composite",
            className: "Key",
            modelProperties: {
                keyName: {
                    readOnly: true,
                    serializedName: "KeyName",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    readOnly: true,
                    serializedName: "Permissions",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyListResult = {
        serializedName: "KeyListResult",
        type: {
            name: "Composite",
            className: "KeyListResult",
            modelProperties: {
                keys: {
                    serializedName: "keys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Key"
                            }
                        }
                    }
                }
            }
        }
    };
    var AutomationAccountUpdateParameters = {
        serializedName: "AutomationAccountUpdateParameters",
        type: {
            name: "Composite",
            className: "AutomationAccountUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateCreateOrUpdateParameters = {
        serializedName: "CertificateCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "CertificateCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                base64Value: {
                    required: true,
                    serializedName: "properties.base64Value",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                thumbprint: {
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                },
                isExportable: {
                    nullable: false,
                    serializedName: "properties.isExportable",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Certificate = {
        serializedName: "Certificate",
        type: {
            name: "Composite",
            className: "Certificate",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { thumbprint: {
                    readOnly: true,
                    serializedName: "properties.thumbprint",
                    type: {
                        name: "String"
                    }
                }, expiryTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                }, isExportable: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.isExportable",
                    type: {
                        name: "Boolean"
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CertificateUpdateParameters = {
        serializedName: "CertificateUpdateParameters",
        type: {
            name: "Composite",
            className: "CertificateUpdateParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionTypeAssociationProperty = {
        serializedName: "ConnectionTypeAssociationProperty",
        type: {
            name: "Composite",
            className: "ConnectionTypeAssociationProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionCreateOrUpdateParameters = {
        serializedName: "ConnectionCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "ConnectionCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                connectionType: {
                    required: true,
                    serializedName: "properties.connectionType",
                    type: {
                        name: "Composite",
                        className: "ConnectionTypeAssociationProperty"
                    }
                },
                fieldDefinitionValues: {
                    serializedName: "properties.fieldDefinitionValues",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Connection = {
        serializedName: "Connection",
        type: {
            name: "Composite",
            className: "Connection",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { connectionType: {
                    serializedName: "properties.connectionType",
                    type: {
                        name: "Composite",
                        className: "ConnectionTypeAssociationProperty"
                    }
                }, fieldDefinitionValues: {
                    readOnly: true,
                    serializedName: "properties.fieldDefinitionValues",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ConnectionUpdateParameters = {
        serializedName: "ConnectionUpdateParameters",
        type: {
            name: "Composite",
            className: "ConnectionUpdateParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                fieldDefinitionValues: {
                    serializedName: "properties.fieldDefinitionValues",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var FieldDefinition = {
        serializedName: "FieldDefinition",
        type: {
            name: "Composite",
            className: "FieldDefinition",
            modelProperties: {
                isEncrypted: {
                    serializedName: "isEncrypted",
                    type: {
                        name: "Boolean"
                    }
                },
                isOptional: {
                    serializedName: "isOptional",
                    type: {
                        name: "Boolean"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionType = {
        serializedName: "ConnectionType",
        type: {
            name: "Composite",
            className: "ConnectionType",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                isGlobal: {
                    serializedName: "properties.isGlobal",
                    type: {
                        name: "Boolean"
                    }
                },
                fieldDefinitions: {
                    readOnly: true,
                    serializedName: "properties.fieldDefinitions",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "FieldDefinition"
                            }
                        }
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionTypeCreateOrUpdateParameters = {
        serializedName: "ConnectionTypeCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "ConnectionTypeCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isGlobal: {
                    serializedName: "properties.isGlobal",
                    type: {
                        name: "Boolean"
                    }
                },
                fieldDefinitions: {
                    required: true,
                    serializedName: "properties.fieldDefinitions",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "FieldDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var CredentialCreateOrUpdateParameters = {
        serializedName: "CredentialCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "CredentialCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                userName: {
                    required: true,
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Credential = {
        serializedName: "Credential",
        type: {
            name: "Composite",
            className: "Credential",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { userName: {
                    readOnly: true,
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CredentialUpdateParameters = {
        serializedName: "CredentialUpdateParameters",
        type: {
            name: "Composite",
            className: "CredentialUpdateParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentHash = {
        serializedName: "ContentHash",
        type: {
            name: "Composite",
            className: "ContentHash",
            modelProperties: {
                algorithm: {
                    required: true,
                    serializedName: "algorithm",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentSource = {
        serializedName: "ContentSource",
        type: {
            name: "Composite",
            className: "ContentSource",
            modelProperties: {
                hash: {
                    serializedName: "hash",
                    type: {
                        name: "Composite",
                        className: "ContentHash"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscConfigurationParameter = {
        serializedName: "DscConfigurationParameter",
        type: {
            name: "Composite",
            className: "DscConfigurationParameter",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                isMandatory: {
                    serializedName: "isMandatory",
                    type: {
                        name: "Boolean"
                    }
                },
                position: {
                    serializedName: "position",
                    type: {
                        name: "Number"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscConfigurationCreateOrUpdateParameters = {
        serializedName: "DscConfigurationCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "DscConfigurationCreateOrUpdateParameters",
            modelProperties: {
                logVerbose: {
                    serializedName: "properties.logVerbose",
                    type: {
                        name: "Boolean"
                    }
                },
                logProgress: {
                    serializedName: "properties.logProgress",
                    type: {
                        name: "Boolean"
                    }
                },
                source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "ContentSource"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "DscConfigurationParameter"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DscConfiguration = {
        serializedName: "DscConfiguration",
        type: {
            name: "Composite",
            className: "DscConfiguration",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded"
                        ]
                    }
                }, jobCount: {
                    serializedName: "properties.jobCount",
                    type: {
                        name: "Number"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "DscConfigurationParameter"
                            }
                        }
                    }
                }, source: {
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "ContentSource"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, logVerbose: {
                    serializedName: "properties.logVerbose",
                    type: {
                        name: "Boolean"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, nodeConfigurationCount: {
                    nullable: false,
                    serializedName: "properties.nodeConfigurationCount",
                    type: {
                        name: "Number"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DscConfigurationUpdateParameters = {
        serializedName: "DscConfigurationUpdateParameters",
        type: {
            name: "Composite",
            className: "DscConfigurationUpdateParameters",
            modelProperties: {
                logVerbose: {
                    serializedName: "properties.logVerbose",
                    type: {
                        name: "Boolean"
                    }
                },
                logProgress: {
                    serializedName: "properties.logProgress",
                    type: {
                        name: "Boolean"
                    }
                },
                source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "ContentSource"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "DscConfigurationParameter"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunAsCredentialAssociationProperty = {
        serializedName: "RunAsCredentialAssociationProperty",
        type: {
            name: "Composite",
            className: "RunAsCredentialAssociationProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HybridRunbookWorker = {
        serializedName: "HybridRunbookWorker",
        type: {
            name: "Composite",
            className: "HybridRunbookWorker",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "String"
                    }
                },
                registrationTime: {
                    nullable: false,
                    serializedName: "registrationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastSeenDateTime: {
                    nullable: false,
                    serializedName: "lastSeenDateTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var HybridRunbookWorkerGroup = {
        serializedName: "HybridRunbookWorkerGroup",
        type: {
            name: "Composite",
            className: "HybridRunbookWorkerGroup",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                hybridRunbookWorkers: {
                    serializedName: "hybridRunbookWorkers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HybridRunbookWorker"
                            }
                        }
                    }
                },
                credential: {
                    serializedName: "credential",
                    type: {
                        name: "Composite",
                        className: "RunAsCredentialAssociationProperty"
                    }
                },
                groupType: {
                    serializedName: "groupType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HybridRunbookWorkerGroupUpdateParameters = {
        serializedName: "HybridRunbookWorkerGroupUpdateParameters",
        type: {
            name: "Composite",
            className: "HybridRunbookWorkerGroupUpdateParameters",
            modelProperties: {
                credential: {
                    serializedName: "credential",
                    type: {
                        name: "Composite",
                        className: "RunAsCredentialAssociationProperty"
                    }
                }
            }
        }
    };
    var ScheduleAssociationProperty = {
        serializedName: "ScheduleAssociationProperty",
        type: {
            name: "Composite",
            className: "ScheduleAssociationProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunbookAssociationProperty = {
        serializedName: "RunbookAssociationProperty",
        type: {
            name: "Composite",
            className: "RunbookAssociationProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobSchedule = {
        serializedName: "JobSchedule",
        type: {
            name: "Composite",
            className: "JobSchedule",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                jobScheduleId: {
                    serializedName: "properties.jobScheduleId",
                    type: {
                        name: "String"
                    }
                },
                schedule: {
                    serializedName: "properties.schedule",
                    type: {
                        name: "Composite",
                        className: "ScheduleAssociationProperty"
                    }
                },
                runbook: {
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                },
                runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobScheduleCreateParameters = {
        serializedName: "JobScheduleCreateParameters",
        type: {
            name: "Composite",
            className: "JobScheduleCreateParameters",
            modelProperties: {
                schedule: {
                    required: true,
                    serializedName: "properties.schedule",
                    type: {
                        name: "Composite",
                        className: "ScheduleAssociationProperty"
                    }
                },
                runbook: {
                    required: true,
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                },
                runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var LinkedWorkspace = {
        serializedName: "LinkedWorkspace",
        type: {
            name: "Composite",
            className: "LinkedWorkspace",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivityParameterValidationSet = {
        serializedName: "ActivityParameterValidationSet",
        type: {
            name: "Composite",
            className: "ActivityParameterValidationSet",
            modelProperties: {
                memberValue: {
                    serializedName: "memberValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivityParameter = {
        serializedName: "ActivityParameter",
        type: {
            name: "Composite",
            className: "ActivityParameter",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                isMandatory: {
                    serializedName: "isMandatory",
                    type: {
                        name: "Boolean"
                    }
                },
                isDynamic: {
                    serializedName: "isDynamic",
                    type: {
                        name: "Boolean"
                    }
                },
                position: {
                    serializedName: "position",
                    type: {
                        name: "Number"
                    }
                },
                valueFromPipeline: {
                    serializedName: "valueFromPipeline",
                    type: {
                        name: "Boolean"
                    }
                },
                valueFromPipelineByPropertyName: {
                    serializedName: "valueFromPipelineByPropertyName",
                    type: {
                        name: "Boolean"
                    }
                },
                valueFromRemainingArguments: {
                    serializedName: "valueFromRemainingArguments",
                    type: {
                        name: "Boolean"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                validationSet: {
                    serializedName: "validationSet",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityParameterValidationSet"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActivityParameterSet = {
        serializedName: "ActivityParameterSet",
        type: {
            name: "Composite",
            className: "ActivityParameterSet",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityParameter"
                            }
                        }
                    }
                }
            }
        }
    };
    var ActivityOutputType = {
        serializedName: "ActivityOutputType",
        type: {
            name: "Composite",
            className: "ActivityOutputType",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Activity = {
        serializedName: "Activity",
        type: {
            name: "Composite",
            className: "Activity",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                definition: {
                    serializedName: "properties.definition",
                    type: {
                        name: "String"
                    }
                },
                parameterSets: {
                    serializedName: "properties.parameterSets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityParameterSet"
                            }
                        }
                    }
                },
                outputTypes: {
                    serializedName: "properties.outputTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ActivityOutputType"
                            }
                        }
                    }
                },
                creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ModuleErrorInfo = {
        serializedName: "ModuleErrorInfo",
        type: {
            name: "Composite",
            className: "ModuleErrorInfo",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentLink = {
        serializedName: "ContentLink",
        type: {
            name: "Composite",
            className: "ContentLink",
            modelProperties: {
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                contentHash: {
                    serializedName: "contentHash",
                    type: {
                        name: "Composite",
                        className: "ContentHash"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Module = {
        serializedName: "Module",
        type: {
            name: "Composite",
            className: "Module",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { isGlobal: {
                    serializedName: "properties.isGlobal",
                    type: {
                        name: "Boolean"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, sizeInBytes: {
                    serializedName: "properties.sizeInBytes",
                    type: {
                        name: "Number"
                    }
                }, activityCount: {
                    serializedName: "properties.activityCount",
                    type: {
                        name: "Number"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Created",
                            "Creating",
                            "StartingImportModuleRunbook",
                            "RunningImportModuleRunbook",
                            "ContentRetrieved",
                            "ContentDownloaded",
                            "ContentValidated",
                            "ConnectionTypeImported",
                            "ContentStored",
                            "ModuleDataStored",
                            "ActivitiesStored",
                            "ModuleImportRunbookComplete",
                            "Succeeded",
                            "Failed",
                            "Cancelled",
                            "Updating"
                        ]
                    }
                }, contentLink: {
                    serializedName: "properties.contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, error: {
                    serializedName: "properties.error",
                    type: {
                        name: "Composite",
                        className: "ModuleErrorInfo"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, isComposite: {
                    serializedName: "properties.isComposite",
                    type: {
                        name: "Boolean"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ModuleCreateOrUpdateParameters = {
        serializedName: "ModuleCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "ModuleCreateOrUpdateParameters",
            modelProperties: {
                contentLink: {
                    required: true,
                    serializedName: "properties.contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ModuleUpdateParameters = {
        serializedName: "ModuleUpdateParameters",
        type: {
            name: "Composite",
            className: "ModuleUpdateParameters",
            modelProperties: {
                contentLink: {
                    serializedName: "properties.contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TypeField = {
        serializedName: "TypeField",
        type: {
            name: "Composite",
            className: "TypeField",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdvancedScheduleMonthlyOccurrence = {
        serializedName: "AdvancedScheduleMonthlyOccurrence",
        type: {
            name: "Composite",
            className: "AdvancedScheduleMonthlyOccurrence",
            modelProperties: {
                occurrence: {
                    serializedName: "occurrence",
                    type: {
                        name: "Number"
                    }
                },
                day: {
                    serializedName: "day",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdvancedSchedule = {
        serializedName: "AdvancedSchedule",
        type: {
            name: "Composite",
            className: "AdvancedSchedule",
            modelProperties: {
                weekDays: {
                    serializedName: "weekDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                monthDays: {
                    serializedName: "monthDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                monthlyOccurrences: {
                    serializedName: "monthlyOccurrences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdvancedScheduleMonthlyOccurrence"
                            }
                        }
                    }
                }
            }
        }
    };
    var ScheduleCreateOrUpdateParameters = {
        serializedName: "ScheduleCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "ScheduleCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    required: true,
                    nullable: false,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expiryTime: {
                    nullable: true,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                interval: {
                    serializedName: "properties.interval",
                    type: {
                        name: "Object"
                    }
                },
                frequency: {
                    required: true,
                    serializedName: "properties.frequency",
                    type: {
                        name: "String"
                    }
                },
                timeZone: {
                    serializedName: "properties.timeZone",
                    type: {
                        name: "String"
                    }
                },
                advancedSchedule: {
                    serializedName: "properties.advancedSchedule",
                    type: {
                        name: "Composite",
                        className: "AdvancedSchedule"
                    }
                }
            }
        }
    };
    var ScheduleProperties = {
        serializedName: "ScheduleProperties",
        type: {
            name: "Composite",
            className: "ScheduleProperties",
            modelProperties: {
                startTime: {
                    nullable: false,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                startTimeOffsetMinutes: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "startTimeOffsetMinutes",
                    type: {
                        name: "Number"
                    }
                },
                expiryTime: {
                    nullable: true,
                    serializedName: "expiryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                expiryTimeOffsetMinutes: {
                    nullable: false,
                    serializedName: "expiryTimeOffsetMinutes",
                    type: {
                        name: "Number"
                    }
                },
                isEnabled: {
                    serializedName: "isEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                nextRun: {
                    nullable: true,
                    serializedName: "nextRun",
                    type: {
                        name: "DateTime"
                    }
                },
                nextRunOffsetMinutes: {
                    nullable: false,
                    serializedName: "nextRunOffsetMinutes",
                    type: {
                        name: "Number"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "Number"
                    }
                },
                frequency: {
                    serializedName: "frequency",
                    type: {
                        name: "String"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                advancedSchedule: {
                    serializedName: "advancedSchedule",
                    type: {
                        name: "Composite",
                        className: "AdvancedSchedule"
                    }
                },
                creationTime: {
                    nullable: false,
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Schedule = {
        serializedName: "Schedule",
        type: {
            name: "Composite",
            className: "Schedule",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { startTime: {
                    nullable: false,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, startTimeOffsetMinutes: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.startTimeOffsetMinutes",
                    type: {
                        name: "Number"
                    }
                }, expiryTime: {
                    nullable: true,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                }, expiryTimeOffsetMinutes: {
                    nullable: false,
                    serializedName: "properties.expiryTimeOffsetMinutes",
                    type: {
                        name: "Number"
                    }
                }, isEnabled: {
                    serializedName: "properties.isEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, nextRun: {
                    nullable: true,
                    serializedName: "properties.nextRun",
                    type: {
                        name: "DateTime"
                    }
                }, nextRunOffsetMinutes: {
                    nullable: false,
                    serializedName: "properties.nextRunOffsetMinutes",
                    type: {
                        name: "Number"
                    }
                }, interval: {
                    serializedName: "properties.interval",
                    type: {
                        name: "Number"
                    }
                }, frequency: {
                    serializedName: "properties.frequency",
                    type: {
                        name: "String"
                    }
                }, timeZone: {
                    serializedName: "properties.timeZone",
                    type: {
                        name: "String"
                    }
                }, advancedSchedule: {
                    serializedName: "properties.advancedSchedule",
                    type: {
                        name: "Composite",
                        className: "AdvancedSchedule"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ScheduleUpdateParameters = {
        serializedName: "ScheduleUpdateParameters",
        type: {
            name: "Composite",
            className: "ScheduleUpdateParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    serializedName: "properties.isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VariableCreateOrUpdateParameters = {
        serializedName: "VariableCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "VariableCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                isEncrypted: {
                    serializedName: "properties.isEncrypted",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Variable = {
        serializedName: "Variable",
        type: {
            name: "Composite",
            className: "Variable",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                }, isEncrypted: {
                    nullable: true,
                    serializedName: "properties.isEncrypted",
                    type: {
                        name: "Boolean"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VariableUpdateParameters = {
        serializedName: "VariableUpdateParameters",
        type: {
            name: "Composite",
            className: "VariableUpdateParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Webhook = {
        serializedName: "Webhook",
        type: {
            name: "Composite",
            className: "Webhook",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { isEnabled: {
                    serializedName: "properties.isEnabled",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, expiryTime: {
                    nullable: false,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastInvokedTime: {
                    nullable: true,
                    serializedName: "properties.lastInvokedTime",
                    type: {
                        name: "DateTime"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, runbook: {
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                }, runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedBy: {
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WebhookUpdateParameters = {
        serializedName: "WebhookUpdateParameters",
        type: {
            name: "Composite",
            className: "WebhookUpdateParameters",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    serializedName: "properties.isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebhookCreateOrUpdateParameters = {
        serializedName: "WebhookCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "WebhookCreateOrUpdateParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    serializedName: "properties.isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                },
                expiryTime: {
                    nullable: false,
                    serializedName: "properties.expiryTime",
                    type: {
                        name: "DateTime"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                runbook: {
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                },
                runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Watcher = {
        serializedName: "Watcher",
        type: {
            name: "Composite",
            className: "Watcher",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { executionFrequencyInSeconds: {
                    serializedName: "properties.executionFrequencyInSeconds",
                    type: {
                        name: "Number"
                    }
                }, scriptName: {
                    serializedName: "properties.scriptName",
                    type: {
                        name: "String"
                    }
                }, scriptParameters: {
                    serializedName: "properties.scriptParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, scriptRunOn: {
                    serializedName: "properties.scriptRunOn",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedBy: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WatcherUpdateParameters = {
        serializedName: "WatcherUpdateParameters",
        type: {
            name: "Composite",
            className: "WatcherUpdateParameters",
            modelProperties: {
                executionFrequencyInSeconds: {
                    serializedName: "properties.executionFrequencyInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WindowsProperties = {
        serializedName: "WindowsProperties",
        type: {
            name: "Composite",
            className: "WindowsProperties",
            modelProperties: {
                includedUpdateClassifications: {
                    serializedName: "includedUpdateClassifications",
                    type: {
                        name: "String"
                    }
                },
                excludedKbNumbers: {
                    serializedName: "excludedKbNumbers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                includedKbNumbers: {
                    serializedName: "includedKbNumbers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                rebootSetting: {
                    serializedName: "rebootSetting",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinuxProperties = {
        serializedName: "LinuxProperties",
        type: {
            name: "Composite",
            className: "LinuxProperties",
            modelProperties: {
                includedPackageClassifications: {
                    serializedName: "includedPackageClassifications",
                    type: {
                        name: "String"
                    }
                },
                excludedPackageNameMasks: {
                    serializedName: "excludedPackageNameMasks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                includedPackageNameMasks: {
                    serializedName: "includedPackageNameMasks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                rebootSetting: {
                    serializedName: "rebootSetting",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagSettingsProperties = {
        serializedName: "TagSettingsProperties",
        type: {
            name: "Composite",
            className: "TagSettingsProperties",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                filterOperator: {
                    serializedName: "filterOperator",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "All",
                            "Any"
                        ]
                    }
                }
            }
        }
    };
    var AzureQueryProperties = {
        serializedName: "AzureQueryProperties",
        type: {
            name: "Composite",
            className: "AzureQueryProperties",
            modelProperties: {
                scope: {
                    serializedName: "scope",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tagSettings: {
                    serializedName: "tagSettings",
                    type: {
                        name: "Composite",
                        className: "TagSettingsProperties"
                    }
                }
            }
        }
    };
    var TargetProperties = {
        serializedName: "TargetProperties",
        type: {
            name: "Composite",
            className: "TargetProperties",
            modelProperties: {
                azureQueries: {
                    serializedName: "azureQueries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureQueryProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateConfiguration = {
        serializedName: "updateConfiguration",
        type: {
            name: "Composite",
            className: "UpdateConfiguration",
            modelProperties: {
                operatingSystem: {
                    required: true,
                    serializedName: "operatingSystem",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                windows: {
                    serializedName: "windows",
                    type: {
                        name: "Composite",
                        className: "WindowsProperties"
                    }
                },
                linux: {
                    serializedName: "linux",
                    type: {
                        name: "Composite",
                        className: "LinuxProperties"
                    }
                },
                duration: {
                    serializedName: "duration",
                    type: {
                        name: "TimeSpan"
                    }
                },
                azureVirtualMachines: {
                    serializedName: "azureVirtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                nonAzureComputerNames: {
                    serializedName: "nonAzureComputerNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targets: {
                    serializedName: "targets",
                    type: {
                        name: "Composite",
                        className: "TargetProperties"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfiguration = {
        serializedName: "softwareUpdateConfiguration",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfiguration",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                updateConfiguration: {
                    required: true,
                    serializedName: "properties.updateConfiguration",
                    type: {
                        name: "Composite",
                        className: "UpdateConfiguration"
                    }
                },
                scheduleInfo: {
                    required: true,
                    serializedName: "properties.scheduleInfo",
                    type: {
                        name: "Composite",
                        className: "ScheduleProperties"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "properties.error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                createdBy: {
                    readOnly: true,
                    serializedName: "properties.createdBy",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedBy: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CollectionItemUpdateConfiguration = {
        serializedName: "collectionItemUpdateConfiguration",
        type: {
            name: "Composite",
            className: "CollectionItemUpdateConfiguration",
            modelProperties: {
                azureVirtualMachines: {
                    serializedName: "azureVirtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                duration: {
                    serializedName: "duration",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfigurationCollectionItem = {
        serializedName: "softwareUpdateConfigurationCollectionItem",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfigurationCollectionItem",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                updateConfiguration: {
                    serializedName: "properties.updateConfiguration",
                    type: {
                        name: "Composite",
                        className: "CollectionItemUpdateConfiguration"
                    }
                },
                frequency: {
                    serializedName: "properties.frequency",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    nullable: false,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                nextRun: {
                    nullable: true,
                    serializedName: "properties.nextRun",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfigurationListResult = {
        serializedName: "softwareUpdateConfigurationListResult",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SoftwareUpdateConfigurationCollectionItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var UpdateConfigurationNavigation = {
        serializedName: "updateConfigurationNavigation",
        type: {
            name: "Composite",
            className: "UpdateConfigurationNavigation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfigurationRun = {
        serializedName: "softwareUpdateConfigurationRun",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfigurationRun",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                softwareUpdateConfiguration: {
                    serializedName: "properties.softwareUpdateConfiguration",
                    type: {
                        name: "Composite",
                        className: "UpdateConfigurationNavigation"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                configuredDuration: {
                    readOnly: true,
                    serializedName: "properties.configuredDuration",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    readOnly: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                computerCount: {
                    readOnly: true,
                    serializedName: "properties.computerCount",
                    type: {
                        name: "Number"
                    }
                },
                failedCount: {
                    readOnly: true,
                    serializedName: "properties.failedCount",
                    type: {
                        name: "Number"
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                createdBy: {
                    readOnly: true,
                    serializedName: "properties.createdBy",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedBy: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfigurationRunListResult = {
        serializedName: "softwareUpdateConfigurationRunListResult",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfigurationRunListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SoftwareUpdateConfigurationRun"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobNavigation = {
        serializedName: "jobNavigation",
        type: {
            name: "Composite",
            className: "JobNavigation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfigurationMachineRun = {
        serializedName: "softwareUpdateConfigurationMachineRun",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfigurationMachineRun",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                targetComputer: {
                    readOnly: true,
                    serializedName: "properties.targetComputer",
                    type: {
                        name: "String"
                    }
                },
                targetComputerType: {
                    readOnly: true,
                    serializedName: "properties.targetComputerType",
                    type: {
                        name: "String"
                    }
                },
                softwareUpdateConfiguration: {
                    serializedName: "properties.softwareUpdateConfiguration",
                    type: {
                        name: "Composite",
                        className: "UpdateConfigurationNavigation"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    readOnly: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    readOnly: true,
                    serializedName: "properties.correlationId",
                    type: {
                        name: "Uuid"
                    }
                },
                sourceComputerId: {
                    readOnly: true,
                    serializedName: "properties.sourceComputerId",
                    type: {
                        name: "Uuid"
                    }
                },
                startTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                configuredDuration: {
                    readOnly: true,
                    serializedName: "properties.configuredDuration",
                    type: {
                        name: "String"
                    }
                },
                job: {
                    serializedName: "properties.job",
                    type: {
                        name: "Composite",
                        className: "JobNavigation"
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                createdBy: {
                    readOnly: true,
                    serializedName: "properties.createdBy",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedBy: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SoftwareUpdateConfigurationMachineRunListResult = {
        serializedName: "softwareUpdateConfigurationMachineRunListResult",
        type: {
            name: "Composite",
            className: "SoftwareUpdateConfigurationMachineRunListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SoftwareUpdateConfigurationMachineRun"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControl = {
        serializedName: "SourceControl",
        type: {
            name: "Composite",
            className: "SourceControl",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { repoUrl: {
                    serializedName: "properties.repoUrl",
                    type: {
                        name: "String"
                    }
                }, branch: {
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                }, folderPath: {
                    serializedName: "properties.folderPath",
                    type: {
                        name: "String"
                    }
                }, autoSync: {
                    serializedName: "properties.autoSync",
                    type: {
                        name: "Boolean"
                    }
                }, publishRunbook: {
                    serializedName: "properties.publishRunbook",
                    type: {
                        name: "Boolean"
                    }
                }, sourceType: {
                    serializedName: "properties.sourceType",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var SourceControlSecurityTokenProperties = {
        serializedName: "SourceControlSecurityTokenProperties",
        type: {
            name: "Composite",
            className: "SourceControlSecurityTokenProperties",
            modelProperties: {
                accessToken: {
                    serializedName: "accessToken",
                    constraints: {
                        MaxLength: 1024
                    },
                    type: {
                        name: "String"
                    }
                },
                refreshToken: {
                    serializedName: "refreshToken",
                    constraints: {
                        MaxLength: 1024
                    },
                    type: {
                        name: "String"
                    }
                },
                tokenType: {
                    serializedName: "tokenType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlUpdateParameters = {
        serializedName: "SourceControlUpdateParameters",
        type: {
            name: "Composite",
            className: "SourceControlUpdateParameters",
            modelProperties: {
                branch: {
                    serializedName: "properties.branch",
                    type: {
                        name: "String"
                    }
                },
                folderPath: {
                    serializedName: "properties.folderPath",
                    type: {
                        name: "String"
                    }
                },
                autoSync: {
                    serializedName: "properties.autoSync",
                    type: {
                        name: "Boolean"
                    }
                },
                publishRunbook: {
                    serializedName: "properties.publishRunbook",
                    type: {
                        name: "Boolean"
                    }
                },
                securityToken: {
                    serializedName: "properties.securityToken",
                    type: {
                        name: "Composite",
                        className: "SourceControlSecurityTokenProperties"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlCreateOrUpdateParameters = {
        serializedName: "SourceControlCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "SourceControlCreateOrUpdateParameters",
            modelProperties: {
                repoUrl: {
                    serializedName: "properties.repoUrl",
                    constraints: {
                        MaxLength: 2000
                    },
                    type: {
                        name: "String"
                    }
                },
                branch: {
                    serializedName: "properties.branch",
                    constraints: {
                        MaxLength: 255
                    },
                    type: {
                        name: "String"
                    }
                },
                folderPath: {
                    serializedName: "properties.folderPath",
                    constraints: {
                        MaxLength: 255
                    },
                    type: {
                        name: "String"
                    }
                },
                autoSync: {
                    serializedName: "properties.autoSync",
                    type: {
                        name: "Boolean"
                    }
                },
                publishRunbook: {
                    serializedName: "properties.publishRunbook",
                    type: {
                        name: "Boolean"
                    }
                },
                sourceType: {
                    serializedName: "properties.sourceType",
                    type: {
                        name: "String"
                    }
                },
                securityToken: {
                    serializedName: "properties.securityToken",
                    type: {
                        name: "Composite",
                        className: "SourceControlSecurityTokenProperties"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    constraints: {
                        MaxLength: 512
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJob = {
        serializedName: "SourceControlSyncJob",
        type: {
            name: "Composite",
            className: "SourceControlSyncJob",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                sourceControlSyncJobId: {
                    serializedName: "properties.sourceControlSyncJobId",
                    type: {
                        name: "String"
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                syncType: {
                    serializedName: "properties.syncType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJobCreateParameters = {
        serializedName: "SourceControlSyncJobCreateParameters",
        type: {
            name: "Composite",
            className: "SourceControlSyncJobCreateParameters",
            modelProperties: {
                commitId: {
                    required: true,
                    serializedName: "properties.commitId",
                    constraints: {
                        MinLength: 0
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJobById = {
        serializedName: "SourceControlSyncJobById",
        type: {
            name: "Composite",
            className: "SourceControlSyncJobById",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                sourceControlSyncJobId: {
                    serializedName: "properties.sourceControlSyncJobId",
                    type: {
                        name: "String"
                    }
                },
                creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                syncType: {
                    serializedName: "properties.syncType",
                    type: {
                        name: "String"
                    }
                },
                exception: {
                    serializedName: "properties.exception",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJobStream = {
        serializedName: "SourceControlSyncJobStream",
        type: {
            name: "Composite",
            className: "SourceControlSyncJobStream",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                sourceControlSyncJobStreamId: {
                    serializedName: "properties.sourceControlSyncJobStreamId",
                    type: {
                        name: "String"
                    }
                },
                summary: {
                    serializedName: "properties.summary",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.time",
                    type: {
                        name: "DateTime"
                    }
                },
                streamType: {
                    serializedName: "properties.streamType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJobStreamById = {
        serializedName: "SourceControlSyncJobStreamById",
        type: {
            name: "Composite",
            className: "SourceControlSyncJobStreamById",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                sourceControlSyncJobStreamId: {
                    serializedName: "properties.sourceControlSyncJobStreamId",
                    type: {
                        name: "String"
                    }
                },
                summary: {
                    serializedName: "properties.summary",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.time",
                    type: {
                        name: "DateTime"
                    }
                },
                streamType: {
                    serializedName: "properties.streamType",
                    type: {
                        name: "String"
                    }
                },
                streamText: {
                    serializedName: "properties.streamText",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "properties.value",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var JobStream = {
        serializedName: "JobStream",
        type: {
            name: "Composite",
            className: "JobStream",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                jobStreamId: {
                    serializedName: "properties.jobStreamId",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    nullable: false,
                    serializedName: "properties.time",
                    type: {
                        name: "DateTime"
                    }
                },
                streamType: {
                    serializedName: "properties.streamType",
                    type: {
                        name: "String"
                    }
                },
                streamText: {
                    serializedName: "properties.streamText",
                    type: {
                        name: "String"
                    }
                },
                summary: {
                    serializedName: "properties.summary",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "properties.value",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { runbook: {
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                }, startedBy: {
                    serializedName: "properties.startedBy",
                    type: {
                        name: "String"
                    }
                }, runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                }, jobId: {
                    nullable: false,
                    serializedName: "properties.jobId",
                    type: {
                        name: "Uuid"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    nullable: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    nullable: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, exception: {
                    serializedName: "properties.exception",
                    type: {
                        name: "String"
                    }
                }, lastModifiedTime: {
                    nullable: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastStatusModifiedTime: {
                    nullable: true,
                    serializedName: "properties.lastStatusModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobCollectionItem = {
        serializedName: "JobCollectionItem",
        type: {
            name: "Composite",
            className: "JobCollectionItem",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { runbook: {
                    readOnly: true,
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                }, jobId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.jobId",
                    type: {
                        name: "Uuid"
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JobCreateParameters = {
        serializedName: "JobCreateParameters",
        type: {
            name: "Composite",
            className: "JobCreateParameters",
            modelProperties: {
                runbook: {
                    serializedName: "properties.runbook",
                    type: {
                        name: "Composite",
                        className: "RunbookAssociationProperty"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscReportError = {
        serializedName: "DscReportError",
        type: {
            name: "Composite",
            className: "DscReportError",
            modelProperties: {
                errorSource: {
                    serializedName: "errorSource",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                errorCode: {
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                locale: {
                    serializedName: "locale",
                    type: {
                        name: "String"
                    }
                },
                errorDetails: {
                    serializedName: "errorDetails",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscReportResourceNavigation = {
        serializedName: "DscReportResourceNavigation",
        type: {
            name: "Composite",
            className: "DscReportResourceNavigation",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscReportResource = {
        serializedName: "DscReportResource",
        type: {
            name: "Composite",
            className: "DscReportResource",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                sourceInfo: {
                    serializedName: "sourceInfo",
                    type: {
                        name: "String"
                    }
                },
                dependsOn: {
                    serializedName: "dependsOn",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscReportResourceNavigation"
                            }
                        }
                    }
                },
                moduleName: {
                    serializedName: "moduleName",
                    type: {
                        name: "String"
                    }
                },
                moduleVersion: {
                    serializedName: "moduleVersion",
                    type: {
                        name: "String"
                    }
                },
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                durationInSeconds: {
                    serializedName: "durationInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                startDate: {
                    nullable: false,
                    serializedName: "startDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var DscMetaConfiguration = {
        serializedName: "DscMetaConfiguration",
        type: {
            name: "Composite",
            className: "DscMetaConfiguration",
            modelProperties: {
                configurationModeFrequencyMins: {
                    serializedName: "configurationModeFrequencyMins",
                    type: {
                        name: "Number"
                    }
                },
                rebootNodeIfNeeded: {
                    serializedName: "rebootNodeIfNeeded",
                    type: {
                        name: "Boolean"
                    }
                },
                configurationMode: {
                    serializedName: "configurationMode",
                    type: {
                        name: "String"
                    }
                },
                actionAfterReboot: {
                    serializedName: "actionAfterReboot",
                    type: {
                        name: "String"
                    }
                },
                certificateId: {
                    serializedName: "certificateId",
                    type: {
                        name: "String"
                    }
                },
                refreshFrequencyMins: {
                    serializedName: "refreshFrequencyMins",
                    type: {
                        name: "Number"
                    }
                },
                allowModuleOverwrite: {
                    serializedName: "allowModuleOverwrite",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DscNodeReport = {
        serializedName: "DscNodeReport",
        type: {
            name: "Composite",
            className: "DscNodeReport",
            modelProperties: {
                endTime: {
                    nullable: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                startTime: {
                    nullable: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                reportId: {
                    serializedName: "reportId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                refreshMode: {
                    serializedName: "refreshMode",
                    type: {
                        name: "String"
                    }
                },
                rebootRequested: {
                    serializedName: "rebootRequested",
                    type: {
                        name: "String"
                    }
                },
                reportFormatVersion: {
                    serializedName: "reportFormatVersion",
                    type: {
                        name: "String"
                    }
                },
                configurationVersion: {
                    serializedName: "configurationVersion",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscReportError"
                            }
                        }
                    }
                },
                resources: {
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscReportResource"
                            }
                        }
                    }
                },
                metaConfiguration: {
                    serializedName: "metaConfiguration",
                    type: {
                        name: "Composite",
                        className: "DscMetaConfiguration"
                    }
                },
                hostName: {
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                },
                iPV4Addresses: {
                    serializedName: "iPV4Addresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                iPV6Addresses: {
                    serializedName: "iPV6Addresses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                numberOfResources: {
                    serializedName: "numberOfResources",
                    type: {
                        name: "Number"
                    }
                },
                rawErrors: {
                    serializedName: "rawErrors",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AgentRegistrationKeys = {
        serializedName: "AgentRegistrationKeys",
        type: {
            name: "Composite",
            className: "AgentRegistrationKeys",
            modelProperties: {
                primary: {
                    serializedName: "primary",
                    type: {
                        name: "String"
                    }
                },
                secondary: {
                    serializedName: "secondary",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AgentRegistration = {
        serializedName: "AgentRegistration",
        type: {
            name: "Composite",
            className: "AgentRegistration",
            modelProperties: {
                dscMetaConfiguration: {
                    serializedName: "dscMetaConfiguration",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    serializedName: "endpoint",
                    type: {
                        name: "String"
                    }
                },
                keys: {
                    serializedName: "keys",
                    type: {
                        name: "Composite",
                        className: "AgentRegistrationKeys"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscNodeExtensionHandlerAssociationProperty = {
        serializedName: "DscNodeExtensionHandlerAssociationProperty",
        type: {
            name: "Composite",
            className: "DscNodeExtensionHandlerAssociationProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscNode = {
        serializedName: "DscNode",
        type: {
            name: "Composite",
            className: "DscNode",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { lastSeen: {
                    nullable: false,
                    serializedName: "properties.lastSeen",
                    type: {
                        name: "DateTime"
                    }
                }, registrationTime: {
                    nullable: false,
                    serializedName: "properties.registrationTime",
                    type: {
                        name: "DateTime"
                    }
                }, ip: {
                    serializedName: "properties.ip",
                    type: {
                        name: "String"
                    }
                }, accountId: {
                    serializedName: "properties.accountId",
                    type: {
                        name: "String"
                    }
                }, dscNodeName: {
                    serializedName: "properties.nodeConfiguration.name",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, nodeId: {
                    serializedName: "properties.nodeId",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "properties.etag",
                    type: {
                        name: "String"
                    }
                }, totalCount: {
                    serializedName: "properties.totalCount",
                    type: {
                        name: "Number"
                    }
                }, extensionHandler: {
                    serializedName: "properties.extensionHandler",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscNodeExtensionHandlerAssociationProperty"
                            }
                        }
                    }
                } })
        }
    };
    var AgentRegistrationRegenerateKeyParameter = {
        serializedName: "AgentRegistrationRegenerateKeyParameter",
        type: {
            name: "Composite",
            className: "AgentRegistrationRegenerateKeyParameter",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscNodeUpdateParametersProperties = {
        serializedName: "DscNodeUpdateParameters_properties",
        type: {
            name: "Composite",
            className: "DscNodeUpdateParametersProperties",
            modelProperties: {
                name: {
                    serializedName: "nodeConfiguration.name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscNodeUpdateParameters = {
        serializedName: "DscNodeUpdateParameters",
        type: {
            name: "Composite",
            className: "DscNodeUpdateParameters",
            modelProperties: {
                nodeId: {
                    serializedName: "nodeId",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DscNodeUpdateParametersProperties"
                    }
                }
            }
        }
    };
    var DscConfigurationAssociationProperty = {
        serializedName: "DscConfigurationAssociationProperty",
        type: {
            name: "Composite",
            className: "DscConfigurationAssociationProperty",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscCompilationJob = {
        serializedName: "DscCompilationJob",
        type: {
            name: "Composite",
            className: "DscCompilationJob",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { configuration: {
                    serializedName: "properties.configuration",
                    type: {
                        name: "Composite",
                        className: "DscConfigurationAssociationProperty"
                    }
                }, startedBy: {
                    readOnly: true,
                    serializedName: "properties.startedBy",
                    type: {
                        name: "String"
                    }
                }, jobId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.jobId",
                    type: {
                        name: "Uuid"
                    }
                }, creationTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, runOn: {
                    serializedName: "properties.runOn",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, startTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, exception: {
                    readOnly: true,
                    serializedName: "properties.exception",
                    type: {
                        name: "String"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastStatusModifiedTime: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.lastStatusModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var DscCompilationJobCreateParameters = {
        serializedName: "DscCompilationJobCreateParameters",
        type: {
            name: "Composite",
            className: "DscCompilationJobCreateParameters",
            modelProperties: {
                configuration: {
                    required: true,
                    serializedName: "properties.configuration",
                    type: {
                        name: "Composite",
                        className: "DscConfigurationAssociationProperty"
                    }
                },
                parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                incrementNodeConfigurationBuild: {
                    serializedName: "properties.incrementNodeConfigurationBuild",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DscNodeConfiguration = {
        serializedName: "DscNodeConfiguration",
        type: {
            name: "Composite",
            className: "DscNodeConfiguration",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, configuration: {
                    serializedName: "properties.configuration",
                    type: {
                        name: "Composite",
                        className: "DscConfigurationAssociationProperty"
                    }
                }, source: {
                    serializedName: "properties.source",
                    type: {
                        name: "String"
                    }
                }, nodeCount: {
                    serializedName: "properties.nodeCount",
                    type: {
                        name: "Number"
                    }
                }, incrementNodeConfigurationBuild: {
                    serializedName: "properties.incrementNodeConfigurationBuild",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var DscNodeConfigurationCreateOrUpdateParameters = {
        serializedName: "DscNodeConfigurationCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "DscNodeConfigurationCreateOrUpdateParameters",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "properties.source",
                    type: {
                        name: "Composite",
                        className: "ContentSource"
                    }
                },
                configuration: {
                    required: true,
                    serializedName: "properties.configuration",
                    type: {
                        name: "Composite",
                        className: "DscConfigurationAssociationProperty"
                    }
                },
                incrementNodeConfigurationBuild: {
                    serializedName: "properties.incrementNodeConfigurationBuild",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NodeCountProperties = {
        serializedName: "NodeCountProperties",
        type: {
            name: "Composite",
            className: "NodeCountProperties",
            modelProperties: {
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var NodeCount = {
        serializedName: "NodeCount",
        type: {
            name: "Composite",
            className: "NodeCount",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "NodeCountProperties"
                    }
                }
            }
        }
    };
    var NodeCounts = {
        serializedName: "NodeCounts",
        type: {
            name: "Composite",
            className: "NodeCounts",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NodeCount"
                            }
                        }
                    }
                },
                totalCount: {
                    serializedName: "totalCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RunbookParameter = {
        serializedName: "RunbookParameter",
        type: {
            name: "Composite",
            className: "RunbookParameter",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                isMandatory: {
                    serializedName: "isMandatory",
                    type: {
                        name: "Boolean"
                    }
                },
                position: {
                    serializedName: "position",
                    type: {
                        name: "Number"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunbookDraft = {
        serializedName: "RunbookDraft",
        type: {
            name: "Composite",
            className: "RunbookDraft",
            modelProperties: {
                inEdit: {
                    serializedName: "inEdit",
                    type: {
                        name: "Boolean"
                    }
                },
                draftContentLink: {
                    serializedName: "draftContentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                creationTime: {
                    nullable: false,
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "RunbookParameter"
                            }
                        }
                    }
                },
                outputTypes: {
                    serializedName: "outputTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Runbook = {
        serializedName: "Runbook",
        type: {
            name: "Composite",
            className: "Runbook",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { runbookType: {
                    serializedName: "properties.runbookType",
                    type: {
                        name: "String"
                    }
                }, publishContentLink: {
                    serializedName: "properties.publishContentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, logVerbose: {
                    serializedName: "properties.logVerbose",
                    type: {
                        name: "Boolean"
                    }
                }, logProgress: {
                    serializedName: "properties.logProgress",
                    type: {
                        name: "Boolean"
                    }
                }, logActivityTrace: {
                    serializedName: "properties.logActivityTrace",
                    type: {
                        name: "Number"
                    }
                }, jobCount: {
                    serializedName: "properties.jobCount",
                    type: {
                        name: "Number"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "RunbookParameter"
                            }
                        }
                    }
                }, outputTypes: {
                    serializedName: "properties.outputTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, draft: {
                    serializedName: "properties.draft",
                    type: {
                        name: "Composite",
                        className: "RunbookDraft"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded"
                        ]
                    }
                }, lastModifiedBy: {
                    serializedName: "properties.lastModifiedBy",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    nullable: false,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    nullable: false,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RunbookCreateOrUpdateParameters = {
        serializedName: "RunbookCreateOrUpdateParameters",
        type: {
            name: "Composite",
            className: "RunbookCreateOrUpdateParameters",
            modelProperties: {
                logVerbose: {
                    serializedName: "properties.logVerbose",
                    type: {
                        name: "Boolean"
                    }
                },
                logProgress: {
                    serializedName: "properties.logProgress",
                    type: {
                        name: "Boolean"
                    }
                },
                runbookType: {
                    required: true,
                    serializedName: "properties.runbookType",
                    type: {
                        name: "String"
                    }
                },
                draft: {
                    serializedName: "properties.draft",
                    type: {
                        name: "Composite",
                        className: "RunbookDraft"
                    }
                },
                publishContentLink: {
                    serializedName: "properties.publishContentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                logActivityTrace: {
                    serializedName: "properties.logActivityTrace",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunbookUpdateParameters = {
        serializedName: "RunbookUpdateParameters",
        type: {
            name: "Composite",
            className: "RunbookUpdateParameters",
            modelProperties: {
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                logVerbose: {
                    serializedName: "properties.logVerbose",
                    type: {
                        name: "Boolean"
                    }
                },
                logProgress: {
                    serializedName: "properties.logProgress",
                    type: {
                        name: "Boolean"
                    }
                },
                logActivityTrace: {
                    serializedName: "properties.logActivityTrace",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunbookDraftUndoEditResult = {
        serializedName: "RunbookDraftUndoEditResult",
        type: {
            name: "Composite",
            className: "RunbookDraftUndoEditResult",
            modelProperties: {
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TestJobCreateParameters = {
        serializedName: "TestJobCreateParameters",
        type: {
            name: "Composite",
            className: "TestJobCreateParameters",
            modelProperties: {
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                runOn: {
                    serializedName: "runOn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TestJob = {
        serializedName: "TestJob",
        type: {
            name: "Composite",
            className: "TestJob",
            modelProperties: {
                creationTime: {
                    nullable: false,
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetails: {
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                runOn: {
                    serializedName: "runOn",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    nullable: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exception: {
                    serializedName: "exception",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedTime: {
                    nullable: false,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastStatusModifiedTime: {
                    nullable: true,
                    serializedName: "lastStatusModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                logActivityTrace: {
                    serializedName: "logActivityTrace",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RunbookCreateOrUpdateDraftProperties = {
        serializedName: "RunbookCreateOrUpdateDraftProperties",
        type: {
            name: "Composite",
            className: "RunbookCreateOrUpdateDraftProperties",
            modelProperties: {
                logVerbose: {
                    serializedName: "logVerbose",
                    type: {
                        name: "Boolean"
                    }
                },
                logProgress: {
                    serializedName: "logProgress",
                    type: {
                        name: "Boolean"
                    }
                },
                runbookType: {
                    required: true,
                    serializedName: "runbookType",
                    type: {
                        name: "String"
                    }
                },
                draft: {
                    required: true,
                    serializedName: "draft",
                    type: {
                        name: "Composite",
                        className: "RunbookDraft"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                logActivityTrace: {
                    serializedName: "logActivityTrace",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RunbookCreateOrUpdateDraftParameters = {
        serializedName: "RunbookCreateOrUpdateDraftParameters",
        type: {
            name: "Composite",
            className: "RunbookCreateOrUpdateDraftParameters",
            modelProperties: {
                runbookContent: {
                    required: true,
                    serializedName: "runbookContent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PythonPackageCreateParameters = {
        serializedName: "PythonPackageCreateParameters",
        type: {
            name: "Composite",
            className: "PythonPackageCreateParameters",
            modelProperties: {
                contentLink: {
                    required: true,
                    serializedName: "properties.contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PythonPackageUpdateParameters = {
        serializedName: "PythonPackageUpdateParameters",
        type: {
            name: "Composite",
            className: "PythonPackageUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunbookDraftReplaceContentHeaders = {
        serializedName: "runbookdraft-replacecontent-headers",
        type: {
            name: "Composite",
            className: "RunbookDraftReplaceContentHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunbookPublishHeaders = {
        serializedName: "runbook-publish-headers",
        type: {
            name: "Composite",
            className: "RunbookPublishHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutomationAccountListResult = {
        serializedName: "AutomationAccountListResult",
        type: {
            name: "Composite",
            className: "AutomationAccountListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutomationAccount"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var StatisticsListResult = {
        serializedName: "StatisticsListResult",
        type: {
            name: "Composite",
            className: "StatisticsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Statistics"
                            }
                        }
                    }
                }
            }
        }
    };
    var UsageListResult = {
        serializedName: "UsageListResult",
        type: {
            name: "Composite",
            className: "UsageListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateListResult = {
        serializedName: "CertificateListResult",
        type: {
            name: "Composite",
            className: "CertificateListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Certificate"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionListResult = {
        serializedName: "ConnectionListResult",
        type: {
            name: "Composite",
            className: "ConnectionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Connection"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionTypeListResult = {
        serializedName: "ConnectionTypeListResult",
        type: {
            name: "Composite",
            className: "ConnectionTypeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectionType"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CredentialListResult = {
        serializedName: "CredentialListResult",
        type: {
            name: "Composite",
            className: "CredentialListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Credential"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscConfigurationListResult = {
        serializedName: "DscConfigurationListResult",
        type: {
            name: "Composite",
            className: "DscConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscConfiguration"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                totalCount: {
                    serializedName: "totalCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HybridRunbookWorkerGroupsListResult = {
        serializedName: "HybridRunbookWorkerGroupsListResult",
        type: {
            name: "Composite",
            className: "HybridRunbookWorkerGroupsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HybridRunbookWorkerGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobScheduleListResult = {
        serializedName: "JobScheduleListResult",
        type: {
            name: "Composite",
            className: "JobScheduleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobSchedule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ActivityListResult = {
        serializedName: "ActivityListResult",
        type: {
            name: "Composite",
            className: "ActivityListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Activity"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ModuleListResult = {
        serializedName: "ModuleListResult",
        type: {
            name: "Composite",
            className: "ModuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Module"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TypeFieldListResult = {
        serializedName: "TypeFieldListResult",
        type: {
            name: "Composite",
            className: "TypeFieldListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TypeField"
                            }
                        }
                    }
                }
            }
        }
    };
    var ScheduleListResult = {
        serializedName: "ScheduleListResult",
        type: {
            name: "Composite",
            className: "ScheduleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Schedule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VariableListResult = {
        serializedName: "VariableListResult",
        type: {
            name: "Composite",
            className: "VariableListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Variable"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebhookListResult = {
        serializedName: "WebhookListResult",
        type: {
            name: "Composite",
            className: "WebhookListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Webhook"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WatcherListResult = {
        serializedName: "WatcherListResult",
        type: {
            name: "Composite",
            className: "WatcherListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Watcher"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlListResult = {
        serializedName: "SourceControlListResult",
        type: {
            name: "Composite",
            className: "SourceControlListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SourceControl"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJobListResult = {
        serializedName: "SourceControlSyncJobListResult",
        type: {
            name: "Composite",
            className: "SourceControlSyncJobListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SourceControlSyncJob"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceControlSyncJobStreamsListBySyncJob = {
        serializedName: "SourceControlSyncJobStreamsListBySyncJob",
        type: {
            name: "Composite",
            className: "SourceControlSyncJobStreamsListBySyncJob",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SourceControlSyncJobStream"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobListResultV2 = {
        serializedName: "JobListResultV2",
        type: {
            name: "Composite",
            className: "JobListResultV2",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobCollectionItem"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobStreamListResult = {
        serializedName: "JobStreamListResult",
        type: {
            name: "Composite",
            className: "JobStreamListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobStream"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscNodeListResult = {
        serializedName: "DscNodeListResult",
        type: {
            name: "Composite",
            className: "DscNodeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscNode"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                totalCount: {
                    serializedName: "totalCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DscNodeReportListResult = {
        serializedName: "DscNodeReportListResult",
        type: {
            name: "Composite",
            className: "DscNodeReportListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscNodeReport"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscCompilationJobListResult = {
        serializedName: "DscCompilationJobListResult",
        type: {
            name: "Composite",
            className: "DscCompilationJobListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscCompilationJob"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DscNodeConfigurationListResult = {
        serializedName: "DscNodeConfigurationListResult",
        type: {
            name: "Composite",
            className: "DscNodeConfigurationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DscNodeConfiguration"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                totalCount: {
                    serializedName: "totalCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RunbookListResult = {
        serializedName: "RunbookListResult",
        type: {
            name: "Composite",
            className: "RunbookListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Runbook"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        Resource: Resource,
        TrackedResource: TrackedResource,
        AutomationAccount: AutomationAccount,
        AutomationAccountCreateOrUpdateParameters: AutomationAccountCreateOrUpdateParameters,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        Statistics: Statistics,
        UsageCounterName: UsageCounterName,
        Usage: Usage,
        Key: Key,
        KeyListResult: KeyListResult,
        AutomationAccountUpdateParameters: AutomationAccountUpdateParameters,
        ProxyResource: ProxyResource,
        ErrorResponse: ErrorResponse,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        Certificate: Certificate,
        CertificateUpdateParameters: CertificateUpdateParameters,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        ConnectionCreateOrUpdateParameters: ConnectionCreateOrUpdateParameters,
        Connection: Connection,
        ConnectionUpdateParameters: ConnectionUpdateParameters,
        FieldDefinition: FieldDefinition,
        ConnectionType: ConnectionType,
        ConnectionTypeCreateOrUpdateParameters: ConnectionTypeCreateOrUpdateParameters,
        CredentialCreateOrUpdateParameters: CredentialCreateOrUpdateParameters,
        Credential: Credential,
        CredentialUpdateParameters: CredentialUpdateParameters,
        ContentHash: ContentHash,
        ContentSource: ContentSource,
        DscConfigurationParameter: DscConfigurationParameter,
        DscConfigurationCreateOrUpdateParameters: DscConfigurationCreateOrUpdateParameters,
        DscConfiguration: DscConfiguration,
        DscConfigurationUpdateParameters: DscConfigurationUpdateParameters,
        RunAsCredentialAssociationProperty: RunAsCredentialAssociationProperty,
        HybridRunbookWorker: HybridRunbookWorker,
        HybridRunbookWorkerGroup: HybridRunbookWorkerGroup,
        HybridRunbookWorkerGroupUpdateParameters: HybridRunbookWorkerGroupUpdateParameters,
        ScheduleAssociationProperty: ScheduleAssociationProperty,
        RunbookAssociationProperty: RunbookAssociationProperty,
        JobSchedule: JobSchedule,
        JobScheduleCreateParameters: JobScheduleCreateParameters,
        LinkedWorkspace: LinkedWorkspace,
        ActivityParameterValidationSet: ActivityParameterValidationSet,
        ActivityParameter: ActivityParameter,
        ActivityParameterSet: ActivityParameterSet,
        ActivityOutputType: ActivityOutputType,
        Activity: Activity,
        ModuleErrorInfo: ModuleErrorInfo,
        ContentLink: ContentLink,
        Module: Module,
        ModuleCreateOrUpdateParameters: ModuleCreateOrUpdateParameters,
        ModuleUpdateParameters: ModuleUpdateParameters,
        TypeField: TypeField,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        AdvancedSchedule: AdvancedSchedule,
        ScheduleCreateOrUpdateParameters: ScheduleCreateOrUpdateParameters,
        ScheduleProperties: ScheduleProperties,
        Schedule: Schedule,
        ScheduleUpdateParameters: ScheduleUpdateParameters,
        VariableCreateOrUpdateParameters: VariableCreateOrUpdateParameters,
        Variable: Variable,
        VariableUpdateParameters: VariableUpdateParameters,
        Webhook: Webhook,
        WebhookUpdateParameters: WebhookUpdateParameters,
        WebhookCreateOrUpdateParameters: WebhookCreateOrUpdateParameters,
        Watcher: Watcher,
        WatcherUpdateParameters: WatcherUpdateParameters,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TagSettingsProperties: TagSettingsProperties,
        AzureQueryProperties: AzureQueryProperties,
        TargetProperties: TargetProperties,
        UpdateConfiguration: UpdateConfiguration,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        CollectionItemUpdateConfiguration: CollectionItemUpdateConfiguration,
        SoftwareUpdateConfigurationCollectionItem: SoftwareUpdateConfigurationCollectionItem,
        SoftwareUpdateConfigurationListResult: SoftwareUpdateConfigurationListResult,
        UpdateConfigurationNavigation: UpdateConfigurationNavigation,
        SoftwareUpdateConfigurationRun: SoftwareUpdateConfigurationRun,
        SoftwareUpdateConfigurationRunListResult: SoftwareUpdateConfigurationRunListResult,
        JobNavigation: JobNavigation,
        SoftwareUpdateConfigurationMachineRun: SoftwareUpdateConfigurationMachineRun,
        SoftwareUpdateConfigurationMachineRunListResult: SoftwareUpdateConfigurationMachineRunListResult,
        SourceControl: SourceControl,
        SourceControlSecurityTokenProperties: SourceControlSecurityTokenProperties,
        SourceControlUpdateParameters: SourceControlUpdateParameters,
        SourceControlCreateOrUpdateParameters: SourceControlCreateOrUpdateParameters,
        SourceControlSyncJob: SourceControlSyncJob,
        SourceControlSyncJobCreateParameters: SourceControlSyncJobCreateParameters,
        SourceControlSyncJobById: SourceControlSyncJobById,
        SourceControlSyncJobStream: SourceControlSyncJobStream,
        SourceControlSyncJobStreamById: SourceControlSyncJobStreamById,
        JobStream: JobStream,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        JobCreateParameters: JobCreateParameters,
        DscReportError: DscReportError,
        DscReportResourceNavigation: DscReportResourceNavigation,
        DscReportResource: DscReportResource,
        DscMetaConfiguration: DscMetaConfiguration,
        DscNodeReport: DscNodeReport,
        AgentRegistrationKeys: AgentRegistrationKeys,
        AgentRegistration: AgentRegistration,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscNode: DscNode,
        AgentRegistrationRegenerateKeyParameter: AgentRegistrationRegenerateKeyParameter,
        DscNodeUpdateParametersProperties: DscNodeUpdateParametersProperties,
        DscNodeUpdateParameters: DscNodeUpdateParameters,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscCompilationJobCreateParameters: DscCompilationJobCreateParameters,
        DscNodeConfiguration: DscNodeConfiguration,
        DscNodeConfigurationCreateOrUpdateParameters: DscNodeConfigurationCreateOrUpdateParameters,
        NodeCountProperties: NodeCountProperties,
        NodeCount: NodeCount,
        NodeCounts: NodeCounts,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        Runbook: Runbook,
        RunbookCreateOrUpdateParameters: RunbookCreateOrUpdateParameters,
        RunbookUpdateParameters: RunbookUpdateParameters,
        RunbookDraftUndoEditResult: RunbookDraftUndoEditResult,
        TestJobCreateParameters: TestJobCreateParameters,
        TestJob: TestJob,
        RunbookCreateOrUpdateDraftProperties: RunbookCreateOrUpdateDraftProperties,
        RunbookCreateOrUpdateDraftParameters: RunbookCreateOrUpdateDraftParameters,
        PythonPackageCreateParameters: PythonPackageCreateParameters,
        PythonPackageUpdateParameters: PythonPackageUpdateParameters,
        RunbookDraftReplaceContentHeaders: RunbookDraftReplaceContentHeaders,
        RunbookPublishHeaders: RunbookPublishHeaders,
        AutomationAccountListResult: AutomationAccountListResult,
        OperationListResult: OperationListResult,
        StatisticsListResult: StatisticsListResult,
        UsageListResult: UsageListResult,
        CertificateListResult: CertificateListResult,
        ConnectionListResult: ConnectionListResult,
        ConnectionTypeListResult: ConnectionTypeListResult,
        CredentialListResult: CredentialListResult,
        DscConfigurationListResult: DscConfigurationListResult,
        HybridRunbookWorkerGroupsListResult: HybridRunbookWorkerGroupsListResult,
        JobScheduleListResult: JobScheduleListResult,
        ActivityListResult: ActivityListResult,
        ModuleListResult: ModuleListResult,
        TypeFieldListResult: TypeFieldListResult,
        ScheduleListResult: ScheduleListResult,
        VariableListResult: VariableListResult,
        WebhookListResult: WebhookListResult,
        WatcherListResult: WatcherListResult,
        SourceControlListResult: SourceControlListResult,
        SourceControlSyncJobListResult: SourceControlSyncJobListResult,
        SourceControlSyncJobStreamsListBySyncJob: SourceControlSyncJobStreamsListBySyncJob,
        JobListResultV2: JobListResultV2,
        JobStreamListResult: JobStreamListResult,
        DscNodeListResult: DscNodeListResult,
        DscNodeReportListResult: DscNodeReportListResult,
        DscCompilationJobListResult: DscCompilationJobListResult,
        DscNodeConfigurationListResult: DscNodeConfigurationListResult,
        RunbookListResult: RunbookListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        AutomationAccountUpdateParameters: AutomationAccountUpdateParameters,
        Sku: Sku,
        AutomationAccount: AutomationAccount,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        AutomationAccountCreateOrUpdateParameters: AutomationAccountCreateOrUpdateParameters,
        AutomationAccountListResult: AutomationAccountListResult,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var activityName = {
        parameterPath: "activityName",
        mapper: {
            required: true,
            serializedName: "activityName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-10-31',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-05-15-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-01-15',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-06-30',
            type: {
                name: "String"
            }
        }
    };
    var automationAccountName = {
        parameterPath: "automationAccountName",
        mapper: {
            required: true,
            serializedName: "automationAccountName",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            type: {
                name: "String"
            }
        }
    };
    var clientRequestId = {
        parameterPath: [
            "options",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "clientRequestId",
            type: {
                name: "String"
            }
        }
    };
    var compilationJobName = {
        parameterPath: "compilationJobName",
        mapper: {
            required: true,
            serializedName: "compilationJobName",
            type: {
                name: "String"
            }
        }
    };
    var configurationName = {
        parameterPath: "configurationName",
        mapper: {
            required: true,
            serializedName: "configurationName",
            type: {
                name: "String"
            }
        }
    };
    var connectionName = {
        parameterPath: "connectionName",
        mapper: {
            required: true,
            serializedName: "connectionName",
            type: {
                name: "String"
            }
        }
    };
    var connectionTypeName = {
        parameterPath: "connectionTypeName",
        mapper: {
            required: true,
            serializedName: "connectionTypeName",
            type: {
                name: "String"
            }
        }
    };
    var countType = {
        parameterPath: "countType",
        mapper: {
            required: true,
            serializedName: "countType",
            type: {
                name: "String"
            }
        }
    };
    var credentialName = {
        parameterPath: "credentialName",
        mapper: {
            required: true,
            serializedName: "credentialName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var hybridRunbookWorkerGroupName = {
        parameterPath: "hybridRunbookWorkerGroupName",
        mapper: {
            required: true,
            serializedName: "hybridRunbookWorkerGroupName",
            type: {
                name: "String"
            }
        }
    };
    var inlinecount = {
        parameterPath: [
            "options",
            "inlinecount"
        ],
        mapper: {
            serializedName: "$inlinecount",
            type: {
                name: "String"
            }
        }
    };
    var jobId = {
        parameterPath: "jobId",
        mapper: {
            required: true,
            serializedName: "jobId",
            type: {
                name: "Uuid"
            }
        }
    };
    var jobName = {
        parameterPath: "jobName",
        mapper: {
            required: true,
            serializedName: "jobName",
            type: {
                name: "String"
            }
        }
    };
    var jobScheduleId = {
        parameterPath: "jobScheduleId",
        mapper: {
            required: true,
            serializedName: "jobScheduleId",
            type: {
                name: "Uuid"
            }
        }
    };
    var jobStreamId = {
        parameterPath: "jobStreamId",
        mapper: {
            required: true,
            serializedName: "jobStreamId",
            type: {
                name: "String"
            }
        }
    };
    var moduleName = {
        parameterPath: "moduleName",
        mapper: {
            required: true,
            serializedName: "moduleName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nodeConfigurationName = {
        parameterPath: "nodeConfigurationName",
        mapper: {
            required: true,
            serializedName: "nodeConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var nodeId = {
        parameterPath: "nodeId",
        mapper: {
            required: true,
            serializedName: "nodeId",
            type: {
                name: "String"
            }
        }
    };
    var packageName = {
        parameterPath: "packageName",
        mapper: {
            required: true,
            serializedName: "packageName",
            type: {
                name: "String"
            }
        }
    };
    var reportId = {
        parameterPath: "reportId",
        mapper: {
            required: true,
            serializedName: "reportId",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var runbookName = {
        parameterPath: "runbookName",
        mapper: {
            required: true,
            serializedName: "runbookName",
            type: {
                name: "String"
            }
        }
    };
    var scheduleName = {
        parameterPath: "scheduleName",
        mapper: {
            required: true,
            serializedName: "scheduleName",
            type: {
                name: "String"
            }
        }
    };
    var skip0 = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "Number"
            }
        }
    };
    var skip1 = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            type: {
                name: "String"
            }
        }
    };
    var softwareUpdateConfigurationMachineRunId = {
        parameterPath: "softwareUpdateConfigurationMachineRunId",
        mapper: {
            required: true,
            serializedName: "softwareUpdateConfigurationMachineRunId",
            type: {
                name: "Uuid"
            }
        }
    };
    var softwareUpdateConfigurationName = {
        parameterPath: "softwareUpdateConfigurationName",
        mapper: {
            required: true,
            serializedName: "softwareUpdateConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var softwareUpdateConfigurationRunId = {
        parameterPath: "softwareUpdateConfigurationRunId",
        mapper: {
            required: true,
            serializedName: "softwareUpdateConfigurationRunId",
            type: {
                name: "Uuid"
            }
        }
    };
    var sourceControlName = {
        parameterPath: "sourceControlName",
        mapper: {
            required: true,
            serializedName: "sourceControlName",
            type: {
                name: "String"
            }
        }
    };
    var sourceControlSyncJobId = {
        parameterPath: "sourceControlSyncJobId",
        mapper: {
            required: true,
            serializedName: "sourceControlSyncJobId",
            type: {
                name: "Uuid"
            }
        }
    };
    var streamId = {
        parameterPath: "streamId",
        mapper: {
            required: true,
            serializedName: "streamId",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top0 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var top1 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "String"
            }
        }
    };
    var typeName = {
        parameterPath: "typeName",
        mapper: {
            required: true,
            serializedName: "typeName",
            type: {
                name: "String"
            }
        }
    };
    var variableName = {
        parameterPath: "variableName",
        mapper: {
            required: true,
            serializedName: "variableName",
            type: {
                name: "String"
            }
        }
    };
    var watcherName = {
        parameterPath: "watcherName",
        mapper: {
            required: true,
            serializedName: "watcherName",
            type: {
                name: "String"
            }
        }
    };
    var webhookName = {
        parameterPath: "webhookName",
        mapper: {
            required: true,
            serializedName: "webhookName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AutomationAccountOperations. */
    var AutomationAccountOperations = /** @class */ (function () {
        /**
         * Create a AutomationAccountOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function AutomationAccountOperations(client) {
            this.client = client;
        }
        AutomationAccountOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        AutomationAccountOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return AutomationAccountOperations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AutomationAccountUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AutomationAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AutomationAccountCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AutomationAccount
            },
            201: {
                bodyMapper: AutomationAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutomationAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutomationAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Automation/automationAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutomationAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutomationAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AutomationAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Automation/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        StatisticsListResult: StatisticsListResult,
        Statistics: Statistics,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StatisticsOperations. */
    var StatisticsOperations = /** @class */ (function () {
        /**
         * Create a StatisticsOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function StatisticsOperations(client) {
            this.client = client;
        }
        StatisticsOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec, callback);
        };
        return StatisticsOperations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByAutomationAccountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/statistics",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StatisticsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        UsageListResult: UsageListResult,
        Usage: Usage,
        UsageCounterName: UsageCounterName,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$1, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByAutomationAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/usages",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        KeyListResult: KeyListResult,
        Key: Key,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Keys. */
    var Keys = /** @class */ (function () {
        /**
         * Create a Keys.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function Keys(client) {
            this.client = client;
        }
        Keys.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$2, callback);
        };
        return Keys;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByAutomationAccountOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/listKeys",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: KeyListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        Certificate: Certificate,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CertificateCreateOrUpdateParameters: CertificateCreateOrUpdateParameters,
        CertificateUpdateParameters: CertificateUpdateParameters,
        CertificateListResult: CertificateListResult,
        TrackedResource: TrackedResource,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CertificateOperations. */
    var CertificateOperations = /** @class */ (function () {
        /**
         * Create a CertificateOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function CertificateOperations(client) {
            this.client = client;
        }
        CertificateOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        CertificateOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        CertificateOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, certificateName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                certificateName: certificateName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        CertificateOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, certificateName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                certificateName: certificateName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$1, callback);
        };
        CertificateOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$3, callback);
        };
        CertificateOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec, callback);
        };
        return CertificateOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Certificate
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CertificateCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Certificate
            },
            201: {
                bodyMapper: Certificate
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/certificates/{certificateName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            certificateName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CertificateUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Certificate
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByAutomationAccountOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/certificates",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listByAutomationAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        Connection: Connection,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        ErrorResponse: ErrorResponse,
        ConnectionCreateOrUpdateParameters: ConnectionCreateOrUpdateParameters,
        ConnectionUpdateParameters: ConnectionUpdateParameters,
        ConnectionListResult: ConnectionListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ConnectionOperations. */
    var ConnectionOperations = /** @class */ (function () {
        /**
         * Create a ConnectionOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function ConnectionOperations(client) {
            this.client = client;
        }
        ConnectionOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionName: connectionName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ConnectionOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionName: connectionName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        ConnectionOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, connectionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionName: connectionName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        ConnectionOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, connectionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionName: connectionName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        ConnectionOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$4, callback);
        };
        ConnectionOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$1, callback);
        };
        return ConnectionOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Connection
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Connection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Connection
            },
            201: {
                bodyMapper: Connection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Connection
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByAutomationAccountOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connections",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByAutomationAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        ConnectionType: ConnectionType,
        FieldDefinition: FieldDefinition,
        ConnectionTypeCreateOrUpdateParameters: ConnectionTypeCreateOrUpdateParameters,
        ConnectionTypeListResult: ConnectionTypeListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ConnectionTypeOperations. */
    var ConnectionTypeOperations = /** @class */ (function () {
        /**
         * Create a ConnectionTypeOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function ConnectionTypeOperations(client) {
            this.client = client;
        }
        ConnectionTypeOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, connectionTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionTypeName: connectionTypeName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        ConnectionTypeOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, connectionTypeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionTypeName: connectionTypeName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ConnectionTypeOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, connectionTypeName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                connectionTypeName: connectionTypeName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        ConnectionTypeOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$5, callback);
        };
        ConnectionTypeOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$2, callback);
        };
        return ConnectionTypeOperations;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connectionTypes/{connectionTypeName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionTypeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connectionTypes/{connectionTypeName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionTypeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionType
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connectionTypes/{connectionTypeName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            connectionTypeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionTypeCreateOrUpdateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: ConnectionType
            },
            409: {
                bodyMapper: ConnectionType
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listByAutomationAccountOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/connectionTypes",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionTypeListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var listByAutomationAccountNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionTypeListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        Credential: Credential,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        CredentialCreateOrUpdateParameters: CredentialCreateOrUpdateParameters,
        CredentialUpdateParameters: CredentialUpdateParameters,
        CredentialListResult: CredentialListResult,
        CloudError: CloudError,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CredentialOperations. */
    var CredentialOperations = /** @class */ (function () {
        /**
         * Create a CredentialOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function CredentialOperations(client) {
            this.client = client;
        }
        CredentialOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, credentialName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                credentialName: credentialName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        CredentialOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, credentialName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                credentialName: credentialName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        CredentialOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, credentialName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                credentialName: credentialName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        CredentialOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, credentialName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                credentialName: credentialName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$3, callback);
        };
        CredentialOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$6, callback);
        };
        CredentialOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$3, callback);
        };
        return CredentialOperations;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Credential
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CredentialCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Credential
            },
            201: {
                bodyMapper: Credential
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/credentials/{credentialName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            credentialName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CredentialUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Credential
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };
    var listByAutomationAccountOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/credentials",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CredentialListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByAutomationAccountNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CredentialListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        DscConfiguration: DscConfiguration,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        DscConfigurationCreateOrUpdateParameters: DscConfigurationCreateOrUpdateParameters,
        DscConfigurationUpdateParameters: DscConfigurationUpdateParameters,
        CloudError: CloudError,
        DscConfigurationListResult: DscConfigurationListResult,
        AutomationAccount: AutomationAccount,
        Sku: Sku,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DscConfigurationOperations. */
    var DscConfigurationOperations = /** @class */ (function () {
        /**
         * Create a DscConfigurationOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function DscConfigurationOperations(client) {
            this.client = client;
        }
        DscConfigurationOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, configurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                configurationName: configurationName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        DscConfigurationOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, configurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                configurationName: configurationName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        DscConfigurationOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, configurationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                configurationName: configurationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        DscConfigurationOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, configurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                configurationName: configurationName$$1,
                options: options
            }, updateOperationSpec$4, callback);
        };
        DscConfigurationOperations.prototype.getContent = function (resourceGroupName$$1, automationAccountName$$1, configurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                configurationName: configurationName$$1,
                options: options
            }, getContentOperationSpec, callback);
        };
        DscConfigurationOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$7, callback);
        };
        DscConfigurationOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$4, callback);
        };
        return DscConfigurationOperations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            configurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            configurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            configurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DscConfigurationCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DscConfiguration
            },
            201: {
                bodyMapper: DscConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            configurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: DscConfigurationUpdateParameters
        },
        responses: {
            200: {
                bodyMapper: DscConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var getContentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}/content",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            configurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByAutomationAccountOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            filter,
            skip0,
            top0,
            inlinecount
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscConfigurationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };
    var listByAutomationAccountNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscConfigurationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        HybridRunbookWorkerGroup: HybridRunbookWorkerGroup,
        HybridRunbookWorker: HybridRunbookWorker,
        RunAsCredentialAssociationProperty: RunAsCredentialAssociationProperty,
        HybridRunbookWorkerGroupUpdateParameters: HybridRunbookWorkerGroupUpdateParameters,
        HybridRunbookWorkerGroupsListResult: HybridRunbookWorkerGroupsListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a HybridRunbookWorkerGroupOperations. */
    var HybridRunbookWorkerGroupOperations = /** @class */ (function () {
        /**
         * Create a HybridRunbookWorkerGroupOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function HybridRunbookWorkerGroupOperations(client) {
            this.client = client;
        }
        HybridRunbookWorkerGroupOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, hybridRunbookWorkerGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                hybridRunbookWorkerGroupName: hybridRunbookWorkerGroupName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        HybridRunbookWorkerGroupOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, hybridRunbookWorkerGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                hybridRunbookWorkerGroupName: hybridRunbookWorkerGroupName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        HybridRunbookWorkerGroupOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, hybridRunbookWorkerGroupName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                hybridRunbookWorkerGroupName: hybridRunbookWorkerGroupName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$5, callback);
        };
        HybridRunbookWorkerGroupOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$8, callback);
        };
        HybridRunbookWorkerGroupOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$5, callback);
        };
        return HybridRunbookWorkerGroupOperations;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/hybridRunbookWorkerGroups/{hybridRunbookWorkerGroupName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            hybridRunbookWorkerGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/hybridRunbookWorkerGroups/{hybridRunbookWorkerGroupName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            hybridRunbookWorkerGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridRunbookWorkerGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/hybridRunbookWorkerGroups/{hybridRunbookWorkerGroupName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            hybridRunbookWorkerGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, HybridRunbookWorkerGroupUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: HybridRunbookWorkerGroup
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listByAutomationAccountOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/hybridRunbookWorkerGroups",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridRunbookWorkerGroupsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listByAutomationAccountNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: HybridRunbookWorkerGroupsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        JobSchedule: JobSchedule,
        ScheduleAssociationProperty: ScheduleAssociationProperty,
        RunbookAssociationProperty: RunbookAssociationProperty,
        JobScheduleCreateParameters: JobScheduleCreateParameters,
        JobScheduleListResult: JobScheduleListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobScheduleOperations. */
    var JobScheduleOperations = /** @class */ (function () {
        /**
         * Create a JobScheduleOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function JobScheduleOperations(client) {
            this.client = client;
        }
        JobScheduleOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        JobScheduleOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, jobScheduleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobScheduleId: jobScheduleId$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        JobScheduleOperations.prototype.create = function (resourceGroupName$$1, automationAccountName$$1, jobScheduleId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobScheduleId: jobScheduleId$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        JobScheduleOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$9, callback);
        };
        JobScheduleOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$6, callback);
        };
        return JobScheduleOperations;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobSchedules/{jobScheduleId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobScheduleId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobSchedules/{jobScheduleId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobScheduleId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobSchedule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobSchedules/{jobScheduleId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobScheduleId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobScheduleCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: JobSchedule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listByAutomationAccountOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobSchedules",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobScheduleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var listByAutomationAccountNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobScheduleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        LinkedWorkspace: LinkedWorkspace,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LinkedWorkspaceOperations. */
    var LinkedWorkspaceOperations = /** @class */ (function () {
        /**
         * Create a LinkedWorkspaceOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function LinkedWorkspaceOperations(client) {
            this.client = client;
        }
        LinkedWorkspaceOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        return LinkedWorkspaceOperations;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/linkedWorkspace",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LinkedWorkspace
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        Activity: Activity,
        ActivityParameterSet: ActivityParameterSet,
        ActivityParameter: ActivityParameter,
        ActivityParameterValidationSet: ActivityParameterValidationSet,
        ActivityOutputType: ActivityOutputType,
        ErrorResponse: ErrorResponse,
        ActivityListResult: ActivityListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ActivityOperations. */
    var ActivityOperations = /** @class */ (function () {
        /**
         * Create a ActivityOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function ActivityOperations(client) {
            this.client = client;
        }
        ActivityOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, activityName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                activityName: activityName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        ActivityOperations.prototype.listByModule = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                options: options
            }, listByModuleOperationSpec, callback);
        };
        ActivityOperations.prototype.listByModuleNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByModuleNextOperationSpec, callback);
        };
        return ActivityOperations;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/activities/{activityName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            activityName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Activity
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listByModuleOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/activities",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActivityListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };
    var listByModuleNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ActivityListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        Module: Module,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        ModuleErrorInfo: ModuleErrorInfo,
        ModuleCreateOrUpdateParameters: ModuleCreateOrUpdateParameters,
        ModuleUpdateParameters: ModuleUpdateParameters,
        ModuleListResult: ModuleListResult,
        AutomationAccount: AutomationAccount,
        Sku: Sku,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ModuleOperations. */
    var ModuleOperations = /** @class */ (function () {
        /**
         * Create a ModuleOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function ModuleOperations(client) {
            this.client = client;
        }
        ModuleOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        ModuleOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        ModuleOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        ModuleOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$6, callback);
        };
        ModuleOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$a, callback);
        };
        ModuleOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$7, callback);
        };
        return ModuleOperations;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Module
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ModuleCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Module
            },
            201: {
                bodyMapper: Module
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ModuleUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Module
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listByAutomationAccountOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ModuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };
    var listByAutomationAccountNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ModuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        TypeFieldListResult: TypeFieldListResult,
        TypeField: TypeField,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ObjectDataTypes. */
    var ObjectDataTypes = /** @class */ (function () {
        /**
         * Create a ObjectDataTypes.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function ObjectDataTypes(client) {
            this.client = client;
        }
        ObjectDataTypes.prototype.listFieldsByModuleAndType = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, typeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                typeName: typeName$$1,
                options: options
            }, listFieldsByModuleAndTypeOperationSpec, callback);
        };
        ObjectDataTypes.prototype.listFieldsByType = function (resourceGroupName$$1, automationAccountName$$1, typeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                typeName: typeName$$1,
                options: options
            }, listFieldsByTypeOperationSpec, callback);
        };
        return ObjectDataTypes;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listFieldsByModuleAndTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/objectDataTypes/{typeName}/fields",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            typeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TypeFieldListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };
    var listFieldsByTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/objectDataTypes/{typeName}/fields",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            typeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TypeFieldListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        TypeFieldListResult: TypeFieldListResult,
        TypeField: TypeField,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Fields. */
    var Fields = /** @class */ (function () {
        /**
         * Create a Fields.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function Fields(client) {
            this.client = client;
        }
        Fields.prototype.listByType = function (resourceGroupName$$1, automationAccountName$$1, moduleName$$1, typeName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                moduleName: moduleName$$1,
                typeName: typeName$$1,
                options: options
            }, listByTypeOperationSpec, callback);
        };
        return Fields;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listByTypeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/modules/{moduleName}/types/{typeName}/fields",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            moduleName,
            typeName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TypeFieldListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        ScheduleCreateOrUpdateParameters: ScheduleCreateOrUpdateParameters,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Schedule: Schedule,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ScheduleUpdateParameters: ScheduleUpdateParameters,
        ScheduleListResult: ScheduleListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ScheduleOperations. */
    var ScheduleOperations = /** @class */ (function () {
        /**
         * Create a ScheduleOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function ScheduleOperations(client) {
            this.client = client;
        }
        ScheduleOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, scheduleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                scheduleName: scheduleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        ScheduleOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, scheduleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                scheduleName: scheduleName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$7, callback);
        };
        ScheduleOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, scheduleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                scheduleName: scheduleName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        ScheduleOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, scheduleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                scheduleName: scheduleName$$1,
                options: options
            }, deleteMethodOperationSpec$9, callback);
        };
        ScheduleOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$b, callback);
        };
        ScheduleOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$8, callback);
        };
        return ScheduleOperations;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/schedules/{scheduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            scheduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ScheduleCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            201: {
                bodyMapper: Schedule
            },
            409: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var updateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/schedules/{scheduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            scheduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ScheduleUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/schedules/{scheduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            scheduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var deleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/schedules/{scheduleName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            scheduleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var listByAutomationAccountOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/schedules",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ScheduleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };
    var listByAutomationAccountNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ScheduleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        VariableCreateOrUpdateParameters: VariableCreateOrUpdateParameters,
        Variable: Variable,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        VariableUpdateParameters: VariableUpdateParameters,
        VariableListResult: VariableListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VariableOperations. */
    var VariableOperations = /** @class */ (function () {
        /**
         * Create a VariableOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function VariableOperations(client) {
            this.client = client;
        }
        VariableOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, variableName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                variableName: variableName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$8, callback);
        };
        VariableOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, variableName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                variableName: variableName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$8, callback);
        };
        VariableOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, variableName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                variableName: variableName$$1,
                options: options
            }, deleteMethodOperationSpec$a, callback);
        };
        VariableOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, variableName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                variableName: variableName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        VariableOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$c, callback);
        };
        VariableOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$9, callback);
        };
        return VariableOperations;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var createOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/variables/{variableName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            variableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VariableCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Variable
            },
            201: {
                bodyMapper: Variable
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var updateOperationSpec$8 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/variables/{variableName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            variableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VariableUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Variable
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var deleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/variables/{variableName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            variableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/variables/{variableName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            variableName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Variable
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var listByAutomationAccountOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/variables",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VariableListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };
    var listByAutomationAccountNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VariableListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        Webhook: Webhook,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RunbookAssociationProperty: RunbookAssociationProperty,
        WebhookCreateOrUpdateParameters: WebhookCreateOrUpdateParameters,
        WebhookUpdateParameters: WebhookUpdateParameters,
        WebhookListResult: WebhookListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WebhookOperations. */
    var WebhookOperations = /** @class */ (function () {
        /**
         * Create a WebhookOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function WebhookOperations(client) {
            this.client = client;
        }
        WebhookOperations.prototype.generateUri = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, generateUriOperationSpec, callback);
        };
        WebhookOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, webhookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                webhookName: webhookName$$1,
                options: options
            }, deleteMethodOperationSpec$b, callback);
        };
        WebhookOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, webhookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                webhookName: webhookName$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        WebhookOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, webhookName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                webhookName: webhookName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$9, callback);
        };
        WebhookOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, webhookName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                webhookName: webhookName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$9, callback);
        };
        WebhookOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$d, callback);
        };
        WebhookOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$a, callback);
        };
        return WebhookOperations;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var generateUriOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/webhooks/generateUri",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var deleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/webhooks/{webhookName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            webhookName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/webhooks/{webhookName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            webhookName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Webhook
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var createOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/webhooks/{webhookName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            webhookName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WebhookCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Webhook
            },
            201: {
                bodyMapper: Webhook
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var updateOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/webhooks/{webhookName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            webhookName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WebhookUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Webhook
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var listByAutomationAccountOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/webhooks",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebhookListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var listByAutomationAccountNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebhookListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        Watcher: Watcher,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        WatcherUpdateParameters: WatcherUpdateParameters,
        WatcherListResult: WatcherListResult,
        AutomationAccount: AutomationAccount,
        Sku: Sku,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WatcherOperations. */
    var WatcherOperations = /** @class */ (function () {
        /**
         * Create a WatcherOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function WatcherOperations(client) {
            this.client = client;
        }
        WatcherOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, watcherName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                watcherName: watcherName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$a, callback);
        };
        WatcherOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, watcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                watcherName: watcherName$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        WatcherOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, watcherName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                watcherName: watcherName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$a, callback);
        };
        WatcherOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, watcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                watcherName: watcherName$$1,
                options: options
            }, deleteMethodOperationSpec$c, callback);
        };
        WatcherOperations.prototype.start = function (resourceGroupName$$1, automationAccountName$$1, watcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                watcherName: watcherName$$1,
                options: options
            }, startOperationSpec, callback);
        };
        WatcherOperations.prototype.stop = function (resourceGroupName$$1, automationAccountName$$1, watcherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                watcherName: watcherName$$1,
                options: options
            }, stopOperationSpec, callback);
        };
        WatcherOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$e, callback);
        };
        WatcherOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$b, callback);
        };
        return WatcherOperations;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var createOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            watcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Watcher, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Watcher
            },
            201: {
                bodyMapper: Watcher
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            watcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Watcher
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var updateOperationSpec$a = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            watcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, WatcherUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Watcher
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var deleteMethodOperationSpec$c = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            watcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var startOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}/start",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            watcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var stopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}/stop",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            watcherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var listByAutomationAccountOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WatcherListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };
    var listByAutomationAccountNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WatcherListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        BaseResource: BaseResource,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        ErrorResponse: ErrorResponse,
        SoftwareUpdateConfigurationListResult: SoftwareUpdateConfigurationListResult,
        SoftwareUpdateConfigurationCollectionItem: SoftwareUpdateConfigurationCollectionItem,
        CollectionItemUpdateConfiguration: CollectionItemUpdateConfiguration,
        Resource: Resource,
        TrackedResource: TrackedResource,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Watcher: Watcher,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        Schedule: Schedule,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SoftwareUpdateConfigurations. */
    var SoftwareUpdateConfigurations = /** @class */ (function () {
        /**
         * Create a SoftwareUpdateConfigurations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function SoftwareUpdateConfigurations(client) {
            this.client = client;
        }
        SoftwareUpdateConfigurations.prototype.create = function (resourceGroupName$$1, automationAccountName$$1, softwareUpdateConfigurationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                softwareUpdateConfigurationName: softwareUpdateConfigurationName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$1, callback);
        };
        SoftwareUpdateConfigurations.prototype.getByName = function (resourceGroupName$$1, automationAccountName$$1, softwareUpdateConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                softwareUpdateConfigurationName: softwareUpdateConfigurationName$$1,
                options: options
            }, getByNameOperationSpec, callback);
        };
        SoftwareUpdateConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, softwareUpdateConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                softwareUpdateConfigurationName: softwareUpdateConfigurationName$$1,
                options: options
            }, deleteMethodOperationSpec$d, callback);
        };
        SoftwareUpdateConfigurations.prototype.list = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        return SoftwareUpdateConfigurations;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            softwareUpdateConfigurationName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SoftwareUpdateConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfiguration
            },
            201: {
                bodyMapper: SoftwareUpdateConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$l
    };
    var getByNameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            softwareUpdateConfigurationName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$l
    };
    var deleteMethodOperationSpec$d = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations/{softwareUpdateConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            softwareUpdateConfigurationName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$l
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurations",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName
        ],
        queryParameters: [
            apiVersion1,
            filter
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfigurationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        SoftwareUpdateConfigurationRun: SoftwareUpdateConfigurationRun,
        UpdateConfigurationNavigation: UpdateConfigurationNavigation,
        ErrorResponse: ErrorResponse,
        SoftwareUpdateConfigurationRunListResult: SoftwareUpdateConfigurationRunListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SoftwareUpdateConfigurationRuns. */
    var SoftwareUpdateConfigurationRuns = /** @class */ (function () {
        /**
         * Create a SoftwareUpdateConfigurationRuns.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function SoftwareUpdateConfigurationRuns(client) {
            this.client = client;
        }
        SoftwareUpdateConfigurationRuns.prototype.getById = function (resourceGroupName$$1, automationAccountName$$1, softwareUpdateConfigurationRunId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                softwareUpdateConfigurationRunId: softwareUpdateConfigurationRunId$$1,
                options: options
            }, getByIdOperationSpec, callback);
        };
        SoftwareUpdateConfigurationRuns.prototype.list = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        return SoftwareUpdateConfigurationRuns;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$m);
    var getByIdOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationRuns/{softwareUpdateConfigurationRunId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            softwareUpdateConfigurationRunId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfigurationRun
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationRuns",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName
        ],
        queryParameters: [
            apiVersion1,
            filter,
            skip1,
            top1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfigurationRunListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$n = /*#__PURE__*/Object.freeze({
        SoftwareUpdateConfigurationMachineRun: SoftwareUpdateConfigurationMachineRun,
        UpdateConfigurationNavigation: UpdateConfigurationNavigation,
        JobNavigation: JobNavigation,
        ErrorResponse: ErrorResponse,
        SoftwareUpdateConfigurationMachineRunListResult: SoftwareUpdateConfigurationMachineRunListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SoftwareUpdateConfigurationMachineRuns. */
    var SoftwareUpdateConfigurationMachineRuns = /** @class */ (function () {
        /**
         * Create a SoftwareUpdateConfigurationMachineRuns.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function SoftwareUpdateConfigurationMachineRuns(client) {
            this.client = client;
        }
        SoftwareUpdateConfigurationMachineRuns.prototype.getById = function (resourceGroupName$$1, automationAccountName$$1, softwareUpdateConfigurationMachineRunId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                softwareUpdateConfigurationMachineRunId: softwareUpdateConfigurationMachineRunId$$1,
                options: options
            }, getByIdOperationSpec$1, callback);
        };
        SoftwareUpdateConfigurationMachineRuns.prototype.list = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        return SoftwareUpdateConfigurationMachineRuns;
    }());
    // Operation Specifications
    var serializer$n = new msRest.Serializer(Mappers$n);
    var getByIdOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationMachineRuns/{softwareUpdateConfigurationMachineRunId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            softwareUpdateConfigurationMachineRunId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfigurationMachineRun
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationMachineRuns",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName
        ],
        queryParameters: [
            apiVersion1,
            filter,
            skip1,
            top1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SoftwareUpdateConfigurationMachineRunListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$n
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$o = /*#__PURE__*/Object.freeze({
        SourceControlCreateOrUpdateParameters: SourceControlCreateOrUpdateParameters,
        SourceControlSecurityTokenProperties: SourceControlSecurityTokenProperties,
        SourceControl: SourceControl,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        SourceControlUpdateParameters: SourceControlUpdateParameters,
        SourceControlListResult: SourceControlListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SourceControlOperations. */
    var SourceControlOperations = /** @class */ (function () {
        /**
         * Create a SourceControlOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function SourceControlOperations(client) {
            this.client = client;
        }
        SourceControlOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$b, callback);
        };
        SourceControlOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$b, callback);
        };
        SourceControlOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                options: options
            }, deleteMethodOperationSpec$e, callback);
        };
        SourceControlOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        SourceControlOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$f, callback);
        };
        SourceControlOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$c, callback);
        };
        return SourceControlOperations;
    }());
    // Operation Specifications
    var serializer$o = new msRest.Serializer(Mappers$o);
    var createOrUpdateOperationSpec$b = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SourceControlCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SourceControl
            },
            201: {
                bodyMapper: SourceControl
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var updateOperationSpec$b = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SourceControlUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SourceControl
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var deleteMethodOperationSpec$e = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControl
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var listByAutomationAccountOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };
    var listByAutomationAccountNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$o
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$p = /*#__PURE__*/Object.freeze({
        SourceControlSyncJobCreateParameters: SourceControlSyncJobCreateParameters,
        SourceControlSyncJob: SourceControlSyncJob,
        ErrorResponse: ErrorResponse,
        SourceControlSyncJobById: SourceControlSyncJobById,
        SourceControlSyncJobListResult: SourceControlSyncJobListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SourceControlSyncJobOperations. */
    var SourceControlSyncJobOperations = /** @class */ (function () {
        /**
         * Create a SourceControlSyncJobOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function SourceControlSyncJobOperations(client) {
            this.client = client;
        }
        SourceControlSyncJobOperations.prototype.create = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, sourceControlSyncJobId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                sourceControlSyncJobId: sourceControlSyncJobId$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$2, callback);
        };
        SourceControlSyncJobOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, sourceControlSyncJobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                sourceControlSyncJobId: sourceControlSyncJobId$$1,
                options: options
            }, getOperationSpec$g, callback);
        };
        SourceControlSyncJobOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$g, callback);
        };
        SourceControlSyncJobOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$d, callback);
        };
        return SourceControlSyncJobOperations;
    }());
    // Operation Specifications
    var serializer$p = new msRest.Serializer(Mappers$p);
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            sourceControlSyncJobId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, SourceControlSyncJobCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: SourceControlSyncJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            sourceControlSyncJobId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlSyncJobById
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var listByAutomationAccountOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlSyncJobListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };
    var listByAutomationAccountNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlSyncJobListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$p
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$q = /*#__PURE__*/Object.freeze({
        SourceControlSyncJobStreamsListBySyncJob: SourceControlSyncJobStreamsListBySyncJob,
        SourceControlSyncJobStream: SourceControlSyncJobStream,
        ErrorResponse: ErrorResponse,
        SourceControlSyncJobStreamById: SourceControlSyncJobStreamById
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SourceControlSyncJobStreams. */
    var SourceControlSyncJobStreams = /** @class */ (function () {
        /**
         * Create a SourceControlSyncJobStreams.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function SourceControlSyncJobStreams(client) {
            this.client = client;
        }
        SourceControlSyncJobStreams.prototype.listBySyncJob = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, sourceControlSyncJobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                sourceControlSyncJobId: sourceControlSyncJobId$$1,
                options: options
            }, listBySyncJobOperationSpec, callback);
        };
        SourceControlSyncJobStreams.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, sourceControlName$$1, sourceControlSyncJobId$$1, streamId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                sourceControlName: sourceControlName$$1,
                sourceControlSyncJobId: sourceControlSyncJobId$$1,
                streamId: streamId$$1,
                options: options
            }, getOperationSpec$h, callback);
        };
        SourceControlSyncJobStreams.prototype.listBySyncJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySyncJobNextOperationSpec, callback);
        };
        return SourceControlSyncJobStreams;
    }());
    // Operation Specifications
    var serializer$q = new msRest.Serializer(Mappers$q);
    var listBySyncJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            sourceControlSyncJobId,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlSyncJobStreamsListBySyncJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams/{streamId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            sourceControlName,
            sourceControlSyncJobId,
            streamId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlSyncJobStreamById
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };
    var listBySyncJobNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SourceControlSyncJobStreamsListBySyncJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$q
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$r = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        ErrorResponse: ErrorResponse,
        Job: Job,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        RunbookAssociationProperty: RunbookAssociationProperty,
        JobCreateParameters: JobCreateParameters,
        JobListResultV2: JobListResultV2,
        JobCollectionItem: JobCollectionItem,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobOperations. */
    var JobOperations = /** @class */ (function () {
        /**
         * Create a JobOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function JobOperations(client) {
            this.client = client;
        }
        JobOperations.prototype.getOutput = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, getOutputOperationSpec, callback);
        };
        JobOperations.prototype.getRunbookContent = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, getRunbookContentOperationSpec, callback);
        };
        JobOperations.prototype.suspend = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, suspendOperationSpec, callback);
        };
        JobOperations.prototype.stop = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, stopOperationSpec$1, callback);
        };
        JobOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, getOperationSpec$i, callback);
        };
        JobOperations.prototype.create = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$3, callback);
        };
        JobOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$h, callback);
        };
        JobOperations.prototype.resume = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, resumeOperationSpec, callback);
        };
        JobOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$e, callback);
        };
        return JobOperations;
    }());
    // Operation Specifications
    var serializer$r = new msRest.Serializer(Mappers$r);
    var getOutputOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/output",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            jobName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$r
    };
    var getRunbookContentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/runbookContent",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            jobName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var suspendOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/suspend",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            jobName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var stopOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/stop",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            jobName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var createOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            jobName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, JobCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var listByAutomationAccountOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResultV2
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var resumeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/resume",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };
    var listByAutomationAccountNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobListResultV2
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$r
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$s = /*#__PURE__*/Object.freeze({
        JobStream: JobStream,
        ErrorResponse: ErrorResponse,
        JobStreamListResult: JobStreamListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a JobStreamOperations. */
    var JobStreamOperations = /** @class */ (function () {
        /**
         * Create a JobStreamOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function JobStreamOperations(client) {
            this.client = client;
        }
        JobStreamOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, jobStreamId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                jobStreamId: jobStreamId$$1,
                options: options
            }, getOperationSpec$j, callback);
        };
        JobStreamOperations.prototype.listByJob = function (resourceGroupName$$1, automationAccountName$$1, jobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobName: jobName$$1,
                options: options
            }, listByJobOperationSpec, callback);
        };
        JobStreamOperations.prototype.listByJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByJobNextOperationSpec, callback);
        };
        return JobStreamOperations;
    }());
    // Operation Specifications
    var serializer$s = new msRest.Serializer(Mappers$s);
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/streams/{jobStreamId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            jobName,
            jobStreamId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStream
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var listByJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/jobs/{jobName}/streams",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStreamListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };
    var listByJobNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            clientRequestId,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStreamListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$s
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$t = /*#__PURE__*/Object.freeze({
        AgentRegistration: AgentRegistration,
        AgentRegistrationKeys: AgentRegistrationKeys,
        ErrorResponse: ErrorResponse,
        AgentRegistrationRegenerateKeyParameter: AgentRegistrationRegenerateKeyParameter
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AgentRegistrationInformation. */
    var AgentRegistrationInformation = /** @class */ (function () {
        /**
         * Create a AgentRegistrationInformation.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function AgentRegistrationInformation(client) {
            this.client = client;
        }
        AgentRegistrationInformation.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, getOperationSpec$k, callback);
        };
        AgentRegistrationInformation.prototype.regenerateKey = function (resourceGroupName$$1, automationAccountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                parameters: parameters,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        return AgentRegistrationInformation;
    }());
    // Operation Specifications
    var serializer$t = new msRest.Serializer(Mappers$t);
    var getOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AgentRegistration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/agentRegistrationInformation/regenerateKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AgentRegistrationRegenerateKeyParameter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AgentRegistration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$t
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$u = /*#__PURE__*/Object.freeze({
        DscNode: DscNode,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        ErrorResponse: ErrorResponse,
        DscNodeUpdateParameters: DscNodeUpdateParameters,
        DscNodeUpdateParametersProperties: DscNodeUpdateParametersProperties,
        DscNodeListResult: DscNodeListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DscNodeOperations. */
    var DscNodeOperations = /** @class */ (function () {
        /**
         * Create a DscNodeOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function DscNodeOperations(client) {
            this.client = client;
        }
        DscNodeOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeId: nodeId$$1,
                options: options
            }, deleteMethodOperationSpec$f, callback);
        };
        DscNodeOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeId: nodeId$$1,
                options: options
            }, getOperationSpec$l, callback);
        };
        DscNodeOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, nodeId$$1, dscNodeUpdateParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeId: nodeId$$1,
                dscNodeUpdateParameters: dscNodeUpdateParameters,
                options: options
            }, updateOperationSpec$c, callback);
        };
        DscNodeOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$i, callback);
        };
        DscNodeOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$f, callback);
        };
        return DscNodeOperations;
    }());
    // Operation Specifications
    var serializer$u = new msRest.Serializer(Mappers$u);
    var deleteMethodOperationSpec$f = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNode
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var getOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNode
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var updateOperationSpec$c = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "dscNodeUpdateParameters",
            mapper: __assign({}, DscNodeUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DscNode
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var listByAutomationAccountOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            skip0,
            top0,
            inlinecount,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };
    var listByAutomationAccountNextOperationSpec$f = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$u
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$v = /*#__PURE__*/Object.freeze({
        DscNodeReportListResult: DscNodeReportListResult,
        DscNodeReport: DscNodeReport,
        DscReportError: DscReportError,
        DscReportResource: DscReportResource,
        DscReportResourceNavigation: DscReportResourceNavigation,
        DscMetaConfiguration: DscMetaConfiguration,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NodeReports. */
    var NodeReports = /** @class */ (function () {
        /**
         * Create a NodeReports.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function NodeReports(client) {
            this.client = client;
        }
        NodeReports.prototype.listByNode = function (resourceGroupName$$1, automationAccountName$$1, nodeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeId: nodeId$$1,
                options: options
            }, listByNodeOperationSpec, callback);
        };
        NodeReports.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, nodeId$$1, reportId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeId: nodeId$$1,
                reportId: reportId$$1,
                options: options
            }, getOperationSpec$m, callback);
        };
        NodeReports.prototype.getContent = function (resourceGroupName$$1, automationAccountName$$1, nodeId$$1, reportId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeId: nodeId$$1,
                reportId: reportId$$1,
                options: options
            }, getContentOperationSpec$1, callback);
        };
        NodeReports.prototype.listByNodeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByNodeNextOperationSpec, callback);
        };
        return NodeReports;
    }());
    // Operation Specifications
    var serializer$v = new msRest.Serializer(Mappers$v);
    var listByNodeOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeId,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeReportListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };
    var getOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports/{reportId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeId,
            reportId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeReport
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };
    var getContentOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodes/{nodeId}/reports/{reportId}/content",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeId,
            reportId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };
    var listByNodeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeReportListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$v
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$w = /*#__PURE__*/Object.freeze({
        DscCompilationJobCreateParameters: DscCompilationJobCreateParameters,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        DscCompilationJobListResult: DscCompilationJobListResult,
        JobStream: JobStream,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DscCompilationJobOperations. */
    var DscCompilationJobOperations = /** @class */ (function () {
        /**
         * Create a DscCompilationJobOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function DscCompilationJobOperations(client) {
            this.client = client;
        }
        /**
         * Creates the Dsc compilation job of the configuration.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param compilationJobName The the DSC configuration Id.
         * @param parameters The parameters supplied to the create compilation job operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DscCompilationJobCreateResponse>
         */
        DscCompilationJobOperations.prototype.create = function (resourceGroupName$$1, automationAccountName$$1, compilationJobName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, automationAccountName$$1, compilationJobName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DscCompilationJobOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, compilationJobName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                compilationJobName: compilationJobName$$1,
                options: options
            }, getOperationSpec$n, callback);
        };
        DscCompilationJobOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$j, callback);
        };
        DscCompilationJobOperations.prototype.getStream = function (resourceGroupName$$1, automationAccountName$$1, jobId$$1, jobStreamId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobId: jobId$$1,
                jobStreamId: jobStreamId$$1,
                options: options
            }, getStreamOperationSpec, callback);
        };
        /**
         * Creates the Dsc compilation job of the configuration.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param compilationJobName The the DSC configuration Id.
         * @param parameters The parameters supplied to the create compilation job operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DscCompilationJobOperations.prototype.beginCreate = function (resourceGroupName$$1, automationAccountName$$1, compilationJobName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                compilationJobName: compilationJobName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        DscCompilationJobOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$g, callback);
        };
        return DscCompilationJobOperations;
    }());
    // Operation Specifications
    var serializer$w = new msRest.Serializer(Mappers$w);
    var getOperationSpec$n = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{compilationJobName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            compilationJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscCompilationJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var listByAutomationAccountOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscCompilationJobListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var getStreamOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{jobId}/streams/{jobStreamId}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobId,
            jobStreamId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStream
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{compilationJobName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            compilationJobName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DscCompilationJobCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: DscCompilationJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };
    var listByAutomationAccountNextOperationSpec$g = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscCompilationJobListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$w
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$x = /*#__PURE__*/Object.freeze({
        JobStreamListResult: JobStreamListResult,
        JobStream: JobStream,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DscCompilationJobStream. */
    var DscCompilationJobStream = /** @class */ (function () {
        /**
         * Create a DscCompilationJobStream.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function DscCompilationJobStream(client) {
            this.client = client;
        }
        DscCompilationJobStream.prototype.listByJob = function (resourceGroupName$$1, automationAccountName$$1, jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                jobId: jobId$$1,
                options: options
            }, listByJobOperationSpec$1, callback);
        };
        return DscCompilationJobStream;
    }());
    // Operation Specifications
    var serializer$x = new msRest.Serializer(Mappers$x);
    var listByJobOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/compilationjobs/{jobId}/streams",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            jobId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStreamListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$x
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$y = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        DscNodeConfiguration: DscNodeConfiguration,
        ProxyResource: ProxyResource,
        Resource: Resource,
        BaseResource: BaseResource,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfigurationCreateOrUpdateParameters: DscNodeConfigurationCreateOrUpdateParameters,
        ContentSource: ContentSource,
        ContentHash: ContentHash,
        DscNodeConfigurationListResult: DscNodeConfigurationListResult,
        TrackedResource: TrackedResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        Module: Module,
        ContentLink: ContentLink,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        AutomationAccount: AutomationAccount,
        Sku: Sku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DscNodeConfigurationOperations. */
    var DscNodeConfigurationOperations = /** @class */ (function () {
        /**
         * Create a DscNodeConfigurationOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function DscNodeConfigurationOperations(client) {
            this.client = client;
        }
        DscNodeConfigurationOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, nodeConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeConfigurationName: nodeConfigurationName$$1,
                options: options
            }, deleteMethodOperationSpec$g, callback);
        };
        DscNodeConfigurationOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, nodeConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeConfigurationName: nodeConfigurationName$$1,
                options: options
            }, getOperationSpec$o, callback);
        };
        /**
         * Create the node configuration identified by node configuration name.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param nodeConfigurationName The Dsc node configuration name.
         * @param parameters The create or update parameters for configuration.
         * @param [options] The optional parameters
         * @returns Promise<Models.DscNodeConfigurationCreateOrUpdateResponse>
         */
        DscNodeConfigurationOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, nodeConfigurationName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, automationAccountName$$1, nodeConfigurationName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DscNodeConfigurationOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$k, callback);
        };
        /**
         * Create the node configuration identified by node configuration name.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param nodeConfigurationName The Dsc node configuration name.
         * @param parameters The create or update parameters for configuration.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DscNodeConfigurationOperations.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, nodeConfigurationName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                nodeConfigurationName: nodeConfigurationName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        DscNodeConfigurationOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$h, callback);
        };
        return DscNodeConfigurationOperations;
    }());
    // Operation Specifications
    var serializer$y = new msRest.Serializer(Mappers$y);
    var deleteMethodOperationSpec$g = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            nodeConfigurationName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var getOperationSpec$o = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            nodeConfigurationName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var listByAutomationAccountOperationSpec$k = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2,
            filter,
            skip0,
            top0,
            inlinecount
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeConfigurationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            nodeConfigurationName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, DscNodeConfigurationCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {},
            201: {
                bodyMapper: DscNodeConfiguration
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };
    var listByAutomationAccountNextOperationSpec$h = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DscNodeConfigurationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$y
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$z = /*#__PURE__*/Object.freeze({
        NodeCounts: NodeCounts,
        NodeCount: NodeCount,
        NodeCountProperties: NodeCountProperties,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NodeCountInformation. */
    var NodeCountInformation = /** @class */ (function () {
        /**
         * Create a NodeCountInformation.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function NodeCountInformation(client) {
            this.client = client;
        }
        NodeCountInformation.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, getOperationSpec$p, callback);
        };
        return NodeCountInformation;
    }());
    // Operation Specifications
    var serializer$z = new msRest.Serializer(Mappers$z);
    var getOperationSpec$p = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodecounts/{countType}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            countType,
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NodeCounts
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$z
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$A = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        RunbookDraftReplaceContentHeaders: RunbookDraftReplaceContentHeaders,
        ErrorResponse: ErrorResponse,
        RunbookDraft: RunbookDraft,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        RunbookParameter: RunbookParameter,
        RunbookDraftUndoEditResult: RunbookDraftUndoEditResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RunbookDraftOperations. */
    var RunbookDraftOperations = /** @class */ (function () {
        /**
         * Create a RunbookDraftOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function RunbookDraftOperations(client) {
            this.client = client;
        }
        RunbookDraftOperations.prototype.getContent = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, getContentOperationSpec$2, callback);
        };
        /**
         * Replaces the runbook draft content.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param runbookName The runbook name.
         * @param runbookContent The runbook draft content.
         * @param [options] The optional parameters
         * @returns Promise<Models.RunbookDraftReplaceContentResponse>
         */
        RunbookDraftOperations.prototype.replaceContent = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, runbookContent, options) {
            return this.beginReplaceContent(resourceGroupName$$1, automationAccountName$$1, runbookName$$1, runbookContent, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RunbookDraftOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, getOperationSpec$q, callback);
        };
        RunbookDraftOperations.prototype.undoEdit = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, undoEditOperationSpec, callback);
        };
        /**
         * Replaces the runbook draft content.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param runbookName The runbook name.
         * @param runbookContent The runbook draft content.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RunbookDraftOperations.prototype.beginReplaceContent = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, runbookContent, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                runbookContent: runbookContent,
                options: options
            }, beginReplaceContentOperationSpec, options);
        };
        return RunbookDraftOperations;
    }());
    // Operation Specifications
    var serializer$A = new msRest.Serializer(Mappers$A);
    var getContentOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/content",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$A
    };
    var getOperationSpec$q = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunbookDraft
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };
    var undoEditOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/undoEdit",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunbookDraftUndoEditResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };
    var beginReplaceContentOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/content",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "runbookContent",
            mapper: {
                required: true,
                serializedName: "runbookContent",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "text/powershell",
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                },
                headersMapper: RunbookDraftReplaceContentHeaders
            },
            202: {
                headersMapper: RunbookDraftReplaceContentHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$A
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$B = /*#__PURE__*/Object.freeze({
        RunbookPublishHeaders: RunbookPublishHeaders,
        ErrorResponse: ErrorResponse,
        CloudError: CloudError,
        Runbook: Runbook,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft,
        RunbookCreateOrUpdateParameters: RunbookCreateOrUpdateParameters,
        RunbookUpdateParameters: RunbookUpdateParameters,
        RunbookListResult: RunbookListResult,
        AutomationAccount: AutomationAccount,
        Sku: Sku,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        Module: Module,
        ModuleErrorInfo: ModuleErrorInfo,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RunbookOperations. */
    var RunbookOperations = /** @class */ (function () {
        /**
         * Create a RunbookOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function RunbookOperations(client) {
            this.client = client;
        }
        /**
         * Publish runbook draft.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param runbookName The parameters supplied to the publish runbook operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RunbookPublishResponse>
         */
        RunbookOperations.prototype.publish = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options) {
            return this.beginPublish(resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        RunbookOperations.prototype.getContent = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, getContentOperationSpec$3, callback);
        };
        RunbookOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, getOperationSpec$r, callback);
        };
        RunbookOperations.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$c, callback);
        };
        RunbookOperations.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$d, callback);
        };
        RunbookOperations.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, deleteMethodOperationSpec$h, callback);
        };
        RunbookOperations.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$l, callback);
        };
        /**
         * Publish runbook draft.
         * @param resourceGroupName Name of an Azure Resource group.
         * @param automationAccountName The name of the automation account.
         * @param runbookName The parameters supplied to the publish runbook operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        RunbookOperations.prototype.beginPublish = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, beginPublishOperationSpec, options);
        };
        RunbookOperations.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$i, callback);
        };
        return RunbookOperations;
    }());
    // Operation Specifications
    var serializer$B = new msRest.Serializer(Mappers$B);
    var getContentOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/content",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$B
    };
    var getOperationSpec$r = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Runbook
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var createOrUpdateOperationSpec$c = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RunbookCreateOrUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Runbook
            },
            201: {
                bodyMapper: Runbook
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var updateOperationSpec$d = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RunbookUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Runbook
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var deleteMethodOperationSpec$h = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var listByAutomationAccountOperationSpec$l = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunbookListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var beginPublishOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/publish",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {
                headersMapper: RunbookPublishHeaders
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };
    var listByAutomationAccountNextOperationSpec$i = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunbookListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$B
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$C = /*#__PURE__*/Object.freeze({
        JobStream: JobStream,
        ErrorResponse: ErrorResponse,
        JobStreamListResult: JobStreamListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TestJobStreams. */
    var TestJobStreams = /** @class */ (function () {
        /**
         * Create a TestJobStreams.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function TestJobStreams(client) {
            this.client = client;
        }
        TestJobStreams.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, jobStreamId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                jobStreamId: jobStreamId$$1,
                options: options
            }, getOperationSpec$s, callback);
        };
        TestJobStreams.prototype.listByTestJob = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, listByTestJobOperationSpec, callback);
        };
        TestJobStreams.prototype.listByTestJobNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByTestJobNextOperationSpec, callback);
        };
        return TestJobStreams;
    }());
    // Operation Specifications
    var serializer$C = new msRest.Serializer(Mappers$C);
    var getOperationSpec$s = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/streams/{jobStreamId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName,
            jobStreamId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStream
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var listByTestJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/streams",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            filter,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStreamListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };
    var listByTestJobNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobStreamListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$C
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$D = /*#__PURE__*/Object.freeze({
        TestJobCreateParameters: TestJobCreateParameters,
        TestJob: TestJob,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TestJobOperations. */
    var TestJobOperations = /** @class */ (function () {
        /**
         * Create a TestJobOperations.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function TestJobOperations(client) {
            this.client = client;
        }
        TestJobOperations.prototype.create = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$4, callback);
        };
        TestJobOperations.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, getOperationSpec$t, callback);
        };
        TestJobOperations.prototype.resume = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, resumeOperationSpec$1, callback);
        };
        TestJobOperations.prototype.stop = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, stopOperationSpec$2, callback);
        };
        TestJobOperations.prototype.suspend = function (resourceGroupName$$1, automationAccountName$$1, runbookName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                runbookName: runbookName$$1,
                options: options
            }, suspendOperationSpec$1, callback);
        };
        return TestJobOperations;
    }());
    // Operation Specifications
    var serializer$D = new msRest.Serializer(Mappers$D);
    var createOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, TestJobCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: TestJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var getOperationSpec$t = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TestJob
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var resumeOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/resume",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var stopOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };
    var suspendOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/suspend",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            automationAccountName,
            runbookName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$D
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$E = /*#__PURE__*/Object.freeze({
        ErrorResponse: ErrorResponse,
        Module: Module,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        ModuleErrorInfo: ModuleErrorInfo,
        PythonPackageCreateParameters: PythonPackageCreateParameters,
        PythonPackageUpdateParameters: PythonPackageUpdateParameters,
        ModuleListResult: ModuleListResult,
        AutomationAccount: AutomationAccount,
        Sku: Sku,
        ProxyResource: ProxyResource,
        Certificate: Certificate,
        Connection: Connection,
        ConnectionTypeAssociationProperty: ConnectionTypeAssociationProperty,
        Credential: Credential,
        DscConfiguration: DscConfiguration,
        DscConfigurationParameter: DscConfigurationParameter,
        ContentSource: ContentSource,
        Schedule: Schedule,
        AdvancedSchedule: AdvancedSchedule,
        AdvancedScheduleMonthlyOccurrence: AdvancedScheduleMonthlyOccurrence,
        Variable: Variable,
        Webhook: Webhook,
        RunbookAssociationProperty: RunbookAssociationProperty,
        Watcher: Watcher,
        SoftwareUpdateConfiguration: SoftwareUpdateConfiguration,
        UpdateConfiguration: UpdateConfiguration,
        WindowsProperties: WindowsProperties,
        LinuxProperties: LinuxProperties,
        TargetProperties: TargetProperties,
        AzureQueryProperties: AzureQueryProperties,
        TagSettingsProperties: TagSettingsProperties,
        ScheduleProperties: ScheduleProperties,
        SourceControl: SourceControl,
        Job: Job,
        JobCollectionItem: JobCollectionItem,
        DscNode: DscNode,
        DscNodeExtensionHandlerAssociationProperty: DscNodeExtensionHandlerAssociationProperty,
        DscCompilationJob: DscCompilationJob,
        DscConfigurationAssociationProperty: DscConfigurationAssociationProperty,
        DscNodeConfiguration: DscNodeConfiguration,
        Runbook: Runbook,
        RunbookParameter: RunbookParameter,
        RunbookDraft: RunbookDraft
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Python2Package. */
    var Python2Package = /** @class */ (function () {
        /**
         * Create a Python2Package.
         * @param {AutomationClientContext} client Reference to the service client.
         */
        function Python2Package(client) {
            this.client = client;
        }
        Python2Package.prototype.deleteMethod = function (resourceGroupName$$1, automationAccountName$$1, packageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                packageName: packageName$$1,
                options: options
            }, deleteMethodOperationSpec$i, callback);
        };
        Python2Package.prototype.get = function (resourceGroupName$$1, automationAccountName$$1, packageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                packageName: packageName$$1,
                options: options
            }, getOperationSpec$u, callback);
        };
        Python2Package.prototype.createOrUpdate = function (resourceGroupName$$1, automationAccountName$$1, packageName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                packageName: packageName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$d, callback);
        };
        Python2Package.prototype.update = function (resourceGroupName$$1, automationAccountName$$1, packageName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                packageName: packageName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$e, callback);
        };
        Python2Package.prototype.listByAutomationAccount = function (resourceGroupName$$1, automationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                automationAccountName: automationAccountName$$1,
                options: options
            }, listByAutomationAccountOperationSpec$m, callback);
        };
        Python2Package.prototype.listByAutomationAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAutomationAccountNextOperationSpec$j, callback);
        };
        return Python2Package;
    }());
    // Operation Specifications
    var serializer$E = new msRest.Serializer(Mappers$E);
    var deleteMethodOperationSpec$i = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages/{packageName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            packageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };
    var getOperationSpec$u = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages/{packageName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            packageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Module
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };
    var createOrUpdateOperationSpec$d = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages/{packageName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            packageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PythonPackageCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Module
            },
            201: {
                bodyMapper: Module
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };
    var updateOperationSpec$e = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages/{packageName}",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            packageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, PythonPackageUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Module
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };
    var listByAutomationAccountOperationSpec$m = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python2Packages",
        urlParameters: [
            resourceGroupName,
            automationAccountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ModuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };
    var listByAutomationAccountNextOperationSpec$j = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ModuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$E
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName$1 = "@azure/arm-automation";
    var packageVersion = "1.0.0-preview";
    var AutomationClientContext = /** @class */ (function (_super) {
        __extends(AutomationClientContext, _super);
        /**
         * Initializes a new instance of the AutomationClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param countType1 The type of counts to retrieve. Possible values include: 'status',
         * 'nodeconfiguration'
         * @param [options] The parameter options
         */
        function AutomationClientContext(credentials, subscriptionId, countType1, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (countType1 == undefined) {
                throw new Error('\'countType1\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.countType1 = countType1;
            _this.addUserAgentInfo(packageName$1 + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AutomationClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AutomationClient = /** @class */ (function (_super) {
        __extends(AutomationClient, _super);
        /**
         * Initializes a new instance of the AutomationClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param countType1 The type of counts to retrieve. Possible values include: 'status',
         * 'nodeconfiguration'
         * @param [options] The parameter options
         */
        function AutomationClient(credentials, subscriptionId, countType1, options) {
            var _this = _super.call(this, credentials, subscriptionId, countType1, options) || this;
            _this.automationAccount = new AutomationAccountOperations(_this);
            _this.operations = new Operations(_this);
            _this.statistics = new StatisticsOperations(_this);
            _this.usages = new Usages(_this);
            _this.keys = new Keys(_this);
            _this.certificate = new CertificateOperations(_this);
            _this.connection = new ConnectionOperations(_this);
            _this.connectionType = new ConnectionTypeOperations(_this);
            _this.credential = new CredentialOperations(_this);
            _this.dscConfiguration = new DscConfigurationOperations(_this);
            _this.hybridRunbookWorkerGroup = new HybridRunbookWorkerGroupOperations(_this);
            _this.jobSchedule = new JobScheduleOperations(_this);
            _this.linkedWorkspace = new LinkedWorkspaceOperations(_this);
            _this.activity = new ActivityOperations(_this);
            _this.module = new ModuleOperations(_this);
            _this.objectDataTypes = new ObjectDataTypes(_this);
            _this.fields = new Fields(_this);
            _this.schedule = new ScheduleOperations(_this);
            _this.variable = new VariableOperations(_this);
            _this.webhook = new WebhookOperations(_this);
            _this.watcher = new WatcherOperations(_this);
            _this.softwareUpdateConfigurations = new SoftwareUpdateConfigurations(_this);
            _this.softwareUpdateConfigurationRuns = new SoftwareUpdateConfigurationRuns(_this);
            _this.softwareUpdateConfigurationMachineRuns = new SoftwareUpdateConfigurationMachineRuns(_this);
            _this.sourceControl = new SourceControlOperations(_this);
            _this.sourceControlSyncJob = new SourceControlSyncJobOperations(_this);
            _this.sourceControlSyncJobStreams = new SourceControlSyncJobStreams(_this);
            _this.job = new JobOperations(_this);
            _this.jobStream = new JobStreamOperations(_this);
            _this.agentRegistrationInformation = new AgentRegistrationInformation(_this);
            _this.dscNode = new DscNodeOperations(_this);
            _this.nodeReports = new NodeReports(_this);
            _this.dscCompilationJob = new DscCompilationJobOperations(_this);
            _this.dscCompilationJobStream = new DscCompilationJobStream(_this);
            _this.dscNodeConfiguration = new DscNodeConfigurationOperations(_this);
            _this.nodeCountInformation = new NodeCountInformation(_this);
            _this.runbookDraft = new RunbookDraftOperations(_this);
            _this.runbook = new RunbookOperations(_this);
            _this.testJobStreams = new TestJobStreams(_this);
            _this.testJob = new TestJobOperations(_this);
            _this.python2Package = new Python2Package(_this);
            return _this;
        }
        return AutomationClient;
    }(AutomationClientContext));

    exports.AutomationClient = AutomationClient;
    exports.AutomationClientContext = AutomationClientContext;
    exports.AutomationModels = index;
    exports.AutomationMappers = mappers;
    exports.AutomationAccountOperations = AutomationAccountOperations;
    exports.Operations = Operations;
    exports.StatisticsOperations = StatisticsOperations;
    exports.Usages = Usages;
    exports.Keys = Keys;
    exports.CertificateOperations = CertificateOperations;
    exports.ConnectionOperations = ConnectionOperations;
    exports.ConnectionTypeOperations = ConnectionTypeOperations;
    exports.CredentialOperations = CredentialOperations;
    exports.DscConfigurationOperations = DscConfigurationOperations;
    exports.HybridRunbookWorkerGroupOperations = HybridRunbookWorkerGroupOperations;
    exports.JobScheduleOperations = JobScheduleOperations;
    exports.LinkedWorkspaceOperations = LinkedWorkspaceOperations;
    exports.ActivityOperations = ActivityOperations;
    exports.ModuleOperations = ModuleOperations;
    exports.ObjectDataTypes = ObjectDataTypes;
    exports.Fields = Fields;
    exports.ScheduleOperations = ScheduleOperations;
    exports.VariableOperations = VariableOperations;
    exports.WebhookOperations = WebhookOperations;
    exports.WatcherOperations = WatcherOperations;
    exports.SoftwareUpdateConfigurations = SoftwareUpdateConfigurations;
    exports.SoftwareUpdateConfigurationRuns = SoftwareUpdateConfigurationRuns;
    exports.SoftwareUpdateConfigurationMachineRuns = SoftwareUpdateConfigurationMachineRuns;
    exports.SourceControlOperations = SourceControlOperations;
    exports.SourceControlSyncJobOperations = SourceControlSyncJobOperations;
    exports.SourceControlSyncJobStreams = SourceControlSyncJobStreams;
    exports.JobOperations = JobOperations;
    exports.JobStreamOperations = JobStreamOperations;
    exports.AgentRegistrationInformation = AgentRegistrationInformation;
    exports.DscNodeOperations = DscNodeOperations;
    exports.NodeReports = NodeReports;
    exports.DscCompilationJobOperations = DscCompilationJobOperations;
    exports.DscCompilationJobStream = DscCompilationJobStream;
    exports.DscNodeConfigurationOperations = DscNodeConfigurationOperations;
    exports.NodeCountInformation = NodeCountInformation;
    exports.RunbookDraftOperations = RunbookDraftOperations;
    exports.RunbookOperations = RunbookOperations;
    exports.TestJobStreams = TestJobStreams;
    exports.TestJobOperations = TestJobOperations;
    exports.Python2Package = Python2Package;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-automation.js.map
