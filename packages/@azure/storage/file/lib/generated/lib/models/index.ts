/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */


import * as msRest from "@azure/ms-rest-js";

/**
 * An Access policy.
 */
export interface AccessPolicy {
  /**
   * The date-time the policy is active.
   * **NOTE: This entity will be treated as a string instead of a Date because the API can
   * potentially deal with a higher precision value than what is supported by JavaScript.**
   */
  start?: string;
  /**
   * The date-time the policy expires.
   * **NOTE: This entity will be treated as a string instead of a Date because the API can
   * potentially deal with a higher precision value than what is supported by JavaScript.**
   */
  expiry?: string;
  /**
   * The permissions for the ACL policy.
   */
  permission?: string;
}

/**
 * CORS is an HTTP feature that enables a web application running under one domain to access
 * resources in another domain. Web browsers implement a security restriction known as same-origin
 * policy that prevents a web page from calling APIs in a different domain; CORS provides a secure
 * way to allow one domain (the origin domain) to call APIs in another domain.
 */
export interface CorsRule {
  /**
   * The origin domains that are permitted to make a request against the storage service via CORS.
   * The origin domain is the domain from which the request originates. Note that the origin must
   * be an exact case-sensitive match with the origin that the user age sends to the service. You
   * can also use the wildcard character '*' to allow all origin domains to make requests via CORS.
   */
  allowedOrigins: string;
  /**
   * The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma
   * separated)
   */
  allowedMethods: string;
  /**
   * The request headers that the origin domain may specify on the CORS request.
   */
  allowedHeaders: string;
  /**
   * The response headers that may be sent in the response to the CORS request and exposed by the
   * browser to the request issuer.
   */
  exposedHeaders: string;
  /**
   * The maximum amount time that a browser should cache the preflight OPTIONS request.
   */
  maxAgeInSeconds: number;
}

/**
 * A listed directory item.
 */
export interface DirectoryItem {
  name: string;
}

/**
 * File properties.
 */
export interface FileProperty {
  /**
   * Content length of the file. This value may not be up-to-date since an SMB client may have
   * modified the file locally. The value of Content-Length may not reflect that fact until the
   * handle is closed or the op-lock is broken. To retrieve current property values, call Get File
   * Properties.
   */
  contentLength: number;
}

/**
 * A listed file item.
 */
export interface FileItem {
  name: string;
  properties: FileProperty;
}

/**
 * Abstract for entries that can be listed from Directory.
 */
export interface FilesAndDirectoriesListSegment {
  directoryItems: DirectoryItem[];
  fileItems: FileItem[];
}

/**
 * An enumeration of directories and files.
 */
export interface ListFilesAndDirectoriesSegmentResponse {
  serviceEndpoint: string;
  shareName: string;
  shareSnapshot?: string;
  directoryPath: string;
  prefix: string;
  marker?: string;
  maxResults?: number;
  segment: FilesAndDirectoriesListSegment;
  nextMarker: string;
}

/**
 * Properties of a share.
 */
export interface ShareProperties {
  lastModified: Date;
  etag: string;
  quota: number;
}

/**
 * A listed Azure Storage share item.
 */
export interface ShareItem {
  name: string;
  snapshot?: string;
  properties: ShareProperties;
  metadata?: { [propertyName: string]: string };
}

/**
 * An enumeration of shares.
 */
export interface ListSharesResponse {
  serviceEndpoint: string;
  prefix?: string;
  marker?: string;
  maxResults?: number;
  shareItems?: ShareItem[];
  nextMarker: string;
}

/**
 * The retention policy.
 */
export interface RetentionPolicy {
  /**
   * Indicates whether a retention policy is enabled for the File service. If false, metrics data
   * is retained, and the user is responsible for deleting it.
   */
  enabled: boolean;
  /**
   * Indicates the number of days that metrics data should be retained. All data older than this
   * value will be deleted. Metrics data is deleted on a best-effort basis after the retention
   * period expires.
   */
  days?: number;
}

/**
 * Storage Analytics metrics for file service.
 */
export interface Metrics {
  /**
   * The version of Storage Analytics to configure.
   */
  version: string;
  /**
   * Indicates whether metrics are enabled for the File service.
   */
  enabled: boolean;
  /**
   * Indicates whether metrics should generate summary statistics for called API operations.
   */
  includeAPIs?: boolean;
  retentionPolicy?: RetentionPolicy;
}

/**
 * An Azure Storage file range.
 */
export interface Range {
  /**
   * Start of the range.
   */
  start: number;
  /**
   * End of the range.
   */
  end: number;
}

/**
 * An interface representing StorageError.
 */
export interface StorageError {
  message?: string;
}

/**
 * Stats for the share.
 */
export interface ShareStats {
  /**
   * The approximate size of the data stored on the share, rounded up to the nearest gigabyte. Note
   * that this value may not include all recently created or recently resized files.
   */
  shareUsage: number;
}

/**
 * Signed identifier.
 */
export interface SignedIdentifier {
  /**
   * A unique id.
   */
  id: string;
  /**
   * The access policy.
   */
  accessPolicy?: AccessPolicy;
}

/**
 * Storage service properties.
 */
export interface StorageServiceProperties {
  /**
   * A summary of request statistics grouped by API in hourly aggregates for files.
   */
  hourMetrics?: Metrics;
  /**
   * A summary of request statistics grouped by API in minute aggregates for files.
   */
  minuteMetrics?: Metrics;
  /**
   * The set of CORS rules.
   */
  cors?: CorsRule[];
}

/**
 * Optional Parameters.
 */
export interface ServiceSetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface ServiceGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface ServiceListSharesSegmentOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filters the results to return only entries whose name begins with the specified prefix.
   */
  prefix?: string;
  /**
   * A string value that identifies the portion of the list to be returned with the next list
   * operation. The operation returns a marker value within the response body if the list returned
   * was not complete. The marker value may then be used in a subsequent call to request the next
   * set of list items. The marker value is opaque to the client.
   */
  marker?: string;
  /**
   * Specifies the maximum number of entries to return. If the request does not specify maxresults,
   * or specifies a value greater than 5,000, the server will return up to 5,000 items.
   */
  maxresults?: number;
  /**
   * Include this parameter to specify one or more datasets to include in the response.
   */
  include?: ListSharesIncludeType[];
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface ShareCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * Specifies the maximum size of the share, in gigabytes.
   */
  quota?: number;
}

/**
 * Optional Parameters.
 */
export interface ShareGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share
   * snapshot to query.
   */
  sharesnapshot?: string;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface ShareDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share
   * snapshot to query.
   */
  sharesnapshot?: string;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * Specifies the option include to delete the base share and all of its snapshots. Possible
   * values include: 'include'
   */
  deleteSnapshots?: DeleteSnapshotsOptionType;
}

/**
 * Optional Parameters.
 */
export interface ShareCreateSnapshotOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface ShareSetQuotaOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * Specifies the maximum size of the share, in gigabytes.
   */
  quota?: number;
}

/**
 * Optional Parameters.
 */
export interface ShareSetMetadataOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface ShareGetAccessPolicyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface ShareSetAccessPolicyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The ACL for the share.
   */
  shareAcl?: SignedIdentifier[];
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface ShareGetStatisticsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface DirectoryCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface DirectoryGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share
   * snapshot to query.
   */
  sharesnapshot?: string;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface DirectoryDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface DirectorySetMetadataOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface DirectoryListFilesAndDirectoriesSegmentOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filters the results to return only entries whose name begins with the specified prefix.
   */
  prefix?: string;
  /**
   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share
   * snapshot to query.
   */
  sharesnapshot?: string;
  /**
   * A string value that identifies the portion of the list to be returned with the next list
   * operation. The operation returns a marker value within the response body if the list returned
   * was not complete. The marker value may then be used in a subsequent call to request the next
   * set of list items. The marker value is opaque to the client.
   */
  marker?: string;
  /**
   * Specifies the maximum number of entries to return. If the request does not specify maxresults,
   * or specifies a value greater than 5,000, the server will return up to 5,000 items.
   */
  maxresults?: number;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface FileCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * Sets the MIME content type of the file. The default type is 'application/octet-stream'.
   */
  fileContentType?: string;
  /**
   * Specifies which content encodings have been applied to the file.
   */
  fileContentEncoding?: string;
  /**
   * Specifies the natural languages used by this resource.
   */
  fileContentLanguage?: string;
  /**
   * Sets the file's cache control. The File service stores this value but does not use or modify
   * it.
   */
  fileCacheControl?: string;
  /**
   * Sets the file's MD5 hash.
   */
  fileContentMD5?: Uint8Array;
  /**
   * Sets the file's Content-Disposition header.
   */
  fileContentDisposition?: string;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface FileDownloadOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * Return file data only from the specified byte range.
   */
  range?: string;
  /**
   * When this header is set to true and specified together with the Range header, the service
   * returns the MD5 hash for the range, as long as the range is less than or equal to 4 MB in
   * size.
   */
  rangeGetContentMD5?: boolean;
}

/**
 * Optional Parameters.
 */
export interface FileGetPropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share
   * snapshot to query.
   */
  sharesnapshot?: string;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface FileDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Optional Parameters.
 */
export interface FileSetHTTPHeadersOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * Resizes a file to the specified size. If the specified byte value is less than the current
   * size of the file, then all ranges above the specified byte value are cleared.
   */
  fileContentLength?: number;
  /**
   * Sets the MIME content type of the file. The default type is 'application/octet-stream'.
   */
  fileContentType?: string;
  /**
   * Specifies which content encodings have been applied to the file.
   */
  fileContentEncoding?: string;
  /**
   * Specifies the natural languages used by this resource.
   */
  fileContentLanguage?: string;
  /**
   * Sets the file's cache control. The File service stores this value but does not use or modify
   * it.
   */
  fileCacheControl?: string;
  /**
   * Sets the file's MD5 hash.
   */
  fileContentMD5?: Uint8Array;
  /**
   * Sets the file's Content-Disposition header.
   */
  fileContentDisposition?: string;
}

/**
 * Optional Parameters.
 */
export interface FileSetMetadataOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface FileUploadRangeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Initial data.
   */
  optionalbody?: msRest.HttpRequestBody;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * An MD5 hash of the content. This hash is used to verify the integrity of the data during
   * transport. When the Content-MD5 header is specified, the File service compares the hash of the
   * content that has arrived with the header value that was sent. If the two hashes do not match,
   * the operation will fail with error code 400 (Bad Request).
   */
  contentMD5?: Uint8Array;
}

/**
 * Optional Parameters.
 */
export interface FileGetRangeListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The snapshot parameter is an opaque DateTime value that, when present, specifies the share
   * snapshot to query.
   */
  sharesnapshot?: string;
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * Specifies the range of bytes over which to list ranges, inclusively.
   */
  range?: string;
}

/**
 * Optional Parameters.
 */
export interface FileStartCopyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
  /**
   * A name-value pair to associate with a file storage object.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface FileAbortCopyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The timeout parameter is expressed in seconds. For more information, see <a
   * href="https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN">Setting
   * Timeouts for File Service Operations.</a>
   */
  timeoutParameter?: number;
}

/**
 * Defines headers for SetProperties operation.
 */
export interface ServiceSetPropertiesHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  errorCode?: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface ServiceGetPropertiesHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  errorCode?: string;
}

/**
 * Defines headers for ListSharesSegment operation.
 */
export interface ServiceListSharesSegmentHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  errorCode?: string;
}

/**
 * Defines headers for Create operation.
 */
export interface ShareCreateHeaders {
  /**
   * The ETag contains a value which represents the version of the share, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties or metadata updates the last modified time. Operations on files do not
   * affect the last modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface ShareGetPropertiesHeaders {
  metadata?: { [propertyName: string]: string };
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties updates the last modified time. Operations on files do not affect the last
   * modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * Returns the current share quota in GB.
   */
  quota?: number;
  errorCode?: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface ShareDeleteHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for CreateSnapshot operation.
 */
export interface ShareCreateSnapshotHeaders {
  /**
   * This header is a DateTime value that uniquely identifies the share snapshot. The value of this
   * header may be used in subsequent requests to access the share snapshot. This value is opaque.
   */
  snapshot?: string;
  /**
   * The ETag contains a value which represents the version of the share snapshot, in quotes. A
   * share snapshot cannot be modified, so the ETag of a given share snapshot never changes.
   * However, if new metadata was supplied with the Snapshot Share request then the ETag of the
   * share snapshot differs from that of the base share. If no metadata was specified with the
   * request, the ETag of the share snapshot is identical to that of the base share at the time the
   * share snapshot was taken.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. A share snapshot cannot be modified, so
   * the last modified time of a given share snapshot never changes. However, if new metadata was
   * supplied with the Snapshot Share request then the last modified time of the share snapshot
   * differs from that of the base share. If no metadata was specified with the request, the last
   * modified time of the share snapshot is identical to that of the base share at the time the
   * share snapshot was taken.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetQuota operation.
 */
export interface ShareSetQuotaHeaders {
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties updates the last modified time. Operations on files do not affect the last
   * modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetMetadata operation.
 */
export interface ShareSetMetadataHeaders {
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties updates the last modified time. Operations on files do not affect the last
   * modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for GetAccessPolicy operation.
 */
export interface ShareGetAccessPolicyHeaders {
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties updates the last modified time. Operations on files do not affect the last
   * modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetAccessPolicy operation.
 */
export interface ShareSetAccessPolicyHeaders {
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties updates the last modified time. Operations on files do not affect the last
   * modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for GetStatistics operation.
 */
export interface ShareGetStatisticsHeaders {
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the share
   * or its properties updates the last modified time. Operations on files do not affect the last
   * modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for Create operation.
 */
export interface DirectoryCreateHeaders {
  /**
   * The ETag contains a value which represents the version of the directory, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the
   * directory or its properties updates the last modified time. Operations on files do not affect
   * the last modified time of the directory.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface DirectoryGetPropertiesHeaders {
  metadata?: { [propertyName: string]: string };
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the Directory was last modified. Operations on files within the
   * directory do not affect the last modified time of the directory.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the directory metadata is completely encrypted
   * using the specified algorithm. Otherwise, the value is set to false.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface DirectoryDeleteHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetMetadata operation.
 */
export interface DirectorySetMetadataHeaders {
  /**
   * The ETag contains a value which represents the version of the directory, in quotes.
   */
  eTag?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for ListFilesAndDirectoriesSegment operation.
 */
export interface DirectoryListFilesAndDirectoriesSegmentHeaders {
  /**
   * Specifies the format in which the results are returned. Currently this value is
   * 'application/xml'.
   */
  contentType?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for Create operation.
 */
export interface FileCreateHeaders {
  /**
   * The ETag contains a value which represents the version of the file, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the share was last modified. Any operation that modifies the
   * directory or its properties updates the last modified time. Operations on files do not affect
   * the last modified time of the directory.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for Download operation.
 */
export interface FileDownloadHeaders {
  /**
   * Returns the date and time the file was last modified. Any operation that modifies the file or
   * its properties updates the last modified time.
   */
  lastModified?: Date;
  metadata?: { [propertyName: string]: string };
  /**
   * The number of bytes present in the response body.
   */
  contentLength?: number;
  /**
   * The content type specified for the file. The default content type is
   * 'application/octet-stream'
   */
  contentType?: string;
  /**
   * Indicates the range of bytes returned if the client requested a subset of the file by setting
   * the Range request header.
   */
  contentRange?: string;
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * If the file has an MD5 hash and the request is to read the full file, this response header is
   * returned so that the client can check for message content integrity. If the request is to read
   * a specified range and the 'x-ms-range-get-content-md5' is set to true, then the request
   * returns an MD5 hash for the range, as long as the range size is less than or equal to 4 MB. If
   * neither of these sets of conditions is true, then no value is returned for the 'Content-MD5'
   * header.
   */
  contentMD5?: Uint8Array;
  /**
   * Returns the value that was specified for the Content-Encoding request header.
   */
  contentEncoding?: string;
  /**
   * Returned if it was previously specified for the file.
   */
  cacheControl?: string;
  /**
   * Returns the value that was specified for the 'x-ms-content-disposition' header and specifies
   * how to process the response.
   */
  contentDisposition?: string;
  /**
   * Returns the value that was specified for the Content-Language request header.
   */
  contentLanguage?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * Indicates that the service supports requests for partial file content.
   */
  acceptRanges?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * Conclusion time of the last attempted Copy File operation where this file was the destination
   * file. This value can specify the time of a completed, aborted, or failed copy attempt.
   */
  copyCompletionTime?: Date;
  /**
   * Only appears when x-ms-copy-status is failed or pending. Describes cause of fatal or non-fatal
   * copy operation failure.
   */
  copyStatusDescription?: string;
  /**
   * String identifier for the last attempted Copy File operation where this file was the
   * destination file.
   */
  copyId?: string;
  /**
   * Contains the number of bytes copied and the total bytes in the source in the last attempted
   * Copy File operation where this file was the destination file. Can show between 0 and
   * Content-Length bytes copied.
   */
  copyProgress?: string;
  /**
   * URL up to 2KB in length that specifies the source file used in the last attempted Copy File
   * operation where this file was the destination file.
   */
  copySource?: string;
  /**
   * State of the copy operation identified by 'x-ms-copy-id'. Possible values include: 'pending',
   * 'success', 'aborted', 'failed'
   */
  copyStatus?: CopyStatusType;
  /**
   * If the file has a MD5 hash, and if request contains range header (Range or x-ms-range), this
   * response header is returned with the value of the whole file's MD5 value. This value may or
   * may not be equal to the value returned in Content-MD5 header, with the latter calculated from
   * the requested range.
   */
  fileContentMD5?: Uint8Array;
  /**
   * The value of this header is set to true if the file data and application metadata are
   * completely encrypted using the specified algorithm. Otherwise, the value is set to false (when
   * the file is unencrypted, or if only parts of the file/application metadata are encrypted).
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for GetProperties operation.
 */
export interface FileGetPropertiesHeaders {
  /**
   * Returns the date and time the file was last modified. The date format follows RFC 1123. Any
   * operation that modifies the file or its properties updates the last modified time.
   */
  lastModified?: Date;
  metadata?: { [propertyName: string]: string };
  /**
   * Returns the type File. Reserved for future use. Possible values include: 'File'
   */
  fileType?: FileType;
  /**
   * The size of the file in bytes. This header returns the value of the 'x-ms-content-length'
   * header that is stored with the file.
   */
  contentLength?: number;
  /**
   * The content type specified for the file. The default content type is
   * 'application/octet-stream'
   */
  contentType?: string;
  /**
   * The ETag contains a value that you can use to perform operations conditionally, in quotes.
   */
  eTag?: string;
  /**
   * If the Content-MD5 header has been set for the file, the Content-MD5 response header is
   * returned so that the client can check for message content integrity.
   */
  contentMD5?: Uint8Array;
  /**
   * If the Content-Encoding request header has previously been set for the file, the
   * Content-Encoding value is returned in this header.
   */
  contentEncoding?: string;
  /**
   * If the Cache-Control request header has previously been set for the file, the Cache-Control
   * value is returned in this header.
   */
  cacheControl?: string;
  /**
   * Returns the value that was specified for the 'x-ms-content-disposition' header and specifies
   * how to process the response.
   */
  contentDisposition?: string;
  /**
   * Returns the value that was specified for the Content-Language request header.
   */
  contentLanguage?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * Conclusion time of the last attempted Copy File operation where this file was the destination
   * file. This value can specify the time of a completed, aborted, or failed copy attempt.
   */
  copyCompletionTime?: Date;
  /**
   * Only appears when x-ms-copy-status is failed or pending. Describes cause of fatal or non-fatal
   * copy operation failure.
   */
  copyStatusDescription?: string;
  /**
   * String identifier for the last attempted Copy File operation where this file was the
   * destination file.
   */
  copyId?: string;
  /**
   * Contains the number of bytes copied and the total bytes in the source in the last attempted
   * Copy File operation where this file was the destination file. Can show between 0 and
   * Content-Length bytes copied.
   */
  copyProgress?: string;
  /**
   * URL up to 2KB in length that specifies the source file used in the last attempted Copy File
   * operation where this file was the destination file.
   */
  copySource?: string;
  /**
   * State of the copy operation identified by 'x-ms-copy-id'. Possible values include: 'pending',
   * 'success', 'aborted', 'failed'
   */
  copyStatus?: CopyStatusType;
  /**
   * The value of this header is set to true if the file data and application metadata are
   * completely encrypted using the specified algorithm. Otherwise, the value is set to false (when
   * the file is unencrypted, or if only parts of the file/application metadata are encrypted).
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface FileDeleteHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for SetHTTPHeaders operation.
 */
export interface FileSetHTTPHeadersHeaders {
  /**
   * The ETag contains a value which represents the version of the file, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the directory was last modified. Any operation that modifies the
   * directory or its properties updates the last modified time. Operations on files do not affect
   * the last modified time of the directory.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for SetMetadata operation.
 */
export interface FileSetMetadataHeaders {
  /**
   * The ETag contains a value which represents the version of the file, in quotes.
   */
  eTag?: string;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for UploadRange operation.
 */
export interface FileUploadRangeHeaders {
  /**
   * The ETag contains a value which represents the version of the file, in quotes.
   */
  eTag?: string;
  /**
   * Returns the date and time the directory was last modified. Any operation that modifies the
   * share or its properties or metadata updates the last modified time. Operations on files do not
   * affect the last modified time of the share.
   */
  lastModified?: Date;
  /**
   * This header is returned so that the client can check for message content integrity. The value
   * of this header is computed by the File service; it is not necessarily the same value as may
   * have been specified in the request headers.
   */
  contentMD5?: Uint8Array;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * The value of this header is set to true if the contents of the request are successfully
   * encrypted using the specified algorithm, and false otherwise.
   */
  isServerEncrypted?: boolean;
  errorCode?: string;
}

/**
 * Defines headers for GetRangeList operation.
 */
export interface FileGetRangeListHeaders {
  /**
   * The date/time that the file was last modified. Any operation that modifies the file, including
   * an update of the file's metadata or properties, changes the file's last modified time.
   */
  lastModified?: Date;
  /**
   * The ETag contains a value which represents the version of the file, in quotes.
   */
  eTag?: string;
  /**
   * The size of the file in bytes.
   */
  fileContentLength?: number;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines headers for StartCopy operation.
 */
export interface FileStartCopyHeaders {
  /**
   * If the copy is completed, contains the ETag of the destination file. If the copy is not
   * complete, contains the ETag of the empty file created at the start of the copy.
   */
  eTag?: string;
  /**
   * Returns the date/time that the copy operation to the destination file completed.
   */
  lastModified?: Date;
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  /**
   * String identifier for this copy operation. Use with Get File or Get File Properties to check
   * the status of this copy operation, or pass to Abort Copy File to abort a pending copy.
   */
  copyId?: string;
  /**
   * State of the copy operation identified by x-ms-copy-id. Possible values include: 'pending',
   * 'success', 'aborted', 'failed'
   */
  copyStatus?: CopyStatusType;
  errorCode?: string;
}

/**
 * Defines headers for AbortCopy operation.
 */
export interface FileAbortCopyHeaders {
  /**
   * This header uniquely identifies the request that was made and can be used for troubleshooting
   * the request.
   */
  requestId?: string;
  /**
   * Indicates the version of the File service used to execute the request.
   */
  version?: string;
  /**
   * A UTC date/time value generated by the service that indicates the time at which the response
   * was initiated.
   */
  date?: Date;
  errorCode?: string;
}

/**
 * Defines values for DeleteSnapshotsOptionType.
 * Possible values include: 'include'
 * @readonly
 * @enum {string}
 */
export type DeleteSnapshotsOptionType = 'include';

/**
 * Defines values for ListSharesIncludeType.
 * Possible values include: 'snapshots', 'metadata'
 * @readonly
 * @enum {string}
 */
export type ListSharesIncludeType = 'snapshots' | 'metadata';

/**
 * Defines values for CopyStatusType.
 * Possible values include: 'pending', 'success', 'aborted', 'failed'
 * @readonly
 * @enum {string}
 */
export type CopyStatusType = 'pending' | 'success' | 'aborted' | 'failed';

/**
 * Defines values for FileRangeWriteType.
 * Possible values include: 'update', 'clear'
 * @readonly
 * @enum {string}
 */
export type FileRangeWriteType = 'update' | 'clear';

/**
 * Defines values for FileType.
 * Possible values include: 'File'
 * @readonly
 * @enum {string}
 */
export type FileType = 'File';

/**
 * Contains response data for the setProperties operation.
 */
export type ServiceSetPropertiesResponse = ServiceSetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ServiceSetPropertiesHeaders;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type ServiceGetPropertiesResponse = StorageServiceProperties & ServiceGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ServiceGetPropertiesHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageServiceProperties;
    };
};

/**
 * Contains response data for the listSharesSegment operation.
 */
export type ServiceListSharesSegmentResponse = ListSharesResponse & ServiceListSharesSegmentHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ServiceListSharesSegmentHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListSharesResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ShareCreateResponse = ShareCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareCreateHeaders;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type ShareGetPropertiesResponse = ShareGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareGetPropertiesHeaders;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type ShareDeleteResponse = ShareDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareDeleteHeaders;
    };
};

/**
 * Contains response data for the createSnapshot operation.
 */
export type ShareCreateSnapshotResponse = ShareCreateSnapshotHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareCreateSnapshotHeaders;
    };
};

/**
 * Contains response data for the setQuota operation.
 */
export type ShareSetQuotaResponse = ShareSetQuotaHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareSetQuotaHeaders;
    };
};

/**
 * Contains response data for the setMetadata operation.
 */
export type ShareSetMetadataResponse = ShareSetMetadataHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareSetMetadataHeaders;
    };
};

/**
 * Contains response data for the getAccessPolicy operation.
 */
export type ShareGetAccessPolicyResponse = Array<SignedIdentifier> & ShareGetAccessPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareGetAccessPolicyHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SignedIdentifier[];
    };
};

/**
 * Contains response data for the setAccessPolicy operation.
 */
export type ShareSetAccessPolicyResponse = ShareSetAccessPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareSetAccessPolicyHeaders;
    };
};

/**
 * Contains response data for the getStatistics operation.
 */
export type ShareGetStatisticsResponse = ShareStats & ShareGetStatisticsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ShareGetStatisticsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ShareStats;
    };
};

/**
 * Contains response data for the create operation.
 */
export type DirectoryCreateResponse = DirectoryCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DirectoryCreateHeaders;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type DirectoryGetPropertiesResponse = DirectoryGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DirectoryGetPropertiesHeaders;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type DirectoryDeleteResponse = DirectoryDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DirectoryDeleteHeaders;
    };
};

/**
 * Contains response data for the setMetadata operation.
 */
export type DirectorySetMetadataResponse = DirectorySetMetadataHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DirectorySetMetadataHeaders;
    };
};

/**
 * Contains response data for the listFilesAndDirectoriesSegment operation.
 */
export type DirectoryListFilesAndDirectoriesSegmentResponse = ListFilesAndDirectoriesSegmentResponse & DirectoryListFilesAndDirectoriesSegmentHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DirectoryListFilesAndDirectoriesSegmentHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListFilesAndDirectoriesSegmentResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type FileCreateResponse = FileCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileCreateHeaders;
    };
};

/**
 * Contains response data for the download operation.
 */
export type FileDownloadResponse = FileDownloadHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileDownloadHeaders;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type FileGetPropertiesResponse = FileGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileGetPropertiesHeaders;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type FileDeleteResponse = FileDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileDeleteHeaders;
    };
};

/**
 * Contains response data for the setHTTPHeaders operation.
 */
export type FileSetHTTPHeadersResponse = FileSetHTTPHeadersHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileSetHTTPHeadersHeaders;
    };
};

/**
 * Contains response data for the setMetadata operation.
 */
export type FileSetMetadataResponse = FileSetMetadataHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileSetMetadataHeaders;
    };
};

/**
 * Contains response data for the uploadRange operation.
 */
export type FileUploadRangeResponse = FileUploadRangeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileUploadRangeHeaders;
    };
};

/**
 * Contains response data for the getRangeList operation.
 */
export type FileGetRangeListResponse = Array<Range> & FileGetRangeListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileGetRangeListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Range[];
    };
};

/**
 * Contains response data for the startCopy operation.
 */
export type FileStartCopyResponse = FileStartCopyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileStartCopyHeaders;
    };
};

/**
 * Contains response data for the abortCopy operation.
 */
export type FileAbortCopyResponse = FileAbortCopyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileAbortCopyHeaders;
    };
};
