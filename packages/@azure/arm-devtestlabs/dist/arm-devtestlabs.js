/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDevtestlabs = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for EnableStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EnableStatus =
     * <EnableStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EnableStatus;
    (function (EnableStatus) {
        EnableStatus["Enabled"] = "Enabled";
        EnableStatus["Disabled"] = "Disabled";
    })(EnableStatus || (EnableStatus = {}));
    /**
     * Defines values for NotificationStatus.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NotificationStatus =
     * <NotificationStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NotificationStatus;
    (function (NotificationStatus) {
        NotificationStatus["Disabled"] = "Disabled";
        NotificationStatus["Enabled"] = "Enabled";
    })(NotificationStatus || (NotificationStatus = {}));
    /**
     * Defines values for SourceControlType.
     * Possible values include: 'VsoGit', 'GitHub'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SourceControlType =
     * <SourceControlType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SourceControlType;
    (function (SourceControlType) {
        SourceControlType["VsoGit"] = "VsoGit";
        SourceControlType["GitHub"] = "GitHub";
    })(SourceControlType || (SourceControlType = {}));
    /**
     * Defines values for StorageType.
     * Possible values include: 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StorageType =
     * <StorageType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StorageType;
    (function (StorageType) {
        StorageType["Standard"] = "Standard";
        StorageType["Premium"] = "Premium";
    })(StorageType || (StorageType = {}));
    /**
     * Defines values for CostThresholdStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CostThresholdStatus =
     * <CostThresholdStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CostThresholdStatus;
    (function (CostThresholdStatus) {
        CostThresholdStatus["Enabled"] = "Enabled";
        CostThresholdStatus["Disabled"] = "Disabled";
    })(CostThresholdStatus || (CostThresholdStatus = {}));
    /**
     * Defines values for WindowsOsState.
     * Possible values include: 'NonSysprepped', 'SysprepRequested',
     * 'SysprepApplied'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WindowsOsState =
     * <WindowsOsState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WindowsOsState;
    (function (WindowsOsState) {
        WindowsOsState["NonSysprepped"] = "NonSysprepped";
        WindowsOsState["SysprepRequested"] = "SysprepRequested";
        WindowsOsState["SysprepApplied"] = "SysprepApplied";
    })(WindowsOsState || (WindowsOsState = {}));
    /**
     * Defines values for LinuxOsState.
     * Possible values include: 'NonDeprovisioned', 'DeprovisionRequested',
     * 'DeprovisionApplied'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LinuxOsState =
     * <LinuxOsState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LinuxOsState;
    (function (LinuxOsState) {
        LinuxOsState["NonDeprovisioned"] = "NonDeprovisioned";
        LinuxOsState["DeprovisionRequested"] = "DeprovisionRequested";
        LinuxOsState["DeprovisionApplied"] = "DeprovisionApplied";
    })(LinuxOsState || (LinuxOsState = {}));
    /**
     * Defines values for CustomImageOsType.
     * Possible values include: 'Windows', 'Linux', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CustomImageOsType =
     * <CustomImageOsType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CustomImageOsType;
    (function (CustomImageOsType) {
        CustomImageOsType["Windows"] = "Windows";
        CustomImageOsType["Linux"] = "Linux";
        CustomImageOsType["None"] = "None";
    })(CustomImageOsType || (CustomImageOsType = {}));
    /**
     * Defines values for HostCachingOptions.
     * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HostCachingOptions =
     * <HostCachingOptions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HostCachingOptions;
    (function (HostCachingOptions) {
        HostCachingOptions["None"] = "None";
        HostCachingOptions["ReadOnly"] = "ReadOnly";
        HostCachingOptions["ReadWrite"] = "ReadWrite";
    })(HostCachingOptions || (HostCachingOptions = {}));
    /**
     * Defines values for NotificationChannelEventType.
     * Possible values include: 'AutoShutdown', 'Cost'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NotificationChannelEventType =
     * <NotificationChannelEventType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NotificationChannelEventType;
    (function (NotificationChannelEventType) {
        NotificationChannelEventType["AutoShutdown"] = "AutoShutdown";
        NotificationChannelEventType["Cost"] = "Cost";
    })(NotificationChannelEventType || (NotificationChannelEventType = {}));
    /**
     * Defines values for TransportProtocol.
     * Possible values include: 'Tcp', 'Udp'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TransportProtocol =
     * <TransportProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TransportProtocol;
    (function (TransportProtocol) {
        TransportProtocol["Tcp"] = "Tcp";
        TransportProtocol["Udp"] = "Udp";
    })(TransportProtocol || (TransportProtocol = {}));
    /**
     * Defines values for VirtualMachineCreationSource.
     * Possible values include: 'FromCustomImage', 'FromGalleryImage'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualMachineCreationSource =
     * <VirtualMachineCreationSource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualMachineCreationSource;
    (function (VirtualMachineCreationSource) {
        VirtualMachineCreationSource["FromCustomImage"] = "FromCustomImage";
        VirtualMachineCreationSource["FromGalleryImage"] = "FromGalleryImage";
    })(VirtualMachineCreationSource || (VirtualMachineCreationSource = {}));
    /**
     * Defines values for FileUploadOptions.
     * Possible values include: 'UploadFilesAndGenerateSasTokens', 'None'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FileUploadOptions =
     * <FileUploadOptions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FileUploadOptions;
    (function (FileUploadOptions) {
        FileUploadOptions["UploadFilesAndGenerateSasTokens"] = "UploadFilesAndGenerateSasTokens";
        FileUploadOptions["None"] = "None";
    })(FileUploadOptions || (FileUploadOptions = {}));
    /**
     * Defines values for PremiumDataDisk.
     * Possible values include: 'Disabled', 'Enabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PremiumDataDisk =
     * <PremiumDataDisk>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PremiumDataDisk;
    (function (PremiumDataDisk) {
        PremiumDataDisk["Disabled"] = "Disabled";
        PremiumDataDisk["Enabled"] = "Enabled";
    })(PremiumDataDisk || (PremiumDataDisk = {}));
    /**
     * Defines values for TargetCostStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TargetCostStatus =
     * <TargetCostStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TargetCostStatus;
    (function (TargetCostStatus) {
        TargetCostStatus["Enabled"] = "Enabled";
        TargetCostStatus["Disabled"] = "Disabled";
    })(TargetCostStatus || (TargetCostStatus = {}));
    /**
     * Defines values for ReportingCycleType.
     * Possible values include: 'CalendarMonth', 'Custom'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReportingCycleType =
     * <ReportingCycleType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReportingCycleType;
    (function (ReportingCycleType) {
        ReportingCycleType["CalendarMonth"] = "CalendarMonth";
        ReportingCycleType["Custom"] = "Custom";
    })(ReportingCycleType || (ReportingCycleType = {}));
    /**
     * Defines values for CostType.
     * Possible values include: 'Unavailable', 'Reported', 'Projected'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CostType = <CostType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CostType;
    (function (CostType) {
        CostType["Unavailable"] = "Unavailable";
        CostType["Reported"] = "Reported";
        CostType["Projected"] = "Projected";
    })(CostType || (CostType = {}));
    /**
     * Defines values for HttpStatusCode.
     * Possible values include: 'Continue', 'SwitchingProtocols', 'OK', 'Created',
     * 'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent',
     * 'PartialContent', 'MultipleChoices', 'MovedPermanently', 'Redirect',
     * 'SeeOther', 'NotModified', 'UseProxy', 'Unused', 'TemporaryRedirect',
     * 'BadRequest', 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound',
     * 'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired',
     * 'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired',
     * 'PreconditionFailed', 'RequestEntityTooLarge', 'RequestUriTooLong',
     * 'UnsupportedMediaType', 'RequestedRangeNotSatisfiable', 'ExpectationFailed',
     * 'UpgradeRequired', 'InternalServerError', 'NotImplemented', 'BadGateway',
     * 'ServiceUnavailable', 'GatewayTimeout', 'HttpVersionNotSupported'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HttpStatusCode =
     * <HttpStatusCode>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HttpStatusCode;
    (function (HttpStatusCode) {
        HttpStatusCode["Continue"] = "Continue";
        HttpStatusCode["SwitchingProtocols"] = "SwitchingProtocols";
        HttpStatusCode["OK"] = "OK";
        HttpStatusCode["Created"] = "Created";
        HttpStatusCode["Accepted"] = "Accepted";
        HttpStatusCode["NonAuthoritativeInformation"] = "NonAuthoritativeInformation";
        HttpStatusCode["NoContent"] = "NoContent";
        HttpStatusCode["ResetContent"] = "ResetContent";
        HttpStatusCode["PartialContent"] = "PartialContent";
        HttpStatusCode["MultipleChoices"] = "MultipleChoices";
        HttpStatusCode["MovedPermanently"] = "MovedPermanently";
        HttpStatusCode["Redirect"] = "Redirect";
        HttpStatusCode["SeeOther"] = "SeeOther";
        HttpStatusCode["NotModified"] = "NotModified";
        HttpStatusCode["UseProxy"] = "UseProxy";
        HttpStatusCode["Unused"] = "Unused";
        HttpStatusCode["TemporaryRedirect"] = "TemporaryRedirect";
        HttpStatusCode["BadRequest"] = "BadRequest";
        HttpStatusCode["Unauthorized"] = "Unauthorized";
        HttpStatusCode["PaymentRequired"] = "PaymentRequired";
        HttpStatusCode["Forbidden"] = "Forbidden";
        HttpStatusCode["NotFound"] = "NotFound";
        HttpStatusCode["MethodNotAllowed"] = "MethodNotAllowed";
        HttpStatusCode["NotAcceptable"] = "NotAcceptable";
        HttpStatusCode["ProxyAuthenticationRequired"] = "ProxyAuthenticationRequired";
        HttpStatusCode["RequestTimeout"] = "RequestTimeout";
        HttpStatusCode["Conflict"] = "Conflict";
        HttpStatusCode["Gone"] = "Gone";
        HttpStatusCode["LengthRequired"] = "LengthRequired";
        HttpStatusCode["PreconditionFailed"] = "PreconditionFailed";
        HttpStatusCode["RequestEntityTooLarge"] = "RequestEntityTooLarge";
        HttpStatusCode["RequestUriTooLong"] = "RequestUriTooLong";
        HttpStatusCode["UnsupportedMediaType"] = "UnsupportedMediaType";
        HttpStatusCode["RequestedRangeNotSatisfiable"] = "RequestedRangeNotSatisfiable";
        HttpStatusCode["ExpectationFailed"] = "ExpectationFailed";
        HttpStatusCode["UpgradeRequired"] = "UpgradeRequired";
        HttpStatusCode["InternalServerError"] = "InternalServerError";
        HttpStatusCode["NotImplemented"] = "NotImplemented";
        HttpStatusCode["BadGateway"] = "BadGateway";
        HttpStatusCode["ServiceUnavailable"] = "ServiceUnavailable";
        HttpStatusCode["GatewayTimeout"] = "GatewayTimeout";
        HttpStatusCode["HttpVersionNotSupported"] = "HttpVersionNotSupported";
    })(HttpStatusCode || (HttpStatusCode = {}));
    /**
     * Defines values for PolicyStatus.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PolicyStatus =
     * <PolicyStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PolicyStatus;
    (function (PolicyStatus) {
        PolicyStatus["Enabled"] = "Enabled";
        PolicyStatus["Disabled"] = "Disabled";
    })(PolicyStatus || (PolicyStatus = {}));
    /**
     * Defines values for PolicyFactName.
     * Possible values include: 'UserOwnedLabVmCount',
     * 'UserOwnedLabPremiumVmCount', 'LabVmCount', 'LabPremiumVmCount',
     * 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet', 'LabTargetCost'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PolicyFactName =
     * <PolicyFactName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PolicyFactName;
    (function (PolicyFactName) {
        PolicyFactName["UserOwnedLabVmCount"] = "UserOwnedLabVmCount";
        PolicyFactName["UserOwnedLabPremiumVmCount"] = "UserOwnedLabPremiumVmCount";
        PolicyFactName["LabVmCount"] = "LabVmCount";
        PolicyFactName["LabPremiumVmCount"] = "LabPremiumVmCount";
        PolicyFactName["LabVmSize"] = "LabVmSize";
        PolicyFactName["GalleryImage"] = "GalleryImage";
        PolicyFactName["UserOwnedLabVmCountInSubnet"] = "UserOwnedLabVmCountInSubnet";
        PolicyFactName["LabTargetCost"] = "LabTargetCost";
    })(PolicyFactName || (PolicyFactName = {}));
    /**
     * Defines values for PolicyEvaluatorType.
     * Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PolicyEvaluatorType =
     * <PolicyEvaluatorType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PolicyEvaluatorType;
    (function (PolicyEvaluatorType) {
        PolicyEvaluatorType["AllowedValuesPolicy"] = "AllowedValuesPolicy";
        PolicyEvaluatorType["MaxValuePolicy"] = "MaxValuePolicy";
    })(PolicyEvaluatorType || (PolicyEvaluatorType = {}));
    /**
     * Defines values for UsagePermissionType.
     * Possible values include: 'Default', 'Deny', 'Allow'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UsagePermissionType =
     * <UsagePermissionType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UsagePermissionType;
    (function (UsagePermissionType) {
        UsagePermissionType["Default"] = "Default";
        UsagePermissionType["Deny"] = "Deny";
        UsagePermissionType["Allow"] = "Allow";
    })(UsagePermissionType || (UsagePermissionType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get EnableStatus () { return EnableStatus; },
        get NotificationStatus () { return NotificationStatus; },
        get SourceControlType () { return SourceControlType; },
        get StorageType () { return StorageType; },
        get CostThresholdStatus () { return CostThresholdStatus; },
        get WindowsOsState () { return WindowsOsState; },
        get LinuxOsState () { return LinuxOsState; },
        get CustomImageOsType () { return CustomImageOsType; },
        get HostCachingOptions () { return HostCachingOptions; },
        get NotificationChannelEventType () { return NotificationChannelEventType; },
        get TransportProtocol () { return TransportProtocol; },
        get VirtualMachineCreationSource () { return VirtualMachineCreationSource; },
        get FileUploadOptions () { return FileUploadOptions; },
        get PremiumDataDisk () { return PremiumDataDisk; },
        get TargetCostStatus () { return TargetCostStatus; },
        get ReportingCycleType () { return ReportingCycleType; },
        get CostType () { return CostType; },
        get HttpStatusCode () { return HttpStatusCode; },
        get PolicyStatus () { return PolicyStatus; },
        get PolicyFactName () { return PolicyFactName; },
        get PolicyEvaluatorType () { return PolicyEvaluatorType; },
        get UsagePermissionType () { return UsagePermissionType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var WeekDetails = {
        serializedName: "WeekDetails",
        type: {
            name: "Composite",
            className: "WeekDetails",
            modelProperties: {
                weekdays: {
                    serializedName: "weekdays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                time: {
                    serializedName: "time",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DayDetails = {
        serializedName: "DayDetails",
        type: {
            name: "Composite",
            className: "DayDetails",
            modelProperties: {
                time: {
                    serializedName: "time",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HourDetails = {
        serializedName: "HourDetails",
        type: {
            name: "Composite",
            className: "HourDetails",
            modelProperties: {
                minute: {
                    serializedName: "minute",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var NotificationSettings = {
        serializedName: "NotificationSettings",
        type: {
            name: "Composite",
            className: "NotificationSettings",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                timeInMinutes: {
                    serializedName: "timeInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                webhookUrl: {
                    serializedName: "webhookUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Schedule = {
        serializedName: "Schedule",
        type: {
            name: "Composite",
            className: "Schedule",
            modelProperties: __assign({}, Resource.type.modelProperties, { status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, taskType: {
                    serializedName: "properties.taskType",
                    type: {
                        name: "String"
                    }
                }, weeklyRecurrence: {
                    serializedName: "properties.weeklyRecurrence",
                    type: {
                        name: "Composite",
                        className: "WeekDetails"
                    }
                }, dailyRecurrence: {
                    serializedName: "properties.dailyRecurrence",
                    type: {
                        name: "Composite",
                        className: "DayDetails"
                    }
                }, hourlyRecurrence: {
                    serializedName: "properties.hourlyRecurrence",
                    type: {
                        name: "Composite",
                        className: "HourDetails"
                    }
                }, timeZoneId: {
                    serializedName: "properties.timeZoneId",
                    type: {
                        name: "String"
                    }
                }, notificationSettings: {
                    serializedName: "properties.notificationSettings",
                    type: {
                        name: "Composite",
                        className: "NotificationSettings"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, targetResourceId: {
                    serializedName: "properties.targetResourceId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicableSchedule = {
        serializedName: "ApplicableSchedule",
        type: {
            name: "Composite",
            className: "ApplicableSchedule",
            modelProperties: __assign({}, Resource.type.modelProperties, { labVmsShutdown: {
                    serializedName: "properties.labVmsShutdown",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                }, labVmsStartup: {
                    serializedName: "properties.labVmsStartup",
                    type: {
                        name: "Composite",
                        className: "Schedule"
                    }
                } })
        }
    };
    var WeekDetailsFragment = {
        serializedName: "WeekDetailsFragment",
        type: {
            name: "Composite",
            className: "WeekDetailsFragment",
            modelProperties: {
                weekdays: {
                    serializedName: "weekdays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                time: {
                    serializedName: "time",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DayDetailsFragment = {
        serializedName: "DayDetailsFragment",
        type: {
            name: "Composite",
            className: "DayDetailsFragment",
            modelProperties: {
                time: {
                    serializedName: "time",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HourDetailsFragment = {
        serializedName: "HourDetailsFragment",
        type: {
            name: "Composite",
            className: "HourDetailsFragment",
            modelProperties: {
                minute: {
                    serializedName: "minute",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var NotificationSettingsFragment = {
        serializedName: "NotificationSettingsFragment",
        type: {
            name: "Composite",
            className: "NotificationSettingsFragment",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                timeInMinutes: {
                    serializedName: "timeInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                webhookUrl: {
                    serializedName: "webhookUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ScheduleFragment = {
        serializedName: "ScheduleFragment",
        type: {
            name: "Composite",
            className: "ScheduleFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, taskType: {
                    serializedName: "properties.taskType",
                    type: {
                        name: "String"
                    }
                }, weeklyRecurrence: {
                    serializedName: "properties.weeklyRecurrence",
                    type: {
                        name: "Composite",
                        className: "WeekDetailsFragment"
                    }
                }, dailyRecurrence: {
                    serializedName: "properties.dailyRecurrence",
                    type: {
                        name: "Composite",
                        className: "DayDetailsFragment"
                    }
                }, hourlyRecurrence: {
                    serializedName: "properties.hourlyRecurrence",
                    type: {
                        name: "Composite",
                        className: "HourDetailsFragment"
                    }
                }, timeZoneId: {
                    serializedName: "properties.timeZoneId",
                    type: {
                        name: "String"
                    }
                }, notificationSettings: {
                    serializedName: "properties.notificationSettings",
                    type: {
                        name: "Composite",
                        className: "NotificationSettingsFragment"
                    }
                }, targetResourceId: {
                    serializedName: "properties.targetResourceId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicableScheduleFragment = {
        serializedName: "ApplicableScheduleFragment",
        type: {
            name: "Composite",
            className: "ApplicableScheduleFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { labVmsShutdown: {
                    serializedName: "properties.labVmsShutdown",
                    type: {
                        name: "Composite",
                        className: "ScheduleFragment"
                    }
                }, labVmsStartup: {
                    serializedName: "properties.labVmsStartup",
                    type: {
                        name: "Composite",
                        className: "ScheduleFragment"
                    }
                } })
        }
    };
    var ArtifactParameterProperties = {
        serializedName: "ArtifactParameterProperties",
        type: {
            name: "Composite",
            className: "ArtifactParameterProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArtifactInstallProperties = {
        serializedName: "ArtifactInstallProperties",
        type: {
            name: "Composite",
            className: "ArtifactInstallProperties",
            modelProperties: {
                artifactId: {
                    serializedName: "artifactId",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactParameterProperties"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                deploymentStatusMessage: {
                    serializedName: "deploymentStatusMessage",
                    type: {
                        name: "String"
                    }
                },
                vmExtensionStatusMessage: {
                    serializedName: "vmExtensionStatusMessage",
                    type: {
                        name: "String"
                    }
                },
                installTime: {
                    serializedName: "installTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ApplyArtifactsRequest = {
        serializedName: "ApplyArtifactsRequest",
        type: {
            name: "Composite",
            className: "ApplyArtifactsRequest",
            modelProperties: {
                artifacts: {
                    serializedName: "artifacts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactInstallProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var ParametersValueFileInfo = {
        serializedName: "ParametersValueFileInfo",
        type: {
            name: "Composite",
            className: "ParametersValueFileInfo",
            modelProperties: {
                fileName: {
                    serializedName: "fileName",
                    type: {
                        name: "String"
                    }
                },
                parametersValueInfo: {
                    serializedName: "parametersValueInfo",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ArmTemplate = {
        serializedName: "ArmTemplate",
        type: {
            name: "Composite",
            className: "ArmTemplate",
            modelProperties: __assign({}, Resource.type.modelProperties, { displayName: {
                    readOnly: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    readOnly: true,
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, icon: {
                    readOnly: true,
                    serializedName: "properties.icon",
                    type: {
                        name: "String"
                    }
                }, contents: {
                    readOnly: true,
                    serializedName: "properties.contents",
                    type: {
                        name: "Object"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, parametersValueFilesInfo: {
                    readOnly: true,
                    serializedName: "properties.parametersValueFilesInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParametersValueFileInfo"
                            }
                        }
                    }
                } })
        }
    };
    var ArmTemplateInfo = {
        serializedName: "ArmTemplateInfo",
        type: {
            name: "Composite",
            className: "ArmTemplateInfo",
            modelProperties: {
                template: {
                    serializedName: "template",
                    type: {
                        name: "Object"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ArmTemplateParameterProperties = {
        serializedName: "ArmTemplateParameterProperties",
        type: {
            name: "Composite",
            className: "ArmTemplateParameterProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Artifact = {
        serializedName: "Artifact",
        type: {
            name: "Composite",
            className: "Artifact",
            modelProperties: __assign({}, Resource.type.modelProperties, { title: {
                    readOnly: true,
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, description: {
                    readOnly: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    readOnly: true,
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, filePath: {
                    readOnly: true,
                    serializedName: "properties.filePath",
                    type: {
                        name: "String"
                    }
                }, icon: {
                    readOnly: true,
                    serializedName: "properties.icon",
                    type: {
                        name: "String"
                    }
                }, targetOsType: {
                    readOnly: true,
                    serializedName: "properties.targetOsType",
                    type: {
                        name: "String"
                    }
                }, parameters: {
                    readOnly: true,
                    serializedName: "properties.parameters",
                    type: {
                        name: "Object"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var ArtifactDeploymentStatusProperties = {
        serializedName: "ArtifactDeploymentStatusProperties",
        type: {
            name: "Composite",
            className: "ArtifactDeploymentStatusProperties",
            modelProperties: {
                deploymentStatus: {
                    serializedName: "deploymentStatus",
                    type: {
                        name: "String"
                    }
                },
                artifactsApplied: {
                    serializedName: "artifactsApplied",
                    type: {
                        name: "Number"
                    }
                },
                totalArtifacts: {
                    serializedName: "totalArtifacts",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ArtifactDeploymentStatusPropertiesFragment = {
        serializedName: "ArtifactDeploymentStatusPropertiesFragment",
        type: {
            name: "Composite",
            className: "ArtifactDeploymentStatusPropertiesFragment",
            modelProperties: {
                deploymentStatus: {
                    serializedName: "deploymentStatus",
                    type: {
                        name: "String"
                    }
                },
                artifactsApplied: {
                    serializedName: "artifactsApplied",
                    type: {
                        name: "Number"
                    }
                },
                totalArtifacts: {
                    serializedName: "totalArtifacts",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ArtifactParameterPropertiesFragment = {
        serializedName: "ArtifactParameterPropertiesFragment",
        type: {
            name: "Composite",
            className: "ArtifactParameterPropertiesFragment",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArtifactInstallPropertiesFragment = {
        serializedName: "ArtifactInstallPropertiesFragment",
        type: {
            name: "Composite",
            className: "ArtifactInstallPropertiesFragment",
            modelProperties: {
                artifactId: {
                    serializedName: "artifactId",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactParameterPropertiesFragment"
                            }
                        }
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                deploymentStatusMessage: {
                    serializedName: "deploymentStatusMessage",
                    type: {
                        name: "String"
                    }
                },
                vmExtensionStatusMessage: {
                    serializedName: "vmExtensionStatusMessage",
                    type: {
                        name: "String"
                    }
                },
                installTime: {
                    serializedName: "installTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ArtifactSource = {
        serializedName: "ArtifactSource",
        type: {
            name: "Composite",
            className: "ArtifactSource",
            modelProperties: __assign({}, Resource.type.modelProperties, { displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, sourceType: {
                    serializedName: "properties.sourceType",
                    type: {
                        name: "String"
                    }
                }, folderPath: {
                    serializedName: "properties.folderPath",
                    type: {
                        name: "String"
                    }
                }, armTemplateFolderPath: {
                    serializedName: "properties.armTemplateFolderPath",
                    type: {
                        name: "String"
                    }
                }, branchRef: {
                    serializedName: "properties.branchRef",
                    type: {
                        name: "String"
                    }
                }, securityToken: {
                    serializedName: "properties.securityToken",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ArtifactSourceFragment = {
        serializedName: "ArtifactSourceFragment",
        type: {
            name: "Composite",
            className: "ArtifactSourceFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, uri: {
                    serializedName: "properties.uri",
                    type: {
                        name: "String"
                    }
                }, sourceType: {
                    serializedName: "properties.sourceType",
                    type: {
                        name: "String"
                    }
                }, folderPath: {
                    serializedName: "properties.folderPath",
                    type: {
                        name: "String"
                    }
                }, armTemplateFolderPath: {
                    serializedName: "properties.armTemplateFolderPath",
                    type: {
                        name: "String"
                    }
                }, branchRef: {
                    serializedName: "properties.branchRef",
                    type: {
                        name: "String"
                    }
                }, securityToken: {
                    serializedName: "properties.securityToken",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AttachDiskProperties = {
        serializedName: "AttachDiskProperties",
        type: {
            name: "Composite",
            className: "AttachDiskProperties",
            modelProperties: {
                leasedByLabVmId: {
                    serializedName: "leasedByLabVmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AttachNewDataDiskOptions = {
        serializedName: "AttachNewDataDiskOptions",
        type: {
            name: "Composite",
            className: "AttachNewDataDiskOptions",
            modelProperties: {
                diskSizeGiB: {
                    serializedName: "diskSizeGiB",
                    type: {
                        name: "Number"
                    }
                },
                diskName: {
                    serializedName: "diskName",
                    type: {
                        name: "String"
                    }
                },
                diskType: {
                    serializedName: "diskType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BulkCreationParameters = {
        serializedName: "BulkCreationParameters",
        type: {
            name: "Composite",
            className: "BulkCreationParameters",
            modelProperties: {
                instanceCount: {
                    serializedName: "instanceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ComputeDataDisk = {
        serializedName: "ComputeDataDisk",
        type: {
            name: "Composite",
            className: "ComputeDataDisk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                diskUri: {
                    serializedName: "diskUri",
                    type: {
                        name: "String"
                    }
                },
                managedDiskId: {
                    serializedName: "managedDiskId",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGiB: {
                    serializedName: "diskSizeGiB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ComputeDataDiskFragment = {
        serializedName: "ComputeDataDiskFragment",
        type: {
            name: "Composite",
            className: "ComputeDataDiskFragment",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                diskUri: {
                    serializedName: "diskUri",
                    type: {
                        name: "String"
                    }
                },
                managedDiskId: {
                    serializedName: "managedDiskId",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGiB: {
                    serializedName: "diskSizeGiB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ComputeVmInstanceViewStatus = {
        serializedName: "ComputeVmInstanceViewStatus",
        type: {
            name: "Composite",
            className: "ComputeVmInstanceViewStatus",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                displayStatus: {
                    serializedName: "displayStatus",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeVmInstanceViewStatusFragment = {
        serializedName: "ComputeVmInstanceViewStatusFragment",
        type: {
            name: "Composite",
            className: "ComputeVmInstanceViewStatusFragment",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                displayStatus: {
                    serializedName: "displayStatus",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputeVmProperties = {
        serializedName: "ComputeVmProperties",
        type: {
            name: "Composite",
            className: "ComputeVmProperties",
            modelProperties: {
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeVmInstanceViewStatus"
                            }
                        }
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                networkInterfaceId: {
                    serializedName: "networkInterfaceId",
                    type: {
                        name: "String"
                    }
                },
                osDiskId: {
                    serializedName: "osDiskId",
                    type: {
                        name: "String"
                    }
                },
                dataDiskIds: {
                    serializedName: "dataDiskIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeDataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var ComputeVmPropertiesFragment = {
        serializedName: "ComputeVmPropertiesFragment",
        type: {
            name: "Composite",
            className: "ComputeVmPropertiesFragment",
            modelProperties: {
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeVmInstanceViewStatusFragment"
                            }
                        }
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                networkInterfaceId: {
                    serializedName: "networkInterfaceId",
                    type: {
                        name: "String"
                    }
                },
                osDiskId: {
                    serializedName: "osDiskId",
                    type: {
                        name: "String"
                    }
                },
                dataDiskIds: {
                    serializedName: "dataDiskIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeDataDiskFragment"
                            }
                        }
                    }
                }
            }
        }
    };
    var PercentageCostThresholdProperties = {
        serializedName: "PercentageCostThresholdProperties",
        type: {
            name: "Composite",
            className: "PercentageCostThresholdProperties",
            modelProperties: {
                thresholdValue: {
                    serializedName: "thresholdValue",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CostThresholdProperties = {
        serializedName: "CostThresholdProperties",
        type: {
            name: "Composite",
            className: "CostThresholdProperties",
            modelProperties: {
                thresholdId: {
                    serializedName: "thresholdId",
                    type: {
                        name: "String"
                    }
                },
                percentageThreshold: {
                    serializedName: "percentageThreshold",
                    type: {
                        name: "Composite",
                        className: "PercentageCostThresholdProperties"
                    }
                },
                displayOnChart: {
                    serializedName: "displayOnChart",
                    type: {
                        name: "String"
                    }
                },
                sendNotificationWhenExceeded: {
                    serializedName: "sendNotificationWhenExceeded",
                    type: {
                        name: "String"
                    }
                },
                notificationSent: {
                    serializedName: "notificationSent",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WindowsOsInfo = {
        serializedName: "WindowsOsInfo",
        type: {
            name: "Composite",
            className: "WindowsOsInfo",
            modelProperties: {
                windowsOsState: {
                    serializedName: "windowsOsState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LinuxOsInfo = {
        serializedName: "LinuxOsInfo",
        type: {
            name: "Composite",
            className: "LinuxOsInfo",
            modelProperties: {
                linuxOsState: {
                    serializedName: "linuxOsState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomImagePropertiesFromVm = {
        serializedName: "CustomImagePropertiesFromVm",
        type: {
            name: "Composite",
            className: "CustomImagePropertiesFromVm",
            modelProperties: {
                sourceVmId: {
                    serializedName: "sourceVmId",
                    type: {
                        name: "String"
                    }
                },
                windowsOsInfo: {
                    serializedName: "windowsOsInfo",
                    type: {
                        name: "Composite",
                        className: "WindowsOsInfo"
                    }
                },
                linuxOsInfo: {
                    serializedName: "linuxOsInfo",
                    type: {
                        name: "Composite",
                        className: "LinuxOsInfo"
                    }
                }
            }
        }
    };
    var CustomImagePropertiesCustom = {
        serializedName: "CustomImagePropertiesCustom",
        type: {
            name: "Composite",
            className: "CustomImagePropertiesCustom",
            modelProperties: {
                imageName: {
                    serializedName: "imageName",
                    type: {
                        name: "String"
                    }
                },
                sysPrep: {
                    serializedName: "sysPrep",
                    type: {
                        name: "Boolean"
                    }
                },
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomImage = {
        serializedName: "CustomImage",
        type: {
            name: "Composite",
            className: "CustomImage",
            modelProperties: __assign({}, Resource.type.modelProperties, { vm: {
                    serializedName: "properties.vm",
                    type: {
                        name: "Composite",
                        className: "CustomImagePropertiesFromVm"
                    }
                }, vhd: {
                    serializedName: "properties.vhd",
                    type: {
                        name: "Composite",
                        className: "CustomImagePropertiesCustom"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, author: {
                    serializedName: "properties.author",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, managedImageId: {
                    serializedName: "properties.managedImageId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataDiskProperties = {
        serializedName: "DataDiskProperties",
        type: {
            name: "Composite",
            className: "DataDiskProperties",
            modelProperties: {
                attachNewDataDiskOptions: {
                    serializedName: "attachNewDataDiskOptions",
                    type: {
                        name: "Composite",
                        className: "AttachNewDataDiskOptions"
                    }
                },
                existingLabDiskId: {
                    serializedName: "existingLabDiskId",
                    type: {
                        name: "String"
                    }
                },
                hostCaching: {
                    serializedName: "hostCaching",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DetachDataDiskProperties = {
        serializedName: "DetachDataDiskProperties",
        type: {
            name: "Composite",
            className: "DetachDataDiskProperties",
            modelProperties: {
                existingLabDiskId: {
                    serializedName: "existingLabDiskId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DetachDiskProperties = {
        serializedName: "DetachDiskProperties",
        type: {
            name: "Composite",
            className: "DetachDiskProperties",
            modelProperties: {
                leasedByLabVmId: {
                    serializedName: "leasedByLabVmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Disk = {
        serializedName: "Disk",
        type: {
            name: "Composite",
            className: "Disk",
            modelProperties: __assign({}, Resource.type.modelProperties, { diskType: {
                    serializedName: "properties.diskType",
                    type: {
                        name: "String"
                    }
                }, diskSizeGiB: {
                    serializedName: "properties.diskSizeGiB",
                    type: {
                        name: "Number"
                    }
                }, leasedByLabVmId: {
                    serializedName: "properties.leasedByLabVmId",
                    type: {
                        name: "String"
                    }
                }, diskBlobName: {
                    serializedName: "properties.diskBlobName",
                    type: {
                        name: "String"
                    }
                }, diskUri: {
                    serializedName: "properties.diskUri",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, hostCaching: {
                    serializedName: "properties.hostCaching",
                    type: {
                        name: "String"
                    }
                }, managedDiskId: {
                    serializedName: "properties.managedDiskId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EnvironmentDeploymentProperties = {
        serializedName: "EnvironmentDeploymentProperties",
        type: {
            name: "Composite",
            className: "EnvironmentDeploymentProperties",
            modelProperties: {
                armTemplateId: {
                    serializedName: "armTemplateId",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArmTemplateParameterProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var DtlEnvironment = {
        serializedName: "DtlEnvironment",
        type: {
            name: "Composite",
            className: "DtlEnvironment",
            modelProperties: __assign({}, Resource.type.modelProperties, { deploymentProperties: {
                    serializedName: "properties.deploymentProperties",
                    type: {
                        name: "Composite",
                        className: "EnvironmentDeploymentProperties"
                    }
                }, armTemplateDisplayName: {
                    serializedName: "properties.armTemplateDisplayName",
                    type: {
                        name: "String"
                    }
                }, resourceGroupId: {
                    readOnly: true,
                    serializedName: "properties.resourceGroupId",
                    type: {
                        name: "String"
                    }
                }, createdByUser: {
                    readOnly: true,
                    serializedName: "properties.createdByUser",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EvaluatePoliciesProperties = {
        serializedName: "EvaluatePoliciesProperties",
        type: {
            name: "Composite",
            className: "EvaluatePoliciesProperties",
            modelProperties: {
                factName: {
                    serializedName: "factName",
                    type: {
                        name: "String"
                    }
                },
                factData: {
                    serializedName: "factData",
                    type: {
                        name: "String"
                    }
                },
                valueOffset: {
                    serializedName: "valueOffset",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EvaluatePoliciesRequest = {
        serializedName: "EvaluatePoliciesRequest",
        type: {
            name: "Composite",
            className: "EvaluatePoliciesRequest",
            modelProperties: {
                policies: {
                    serializedName: "policies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EvaluatePoliciesProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var PolicyViolation = {
        serializedName: "PolicyViolation",
        type: {
            name: "Composite",
            className: "PolicyViolation",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicySetResult = {
        serializedName: "PolicySetResult",
        type: {
            name: "Composite",
            className: "PolicySetResult",
            modelProperties: {
                hasError: {
                    serializedName: "hasError",
                    type: {
                        name: "Boolean"
                    }
                },
                policyViolations: {
                    serializedName: "policyViolations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyViolation"
                            }
                        }
                    }
                }
            }
        }
    };
    var EvaluatePoliciesResponse = {
        serializedName: "EvaluatePoliciesResponse",
        type: {
            name: "Composite",
            className: "EvaluatePoliciesResponse",
            modelProperties: {
                results: {
                    serializedName: "results",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicySetResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var Event = {
        serializedName: "Event",
        type: {
            name: "Composite",
            className: "Event",
            modelProperties: {
                eventName: {
                    serializedName: "eventName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventFragment = {
        serializedName: "EventFragment",
        type: {
            name: "Composite",
            className: "EventFragment",
            modelProperties: {
                eventName: {
                    serializedName: "eventName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExportResourceUsageParameters = {
        serializedName: "ExportResourceUsageParameters",
        type: {
            name: "Composite",
            className: "ExportResourceUsageParameters",
            modelProperties: {
                blobStorageAbsoluteSasUri: {
                    serializedName: "blobStorageAbsoluteSasUri",
                    type: {
                        name: "String"
                    }
                },
                usageStartDate: {
                    serializedName: "usageStartDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ExternalSubnet = {
        serializedName: "ExternalSubnet",
        type: {
            name: "Composite",
            className: "ExternalSubnet",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExternalSubnetFragment = {
        serializedName: "ExternalSubnetFragment",
        type: {
            name: "Composite",
            className: "ExternalSubnetFragment",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImageReference = {
        serializedName: "GalleryImageReference",
        type: {
            name: "Composite",
            className: "GalleryImageReference",
            modelProperties: {
                offer: {
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundNatRule = {
        serializedName: "InboundNatRule",
        type: {
            name: "Composite",
            className: "InboundNatRule",
            modelProperties: {
                transportProtocol: {
                    serializedName: "transportProtocol",
                    type: {
                        name: "String"
                    }
                },
                frontendPort: {
                    serializedName: "frontendPort",
                    type: {
                        name: "Number"
                    }
                },
                backendPort: {
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SharedPublicIpAddressConfiguration = {
        serializedName: "SharedPublicIpAddressConfiguration",
        type: {
            name: "Composite",
            className: "SharedPublicIpAddressConfiguration",
            modelProperties: {
                inboundNatRules: {
                    serializedName: "inboundNatRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkInterfaceProperties = {
        serializedName: "NetworkInterfaceProperties",
        type: {
            name: "Composite",
            className: "NetworkInterfaceProperties",
            modelProperties: {
                virtualNetworkId: {
                    serializedName: "virtualNetworkId",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddressId: {
                    serializedName: "publicIpAddressId",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddress: {
                    serializedName: "publicIpAddress",
                    type: {
                        name: "String"
                    }
                },
                privateIpAddress: {
                    serializedName: "privateIpAddress",
                    type: {
                        name: "String"
                    }
                },
                dnsName: {
                    serializedName: "dnsName",
                    type: {
                        name: "String"
                    }
                },
                rdpAuthority: {
                    serializedName: "rdpAuthority",
                    type: {
                        name: "String"
                    }
                },
                sshAuthority: {
                    serializedName: "sshAuthority",
                    type: {
                        name: "String"
                    }
                },
                sharedPublicIpAddressConfiguration: {
                    serializedName: "sharedPublicIpAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "SharedPublicIpAddressConfiguration"
                    }
                }
            }
        }
    };
    var LabVirtualMachineCreationParameter = {
        serializedName: "LabVirtualMachineCreationParameter",
        type: {
            name: "Composite",
            className: "LabVirtualMachineCreationParameter",
            modelProperties: {
                bulkCreationParameters: {
                    serializedName: "properties.bulkCreationParameters",
                    type: {
                        name: "Composite",
                        className: "BulkCreationParameters"
                    }
                },
                notes: {
                    serializedName: "properties.notes",
                    type: {
                        name: "String"
                    }
                },
                ownerObjectId: {
                    serializedName: "properties.ownerObjectId",
                    type: {
                        name: "String"
                    }
                },
                ownerUserPrincipalName: {
                    serializedName: "properties.ownerUserPrincipalName",
                    type: {
                        name: "String"
                    }
                },
                createdByUserId: {
                    serializedName: "properties.createdByUserId",
                    type: {
                        name: "String"
                    }
                },
                createdByUser: {
                    serializedName: "properties.createdByUser",
                    type: {
                        name: "String"
                    }
                },
                createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                },
                customImageId: {
                    serializedName: "properties.customImageId",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "properties.size",
                    type: {
                        name: "String"
                    }
                },
                userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                },
                sshKey: {
                    serializedName: "properties.sshKey",
                    type: {
                        name: "String"
                    }
                },
                isAuthenticationWithSshKey: {
                    serializedName: "properties.isAuthenticationWithSshKey",
                    type: {
                        name: "Boolean"
                    }
                },
                fqdn: {
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                },
                labSubnetName: {
                    serializedName: "properties.labSubnetName",
                    type: {
                        name: "String"
                    }
                },
                labVirtualNetworkId: {
                    serializedName: "properties.labVirtualNetworkId",
                    type: {
                        name: "String"
                    }
                },
                disallowPublicIpAddress: {
                    serializedName: "properties.disallowPublicIpAddress",
                    type: {
                        name: "Boolean"
                    }
                },
                artifacts: {
                    serializedName: "properties.artifacts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactInstallProperties"
                            }
                        }
                    }
                },
                artifactDeploymentStatus: {
                    serializedName: "properties.artifactDeploymentStatus",
                    type: {
                        name: "Composite",
                        className: "ArtifactDeploymentStatusProperties"
                    }
                },
                galleryImageReference: {
                    serializedName: "properties.galleryImageReference",
                    type: {
                        name: "Composite",
                        className: "GalleryImageReference"
                    }
                },
                computeVm: {
                    serializedName: "properties.computeVm",
                    type: {
                        name: "Composite",
                        className: "ComputeVmProperties"
                    }
                },
                networkInterface: {
                    serializedName: "properties.networkInterface",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceProperties"
                    }
                },
                applicableSchedule: {
                    serializedName: "properties.applicableSchedule",
                    type: {
                        name: "Composite",
                        className: "ApplicableSchedule"
                    }
                },
                expirationDate: {
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                allowClaim: {
                    serializedName: "properties.allowClaim",
                    type: {
                        name: "Boolean"
                    }
                },
                storageType: {
                    serializedName: "properties.storageType",
                    type: {
                        name: "String"
                    }
                },
                virtualMachineCreationSource: {
                    serializedName: "properties.virtualMachineCreationSource",
                    type: {
                        name: "String"
                    }
                },
                environmentId: {
                    serializedName: "properties.environmentId",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var FormulaPropertiesFromVm = {
        serializedName: "FormulaPropertiesFromVm",
        type: {
            name: "Composite",
            className: "FormulaPropertiesFromVm",
            modelProperties: {
                labVmId: {
                    serializedName: "labVmId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Formula = {
        serializedName: "Formula",
        type: {
            name: "Composite",
            className: "Formula",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, author: {
                    serializedName: "properties.author",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.creationDate",
                    type: {
                        name: "DateTime"
                    }
                }, formulaContent: {
                    serializedName: "properties.formulaContent",
                    type: {
                        name: "Composite",
                        className: "LabVirtualMachineCreationParameter"
                    }
                }, vm: {
                    serializedName: "properties.vm",
                    type: {
                        name: "Composite",
                        className: "FormulaPropertiesFromVm"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GalleryImage = {
        serializedName: "GalleryImage",
        type: {
            name: "Composite",
            className: "GalleryImage",
            modelProperties: __assign({}, Resource.type.modelProperties, { author: {
                    serializedName: "properties.author",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, imageReference: {
                    serializedName: "properties.imageReference",
                    type: {
                        name: "Composite",
                        className: "GalleryImageReference"
                    }
                }, icon: {
                    serializedName: "properties.icon",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.enabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var GalleryImageReferenceFragment = {
        serializedName: "GalleryImageReferenceFragment",
        type: {
            name: "Composite",
            className: "GalleryImageReferenceFragment",
            modelProperties: {
                offer: {
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ParameterInfo = {
        serializedName: "ParameterInfo",
        type: {
            name: "Composite",
            className: "ParameterInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenerateArmTemplateRequest = {
        serializedName: "GenerateArmTemplateRequest",
        type: {
            name: "Composite",
            className: "GenerateArmTemplateRequest",
            modelProperties: {
                virtualMachineName: {
                    serializedName: "virtualMachineName",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ParameterInfo"
                            }
                        }
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                fileUploadOptions: {
                    serializedName: "fileUploadOptions",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenerateUploadUriParameter = {
        serializedName: "GenerateUploadUriParameter",
        type: {
            name: "Composite",
            className: "GenerateUploadUriParameter",
            modelProperties: {
                blobName: {
                    serializedName: "blobName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenerateUploadUriResponse = {
        serializedName: "GenerateUploadUriResponse",
        type: {
            name: "Composite",
            className: "GenerateUploadUriResponse",
            modelProperties: {
                uploadUri: {
                    serializedName: "uploadUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IdentityProperties = {
        serializedName: "IdentityProperties",
        type: {
            name: "Composite",
            className: "IdentityProperties",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                clientSecretUrl: {
                    serializedName: "clientSecretUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InboundNatRuleFragment = {
        serializedName: "InboundNatRuleFragment",
        type: {
            name: "Composite",
            className: "InboundNatRuleFragment",
            modelProperties: {
                transportProtocol: {
                    serializedName: "transportProtocol",
                    type: {
                        name: "String"
                    }
                },
                frontendPort: {
                    serializedName: "frontendPort",
                    type: {
                        name: "Number"
                    }
                },
                backendPort: {
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Lab = {
        serializedName: "Lab",
        type: {
            name: "Composite",
            className: "Lab",
            modelProperties: __assign({}, Resource.type.modelProperties, { defaultStorageAccount: {
                    readOnly: true,
                    serializedName: "properties.defaultStorageAccount",
                    type: {
                        name: "String"
                    }
                }, defaultPremiumStorageAccount: {
                    readOnly: true,
                    serializedName: "properties.defaultPremiumStorageAccount",
                    type: {
                        name: "String"
                    }
                }, artifactsStorageAccount: {
                    readOnly: true,
                    serializedName: "properties.artifactsStorageAccount",
                    type: {
                        name: "String"
                    }
                }, premiumDataDiskStorageAccount: {
                    readOnly: true,
                    serializedName: "properties.premiumDataDiskStorageAccount",
                    type: {
                        name: "String"
                    }
                }, vaultName: {
                    readOnly: true,
                    serializedName: "properties.vaultName",
                    type: {
                        name: "String"
                    }
                }, labStorageType: {
                    serializedName: "properties.labStorageType",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, premiumDataDisks: {
                    serializedName: "properties.premiumDataDisks",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TargetCostProperties = {
        serializedName: "TargetCostProperties",
        type: {
            name: "Composite",
            className: "TargetCostProperties",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "Number"
                    }
                },
                costThresholds: {
                    serializedName: "costThresholds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CostThresholdProperties"
                            }
                        }
                    }
                },
                cycleStartDateTime: {
                    serializedName: "cycleStartDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                cycleEndDateTime: {
                    serializedName: "cycleEndDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                cycleType: {
                    serializedName: "cycleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LabCostSummaryProperties = {
        serializedName: "LabCostSummaryProperties",
        type: {
            name: "Composite",
            className: "LabCostSummaryProperties",
            modelProperties: {
                estimatedLabCost: {
                    serializedName: "estimatedLabCost",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LabCostDetailsProperties = {
        serializedName: "LabCostDetailsProperties",
        type: {
            name: "Composite",
            className: "LabCostDetailsProperties",
            modelProperties: {
                date: {
                    serializedName: "date",
                    type: {
                        name: "DateTime"
                    }
                },
                cost: {
                    serializedName: "cost",
                    type: {
                        name: "Number"
                    }
                },
                costType: {
                    serializedName: "costType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LabResourceCostProperties = {
        serializedName: "LabResourceCostProperties",
        type: {
            name: "Composite",
            className: "LabResourceCostProperties",
            modelProperties: {
                resourcename: {
                    serializedName: "resourcename",
                    type: {
                        name: "String"
                    }
                },
                resourceUId: {
                    serializedName: "resourceUId",
                    type: {
                        name: "String"
                    }
                },
                resourceCost: {
                    serializedName: "resourceCost",
                    type: {
                        name: "Number"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceOwner: {
                    serializedName: "resourceOwner",
                    type: {
                        name: "String"
                    }
                },
                resourcePricingTier: {
                    serializedName: "resourcePricingTier",
                    type: {
                        name: "String"
                    }
                },
                resourceStatus: {
                    serializedName: "resourceStatus",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                externalResourceId: {
                    serializedName: "externalResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LabCost = {
        serializedName: "LabCost",
        type: {
            name: "Composite",
            className: "LabCost",
            modelProperties: __assign({}, Resource.type.modelProperties, { targetCost: {
                    serializedName: "properties.targetCost",
                    type: {
                        name: "Composite",
                        className: "TargetCostProperties"
                    }
                }, labCostSummary: {
                    readOnly: true,
                    serializedName: "properties.labCostSummary",
                    type: {
                        name: "Composite",
                        className: "LabCostSummaryProperties"
                    }
                }, labCostDetails: {
                    readOnly: true,
                    serializedName: "properties.labCostDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LabCostDetailsProperties"
                            }
                        }
                    }
                }, resourceCosts: {
                    readOnly: true,
                    serializedName: "properties.resourceCosts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LabResourceCostProperties"
                            }
                        }
                    }
                }, currencyCode: {
                    serializedName: "properties.currencyCode",
                    type: {
                        name: "String"
                    }
                }, startDateTime: {
                    serializedName: "properties.startDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, endDateTime: {
                    serializedName: "properties.endDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LabFragment = {
        serializedName: "LabFragment",
        type: {
            name: "Composite",
            className: "LabFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { labStorageType: {
                    serializedName: "properties.labStorageType",
                    type: {
                        name: "String"
                    }
                }, premiumDataDisks: {
                    serializedName: "properties.premiumDataDisks",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LabVhd = {
        serializedName: "LabVhd",
        type: {
            name: "Composite",
            className: "LabVhd",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LabVirtualMachine = {
        serializedName: "LabVirtualMachine",
        type: {
            name: "Composite",
            className: "LabVirtualMachine",
            modelProperties: __assign({}, Resource.type.modelProperties, { notes: {
                    serializedName: "properties.notes",
                    type: {
                        name: "String"
                    }
                }, ownerObjectId: {
                    serializedName: "properties.ownerObjectId",
                    type: {
                        name: "String"
                    }
                }, ownerUserPrincipalName: {
                    serializedName: "properties.ownerUserPrincipalName",
                    type: {
                        name: "String"
                    }
                }, createdByUserId: {
                    serializedName: "properties.createdByUserId",
                    type: {
                        name: "String"
                    }
                }, createdByUser: {
                    serializedName: "properties.createdByUser",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, computeId: {
                    readOnly: true,
                    serializedName: "properties.computeId",
                    type: {
                        name: "String"
                    }
                }, customImageId: {
                    serializedName: "properties.customImageId",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, size: {
                    serializedName: "properties.size",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, sshKey: {
                    serializedName: "properties.sshKey",
                    type: {
                        name: "String"
                    }
                }, isAuthenticationWithSshKey: {
                    serializedName: "properties.isAuthenticationWithSshKey",
                    type: {
                        name: "Boolean"
                    }
                }, fqdn: {
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, labSubnetName: {
                    serializedName: "properties.labSubnetName",
                    type: {
                        name: "String"
                    }
                }, labVirtualNetworkId: {
                    serializedName: "properties.labVirtualNetworkId",
                    type: {
                        name: "String"
                    }
                }, disallowPublicIpAddress: {
                    serializedName: "properties.disallowPublicIpAddress",
                    type: {
                        name: "Boolean"
                    }
                }, artifacts: {
                    serializedName: "properties.artifacts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactInstallProperties"
                            }
                        }
                    }
                }, artifactDeploymentStatus: {
                    serializedName: "properties.artifactDeploymentStatus",
                    type: {
                        name: "Composite",
                        className: "ArtifactDeploymentStatusProperties"
                    }
                }, galleryImageReference: {
                    serializedName: "properties.galleryImageReference",
                    type: {
                        name: "Composite",
                        className: "GalleryImageReference"
                    }
                }, computeVm: {
                    serializedName: "properties.computeVm",
                    type: {
                        name: "Composite",
                        className: "ComputeVmProperties"
                    }
                }, networkInterface: {
                    serializedName: "properties.networkInterface",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfaceProperties"
                    }
                }, applicableSchedule: {
                    serializedName: "properties.applicableSchedule",
                    type: {
                        name: "Composite",
                        className: "ApplicableSchedule"
                    }
                }, expirationDate: {
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                }, allowClaim: {
                    serializedName: "properties.allowClaim",
                    type: {
                        name: "Boolean"
                    }
                }, storageType: {
                    serializedName: "properties.storageType",
                    type: {
                        name: "String"
                    }
                }, virtualMachineCreationSource: {
                    serializedName: "properties.virtualMachineCreationSource",
                    type: {
                        name: "String"
                    }
                }, environmentId: {
                    serializedName: "properties.environmentId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SharedPublicIpAddressConfigurationFragment = {
        serializedName: "SharedPublicIpAddressConfigurationFragment",
        type: {
            name: "Composite",
            className: "SharedPublicIpAddressConfigurationFragment",
            modelProperties: {
                inboundNatRules: {
                    serializedName: "inboundNatRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InboundNatRuleFragment"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkInterfacePropertiesFragment = {
        serializedName: "NetworkInterfacePropertiesFragment",
        type: {
            name: "Composite",
            className: "NetworkInterfacePropertiesFragment",
            modelProperties: {
                virtualNetworkId: {
                    serializedName: "virtualNetworkId",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddressId: {
                    serializedName: "publicIpAddressId",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddress: {
                    serializedName: "publicIpAddress",
                    type: {
                        name: "String"
                    }
                },
                privateIpAddress: {
                    serializedName: "privateIpAddress",
                    type: {
                        name: "String"
                    }
                },
                dnsName: {
                    serializedName: "dnsName",
                    type: {
                        name: "String"
                    }
                },
                rdpAuthority: {
                    serializedName: "rdpAuthority",
                    type: {
                        name: "String"
                    }
                },
                sshAuthority: {
                    serializedName: "sshAuthority",
                    type: {
                        name: "String"
                    }
                },
                sharedPublicIpAddressConfiguration: {
                    serializedName: "sharedPublicIpAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "SharedPublicIpAddressConfigurationFragment"
                    }
                }
            }
        }
    };
    var LabVirtualMachineFragment = {
        serializedName: "LabVirtualMachineFragment",
        type: {
            name: "Composite",
            className: "LabVirtualMachineFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { notes: {
                    serializedName: "properties.notes",
                    type: {
                        name: "String"
                    }
                }, ownerObjectId: {
                    serializedName: "properties.ownerObjectId",
                    type: {
                        name: "String"
                    }
                }, ownerUserPrincipalName: {
                    serializedName: "properties.ownerUserPrincipalName",
                    type: {
                        name: "String"
                    }
                }, createdByUserId: {
                    serializedName: "properties.createdByUserId",
                    type: {
                        name: "String"
                    }
                }, createdByUser: {
                    serializedName: "properties.createdByUser",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, customImageId: {
                    serializedName: "properties.customImageId",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, size: {
                    serializedName: "properties.size",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, password: {
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, sshKey: {
                    serializedName: "properties.sshKey",
                    type: {
                        name: "String"
                    }
                }, isAuthenticationWithSshKey: {
                    serializedName: "properties.isAuthenticationWithSshKey",
                    type: {
                        name: "Boolean"
                    }
                }, fqdn: {
                    serializedName: "properties.fqdn",
                    type: {
                        name: "String"
                    }
                }, labSubnetName: {
                    serializedName: "properties.labSubnetName",
                    type: {
                        name: "String"
                    }
                }, labVirtualNetworkId: {
                    serializedName: "properties.labVirtualNetworkId",
                    type: {
                        name: "String"
                    }
                }, disallowPublicIpAddress: {
                    serializedName: "properties.disallowPublicIpAddress",
                    type: {
                        name: "Boolean"
                    }
                }, artifacts: {
                    serializedName: "properties.artifacts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactInstallPropertiesFragment"
                            }
                        }
                    }
                }, artifactDeploymentStatus: {
                    serializedName: "properties.artifactDeploymentStatus",
                    type: {
                        name: "Composite",
                        className: "ArtifactDeploymentStatusPropertiesFragment"
                    }
                }, galleryImageReference: {
                    serializedName: "properties.galleryImageReference",
                    type: {
                        name: "Composite",
                        className: "GalleryImageReferenceFragment"
                    }
                }, computeVm: {
                    serializedName: "properties.computeVm",
                    type: {
                        name: "Composite",
                        className: "ComputeVmPropertiesFragment"
                    }
                }, networkInterface: {
                    serializedName: "properties.networkInterface",
                    type: {
                        name: "Composite",
                        className: "NetworkInterfacePropertiesFragment"
                    }
                }, applicableSchedule: {
                    serializedName: "properties.applicableSchedule",
                    type: {
                        name: "Composite",
                        className: "ApplicableScheduleFragment"
                    }
                }, expirationDate: {
                    serializedName: "properties.expirationDate",
                    type: {
                        name: "DateTime"
                    }
                }, allowClaim: {
                    serializedName: "properties.allowClaim",
                    type: {
                        name: "Boolean"
                    }
                }, storageType: {
                    serializedName: "properties.storageType",
                    type: {
                        name: "String"
                    }
                }, virtualMachineCreationSource: {
                    serializedName: "properties.virtualMachineCreationSource",
                    type: {
                        name: "String"
                    }
                }, environmentId: {
                    serializedName: "properties.environmentId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NotificationChannel = {
        serializedName: "NotificationChannel",
        type: {
            name: "Composite",
            className: "NotificationChannel",
            modelProperties: __assign({}, Resource.type.modelProperties, { webHookUrl: {
                    serializedName: "properties.webHookUrl",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, events: {
                    serializedName: "properties.events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NotificationChannelFragment = {
        serializedName: "NotificationChannelFragment",
        type: {
            name: "Composite",
            className: "NotificationChannelFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { webHookUrl: {
                    serializedName: "properties.webHookUrl",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, events: {
                    serializedName: "properties.events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventFragment"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NotifyParameters = {
        serializedName: "NotifyParameters",
        type: {
            name: "Composite",
            className: "NotifyParameters",
            modelProperties: {
                eventName: {
                    serializedName: "eventName",
                    type: {
                        name: "String"
                    }
                },
                jsonPayload: {
                    serializedName: "jsonPayload",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationError = {
        serializedName: "OperationError",
        type: {
            name: "Composite",
            className: "OperationError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetadataDisplay = {
        serializedName: "OperationMetadataDisplay",
        type: {
            name: "Composite",
            className: "OperationMetadataDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetadata = {
        serializedName: "OperationMetadata",
        type: {
            name: "Composite",
            className: "OperationMetadata",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationMetadataDisplay"
                    }
                }
            }
        }
    };
    var OperationResult = {
        serializedName: "OperationResult",
        type: {
            name: "Composite",
            className: "OperationResult",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusCode: {
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "OperationError"
                    }
                }
            }
        }
    };
    var Policy = {
        serializedName: "Policy",
        type: {
            name: "Composite",
            className: "Policy",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, factName: {
                    serializedName: "properties.factName",
                    type: {
                        name: "String"
                    }
                }, factData: {
                    serializedName: "properties.factData",
                    type: {
                        name: "String"
                    }
                }, threshold: {
                    serializedName: "properties.threshold",
                    type: {
                        name: "String"
                    }
                }, evaluatorType: {
                    serializedName: "properties.evaluatorType",
                    type: {
                        name: "String"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PolicyFragment = {
        serializedName: "PolicyFragment",
        type: {
            name: "Composite",
            className: "PolicyFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, factName: {
                    serializedName: "properties.factName",
                    type: {
                        name: "String"
                    }
                }, factData: {
                    serializedName: "properties.factData",
                    type: {
                        name: "String"
                    }
                }, threshold: {
                    serializedName: "properties.threshold",
                    type: {
                        name: "String"
                    }
                }, evaluatorType: {
                    serializedName: "properties.evaluatorType",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Port = {
        serializedName: "Port",
        type: {
            name: "Composite",
            className: "Port",
            modelProperties: {
                transportProtocol: {
                    serializedName: "transportProtocol",
                    type: {
                        name: "String"
                    }
                },
                backendPort: {
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PortFragment = {
        serializedName: "PortFragment",
        type: {
            name: "Composite",
            className: "PortFragment",
            modelProperties: {
                transportProtocol: {
                    serializedName: "transportProtocol",
                    type: {
                        name: "String"
                    }
                },
                backendPort: {
                    serializedName: "backendPort",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RetargetScheduleProperties = {
        serializedName: "RetargetScheduleProperties",
        type: {
            name: "Composite",
            className: "RetargetScheduleProperties",
            modelProperties: {
                currentResourceId: {
                    serializedName: "currentResourceId",
                    type: {
                        name: "String"
                    }
                },
                targetResourceId: {
                    serializedName: "targetResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Secret = {
        serializedName: "Secret",
        type: {
            name: "Composite",
            className: "Secret",
            modelProperties: __assign({}, Resource.type.modelProperties, { value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceRunner = {
        serializedName: "ServiceRunner",
        type: {
            name: "Composite",
            className: "ServiceRunner",
            modelProperties: __assign({}, Resource.type.modelProperties, { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "IdentityProperties"
                    }
                } })
        }
    };
    var ShutdownNotificationContent = {
        serializedName: "ShutdownNotificationContent",
        type: {
            name: "Composite",
            className: "ShutdownNotificationContent",
            modelProperties: {
                skipUrl: {
                    serializedName: "skipUrl",
                    type: {
                        name: "String"
                    }
                },
                delayUrl60: {
                    serializedName: "delayUrl60",
                    type: {
                        name: "String"
                    }
                },
                delayUrl120: {
                    serializedName: "delayUrl120",
                    type: {
                        name: "String"
                    }
                },
                vmName: {
                    serializedName: "vmName",
                    type: {
                        name: "String"
                    }
                },
                guid: {
                    serializedName: "guid",
                    type: {
                        name: "String"
                    }
                },
                owner: {
                    serializedName: "owner",
                    type: {
                        name: "String"
                    }
                },
                eventType: {
                    serializedName: "eventType",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroupName: {
                    serializedName: "resourceGroupName",
                    type: {
                        name: "String"
                    }
                },
                labName: {
                    serializedName: "labName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Subnet = {
        serializedName: "Subnet",
        type: {
            name: "Composite",
            className: "Subnet",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                labSubnetName: {
                    serializedName: "labSubnetName",
                    type: {
                        name: "String"
                    }
                },
                allowPublicIp: {
                    serializedName: "allowPublicIp",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubnetFragment = {
        serializedName: "SubnetFragment",
        type: {
            name: "Composite",
            className: "SubnetFragment",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                labSubnetName: {
                    serializedName: "labSubnetName",
                    type: {
                        name: "String"
                    }
                },
                allowPublicIp: {
                    serializedName: "allowPublicIp",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubnetSharedPublicIpAddressConfiguration = {
        serializedName: "SubnetSharedPublicIpAddressConfiguration",
        type: {
            name: "Composite",
            className: "SubnetSharedPublicIpAddressConfiguration",
            modelProperties: {
                allowedPorts: {
                    serializedName: "allowedPorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Port"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubnetOverride = {
        serializedName: "SubnetOverride",
        type: {
            name: "Composite",
            className: "SubnetOverride",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                labSubnetName: {
                    serializedName: "labSubnetName",
                    type: {
                        name: "String"
                    }
                },
                useInVmCreationPermission: {
                    serializedName: "useInVmCreationPermission",
                    type: {
                        name: "String"
                    }
                },
                usePublicIpAddressPermission: {
                    serializedName: "usePublicIpAddressPermission",
                    type: {
                        name: "String"
                    }
                },
                sharedPublicIpAddressConfiguration: {
                    serializedName: "sharedPublicIpAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubnetSharedPublicIpAddressConfiguration"
                    }
                },
                virtualNetworkPoolName: {
                    serializedName: "virtualNetworkPoolName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SubnetSharedPublicIpAddressConfigurationFragment = {
        serializedName: "SubnetSharedPublicIpAddressConfigurationFragment",
        type: {
            name: "Composite",
            className: "SubnetSharedPublicIpAddressConfigurationFragment",
            modelProperties: {
                allowedPorts: {
                    serializedName: "allowedPorts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PortFragment"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubnetOverrideFragment = {
        serializedName: "SubnetOverrideFragment",
        type: {
            name: "Composite",
            className: "SubnetOverrideFragment",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                labSubnetName: {
                    serializedName: "labSubnetName",
                    type: {
                        name: "String"
                    }
                },
                useInVmCreationPermission: {
                    serializedName: "useInVmCreationPermission",
                    type: {
                        name: "String"
                    }
                },
                usePublicIpAddressPermission: {
                    serializedName: "usePublicIpAddressPermission",
                    type: {
                        name: "String"
                    }
                },
                sharedPublicIpAddressConfiguration: {
                    serializedName: "sharedPublicIpAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "SubnetSharedPublicIpAddressConfigurationFragment"
                    }
                },
                virtualNetworkPoolName: {
                    serializedName: "virtualNetworkPoolName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserIdentity = {
        serializedName: "UserIdentity",
        type: {
            name: "Composite",
            className: "UserIdentity",
            modelProperties: {
                principalName: {
                    serializedName: "principalName",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                objectId: {
                    serializedName: "objectId",
                    type: {
                        name: "String"
                    }
                },
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserSecretStore = {
        serializedName: "UserSecretStore",
        type: {
            name: "Composite",
            className: "UserSecretStore",
            modelProperties: {
                keyVaultUri: {
                    serializedName: "keyVaultUri",
                    type: {
                        name: "String"
                    }
                },
                keyVaultId: {
                    serializedName: "keyVaultId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var User = {
        serializedName: "User",
        type: {
            name: "Composite",
            className: "User",
            modelProperties: __assign({}, Resource.type.modelProperties, { identity: {
                    serializedName: "properties.identity",
                    type: {
                        name: "Composite",
                        className: "UserIdentity"
                    }
                }, secretStore: {
                    serializedName: "properties.secretStore",
                    type: {
                        name: "Composite",
                        className: "UserSecretStore"
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UserIdentityFragment = {
        serializedName: "UserIdentityFragment",
        type: {
            name: "Composite",
            className: "UserIdentityFragment",
            modelProperties: {
                principalName: {
                    serializedName: "principalName",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                objectId: {
                    serializedName: "objectId",
                    type: {
                        name: "String"
                    }
                },
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserSecretStoreFragment = {
        serializedName: "UserSecretStoreFragment",
        type: {
            name: "Composite",
            className: "UserSecretStoreFragment",
            modelProperties: {
                keyVaultUri: {
                    serializedName: "keyVaultUri",
                    type: {
                        name: "String"
                    }
                },
                keyVaultId: {
                    serializedName: "keyVaultId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserFragment = {
        serializedName: "UserFragment",
        type: {
            name: "Composite",
            className: "UserFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { identity: {
                    serializedName: "properties.identity",
                    type: {
                        name: "Composite",
                        className: "UserIdentityFragment"
                    }
                }, secretStore: {
                    serializedName: "properties.secretStore",
                    type: {
                        name: "Composite",
                        className: "UserSecretStoreFragment"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetwork = {
        serializedName: "VirtualNetwork",
        type: {
            name: "Composite",
            className: "VirtualNetwork",
            modelProperties: __assign({}, Resource.type.modelProperties, { allowedSubnets: {
                    serializedName: "properties.allowedSubnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Subnet"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, externalProviderResourceId: {
                    serializedName: "properties.externalProviderResourceId",
                    type: {
                        name: "String"
                    }
                }, externalSubnets: {
                    serializedName: "properties.externalSubnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExternalSubnet"
                            }
                        }
                    }
                }, subnetOverrides: {
                    serializedName: "properties.subnetOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubnetOverride"
                            }
                        }
                    }
                }, createdDate: {
                    readOnly: true,
                    serializedName: "properties.createdDate",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkFragment = {
        serializedName: "VirtualNetworkFragment",
        type: {
            name: "Composite",
            className: "VirtualNetworkFragment",
            modelProperties: __assign({}, Resource.type.modelProperties, { allowedSubnets: {
                    serializedName: "properties.allowedSubnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubnetFragment"
                            }
                        }
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, externalProviderResourceId: {
                    serializedName: "properties.externalProviderResourceId",
                    type: {
                        name: "String"
                    }
                }, externalSubnets: {
                    serializedName: "properties.externalSubnets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExternalSubnetFragment"
                            }
                        }
                    }
                }, subnetOverrides: {
                    serializedName: "properties.subnetOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubnetOverrideFragment"
                            }
                        }
                    }
                }, provisioningState: {
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, uniqueIdentifier: {
                    serializedName: "properties.uniqueIdentifier",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProviderOperationResult = {
        serializedName: "ProviderOperationResult",
        type: {
            name: "Composite",
            className: "ProviderOperationResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetadata"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationLab = {
        serializedName: "ResponseWithContinuation_Lab_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationLab",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Lab"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationLabVhd = {
        serializedName: "ResponseWithContinuation_LabVhd_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationLabVhd",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LabVhd"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationSchedule = {
        serializedName: "ResponseWithContinuation_Schedule_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationSchedule",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Schedule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationArtifactSource = {
        serializedName: "ResponseWithContinuation_ArtifactSource_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationArtifactSource",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactSource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationArmTemplate = {
        serializedName: "ResponseWithContinuation_ArmTemplate_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationArmTemplate",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArmTemplate"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationArtifact = {
        serializedName: "ResponseWithContinuation_Artifact_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationArtifact",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Artifact"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationCustomImage = {
        serializedName: "ResponseWithContinuation_CustomImage_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationCustomImage",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CustomImage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationFormula = {
        serializedName: "ResponseWithContinuation_Formula_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationFormula",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Formula"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationGalleryImage = {
        serializedName: "ResponseWithContinuation_GalleryImage_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationGalleryImage",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationNotificationChannel = {
        serializedName: "ResponseWithContinuation_NotificationChannel_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationNotificationChannel",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NotificationChannel"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationPolicy = {
        serializedName: "ResponseWithContinuation_Policy_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationPolicy",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Policy"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationServiceRunner = {
        serializedName: "ResponseWithContinuation_ServiceRunner_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationServiceRunner",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceRunner"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationUser = {
        serializedName: "ResponseWithContinuation_User_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationUser",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "User"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationDisk = {
        serializedName: "ResponseWithContinuation_Disk_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationDisk",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Disk"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationDtlEnvironment = {
        serializedName: "ResponseWithContinuation_DtlEnvironment_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationDtlEnvironment",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DtlEnvironment"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationSecret = {
        serializedName: "ResponseWithContinuation_Secret_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationSecret",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Secret"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationLabVirtualMachine = {
        serializedName: "ResponseWithContinuation_LabVirtualMachine_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationLabVirtualMachine",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LabVirtualMachine"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResponseWithContinuationVirtualNetwork = {
        serializedName: "ResponseWithContinuation_VirtualNetwork_",
        type: {
            name: "Composite",
            className: "ResponseWithContinuationVirtualNetwork",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetwork"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        Resource: Resource,
        Schedule: Schedule,
        ApplicableSchedule: ApplicableSchedule,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ScheduleFragment: ScheduleFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ApplyArtifactsRequest: ApplyArtifactsRequest,
        ParametersValueFileInfo: ParametersValueFileInfo,
        ArmTemplate: ArmTemplate,
        ArmTemplateInfo: ArmTemplateInfo,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Artifact: Artifact,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        AttachDiskProperties: AttachDiskProperties,
        AttachNewDataDiskOptions: AttachNewDataDiskOptions,
        BulkCreationParameters: BulkCreationParameters,
        ComputeDataDisk: ComputeDataDisk,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        CostThresholdProperties: CostThresholdProperties,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        CustomImage: CustomImage,
        DataDiskProperties: DataDiskProperties,
        DetachDataDiskProperties: DetachDataDiskProperties,
        DetachDiskProperties: DetachDiskProperties,
        Disk: Disk,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        DtlEnvironment: DtlEnvironment,
        EvaluatePoliciesProperties: EvaluatePoliciesProperties,
        EvaluatePoliciesRequest: EvaluatePoliciesRequest,
        PolicyViolation: PolicyViolation,
        PolicySetResult: PolicySetResult,
        EvaluatePoliciesResponse: EvaluatePoliciesResponse,
        Event: Event,
        EventFragment: EventFragment,
        ExportResourceUsageParameters: ExportResourceUsageParameters,
        ExternalSubnet: ExternalSubnet,
        ExternalSubnetFragment: ExternalSubnetFragment,
        GalleryImageReference: GalleryImageReference,
        InboundNatRule: InboundNatRule,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        Formula: Formula,
        GalleryImage: GalleryImage,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ParameterInfo: ParameterInfo,
        GenerateArmTemplateRequest: GenerateArmTemplateRequest,
        GenerateUploadUriParameter: GenerateUploadUriParameter,
        GenerateUploadUriResponse: GenerateUploadUriResponse,
        IdentityProperties: IdentityProperties,
        InboundNatRuleFragment: InboundNatRuleFragment,
        Lab: Lab,
        TargetCostProperties: TargetCostProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabCost: LabCost,
        LabFragment: LabFragment,
        LabVhd: LabVhd,
        LabVirtualMachine: LabVirtualMachine,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        NotificationChannel: NotificationChannel,
        NotificationChannelFragment: NotificationChannelFragment,
        NotifyParameters: NotifyParameters,
        OperationError: OperationError,
        OperationMetadataDisplay: OperationMetadataDisplay,
        OperationMetadata: OperationMetadata,
        OperationResult: OperationResult,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Port: Port,
        PortFragment: PortFragment,
        RetargetScheduleProperties: RetargetScheduleProperties,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        ShutdownNotificationContent: ShutdownNotificationContent,
        Subnet: Subnet,
        SubnetFragment: SubnetFragment,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        User: User,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        UserFragment: UserFragment,
        VirtualNetwork: VirtualNetwork,
        VirtualNetworkFragment: VirtualNetworkFragment,
        ProviderOperationResult: ProviderOperationResult,
        ResponseWithContinuationLab: ResponseWithContinuationLab,
        ResponseWithContinuationLabVhd: ResponseWithContinuationLabVhd,
        ResponseWithContinuationSchedule: ResponseWithContinuationSchedule,
        ResponseWithContinuationArtifactSource: ResponseWithContinuationArtifactSource,
        ResponseWithContinuationArmTemplate: ResponseWithContinuationArmTemplate,
        ResponseWithContinuationArtifact: ResponseWithContinuationArtifact,
        ResponseWithContinuationCustomImage: ResponseWithContinuationCustomImage,
        ResponseWithContinuationFormula: ResponseWithContinuationFormula,
        ResponseWithContinuationGalleryImage: ResponseWithContinuationGalleryImage,
        ResponseWithContinuationNotificationChannel: ResponseWithContinuationNotificationChannel,
        ResponseWithContinuationPolicy: ResponseWithContinuationPolicy,
        ResponseWithContinuationServiceRunner: ResponseWithContinuationServiceRunner,
        ResponseWithContinuationUser: ResponseWithContinuationUser,
        ResponseWithContinuationDisk: ResponseWithContinuationDisk,
        ResponseWithContinuationDtlEnvironment: ResponseWithContinuationDtlEnvironment,
        ResponseWithContinuationSecret: ResponseWithContinuationSecret,
        ResponseWithContinuationLabVirtualMachine: ResponseWithContinuationLabVirtualMachine,
        ResponseWithContinuationVirtualNetwork: ResponseWithContinuationVirtualNetwork
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ProviderOperationResult: ProviderOperationResult,
        OperationMetadata: OperationMetadata,
        OperationMetadataDisplay: OperationMetadataDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            defaultValue: '2016-05-15',
            type: {
                name: "String"
            }
        }
    };
    var artifactSourceName = {
        parameterPath: "artifactSourceName",
        mapper: {
            required: true,
            serializedName: "artifactSourceName",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var labName = {
        parameterPath: "labName",
        mapper: {
            required: true,
            serializedName: "labName",
            type: {
                name: "String"
            }
        }
    };
    var locationName = {
        parameterPath: "locationName",
        mapper: {
            required: true,
            serializedName: "locationName",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var policySetName = {
        parameterPath: "policySetName",
        mapper: {
            required: true,
            serializedName: "policySetName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var userName = {
        parameterPath: "userName",
        mapper: {
            required: true,
            serializedName: "userName",
            type: {
                name: "String"
            }
        }
    };
    var virtualMachineName = {
        parameterPath: "virtualMachineName",
        mapper: {
            required: true,
            serializedName: "virtualMachineName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProviderOperations. */
    var ProviderOperations = /** @class */ (function () {
        /**
         * Create a ProviderOperations.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function ProviderOperations(client) {
            this.client = client;
        }
        ProviderOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ProviderOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return ProviderOperations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.DevTestLab/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderOperationResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderOperationResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationLab: ResponseWithContinuationLab,
        Lab: Lab,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        LabFragment: LabFragment,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        ApplicableSchedule: ApplicableSchedule,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ExportResourceUsageParameters: ExportResourceUsageParameters,
        GenerateUploadUriParameter: GenerateUploadUriParameter,
        GenerateUploadUriResponse: GenerateUploadUriResponse,
        ResponseWithContinuationLabVhd: ResponseWithContinuationLabVhd,
        LabVhd: LabVhd,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Labs. */
    var Labs = /** @class */ (function () {
        /**
         * Create a Labs.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Labs(client) {
            this.client = client;
        }
        Labs.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Labs.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Labs.prototype.get = function (resourceGroupName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create or replace an existing lab. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param lab A lab.
         * @param [options] The optional parameters
         * @returns Promise<Models.LabsCreateOrUpdateResponse>
         */
        Labs.prototype.createOrUpdate = function (resourceGroupName$$1, name$$1, lab, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, name$$1, lab, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete lab. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Labs.prototype.deleteMethod = function (resourceGroupName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Labs.prototype.update = function (resourceGroupName$$1, name$$1, lab, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                lab: lab,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Claim a random claimable virtual machine in the lab. This operation can take a while to
         * complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Labs.prototype.claimAnyVm = function (resourceGroupName$$1, name$$1, options) {
            return this.beginClaimAnyVm(resourceGroupName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create virtual machines in a lab. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Labs.prototype.createEnvironment = function (resourceGroupName$$1, name$$1, labVirtualMachineCreationParameter, options) {
            return this.beginCreateEnvironment(resourceGroupName$$1, name$$1, labVirtualMachineCreationParameter, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Exports the lab resource usage into a storage account This operation can take a while to
         * complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param exportResourceUsageParameters The parameters of the export operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Labs.prototype.exportResourceUsage = function (resourceGroupName$$1, name$$1, exportResourceUsageParameters, options) {
            return this.beginExportResourceUsage(resourceGroupName$$1, name$$1, exportResourceUsageParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Labs.prototype.generateUploadUri = function (resourceGroupName$$1, name$$1, generateUploadUriParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                generateUploadUriParameter: generateUploadUriParameter,
                options: options
            }, generateUploadUriOperationSpec, callback);
        };
        Labs.prototype.listVhds = function (resourceGroupName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, listVhdsOperationSpec, callback);
        };
        /**
         * Create or replace an existing lab. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param lab A lab.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Labs.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, name$$1, lab, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                lab: lab,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Delete lab. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Labs.prototype.beginDeleteMethod = function (resourceGroupName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Claim a random claimable virtual machine in the lab. This operation can take a while to
         * complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Labs.prototype.beginClaimAnyVm = function (resourceGroupName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, beginClaimAnyVmOperationSpec, options);
        };
        /**
         * Create virtual machines in a lab. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Labs.prototype.beginCreateEnvironment = function (resourceGroupName$$1, name$$1, labVirtualMachineCreationParameter, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                labVirtualMachineCreationParameter: labVirtualMachineCreationParameter,
                options: options
            }, beginCreateEnvironmentOperationSpec, options);
        };
        /**
         * Exports the lab resource usage into a storage account This operation can take a while to
         * complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the lab.
         * @param exportResourceUsageParameters The parameters of the export operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Labs.prototype.beginExportResourceUsage = function (resourceGroupName$$1, name$$1, exportResourceUsageParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                exportResourceUsageParameters: exportResourceUsageParameters,
                options: options
            }, beginExportResourceUsageOperationSpec, options);
        };
        Labs.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        Labs.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Labs.prototype.listVhdsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listVhdsNextOperationSpec, callback);
        };
        return Labs;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Lab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "lab",
            mapper: __assign({}, LabFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Lab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var generateUploadUriOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "generateUploadUriParameter",
            mapper: __assign({}, GenerateUploadUriParameter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GenerateUploadUriResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listVhdsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLabVhd
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "lab",
            mapper: __assign({}, Lab, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Lab
            },
            201: {
                bodyMapper: Lab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginClaimAnyVmOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateEnvironmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "labVirtualMachineCreationParameter",
            mapper: __assign({}, LabVirtualMachineCreationParameter, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginExportResourceUsageOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "exportResourceUsageParameters",
            mapper: __assign({}, ExportResourceUsageParameters, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLab
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listVhdsNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLabVhd
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        OperationResult: OperationResult,
        OperationError: OperationError,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.get = function (locationName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                locationName: locationName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/locations/{locationName}/operations/{name}",
        urlParameters: [
            subscriptionId,
            locationName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationSchedule: ResponseWithContinuationSchedule,
        Schedule: Schedule,
        Resource: Resource,
        BaseResource: BaseResource,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        CloudError: CloudError,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        RetargetScheduleProperties: RetargetScheduleProperties,
        ApplicableSchedule: ApplicableSchedule,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GlobalSchedules. */
    var GlobalSchedules = /** @class */ (function () {
        /**
         * Create a GlobalSchedules.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function GlobalSchedules(client) {
            this.client = client;
        }
        GlobalSchedules.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        GlobalSchedules.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        GlobalSchedules.prototype.get = function (resourceGroupName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        GlobalSchedules.prototype.createOrUpdate = function (resourceGroupName$$1, name$$1, schedule, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                schedule: schedule,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        GlobalSchedules.prototype.deleteMethod = function (resourceGroupName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        GlobalSchedules.prototype.update = function (resourceGroupName$$1, name$$1, schedule, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                schedule: schedule,
                options: options
            }, updateOperationSpec$1, callback);
        };
        /**
         * Execute a schedule. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GlobalSchedules.prototype.execute = function (resourceGroupName$$1, name$$1, options) {
            return this.beginExecute(resourceGroupName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a schedule's target resource Id. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the schedule.
         * @param retargetScheduleProperties Properties for retargeting a virtual machine schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GlobalSchedules.prototype.retarget = function (resourceGroupName$$1, name$$1, retargetScheduleProperties, options) {
            return this.beginRetarget(resourceGroupName$$1, name$$1, retargetScheduleProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Execute a schedule. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GlobalSchedules.prototype.beginExecute = function (resourceGroupName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                options: options
            }, beginExecuteOperationSpec, options);
        };
        /**
         * Updates a schedule's target resource Id. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the schedule.
         * @param retargetScheduleProperties Properties for retargeting a virtual machine schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GlobalSchedules.prototype.beginRetarget = function (resourceGroupName$$1, name$$1, retargetScheduleProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                name: name$$1,
                retargetScheduleProperties: retargetScheduleProperties,
                options: options
            }, beginRetargetOperationSpec, options);
        };
        GlobalSchedules.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$1, callback);
        };
        GlobalSchedules.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return GlobalSchedules;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/schedules",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schedule",
            mapper: __assign({}, Schedule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            201: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schedule",
            mapper: __assign({}, ScheduleFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginExecuteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}/execute",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginRetargetOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/schedules/{name}/retarget",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "retargetScheduleProperties",
            mapper: __assign({}, RetargetScheduleProperties, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationArtifactSource: ResponseWithContinuationArtifactSource,
        ArtifactSource: ArtifactSource,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ArtifactSourceFragment: ArtifactSourceFragment,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ArtifactSources. */
    var ArtifactSources = /** @class */ (function () {
        /**
         * Create a ArtifactSources.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function ArtifactSources(client) {
            this.client = client;
        }
        ArtifactSources.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        ArtifactSources.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ArtifactSources.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, artifactSource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                artifactSource: artifactSource,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        ArtifactSources.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ArtifactSources.prototype.update = function (resourceGroupName$$1, labName$$1, name$$1, artifactSource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                artifactSource: artifactSource,
                options: options
            }, updateOperationSpec$2, callback);
        };
        ArtifactSources.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ArtifactSources;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "artifactSource",
            mapper: __assign({}, ArtifactSource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ArtifactSource
            },
            201: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "artifactSource",
            mapper: __assign({}, ArtifactSourceFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationArmTemplate: ResponseWithContinuationArmTemplate,
        ArmTemplate: ArmTemplate,
        Resource: Resource,
        BaseResource: BaseResource,
        ParametersValueFileInfo: ParametersValueFileInfo,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ArmTemplates. */
    var ArmTemplates = /** @class */ (function () {
        /**
         * Create a ArmTemplates.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function ArmTemplates(client) {
            this.client = client;
        }
        ArmTemplates.prototype.list = function (resourceGroupName$$1, labName$$1, artifactSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                artifactSourceName: artifactSourceName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        ArmTemplates.prototype.get = function (resourceGroupName$$1, labName$$1, artifactSourceName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                artifactSourceName: artifactSourceName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        ArmTemplates.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return ArmTemplates;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/armtemplates",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            artifactSourceName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationArmTemplate
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/armtemplates/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            artifactSourceName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArmTemplate
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationArmTemplate
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationArtifact: ResponseWithContinuationArtifact,
        Artifact: Artifact,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        GenerateArmTemplateRequest: GenerateArmTemplateRequest,
        ParameterInfo: ParameterInfo,
        ArmTemplateInfo: ArmTemplateInfo,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Artifacts. */
    var Artifacts = /** @class */ (function () {
        /**
         * Create a Artifacts.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Artifacts(client) {
            this.client = client;
        }
        Artifacts.prototype.list = function (resourceGroupName$$1, labName$$1, artifactSourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                artifactSourceName: artifactSourceName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        Artifacts.prototype.get = function (resourceGroupName$$1, labName$$1, artifactSourceName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                artifactSourceName: artifactSourceName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Artifacts.prototype.generateArmTemplate = function (resourceGroupName$$1, labName$$1, artifactSourceName$$1, name$$1, generateArmTemplateRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                artifactSourceName: artifactSourceName$$1,
                name: name$$1,
                generateArmTemplateRequest: generateArmTemplateRequest,
                options: options
            }, generateArmTemplateOperationSpec, callback);
        };
        Artifacts.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return Artifacts;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            artifactSourceName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationArtifact
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            artifactSourceName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Artifact
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var generateArmTemplateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName}/artifacts/{name}/generateArmTemplate",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            artifactSourceName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "generateArmTemplateRequest",
            mapper: __assign({}, GenerateArmTemplateRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ArmTemplateInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationArtifact
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        LabCost: LabCost,
        Resource: Resource,
        BaseResource: BaseResource,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Costs. */
    var Costs = /** @class */ (function () {
        /**
         * Create a Costs.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Costs(client) {
            this.client = client;
        }
        Costs.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        Costs.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, labCost, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                labCost: labCost,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        return Costs;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LabCost
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/costs/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "labCost",
            mapper: __assign({}, LabCost, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LabCost
            },
            201: {
                bodyMapper: LabCost
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationCustomImage: ResponseWithContinuationCustomImage,
        CustomImage: CustomImage,
        Resource: Resource,
        BaseResource: BaseResource,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CustomImages. */
    var CustomImages = /** @class */ (function () {
        /**
         * Create a CustomImages.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function CustomImages(client) {
            this.client = client;
        }
        CustomImages.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        CustomImages.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        /**
         * Create or replace an existing custom image. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the custom image.
         * @param customImage A custom image.
         * @param [options] The optional parameters
         * @returns Promise<Models.CustomImagesCreateOrUpdateResponse>
         */
        CustomImages.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, customImage, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, labName$$1, name$$1, customImage, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete custom image. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the custom image.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CustomImages.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or replace an existing custom image. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the custom image.
         * @param customImage A custom image.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomImages.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, customImage, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                customImage: customImage,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Delete custom image. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the custom image.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomImages.prototype.beginDeleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        CustomImages.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return CustomImages;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationCustomImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "customImage",
            mapper: __assign({}, CustomImage, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CustomImage
            },
            201: {
                bodyMapper: CustomImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/customimages/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationCustomImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationFormula: ResponseWithContinuationFormula,
        Formula: Formula,
        Resource: Resource,
        BaseResource: BaseResource,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        ApplicableSchedule: ApplicableSchedule,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        CloudError: CloudError,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Formulas. */
    var Formulas = /** @class */ (function () {
        /**
         * Create a Formulas.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Formulas(client) {
            this.client = client;
        }
        Formulas.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        Formulas.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Create or replace an existing Formula. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the formula.
         * @param formula A formula for creating a VM, specifying an image base and other parameters
         * @param [options] The optional parameters
         * @returns Promise<Models.FormulasCreateOrUpdateResponse>
         */
        Formulas.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, formula, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, labName$$1, name$$1, formula, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Formulas.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        /**
         * Create or replace an existing Formula. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the formula.
         * @param formula A formula for creating a VM, specifying an image base and other parameters
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Formulas.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, formula, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                formula: formula,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        Formulas.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return Formulas;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationFormula
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Formula
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "formula",
            mapper: __assign({}, Formula, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Formula
            },
            201: {
                bodyMapper: Formula
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationFormula
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationGalleryImage: ResponseWithContinuationGalleryImage,
        GalleryImage: GalleryImage,
        Resource: Resource,
        BaseResource: BaseResource,
        GalleryImageReference: GalleryImageReference,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryImages. */
    var GalleryImages = /** @class */ (function () {
        /**
         * Create a GalleryImages.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function GalleryImages(client) {
            this.client = client;
        }
        GalleryImages.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$6, callback);
        };
        GalleryImages.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return GalleryImages;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/galleryimages",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationGalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationGalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationNotificationChannel: ResponseWithContinuationNotificationChannel,
        NotificationChannel: NotificationChannel,
        Resource: Resource,
        BaseResource: BaseResource,
        Event: Event,
        CloudError: CloudError,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        NotifyParameters: NotifyParameters,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a NotificationChannels. */
    var NotificationChannels = /** @class */ (function () {
        /**
         * Create a NotificationChannels.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function NotificationChannels(client) {
            this.client = client;
        }
        NotificationChannels.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$7, callback);
        };
        NotificationChannels.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        NotificationChannels.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, notificationChannel, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                notificationChannel: notificationChannel,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        NotificationChannels.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        NotificationChannels.prototype.update = function (resourceGroupName$$1, labName$$1, name$$1, notificationChannel, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                notificationChannel: notificationChannel,
                options: options
            }, updateOperationSpec$3, callback);
        };
        NotificationChannels.prototype.notify = function (resourceGroupName$$1, labName$$1, name$$1, notifyParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                notifyParameters: notifyParameters,
                options: options
            }, notifyOperationSpec, callback);
        };
        NotificationChannels.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return NotificationChannels;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationNotificationChannel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationChannel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "notificationChannel",
            mapper: __assign({}, NotificationChannel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NotificationChannel
            },
            201: {
                bodyMapper: NotificationChannel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "notificationChannel",
            mapper: __assign({}, NotificationChannelFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NotificationChannel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var notifyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/notificationchannels/{name}/notify",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "notifyParameters",
            mapper: __assign({}, NotifyParameters, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationNotificationChannel
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        EvaluatePoliciesRequest: EvaluatePoliciesRequest,
        EvaluatePoliciesProperties: EvaluatePoliciesProperties,
        EvaluatePoliciesResponse: EvaluatePoliciesResponse,
        PolicySetResult: PolicySetResult,
        PolicyViolation: PolicyViolation,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PolicySets. */
    var PolicySets = /** @class */ (function () {
        /**
         * Create a PolicySets.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function PolicySets(client) {
            this.client = client;
        }
        PolicySets.prototype.evaluatePolicies = function (resourceGroupName$$1, labName$$1, name$$1, evaluatePoliciesRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                evaluatePoliciesRequest: evaluatePoliciesRequest,
                options: options
            }, evaluatePoliciesOperationSpec, callback);
        };
        return PolicySets;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var evaluatePoliciesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{name}/evaluatePolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "evaluatePoliciesRequest",
            mapper: __assign({}, EvaluatePoliciesRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EvaluatePoliciesResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationPolicy: ResponseWithContinuationPolicy,
        Policy: Policy,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        PolicyFragment: PolicyFragment,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Policies. */
    var Policies = /** @class */ (function () {
        /**
         * Create a Policies.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Policies(client) {
            this.client = client;
        }
        Policies.prototype.list = function (resourceGroupName$$1, labName$$1, policySetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                policySetName: policySetName$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        Policies.prototype.get = function (resourceGroupName$$1, labName$$1, policySetName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                policySetName: policySetName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        Policies.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, policySetName$$1, name$$1, policy, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                policySetName: policySetName$$1,
                name: name$$1,
                policy: policy,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        Policies.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, policySetName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                policySetName: policySetName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Policies.prototype.update = function (resourceGroupName$$1, labName$$1, policySetName$$1, name$$1, policy, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                policySetName: policySetName$$1,
                name: name$$1,
                policy: policy,
                options: options
            }, updateOperationSpec$4, callback);
        };
        Policies.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        return Policies;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            policySetName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            policySetName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Policy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            policySetName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "policy",
            mapper: __assign({}, Policy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Policy
            },
            201: {
                bodyMapper: Policy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            policySetName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/policysets/{policySetName}/policies/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            policySetName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "policy",
            mapper: __assign({}, PolicyFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Policy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationSchedule: ResponseWithContinuationSchedule,
        Schedule: Schedule,
        Resource: Resource,
        BaseResource: BaseResource,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        CloudError: CloudError,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableSchedule: ApplicableSchedule,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Schedules. */
    var Schedules = /** @class */ (function () {
        /**
         * Create a Schedules.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Schedules(client) {
            this.client = client;
        }
        Schedules.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$9, callback);
        };
        Schedules.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        Schedules.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, schedule, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                schedule: schedule,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        Schedules.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        Schedules.prototype.update = function (resourceGroupName$$1, labName$$1, name$$1, schedule, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                schedule: schedule,
                options: options
            }, updateOperationSpec$5, callback);
        };
        /**
         * Execute a schedule. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Schedules.prototype.execute = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginExecute(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Schedules.prototype.listApplicable = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, listApplicableOperationSpec, callback);
        };
        /**
         * Execute a schedule. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Schedules.prototype.beginExecute = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginExecuteOperationSpec$1, options);
        };
        Schedules.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        Schedules.prototype.listApplicableNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listApplicableNextOperationSpec, callback);
        };
        return Schedules;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schedule",
            mapper: __assign({}, Schedule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            201: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schedule",
            mapper: __assign({}, ScheduleFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listApplicableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}/listApplicable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var beginExecuteOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/schedules/{name}/execute",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listApplicableNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationServiceRunner: ResponseWithContinuationServiceRunner,
        ServiceRunner: ServiceRunner,
        Resource: Resource,
        BaseResource: BaseResource,
        IdentityProperties: IdentityProperties,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceRunners. */
    var ServiceRunners = /** @class */ (function () {
        /**
         * Create a ServiceRunners.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function ServiceRunners(client) {
            this.client = client;
        }
        ServiceRunners.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$a, callback);
        };
        ServiceRunners.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        ServiceRunners.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, serviceRunner, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                serviceRunner: serviceRunner,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        ServiceRunners.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        ServiceRunners.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return ServiceRunners;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationServiceRunner
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceRunner
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceRunner",
            mapper: __assign({}, ServiceRunner, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServiceRunner
            },
            201: {
                bodyMapper: ServiceRunner
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/servicerunners/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationServiceRunner
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationUser: ResponseWithContinuationUser,
        User: User,
        Resource: Resource,
        BaseResource: BaseResource,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        CloudError: CloudError,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Users. */
    var Users = /** @class */ (function () {
        /**
         * Create a Users.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Users(client) {
            this.client = client;
        }
        Users.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$b, callback);
        };
        Users.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        Users.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, user, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                user: user,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        /**
         * Delete user profile. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the user profile.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Users.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Users.prototype.update = function (resourceGroupName$$1, labName$$1, name$$1, user, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                user: user,
                options: options
            }, updateOperationSpec$6, callback);
        };
        /**
         * Delete user profile. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the user profile.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Users.prototype.beginDeleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        Users.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        return Users;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationUser
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "user",
            mapper: __assign({}, User, { required: true })
        },
        responses: {
            200: {
                bodyMapper: User
            },
            201: {
                bodyMapper: User
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "user",
            mapper: __assign({}, UserFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationUser
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationDisk: ResponseWithContinuationDisk,
        Disk: Disk,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        AttachDiskProperties: AttachDiskProperties,
        DetachDiskProperties: DetachDiskProperties,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Disks. */
    var Disks = /** @class */ (function () {
        /**
         * Create a Disks.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Disks(client) {
            this.client = client;
        }
        Disks.prototype.list = function (resourceGroupName$$1, labName$$1, userName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                options: options
            }, listOperationSpec$c, callback);
        };
        Disks.prototype.get = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        /**
         * Create or replace an existing disk. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param disk A Disk.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksCreateOrUpdateResponse>
         */
        Disks.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, disk, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, labName$$1, userName$$1, name$$1, disk, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete disk. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, labName$$1, userName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Attach and create the lease of the disk to the virtual machine. This operation can take a while
         * to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param attachDiskProperties Properties of the disk to attach.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.attach = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, attachDiskProperties, options) {
            return this.beginAttach(resourceGroupName$$1, labName$$1, userName$$1, name$$1, attachDiskProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Detach and break the lease of the disk attached to the virtual machine. This operation can take
         * a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param detachDiskProperties Properties of the disk to detach.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.detach = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, detachDiskProperties, options) {
            return this.beginDetach(resourceGroupName$$1, labName$$1, userName$$1, name$$1, detachDiskProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or replace an existing disk. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param disk A Disk.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, disk, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                disk: disk,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Delete disk. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginDeleteMethod = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * Attach and create the lease of the disk to the virtual machine. This operation can take a while
         * to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param attachDiskProperties Properties of the disk to attach.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginAttach = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, attachDiskProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                attachDiskProperties: attachDiskProperties,
                options: options
            }, beginAttachOperationSpec, options);
        };
        /**
         * Detach and break the lease of the disk attached to the virtual machine. This operation can take
         * a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the disk.
         * @param detachDiskProperties Properties of the disk to detach.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginDetach = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, detachDiskProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                detachDiskProperties: detachDiskProperties,
                options: options
            }, beginDetachOperationSpec, options);
        };
        Disks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$c, callback);
        };
        return Disks;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationDisk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "disk",
            mapper: __assign({}, Disk, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Disk
            },
            201: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginAttachOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}/attach",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "attachDiskProperties",
            mapper: __assign({}, AttachDiskProperties, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginDetachOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/disks/{name}/detach",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "detachDiskProperties",
            mapper: __assign({}, DetachDiskProperties, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationDisk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationDtlEnvironment: ResponseWithContinuationDtlEnvironment,
        DtlEnvironment: DtlEnvironment,
        Resource: Resource,
        BaseResource: BaseResource,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Environments. */
    var Environments = /** @class */ (function () {
        /**
         * Create a Environments.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Environments(client) {
            this.client = client;
        }
        Environments.prototype.list = function (resourceGroupName$$1, labName$$1, userName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                options: options
            }, listOperationSpec$d, callback);
        };
        Environments.prototype.get = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        /**
         * Create or replace an existing environment. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the environment.
         * @param dtlEnvironment An environment, which is essentially an ARM template deployment.
         * @param [options] The optional parameters
         * @returns Promise<Models.EnvironmentsCreateOrUpdateResponse>
         */
        Environments.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, dtlEnvironment, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, labName$$1, userName$$1, name$$1, dtlEnvironment, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete environment. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the environment.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Environments.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, labName$$1, userName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or replace an existing environment. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the environment.
         * @param dtlEnvironment An environment, which is essentially an ARM template deployment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Environments.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, dtlEnvironment, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                dtlEnvironment: dtlEnvironment,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Delete environment. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param userName The name of the user profile.
         * @param name The name of the environment.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Environments.prototype.beginDeleteMethod = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        Environments.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$d, callback);
        };
        return Environments;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationDtlEnvironment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DtlEnvironment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "dtlEnvironment",
            mapper: __assign({}, DtlEnvironment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DtlEnvironment
            },
            201: {
                bodyMapper: DtlEnvironment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/environments/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listNextOperationSpec$d = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationDtlEnvironment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationSecret: ResponseWithContinuationSecret,
        Secret: Secret,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Secrets. */
    var Secrets = /** @class */ (function () {
        /**
         * Create a Secrets.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function Secrets(client) {
            this.client = client;
        }
        Secrets.prototype.list = function (resourceGroupName$$1, labName$$1, userName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                options: options
            }, listOperationSpec$e, callback);
        };
        Secrets.prototype.get = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$g, callback);
        };
        Secrets.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, secret, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                secret: secret,
                options: options
            }, createOrUpdateOperationSpec$8, callback);
        };
        Secrets.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, userName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                userName: userName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        Secrets.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$e, callback);
        };
        return Secrets;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSecret
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Secret
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var createOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "secret",
            mapper: __assign({}, Secret, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Secret
            },
            201: {
                bodyMapper: Secret
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{userName}/secrets/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            userName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listNextOperationSpec$e = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSecret
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationLabVirtualMachine: ResponseWithContinuationLabVirtualMachine,
        LabVirtualMachine: LabVirtualMachine,
        Resource: Resource,
        BaseResource: BaseResource,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        ApplicableSchedule: ApplicableSchedule,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        CloudError: CloudError,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        DataDiskProperties: DataDiskProperties,
        AttachNewDataDiskOptions: AttachNewDataDiskOptions,
        ApplyArtifactsRequest: ApplyArtifactsRequest,
        DetachDataDiskProperties: DetachDataDiskProperties,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachines. */
    var VirtualMachines = /** @class */ (function () {
        /**
         * Create a VirtualMachines.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function VirtualMachines(client) {
            this.client = client;
        }
        VirtualMachines.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$f, callback);
        };
        VirtualMachines.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$h, callback);
        };
        /**
         * Create or replace an existing Virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param labVirtualMachine A virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesCreateOrUpdateResponse>
         */
        VirtualMachines.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, labVirtualMachine, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, labName$$1, name$$1, labVirtualMachine, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.update = function (resourceGroupName$$1, labName$$1, name$$1, labVirtualMachine, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                labVirtualMachine: labVirtualMachine,
                options: options
            }, updateOperationSpec$7, callback);
        };
        /**
         * Attach a new or existing data disk to virtual machine. This operation can take a while to
         * complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param dataDiskProperties Request body for adding a new or existing data disk to a virtual
         * machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.addDataDisk = function (resourceGroupName$$1, labName$$1, name$$1, dataDiskProperties, options) {
            return this.beginAddDataDisk(resourceGroupName$$1, labName$$1, name$$1, dataDiskProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Apply artifacts to virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param applyArtifactsRequest Request body for applying artifacts to a virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.applyArtifacts = function (resourceGroupName$$1, labName$$1, name$$1, applyArtifactsRequest, options) {
            return this.beginApplyArtifacts(resourceGroupName$$1, labName$$1, name$$1, applyArtifactsRequest, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Take ownership of an existing virtual machine This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.claim = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginClaim(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Detach the specified disk from the virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param detachDataDiskProperties Request body for detaching data disk from a virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.detachDataDisk = function (resourceGroupName$$1, labName$$1, name$$1, detachDataDiskProperties, options) {
            return this.beginDetachDataDisk(resourceGroupName$$1, labName$$1, name$$1, detachDataDiskProperties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.listApplicableSchedules = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, listApplicableSchedulesOperationSpec, callback);
        };
        /**
         * Start a virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.start = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginStart(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stop a virtual machine This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.stop = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginStop(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or replace an existing Virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param labVirtualMachine A virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, labVirtualMachine, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                labVirtualMachine: labVirtualMachine,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Delete virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginDeleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Attach a new or existing data disk to virtual machine. This operation can take a while to
         * complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param dataDiskProperties Request body for adding a new or existing data disk to a virtual
         * machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginAddDataDisk = function (resourceGroupName$$1, labName$$1, name$$1, dataDiskProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                dataDiskProperties: dataDiskProperties,
                options: options
            }, beginAddDataDiskOperationSpec, options);
        };
        /**
         * Apply artifacts to virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param applyArtifactsRequest Request body for applying artifacts to a virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginApplyArtifacts = function (resourceGroupName$$1, labName$$1, name$$1, applyArtifactsRequest, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                applyArtifactsRequest: applyArtifactsRequest,
                options: options
            }, beginApplyArtifactsOperationSpec, options);
        };
        /**
         * Take ownership of an existing virtual machine This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginClaim = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginClaimOperationSpec, options);
        };
        /**
         * Detach the specified disk from the virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param detachDataDiskProperties Request body for detaching data disk from a virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginDetachDataDisk = function (resourceGroupName$$1, labName$$1, name$$1, detachDataDiskProperties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                detachDataDiskProperties: detachDataDiskProperties,
                options: options
            }, beginDetachDataDiskOperationSpec, options);
        };
        /**
         * Start a virtual machine. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginStart = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stop a virtual machine This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginStop = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginStopOperationSpec, options);
        };
        VirtualMachines.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$f, callback);
        };
        return VirtualMachines;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLabVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LabVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var updateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "labVirtualMachine",
            mapper: __assign({}, LabVirtualMachineFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LabVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var listApplicableSchedulesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/listApplicableSchedules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicableSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "labVirtualMachine",
            mapper: __assign({}, LabVirtualMachine, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LabVirtualMachine
            },
            201: {
                bodyMapper: LabVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginAddDataDiskOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/addDataDisk",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "dataDiskProperties",
            mapper: __assign({}, DataDiskProperties, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginApplyArtifactsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/applyArtifacts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "applyArtifactsRequest",
            mapper: __assign({}, ApplyArtifactsRequest, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginClaimOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/claim",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginDetachDataDiskOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/detachDataDisk",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "detachDataDiskProperties",
            mapper: __assign({}, DetachDataDiskProperties, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var listNextOperationSpec$f = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationLabVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationSchedule: ResponseWithContinuationSchedule,
        Schedule: Schedule,
        Resource: Resource,
        BaseResource: BaseResource,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        CloudError: CloudError,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableSchedule: ApplicableSchedule,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment,
        VirtualNetwork: VirtualNetwork,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineSchedules. */
    var VirtualMachineSchedules = /** @class */ (function () {
        /**
         * Create a VirtualMachineSchedules.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function VirtualMachineSchedules(client) {
            this.client = client;
        }
        VirtualMachineSchedules.prototype.list = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                virtualMachineName: virtualMachineName$$1,
                options: options
            }, listOperationSpec$g, callback);
        };
        VirtualMachineSchedules.prototype.get = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                virtualMachineName: virtualMachineName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$i, callback);
        };
        VirtualMachineSchedules.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, schedule, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                virtualMachineName: virtualMachineName$$1,
                name: name$$1,
                schedule: schedule,
                options: options
            }, createOrUpdateOperationSpec$9, callback);
        };
        VirtualMachineSchedules.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                virtualMachineName: virtualMachineName$$1,
                name: name$$1,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        VirtualMachineSchedules.prototype.update = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, schedule, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                virtualMachineName: virtualMachineName$$1,
                name: name$$1,
                schedule: schedule,
                options: options
            }, updateOperationSpec$8, callback);
        };
        /**
         * Execute a schedule. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param virtualMachineName The name of the virtual machine.
         * @param name The name of the schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineSchedules.prototype.execute = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, options) {
            return this.beginExecute(resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Execute a schedule. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param virtualMachineName The name of the virtual machine.
         * @param name The name of the schedule.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineSchedules.prototype.beginExecute = function (resourceGroupName$$1, labName$$1, virtualMachineName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                virtualMachineName: virtualMachineName$$1,
                name: name$$1,
                options: options
            }, beginExecuteOperationSpec$2, options);
        };
        VirtualMachineSchedules.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$g, callback);
        };
        return VirtualMachineSchedules;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var listOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            virtualMachineName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var getOperationSpec$i = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            virtualMachineName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var createOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            virtualMachineName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schedule",
            mapper: __assign({}, Schedule, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            201: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            virtualMachineName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var updateOperationSpec$8 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            virtualMachineName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schedule",
            mapper: __assign({}, ScheduleFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Schedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginExecuteOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{virtualMachineName}/schedules/{name}/execute",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            virtualMachineName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var listNextOperationSpec$g = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$m = /*#__PURE__*/Object.freeze({
        ResponseWithContinuationVirtualNetwork: ResponseWithContinuationVirtualNetwork,
        VirtualNetwork: VirtualNetwork,
        Resource: Resource,
        BaseResource: BaseResource,
        Subnet: Subnet,
        ExternalSubnet: ExternalSubnet,
        SubnetOverride: SubnetOverride,
        SubnetSharedPublicIpAddressConfiguration: SubnetSharedPublicIpAddressConfiguration,
        Port: Port,
        CloudError: CloudError,
        VirtualNetworkFragment: VirtualNetworkFragment,
        SubnetFragment: SubnetFragment,
        ExternalSubnetFragment: ExternalSubnetFragment,
        SubnetOverrideFragment: SubnetOverrideFragment,
        SubnetSharedPublicIpAddressConfigurationFragment: SubnetSharedPublicIpAddressConfigurationFragment,
        PortFragment: PortFragment,
        Schedule: Schedule,
        WeekDetails: WeekDetails,
        DayDetails: DayDetails,
        HourDetails: HourDetails,
        NotificationSettings: NotificationSettings,
        ApplicableSchedule: ApplicableSchedule,
        ScheduleFragment: ScheduleFragment,
        WeekDetailsFragment: WeekDetailsFragment,
        DayDetailsFragment: DayDetailsFragment,
        HourDetailsFragment: HourDetailsFragment,
        NotificationSettingsFragment: NotificationSettingsFragment,
        ApplicableScheduleFragment: ApplicableScheduleFragment,
        ArmTemplate: ArmTemplate,
        ParametersValueFileInfo: ParametersValueFileInfo,
        Artifact: Artifact,
        ArtifactSource: ArtifactSource,
        ArtifactSourceFragment: ArtifactSourceFragment,
        CustomImage: CustomImage,
        CustomImagePropertiesFromVm: CustomImagePropertiesFromVm,
        WindowsOsInfo: WindowsOsInfo,
        LinuxOsInfo: LinuxOsInfo,
        CustomImagePropertiesCustom: CustomImagePropertiesCustom,
        Disk: Disk,
        DtlEnvironment: DtlEnvironment,
        EnvironmentDeploymentProperties: EnvironmentDeploymentProperties,
        ArmTemplateParameterProperties: ArmTemplateParameterProperties,
        Formula: Formula,
        LabVirtualMachineCreationParameter: LabVirtualMachineCreationParameter,
        BulkCreationParameters: BulkCreationParameters,
        ArtifactInstallProperties: ArtifactInstallProperties,
        ArtifactParameterProperties: ArtifactParameterProperties,
        ArtifactDeploymentStatusProperties: ArtifactDeploymentStatusProperties,
        GalleryImageReference: GalleryImageReference,
        ComputeVmProperties: ComputeVmProperties,
        ComputeVmInstanceViewStatus: ComputeVmInstanceViewStatus,
        ComputeDataDisk: ComputeDataDisk,
        NetworkInterfaceProperties: NetworkInterfaceProperties,
        SharedPublicIpAddressConfiguration: SharedPublicIpAddressConfiguration,
        InboundNatRule: InboundNatRule,
        FormulaPropertiesFromVm: FormulaPropertiesFromVm,
        GalleryImage: GalleryImage,
        Lab: Lab,
        LabCost: LabCost,
        TargetCostProperties: TargetCostProperties,
        CostThresholdProperties: CostThresholdProperties,
        PercentageCostThresholdProperties: PercentageCostThresholdProperties,
        LabCostSummaryProperties: LabCostSummaryProperties,
        LabCostDetailsProperties: LabCostDetailsProperties,
        LabResourceCostProperties: LabResourceCostProperties,
        LabFragment: LabFragment,
        LabVirtualMachine: LabVirtualMachine,
        LabVirtualMachineFragment: LabVirtualMachineFragment,
        ArtifactInstallPropertiesFragment: ArtifactInstallPropertiesFragment,
        ArtifactParameterPropertiesFragment: ArtifactParameterPropertiesFragment,
        ArtifactDeploymentStatusPropertiesFragment: ArtifactDeploymentStatusPropertiesFragment,
        GalleryImageReferenceFragment: GalleryImageReferenceFragment,
        ComputeVmPropertiesFragment: ComputeVmPropertiesFragment,
        ComputeVmInstanceViewStatusFragment: ComputeVmInstanceViewStatusFragment,
        ComputeDataDiskFragment: ComputeDataDiskFragment,
        NetworkInterfacePropertiesFragment: NetworkInterfacePropertiesFragment,
        SharedPublicIpAddressConfigurationFragment: SharedPublicIpAddressConfigurationFragment,
        InboundNatRuleFragment: InboundNatRuleFragment,
        NotificationChannel: NotificationChannel,
        Event: Event,
        NotificationChannelFragment: NotificationChannelFragment,
        EventFragment: EventFragment,
        Policy: Policy,
        PolicyFragment: PolicyFragment,
        Secret: Secret,
        ServiceRunner: ServiceRunner,
        IdentityProperties: IdentityProperties,
        User: User,
        UserIdentity: UserIdentity,
        UserSecretStore: UserSecretStore,
        UserFragment: UserFragment,
        UserIdentityFragment: UserIdentityFragment,
        UserSecretStoreFragment: UserSecretStoreFragment
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworks. */
    var VirtualNetworks = /** @class */ (function () {
        /**
         * Create a VirtualNetworks.
         * @param {DevTestLabsClientContext} client Reference to the service client.
         */
        function VirtualNetworks(client) {
            this.client = client;
        }
        VirtualNetworks.prototype.list = function (resourceGroupName$$1, labName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                options: options
            }, listOperationSpec$h, callback);
        };
        VirtualNetworks.prototype.get = function (resourceGroupName$$1, labName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, getOperationSpec$j, callback);
        };
        /**
         * Create or replace an existing virtual network. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual network.
         * @param virtualNetwork A virtual network.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualNetworksCreateOrUpdateResponse>
         */
        VirtualNetworks.prototype.createOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, virtualNetwork, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, labName$$1, name$$1, virtualNetwork, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete virtual network. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual network.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualNetworks.prototype.deleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, labName$$1, name$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualNetworks.prototype.update = function (resourceGroupName$$1, labName$$1, name$$1, virtualNetwork, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                virtualNetwork: virtualNetwork,
                options: options
            }, updateOperationSpec$9, callback);
        };
        /**
         * Create or replace an existing virtual network. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual network.
         * @param virtualNetwork A virtual network.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworks.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, labName$$1, name$$1, virtualNetwork, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                virtualNetwork: virtualNetwork,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Delete virtual network. This operation can take a while to complete.
         * @param resourceGroupName The name of the resource group.
         * @param labName The name of the lab.
         * @param name The name of the virtual network.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualNetworks.prototype.beginDeleteMethod = function (resourceGroupName$$1, labName$$1, name$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                labName: labName$$1,
                name: name$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        VirtualNetworks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$h, callback);
        };
        return VirtualNetworks;
    }());
    // Operation Specifications
    var serializer$m = new msRest.Serializer(Mappers$m);
    var listOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName
        ],
        queryParameters: [
            expand,
            filter,
            top,
            orderby,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationVirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var getOperationSpec$j = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var updateOperationSpec$9 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "virtualNetwork",
            mapper: __assign({}, VirtualNetworkFragment, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "virtualNetwork",
            mapper: __assign({}, VirtualNetwork, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetwork
            },
            201: {
                bodyMapper: VirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualnetworks/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            labName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };
    var listNextOperationSpec$h = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResponseWithContinuationVirtualNetwork
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$m
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-devtestlabs";
    var packageVersion = "1.0.0";
    var DevTestLabsClientContext = /** @class */ (function (_super) {
        __extends(DevTestLabsClientContext, _super);
        /**
         * Initializes a new instance of the DevTestLabsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription ID.
         * @param [options] The parameter options
         */
        function DevTestLabsClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-05-15';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DevTestLabsClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DevTestLabsClient = /** @class */ (function (_super) {
        __extends(DevTestLabsClient, _super);
        /**
         * Initializes a new instance of the DevTestLabsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription ID.
         * @param [options] The parameter options
         */
        function DevTestLabsClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.providerOperations = new ProviderOperations(_this);
            _this.labs = new Labs(_this);
            _this.operations = new Operations(_this);
            _this.globalSchedules = new GlobalSchedules(_this);
            _this.artifactSources = new ArtifactSources(_this);
            _this.armTemplates = new ArmTemplates(_this);
            _this.artifacts = new Artifacts(_this);
            _this.costs = new Costs(_this);
            _this.customImages = new CustomImages(_this);
            _this.formulas = new Formulas(_this);
            _this.galleryImages = new GalleryImages(_this);
            _this.notificationChannels = new NotificationChannels(_this);
            _this.policySets = new PolicySets(_this);
            _this.policies = new Policies(_this);
            _this.schedules = new Schedules(_this);
            _this.serviceRunners = new ServiceRunners(_this);
            _this.users = new Users(_this);
            _this.disks = new Disks(_this);
            _this.environments = new Environments(_this);
            _this.secrets = new Secrets(_this);
            _this.virtualMachines = new VirtualMachines(_this);
            _this.virtualMachineSchedules = new VirtualMachineSchedules(_this);
            _this.virtualNetworks = new VirtualNetworks(_this);
            return _this;
        }
        return DevTestLabsClient;
    }(DevTestLabsClientContext));

    exports.DevTestLabsClient = DevTestLabsClient;
    exports.DevTestLabsClientContext = DevTestLabsClientContext;
    exports.DevTestLabsModels = index;
    exports.DevTestLabsMappers = mappers;
    exports.ProviderOperations = ProviderOperations;
    exports.Labs = Labs;
    exports.Operations = Operations;
    exports.GlobalSchedules = GlobalSchedules;
    exports.ArtifactSources = ArtifactSources;
    exports.ArmTemplates = ArmTemplates;
    exports.Artifacts = Artifacts;
    exports.Costs = Costs;
    exports.CustomImages = CustomImages;
    exports.Formulas = Formulas;
    exports.GalleryImages = GalleryImages;
    exports.NotificationChannels = NotificationChannels;
    exports.PolicySets = PolicySets;
    exports.Policies = Policies;
    exports.Schedules = Schedules;
    exports.ServiceRunners = ServiceRunners;
    exports.Users = Users;
    exports.Disks = Disks;
    exports.Environments = Environments;
    exports.Secrets = Secrets;
    exports.VirtualMachines = VirtualMachines;
    exports.VirtualMachineSchedules = VirtualMachineSchedules;
    exports.VirtualNetworks = VirtualNetworks;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-devtestlabs.js.map
