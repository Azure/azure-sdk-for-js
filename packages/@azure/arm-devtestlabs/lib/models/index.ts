/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing WeekDetails.
 * Properties of a weekly schedule.
 *
 */
export interface WeekDetails {
  /**
   * @member {string[]} [weekdays] The days of the week for which the schedule
   * is set (e.g. Sunday, Monday, Tuesday, etc.).
   */
  weekdays?: string[];
  /**
   * @member {string} [time] The time of the day the schedule will occur.
   */
  time?: string;
}

/**
 * @interface
 * An interface representing DayDetails.
 * Properties of a daily schedule.
 *
 */
export interface DayDetails {
  /**
   * @member {string} [time] The time of day the schedule will occur.
   */
  time?: string;
}

/**
 * @interface
 * An interface representing HourDetails.
 * Properties of an hourly schedule.
 *
 */
export interface HourDetails {
  /**
   * @member {number} [minute] Minutes of the hour the schedule will run.
   */
  minute?: number;
}

/**
 * @interface
 * An interface representing NotificationSettings.
 * Notification settings for a schedule.
 *
 */
export interface NotificationSettings {
  /**
   * @member {EnableStatus} [status] If notifications are enabled for this
   * schedule (i.e. Enabled, Disabled). Possible values include: 'Enabled',
   * 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {number} [timeInMinutes] Time in minutes before event at which
   * notification will be sent.
   */
  timeInMinutes?: number;
  /**
   * @member {string} [webhookUrl] The webhook URL to which the notification
   * will be sent.
   */
  webhookUrl?: string;
  /**
   * @member {string} [emailRecipient] The email recipient to send
   * notifications to (can be a list of semi-colon seperated email addresses).
   */
  emailRecipient?: string;
  /**
   * @member {string} [notificationLocale] The locale to use when sending a
   * notification (fallback for unsupported languages is EN).
   */
  notificationLocale?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * An Azure resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The identifier of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] The location of the resource.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Schedule.
 * A schedule.
 *
 * @extends Resource
 */
export interface Schedule extends Resource {
  /**
   * @member {EnableStatus} [status] The status of the schedule (i.e. Enabled,
   * Disabled). Possible values include: 'Enabled', 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {string} [taskType] The task type of the schedule (e.g.
   * LabVmsShutdownTask, LabVmAutoStart).
   */
  taskType?: string;
  /**
   * @member {WeekDetails} [weeklyRecurrence] If the schedule will occur only
   * some days of the week, specify the weekly recurrence.
   */
  weeklyRecurrence?: WeekDetails;
  /**
   * @member {DayDetails} [dailyRecurrence] If the schedule will occur once
   * each day of the week, specify the daily recurrence.
   */
  dailyRecurrence?: DayDetails;
  /**
   * @member {HourDetails} [hourlyRecurrence] If the schedule will occur
   * multiple times a day, specify the hourly recurrence.
   */
  hourlyRecurrence?: HourDetails;
  /**
   * @member {string} [timeZoneId] The time zone ID (e.g. Pacific Standard
   * time).
   */
  timeZoneId?: string;
  /**
   * @member {NotificationSettings} [notificationSettings] Notification
   * settings.
   */
  notificationSettings?: NotificationSettings;
  /**
   * @member {Date} [createdDate] The creation date of the schedule.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [targetResourceId] The resource ID to which the schedule
   * belongs
   */
  targetResourceId?: string;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing ApplicableSchedule.
 * Schedules applicable to a virtual machine. The schedules may have been
 * defined on a VM or on lab level.
 *
 * @extends Resource
 */
export interface ApplicableSchedule extends Resource {
  /**
   * @member {Schedule} [labVmsShutdown] The auto-shutdown schedule, if one has
   * been set at the lab or lab resource level.
   */
  labVmsShutdown?: Schedule;
  /**
   * @member {Schedule} [labVmsStartup] The auto-startup schedule, if one has
   * been set at the lab or lab resource level.
   */
  labVmsStartup?: Schedule;
}

/**
 * @interface
 * An interface representing WeekDetailsFragment.
 * Properties of a weekly schedule.
 *
 */
export interface WeekDetailsFragment {
  /**
   * @member {string[]} [weekdays] The days of the week for which the schedule
   * is set (e.g. Sunday, Monday, Tuesday, etc.).
   */
  weekdays?: string[];
  /**
   * @member {string} [time] The time of the day the schedule will occur.
   */
  time?: string;
}

/**
 * @interface
 * An interface representing DayDetailsFragment.
 * Properties of a daily schedule.
 *
 */
export interface DayDetailsFragment {
  /**
   * @member {string} [time] The time of day the schedule will occur.
   */
  time?: string;
}

/**
 * @interface
 * An interface representing HourDetailsFragment.
 * Properties of an hourly schedule.
 *
 */
export interface HourDetailsFragment {
  /**
   * @member {number} [minute] Minutes of the hour the schedule will run.
   */
  minute?: number;
}

/**
 * @interface
 * An interface representing NotificationSettingsFragment.
 * Notification settings for a schedule.
 *
 */
export interface NotificationSettingsFragment {
  /**
   * @member {EnableStatus} [status] If notifications are enabled for this
   * schedule (i.e. Enabled, Disabled). Possible values include: 'Enabled',
   * 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {number} [timeInMinutes] Time in minutes before event at which
   * notification will be sent.
   */
  timeInMinutes?: number;
  /**
   * @member {string} [webhookUrl] The webhook URL to which the notification
   * will be sent.
   */
  webhookUrl?: string;
  /**
   * @member {string} [emailRecipient] The email recipient to send
   * notifications to (can be a list of semi-colon seperated email addresses).
   */
  emailRecipient?: string;
  /**
   * @member {string} [notificationLocale] The locale to use when sending a
   * notification (fallback for unsupported languages is EN).
   */
  notificationLocale?: string;
}

/**
 * @interface
 * An interface representing UpdateResource.
 * Represents an update resource
 *
 */
export interface UpdateResource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ScheduleFragment.
 * A schedule.
 *
 * @extends UpdateResource
 */
export interface ScheduleFragment extends UpdateResource {
  /**
   * @member {EnableStatus} [status] The status of the schedule (i.e. Enabled,
   * Disabled). Possible values include: 'Enabled', 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {string} [taskType] The task type of the schedule (e.g.
   * LabVmsShutdownTask, LabVmAutoStart).
   */
  taskType?: string;
  /**
   * @member {WeekDetailsFragment} [weeklyRecurrence] If the schedule will
   * occur only some days of the week, specify the weekly recurrence.
   */
  weeklyRecurrence?: WeekDetailsFragment;
  /**
   * @member {DayDetailsFragment} [dailyRecurrence] If the schedule will occur
   * once each day of the week, specify the daily recurrence.
   */
  dailyRecurrence?: DayDetailsFragment;
  /**
   * @member {HourDetailsFragment} [hourlyRecurrence] If the schedule will
   * occur multiple times a day, specify the hourly recurrence.
   */
  hourlyRecurrence?: HourDetailsFragment;
  /**
   * @member {string} [timeZoneId] The time zone ID (e.g. Pacific Standard
   * time).
   */
  timeZoneId?: string;
  /**
   * @member {NotificationSettingsFragment} [notificationSettings] Notification
   * settings.
   */
  notificationSettings?: NotificationSettingsFragment;
  /**
   * @member {string} [targetResourceId] The resource ID to which the schedule
   * belongs
   */
  targetResourceId?: string;
}

/**
 * @interface
 * An interface representing ApplicableScheduleFragment.
 * Schedules applicable to a virtual machine. The schedules may have been
 * defined on a VM or on lab level.
 *
 * @extends UpdateResource
 */
export interface ApplicableScheduleFragment extends UpdateResource {
  /**
   * @member {ScheduleFragment} [labVmsShutdown] The auto-shutdown schedule, if
   * one has been set at the lab or lab resource level.
   */
  labVmsShutdown?: ScheduleFragment;
  /**
   * @member {ScheduleFragment} [labVmsStartup] The auto-startup schedule, if
   * one has been set at the lab or lab resource level.
   */
  labVmsStartup?: ScheduleFragment;
}

/**
 * @interface
 * An interface representing ArtifactParameterProperties.
 * Properties of an artifact parameter.
 *
 */
export interface ArtifactParameterProperties {
  /**
   * @member {string} [name] The name of the artifact parameter.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the artifact parameter.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing ArtifactInstallProperties.
 * Properties of an artifact.
 *
 */
export interface ArtifactInstallProperties {
  /**
   * @member {string} [artifactId] The artifact's identifier.
   */
  artifactId?: string;
  /**
   * @member {string} [artifactTitle] The artifact's title.
   */
  artifactTitle?: string;
  /**
   * @member {ArtifactParameterProperties[]} [parameters] The parameters of the
   * artifact.
   */
  parameters?: ArtifactParameterProperties[];
  /**
   * @member {string} [status] The status of the artifact.
   */
  status?: string;
  /**
   * @member {string} [deploymentStatusMessage] The status message from the
   * deployment.
   */
  deploymentStatusMessage?: string;
  /**
   * @member {string} [vmExtensionStatusMessage] The status message from the
   * virtual machine extension.
   */
  vmExtensionStatusMessage?: string;
  /**
   * @member {Date} [installTime] The time that the artifact starts to install
   * on the virtual machine.
   */
  installTime?: Date;
}

/**
 * @interface
 * An interface representing ApplyArtifactsRequest.
 * Request body for applying artifacts to a virtual machine.
 *
 */
export interface ApplyArtifactsRequest {
  /**
   * @member {ArtifactInstallProperties[]} [artifacts] The list of artifacts to
   * apply.
   */
  artifacts?: ArtifactInstallProperties[];
}

/**
 * @interface
 * An interface representing ParametersValueFileInfo.
 * A file containing a set of parameter values for an ARM template.
 *
 */
export interface ParametersValueFileInfo {
  /**
   * @member {string} [fileName] File name.
   */
  fileName?: string;
  /**
   * @member {any} [parametersValueInfo] Contents of the file.
   */
  parametersValueInfo?: any;
}

/**
 * @interface
 * An interface representing ArmTemplate.
 * An Azure Resource Manager template.
 *
 * @extends Resource
 */
export interface ArmTemplate extends Resource {
  /**
   * @member {string} [displayName] The display name of the ARM template.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly displayName?: string;
  /**
   * @member {string} [description] The description of the ARM template.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly description?: string;
  /**
   * @member {string} [publisher] The publisher of the ARM template.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publisher?: string;
  /**
   * @member {string} [icon] The URI to the icon of the ARM template.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly icon?: string;
  /**
   * @member {any} [contents] The contents of the ARM template.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly contents?: any;
  /**
   * @member {Date} [createdDate] The creation date of the armTemplate.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {ParametersValueFileInfo[]} [parametersValueFilesInfo] File name
   * and parameter values information from all azuredeploy.*.parameters.json
   * for the ARM template.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly parametersValueFilesInfo?: ParametersValueFileInfo[];
  /**
   * @member {boolean} [enabled] Whether or not ARM template is enabled for use
   * by lab user.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly enabled?: boolean;
}

/**
 * @interface
 * An interface representing ArmTemplateInfo.
 * Information about a generated ARM template.
 *
 */
export interface ArmTemplateInfo {
  /**
   * @member {any} [template] The template's contents.
   */
  template?: any;
  /**
   * @member {any} [parameters] The parameters of the ARM template.
   */
  parameters?: any;
}

/**
 * @interface
 * An interface representing ArmTemplateParameterProperties.
 * Properties of an Azure Resource Manager template parameter.
 *
 */
export interface ArmTemplateParameterProperties {
  /**
   * @member {string} [name] The name of the template parameter.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the template parameter.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing ArmTemplateParameterPropertiesFragment.
 * Properties of an Azure Resource Manager template parameter.
 *
 */
export interface ArmTemplateParameterPropertiesFragment {
  /**
   * @member {string} [name] The name of the template parameter.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the template parameter.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing Artifact.
 * An artifact.
 *
 * @extends Resource
 */
export interface Artifact extends Resource {
  /**
   * @member {string} [title] The artifact's title.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly title?: string;
  /**
   * @member {string} [description] The artifact's description.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly description?: string;
  /**
   * @member {string} [publisher] The artifact's publisher.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publisher?: string;
  /**
   * @member {string} [filePath] The file path to the artifact.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly filePath?: string;
  /**
   * @member {string} [icon] The URI to the artifact icon.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly icon?: string;
  /**
   * @member {string} [targetOsType] The artifact's target OS.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly targetOsType?: string;
  /**
   * @member {any} [parameters] The artifact's parameters.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly parameters?: any;
  /**
   * @member {Date} [createdDate] The artifact's creation date.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
}

/**
 * @interface
 * An interface representing ArtifactDeploymentStatusProperties.
 * Properties of an artifact deployment.
 *
 */
export interface ArtifactDeploymentStatusProperties {
  /**
   * @member {string} [deploymentStatus] The deployment status of the artifact.
   */
  deploymentStatus?: string;
  /**
   * @member {number} [artifactsApplied] The total count of the artifacts that
   * were successfully applied.
   */
  artifactsApplied?: number;
  /**
   * @member {number} [totalArtifacts] The total count of the artifacts that
   * were tentatively applied.
   */
  totalArtifacts?: number;
}

/**
 * @interface
 * An interface representing ArtifactDeploymentStatusPropertiesFragment.
 * Properties of an artifact deployment.
 *
 */
export interface ArtifactDeploymentStatusPropertiesFragment {
  /**
   * @member {string} [deploymentStatus] The deployment status of the artifact.
   */
  deploymentStatus?: string;
  /**
   * @member {number} [artifactsApplied] The total count of the artifacts that
   * were successfully applied.
   */
  artifactsApplied?: number;
  /**
   * @member {number} [totalArtifacts] The total count of the artifacts that
   * were tentatively applied.
   */
  totalArtifacts?: number;
}

/**
 * @interface
 * An interface representing ArtifactParameterPropertiesFragment.
 * Properties of an artifact parameter.
 *
 */
export interface ArtifactParameterPropertiesFragment {
  /**
   * @member {string} [name] The name of the artifact parameter.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the artifact parameter.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing ArtifactInstallPropertiesFragment.
 * Properties of an artifact.
 *
 */
export interface ArtifactInstallPropertiesFragment {
  /**
   * @member {string} [artifactId] The artifact's identifier.
   */
  artifactId?: string;
  /**
   * @member {string} [artifactTitle] The artifact's title.
   */
  artifactTitle?: string;
  /**
   * @member {ArtifactParameterPropertiesFragment[]} [parameters] The
   * parameters of the artifact.
   */
  parameters?: ArtifactParameterPropertiesFragment[];
  /**
   * @member {string} [status] The status of the artifact.
   */
  status?: string;
  /**
   * @member {string} [deploymentStatusMessage] The status message from the
   * deployment.
   */
  deploymentStatusMessage?: string;
  /**
   * @member {string} [vmExtensionStatusMessage] The status message from the
   * virtual machine extension.
   */
  vmExtensionStatusMessage?: string;
  /**
   * @member {Date} [installTime] The time that the artifact starts to install
   * on the virtual machine.
   */
  installTime?: Date;
}

/**
 * @interface
 * An interface representing ArtifactSource.
 * Properties of an artifact source.
 *
 * @extends Resource
 */
export interface ArtifactSource extends Resource {
  /**
   * @member {string} [displayName] The artifact source's display name.
   */
  displayName?: string;
  /**
   * @member {string} [uri] The artifact source's URI.
   */
  uri?: string;
  /**
   * @member {SourceControlType} [sourceType] The artifact source's type.
   * Possible values include: 'VsoGit', 'GitHub'
   */
  sourceType?: SourceControlType;
  /**
   * @member {string} [folderPath] The folder containing artifacts.
   */
  folderPath?: string;
  /**
   * @member {string} [armTemplateFolderPath] The folder containing Azure
   * Resource Manager templates.
   */
  armTemplateFolderPath?: string;
  /**
   * @member {string} [branchRef] The artifact source's branch reference.
   */
  branchRef?: string;
  /**
   * @member {string} [securityToken] The security token to authenticate to the
   * artifact source.
   */
  securityToken?: string;
  /**
   * @member {EnableStatus} [status] Indicates if the artifact source is
   * enabled (values: Enabled, Disabled). Possible values include: 'Enabled',
   * 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {Date} [createdDate] The artifact source's creation date.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing ArtifactSourceFragment.
 * Properties of an artifact source.
 *
 * @extends UpdateResource
 */
export interface ArtifactSourceFragment extends UpdateResource {
  /**
   * @member {string} [displayName] The artifact source's display name.
   */
  displayName?: string;
  /**
   * @member {string} [uri] The artifact source's URI.
   */
  uri?: string;
  /**
   * @member {SourceControlType} [sourceType] The artifact source's type.
   * Possible values include: 'VsoGit', 'GitHub'
   */
  sourceType?: SourceControlType;
  /**
   * @member {string} [folderPath] The folder containing artifacts.
   */
  folderPath?: string;
  /**
   * @member {string} [armTemplateFolderPath] The folder containing Azure
   * Resource Manager templates.
   */
  armTemplateFolderPath?: string;
  /**
   * @member {string} [branchRef] The artifact source's branch reference.
   */
  branchRef?: string;
  /**
   * @member {string} [securityToken] The security token to authenticate to the
   * artifact source.
   */
  securityToken?: string;
  /**
   * @member {EnableStatus} [status] Indicates if the artifact source is
   * enabled (values: Enabled, Disabled). Possible values include: 'Enabled',
   * 'Disabled'
   */
  status?: EnableStatus;
}

/**
 * @interface
 * An interface representing AttachDiskProperties.
 * Properties of the disk to attach.
 *
 */
export interface AttachDiskProperties {
  /**
   * @member {string} [leasedByLabVmId] The resource ID of the Lab virtual
   * machine to which the disk is attached.
   */
  leasedByLabVmId?: string;
}

/**
 * @interface
 * An interface representing AttachNewDataDiskOptions.
 * Properties to attach new disk to the Virtual Machine.
 *
 */
export interface AttachNewDataDiskOptions {
  /**
   * @member {number} [diskSizeGiB] Size of the disk to be attached in
   * GibiBytes.
   */
  diskSizeGiB?: number;
  /**
   * @member {string} [diskName] The name of the disk to be attached.
   */
  diskName?: string;
  /**
   * @member {StorageType} [diskType] The storage type for the disk (i.e.
   * Standard, Premium). Possible values include: 'Standard', 'Premium'
   */
  diskType?: StorageType;
}

/**
 * @interface
 * An interface representing AttachNewDataDiskOptionsFragment.
 * Properties to attach new disk to the Virtual Machine.
 *
 */
export interface AttachNewDataDiskOptionsFragment {
  /**
   * @member {number} [diskSizeGiB] Size of the disk to be attached in
   * GibiBytes.
   */
  diskSizeGiB?: number;
  /**
   * @member {string} [diskName] The name of the disk to be attached.
   */
  diskName?: string;
  /**
   * @member {StorageType} [diskType] The storage type for the disk (i.e.
   * Standard, Premium). Possible values include: 'Standard', 'Premium'
   */
  diskType?: StorageType;
}

/**
 * @interface
 * An interface representing BulkCreationParameters.
 * Parameters for creating multiple virtual machines as a single action.
 *
 */
export interface BulkCreationParameters {
  /**
   * @member {number} [instanceCount] The number of virtual machine instances
   * to create.
   */
  instanceCount?: number;
}

/**
 * @interface
 * An interface representing BulkCreationParametersFragment.
 * Parameters for creating multiple virtual machines as a single action.
 *
 */
export interface BulkCreationParametersFragment {
  /**
   * @member {number} [instanceCount] The number of virtual machine instances
   * to create.
   */
  instanceCount?: number;
}

/**
 * @interface
 * An interface representing ComputeDataDisk.
 * A data disks attached to a virtual machine.
 *
 */
export interface ComputeDataDisk {
  /**
   * @member {string} [name] Gets data disk name.
   */
  name?: string;
  /**
   * @member {string} [diskUri] When backed by a blob, the URI of underlying
   * blob.
   */
  diskUri?: string;
  /**
   * @member {string} [managedDiskId] When backed by managed disk, this is the
   * ID of the compute disk resource.
   */
  managedDiskId?: string;
  /**
   * @member {number} [diskSizeGiB] Gets data disk size in GiB.
   */
  diskSizeGiB?: number;
}

/**
 * @interface
 * An interface representing ComputeDataDiskFragment.
 * A data disks attached to a virtual machine.
 *
 */
export interface ComputeDataDiskFragment {
  /**
   * @member {string} [name] Gets data disk name.
   */
  name?: string;
  /**
   * @member {string} [diskUri] When backed by a blob, the URI of underlying
   * blob.
   */
  diskUri?: string;
  /**
   * @member {string} [managedDiskId] When backed by managed disk, this is the
   * ID of the compute disk resource.
   */
  managedDiskId?: string;
  /**
   * @member {number} [diskSizeGiB] Gets data disk size in GiB.
   */
  diskSizeGiB?: number;
}

/**
 * @interface
 * An interface representing ComputeVmInstanceViewStatus.
 * Status information about a virtual machine.
 *
 */
export interface ComputeVmInstanceViewStatus {
  /**
   * @member {string} [code] Gets the status Code.
   */
  code?: string;
  /**
   * @member {string} [displayStatus] Gets the short localizable label for the
   * status.
   */
  displayStatus?: string;
  /**
   * @member {string} [message] Gets the message associated with the status.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ComputeVmInstanceViewStatusFragment.
 * Status information about a virtual machine.
 *
 */
export interface ComputeVmInstanceViewStatusFragment {
  /**
   * @member {string} [code] Gets the status Code.
   */
  code?: string;
  /**
   * @member {string} [displayStatus] Gets the short localizable label for the
   * status.
   */
  displayStatus?: string;
  /**
   * @member {string} [message] Gets the message associated with the status.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ComputeVmProperties.
 * Properties of a virtual machine returned by the Microsoft.Compute API.
 *
 */
export interface ComputeVmProperties {
  /**
   * @member {ComputeVmInstanceViewStatus[]} [statuses] Gets the statuses of
   * the virtual machine.
   */
  statuses?: ComputeVmInstanceViewStatus[];
  /**
   * @member {string} [osType] Gets the OS type of the virtual machine.
   */
  osType?: string;
  /**
   * @member {string} [vmSize] Gets the size of the virtual machine.
   */
  vmSize?: string;
  /**
   * @member {string} [networkInterfaceId] Gets the network interface ID of the
   * virtual machine.
   */
  networkInterfaceId?: string;
  /**
   * @member {string} [osDiskId] Gets OS disk blob uri for the virtual machine.
   */
  osDiskId?: string;
  /**
   * @member {string[]} [dataDiskIds] Gets data disks blob uri for the virtual
   * machine.
   */
  dataDiskIds?: string[];
  /**
   * @member {ComputeDataDisk[]} [dataDisks] Gets all data disks attached to
   * the virtual machine.
   */
  dataDisks?: ComputeDataDisk[];
}

/**
 * @interface
 * An interface representing ComputeVmPropertiesFragment.
 * Properties of a virtual machine returned by the Microsoft.Compute API.
 *
 */
export interface ComputeVmPropertiesFragment {
  /**
   * @member {ComputeVmInstanceViewStatusFragment[]} [statuses] Gets the
   * statuses of the virtual machine.
   */
  statuses?: ComputeVmInstanceViewStatusFragment[];
  /**
   * @member {string} [osType] Gets the OS type of the virtual machine.
   */
  osType?: string;
  /**
   * @member {string} [vmSize] Gets the size of the virtual machine.
   */
  vmSize?: string;
  /**
   * @member {string} [networkInterfaceId] Gets the network interface ID of the
   * virtual machine.
   */
  networkInterfaceId?: string;
  /**
   * @member {string} [osDiskId] Gets OS disk blob uri for the virtual machine.
   */
  osDiskId?: string;
  /**
   * @member {string[]} [dataDiskIds] Gets data disks blob uri for the virtual
   * machine.
   */
  dataDiskIds?: string[];
  /**
   * @member {ComputeDataDiskFragment[]} [dataDisks] Gets all data disks
   * attached to the virtual machine.
   */
  dataDisks?: ComputeDataDiskFragment[];
}

/**
 * @interface
 * An interface representing PercentageCostThresholdProperties.
 * Properties of a percentage cost threshold.
 *
 */
export interface PercentageCostThresholdProperties {
  /**
   * @member {number} [thresholdValue] The cost threshold value.
   */
  thresholdValue?: number;
}

/**
 * @interface
 * An interface representing CostThresholdProperties.
 * Properties of a cost threshold item.
 *
 */
export interface CostThresholdProperties {
  /**
   * @member {string} [thresholdId] The ID of the cost threshold item.
   */
  thresholdId?: string;
  /**
   * @member {PercentageCostThresholdProperties} [percentageThreshold] The
   * value of the percentage cost threshold.
   */
  percentageThreshold?: PercentageCostThresholdProperties;
  /**
   * @member {CostThresholdStatus} [displayOnChart] Indicates whether this
   * threshold will be displayed on cost charts. Possible values include:
   * 'Enabled', 'Disabled'
   */
  displayOnChart?: CostThresholdStatus;
  /**
   * @member {CostThresholdStatus} [sendNotificationWhenExceeded] Indicates
   * whether notifications will be sent when this threshold is exceeded.
   * Possible values include: 'Enabled', 'Disabled'
   */
  sendNotificationWhenExceeded?: CostThresholdStatus;
  /**
   * @member {string} [notificationSent] Indicates the datetime when
   * notifications were last sent for this threshold.
   */
  notificationSent?: string;
}

/**
 * @interface
 * An interface representing WindowsOsInfo.
 * Information about a Windows OS.
 *
 */
export interface WindowsOsInfo {
  /**
   * @member {WindowsOsState} [windowsOsState] The state of the Windows OS
   * (i.e. NonSysprepped, SysprepRequested, SysprepApplied). Possible values
   * include: 'NonSysprepped', 'SysprepRequested', 'SysprepApplied'
   */
  windowsOsState?: WindowsOsState;
}

/**
 * @interface
 * An interface representing LinuxOsInfo.
 * Information about a Linux OS.
 *
 */
export interface LinuxOsInfo {
  /**
   * @member {LinuxOsState} [linuxOsState] The state of the Linux OS (i.e.
   * NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). Possible
   * values include: 'NonDeprovisioned', 'DeprovisionRequested',
   * 'DeprovisionApplied'
   */
  linuxOsState?: LinuxOsState;
}

/**
 * @interface
 * An interface representing CustomImagePropertiesFromVm.
 * Properties for creating a custom image from a virtual machine.
 *
 */
export interface CustomImagePropertiesFromVm {
  /**
   * @member {string} [sourceVmId] The source vm identifier.
   */
  sourceVmId?: string;
  /**
   * @member {WindowsOsInfo} [windowsOsInfo] The Windows OS information of the
   * VM.
   */
  windowsOsInfo?: WindowsOsInfo;
  /**
   * @member {LinuxOsInfo} [linuxOsInfo] The Linux OS information of the VM.
   */
  linuxOsInfo?: LinuxOsInfo;
}

/**
 * @interface
 * An interface representing CustomImagePropertiesCustom.
 * Properties for creating a custom image from a VHD.
 *
 */
export interface CustomImagePropertiesCustom {
  /**
   * @member {string} [imageName] The image name.
   */
  imageName?: string;
  /**
   * @member {boolean} [sysPrep] Indicates whether sysprep has been run on the
   * VHD.
   */
  sysPrep?: boolean;
  /**
   * @member {CustomImageOsType} osType The OS type of the custom image (i.e.
   * Windows, Linux). Possible values include: 'Windows', 'Linux', 'None'
   */
  osType: CustomImageOsType;
}

/**
 * @interface
 * An interface representing DataDiskStorageTypeInfo.
 * Storage information about the data disks present in the custom image
 *
 */
export interface DataDiskStorageTypeInfo {
  /**
   * @member {string} [lun] Disk Lun
   */
  lun?: string;
  /**
   * @member {StorageType} [storageType] Disk Storage Type. Possible values
   * include: 'Standard', 'Premium'
   */
  storageType?: StorageType;
}

/**
 * @interface
 * An interface representing CustomImagePropertiesFromPlan.
 * Properties for plan on a custom image.
 *
 */
export interface CustomImagePropertiesFromPlan {
  /**
   * @member {string} [id] The id of the plan, equivalent to name of the plan
   */
  id?: string;
  /**
   * @member {string} [publisher] The publisher for the plan from the
   * marketplace image the custom image is derived from
   */
  publisher?: string;
  /**
   * @member {string} [offer] The offer for the plan from the marketplace image
   * the custom image is derived from
   */
  offer?: string;
}

/**
 * @interface
 * An interface representing CustomImage.
 * A custom image.
 *
 * @extends Resource
 */
export interface CustomImage extends Resource {
  /**
   * @member {CustomImagePropertiesFromVm} [vm] The virtual machine from which
   * the image is to be created.
   */
  vm?: CustomImagePropertiesFromVm;
  /**
   * @member {CustomImagePropertiesCustom} [vhd] The VHD from which the image
   * is to be created.
   */
  vhd?: CustomImagePropertiesCustom;
  /**
   * @member {string} [description] The description of the custom image.
   */
  description?: string;
  /**
   * @member {string} [author] The author of the custom image.
   */
  author?: string;
  /**
   * @member {Date} [creationDate] The creation date of the custom image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationDate?: Date;
  /**
   * @member {string} [managedImageId] The Managed Image Id backing the custom
   * image.
   */
  managedImageId?: string;
  /**
   * @member {string} [managedSnapshotId] The Managed Snapshot Id backing the
   * custom image.
   */
  managedSnapshotId?: string;
  /**
   * @member {DataDiskStorageTypeInfo[]} [dataDiskStorageInfo] Storage
   * information about the data disks present in the custom image
   */
  dataDiskStorageInfo?: DataDiskStorageTypeInfo[];
  /**
   * @member {CustomImagePropertiesFromPlan} [customImagePlan] Storage
   * information about the plan related to this custom image
   */
  customImagePlan?: CustomImagePropertiesFromPlan;
  /**
   * @member {boolean} [isPlanAuthorized] Whether or not the custom images
   * underlying offer/plan has been enabled for programmatic deployment
   */
  isPlanAuthorized?: boolean;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing WindowsOsInfoFragment.
 * Information about a Windows OS.
 *
 */
export interface WindowsOsInfoFragment {
  /**
   * @member {WindowsOsState} [windowsOsState] The state of the Windows OS
   * (i.e. NonSysprepped, SysprepRequested, SysprepApplied). Possible values
   * include: 'NonSysprepped', 'SysprepRequested', 'SysprepApplied'
   */
  windowsOsState?: WindowsOsState;
}

/**
 * @interface
 * An interface representing LinuxOsInfoFragment.
 * Information about a Linux OS.
 *
 */
export interface LinuxOsInfoFragment {
  /**
   * @member {LinuxOsState} [linuxOsState] The state of the Linux OS (i.e.
   * NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). Possible
   * values include: 'NonDeprovisioned', 'DeprovisionRequested',
   * 'DeprovisionApplied'
   */
  linuxOsState?: LinuxOsState;
}

/**
 * @interface
 * An interface representing CustomImagePropertiesFromVmFragment.
 * Properties for creating a custom image from a virtual machine.
 *
 */
export interface CustomImagePropertiesFromVmFragment {
  /**
   * @member {string} [sourceVmId] The source vm identifier.
   */
  sourceVmId?: string;
  /**
   * @member {WindowsOsInfoFragment} [windowsOsInfo] The Windows OS information
   * of the VM.
   */
  windowsOsInfo?: WindowsOsInfoFragment;
  /**
   * @member {LinuxOsInfoFragment} [linuxOsInfo] The Linux OS information of
   * the VM.
   */
  linuxOsInfo?: LinuxOsInfoFragment;
}

/**
 * @interface
 * An interface representing CustomImagePropertiesCustomFragment.
 * Properties for creating a custom image from a VHD.
 *
 */
export interface CustomImagePropertiesCustomFragment {
  /**
   * @member {string} [imageName] The image name.
   */
  imageName?: string;
  /**
   * @member {boolean} [sysPrep] Indicates whether sysprep has been run on the
   * VHD.
   */
  sysPrep?: boolean;
  /**
   * @member {CustomImageOsType} [osType] The OS type of the custom image (i.e.
   * Windows, Linux). Possible values include: 'Windows', 'Linux', 'None'
   */
  osType?: CustomImageOsType;
}

/**
 * @interface
 * An interface representing DataDiskStorageTypeInfoFragment.
 * Storage information about the data disks present in the custom image
 *
 */
export interface DataDiskStorageTypeInfoFragment {
  /**
   * @member {string} [lun] Disk Lun
   */
  lun?: string;
  /**
   * @member {StorageType} [storageType] Disk Storage Type. Possible values
   * include: 'Standard', 'Premium'
   */
  storageType?: StorageType;
}

/**
 * @interface
 * An interface representing CustomImagePropertiesFromPlanFragment.
 * Properties for plan on a custom image.
 *
 */
export interface CustomImagePropertiesFromPlanFragment {
  /**
   * @member {string} [id] The id of the plan, equivalent to name of the plan
   */
  id?: string;
  /**
   * @member {string} [publisher] The publisher for the plan from the
   * marketplace image the custom image is derived from
   */
  publisher?: string;
  /**
   * @member {string} [offer] The offer for the plan from the marketplace image
   * the custom image is derived from
   */
  offer?: string;
}

/**
 * @interface
 * An interface representing CustomImageFragment.
 * A custom image.
 *
 * @extends UpdateResource
 */
export interface CustomImageFragment extends UpdateResource {
  /**
   * @member {CustomImagePropertiesFromVmFragment} [vm] The virtual machine
   * from which the image is to be created.
   */
  vm?: CustomImagePropertiesFromVmFragment;
  /**
   * @member {CustomImagePropertiesCustomFragment} [vhd] The VHD from which the
   * image is to be created.
   */
  vhd?: CustomImagePropertiesCustomFragment;
  /**
   * @member {string} [description] The description of the custom image.
   */
  description?: string;
  /**
   * @member {string} [author] The author of the custom image.
   */
  author?: string;
  /**
   * @member {string} [managedImageId] The Managed Image Id backing the custom
   * image.
   */
  managedImageId?: string;
  /**
   * @member {string} [managedSnapshotId] The Managed Snapshot Id backing the
   * custom image.
   */
  managedSnapshotId?: string;
  /**
   * @member {DataDiskStorageTypeInfoFragment[]} [dataDiskStorageInfo] Storage
   * information about the data disks present in the custom image
   */
  dataDiskStorageInfo?: DataDiskStorageTypeInfoFragment[];
  /**
   * @member {CustomImagePropertiesFromPlanFragment} [customImagePlan] Storage
   * information about the plan related to this custom image
   */
  customImagePlan?: CustomImagePropertiesFromPlanFragment;
  /**
   * @member {boolean} [isPlanAuthorized] Whether or not the custom images
   * underlying offer/plan has been enabled for programmatic deployment
   */
  isPlanAuthorized?: boolean;
}

/**
 * @interface
 * An interface representing DataDiskProperties.
 * Request body for adding a new or existing data disk to a virtual machine.
 *
 */
export interface DataDiskProperties {
  /**
   * @member {AttachNewDataDiskOptions} [attachNewDataDiskOptions] Specifies
   * options to attach a new disk to the virtual machine.
   */
  attachNewDataDiskOptions?: AttachNewDataDiskOptions;
  /**
   * @member {string} [existingLabDiskId] Specifies the existing lab disk id to
   * attach to virtual machine.
   */
  existingLabDiskId?: string;
  /**
   * @member {HostCachingOptions} [hostCaching] Caching option for a data disk
   * (i.e. None, ReadOnly, ReadWrite). Possible values include: 'None',
   * 'ReadOnly', 'ReadWrite'
   */
  hostCaching?: HostCachingOptions;
}

/**
 * @interface
 * An interface representing DataDiskPropertiesFragment.
 * Request body for adding a new or existing data disk to a virtual machine.
 *
 */
export interface DataDiskPropertiesFragment {
  /**
   * @member {AttachNewDataDiskOptionsFragment} [attachNewDataDiskOptions]
   * Specifies options to attach a new disk to the virtual machine.
   */
  attachNewDataDiskOptions?: AttachNewDataDiskOptionsFragment;
  /**
   * @member {string} [existingLabDiskId] Specifies the existing lab disk id to
   * attach to virtual machine.
   */
  existingLabDiskId?: string;
  /**
   * @member {HostCachingOptions} [hostCaching] Caching option for a data disk
   * (i.e. None, ReadOnly, ReadWrite). Possible values include: 'None',
   * 'ReadOnly', 'ReadWrite'
   */
  hostCaching?: HostCachingOptions;
}

/**
 * @interface
 * An interface representing DetachDataDiskProperties.
 * Request body for detaching data disk from a virtual machine.
 *
 */
export interface DetachDataDiskProperties {
  /**
   * @member {string} [existingLabDiskId] Specifies the disk resource ID to
   * detach from virtual machine.
   */
  existingLabDiskId?: string;
}

/**
 * @interface
 * An interface representing DetachDiskProperties.
 * Properties of the disk to detach.
 *
 */
export interface DetachDiskProperties {
  /**
   * @member {string} [leasedByLabVmId] The resource ID of the Lab VM to which
   * the disk is attached.
   */
  leasedByLabVmId?: string;
}

/**
 * @interface
 * An interface representing Disk.
 * A Disk.
 *
 * @extends Resource
 */
export interface Disk extends Resource {
  /**
   * @member {StorageType} [diskType] The storage type for the disk (i.e.
   * Standard, Premium). Possible values include: 'Standard', 'Premium'
   */
  diskType?: StorageType;
  /**
   * @member {number} [diskSizeGiB] The size of the disk in GibiBytes.
   */
  diskSizeGiB?: number;
  /**
   * @member {string} [leasedByLabVmId] The resource ID of the VM to which this
   * disk is leased.
   */
  leasedByLabVmId?: string;
  /**
   * @member {string} [diskBlobName] When backed by a blob, the name of the VHD
   * blob without extension.
   */
  diskBlobName?: string;
  /**
   * @member {string} [diskUri] When backed by a blob, the URI of underlying
   * blob.
   */
  diskUri?: string;
  /**
   * @member {Date} [createdDate] The creation date of the disk.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [hostCaching] The host caching policy of the disk (i.e.
   * None, ReadOnly, ReadWrite).
   */
  hostCaching?: string;
  /**
   * @member {string} [managedDiskId] When backed by managed disk, this is the
   * ID of the compute disk resource.
   */
  managedDiskId?: string;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing DiskFragment.
 * A Disk.
 *
 * @extends UpdateResource
 */
export interface DiskFragment extends UpdateResource {
  /**
   * @member {StorageType} [diskType] The storage type for the disk (i.e.
   * Standard, Premium). Possible values include: 'Standard', 'Premium'
   */
  diskType?: StorageType;
  /**
   * @member {number} [diskSizeGiB] The size of the disk in GibiBytes.
   */
  diskSizeGiB?: number;
  /**
   * @member {string} [leasedByLabVmId] The resource ID of the VM to which this
   * disk is leased.
   */
  leasedByLabVmId?: string;
  /**
   * @member {string} [diskBlobName] When backed by a blob, the name of the VHD
   * blob without extension.
   */
  diskBlobName?: string;
  /**
   * @member {string} [diskUri] When backed by a blob, the URI of underlying
   * blob.
   */
  diskUri?: string;
  /**
   * @member {string} [hostCaching] The host caching policy of the disk (i.e.
   * None, ReadOnly, ReadWrite).
   */
  hostCaching?: string;
  /**
   * @member {string} [managedDiskId] When backed by managed disk, this is the
   * ID of the compute disk resource.
   */
  managedDiskId?: string;
}

/**
 * @interface
 * An interface representing EnvironmentDeploymentProperties.
 * Properties of an environment deployment.
 *
 */
export interface EnvironmentDeploymentProperties {
  /**
   * @member {string} [armTemplateId] The Azure Resource Manager template's
   * identifier.
   */
  armTemplateId?: string;
  /**
   * @member {ArmTemplateParameterProperties[]} [parameters] The parameters of
   * the Azure Resource Manager template.
   */
  parameters?: ArmTemplateParameterProperties[];
}

/**
 * @interface
 * An interface representing DtlEnvironment.
 * An environment, which is essentially an ARM template deployment.
 *
 * @extends Resource
 */
export interface DtlEnvironment extends Resource {
  /**
   * @member {EnvironmentDeploymentProperties} [deploymentProperties] The
   * deployment properties of the environment.
   */
  deploymentProperties?: EnvironmentDeploymentProperties;
  /**
   * @member {string} [armTemplateDisplayName] The display name of the Azure
   * Resource Manager template that produced the environment.
   */
  armTemplateDisplayName?: string;
  /**
   * @member {string} [resourceGroupId] The identifier of the resource group
   * containing the environment's resources.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGroupId?: string;
  /**
   * @member {string} [createdByUser] The creator of the environment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdByUser?: string;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing EnvironmentDeploymentPropertiesFragment.
 * Properties of an environment deployment.
 *
 */
export interface EnvironmentDeploymentPropertiesFragment {
  /**
   * @member {string} [armTemplateId] The Azure Resource Manager template's
   * identifier.
   */
  armTemplateId?: string;
  /**
   * @member {ArmTemplateParameterPropertiesFragment[]} [parameters] The
   * parameters of the Azure Resource Manager template.
   */
  parameters?: ArmTemplateParameterPropertiesFragment[];
}

/**
 * @interface
 * An interface representing DtlEnvironmentFragment.
 * An environment, which is essentially an ARM template deployment.
 *
 * @extends UpdateResource
 */
export interface DtlEnvironmentFragment extends UpdateResource {
  /**
   * @member {EnvironmentDeploymentPropertiesFragment} [deploymentProperties]
   * The deployment properties of the environment.
   */
  deploymentProperties?: EnvironmentDeploymentPropertiesFragment;
  /**
   * @member {string} [armTemplateDisplayName] The display name of the Azure
   * Resource Manager template that produced the environment.
   */
  armTemplateDisplayName?: string;
}

/**
 * @interface
 * An interface representing EvaluatePoliciesProperties.
 * Properties for evaluating a policy set.
 *
 */
export interface EvaluatePoliciesProperties {
  /**
   * @member {string} [factName] The fact name.
   */
  factName?: string;
  /**
   * @member {string} [factData] The fact data.
   */
  factData?: string;
  /**
   * @member {string} [valueOffset] The value offset.
   */
  valueOffset?: string;
  /**
   * @member {string} [userObjectId] The user for which policies will be
   * evaluated
   */
  userObjectId?: string;
}

/**
 * @interface
 * An interface representing EvaluatePoliciesRequest.
 * Request body for evaluating a policy set.
 *
 */
export interface EvaluatePoliciesRequest {
  /**
   * @member {EvaluatePoliciesProperties[]} [policies] Policies to evaluate.
   */
  policies?: EvaluatePoliciesProperties[];
}

/**
 * @interface
 * An interface representing PolicyViolation.
 * Policy violation.
 *
 */
export interface PolicyViolation {
  /**
   * @member {string} [code] The code of the policy violation.
   */
  code?: string;
  /**
   * @member {string} [message] The message of the policy violation.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing PolicySetResult.
 * Result of a policy set evaluation.
 *
 */
export interface PolicySetResult {
  /**
   * @member {boolean} [hasError] A value indicating whether this policy set
   * evaluation has discovered violations.
   */
  hasError?: boolean;
  /**
   * @member {PolicyViolation[]} [policyViolations] The list of policy
   * violations.
   */
  policyViolations?: PolicyViolation[];
}

/**
 * @interface
 * An interface representing EvaluatePoliciesResponse.
 * Response body for evaluating a policy set.
 *
 */
export interface EvaluatePoliciesResponse {
  /**
   * @member {PolicySetResult[]} [results] Results of evaluating a policy set.
   */
  results?: PolicySetResult[];
}

/**
 * @interface
 * An interface representing Event.
 * An event to be notified for.
 *
 */
export interface Event {
  /**
   * @member {NotificationChannelEventType} [eventName] The event type for
   * which this notification is enabled (i.e. AutoShutdown, Cost). Possible
   * values include: 'AutoShutdown', 'Cost'
   */
  eventName?: NotificationChannelEventType;
}

/**
 * @interface
 * An interface representing EventFragment.
 * An event to be notified for.
 *
 */
export interface EventFragment {
  /**
   * @member {NotificationChannelEventType} [eventName] The event type for
   * which this notification is enabled (i.e. AutoShutdown, Cost). Possible
   * values include: 'AutoShutdown', 'Cost'
   */
  eventName?: NotificationChannelEventType;
}

/**
 * @interface
 * An interface representing ExportResourceUsageParameters.
 * The parameters of the export operation.
 *
 */
export interface ExportResourceUsageParameters {
  /**
   * @member {string} [blobStorageAbsoluteSasUri] The blob storage absolute sas
   * uri with write permission to the container which the usage data needs to
   * be uploaded to.
   */
  blobStorageAbsoluteSasUri?: string;
  /**
   * @member {Date} [usageStartDate] The start time of the usage. If not
   * provided, usage will be reported since the beginning of data collection.
   */
  usageStartDate?: Date;
}

/**
 * @interface
 * An interface representing ExternalSubnet.
 * Subnet information as returned by the Microsoft.Network API.
 *
 */
export interface ExternalSubnet {
  /**
   * @member {string} [id] Gets or sets the identifier.
   */
  id?: string;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing ExternalSubnetFragment.
 * Subnet information as returned by the Microsoft.Network API.
 *
 */
export interface ExternalSubnetFragment {
  /**
   * @member {string} [id] Gets or sets the identifier.
   */
  id?: string;
  /**
   * @member {string} [name] Gets or sets the name.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing GalleryImageReference.
 * The reference information for an Azure Marketplace image.
 *
 */
export interface GalleryImageReference {
  /**
   * @member {string} [offer] The offer of the gallery image.
   */
  offer?: string;
  /**
   * @member {string} [publisher] The publisher of the gallery image.
   */
  publisher?: string;
  /**
   * @member {string} [sku] The SKU of the gallery image.
   */
  sku?: string;
  /**
   * @member {string} [osType] The OS type of the gallery image.
   */
  osType?: string;
  /**
   * @member {string} [version] The version of the gallery image.
   */
  version?: string;
}

/**
 * @interface
 * An interface representing InboundNatRule.
 * A rule for NAT - exposing a VM's port (backendPort) on the public IP address
 * using a load balancer.
 *
 */
export interface InboundNatRule {
  /**
   * @member {TransportProtocol} [transportProtocol] The transport protocol for
   * the endpoint. Possible values include: 'Tcp', 'Udp'
   */
  transportProtocol?: TransportProtocol;
  /**
   * @member {number} [frontendPort] The external endpoint port of the inbound
   * connection. Possible values range between 1 and 65535, inclusive. If
   * unspecified, a value will be allocated automatically.
   */
  frontendPort?: number;
  /**
   * @member {number} [backendPort] The port to which the external traffic will
   * be redirected.
   */
  backendPort?: number;
}

/**
 * @interface
 * An interface representing SharedPublicIpAddressConfiguration.
 * Properties of a virtual machine that determine how it is connected to a load
 * balancer.
 *
 */
export interface SharedPublicIpAddressConfiguration {
  /**
   * @member {InboundNatRule[]} [inboundNatRules] The incoming NAT rules
   */
  inboundNatRules?: InboundNatRule[];
}

/**
 * @interface
 * An interface representing NetworkInterfaceProperties.
 * Properties of a network interface.
 *
 */
export interface NetworkInterfaceProperties {
  /**
   * @member {string} [virtualNetworkId] The resource ID of the virtual
   * network.
   */
  virtualNetworkId?: string;
  /**
   * @member {string} [subnetId] The resource ID of the sub net.
   */
  subnetId?: string;
  /**
   * @member {string} [publicIpAddressId] The resource ID of the public IP
   * address.
   */
  publicIpAddressId?: string;
  /**
   * @member {string} [publicIpAddress] The public IP address.
   */
  publicIpAddress?: string;
  /**
   * @member {string} [privateIpAddress] The private IP address.
   */
  privateIpAddress?: string;
  /**
   * @member {string} [dnsName] The DNS name.
   */
  dnsName?: string;
  /**
   * @member {string} [rdpAuthority] The RdpAuthority property is a server DNS
   * host name or IP address followed by the service port number for RDP
   * (Remote Desktop Protocol).
   */
  rdpAuthority?: string;
  /**
   * @member {string} [sshAuthority] The SshAuthority property is a server DNS
   * host name or IP address followed by the service port number for SSH.
   */
  sshAuthority?: string;
  /**
   * @member {SharedPublicIpAddressConfiguration}
   * [sharedPublicIpAddressConfiguration] The configuration for sharing a
   * public IP address across multiple virtual machines.
   */
  sharedPublicIpAddressConfiguration?: SharedPublicIpAddressConfiguration;
}

/**
 * @interface
 * An interface representing ScheduleCreationParameter.
 * Properties for creating a schedule.
 *
 */
export interface ScheduleCreationParameter {
  /**
   * @member {EnableStatus} [status] The status of the schedule (i.e. Enabled,
   * Disabled). Possible values include: 'Enabled', 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {string} [taskType] The task type of the schedule (e.g.
   * LabVmsShutdownTask, LabVmAutoStart).
   */
  taskType?: string;
  /**
   * @member {WeekDetails} [weeklyRecurrence] If the schedule will occur only
   * some days of the week, specify the weekly recurrence.
   */
  weeklyRecurrence?: WeekDetails;
  /**
   * @member {DayDetails} [dailyRecurrence] If the schedule will occur once
   * each day of the week, specify the daily recurrence.
   */
  dailyRecurrence?: DayDetails;
  /**
   * @member {HourDetails} [hourlyRecurrence] If the schedule will occur
   * multiple times a day, specify the hourly recurrence.
   */
  hourlyRecurrence?: HourDetails;
  /**
   * @member {string} [timeZoneId] The time zone ID (e.g. Pacific Standard
   * time).
   */
  timeZoneId?: string;
  /**
   * @member {NotificationSettings} [notificationSettings] Notification
   * settings.
   */
  notificationSettings?: NotificationSettings;
  /**
   * @member {string} [targetResourceId] The resource ID to which the schedule
   * belongs
   */
  targetResourceId?: string;
  /**
   * @member {string} [name] The name of the virtual machine or environment
   */
  name?: string;
  /**
   * @member {string} [location] The location of the new virtual machine or
   * environment
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing LabVirtualMachineCreationParameter.
 * Properties for creating a virtual machine.
 *
 */
export interface LabVirtualMachineCreationParameter {
  /**
   * @member {BulkCreationParameters} [bulkCreationParameters] The number of
   * virtual machine instances to create.
   */
  bulkCreationParameters?: BulkCreationParameters;
  /**
   * @member {string} [notes] The notes of the virtual machine.
   */
  notes?: string;
  /**
   * @member {string} [ownerObjectId] The object identifier of the owner of the
   * virtual machine.
   */
  ownerObjectId?: string;
  /**
   * @member {string} [ownerUserPrincipalName] The user principal name of the
   * virtual machine owner.
   */
  ownerUserPrincipalName?: string;
  /**
   * @member {string} [createdByUserId] The object identifier of the creator of
   * the virtual machine.
   */
  createdByUserId?: string;
  /**
   * @member {string} [createdByUser] The email address of creator of the
   * virtual machine.
   */
  createdByUser?: string;
  /**
   * @member {Date} [createdDate] The creation date of the virtual machine.
   */
  createdDate?: Date;
  /**
   * @member {string} [computeId] The resource identifier (Microsoft.Compute)
   * of the virtual machine.
   */
  computeId?: string;
  /**
   * @member {string} [customImageId] The custom image identifier of the
   * virtual machine.
   */
  customImageId?: string;
  /**
   * @member {string} [osType] The OS type of the virtual machine.
   */
  osType?: string;
  /**
   * @member {string} [size] The size of the virtual machine.
   */
  size?: string;
  /**
   * @member {string} [userName] The user name of the virtual machine.
   */
  userName?: string;
  /**
   * @member {string} [password] The password of the virtual machine
   * administrator.
   */
  password?: string;
  /**
   * @member {string} [sshKey] The SSH key of the virtual machine
   * administrator.
   */
  sshKey?: string;
  /**
   * @member {boolean} [isAuthenticationWithSshKey] Indicates whether this
   * virtual machine uses an SSH key for authentication.
   */
  isAuthenticationWithSshKey?: boolean;
  /**
   * @member {string} [fqdn] The fully-qualified domain name of the virtual
   * machine.
   */
  fqdn?: string;
  /**
   * @member {string} [labSubnetName] The lab subnet name of the virtual
   * machine.
   */
  labSubnetName?: string;
  /**
   * @member {string} [labVirtualNetworkId] The lab virtual network identifier
   * of the virtual machine.
   */
  labVirtualNetworkId?: string;
  /**
   * @member {boolean} [disallowPublicIpAddress] Indicates whether the virtual
   * machine is to be created without a public IP address.
   */
  disallowPublicIpAddress?: boolean;
  /**
   * @member {ArtifactInstallProperties[]} [artifacts] The artifacts to be
   * installed on the virtual machine.
   */
  artifacts?: ArtifactInstallProperties[];
  /**
   * @member {ArtifactDeploymentStatusProperties} [artifactDeploymentStatus]
   * The artifact deployment status for the virtual machine.
   */
  artifactDeploymentStatus?: ArtifactDeploymentStatusProperties;
  /**
   * @member {GalleryImageReference} [galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   */
  galleryImageReference?: GalleryImageReference;
  /**
   * @member {string} [planId] The id of the plan associated with the virtual
   * machine image
   */
  planId?: string;
  /**
   * @member {NetworkInterfaceProperties} [networkInterface] The network
   * interface properties.
   */
  networkInterface?: NetworkInterfaceProperties;
  /**
   * @member {Date} [expirationDate] The expiration date for VM.
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [allowClaim] Indicates whether another user can take
   * ownership of the virtual machine
   */
  allowClaim?: boolean;
  /**
   * @member {string} [storageType] Storage type to use for virtual machine
   * (i.e. Standard, Premium).
   */
  storageType?: string;
  /**
   * @member {VirtualMachineCreationSource} [virtualMachineCreationSource]
   * Tells source of creation of lab virtual machine. Output property only.
   * Possible values include: 'FromCustomImage', 'FromGalleryImage'
   */
  virtualMachineCreationSource?: VirtualMachineCreationSource;
  /**
   * @member {string} [environmentId] The resource ID of the environment that
   * contains this virtual machine, if any.
   */
  environmentId?: string;
  /**
   * @member {DataDiskProperties[]} [dataDiskParameters] New or existing data
   * disks to attach to the virtual machine after creation
   */
  dataDiskParameters?: DataDiskProperties[];
  /**
   * @member {ScheduleCreationParameter[]} [scheduleParameters] Virtual Machine
   * schedules to be created
   */
  scheduleParameters?: ScheduleCreationParameter[];
  /**
   * @member {string} [lastKnownPowerState] Last known compute power state
   * captured in DTL
   */
  lastKnownPowerState?: string;
  /**
   * @member {string} [name] The name of the virtual machine or environment
   */
  name?: string;
  /**
   * @member {string} [location] The location of the new virtual machine or
   * environment
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing FormulaPropertiesFromVm.
 * Information about a VM from which a formula is to be created.
 *
 */
export interface FormulaPropertiesFromVm {
  /**
   * @member {string} [labVmId] The identifier of the VM from which a formula
   * is to be created.
   */
  labVmId?: string;
}

/**
 * @interface
 * An interface representing Formula.
 * A formula for creating a VM, specifying an image base and other parameters
 *
 * @extends Resource
 */
export interface Formula extends Resource {
  /**
   * @member {string} [description] The description of the formula.
   */
  description?: string;
  /**
   * @member {string} [author] The author of the formula.
   */
  author?: string;
  /**
   * @member {string} [osType] The OS type of the formula.
   */
  osType?: string;
  /**
   * @member {Date} [creationDate] The creation date of the formula.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationDate?: Date;
  /**
   * @member {LabVirtualMachineCreationParameter} [formulaContent] The content
   * of the formula.
   */
  formulaContent?: LabVirtualMachineCreationParameter;
  /**
   * @member {FormulaPropertiesFromVm} [vm] Information about a VM from which a
   * formula is to be created.
   */
  vm?: FormulaPropertiesFromVm;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing GalleryImageReferenceFragment.
 * The reference information for an Azure Marketplace image.
 *
 */
export interface GalleryImageReferenceFragment {
  /**
   * @member {string} [offer] The offer of the gallery image.
   */
  offer?: string;
  /**
   * @member {string} [publisher] The publisher of the gallery image.
   */
  publisher?: string;
  /**
   * @member {string} [sku] The SKU of the gallery image.
   */
  sku?: string;
  /**
   * @member {string} [osType] The OS type of the gallery image.
   */
  osType?: string;
  /**
   * @member {string} [version] The version of the gallery image.
   */
  version?: string;
}

/**
 * @interface
 * An interface representing InboundNatRuleFragment.
 * A rule for NAT - exposing a VM's port (backendPort) on the public IP address
 * using a load balancer.
 *
 */
export interface InboundNatRuleFragment {
  /**
   * @member {TransportProtocol} [transportProtocol] The transport protocol for
   * the endpoint. Possible values include: 'Tcp', 'Udp'
   */
  transportProtocol?: TransportProtocol;
  /**
   * @member {number} [frontendPort] The external endpoint port of the inbound
   * connection. Possible values range between 1 and 65535, inclusive. If
   * unspecified, a value will be allocated automatically.
   */
  frontendPort?: number;
  /**
   * @member {number} [backendPort] The port to which the external traffic will
   * be redirected.
   */
  backendPort?: number;
}

/**
 * @interface
 * An interface representing SharedPublicIpAddressConfigurationFragment.
 * Properties of a virtual machine that determine how it is connected to a load
 * balancer.
 *
 */
export interface SharedPublicIpAddressConfigurationFragment {
  /**
   * @member {InboundNatRuleFragment[]} [inboundNatRules] The incoming NAT
   * rules
   */
  inboundNatRules?: InboundNatRuleFragment[];
}

/**
 * @interface
 * An interface representing NetworkInterfacePropertiesFragment.
 * Properties of a network interface.
 *
 */
export interface NetworkInterfacePropertiesFragment {
  /**
   * @member {string} [virtualNetworkId] The resource ID of the virtual
   * network.
   */
  virtualNetworkId?: string;
  /**
   * @member {string} [subnetId] The resource ID of the sub net.
   */
  subnetId?: string;
  /**
   * @member {string} [publicIpAddressId] The resource ID of the public IP
   * address.
   */
  publicIpAddressId?: string;
  /**
   * @member {string} [publicIpAddress] The public IP address.
   */
  publicIpAddress?: string;
  /**
   * @member {string} [privateIpAddress] The private IP address.
   */
  privateIpAddress?: string;
  /**
   * @member {string} [dnsName] The DNS name.
   */
  dnsName?: string;
  /**
   * @member {string} [rdpAuthority] The RdpAuthority property is a server DNS
   * host name or IP address followed by the service port number for RDP
   * (Remote Desktop Protocol).
   */
  rdpAuthority?: string;
  /**
   * @member {string} [sshAuthority] The SshAuthority property is a server DNS
   * host name or IP address followed by the service port number for SSH.
   */
  sshAuthority?: string;
  /**
   * @member {SharedPublicIpAddressConfigurationFragment}
   * [sharedPublicIpAddressConfiguration] The configuration for sharing a
   * public IP address across multiple virtual machines.
   */
  sharedPublicIpAddressConfiguration?: SharedPublicIpAddressConfigurationFragment;
}

/**
 * @interface
 * An interface representing ScheduleCreationParameterFragment.
 * Properties for creating a schedule.
 *
 */
export interface ScheduleCreationParameterFragment {
  /**
   * @member {EnableStatus} [status] The status of the schedule (i.e. Enabled,
   * Disabled). Possible values include: 'Enabled', 'Disabled'
   */
  status?: EnableStatus;
  /**
   * @member {string} [taskType] The task type of the schedule (e.g.
   * LabVmsShutdownTask, LabVmAutoStart).
   */
  taskType?: string;
  /**
   * @member {WeekDetailsFragment} [weeklyRecurrence] If the schedule will
   * occur only some days of the week, specify the weekly recurrence.
   */
  weeklyRecurrence?: WeekDetailsFragment;
  /**
   * @member {DayDetailsFragment} [dailyRecurrence] If the schedule will occur
   * once each day of the week, specify the daily recurrence.
   */
  dailyRecurrence?: DayDetailsFragment;
  /**
   * @member {HourDetailsFragment} [hourlyRecurrence] If the schedule will
   * occur multiple times a day, specify the hourly recurrence.
   */
  hourlyRecurrence?: HourDetailsFragment;
  /**
   * @member {string} [timeZoneId] The time zone ID (e.g. Pacific Standard
   * time).
   */
  timeZoneId?: string;
  /**
   * @member {NotificationSettingsFragment} [notificationSettings] Notification
   * settings.
   */
  notificationSettings?: NotificationSettingsFragment;
  /**
   * @member {string} [targetResourceId] The resource ID to which the schedule
   * belongs
   */
  targetResourceId?: string;
  /**
   * @member {string} [name] The name of the virtual machine or environment
   */
  name?: string;
  /**
   * @member {string} [location] The location of the new virtual machine or
   * environment
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing LabVirtualMachineCreationParameterFragment.
 * Properties for creating a virtual machine.
 *
 */
export interface LabVirtualMachineCreationParameterFragment {
  /**
   * @member {BulkCreationParametersFragment} [bulkCreationParameters] The
   * number of virtual machine instances to create.
   */
  bulkCreationParameters?: BulkCreationParametersFragment;
  /**
   * @member {string} [notes] The notes of the virtual machine.
   */
  notes?: string;
  /**
   * @member {string} [ownerObjectId] The object identifier of the owner of the
   * virtual machine.
   */
  ownerObjectId?: string;
  /**
   * @member {string} [ownerUserPrincipalName] The user principal name of the
   * virtual machine owner.
   */
  ownerUserPrincipalName?: string;
  /**
   * @member {string} [createdByUserId] The object identifier of the creator of
   * the virtual machine.
   */
  createdByUserId?: string;
  /**
   * @member {string} [createdByUser] The email address of creator of the
   * virtual machine.
   */
  createdByUser?: string;
  /**
   * @member {Date} [createdDate] The creation date of the virtual machine.
   */
  createdDate?: Date;
  /**
   * @member {string} [computeId] The resource identifier (Microsoft.Compute)
   * of the virtual machine.
   */
  computeId?: string;
  /**
   * @member {string} [customImageId] The custom image identifier of the
   * virtual machine.
   */
  customImageId?: string;
  /**
   * @member {string} [osType] The OS type of the virtual machine.
   */
  osType?: string;
  /**
   * @member {string} [size] The size of the virtual machine.
   */
  size?: string;
  /**
   * @member {string} [userName] The user name of the virtual machine.
   */
  userName?: string;
  /**
   * @member {string} [password] The password of the virtual machine
   * administrator.
   */
  password?: string;
  /**
   * @member {string} [sshKey] The SSH key of the virtual machine
   * administrator.
   */
  sshKey?: string;
  /**
   * @member {boolean} [isAuthenticationWithSshKey] Indicates whether this
   * virtual machine uses an SSH key for authentication.
   */
  isAuthenticationWithSshKey?: boolean;
  /**
   * @member {string} [fqdn] The fully-qualified domain name of the virtual
   * machine.
   */
  fqdn?: string;
  /**
   * @member {string} [labSubnetName] The lab subnet name of the virtual
   * machine.
   */
  labSubnetName?: string;
  /**
   * @member {string} [labVirtualNetworkId] The lab virtual network identifier
   * of the virtual machine.
   */
  labVirtualNetworkId?: string;
  /**
   * @member {boolean} [disallowPublicIpAddress] Indicates whether the virtual
   * machine is to be created without a public IP address.
   */
  disallowPublicIpAddress?: boolean;
  /**
   * @member {ArtifactInstallPropertiesFragment[]} [artifacts] The artifacts to
   * be installed on the virtual machine.
   */
  artifacts?: ArtifactInstallPropertiesFragment[];
  /**
   * @member {ArtifactDeploymentStatusPropertiesFragment}
   * [artifactDeploymentStatus] The artifact deployment status for the virtual
   * machine.
   */
  artifactDeploymentStatus?: ArtifactDeploymentStatusPropertiesFragment;
  /**
   * @member {GalleryImageReferenceFragment} [galleryImageReference] The
   * Microsoft Azure Marketplace image reference of the virtual machine.
   */
  galleryImageReference?: GalleryImageReferenceFragment;
  /**
   * @member {string} [planId] The id of the plan associated with the virtual
   * machine image
   */
  planId?: string;
  /**
   * @member {NetworkInterfacePropertiesFragment} [networkInterface] The
   * network interface properties.
   */
  networkInterface?: NetworkInterfacePropertiesFragment;
  /**
   * @member {Date} [expirationDate] The expiration date for VM.
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [allowClaim] Indicates whether another user can take
   * ownership of the virtual machine
   */
  allowClaim?: boolean;
  /**
   * @member {string} [storageType] Storage type to use for virtual machine
   * (i.e. Standard, Premium).
   */
  storageType?: string;
  /**
   * @member {VirtualMachineCreationSource} [virtualMachineCreationSource]
   * Tells source of creation of lab virtual machine. Output property only.
   * Possible values include: 'FromCustomImage', 'FromGalleryImage'
   */
  virtualMachineCreationSource?: VirtualMachineCreationSource;
  /**
   * @member {string} [environmentId] The resource ID of the environment that
   * contains this virtual machine, if any.
   */
  environmentId?: string;
  /**
   * @member {DataDiskPropertiesFragment[]} [dataDiskParameters] New or
   * existing data disks to attach to the virtual machine after creation
   */
  dataDiskParameters?: DataDiskPropertiesFragment[];
  /**
   * @member {ScheduleCreationParameterFragment[]} [scheduleParameters] Virtual
   * Machine schedules to be created
   */
  scheduleParameters?: ScheduleCreationParameterFragment[];
  /**
   * @member {string} [lastKnownPowerState] Last known compute power state
   * captured in DTL
   */
  lastKnownPowerState?: string;
  /**
   * @member {string} [name] The name of the virtual machine or environment
   */
  name?: string;
  /**
   * @member {string} [location] The location of the new virtual machine or
   * environment
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The tags of the
   * resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing FormulaPropertiesFromVmFragment.
 * Information about a VM from which a formula is to be created.
 *
 */
export interface FormulaPropertiesFromVmFragment {
  /**
   * @member {string} [labVmId] The identifier of the VM from which a formula
   * is to be created.
   */
  labVmId?: string;
}

/**
 * @interface
 * An interface representing FormulaFragment.
 * A formula for creating a VM, specifying an image base and other parameters
 *
 * @extends UpdateResource
 */
export interface FormulaFragment extends UpdateResource {
  /**
   * @member {string} [description] The description of the formula.
   */
  description?: string;
  /**
   * @member {string} [author] The author of the formula.
   */
  author?: string;
  /**
   * @member {string} [osType] The OS type of the formula.
   */
  osType?: string;
  /**
   * @member {LabVirtualMachineCreationParameterFragment} [formulaContent] The
   * content of the formula.
   */
  formulaContent?: LabVirtualMachineCreationParameterFragment;
  /**
   * @member {FormulaPropertiesFromVmFragment} [vm] Information about a VM from
   * which a formula is to be created.
   */
  vm?: FormulaPropertiesFromVmFragment;
}

/**
 * @interface
 * An interface representing GalleryImage.
 * A gallery image.
 *
 * @extends Resource
 */
export interface GalleryImage extends Resource {
  /**
   * @member {string} [author] The author of the gallery image.
   */
  author?: string;
  /**
   * @member {Date} [createdDate] The creation date of the gallery image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [description] The description of the gallery image.
   */
  description?: string;
  /**
   * @member {GalleryImageReference} [imageReference] The image reference of
   * the gallery image.
   */
  imageReference?: GalleryImageReference;
  /**
   * @member {string} [icon] The icon of the gallery image.
   */
  icon?: string;
  /**
   * @member {boolean} [enabled] Indicates whether this gallery image is
   * enabled.
   */
  enabled?: boolean;
  /**
   * @member {string} [planId] The third party plan that applies to this image
   */
  planId?: string;
  /**
   * @member {boolean} [isPlanAuthorized] Indicates if the plan has been
   * authorized for programmatic deployment.
   */
  isPlanAuthorized?: boolean;
}

/**
 * @interface
 * An interface representing ParameterInfo.
 * Information about an artifact's parameter.
 *
 */
export interface ParameterInfo {
  /**
   * @member {string} [name] The name of the artifact parameter.
   */
  name?: string;
  /**
   * @member {string} [value] The value of the artifact parameter.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing GenerateArmTemplateRequest.
 * Parameters for generating an ARM template for deploying artifacts.
 *
 */
export interface GenerateArmTemplateRequest {
  /**
   * @member {string} [virtualMachineName] The resource name of the virtual
   * machine.
   */
  virtualMachineName?: string;
  /**
   * @member {ParameterInfo[]} [parameters] The parameters of the ARM template.
   */
  parameters?: ParameterInfo[];
  /**
   * @member {string} [location] The location of the virtual machine.
   */
  location?: string;
  /**
   * @member {FileUploadOptions} [fileUploadOptions] Options for uploading the
   * files for the artifact. UploadFilesAndGenerateSasTokens is the default
   * value. Possible values include: 'UploadFilesAndGenerateSasTokens', 'None'
   */
  fileUploadOptions?: FileUploadOptions;
}

/**
 * @interface
 * An interface representing GenerateUploadUriParameter.
 * Properties for generating an upload URI.
 *
 */
export interface GenerateUploadUriParameter {
  /**
   * @member {string} [blobName] The blob name of the upload URI.
   */
  blobName?: string;
}

/**
 * @interface
 * An interface representing GenerateUploadUriResponse.
 * Reponse body for generating an upload URI.
 *
 */
export interface GenerateUploadUriResponse {
  /**
   * @member {string} [uploadUri] The upload URI for the VHD.
   */
  uploadUri?: string;
}

/**
 * @interface
 * An interface representing IdentityProperties.
 * Properties of a managed identity
 *
 */
export interface IdentityProperties {
  /**
   * @member {string} [type] Managed identity.
   */
  type?: string;
  /**
   * @member {string} [principalId] The principal id of resource identity.
   */
  principalId?: string;
  /**
   * @member {string} [tenantId] The tenant identifier of resource.
   */
  tenantId?: string;
  /**
   * @member {string} [clientSecretUrl] The client secret URL of the identity.
   */
  clientSecretUrl?: string;
}

/**
 * @interface
 * An interface representing ImportLabVirtualMachineRequest.
 * This represents the payload required to import a virtual machine from a
 * different lab into the current one
 *
 */
export interface ImportLabVirtualMachineRequest {
  /**
   * @member {string} [sourceVirtualMachineResourceId] The full resource ID of
   * the virtual machine to be imported.
   */
  sourceVirtualMachineResourceId?: string;
  /**
   * @member {string} [destinationVirtualMachineName] The name of the virtual
   * machine in the destination lab
   */
  destinationVirtualMachineName?: string;
}

/**
 * @interface
 * An interface representing LabAnnouncementProperties.
 * Properties of a lab's announcement banner
 *
 */
export interface LabAnnouncementProperties {
  /**
   * @member {string} [title] The plain text title for the lab announcement
   */
  title?: string;
  /**
   * @member {string} [markdown] The markdown text (if any) that this lab
   * displays in the UI. If left empty/null, nothing will be shown.
   */
  markdown?: string;
  /**
   * @member {EnableStatus} [enabled] Is the lab announcement active/enabled at
   * this time?. Possible values include: 'Enabled', 'Disabled'
   */
  enabled?: EnableStatus;
  /**
   * @member {Date} [expirationDate] The time at which the announcement expires
   * (null for never)
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [expired] Has this announcement expired?
   */
  expired?: boolean;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing LabSupportProperties.
 * Properties of a lab's support banner
 *
 */
export interface LabSupportProperties {
  /**
   * @member {EnableStatus} [enabled] Is the lab support banner active/enabled
   * at this time?. Possible values include: 'Enabled', 'Disabled'
   */
  enabled?: EnableStatus;
  /**
   * @member {string} [markdown] The markdown text (if any) that this lab
   * displays in the UI. If left empty/null, nothing will be shown.
   */
  markdown?: string;
}

/**
 * @interface
 * An interface representing Lab.
 * A lab.
 *
 * @extends Resource
 */
export interface Lab extends Resource {
  /**
   * @member {string} [defaultStorageAccount] The lab's default storage
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly defaultStorageAccount?: string;
  /**
   * @member {string} [defaultPremiumStorageAccount] The lab's default premium
   * storage account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly defaultPremiumStorageAccount?: string;
  /**
   * @member {string} [artifactsStorageAccount] The lab's artifact storage
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly artifactsStorageAccount?: string;
  /**
   * @member {string} [premiumDataDiskStorageAccount] The lab's premium data
   * disk storage account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly premiumDataDiskStorageAccount?: string;
  /**
   * @member {string} [vaultName] The lab's Key vault.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly vaultName?: string;
  /**
   * @member {StorageType} [labStorageType] Type of storage used by the lab. It
   * can be either Premium or Standard. Default is Premium. Possible values
   * include: 'Standard', 'Premium'
   */
  labStorageType?: StorageType;
  /**
   * @member {string[]} [mandatoryArtifactsResourceIdsLinux] The ordered list
   * of artifact resource IDs that should be applied on all Linux VM creations
   * by default, prior to the artifacts specified by the user.
   */
  mandatoryArtifactsResourceIdsLinux?: string[];
  /**
   * @member {string[]} [mandatoryArtifactsResourceIdsWindows] The ordered list
   * of artifact resource IDs that should be applied on all Windows VM
   * creations by default, prior to the artifacts specified by the user.
   */
  mandatoryArtifactsResourceIdsWindows?: string[];
  /**
   * @member {Date} [createdDate] The creation date of the lab.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {PremiumDataDisk} [premiumDataDisks] The setting to enable usage
   * of premium data disks.
   * When its value is 'Enabled', creation of standard or premium data disks is
   * allowed.
   * When its value is 'Disabled', only creation of standard data disks is
   * allowed. Possible values include: 'Disabled', 'Enabled'
   */
  premiumDataDisks?: PremiumDataDisk;
  /**
   * @member {EnvironmentPermission} [environmentPermission] The access rights
   * to be granted to the user when provisioning an environment. Possible
   * values include: 'Reader', 'Contributor'
   */
  environmentPermission?: EnvironmentPermission;
  /**
   * @member {LabAnnouncementProperties} [announcement] The properties of any
   * lab announcement associated with this lab
   */
  announcement?: LabAnnouncementProperties;
  /**
   * @member {LabSupportProperties} [support] The properties of any lab support
   * message associated with this lab
   */
  support?: LabSupportProperties;
  /**
   * @member {string} [vmCreationResourceGroup] The resource group in which lab
   * virtual machines will be created in.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly vmCreationResourceGroup?: string;
  /**
   * @member {string} [publicIpId] The public IP address for the lab's load
   * balancer.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publicIpId?: string;
  /**
   * @member {string} [loadBalancerId] The load balancer used to for lab VMs
   * that use shared IP address.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly loadBalancerId?: string;
  /**
   * @member {string} [networkSecurityGroupId] The Network Security Group
   * attached to the lab VMs Network interfaces to restrict open ports.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly networkSecurityGroupId?: string;
  /**
   * @member {{ [propertyName: string]: string }} [extendedProperties] Extended
   * properties of the lab used for experimental features
   */
  extendedProperties?: { [propertyName: string]: string };
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing LabAnnouncementPropertiesFragment.
 * Properties of a lab's announcement banner
 *
 */
export interface LabAnnouncementPropertiesFragment {
  /**
   * @member {string} [title] The plain text title for the lab announcement
   */
  title?: string;
  /**
   * @member {string} [markdown] The markdown text (if any) that this lab
   * displays in the UI. If left empty/null, nothing will be shown.
   */
  markdown?: string;
  /**
   * @member {EnableStatus} [enabled] Is the lab announcement active/enabled at
   * this time?. Possible values include: 'Enabled', 'Disabled'
   */
  enabled?: EnableStatus;
  /**
   * @member {Date} [expirationDate] The time at which the announcement expires
   * (null for never)
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [expired] Has this announcement expired?
   */
  expired?: boolean;
}

/**
 * @interface
 * An interface representing TargetCostProperties.
 * Properties of a cost target.
 *
 */
export interface TargetCostProperties {
  /**
   * @member {TargetCostStatus} [status] Target cost status. Possible values
   * include: 'Enabled', 'Disabled'
   */
  status?: TargetCostStatus;
  /**
   * @member {number} [target] Lab target cost
   */
  target?: number;
  /**
   * @member {CostThresholdProperties[]} [costThresholds] Cost thresholds.
   */
  costThresholds?: CostThresholdProperties[];
  /**
   * @member {Date} [cycleStartDateTime] Reporting cycle start date.
   */
  cycleStartDateTime?: Date;
  /**
   * @member {Date} [cycleEndDateTime] Reporting cycle end date.
   */
  cycleEndDateTime?: Date;
  /**
   * @member {ReportingCycleType} [cycleType] Reporting cycle type. Possible
   * values include: 'CalendarMonth', 'Custom'
   */
  cycleType?: ReportingCycleType;
}

/**
 * @interface
 * An interface representing LabCostSummaryProperties.
 * The properties of the cost summary.
 *
 */
export interface LabCostSummaryProperties {
  /**
   * @member {number} [estimatedLabCost] The cost component of the cost item.
   */
  estimatedLabCost?: number;
}

/**
 * @interface
 * An interface representing LabCostDetailsProperties.
 * The properties of a lab cost item.
 *
 */
export interface LabCostDetailsProperties {
  /**
   * @member {Date} [date] The date of the cost item.
   */
  date?: Date;
  /**
   * @member {number} [cost] The cost component of the cost item.
   */
  cost?: number;
  /**
   * @member {CostType} [costType] The type of the cost. Possible values
   * include: 'Unavailable', 'Reported', 'Projected'
   */
  costType?: CostType;
}

/**
 * @interface
 * An interface representing LabResourceCostProperties.
 * The properties of a resource cost item.
 *
 */
export interface LabResourceCostProperties {
  /**
   * @member {string} [resourcename] The name of the resource.
   */
  resourcename?: string;
  /**
   * @member {string} [resourceUId] The unique identifier of the resource.
   */
  resourceUId?: string;
  /**
   * @member {number} [resourceCost] The cost component of the resource cost
   * item.
   */
  resourceCost?: number;
  /**
   * @member {string} [resourceType] The logical resource type (ex.
   * virtualmachine, storageaccount)
   */
  resourceType?: string;
  /**
   * @member {string} [resourceOwner] The owner of the resource (ex.
   * janedoe@microsoft.com)
   */
  resourceOwner?: string;
  /**
   * @member {string} [resourcePricingTier] The category of the resource (ex.
   * Premium_LRS, Standard_DS1)
   */
  resourcePricingTier?: string;
  /**
   * @member {string} [resourceStatus] The status of the resource (ex. Active)
   */
  resourceStatus?: string;
  /**
   * @member {string} [resourceId] The ID of the resource
   */
  resourceId?: string;
  /**
   * @member {string} [externalResourceId] The ID of the external resource
   */
  externalResourceId?: string;
}

/**
 * @interface
 * An interface representing LabCost.
 * A cost item.
 *
 * @extends Resource
 */
export interface LabCost extends Resource {
  /**
   * @member {TargetCostProperties} [targetCost] The target cost properties
   */
  targetCost?: TargetCostProperties;
  /**
   * @member {LabCostSummaryProperties} [labCostSummary] The lab cost summary
   * component of the cost data.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly labCostSummary?: LabCostSummaryProperties;
  /**
   * @member {LabCostDetailsProperties[]} [labCostDetails] The lab cost details
   * component of the cost data.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly labCostDetails?: LabCostDetailsProperties[];
  /**
   * @member {LabResourceCostProperties[]} [resourceCosts] The resource cost
   * component of the cost data.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceCosts?: LabResourceCostProperties[];
  /**
   * @member {string} [currencyCode] The currency code of the cost.
   */
  currencyCode?: string;
  /**
   * @member {Date} [startDateTime] The start time of the cost data.
   */
  startDateTime?: Date;
  /**
   * @member {Date} [endDateTime] The end time of the cost data.
   */
  endDateTime?: Date;
  /**
   * @member {Date} [createdDate] The creation date of the cost.
   */
  createdDate?: Date;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing LabSupportPropertiesFragment.
 * Properties of a lab's support banner
 *
 */
export interface LabSupportPropertiesFragment {
  /**
   * @member {EnableStatus} [enabled] Is the lab support banner active/enabled
   * at this time?. Possible values include: 'Enabled', 'Disabled'
   */
  enabled?: EnableStatus;
  /**
   * @member {string} [markdown] The markdown text (if any) that this lab
   * displays in the UI. If left empty/null, nothing will be shown.
   */
  markdown?: string;
}

/**
 * @interface
 * An interface representing LabFragment.
 * A lab.
 *
 * @extends UpdateResource
 */
export interface LabFragment extends UpdateResource {
  /**
   * @member {StorageType} [labStorageType] Type of storage used by the lab. It
   * can be either Premium or Standard. Default is Premium. Possible values
   * include: 'Standard', 'Premium'
   */
  labStorageType?: StorageType;
  /**
   * @member {string[]} [mandatoryArtifactsResourceIdsLinux] The ordered list
   * of artifact resource IDs that should be applied on all Linux VM creations
   * by default, prior to the artifacts specified by the user.
   */
  mandatoryArtifactsResourceIdsLinux?: string[];
  /**
   * @member {string[]} [mandatoryArtifactsResourceIdsWindows] The ordered list
   * of artifact resource IDs that should be applied on all Windows VM
   * creations by default, prior to the artifacts specified by the user.
   */
  mandatoryArtifactsResourceIdsWindows?: string[];
  /**
   * @member {PremiumDataDisk} [premiumDataDisks] The setting to enable usage
   * of premium data disks.
   * When its value is 'Enabled', creation of standard or premium data disks is
   * allowed.
   * When its value is 'Disabled', only creation of standard data disks is
   * allowed. Possible values include: 'Disabled', 'Enabled'
   */
  premiumDataDisks?: PremiumDataDisk;
  /**
   * @member {EnvironmentPermission} [environmentPermission] The access rights
   * to be granted to the user when provisioning an environment. Possible
   * values include: 'Reader', 'Contributor'
   */
  environmentPermission?: EnvironmentPermission;
  /**
   * @member {LabAnnouncementPropertiesFragment} [announcement] The properties
   * of any lab announcement associated with this lab
   */
  announcement?: LabAnnouncementPropertiesFragment;
  /**
   * @member {LabSupportPropertiesFragment} [support] The properties of any lab
   * support message associated with this lab
   */
  support?: LabSupportPropertiesFragment;
  /**
   * @member {{ [propertyName: string]: string }} [extendedProperties] Extended
   * properties of the lab used for experimental features
   */
  extendedProperties?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing LabVhd.
 * Properties of a VHD in the lab.
 *
 */
export interface LabVhd {
  /**
   * @member {string} [id] The URI to the VHD.
   */
  id?: string;
}

/**
 * @interface
 * An interface representing LabVirtualMachine.
 * A virtual machine.
 *
 * @extends Resource
 */
export interface LabVirtualMachine extends Resource {
  /**
   * @member {string} [notes] The notes of the virtual machine.
   */
  notes?: string;
  /**
   * @member {string} [ownerObjectId] The object identifier of the owner of the
   * virtual machine.
   */
  ownerObjectId?: string;
  /**
   * @member {string} [ownerUserPrincipalName] The user principal name of the
   * virtual machine owner.
   */
  ownerUserPrincipalName?: string;
  /**
   * @member {string} [createdByUserId] The object identifier of the creator of
   * the virtual machine.
   */
  createdByUserId?: string;
  /**
   * @member {string} [createdByUser] The email address of creator of the
   * virtual machine.
   */
  createdByUser?: string;
  /**
   * @member {Date} [createdDate] The creation date of the virtual machine.
   */
  createdDate?: Date;
  /**
   * @member {string} [computeId] The resource identifier (Microsoft.Compute)
   * of the virtual machine.
   */
  computeId?: string;
  /**
   * @member {string} [customImageId] The custom image identifier of the
   * virtual machine.
   */
  customImageId?: string;
  /**
   * @member {string} [osType] The OS type of the virtual machine.
   */
  osType?: string;
  /**
   * @member {string} [size] The size of the virtual machine.
   */
  size?: string;
  /**
   * @member {string} [userName] The user name of the virtual machine.
   */
  userName?: string;
  /**
   * @member {string} [password] The password of the virtual machine
   * administrator.
   */
  password?: string;
  /**
   * @member {string} [sshKey] The SSH key of the virtual machine
   * administrator.
   */
  sshKey?: string;
  /**
   * @member {boolean} [isAuthenticationWithSshKey] Indicates whether this
   * virtual machine uses an SSH key for authentication.
   */
  isAuthenticationWithSshKey?: boolean;
  /**
   * @member {string} [fqdn] The fully-qualified domain name of the virtual
   * machine.
   */
  fqdn?: string;
  /**
   * @member {string} [labSubnetName] The lab subnet name of the virtual
   * machine.
   */
  labSubnetName?: string;
  /**
   * @member {string} [labVirtualNetworkId] The lab virtual network identifier
   * of the virtual machine.
   */
  labVirtualNetworkId?: string;
  /**
   * @member {boolean} [disallowPublicIpAddress] Indicates whether the virtual
   * machine is to be created without a public IP address.
   */
  disallowPublicIpAddress?: boolean;
  /**
   * @member {ArtifactInstallProperties[]} [artifacts] The artifacts to be
   * installed on the virtual machine.
   */
  artifacts?: ArtifactInstallProperties[];
  /**
   * @member {ArtifactDeploymentStatusProperties} [artifactDeploymentStatus]
   * The artifact deployment status for the virtual machine.
   */
  artifactDeploymentStatus?: ArtifactDeploymentStatusProperties;
  /**
   * @member {GalleryImageReference} [galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   */
  galleryImageReference?: GalleryImageReference;
  /**
   * @member {string} [planId] The id of the plan associated with the virtual
   * machine image
   */
  planId?: string;
  /**
   * @member {ComputeVmProperties} [computeVm] The compute virtual machine
   * properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly computeVm?: ComputeVmProperties;
  /**
   * @member {NetworkInterfaceProperties} [networkInterface] The network
   * interface properties.
   */
  networkInterface?: NetworkInterfaceProperties;
  /**
   * @member {ApplicableSchedule} [applicableSchedule] The applicable schedule
   * for the virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly applicableSchedule?: ApplicableSchedule;
  /**
   * @member {Date} [expirationDate] The expiration date for VM.
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [allowClaim] Indicates whether another user can take
   * ownership of the virtual machine
   */
  allowClaim?: boolean;
  /**
   * @member {string} [storageType] Storage type to use for virtual machine
   * (i.e. Standard, Premium).
   */
  storageType?: string;
  /**
   * @member {VirtualMachineCreationSource} [virtualMachineCreationSource]
   * Tells source of creation of lab virtual machine. Output property only.
   * Possible values include: 'FromCustomImage', 'FromGalleryImage'
   */
  virtualMachineCreationSource?: VirtualMachineCreationSource;
  /**
   * @member {string} [environmentId] The resource ID of the environment that
   * contains this virtual machine, if any.
   */
  environmentId?: string;
  /**
   * @member {DataDiskProperties[]} [dataDiskParameters] New or existing data
   * disks to attach to the virtual machine after creation
   */
  dataDiskParameters?: DataDiskProperties[];
  /**
   * @member {ScheduleCreationParameter[]} [scheduleParameters] Virtual Machine
   * schedules to be created
   */
  scheduleParameters?: ScheduleCreationParameter[];
  /**
   * @member {string} [lastKnownPowerState] Last known compute power state
   * captured in DTL
   */
  lastKnownPowerState?: string;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing LabVirtualMachineFragment.
 * A virtual machine.
 *
 * @extends UpdateResource
 */
export interface LabVirtualMachineFragment extends UpdateResource {
  /**
   * @member {string} [notes] The notes of the virtual machine.
   */
  notes?: string;
  /**
   * @member {string} [ownerObjectId] The object identifier of the owner of the
   * virtual machine.
   */
  ownerObjectId?: string;
  /**
   * @member {string} [ownerUserPrincipalName] The user principal name of the
   * virtual machine owner.
   */
  ownerUserPrincipalName?: string;
  /**
   * @member {string} [createdByUserId] The object identifier of the creator of
   * the virtual machine.
   */
  createdByUserId?: string;
  /**
   * @member {string} [createdByUser] The email address of creator of the
   * virtual machine.
   */
  createdByUser?: string;
  /**
   * @member {Date} [createdDate] The creation date of the virtual machine.
   */
  createdDate?: Date;
  /**
   * @member {string} [computeId] The resource identifier (Microsoft.Compute)
   * of the virtual machine.
   */
  computeId?: string;
  /**
   * @member {string} [customImageId] The custom image identifier of the
   * virtual machine.
   */
  customImageId?: string;
  /**
   * @member {string} [osType] The OS type of the virtual machine.
   */
  osType?: string;
  /**
   * @member {string} [size] The size of the virtual machine.
   */
  size?: string;
  /**
   * @member {string} [userName] The user name of the virtual machine.
   */
  userName?: string;
  /**
   * @member {string} [password] The password of the virtual machine
   * administrator.
   */
  password?: string;
  /**
   * @member {string} [sshKey] The SSH key of the virtual machine
   * administrator.
   */
  sshKey?: string;
  /**
   * @member {boolean} [isAuthenticationWithSshKey] Indicates whether this
   * virtual machine uses an SSH key for authentication.
   */
  isAuthenticationWithSshKey?: boolean;
  /**
   * @member {string} [fqdn] The fully-qualified domain name of the virtual
   * machine.
   */
  fqdn?: string;
  /**
   * @member {string} [labSubnetName] The lab subnet name of the virtual
   * machine.
   */
  labSubnetName?: string;
  /**
   * @member {string} [labVirtualNetworkId] The lab virtual network identifier
   * of the virtual machine.
   */
  labVirtualNetworkId?: string;
  /**
   * @member {boolean} [disallowPublicIpAddress] Indicates whether the virtual
   * machine is to be created without a public IP address.
   */
  disallowPublicIpAddress?: boolean;
  /**
   * @member {ArtifactInstallPropertiesFragment[]} [artifacts] The artifacts to
   * be installed on the virtual machine.
   */
  artifacts?: ArtifactInstallPropertiesFragment[];
  /**
   * @member {ArtifactDeploymentStatusPropertiesFragment}
   * [artifactDeploymentStatus] The artifact deployment status for the virtual
   * machine.
   */
  artifactDeploymentStatus?: ArtifactDeploymentStatusPropertiesFragment;
  /**
   * @member {GalleryImageReferenceFragment} [galleryImageReference] The
   * Microsoft Azure Marketplace image reference of the virtual machine.
   */
  galleryImageReference?: GalleryImageReferenceFragment;
  /**
   * @member {string} [planId] The id of the plan associated with the virtual
   * machine image
   */
  planId?: string;
  /**
   * @member {NetworkInterfacePropertiesFragment} [networkInterface] The
   * network interface properties.
   */
  networkInterface?: NetworkInterfacePropertiesFragment;
  /**
   * @member {Date} [expirationDate] The expiration date for VM.
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [allowClaim] Indicates whether another user can take
   * ownership of the virtual machine
   */
  allowClaim?: boolean;
  /**
   * @member {string} [storageType] Storage type to use for virtual machine
   * (i.e. Standard, Premium).
   */
  storageType?: string;
  /**
   * @member {VirtualMachineCreationSource} [virtualMachineCreationSource]
   * Tells source of creation of lab virtual machine. Output property only.
   * Possible values include: 'FromCustomImage', 'FromGalleryImage'
   */
  virtualMachineCreationSource?: VirtualMachineCreationSource;
  /**
   * @member {string} [environmentId] The resource ID of the environment that
   * contains this virtual machine, if any.
   */
  environmentId?: string;
  /**
   * @member {DataDiskPropertiesFragment[]} [dataDiskParameters] New or
   * existing data disks to attach to the virtual machine after creation
   */
  dataDiskParameters?: DataDiskPropertiesFragment[];
  /**
   * @member {ScheduleCreationParameterFragment[]} [scheduleParameters] Virtual
   * Machine schedules to be created
   */
  scheduleParameters?: ScheduleCreationParameterFragment[];
  /**
   * @member {string} [lastKnownPowerState] Last known compute power state
   * captured in DTL
   */
  lastKnownPowerState?: string;
}

/**
 * @interface
 * An interface representing NotificationChannel.
 * A notification.
 *
 * @extends Resource
 */
export interface NotificationChannel extends Resource {
  /**
   * @member {string} [webHookUrl] The webhook URL to send notifications to.
   */
  webHookUrl?: string;
  /**
   * @member {string} [emailRecipient] The email recipient to send
   * notifications to (can be a list of semi-colon seperated email addresses).
   */
  emailRecipient?: string;
  /**
   * @member {string} [notificationLocale] The locale to use when sending a
   * notification (fallback for unsupported languages is EN).
   */
  notificationLocale?: string;
  /**
   * @member {string} [description] Description of notification.
   */
  description?: string;
  /**
   * @member {Event[]} [events] The list of event for which this notification
   * is enabled.
   */
  events?: Event[];
  /**
   * @member {Date} [createdDate] The creation date of the notification
   * channel.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing NotificationChannelFragment.
 * A notification.
 *
 * @extends UpdateResource
 */
export interface NotificationChannelFragment extends UpdateResource {
  /**
   * @member {string} [webHookUrl] The webhook URL to send notifications to.
   */
  webHookUrl?: string;
  /**
   * @member {string} [emailRecipient] The email recipient to send
   * notifications to (can be a list of semi-colon seperated email addresses).
   */
  emailRecipient?: string;
  /**
   * @member {string} [notificationLocale] The locale to use when sending a
   * notification (fallback for unsupported languages is EN).
   */
  notificationLocale?: string;
  /**
   * @member {string} [description] Description of notification.
   */
  description?: string;
  /**
   * @member {EventFragment[]} [events] The list of event for which this
   * notification is enabled.
   */
  events?: EventFragment[];
}

/**
 * @interface
 * An interface representing NotifyParameters.
 * Properties for generating a Notification.
 *
 */
export interface NotifyParameters {
  /**
   * @member {NotificationChannelEventType} [eventName] The type of event (i.e.
   * AutoShutdown, Cost). Possible values include: 'AutoShutdown', 'Cost'
   */
  eventName?: NotificationChannelEventType;
  /**
   * @member {string} [jsonPayload] Properties for the notification in json
   * format.
   */
  jsonPayload?: string;
}

/**
 * @interface
 * An interface representing OperationError.
 * Error details for the operation in case of a failure.
 *
 */
export interface OperationError {
  /**
   * @member {string} [code] The error code of the operation error.
   */
  code?: string;
  /**
   * @member {string} [message] The error message of the operation error.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing OperationMetadataDisplay.
 * The object that describes the operations
 *
 */
export interface OperationMetadataDisplay {
  /**
   * @member {string} [provider] Friendly name of the resource provider
   */
  provider?: string;
  /**
   * @member {string} [resource] Resource type on which the operation is
   * performed.
   */
  resource?: string;
  /**
   * @member {string} [operation] Operation type: read, write, delete,
   * listKeys/action, etc.
   */
  operation?: string;
  /**
   * @member {string} [description] Friendly name of the operation
   */
  description?: string;
}

/**
 * @interface
 * An interface representing OperationMetadata.
 * The REST API operation supported by DevTestLab ResourceProvider.
 *
 */
export interface OperationMetadata {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationMetadataDisplay} [display] The object that describes the
   * operations
   */
  display?: OperationMetadataDisplay;
}

/**
 * @interface
 * An interface representing OperationResult.
 * An Operation Result
 *
 */
export interface OperationResult {
  /**
   * @member {string} [status] The operation status.
   */
  status?: string;
  /**
   * @member {HttpStatusCode} [statusCode] The status code for the operation.
   * Possible values include: 'Continue', 'SwitchingProtocols', 'OK',
   * 'Created', 'Accepted', 'NonAuthoritativeInformation', 'NoContent',
   * 'ResetContent', 'PartialContent', 'MultipleChoices', 'MovedPermanently',
   * 'Redirect', 'SeeOther', 'NotModified', 'UseProxy', 'Unused',
   * 'TemporaryRedirect', 'BadRequest', 'Unauthorized', 'PaymentRequired',
   * 'Forbidden', 'NotFound', 'MethodNotAllowed', 'NotAcceptable',
   * 'ProxyAuthenticationRequired', 'RequestTimeout', 'Conflict', 'Gone',
   * 'LengthRequired', 'PreconditionFailed', 'RequestEntityTooLarge',
   * 'RequestUriTooLong', 'UnsupportedMediaType',
   * 'RequestedRangeNotSatisfiable', 'ExpectationFailed', 'UpgradeRequired',
   * 'InternalServerError', 'NotImplemented', 'BadGateway',
   * 'ServiceUnavailable', 'GatewayTimeout', 'HttpVersionNotSupported'
   */
  statusCode?: HttpStatusCode;
  /**
   * @member {OperationError} [error] Error details for the operation in case
   * of a failure.
   */
  error?: OperationError;
}

/**
 * @interface
 * An interface representing Policy.
 * A Policy.
 *
 * @extends Resource
 */
export interface Policy extends Resource {
  /**
   * @member {string} [description] The description of the policy.
   */
  description?: string;
  /**
   * @member {PolicyStatus} [status] The status of the policy. Possible values
   * include: 'Enabled', 'Disabled'
   */
  status?: PolicyStatus;
  /**
   * @member {PolicyFactName} [factName] The fact name of the policy (e.g.
   * LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
   * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
   * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
   * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost', 'EnvironmentTemplate',
   * 'ScheduleEditPermission'
   */
  factName?: PolicyFactName;
  /**
   * @member {string} [factData] The fact data of the policy.
   */
  factData?: string;
  /**
   * @member {string} [threshold] The threshold of the policy (i.e. a number
   * for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
   */
  threshold?: string;
  /**
   * @member {PolicyEvaluatorType} [evaluatorType] The evaluator type of the
   * policy (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values
   * include: 'AllowedValuesPolicy', 'MaxValuePolicy'
   */
  evaluatorType?: PolicyEvaluatorType;
  /**
   * @member {Date} [createdDate] The creation date of the policy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing PolicyFragment.
 * A Policy.
 *
 * @extends UpdateResource
 */
export interface PolicyFragment extends UpdateResource {
  /**
   * @member {string} [description] The description of the policy.
   */
  description?: string;
  /**
   * @member {PolicyStatus} [status] The status of the policy. Possible values
   * include: 'Enabled', 'Disabled'
   */
  status?: PolicyStatus;
  /**
   * @member {PolicyFactName} [factName] The fact name of the policy (e.g.
   * LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
   * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
   * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
   * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost', 'EnvironmentTemplate',
   * 'ScheduleEditPermission'
   */
  factName?: PolicyFactName;
  /**
   * @member {string} [factData] The fact data of the policy.
   */
  factData?: string;
  /**
   * @member {string} [threshold] The threshold of the policy (i.e. a number
   * for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
   */
  threshold?: string;
  /**
   * @member {PolicyEvaluatorType} [evaluatorType] The evaluator type of the
   * policy (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values
   * include: 'AllowedValuesPolicy', 'MaxValuePolicy'
   */
  evaluatorType?: PolicyEvaluatorType;
}

/**
 * @interface
 * An interface representing Port.
 * Properties of a network port.
 *
 */
export interface Port {
  /**
   * @member {TransportProtocol} [transportProtocol] Protocol type of the port.
   * Possible values include: 'Tcp', 'Udp'
   */
  transportProtocol?: TransportProtocol;
  /**
   * @member {number} [backendPort] Backend port of the target virtual machine.
   */
  backendPort?: number;
}

/**
 * @interface
 * An interface representing PortFragment.
 * Properties of a network port.
 *
 */
export interface PortFragment {
  /**
   * @member {TransportProtocol} [transportProtocol] Protocol type of the port.
   * Possible values include: 'Tcp', 'Udp'
   */
  transportProtocol?: TransportProtocol;
  /**
   * @member {number} [backendPort] Backend port of the target virtual machine.
   */
  backendPort?: number;
}

/**
 * @interface
 * An interface representing RdpConnection.
 * Represents a .rdp file
 *
 */
export interface RdpConnection {
  /**
   * @member {string} [contents] The contents of the .rdp file
   */
  contents?: string;
}

/**
 * @interface
 * An interface representing ResizeLabVirtualMachineProperties.
 * Request body for resizing a virtual machine.
 *
 */
export interface ResizeLabVirtualMachineProperties {
  /**
   * @member {string} [size] Specifies the size of the virtual machine.
   */
  size?: string;
}

/**
 * @interface
 * An interface representing RetargetScheduleProperties.
 * Properties for retargeting a virtual machine schedule.
 *
 */
export interface RetargetScheduleProperties {
  /**
   * @member {string} [currentResourceId] The resource Id of the virtual
   * machine on which the schedule operates
   */
  currentResourceId?: string;
  /**
   * @member {string} [targetResourceId] The resource Id of the virtual machine
   * that the schedule should be retargeted to
   */
  targetResourceId?: string;
}

/**
 * @interface
 * An interface representing Secret.
 * A secret.
 *
 * @extends Resource
 */
export interface Secret extends Resource {
  /**
   * @member {string} [value] The value of the secret for secret creation.
   */
  value?: string;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing SecretFragment.
 * A secret.
 *
 * @extends UpdateResource
 */
export interface SecretFragment extends UpdateResource {
  /**
   * @member {string} [value] The value of the secret for secret creation.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing ServiceFabric.
 * A Service Fabric.
 *
 * @extends Resource
 */
export interface ServiceFabric extends Resource {
  /**
   * @member {string} [externalServiceFabricId] The backing service fabric
   * resource's id
   */
  externalServiceFabricId?: string;
  /**
   * @member {string} [environmentId] The resource id of the environment under
   * which the service fabric resource is present
   */
  environmentId?: string;
  /**
   * @member {ApplicableSchedule} [applicableSchedule] The applicable schedule
   * for the virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly applicableSchedule?: ApplicableSchedule;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing ServiceFabricFragment.
 * A Service Fabric.
 *
 * @extends UpdateResource
 */
export interface ServiceFabricFragment extends UpdateResource {
  /**
   * @member {string} [externalServiceFabricId] The backing service fabric
   * resource's id
   */
  externalServiceFabricId?: string;
  /**
   * @member {string} [environmentId] The resource id of the environment under
   * which the service fabric resource is present
   */
  environmentId?: string;
}

/**
 * @interface
 * An interface representing ServiceRunner.
 * A container for a managed identity to execute DevTest lab services.
 *
 * @extends Resource
 */
export interface ServiceRunner extends Resource {
  /**
   * @member {IdentityProperties} [identity] The identity of the resource.
   */
  identity?: IdentityProperties;
}

/**
 * @interface
 * An interface representing ShutdownNotificationContent.
 * The contents of a shutdown notification. Webhooks can use this type to
 * deserialize the request body when they get notified of an imminent shutdown.
 *
 */
export interface ShutdownNotificationContent {
  /**
   * @member {string} [skipUrl] The URL to skip auto-shutdown.
   */
  skipUrl?: string;
  /**
   * @member {string} [delayUrl60] The URL to delay shutdown by 60 minutes.
   */
  delayUrl60?: string;
  /**
   * @member {string} [delayUrl120] The URL to delay shutdown by 2 hours.
   */
  delayUrl120?: string;
  /**
   * @member {string} [vmName] The virtual machine to be shut down.
   */
  vmName?: string;
  /**
   * @member {string} [guid] The GUID for the virtual machine to be shut down.
   */
  guid?: string;
  /**
   * @member {string} [owner] The owner of the virtual machine.
   */
  owner?: string;
  /**
   * @member {string} [vmUrl] The URL of the virtual machine.
   */
  vmUrl?: string;
  /**
   * @member {string} [minutesUntilShutdown] Minutes remaining until shutdown
   */
  minutesUntilShutdown?: string;
  /**
   * @member {string} [eventType] The event for which a notification will be
   * sent.
   */
  eventType?: string;
  /**
   * @member {string} [text] The text for the notification.
   */
  text?: string;
  /**
   * @member {string} [subscriptionId] The subscription ID for the schedule.
   */
  subscriptionId?: string;
  /**
   * @member {string} [resourceGroupName] The resource group name for the
   * schedule.
   */
  resourceGroupName?: string;
  /**
   * @member {string} [labName] The lab for the schedule.
   */
  labName?: string;
}

/**
 * @interface
 * An interface representing Subnet.
 * Subnet information.
 *
 */
export interface Subnet {
  /**
   * @member {string} [resourceId] The resource ID of the subnet.
   */
  resourceId?: string;
  /**
   * @member {string} [labSubnetName] The name of the subnet as seen in the
   * lab.
   */
  labSubnetName?: string;
  /**
   * @member {UsagePermissionType} [allowPublicIp] The permission policy of the
   * subnet for allowing public IP addresses (i.e. Allow, Deny)). Possible
   * values include: 'Default', 'Deny', 'Allow'
   */
  allowPublicIp?: UsagePermissionType;
}

/**
 * @interface
 * An interface representing SubnetFragment.
 * Subnet information.
 *
 */
export interface SubnetFragment {
  /**
   * @member {string} [resourceId] The resource ID of the subnet.
   */
  resourceId?: string;
  /**
   * @member {string} [labSubnetName] The name of the subnet as seen in the
   * lab.
   */
  labSubnetName?: string;
  /**
   * @member {UsagePermissionType} [allowPublicIp] The permission policy of the
   * subnet for allowing public IP addresses (i.e. Allow, Deny)). Possible
   * values include: 'Default', 'Deny', 'Allow'
   */
  allowPublicIp?: UsagePermissionType;
}

/**
 * @interface
 * An interface representing SubnetSharedPublicIpAddressConfiguration.
 * Configuration for public IP address sharing.
 *
 */
export interface SubnetSharedPublicIpAddressConfiguration {
  /**
   * @member {Port[]} [allowedPorts] Backend ports that virtual machines on
   * this subnet are allowed to expose
   */
  allowedPorts?: Port[];
}

/**
 * @interface
 * An interface representing SubnetOverride.
 * Property overrides on a subnet of a virtual network.
 *
 */
export interface SubnetOverride {
  /**
   * @member {string} [resourceId] The resource ID of the subnet.
   */
  resourceId?: string;
  /**
   * @member {string} [labSubnetName] The name given to the subnet within the
   * lab.
   */
  labSubnetName?: string;
  /**
   * @member {UsagePermissionType} [useInVmCreationPermission] Indicates
   * whether this subnet can be used during virtual machine creation (i.e.
   * Allow, Deny). Possible values include: 'Default', 'Deny', 'Allow'
   */
  useInVmCreationPermission?: UsagePermissionType;
  /**
   * @member {UsagePermissionType} [usePublicIpAddressPermission] Indicates
   * whether public IP addresses can be assigned to virtual machines on this
   * subnet (i.e. Allow, Deny). Possible values include: 'Default', 'Deny',
   * 'Allow'
   */
  usePublicIpAddressPermission?: UsagePermissionType;
  /**
   * @member {SubnetSharedPublicIpAddressConfiguration}
   * [sharedPublicIpAddressConfiguration] Properties that virtual machines on
   * this subnet will share.
   */
  sharedPublicIpAddressConfiguration?: SubnetSharedPublicIpAddressConfiguration;
  /**
   * @member {string} [virtualNetworkPoolName] The virtual network pool
   * associated with this subnet.
   */
  virtualNetworkPoolName?: string;
}

/**
 * @interface
 * An interface representing SubnetSharedPublicIpAddressConfigurationFragment.
 * Configuration for public IP address sharing.
 *
 */
export interface SubnetSharedPublicIpAddressConfigurationFragment {
  /**
   * @member {PortFragment[]} [allowedPorts] Backend ports that virtual
   * machines on this subnet are allowed to expose
   */
  allowedPorts?: PortFragment[];
}

/**
 * @interface
 * An interface representing SubnetOverrideFragment.
 * Property overrides on a subnet of a virtual network.
 *
 */
export interface SubnetOverrideFragment {
  /**
   * @member {string} [resourceId] The resource ID of the subnet.
   */
  resourceId?: string;
  /**
   * @member {string} [labSubnetName] The name given to the subnet within the
   * lab.
   */
  labSubnetName?: string;
  /**
   * @member {UsagePermissionType} [useInVmCreationPermission] Indicates
   * whether this subnet can be used during virtual machine creation (i.e.
   * Allow, Deny). Possible values include: 'Default', 'Deny', 'Allow'
   */
  useInVmCreationPermission?: UsagePermissionType;
  /**
   * @member {UsagePermissionType} [usePublicIpAddressPermission] Indicates
   * whether public IP addresses can be assigned to virtual machines on this
   * subnet (i.e. Allow, Deny). Possible values include: 'Default', 'Deny',
   * 'Allow'
   */
  usePublicIpAddressPermission?: UsagePermissionType;
  /**
   * @member {SubnetSharedPublicIpAddressConfigurationFragment}
   * [sharedPublicIpAddressConfiguration] Properties that virtual machines on
   * this subnet will share.
   */
  sharedPublicIpAddressConfiguration?: SubnetSharedPublicIpAddressConfigurationFragment;
  /**
   * @member {string} [virtualNetworkPoolName] The virtual network pool
   * associated with this subnet.
   */
  virtualNetworkPoolName?: string;
}

/**
 * @interface
 * An interface representing UserIdentity.
 * Identity attributes of a lab user.
 *
 */
export interface UserIdentity {
  /**
   * @member {string} [principalName] Set to the principal name / UPN of the
   * client JWT making the request.
   */
  principalName?: string;
  /**
   * @member {string} [principalId] Set to the principal Id of the client JWT
   * making the request. Service principal will not have the principal Id.
   */
  principalId?: string;
  /**
   * @member {string} [tenantId] Set to the tenant ID of the client JWT making
   * the request.
   */
  tenantId?: string;
  /**
   * @member {string} [objectId] Set to the object Id of the client JWT making
   * the request. Not all users have object Id. For CSP (reseller) scenarios
   * for example, object Id is not available.
   */
  objectId?: string;
  /**
   * @member {string} [appId] Set to the app Id of the client JWT making the
   * request.
   */
  appId?: string;
}

/**
 * @interface
 * An interface representing UserSecretStore.
 * Properties of a user's secret store.
 *
 */
export interface UserSecretStore {
  /**
   * @member {string} [keyVaultUri] The URI of the user's Key vault.
   */
  keyVaultUri?: string;
  /**
   * @member {string} [keyVaultId] The ID of the user's Key vault.
   */
  keyVaultId?: string;
}

/**
 * @interface
 * An interface representing User.
 * Profile of a lab user.
 *
 * @extends Resource
 */
export interface User extends Resource {
  /**
   * @member {UserIdentity} [identity] The identity of the user.
   */
  identity?: UserIdentity;
  /**
   * @member {UserSecretStore} [secretStore] The secret store of the user.
   */
  secretStore?: UserSecretStore;
  /**
   * @member {Date} [createdDate] The creation date of the user profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing UserIdentityFragment.
 * Identity attributes of a lab user.
 *
 */
export interface UserIdentityFragment {
  /**
   * @member {string} [principalName] Set to the principal name / UPN of the
   * client JWT making the request.
   */
  principalName?: string;
  /**
   * @member {string} [principalId] Set to the principal Id of the client JWT
   * making the request. Service principal will not have the principal Id.
   */
  principalId?: string;
  /**
   * @member {string} [tenantId] Set to the tenant ID of the client JWT making
   * the request.
   */
  tenantId?: string;
  /**
   * @member {string} [objectId] Set to the object Id of the client JWT making
   * the request. Not all users have object Id. For CSP (reseller) scenarios
   * for example, object Id is not available.
   */
  objectId?: string;
  /**
   * @member {string} [appId] Set to the app Id of the client JWT making the
   * request.
   */
  appId?: string;
}

/**
 * @interface
 * An interface representing UserSecretStoreFragment.
 * Properties of a user's secret store.
 *
 */
export interface UserSecretStoreFragment {
  /**
   * @member {string} [keyVaultUri] The URI of the user's Key vault.
   */
  keyVaultUri?: string;
  /**
   * @member {string} [keyVaultId] The ID of the user's Key vault.
   */
  keyVaultId?: string;
}

/**
 * @interface
 * An interface representing UserFragment.
 * Profile of a lab user.
 *
 * @extends UpdateResource
 */
export interface UserFragment extends UpdateResource {
  /**
   * @member {UserIdentityFragment} [identity] The identity of the user.
   */
  identity?: UserIdentityFragment;
  /**
   * @member {UserSecretStoreFragment} [secretStore] The secret store of the
   * user.
   */
  secretStore?: UserSecretStoreFragment;
}

/**
 * @interface
 * An interface representing VirtualNetwork.
 * A virtual network.
 *
 * @extends Resource
 */
export interface VirtualNetwork extends Resource {
  /**
   * @member {Subnet[]} [allowedSubnets] The allowed subnets of the virtual
   * network.
   */
  allowedSubnets?: Subnet[];
  /**
   * @member {string} [description] The description of the virtual network.
   */
  description?: string;
  /**
   * @member {string} [externalProviderResourceId] The Microsoft.Network
   * resource identifier of the virtual network.
   */
  externalProviderResourceId?: string;
  /**
   * @member {ExternalSubnet[]} [externalSubnets] The external subnet
   * properties.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly externalSubnets?: ExternalSubnet[];
  /**
   * @member {SubnetOverride[]} [subnetOverrides] The subnet overrides of the
   * virtual network.
   */
  subnetOverrides?: SubnetOverride[];
  /**
   * @member {Date} [createdDate] The creation date of the virtual network.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly createdDate?: Date;
  /**
   * @member {string} [provisioningState] The provisioning status of the
   * resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {string} [uniqueIdentifier] The unique immutable identifier of a
   * resource (Guid).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly uniqueIdentifier?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkFragment.
 * A virtual network.
 *
 * @extends UpdateResource
 */
export interface VirtualNetworkFragment extends UpdateResource {
  /**
   * @member {SubnetFragment[]} [allowedSubnets] The allowed subnets of the
   * virtual network.
   */
  allowedSubnets?: SubnetFragment[];
  /**
   * @member {string} [description] The description of the virtual network.
   */
  description?: string;
  /**
   * @member {string} [externalProviderResourceId] The Microsoft.Network
   * resource identifier of the virtual network.
   */
  externalProviderResourceId?: string;
  /**
   * @member {SubnetOverrideFragment[]} [subnetOverrides] The subnet overrides
   * of the virtual network.
   */
  subnetOverrides?: SubnetOverrideFragment[];
}

/**
 * @interface
 * An interface representing LabsListBySubscriptionOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LabsListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=defaultStorageAccount)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing LabsListByResourceGroupOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LabsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=defaultStorageAccount)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing LabsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LabsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=defaultStorageAccount)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing GlobalSchedulesListBySubscriptionOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface GlobalSchedulesListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing GlobalSchedulesListByResourceGroupOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface GlobalSchedulesListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing GlobalSchedulesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface GlobalSchedulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ArtifactSourcesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArtifactSourcesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=displayName)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing ArtifactSourcesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArtifactSourcesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=displayName)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ArmTemplatesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArmTemplatesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=displayName)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing ArmTemplatesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArmTemplatesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=displayName)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ArtifactsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArtifactsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=title)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing ArtifactsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ArtifactsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=title)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing CostsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CostsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=labCostDetails)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing CustomImagesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CustomImagesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=vm)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing CustomImagesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface CustomImagesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=vm)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing FormulasListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FormulasListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing FormulasGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FormulasGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing GalleryImagesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface GalleryImagesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=author)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing NotificationChannelsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NotificationChannelsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=webHookUrl)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing NotificationChannelsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface NotificationChannelsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=webHookUrl)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing PoliciesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PoliciesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing PoliciesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PoliciesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing SchedulesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SchedulesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing SchedulesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SchedulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ServiceRunnersListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceRunnersListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing UsersListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface UsersListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=identity)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing UsersGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface UsersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=identity)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing DisksListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DisksListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=diskType)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing DisksGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DisksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=diskType)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing EnvironmentsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface EnvironmentsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=deploymentProperties)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing EnvironmentsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface EnvironmentsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=deploymentProperties)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing SecretsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SecretsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=value)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing SecretsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SecretsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=value)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ServiceFabricsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceFabricsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=applicableSchedule)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing ServiceFabricsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceFabricsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=applicableSchedule)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing ServiceFabricSchedulesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceFabricSchedulesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing ServiceFabricSchedulesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ServiceFabricSchedulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing VirtualMachinesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualMachinesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing VirtualMachinesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualMachinesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing VirtualMachineSchedulesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualMachineSchedulesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing VirtualMachineSchedulesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualMachineSchedulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($select=status)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworksListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworksListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=externalSubnets)'
   */
  expand?: string;
  /**
   * @member {string} [filter] The filter to apply to the operation. Example:
   * '$filter=contains(name,'myName')
   */
  filter?: string;
  /**
   * @member {number} [top] The maximum number of resources to return from the
   * operation. Example: '$top=10'
   */
  top?: number;
  /**
   * @member {string} [orderby] The ordering expression for the results, using
   * OData notation. Example: '$orderby=name desc'
   */
  orderby?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworksGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] Specify the $expand query. Example:
   * 'properties($expand=externalSubnets)'
   */
  expand?: string;
}

/**
 * @interface
 * An interface representing DevTestLabsClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface DevTestLabsClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the ProviderOperationResult.
 * Result of the request to list REST API operations
 *
 * @extends Array<OperationMetadata>
 */
export interface ProviderOperationResult extends Array<OperationMetadata> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the LabList.
 * The response of a list operation.
 *
 * @extends Array<Lab>
 */
export interface LabList extends Array<Lab> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the LabVhdList.
 * The response of a list operation.
 *
 * @extends Array<LabVhd>
 */
export interface LabVhdList extends Array<LabVhd> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ScheduleList.
 * The response of a list operation.
 *
 * @extends Array<Schedule>
 */
export interface ScheduleList extends Array<Schedule> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ArtifactSourceList.
 * The response of a list operation.
 *
 * @extends Array<ArtifactSource>
 */
export interface ArtifactSourceList extends Array<ArtifactSource> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ArmTemplateList.
 * The response of a list operation.
 *
 * @extends Array<ArmTemplate>
 */
export interface ArmTemplateList extends Array<ArmTemplate> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ArtifactList.
 * The response of a list operation.
 *
 * @extends Array<Artifact>
 */
export interface ArtifactList extends Array<Artifact> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the CustomImageList.
 * The response of a list operation.
 *
 * @extends Array<CustomImage>
 */
export interface CustomImageList extends Array<CustomImage> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the FormulaList.
 * The response of a list operation.
 *
 * @extends Array<Formula>
 */
export interface FormulaList extends Array<Formula> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the GalleryImageList.
 * The response of a list operation.
 *
 * @extends Array<GalleryImage>
 */
export interface GalleryImageList extends Array<GalleryImage> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the NotificationChannelList.
 * The response of a list operation.
 *
 * @extends Array<NotificationChannel>
 */
export interface NotificationChannelList extends Array<NotificationChannel> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PolicyList.
 * The response of a list operation.
 *
 * @extends Array<Policy>
 */
export interface PolicyList extends Array<Policy> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceRunnerList.
 * The response of a list operation.
 *
 * @extends Array<ServiceRunner>
 */
export interface ServiceRunnerList extends Array<ServiceRunner> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the UserList.
 * The response of a list operation.
 *
 * @extends Array<User>
 */
export interface UserList extends Array<User> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DiskList.
 * The response of a list operation.
 *
 * @extends Array<Disk>
 */
export interface DiskList extends Array<Disk> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the DtlEnvironmentList.
 * The response of a list operation.
 *
 * @extends Array<DtlEnvironment>
 */
export interface DtlEnvironmentList extends Array<DtlEnvironment> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the SecretList.
 * The response of a list operation.
 *
 * @extends Array<Secret>
 */
export interface SecretList extends Array<Secret> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ServiceFabricList.
 * The response of a list operation.
 *
 * @extends Array<ServiceFabric>
 */
export interface ServiceFabricList extends Array<ServiceFabric> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the LabVirtualMachineList.
 * The response of a list operation.
 *
 * @extends Array<LabVirtualMachine>
 */
export interface LabVirtualMachineList extends Array<LabVirtualMachine> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkList.
 * The response of a list operation.
 *
 * @extends Array<VirtualNetwork>
 */
export interface VirtualNetworkList extends Array<VirtualNetwork> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for EnableStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EnableStatus =
 * <EnableStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum EnableStatus {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for SourceControlType.
 * Possible values include: 'VsoGit', 'GitHub'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SourceControlType =
 * <SourceControlType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SourceControlType {
  VsoGit = 'VsoGit',
  GitHub = 'GitHub',
}

/**
 * Defines values for StorageType.
 * Possible values include: 'Standard', 'Premium'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: StorageType =
 * <StorageType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum StorageType {
  Standard = 'Standard',
  Premium = 'Premium',
}

/**
 * Defines values for CostThresholdStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CostThresholdStatus =
 * <CostThresholdStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CostThresholdStatus {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for WindowsOsState.
 * Possible values include: 'NonSysprepped', 'SysprepRequested',
 * 'SysprepApplied'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: WindowsOsState =
 * <WindowsOsState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum WindowsOsState {
  NonSysprepped = 'NonSysprepped',
  SysprepRequested = 'SysprepRequested',
  SysprepApplied = 'SysprepApplied',
}

/**
 * Defines values for LinuxOsState.
 * Possible values include: 'NonDeprovisioned', 'DeprovisionRequested',
 * 'DeprovisionApplied'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: LinuxOsState =
 * <LinuxOsState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum LinuxOsState {
  NonDeprovisioned = 'NonDeprovisioned',
  DeprovisionRequested = 'DeprovisionRequested',
  DeprovisionApplied = 'DeprovisionApplied',
}

/**
 * Defines values for CustomImageOsType.
 * Possible values include: 'Windows', 'Linux', 'None'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CustomImageOsType =
 * <CustomImageOsType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CustomImageOsType {
  Windows = 'Windows',
  Linux = 'Linux',
  None = 'None',
}

/**
 * Defines values for HostCachingOptions.
 * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HostCachingOptions =
 * <HostCachingOptions>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HostCachingOptions {
  None = 'None',
  ReadOnly = 'ReadOnly',
  ReadWrite = 'ReadWrite',
}

/**
 * Defines values for NotificationChannelEventType.
 * Possible values include: 'AutoShutdown', 'Cost'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: NotificationChannelEventType =
 * <NotificationChannelEventType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum NotificationChannelEventType {
  AutoShutdown = 'AutoShutdown',
  Cost = 'Cost',
}

/**
 * Defines values for TransportProtocol.
 * Possible values include: 'Tcp', 'Udp'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TransportProtocol =
 * <TransportProtocol>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TransportProtocol {
  Tcp = 'Tcp',
  Udp = 'Udp',
}

/**
 * Defines values for VirtualMachineCreationSource.
 * Possible values include: 'FromCustomImage', 'FromGalleryImage'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: VirtualMachineCreationSource =
 * <VirtualMachineCreationSource>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum VirtualMachineCreationSource {
  FromCustomImage = 'FromCustomImage',
  FromGalleryImage = 'FromGalleryImage',
}

/**
 * Defines values for FileUploadOptions.
 * Possible values include: 'UploadFilesAndGenerateSasTokens', 'None'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: FileUploadOptions =
 * <FileUploadOptions>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum FileUploadOptions {
  UploadFilesAndGenerateSasTokens = 'UploadFilesAndGenerateSasTokens',
  None = 'None',
}

/**
 * Defines values for PremiumDataDisk.
 * Possible values include: 'Disabled', 'Enabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PremiumDataDisk =
 * <PremiumDataDisk>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PremiumDataDisk {
  Disabled = 'Disabled',
  Enabled = 'Enabled',
}

/**
 * Defines values for EnvironmentPermission.
 * Possible values include: 'Reader', 'Contributor'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: EnvironmentPermission =
 * <EnvironmentPermission>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum EnvironmentPermission {
  Reader = 'Reader',
  Contributor = 'Contributor',
}

/**
 * Defines values for TargetCostStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TargetCostStatus =
 * <TargetCostStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TargetCostStatus {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for ReportingCycleType.
 * Possible values include: 'CalendarMonth', 'Custom'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ReportingCycleType =
 * <ReportingCycleType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ReportingCycleType {
  CalendarMonth = 'CalendarMonth',
  Custom = 'Custom',
}

/**
 * Defines values for CostType.
 * Possible values include: 'Unavailable', 'Reported', 'Projected'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CostType = <CostType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CostType {
  Unavailable = 'Unavailable',
  Reported = 'Reported',
  Projected = 'Projected',
}

/**
 * Defines values for HttpStatusCode.
 * Possible values include: 'Continue', 'SwitchingProtocols', 'OK', 'Created',
 * 'Accepted', 'NonAuthoritativeInformation', 'NoContent', 'ResetContent',
 * 'PartialContent', 'MultipleChoices', 'MovedPermanently', 'Redirect',
 * 'SeeOther', 'NotModified', 'UseProxy', 'Unused', 'TemporaryRedirect',
 * 'BadRequest', 'Unauthorized', 'PaymentRequired', 'Forbidden', 'NotFound',
 * 'MethodNotAllowed', 'NotAcceptable', 'ProxyAuthenticationRequired',
 * 'RequestTimeout', 'Conflict', 'Gone', 'LengthRequired',
 * 'PreconditionFailed', 'RequestEntityTooLarge', 'RequestUriTooLong',
 * 'UnsupportedMediaType', 'RequestedRangeNotSatisfiable', 'ExpectationFailed',
 * 'UpgradeRequired', 'InternalServerError', 'NotImplemented', 'BadGateway',
 * 'ServiceUnavailable', 'GatewayTimeout', 'HttpVersionNotSupported'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: HttpStatusCode =
 * <HttpStatusCode>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum HttpStatusCode {
  Continue = 'Continue',
  SwitchingProtocols = 'SwitchingProtocols',
  OK = 'OK',
  Created = 'Created',
  Accepted = 'Accepted',
  NonAuthoritativeInformation = 'NonAuthoritativeInformation',
  NoContent = 'NoContent',
  ResetContent = 'ResetContent',
  PartialContent = 'PartialContent',
  MultipleChoices = 'MultipleChoices',
  MovedPermanently = 'MovedPermanently',
  Redirect = 'Redirect',
  SeeOther = 'SeeOther',
  NotModified = 'NotModified',
  UseProxy = 'UseProxy',
  Unused = 'Unused',
  TemporaryRedirect = 'TemporaryRedirect',
  BadRequest = 'BadRequest',
  Unauthorized = 'Unauthorized',
  PaymentRequired = 'PaymentRequired',
  Forbidden = 'Forbidden',
  NotFound = 'NotFound',
  MethodNotAllowed = 'MethodNotAllowed',
  NotAcceptable = 'NotAcceptable',
  ProxyAuthenticationRequired = 'ProxyAuthenticationRequired',
  RequestTimeout = 'RequestTimeout',
  Conflict = 'Conflict',
  Gone = 'Gone',
  LengthRequired = 'LengthRequired',
  PreconditionFailed = 'PreconditionFailed',
  RequestEntityTooLarge = 'RequestEntityTooLarge',
  RequestUriTooLong = 'RequestUriTooLong',
  UnsupportedMediaType = 'UnsupportedMediaType',
  RequestedRangeNotSatisfiable = 'RequestedRangeNotSatisfiable',
  ExpectationFailed = 'ExpectationFailed',
  UpgradeRequired = 'UpgradeRequired',
  InternalServerError = 'InternalServerError',
  NotImplemented = 'NotImplemented',
  BadGateway = 'BadGateway',
  ServiceUnavailable = 'ServiceUnavailable',
  GatewayTimeout = 'GatewayTimeout',
  HttpVersionNotSupported = 'HttpVersionNotSupported',
}

/**
 * Defines values for PolicyStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PolicyStatus =
 * <PolicyStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PolicyStatus {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for PolicyFactName.
 * Possible values include: 'UserOwnedLabVmCount',
 * 'UserOwnedLabPremiumVmCount', 'LabVmCount', 'LabPremiumVmCount',
 * 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet', 'LabTargetCost',
 * 'EnvironmentTemplate', 'ScheduleEditPermission'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PolicyFactName =
 * <PolicyFactName>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PolicyFactName {
  UserOwnedLabVmCount = 'UserOwnedLabVmCount',
  UserOwnedLabPremiumVmCount = 'UserOwnedLabPremiumVmCount',
  LabVmCount = 'LabVmCount',
  LabPremiumVmCount = 'LabPremiumVmCount',
  LabVmSize = 'LabVmSize',
  GalleryImage = 'GalleryImage',
  UserOwnedLabVmCountInSubnet = 'UserOwnedLabVmCountInSubnet',
  LabTargetCost = 'LabTargetCost',
  EnvironmentTemplate = 'EnvironmentTemplate',
  ScheduleEditPermission = 'ScheduleEditPermission',
}

/**
 * Defines values for PolicyEvaluatorType.
 * Possible values include: 'AllowedValuesPolicy', 'MaxValuePolicy'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PolicyEvaluatorType =
 * <PolicyEvaluatorType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PolicyEvaluatorType {
  AllowedValuesPolicy = 'AllowedValuesPolicy',
  MaxValuePolicy = 'MaxValuePolicy',
}

/**
 * Defines values for UsagePermissionType.
 * Possible values include: 'Default', 'Deny', 'Allow'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: UsagePermissionType =
 * <UsagePermissionType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum UsagePermissionType {
  Default = 'Default',
  Deny = 'Deny',
  Allow = 'Allow',
}

/**
 * Contains response data for the list operation.
 */
export type ProviderOperationsListResponse = ProviderOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProviderOperationResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProviderOperationsListNextResponse = ProviderOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProviderOperationResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type LabsListBySubscriptionResponse = LabList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabList;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type LabsListByResourceGroupResponse = LabList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LabsGetResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LabsCreateOrUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the update operation.
 */
export type LabsUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the generateUploadUri operation.
 */
export type LabsGenerateUploadUriResponse = GenerateUploadUriResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenerateUploadUriResponse;
    };
};

/**
 * Contains response data for the listVhds operation.
 */
export type LabsListVhdsResponse = LabVhdList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVhdList;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LabsBeginCreateOrUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type LabsListBySubscriptionNextResponse = LabList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type LabsListByResourceGroupNextResponse = LabList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabList;
    };
};

/**
 * Contains response data for the listVhdsNext operation.
 */
export type LabsListVhdsNextResponse = LabVhdList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVhdList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type OperationsGetResponse = OperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type GlobalSchedulesListBySubscriptionResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type GlobalSchedulesListByResourceGroupResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type GlobalSchedulesGetResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GlobalSchedulesCreateOrUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type GlobalSchedulesUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type GlobalSchedulesListBySubscriptionNextResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type GlobalSchedulesListByResourceGroupNextResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ArtifactSourcesListResponse = ArtifactSourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSourceList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ArtifactSourcesGetResponse = ArtifactSource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ArtifactSourcesCreateOrUpdateResponse = ArtifactSource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSource;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ArtifactSourcesUpdateResponse = ArtifactSource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSource;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ArtifactSourcesListNextResponse = ArtifactSourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactSourceList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ArmTemplatesListResponse = ArmTemplateList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmTemplateList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ArmTemplatesGetResponse = ArmTemplate & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmTemplate;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ArmTemplatesListNextResponse = ArmTemplateList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmTemplateList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ArtifactsListResponse = ArtifactList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ArtifactsGetResponse = Artifact & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Artifact;
    };
};

/**
 * Contains response data for the generateArmTemplate operation.
 */
export type ArtifactsGenerateArmTemplateResponse = ArmTemplateInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArmTemplateInfo;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ArtifactsListNextResponse = ArtifactList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ArtifactList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type CostsGetResponse = LabCost & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabCost;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CostsCreateOrUpdateResponse = LabCost & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabCost;
    };
};

/**
 * Contains response data for the list operation.
 */
export type CustomImagesListResponse = CustomImageList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CustomImageList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type CustomImagesGetResponse = CustomImage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CustomImage;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CustomImagesCreateOrUpdateResponse = CustomImage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CustomImage;
    };
};

/**
 * Contains response data for the update operation.
 */
export type CustomImagesUpdateResponse = CustomImage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CustomImage;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type CustomImagesBeginCreateOrUpdateResponse = CustomImage & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CustomImage;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type CustomImagesListNextResponse = CustomImageList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CustomImageList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type FormulasListResponse = FormulaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FormulaList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FormulasGetResponse = Formula & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Formula;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FormulasCreateOrUpdateResponse = Formula & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Formula;
    };
};

/**
 * Contains response data for the update operation.
 */
export type FormulasUpdateResponse = Formula & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Formula;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type FormulasBeginCreateOrUpdateResponse = Formula & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Formula;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type FormulasListNextResponse = FormulaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FormulaList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type GalleryImagesListResponse = GalleryImageList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GalleryImageList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type GalleryImagesListNextResponse = GalleryImageList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GalleryImageList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NotificationChannelsListResponse = NotificationChannelList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NotificationChannelList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NotificationChannelsGetResponse = NotificationChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NotificationChannel;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NotificationChannelsCreateOrUpdateResponse = NotificationChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NotificationChannel;
    };
};

/**
 * Contains response data for the update operation.
 */
export type NotificationChannelsUpdateResponse = NotificationChannel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NotificationChannel;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NotificationChannelsListNextResponse = NotificationChannelList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NotificationChannelList;
    };
};

/**
 * Contains response data for the evaluatePolicies operation.
 */
export type PolicySetsEvaluatePoliciesResponse = EvaluatePoliciesResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EvaluatePoliciesResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PoliciesListResponse = PolicyList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PoliciesGetResponse = Policy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Policy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PoliciesCreateOrUpdateResponse = Policy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Policy;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PoliciesUpdateResponse = Policy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Policy;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PoliciesListNextResponse = PolicyList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PolicyList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SchedulesListResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SchedulesGetResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SchedulesCreateOrUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type SchedulesUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the listApplicable operation.
 */
export type SchedulesListApplicableResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SchedulesListNextResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the listApplicableNext operation.
 */
export type SchedulesListApplicableNextResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceRunnersListResponse = ServiceRunnerList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceRunnerList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceRunnersGetResponse = ServiceRunner & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceRunner;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceRunnersCreateOrUpdateResponse = ServiceRunner & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceRunner;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServiceRunnersListNextResponse = ServiceRunnerList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceRunnerList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type UsersListResponse = UserList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type UsersGetResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type UsersCreateOrUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the update operation.
 */
export type UsersUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type UsersBeginCreateOrUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsersListNextResponse = UserList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DisksListResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DisksGetResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Disk;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DisksCreateOrUpdateResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Disk;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DisksUpdateResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Disk;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DisksBeginCreateOrUpdateResponse = Disk & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Disk;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DisksListNextResponse = DiskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type EnvironmentsListResponse = DtlEnvironmentList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DtlEnvironmentList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type EnvironmentsGetResponse = DtlEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DtlEnvironment;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EnvironmentsCreateOrUpdateResponse = DtlEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DtlEnvironment;
    };
};

/**
 * Contains response data for the update operation.
 */
export type EnvironmentsUpdateResponse = DtlEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DtlEnvironment;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type EnvironmentsBeginCreateOrUpdateResponse = DtlEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DtlEnvironment;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type EnvironmentsListNextResponse = DtlEnvironmentList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DtlEnvironmentList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SecretsListResponse = SecretList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SecretsGetResponse = Secret & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Secret;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecretsCreateOrUpdateResponse = Secret & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Secret;
    };
};

/**
 * Contains response data for the update operation.
 */
export type SecretsUpdateResponse = Secret & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Secret;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SecretsBeginCreateOrUpdateResponse = Secret & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Secret;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecretsListNextResponse = SecretList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecretList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceFabricsListResponse = ServiceFabricList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceFabricList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceFabricsGetResponse = ServiceFabric & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceFabric;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceFabricsCreateOrUpdateResponse = ServiceFabric & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceFabric;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServiceFabricsUpdateResponse = ServiceFabric & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceFabric;
    };
};

/**
 * Contains response data for the listApplicableSchedules operation.
 */
export type ServiceFabricsListApplicableSchedulesResponse = ApplicableSchedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicableSchedule;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServiceFabricsBeginCreateOrUpdateResponse = ServiceFabric & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceFabric;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServiceFabricsListNextResponse = ServiceFabricList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceFabricList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceFabricSchedulesListResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceFabricSchedulesGetResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceFabricSchedulesCreateOrUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServiceFabricSchedulesUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServiceFabricSchedulesListNextResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachinesListResponse = LabVirtualMachineList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVirtualMachineList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachinesGetResponse = LabVirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVirtualMachine;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachinesCreateOrUpdateResponse = LabVirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVirtualMachine;
    };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachinesUpdateResponse = LabVirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVirtualMachine;
    };
};

/**
 * Contains response data for the getRdpFileContents operation.
 */
export type VirtualMachinesGetRdpFileContentsResponse = RdpConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RdpConnection;
    };
};

/**
 * Contains response data for the listApplicableSchedules operation.
 */
export type VirtualMachinesListApplicableSchedulesResponse = ApplicableSchedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicableSchedule;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualMachinesBeginCreateOrUpdateResponse = LabVirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVirtualMachine;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachinesListNextResponse = LabVirtualMachineList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabVirtualMachineList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualMachineSchedulesListResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachineSchedulesGetResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualMachineSchedulesCreateOrUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualMachineSchedulesUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualMachineSchedulesListNextResponse = ScheduleList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScheduleList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworkList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworksGetResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualNetworksUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworksBeginCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworkList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkList;
    };
};
