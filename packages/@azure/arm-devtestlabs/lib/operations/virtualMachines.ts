/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualMachinesMappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClientContext } from "../devTestLabsClientContext";

/** Class representing a VirtualMachines. */
export class VirtualMachines {
  private readonly client: DevTestLabsClientContext;

  /**
   * Create a VirtualMachines.
   * @param {DevTestLabsClientContext} client Reference to the service client.
   */
  constructor(client: DevTestLabsClientContext) {
    this.client = client;
  }

  /**
   * List virtual machines in a given lab.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListResponse>
   */
  list(resourceGroupName: string, labName: string, options?: Models.VirtualMachinesListOptionalParams): Promise<Models.VirtualMachinesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param callback The callback
   */
  list(resourceGroupName: string, labName: string, callback: msRest.ServiceCallback<Models.LabVirtualMachineList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, labName: string, options: Models.VirtualMachinesListOptionalParams, callback: msRest.ServiceCallback<Models.LabVirtualMachineList>): void;
  list(resourceGroupName: string, labName: string, options?: Models.VirtualMachinesListOptionalParams | msRest.ServiceCallback<Models.LabVirtualMachineList>, callback?: msRest.ServiceCallback<Models.LabVirtualMachineList>): Promise<Models.VirtualMachinesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualMachinesListResponse>;
  }

  /**
   * Get virtual machine.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesGetResponse>
   */
  get(resourceGroupName: string, labName: string, name: string, options?: Models.VirtualMachinesGetOptionalParams): Promise<Models.VirtualMachinesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, name: string, callback: msRest.ServiceCallback<Models.LabVirtualMachine>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, name: string, options: Models.VirtualMachinesGetOptionalParams, callback: msRest.ServiceCallback<Models.LabVirtualMachine>): void;
  get(resourceGroupName: string, labName: string, name: string, options?: Models.VirtualMachinesGetOptionalParams | msRest.ServiceCallback<Models.LabVirtualMachine>, callback?: msRest.ServiceCallback<Models.LabVirtualMachine>): Promise<Models.VirtualMachinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualMachinesGetResponse>;
  }

  /**
   * Create or replace an existing Virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param labVirtualMachine A virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: Models.LabVirtualMachine, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,labName,name,labVirtualMachine,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualMachinesCreateOrUpdateResponse>;
  }

  /**
   * Delete virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Modify properties of virtual machines.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param labVirtualMachine A virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesUpdateResponse>
   */
  update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: Models.LabVirtualMachineFragment, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param labVirtualMachine A virtual machine.
   * @param callback The callback
   */
  update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: Models.LabVirtualMachineFragment, callback: msRest.ServiceCallback<Models.LabVirtualMachine>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param labVirtualMachine A virtual machine.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: Models.LabVirtualMachineFragment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabVirtualMachine>): void;
  update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: Models.LabVirtualMachineFragment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabVirtualMachine>, callback?: msRest.ServiceCallback<Models.LabVirtualMachine>): Promise<Models.VirtualMachinesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        name,
        labVirtualMachine,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.VirtualMachinesUpdateResponse>;
  }

  /**
   * Attach a new or existing data disk to virtual machine. This operation can take a while to
   * complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param dataDiskProperties Request body for adding a new or existing data disk to a virtual
   * machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: Models.DataDiskProperties, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginAddDataDisk(resourceGroupName,labName,name,dataDiskProperties,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Apply artifacts to virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param applyArtifactsRequest Request body for applying artifacts to a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  applyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: Models.ApplyArtifactsRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginApplyArtifacts(resourceGroupName,labName,name,applyArtifactsRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Take ownership of an existing virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  claim(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginClaim(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Detach the specified disk from the virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param detachDataDiskProperties Request body for detaching data disk from a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  detachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: Models.DetachDataDiskProperties, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDetachDataDisk(resourceGroupName,labName,name,detachDataDiskProperties,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets a string that represents the contents of the RDP file for the virtual machine
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesGetRdpFileContentsResponse>
   */
  getRdpFileContents(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesGetRdpFileContentsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param callback The callback
   */
  getRdpFileContents(resourceGroupName: string, labName: string, name: string, callback: msRest.ServiceCallback<Models.RdpConnection>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRdpFileContents(resourceGroupName: string, labName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RdpConnection>): void;
  getRdpFileContents(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RdpConnection>, callback?: msRest.ServiceCallback<Models.RdpConnection>): Promise<Models.VirtualMachinesGetRdpFileContentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      getRdpFileContentsOperationSpec,
      callback) as Promise<Models.VirtualMachinesGetRdpFileContentsResponse>;
  }

  /**
   * Lists the applicable start/stop schedules, if any.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListApplicableSchedulesResponse>
   */
  listApplicableSchedules(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListApplicableSchedulesResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param callback The callback
   */
  listApplicableSchedules(resourceGroupName: string, labName: string, name: string, callback: msRest.ServiceCallback<Models.ApplicableSchedule>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param options The optional parameters
   * @param callback The callback
   */
  listApplicableSchedules(resourceGroupName: string, labName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicableSchedule>): void;
  listApplicableSchedules(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicableSchedule>, callback?: msRest.ServiceCallback<Models.ApplicableSchedule>): Promise<Models.VirtualMachinesListApplicableSchedulesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      listApplicableSchedulesOperationSpec,
      callback) as Promise<Models.VirtualMachinesListApplicableSchedulesResponse>;
  }

  /**
   * Redeploy a virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  redeploy(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRedeploy(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Resize Virtual Machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param resizeLabVirtualMachineProperties Request body for resizing a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resize(resourceGroupName: string, labName: string, name: string, resizeLabVirtualMachineProperties: Models.ResizeLabVirtualMachineProperties, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginResize(resourceGroupName,labName,name,resizeLabVirtualMachineProperties,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Restart a virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRestart(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Start a virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Stop a virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Transfers all data disks attached to the virtual machine to be owned by the current user. This
   * operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  transferDisks(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginTransferDisks(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Release ownership of an existing virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unClaim(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginUnClaim(resourceGroupName,labName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create or replace an existing Virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param labVirtualMachine A virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: Models.LabVirtualMachine, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        labVirtualMachine,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Attach a new or existing data disk to virtual machine. This operation can take a while to
   * complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param dataDiskProperties Request body for adding a new or existing data disk to a virtual
   * machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginAddDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: Models.DataDiskProperties, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        dataDiskProperties,
        options
      },
      beginAddDataDiskOperationSpec,
      options);
  }

  /**
   * Apply artifacts to virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param applyArtifactsRequest Request body for applying artifacts to a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginApplyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: Models.ApplyArtifactsRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        applyArtifactsRequest,
        options
      },
      beginApplyArtifactsOperationSpec,
      options);
  }

  /**
   * Take ownership of an existing virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginClaim(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginClaimOperationSpec,
      options);
  }

  /**
   * Detach the specified disk from the virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param detachDataDiskProperties Request body for detaching data disk from a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDetachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: Models.DetachDataDiskProperties, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        detachDataDiskProperties,
        options
      },
      beginDetachDataDiskOperationSpec,
      options);
  }

  /**
   * Redeploy a virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRedeploy(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginRedeployOperationSpec,
      options);
  }

  /**
   * Resize Virtual Machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param resizeLabVirtualMachineProperties Request body for resizing a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResize(resourceGroupName: string, labName: string, name: string, resizeLabVirtualMachineProperties: Models.ResizeLabVirtualMachineProperties, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        resizeLabVirtualMachineProperties,
        options
      },
      beginResizeOperationSpec,
      options);
  }

  /**
   * Restart a virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestart(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginRestartOperationSpec,
      options);
  }

  /**
   * Start a virtual machine. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Stop a virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Transfers all data disks attached to the virtual machine to be owned by the current user. This
   * operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTransferDisks(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginTransferDisksOperationSpec,
      options);
  }

  /**
   * Release ownership of an existing virtual machine This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param labName The name of the lab.
   * @param name The name of the virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUnClaim(resourceGroupName: string, labName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        name,
        options
      },
      beginUnClaimOperationSpec,
      options);
  }

  /**
   * List virtual machines in a given lab.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualMachinesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualMachinesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LabVirtualMachineList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabVirtualMachineList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabVirtualMachineList>, callback?: msRest.ServiceCallback<Models.LabVirtualMachineList>): Promise<Models.VirtualMachinesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VirtualMachinesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabVirtualMachineList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabVirtualMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "labVirtualMachine",
    mapper: {
      ...Mappers.LabVirtualMachineFragment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LabVirtualMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRdpFileContentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/getRdpFileContents",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RdpConnection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listApplicableSchedulesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/listApplicableSchedules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicableSchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "labVirtualMachine",
    mapper: {
      ...Mappers.LabVirtualMachine,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LabVirtualMachine
    },
    201: {
      bodyMapper: Mappers.LabVirtualMachine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginAddDataDiskOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/addDataDisk",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataDiskProperties",
    mapper: {
      ...Mappers.DataDiskProperties,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginApplyArtifactsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/applyArtifacts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "applyArtifactsRequest",
    mapper: {
      ...Mappers.ApplyArtifactsRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/claim",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDetachDataDiskOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/detachDataDisk",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "detachDataDiskProperties",
    mapper: {
      ...Mappers.DetachDataDiskProperties,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRedeployOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/redeploy",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/resize",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resizeLabVirtualMachineProperties",
    mapper: {
      ...Mappers.ResizeLabVirtualMachineProperties,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRestartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/restart",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/stop",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginTransferDisksOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/transferDisks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUnClaimOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/virtualmachines/{name}/unClaim",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabVirtualMachineList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
