/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/labsMappers";
import * as Parameters from "../models/parameters";
import { DevTestLabsClientContext } from "../devTestLabsClientContext";

/** Class representing a Labs. */
export class Labs {
  private readonly client: DevTestLabsClientContext;

  /**
   * Create a Labs.
   * @param {DevTestLabsClientContext} client Reference to the service client.
   */
  constructor(client: DevTestLabsClientContext) {
    this.client = client;
  }

  /**
   * List labs in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.LabsListBySubscriptionOptionalParams): Promise<Models.LabsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.LabList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.LabsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.LabList>): void;
  listBySubscription(options?: Models.LabsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.LabList>, callback?: msRest.ServiceCallback<Models.LabList>): Promise<Models.LabsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.LabsListBySubscriptionResponse>;
  }

  /**
   * List labs in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.LabsListByResourceGroupOptionalParams): Promise<Models.LabsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.LabList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.LabsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.LabList>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.LabsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.LabList>, callback?: msRest.ServiceCallback<Models.LabList>): Promise<Models.LabsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.LabsListByResourceGroupResponse>;
  }

  /**
   * Get lab.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsGetResponse>
   */
  get(resourceGroupName: string, name: string, options?: Models.LabsGetOptionalParams): Promise<Models.LabsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Lab>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, name: string, options: Models.LabsGetOptionalParams, callback: msRest.ServiceCallback<Models.Lab>): void;
  get(resourceGroupName: string, name: string, options?: Models.LabsGetOptionalParams | msRest.ServiceCallback<Models.Lab>, callback?: msRest.ServiceCallback<Models.Lab>): Promise<Models.LabsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LabsGetResponse>;
  }

  /**
   * Create or replace an existing lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, name: string, lab: Models.Lab, options?: msRest.RequestOptionsBase): Promise<Models.LabsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,name,lab,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LabsCreateOrUpdateResponse>;
  }

  /**
   * Delete lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Modify properties of labs.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsUpdateResponse>
   */
  update(resourceGroupName: string, name: string, lab: Models.LabFragment, options?: msRest.RequestOptionsBase): Promise<Models.LabsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param callback The callback
   */
  update(resourceGroupName: string, name: string, lab: Models.LabFragment, callback: msRest.ServiceCallback<Models.Lab>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, name: string, lab: Models.LabFragment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Lab>): void;
  update(resourceGroupName: string, name: string, lab: Models.LabFragment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Lab>, callback?: msRest.ServiceCallback<Models.Lab>): Promise<Models.LabsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        lab,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.LabsUpdateResponse>;
  }

  /**
   * Claim a random claimable virtual machine in the lab. This operation can take a while to
   * complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  claimAnyVm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginClaimAnyVm(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create virtual machines in a lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: Models.LabVirtualMachineCreationParameter, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginCreateEnvironment(resourceGroupName,name,labVirtualMachineCreationParameter,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Exports the lab resource usage into a storage account This operation can take a while to
   * complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param exportResourceUsageParameters The parameters of the export operation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  exportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: Models.ExportResourceUsageParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginExportResourceUsage(resourceGroupName,name,exportResourceUsageParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Generate a URI for uploading custom disk images to a Lab.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param generateUploadUriParameter Properties for generating an upload URI.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsGenerateUploadUriResponse>
   */
  generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: Models.GenerateUploadUriParameter, options?: msRest.RequestOptionsBase): Promise<Models.LabsGenerateUploadUriResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param generateUploadUriParameter Properties for generating an upload URI.
   * @param callback The callback
   */
  generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: Models.GenerateUploadUriParameter, callback: msRest.ServiceCallback<Models.GenerateUploadUriResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param generateUploadUriParameter Properties for generating an upload URI.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: Models.GenerateUploadUriParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GenerateUploadUriResponse>): void;
  generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: Models.GenerateUploadUriParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GenerateUploadUriResponse>, callback?: msRest.ServiceCallback<Models.GenerateUploadUriResponse>): Promise<Models.LabsGenerateUploadUriResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        generateUploadUriParameter,
        options
      },
      generateUploadUriOperationSpec,
      callback) as Promise<Models.LabsGenerateUploadUriResponse>;
  }

  /**
   * Import a virtual machine into a different lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param importLabVirtualMachineRequest This represents the payload required to import a virtual
   * machine from a different lab into the current one
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  importVirtualMachine(resourceGroupName: string, name: string, importLabVirtualMachineRequest: Models.ImportLabVirtualMachineRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginImportVirtualMachine(resourceGroupName,name,importLabVirtualMachineRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * List disk images available for custom image creation.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListVhdsResponse>
   */
  listVhds(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsListVhdsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param callback The callback
   */
  listVhds(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.LabVhdList>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVhds(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabVhdList>): void;
  listVhds(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabVhdList>, callback?: msRest.ServiceCallback<Models.LabVhdList>): Promise<Models.LabsListVhdsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listVhdsOperationSpec,
      callback) as Promise<Models.LabsListVhdsResponse>;
  }

  /**
   * Create or replace an existing lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param lab A lab.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, name: string, lab: Models.Lab, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        lab,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Claim a random claimable virtual machine in the lab. This operation can take a while to
   * complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginClaimAnyVm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginClaimAnyVmOperationSpec,
      options);
  }

  /**
   * Create virtual machines in a lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: Models.LabVirtualMachineCreationParameter, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        labVirtualMachineCreationParameter,
        options
      },
      beginCreateEnvironmentOperationSpec,
      options);
  }

  /**
   * Exports the lab resource usage into a storage account This operation can take a while to
   * complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param exportResourceUsageParameters The parameters of the export operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginExportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: Models.ExportResourceUsageParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        exportResourceUsageParameters,
        options
      },
      beginExportResourceUsageOperationSpec,
      options);
  }

  /**
   * Import a virtual machine into a different lab. This operation can take a while to complete.
   * @param resourceGroupName The name of the resource group.
   * @param name The name of the lab.
   * @param importLabVirtualMachineRequest This represents the payload required to import a virtual
   * machine from a different lab into the current one
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginImportVirtualMachine(resourceGroupName: string, name: string, importLabVirtualMachineRequest: Models.ImportLabVirtualMachineRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        importLabVirtualMachineRequest,
        options
      },
      beginImportVirtualMachineOperationSpec,
      options);
  }

  /**
   * List labs in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LabList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabList>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabList>, callback?: msRest.ServiceCallback<Models.LabList>): Promise<Models.LabsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.LabsListBySubscriptionNextResponse>;
  }

  /**
   * List labs in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LabList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabList>, callback?: msRest.ServiceCallback<Models.LabList>): Promise<Models.LabsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.LabsListByResourceGroupNextResponse>;
  }

  /**
   * List disk images available for custom image creation.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListVhdsNextResponse>
   */
  listVhdsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsListVhdsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listVhdsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LabVhdList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listVhdsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabVhdList>): void;
  listVhdsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabVhdList>, callback?: msRest.ServiceCallback<Models.LabVhdList>): Promise<Models.LabsListVhdsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listVhdsNextOperationSpec,
      callback) as Promise<Models.LabsListVhdsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DevTestLab/labs",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "lab",
    mapper: {
      ...Mappers.LabFragment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const generateUploadUriOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/generateUploadUri",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "generateUploadUriParameter",
    mapper: {
      ...Mappers.GenerateUploadUriParameter,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GenerateUploadUriResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVhdsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/listVhds",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabVhdList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "lab",
    mapper: {
      ...Mappers.Lab,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    201: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginClaimAnyVmOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/claimAnyVm",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/createEnvironment",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "labVirtualMachineCreationParameter",
    mapper: {
      ...Mappers.LabVirtualMachineCreationParameter,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginExportResourceUsageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/exportResourceUsage",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "exportResourceUsageParameters",
    mapper: {
      ...Mappers.ExportResourceUsageParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginImportVirtualMachineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{name}/importVirtualMachine",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "importLabVirtualMachineRequest",
    mapper: {
      ...Mappers.ImportLabVirtualMachineRequest,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listVhdsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabVhdList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
