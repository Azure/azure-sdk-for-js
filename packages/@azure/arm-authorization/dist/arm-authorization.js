/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmAuthorization = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ClassicAdministrator = {
        serializedName: "ClassicAdministrator",
        type: {
            name: "Composite",
            className: "ClassicAdministrator",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                emailAddress: {
                    serializedName: "properties.emailAddress",
                    type: {
                        name: "String"
                    }
                },
                role: {
                    serializedName: "properties.role",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProviderOperation = {
        serializedName: "ProviderOperation",
        type: {
            name: "Composite",
            className: "ProviderOperation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                },
                isDataAction: {
                    serializedName: "isDataAction",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ResourceType = {
        serializedName: "ResourceType",
        type: {
            name: "Composite",
            className: "ResourceType",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                operations: {
                    serializedName: "operations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderOperation"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProviderOperationsMetadata = {
        serializedName: "ProviderOperationsMetadata",
        type: {
            name: "Composite",
            className: "ProviderOperationsMetadata",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                resourceTypes: {
                    serializedName: "resourceTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceType"
                            }
                        }
                    }
                },
                operations: {
                    serializedName: "operations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderOperation"
                            }
                        }
                    }
                }
            }
        }
    };
    var Permission = {
        serializedName: "Permission",
        type: {
            name: "Composite",
            className: "Permission",
            modelProperties: {
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                notActions: {
                    serializedName: "notActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataActions: {
                    serializedName: "dataActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                notDataActions: {
                    serializedName: "notDataActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoleDefinitionFilter = {
        serializedName: "RoleDefinitionFilter",
        type: {
            name: "Composite",
            className: "RoleDefinitionFilter",
            modelProperties: {
                roleName: {
                    serializedName: "roleName",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleDefinition = {
        serializedName: "RoleDefinition",
        type: {
            name: "Composite",
            className: "RoleDefinition",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                roleName: {
                    serializedName: "properties.roleName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                roleType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    serializedName: "properties.permissions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Permission"
                            }
                        }
                    }
                },
                assignableScopes: {
                    serializedName: "properties.assignableScopes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoleAssignmentFilter = {
        serializedName: "RoleAssignmentFilter",
        type: {
            name: "Composite",
            className: "RoleAssignmentFilter",
            modelProperties: {
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                canDelegate: {
                    serializedName: "canDelegate",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RoleAssignment = {
        serializedName: "RoleAssignment",
        type: {
            name: "Composite",
            className: "RoleAssignment",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                },
                roleDefinitionId: {
                    serializedName: "properties.roleDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "properties.principalId",
                    type: {
                        name: "String"
                    }
                },
                canDelegate: {
                    serializedName: "properties.canDelegate",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RoleAssignmentCreateParameters = {
        serializedName: "RoleAssignmentCreateParameters",
        type: {
            name: "Composite",
            className: "RoleAssignmentCreateParameters",
            modelProperties: {
                roleDefinitionId: {
                    required: true,
                    serializedName: "properties.roleDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    required: true,
                    serializedName: "properties.principalId",
                    type: {
                        name: "String"
                    }
                },
                canDelegate: {
                    serializedName: "properties.canDelegate",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var DenyAssignmentFilter = {
        serializedName: "DenyAssignmentFilter",
        type: {
            name: "Composite",
            className: "DenyAssignmentFilter",
            modelProperties: {
                denyAssignmentName: {
                    serializedName: "denyAssignmentName",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                gdprExportPrincipalId: {
                    serializedName: "gdprExportPrincipalId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DenyAssignmentPermission = {
        serializedName: "DenyAssignmentPermission",
        type: {
            name: "Composite",
            className: "DenyAssignmentPermission",
            modelProperties: {
                actions: {
                    serializedName: "actions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                notActions: {
                    serializedName: "notActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataActions: {
                    serializedName: "dataActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                notDataActions: {
                    serializedName: "notDataActions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Principal = {
        serializedName: "Principal",
        type: {
            name: "Composite",
            className: "Principal",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DenyAssignment = {
        serializedName: "DenyAssignment",
        type: {
            name: "Composite",
            className: "DenyAssignment",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                denyAssignmentName: {
                    serializedName: "properties.denyAssignmentName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    serializedName: "properties.permissions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DenyAssignmentPermission"
                            }
                        }
                    }
                },
                scope: {
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                },
                doNotApplyToChildScopes: {
                    serializedName: "properties.doNotApplyToChildScopes",
                    type: {
                        name: "Boolean"
                    }
                },
                principals: {
                    serializedName: "properties.principals",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Principal"
                            }
                        }
                    }
                },
                excludePrincipals: {
                    serializedName: "properties.excludePrincipals",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Principal"
                            }
                        }
                    }
                },
                isSystemProtected: {
                    serializedName: "properties.isSystemProtected",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ClassicAdministratorListResult = {
        serializedName: "ClassicAdministratorListResult",
        type: {
            name: "Composite",
            className: "ClassicAdministratorListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClassicAdministrator"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProviderOperationsMetadataListResult = {
        serializedName: "ProviderOperationsMetadataListResult",
        type: {
            name: "Composite",
            className: "ProviderOperationsMetadataListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProviderOperationsMetadata"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PermissionGetResult = {
        serializedName: "PermissionGetResult",
        type: {
            name: "Composite",
            className: "PermissionGetResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Permission"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleAssignmentListResult = {
        serializedName: "RoleAssignmentListResult",
        type: {
            name: "Composite",
            className: "RoleAssignmentListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoleAssignment"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleDefinitionListResult = {
        serializedName: "RoleDefinitionListResult",
        type: {
            name: "Composite",
            className: "RoleDefinitionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoleDefinition"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DenyAssignmentListResult = {
        serializedName: "DenyAssignmentListResult",
        type: {
            name: "Composite",
            className: "DenyAssignmentListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DenyAssignment"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ClassicAdministrator: ClassicAdministrator,
        ProviderOperation: ProviderOperation,
        ResourceType: ResourceType,
        ProviderOperationsMetadata: ProviderOperationsMetadata,
        Permission: Permission,
        RoleDefinitionFilter: RoleDefinitionFilter,
        RoleDefinition: RoleDefinition,
        RoleAssignmentFilter: RoleAssignmentFilter,
        RoleAssignment: RoleAssignment,
        RoleAssignmentCreateParameters: RoleAssignmentCreateParameters,
        DenyAssignmentFilter: DenyAssignmentFilter,
        DenyAssignmentPermission: DenyAssignmentPermission,
        Principal: Principal,
        DenyAssignment: DenyAssignment,
        ClassicAdministratorListResult: ClassicAdministratorListResult,
        ProviderOperationsMetadataListResult: ProviderOperationsMetadataListResult,
        PermissionGetResult: PermissionGetResult,
        RoleAssignmentListResult: RoleAssignmentListResult,
        RoleDefinitionListResult: RoleDefinitionListResult,
        DenyAssignmentListResult: DenyAssignmentListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ClassicAdministratorListResult: ClassicAdministratorListResult,
        ClassicAdministrator: ClassicAdministrator,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-06-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-01-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-07-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var denyAssignmentId0 = {
        parameterPath: "denyAssignmentId",
        mapper: {
            required: true,
            serializedName: "denyAssignmentId",
            type: {
                name: "String"
            }
        }
    };
    var denyAssignmentId1 = {
        parameterPath: "denyAssignmentId",
        mapper: {
            required: true,
            serializedName: "denyAssignmentId",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            defaultValue: 'resourceTypes',
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var parentResourcePath = {
        parameterPath: "parentResourcePath",
        mapper: {
            required: true,
            serializedName: "parentResourcePath",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceProviderNamespace = {
        parameterPath: "resourceProviderNamespace",
        mapper: {
            required: true,
            serializedName: "resourceProviderNamespace",
            type: {
                name: "String"
            }
        }
    };
    var resourceType = {
        parameterPath: "resourceType",
        mapper: {
            required: true,
            serializedName: "resourceType",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var roleAssignmentName = {
        parameterPath: "roleAssignmentName",
        mapper: {
            required: true,
            serializedName: "roleAssignmentName",
            type: {
                name: "String"
            }
        }
    };
    var roleDefinitionId = {
        parameterPath: "roleDefinitionId",
        mapper: {
            required: true,
            serializedName: "roleDefinitionId",
            type: {
                name: "String"
            }
        }
    };
    var roleId = {
        parameterPath: "roleId",
        mapper: {
            required: true,
            serializedName: "roleId",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var scope = {
        parameterPath: "scope",
        mapper: {
            required: true,
            serializedName: "scope",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ClassicAdministrators. */
    var ClassicAdministrators = /** @class */ (function () {
        /**
         * Create a ClassicAdministrators.
         * @param {AuthorizationManagementClientContext} client Reference to the service client.
         */
        function ClassicAdministrators(client) {
            this.client = client;
        }
        ClassicAdministrators.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ClassicAdministrators.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return ClassicAdministrators;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/classicAdministrators",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClassicAdministratorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ClassicAdministratorListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        ProviderOperationsMetadata: ProviderOperationsMetadata,
        ResourceType: ResourceType,
        ProviderOperation: ProviderOperation,
        CloudError: CloudError,
        ProviderOperationsMetadataListResult: ProviderOperationsMetadataListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProviderOperationsMetadataOperations. */
    var ProviderOperationsMetadataOperations = /** @class */ (function () {
        /**
         * Create a ProviderOperationsMetadataOperations.
         * @param {AuthorizationManagementClientContext} client Reference to the service client.
         */
        function ProviderOperationsMetadataOperations(client) {
            this.client = client;
        }
        ProviderOperationsMetadataOperations.prototype.get = function (resourceProviderNamespace$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceProviderNamespace: resourceProviderNamespace$$1,
                options: options
            }, getOperationSpec, callback);
        };
        ProviderOperationsMetadataOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        ProviderOperationsMetadataOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return ProviderOperationsMetadataOperations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Authorization/providerOperations/{resourceProviderNamespace}",
        urlParameters: [
            resourceProviderNamespace
        ],
        queryParameters: [
            apiVersion1,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderOperationsMetadata
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Authorization/providerOperations",
        queryParameters: [
            apiVersion1,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderOperationsMetadataListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProviderOperationsMetadataListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        PermissionGetResult: PermissionGetResult,
        Permission: Permission,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Permissions. */
    var Permissions = /** @class */ (function () {
        /**
         * Create a Permissions.
         * @param {AuthorizationManagementClientContext} client Reference to the service client.
         */
        function Permissions(client) {
            this.client = client;
        }
        Permissions.prototype.listForResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listForResourceGroupOperationSpec, callback);
        };
        Permissions.prototype.listForResource = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                options: options
            }, listForResourceOperationSpec, callback);
        };
        Permissions.prototype.listForResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceGroupNextOperationSpec, callback);
        };
        Permissions.prototype.listForResourceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceNextOperationSpec, callback);
        };
        return Permissions;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listForResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Authorization/permissions",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PermissionGetResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listForResourceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/permissions",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PermissionGetResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listForResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PermissionGetResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listForResourceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PermissionGetResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        RoleAssignmentListResult: RoleAssignmentListResult,
        RoleAssignment: RoleAssignment,
        CloudError: CloudError,
        RoleAssignmentCreateParameters: RoleAssignmentCreateParameters
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RoleAssignments. */
    var RoleAssignments = /** @class */ (function () {
        /**
         * Create a RoleAssignments.
         * @param {AuthorizationManagementClientContext} client Reference to the service client.
         */
        function RoleAssignments(client) {
            this.client = client;
        }
        RoleAssignments.prototype.listForResource = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                options: options
            }, listForResourceOperationSpec$1, callback);
        };
        RoleAssignments.prototype.listForResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listForResourceGroupOperationSpec$1, callback);
        };
        RoleAssignments.prototype.deleteMethod = function (scope$$1, roleAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                roleAssignmentName: roleAssignmentName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        RoleAssignments.prototype.create = function (scope$$1, roleAssignmentName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                roleAssignmentName: roleAssignmentName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        RoleAssignments.prototype.get = function (scope$$1, roleAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                roleAssignmentName: roleAssignmentName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        RoleAssignments.prototype.deleteById = function (roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                roleId: roleId$$1,
                options: options
            }, deleteByIdOperationSpec, callback);
        };
        RoleAssignments.prototype.createById = function (roleId$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                roleId: roleId$$1,
                parameters: parameters,
                options: options
            }, createByIdOperationSpec, callback);
        };
        RoleAssignments.prototype.getById = function (roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                roleId: roleId$$1,
                options: options
            }, getByIdOperationSpec, callback);
        };
        RoleAssignments.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        RoleAssignments.prototype.listForScope = function (scope$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                options: options
            }, listForScopeOperationSpec, callback);
        };
        RoleAssignments.prototype.listForResourceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceNextOperationSpec$1, callback);
        };
        RoleAssignments.prototype.listForResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceGroupNextOperationSpec$1, callback);
        };
        RoleAssignments.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        RoleAssignments.prototype.listForScopeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForScopeNextOperationSpec, callback);
        };
        return RoleAssignments;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listForResourceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments",
        urlParameters: [
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listForResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
        urlParameters: [
            scope,
            roleAssignmentName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
        urlParameters: [
            scope,
            roleAssignmentName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RoleAssignmentCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: RoleAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}",
        urlParameters: [
            scope,
            roleAssignmentName
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteByIdOperationSpec = {
        httpMethod: "DELETE",
        path: "{roleId}",
        urlParameters: [
            roleId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createByIdOperationSpec = {
        httpMethod: "PUT",
        path: "{roleId}",
        urlParameters: [
            roleId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RoleAssignmentCreateParameters, { required: true })
        },
        responses: {
            201: {
                bodyMapper: RoleAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getByIdOperationSpec = {
        httpMethod: "GET",
        path: "{roleId}",
        urlParameters: [
            roleId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listForScopeOperationSpec = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Authorization/roleAssignments",
        urlParameters: [
            scope
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listForResourceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listForResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listForScopeNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        RoleDefinition: RoleDefinition,
        Permission: Permission,
        CloudError: CloudError,
        RoleDefinitionListResult: RoleDefinitionListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RoleDefinitions. */
    var RoleDefinitions = /** @class */ (function () {
        /**
         * Create a RoleDefinitions.
         * @param {AuthorizationManagementClientContext} client Reference to the service client.
         */
        function RoleDefinitions(client) {
            this.client = client;
        }
        RoleDefinitions.prototype.deleteMethod = function (scope$$1, roleDefinitionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                roleDefinitionId: roleDefinitionId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        RoleDefinitions.prototype.get = function (scope$$1, roleDefinitionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                roleDefinitionId: roleDefinitionId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        RoleDefinitions.prototype.createOrUpdate = function (scope$$1, roleDefinitionId$$1, roleDefinition, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                roleDefinitionId: roleDefinitionId$$1,
                roleDefinition: roleDefinition,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        RoleDefinitions.prototype.list = function (scope$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        RoleDefinitions.prototype.getById = function (roleId$$1, options, callback) {
            return this.client.sendOperationRequest({
                roleId: roleId$$1,
                options: options
            }, getByIdOperationSpec$1, callback);
        };
        RoleDefinitions.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return RoleDefinitions;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
        urlParameters: [
            scope,
            roleDefinitionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
        urlParameters: [
            scope,
            roleDefinitionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}",
        urlParameters: [
            scope,
            roleDefinitionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "roleDefinition",
            mapper: __assign({}, RoleDefinition, { required: true })
        },
        responses: {
            201: {
                bodyMapper: RoleDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Authorization/roleDefinitions",
        urlParameters: [
            scope
        ],
        queryParameters: [
            filter,
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getByIdOperationSpec$1 = {
        httpMethod: "GET",
        path: "{roleId}",
        urlParameters: [
            roleId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleDefinitionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        DenyAssignmentListResult: DenyAssignmentListResult,
        DenyAssignment: DenyAssignment,
        DenyAssignmentPermission: DenyAssignmentPermission,
        Principal: Principal,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DenyAssignments. */
    var DenyAssignments = /** @class */ (function () {
        /**
         * Create a DenyAssignments.
         * @param {AuthorizationManagementClientContext} client Reference to the service client.
         */
        function DenyAssignments(client) {
            this.client = client;
        }
        DenyAssignments.prototype.listForResource = function (resourceGroupName$$1, resourceProviderNamespace$$1, parentResourcePath$$1, resourceType$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceProviderNamespace: resourceProviderNamespace$$1,
                parentResourcePath: parentResourcePath$$1,
                resourceType: resourceType$$1,
                resourceName: resourceName$$1,
                options: options
            }, listForResourceOperationSpec$2, callback);
        };
        DenyAssignments.prototype.listForResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listForResourceGroupOperationSpec$2, callback);
        };
        DenyAssignments.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        DenyAssignments.prototype.get = function (scope$$1, denyAssignmentId, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                denyAssignmentId: denyAssignmentId,
                options: options
            }, getOperationSpec$3, callback);
        };
        DenyAssignments.prototype.getById = function (denyAssignmentId, options, callback) {
            return this.client.sendOperationRequest({
                denyAssignmentId: denyAssignmentId,
                options: options
            }, getByIdOperationSpec$2, callback);
        };
        DenyAssignments.prototype.listForScope = function (scope$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                options: options
            }, listForScopeOperationSpec$1, callback);
        };
        DenyAssignments.prototype.listForResourceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceNextOperationSpec$2, callback);
        };
        DenyAssignments.prototype.listForResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceGroupNextOperationSpec$2, callback);
        };
        DenyAssignments.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        DenyAssignments.prototype.listForScopeNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForScopeNextOperationSpec$1, callback);
        };
        return DenyAssignments;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listForResourceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceProviderNamespace,
            parentResourcePath,
            resourceType,
            resourceName
        ],
        queryParameters: [
            apiVersion2,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listForResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}",
        urlParameters: [
            scope,
            denyAssignmentId0
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getByIdOperationSpec$2 = {
        httpMethod: "GET",
        path: "{denyAssignmentId}",
        urlParameters: [
            denyAssignmentId1
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignment
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listForScopeOperationSpec$1 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.Authorization/denyAssignments",
        urlParameters: [
            scope
        ],
        queryParameters: [
            apiVersion2,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listForResourceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listForResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listForScopeNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DenyAssignmentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-authorization";
    var packageVersion = "1.0.0-preview";
    var AuthorizationManagementClientContext = /** @class */ (function (_super) {
        __extends(AuthorizationManagementClientContext, _super);
        /**
         * Initializes a new instance of the AuthorizationManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function AuthorizationManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AuthorizationManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AuthorizationManagementClient = /** @class */ (function (_super) {
        __extends(AuthorizationManagementClient, _super);
        /**
         * Initializes a new instance of the AuthorizationManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function AuthorizationManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.classicAdministrators = new ClassicAdministrators(_this);
            _this.providerOperationsMetadata = new ProviderOperationsMetadataOperations(_this);
            _this.permissions = new Permissions(_this);
            _this.roleAssignments = new RoleAssignments(_this);
            _this.roleDefinitions = new RoleDefinitions(_this);
            _this.denyAssignments = new DenyAssignments(_this);
            return _this;
        }
        return AuthorizationManagementClient;
    }(AuthorizationManagementClientContext));

    exports.AuthorizationManagementClient = AuthorizationManagementClient;
    exports.AuthorizationManagementClientContext = AuthorizationManagementClientContext;
    exports.AuthorizationManagementModels = index;
    exports.AuthorizationManagementMappers = mappers;
    exports.ClassicAdministrators = ClassicAdministrators;
    exports.ProviderOperationsMetadataOperations = ProviderOperationsMetadataOperations;
    exports.Permissions = Permissions;
    exports.RoleAssignments = RoleAssignments;
    exports.RoleDefinitions = RoleDefinitions;
    exports.DenyAssignments = DenyAssignments;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-authorization.js.map
