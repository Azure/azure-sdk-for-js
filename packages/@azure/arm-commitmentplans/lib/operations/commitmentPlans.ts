/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/commitmentPlansMappers";
import * as Parameters from "../models/parameters";
import { AzureMLCommitmentPlansManagementClientContext } from "../azureMLCommitmentPlansManagementClientContext";

/** Class representing a CommitmentPlans. */
export class CommitmentPlans {
  private readonly client: AzureMLCommitmentPlansManagementClientContext;

  /**
   * Create a CommitmentPlans.
   * @param {AzureMLCommitmentPlansManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureMLCommitmentPlansManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieve an Azure ML commitment plan by its subscription, resource group and name.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansGetResponse>
   */
  get(resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommitmentPlansGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param callback The callback
   */
  get(resourceGroupName: string, commitmentPlanName: string, callback: msRest.ServiceCallback<Models.CommitmentPlan>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, commitmentPlanName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommitmentPlan>): void;
  get(resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommitmentPlan>, callback?: msRest.ServiceCallback<Models.CommitmentPlan>): Promise<Models.CommitmentPlansGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        commitmentPlanName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CommitmentPlansGetResponse>;
  }

  /**
   * Create a new Azure ML commitment plan resource or updates an existing one.
   * @param createOrUpdatePayload The payload to create or update the Azure ML commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansCreateOrUpdateResponse>
   */
  createOrUpdate(createOrUpdatePayload: Models.CommitmentPlan, resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommitmentPlansCreateOrUpdateResponse>;
  /**
   * @param createOrUpdatePayload The payload to create or update the Azure ML commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param callback The callback
   */
  createOrUpdate(createOrUpdatePayload: Models.CommitmentPlan, resourceGroupName: string, commitmentPlanName: string, callback: msRest.ServiceCallback<Models.CommitmentPlan>): void;
  /**
   * @param createOrUpdatePayload The payload to create or update the Azure ML commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(createOrUpdatePayload: Models.CommitmentPlan, resourceGroupName: string, commitmentPlanName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommitmentPlan>): void;
  createOrUpdate(createOrUpdatePayload: Models.CommitmentPlan, resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommitmentPlan>, callback?: msRest.ServiceCallback<Models.CommitmentPlan>): Promise<Models.CommitmentPlansCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        createOrUpdatePayload,
        resourceGroupName,
        commitmentPlanName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.CommitmentPlansCreateOrUpdateResponse>;
  }

  /**
   * Remove an existing Azure ML commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  remove(resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param callback The callback
   */
  remove(resourceGroupName: string, commitmentPlanName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param options The optional parameters
   * @param callback The callback
   */
  remove(resourceGroupName: string, commitmentPlanName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  remove(resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        commitmentPlanName,
        options
      },
      removeOperationSpec,
      callback);
  }

  /**
   * Patch an existing Azure ML commitment plan resource.
   * @param patchPayload The payload to use to patch the Azure ML commitment plan. Only tags and SKU
   * may be modified on an existing commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansPatchResponse>
   */
  patch(patchPayload: Models.CommitmentPlanPatchPayload, resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommitmentPlansPatchResponse>;
  /**
   * @param patchPayload The payload to use to patch the Azure ML commitment plan. Only tags and SKU
   * may be modified on an existing commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param callback The callback
   */
  patch(patchPayload: Models.CommitmentPlanPatchPayload, resourceGroupName: string, commitmentPlanName: string, callback: msRest.ServiceCallback<Models.CommitmentPlan>): void;
  /**
   * @param patchPayload The payload to use to patch the Azure ML commitment plan. Only tags and SKU
   * may be modified on an existing commitment plan.
   * @param resourceGroupName The resource group name.
   * @param commitmentPlanName The Azure ML commitment plan name.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(patchPayload: Models.CommitmentPlanPatchPayload, resourceGroupName: string, commitmentPlanName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommitmentPlan>): void;
  patch(patchPayload: Models.CommitmentPlanPatchPayload, resourceGroupName: string, commitmentPlanName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommitmentPlan>, callback?: msRest.ServiceCallback<Models.CommitmentPlan>): Promise<Models.CommitmentPlansPatchResponse> {
    return this.client.sendOperationRequest(
      {
        patchPayload,
        resourceGroupName,
        commitmentPlanName,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.CommitmentPlansPatchResponse>;
  }

  /**
   * Retrieve all Azure ML commitment plans in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansListResponse>
   */
  list(options?: Models.CommitmentPlansListOptionalParams): Promise<Models.CommitmentPlansListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.CommitmentPlansListOptionalParams, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  list(options?: Models.CommitmentPlansListOptionalParams | msRest.ServiceCallback<Models.CommitmentPlanListResult>, callback?: msRest.ServiceCallback<Models.CommitmentPlanListResult>): Promise<Models.CommitmentPlansListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CommitmentPlansListResponse>;
  }

  /**
   * Retrieve all Azure ML commitment plans in a resource group.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansListInResourceGroupResponse>
   */
  listInResourceGroup(resourceGroupName: string, options?: Models.CommitmentPlansListInResourceGroupOptionalParams): Promise<Models.CommitmentPlansListInResourceGroupResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  listInResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInResourceGroup(resourceGroupName: string, options: Models.CommitmentPlansListInResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  listInResourceGroup(resourceGroupName: string, options?: Models.CommitmentPlansListInResourceGroupOptionalParams | msRest.ServiceCallback<Models.CommitmentPlanListResult>, callback?: msRest.ServiceCallback<Models.CommitmentPlanListResult>): Promise<Models.CommitmentPlansListInResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listInResourceGroupOperationSpec,
      callback) as Promise<Models.CommitmentPlansListInResourceGroupResponse>;
  }

  /**
   * Retrieve all Azure ML commitment plans in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CommitmentPlansListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommitmentPlanListResult>, callback?: msRest.ServiceCallback<Models.CommitmentPlanListResult>): Promise<Models.CommitmentPlansListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.CommitmentPlansListNextResponse>;
  }

  /**
   * Retrieve all Azure ML commitment plans in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommitmentPlansListInResourceGroupNextResponse>
   */
  listInResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CommitmentPlansListInResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommitmentPlanListResult>): void;
  listInResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommitmentPlanListResult>, callback?: msRest.ServiceCallback<Models.CommitmentPlanListResult>): Promise<Models.CommitmentPlansListInResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInResourceGroupNextOperationSpec,
      callback) as Promise<Models.CommitmentPlansListInResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.commitmentPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlan
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.commitmentPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "createOrUpdatePayload",
    mapper: {
      ...Mappers.CommitmentPlan,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlan
    },
    201: {
      bodyMapper: Mappers.CommitmentPlan
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const removeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.commitmentPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.commitmentPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "patchPayload",
    mapper: {
      ...Mappers.CommitmentPlanPatchPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlan
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/commitmentPlans",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlanListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listInResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlanListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlanListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listInResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommitmentPlanListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
