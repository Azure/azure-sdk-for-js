/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmLogic = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for WorkflowProvisioningState.
     * Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready',
     * 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed',
     * 'Succeeded', 'Moving', 'Updating', 'Registering', 'Registered',
     * 'Unregistering', 'Unregistered', 'Completed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WorkflowProvisioningState =
     * <WorkflowProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WorkflowProvisioningState;
    (function (WorkflowProvisioningState) {
        WorkflowProvisioningState["NotSpecified"] = "NotSpecified";
        WorkflowProvisioningState["Accepted"] = "Accepted";
        WorkflowProvisioningState["Running"] = "Running";
        WorkflowProvisioningState["Ready"] = "Ready";
        WorkflowProvisioningState["Creating"] = "Creating";
        WorkflowProvisioningState["Created"] = "Created";
        WorkflowProvisioningState["Deleting"] = "Deleting";
        WorkflowProvisioningState["Deleted"] = "Deleted";
        WorkflowProvisioningState["Canceled"] = "Canceled";
        WorkflowProvisioningState["Failed"] = "Failed";
        WorkflowProvisioningState["Succeeded"] = "Succeeded";
        WorkflowProvisioningState["Moving"] = "Moving";
        WorkflowProvisioningState["Updating"] = "Updating";
        WorkflowProvisioningState["Registering"] = "Registering";
        WorkflowProvisioningState["Registered"] = "Registered";
        WorkflowProvisioningState["Unregistering"] = "Unregistering";
        WorkflowProvisioningState["Unregistered"] = "Unregistered";
        WorkflowProvisioningState["Completed"] = "Completed";
    })(WorkflowProvisioningState || (WorkflowProvisioningState = {}));
    /**
     * Defines values for WorkflowState.
     * Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
     * 'Deleted', 'Suspended'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WorkflowState =
     * <WorkflowState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WorkflowState;
    (function (WorkflowState) {
        WorkflowState["NotSpecified"] = "NotSpecified";
        WorkflowState["Completed"] = "Completed";
        WorkflowState["Enabled"] = "Enabled";
        WorkflowState["Disabled"] = "Disabled";
        WorkflowState["Deleted"] = "Deleted";
        WorkflowState["Suspended"] = "Suspended";
    })(WorkflowState || (WorkflowState = {}));
    /**
     * Defines values for SkuName.
     * Possible values include: 'NotSpecified', 'Free', 'Shared', 'Basic',
     * 'Standard', 'Premium'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SkuName = <SkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["NotSpecified"] = "NotSpecified";
        SkuName["Free"] = "Free";
        SkuName["Shared"] = "Shared";
        SkuName["Basic"] = "Basic";
        SkuName["Standard"] = "Standard";
        SkuName["Premium"] = "Premium";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for ParameterType.
     * Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int',
     * 'Float', 'Bool', 'Array', 'Object', 'SecureObject'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ParameterType =
     * <ParameterType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ParameterType;
    (function (ParameterType) {
        ParameterType["NotSpecified"] = "NotSpecified";
        ParameterType["String"] = "String";
        ParameterType["SecureString"] = "SecureString";
        ParameterType["Int"] = "Int";
        ParameterType["Float"] = "Float";
        ParameterType["Bool"] = "Bool";
        ParameterType["Array"] = "Array";
        ParameterType["Object"] = "Object";
        ParameterType["SecureObject"] = "SecureObject";
    })(ParameterType || (ParameterType = {}));
    /**
     * Defines values for WorkflowTriggerProvisioningState.
     * Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready',
     * 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed',
     * 'Succeeded', 'Moving', 'Updating', 'Registering', 'Registered',
     * 'Unregistering', 'Unregistered', 'Completed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WorkflowTriggerProvisioningState =
     * <WorkflowTriggerProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WorkflowTriggerProvisioningState;
    (function (WorkflowTriggerProvisioningState) {
        WorkflowTriggerProvisioningState["NotSpecified"] = "NotSpecified";
        WorkflowTriggerProvisioningState["Accepted"] = "Accepted";
        WorkflowTriggerProvisioningState["Running"] = "Running";
        WorkflowTriggerProvisioningState["Ready"] = "Ready";
        WorkflowTriggerProvisioningState["Creating"] = "Creating";
        WorkflowTriggerProvisioningState["Created"] = "Created";
        WorkflowTriggerProvisioningState["Deleting"] = "Deleting";
        WorkflowTriggerProvisioningState["Deleted"] = "Deleted";
        WorkflowTriggerProvisioningState["Canceled"] = "Canceled";
        WorkflowTriggerProvisioningState["Failed"] = "Failed";
        WorkflowTriggerProvisioningState["Succeeded"] = "Succeeded";
        WorkflowTriggerProvisioningState["Moving"] = "Moving";
        WorkflowTriggerProvisioningState["Updating"] = "Updating";
        WorkflowTriggerProvisioningState["Registering"] = "Registering";
        WorkflowTriggerProvisioningState["Registered"] = "Registered";
        WorkflowTriggerProvisioningState["Unregistering"] = "Unregistering";
        WorkflowTriggerProvisioningState["Unregistered"] = "Unregistered";
        WorkflowTriggerProvisioningState["Completed"] = "Completed";
    })(WorkflowTriggerProvisioningState || (WorkflowTriggerProvisioningState = {}));
    /**
     * Defines values for WorkflowStatus.
     * Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
     * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted',
     * 'TimedOut', 'Aborted', 'Ignored'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: WorkflowStatus =
     * <WorkflowStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var WorkflowStatus;
    (function (WorkflowStatus) {
        WorkflowStatus["NotSpecified"] = "NotSpecified";
        WorkflowStatus["Paused"] = "Paused";
        WorkflowStatus["Running"] = "Running";
        WorkflowStatus["Waiting"] = "Waiting";
        WorkflowStatus["Succeeded"] = "Succeeded";
        WorkflowStatus["Skipped"] = "Skipped";
        WorkflowStatus["Suspended"] = "Suspended";
        WorkflowStatus["Cancelled"] = "Cancelled";
        WorkflowStatus["Failed"] = "Failed";
        WorkflowStatus["Faulted"] = "Faulted";
        WorkflowStatus["TimedOut"] = "TimedOut";
        WorkflowStatus["Aborted"] = "Aborted";
        WorkflowStatus["Ignored"] = "Ignored";
    })(WorkflowStatus || (WorkflowStatus = {}));
    /**
     * Defines values for RecurrenceFrequency.
     * Possible values include: 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day',
     * 'Week', 'Month', 'Year'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RecurrenceFrequency =
     * <RecurrenceFrequency>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RecurrenceFrequency;
    (function (RecurrenceFrequency) {
        RecurrenceFrequency["NotSpecified"] = "NotSpecified";
        RecurrenceFrequency["Second"] = "Second";
        RecurrenceFrequency["Minute"] = "Minute";
        RecurrenceFrequency["Hour"] = "Hour";
        RecurrenceFrequency["Day"] = "Day";
        RecurrenceFrequency["Week"] = "Week";
        RecurrenceFrequency["Month"] = "Month";
        RecurrenceFrequency["Year"] = "Year";
    })(RecurrenceFrequency || (RecurrenceFrequency = {}));
    /**
     * Defines values for DaysOfWeek.
     * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
     * 'Thursday', 'Friday', 'Saturday'
     * @readonly
     * @enum {string}
     */
    var DaysOfWeek;
    (function (DaysOfWeek) {
        DaysOfWeek["Sunday"] = "Sunday";
        DaysOfWeek["Monday"] = "Monday";
        DaysOfWeek["Tuesday"] = "Tuesday";
        DaysOfWeek["Wednesday"] = "Wednesday";
        DaysOfWeek["Thursday"] = "Thursday";
        DaysOfWeek["Friday"] = "Friday";
        DaysOfWeek["Saturday"] = "Saturday";
    })(DaysOfWeek || (DaysOfWeek = {}));
    /**
     * Defines values for DayOfWeek.
     * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
     * 'Thursday', 'Friday', 'Saturday'
     * @readonly
     * @enum {string}
     */
    var DayOfWeek;
    (function (DayOfWeek) {
        DayOfWeek["Sunday"] = "Sunday";
        DayOfWeek["Monday"] = "Monday";
        DayOfWeek["Tuesday"] = "Tuesday";
        DayOfWeek["Wednesday"] = "Wednesday";
        DayOfWeek["Thursday"] = "Thursday";
        DayOfWeek["Friday"] = "Friday";
        DayOfWeek["Saturday"] = "Saturday";
    })(DayOfWeek || (DayOfWeek = {}));
    /**
     * Defines values for KeyType.
     * Possible values include: 'NotSpecified', 'Primary', 'Secondary'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: KeyType = <KeyType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var KeyType;
    (function (KeyType) {
        KeyType["NotSpecified"] = "NotSpecified";
        KeyType["Primary"] = "Primary";
        KeyType["Secondary"] = "Secondary";
    })(KeyType || (KeyType = {}));
    /**
     * Defines values for IntegrationAccountSkuName.
     * Possible values include: 'NotSpecified', 'Free', 'Basic', 'Standard'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IntegrationAccountSkuName =
     * <IntegrationAccountSkuName>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IntegrationAccountSkuName;
    (function (IntegrationAccountSkuName) {
        IntegrationAccountSkuName["NotSpecified"] = "NotSpecified";
        IntegrationAccountSkuName["Free"] = "Free";
        IntegrationAccountSkuName["Basic"] = "Basic";
        IntegrationAccountSkuName["Standard"] = "Standard";
    })(IntegrationAccountSkuName || (IntegrationAccountSkuName = {}));
    /**
     * Defines values for SchemaType.
     * Possible values include: 'NotSpecified', 'Xml'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SchemaType = <SchemaType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SchemaType;
    (function (SchemaType) {
        SchemaType["NotSpecified"] = "NotSpecified";
        SchemaType["Xml"] = "Xml";
    })(SchemaType || (SchemaType = {}));
    /**
     * Defines values for MapType.
     * Possible values include: 'NotSpecified', 'Xslt', 'Xslt20', 'Xslt30',
     * 'Liquid'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MapType = <MapType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MapType;
    (function (MapType) {
        MapType["NotSpecified"] = "NotSpecified";
        MapType["Xslt"] = "Xslt";
        MapType["Xslt20"] = "Xslt20";
        MapType["Xslt30"] = "Xslt30";
        MapType["Liquid"] = "Liquid";
    })(MapType || (MapType = {}));
    /**
     * Defines values for PartnerType.
     * Possible values include: 'NotSpecified', 'B2B'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PartnerType =
     * <PartnerType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PartnerType;
    (function (PartnerType) {
        PartnerType["NotSpecified"] = "NotSpecified";
        PartnerType["B2B"] = "B2B";
    })(PartnerType || (PartnerType = {}));
    /**
     * Defines values for AgreementType.
     * Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
     * @readonly
     * @enum {string}
     */
    var AgreementType;
    (function (AgreementType) {
        AgreementType["NotSpecified"] = "NotSpecified";
        AgreementType["AS2"] = "AS2";
        AgreementType["X12"] = "X12";
        AgreementType["Edifact"] = "Edifact";
    })(AgreementType || (AgreementType = {}));
    /**
     * Defines values for HashingAlgorithm.
     * Possible values include: 'NotSpecified', 'None', 'MD5', 'SHA1', 'SHA2256',
     * 'SHA2384', 'SHA2512'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: HashingAlgorithm =
     * <HashingAlgorithm>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var HashingAlgorithm;
    (function (HashingAlgorithm) {
        HashingAlgorithm["NotSpecified"] = "NotSpecified";
        HashingAlgorithm["None"] = "None";
        HashingAlgorithm["MD5"] = "MD5";
        HashingAlgorithm["SHA1"] = "SHA1";
        HashingAlgorithm["SHA2256"] = "SHA2256";
        HashingAlgorithm["SHA2384"] = "SHA2384";
        HashingAlgorithm["SHA2512"] = "SHA2512";
    })(HashingAlgorithm || (HashingAlgorithm = {}));
    /**
     * Defines values for EncryptionAlgorithm.
     * Possible values include: 'NotSpecified', 'None', 'DES3', 'RC2', 'AES128',
     * 'AES192', 'AES256'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EncryptionAlgorithm =
     * <EncryptionAlgorithm>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EncryptionAlgorithm;
    (function (EncryptionAlgorithm) {
        EncryptionAlgorithm["NotSpecified"] = "NotSpecified";
        EncryptionAlgorithm["None"] = "None";
        EncryptionAlgorithm["DES3"] = "DES3";
        EncryptionAlgorithm["RC2"] = "RC2";
        EncryptionAlgorithm["AES128"] = "AES128";
        EncryptionAlgorithm["AES192"] = "AES192";
        EncryptionAlgorithm["AES256"] = "AES256";
    })(EncryptionAlgorithm || (EncryptionAlgorithm = {}));
    /**
     * Defines values for SigningAlgorithm.
     * Possible values include: 'NotSpecified', 'Default', 'SHA1', 'SHA2256',
     * 'SHA2384', 'SHA2512'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SigningAlgorithm =
     * <SigningAlgorithm>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SigningAlgorithm;
    (function (SigningAlgorithm) {
        SigningAlgorithm["NotSpecified"] = "NotSpecified";
        SigningAlgorithm["Default"] = "Default";
        SigningAlgorithm["SHA1"] = "SHA1";
        SigningAlgorithm["SHA2256"] = "SHA2256";
        SigningAlgorithm["SHA2384"] = "SHA2384";
        SigningAlgorithm["SHA2512"] = "SHA2512";
    })(SigningAlgorithm || (SigningAlgorithm = {}));
    /**
     * Defines values for TrailingSeparatorPolicy.
     * Possible values include: 'NotSpecified', 'NotAllowed', 'Optional',
     * 'Mandatory'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TrailingSeparatorPolicy =
     * <TrailingSeparatorPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TrailingSeparatorPolicy;
    (function (TrailingSeparatorPolicy) {
        TrailingSeparatorPolicy["NotSpecified"] = "NotSpecified";
        TrailingSeparatorPolicy["NotAllowed"] = "NotAllowed";
        TrailingSeparatorPolicy["Optional"] = "Optional";
        TrailingSeparatorPolicy["Mandatory"] = "Mandatory";
    })(TrailingSeparatorPolicy || (TrailingSeparatorPolicy = {}));
    /**
     * Defines values for X12CharacterSet.
     * Possible values include: 'NotSpecified', 'Basic', 'Extended', 'UTF8'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: X12CharacterSet =
     * <X12CharacterSet>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var X12CharacterSet;
    (function (X12CharacterSet) {
        X12CharacterSet["NotSpecified"] = "NotSpecified";
        X12CharacterSet["Basic"] = "Basic";
        X12CharacterSet["Extended"] = "Extended";
        X12CharacterSet["UTF8"] = "UTF8";
    })(X12CharacterSet || (X12CharacterSet = {}));
    /**
     * Defines values for SegmentTerminatorSuffix.
     * Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
     * @readonly
     * @enum {string}
     */
    var SegmentTerminatorSuffix;
    (function (SegmentTerminatorSuffix) {
        SegmentTerminatorSuffix["NotSpecified"] = "NotSpecified";
        SegmentTerminatorSuffix["None"] = "None";
        SegmentTerminatorSuffix["CR"] = "CR";
        SegmentTerminatorSuffix["LF"] = "LF";
        SegmentTerminatorSuffix["CRLF"] = "CRLF";
    })(SegmentTerminatorSuffix || (SegmentTerminatorSuffix = {}));
    /**
     * Defines values for X12DateFormat.
     * Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: X12DateFormat =
     * <X12DateFormat>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var X12DateFormat;
    (function (X12DateFormat) {
        X12DateFormat["NotSpecified"] = "NotSpecified";
        X12DateFormat["CCYYMMDD"] = "CCYYMMDD";
        X12DateFormat["YYMMDD"] = "YYMMDD";
    })(X12DateFormat || (X12DateFormat = {}));
    /**
     * Defines values for X12TimeFormat.
     * Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd',
     * 'HHMMSSd'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: X12TimeFormat =
     * <X12TimeFormat>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var X12TimeFormat;
    (function (X12TimeFormat) {
        X12TimeFormat["NotSpecified"] = "NotSpecified";
        X12TimeFormat["HHMM"] = "HHMM";
        X12TimeFormat["HHMMSS"] = "HHMMSS";
        X12TimeFormat["HHMMSSdd"] = "HHMMSSdd";
        X12TimeFormat["HHMMSSd"] = "HHMMSSd";
    })(X12TimeFormat || (X12TimeFormat = {}));
    /**
     * Defines values for UsageIndicator.
     * Possible values include: 'NotSpecified', 'Test', 'Information', 'Production'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UsageIndicator =
     * <UsageIndicator>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UsageIndicator;
    (function (UsageIndicator) {
        UsageIndicator["NotSpecified"] = "NotSpecified";
        UsageIndicator["Test"] = "Test";
        UsageIndicator["Information"] = "Information";
        UsageIndicator["Production"] = "Production";
    })(UsageIndicator || (UsageIndicator = {}));
    /**
     * Defines values for MessageFilterType.
     * Possible values include: 'NotSpecified', 'Include', 'Exclude'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: MessageFilterType =
     * <MessageFilterType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var MessageFilterType;
    (function (MessageFilterType) {
        MessageFilterType["NotSpecified"] = "NotSpecified";
        MessageFilterType["Include"] = "Include";
        MessageFilterType["Exclude"] = "Exclude";
    })(MessageFilterType || (MessageFilterType = {}));
    /**
     * Defines values for EdifactCharacterSet.
     * Possible values include: 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD',
     * 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY',
     * 'KECA'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EdifactCharacterSet =
     * <EdifactCharacterSet>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EdifactCharacterSet;
    (function (EdifactCharacterSet) {
        EdifactCharacterSet["NotSpecified"] = "NotSpecified";
        EdifactCharacterSet["UNOB"] = "UNOB";
        EdifactCharacterSet["UNOA"] = "UNOA";
        EdifactCharacterSet["UNOC"] = "UNOC";
        EdifactCharacterSet["UNOD"] = "UNOD";
        EdifactCharacterSet["UNOE"] = "UNOE";
        EdifactCharacterSet["UNOF"] = "UNOF";
        EdifactCharacterSet["UNOG"] = "UNOG";
        EdifactCharacterSet["UNOH"] = "UNOH";
        EdifactCharacterSet["UNOI"] = "UNOI";
        EdifactCharacterSet["UNOJ"] = "UNOJ";
        EdifactCharacterSet["UNOK"] = "UNOK";
        EdifactCharacterSet["UNOX"] = "UNOX";
        EdifactCharacterSet["UNOY"] = "UNOY";
        EdifactCharacterSet["KECA"] = "KECA";
    })(EdifactCharacterSet || (EdifactCharacterSet = {}));
    /**
     * Defines values for EdifactDecimalIndicator.
     * Possible values include: 'NotSpecified', 'Comma', 'Decimal'
     * @readonly
     * @enum {string}
     */
    var EdifactDecimalIndicator;
    (function (EdifactDecimalIndicator) {
        EdifactDecimalIndicator["NotSpecified"] = "NotSpecified";
        EdifactDecimalIndicator["Comma"] = "Comma";
        EdifactDecimalIndicator["Decimal"] = "Decimal";
    })(EdifactDecimalIndicator || (EdifactDecimalIndicator = {}));
    /**
     * Defines values for TrackEventsOperationOptions.
     * Possible values include: 'None', 'DisableSourceInfoEnrich'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TrackEventsOperationOptions =
     * <TrackEventsOperationOptions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TrackEventsOperationOptions;
    (function (TrackEventsOperationOptions) {
        TrackEventsOperationOptions["None"] = "None";
        TrackEventsOperationOptions["DisableSourceInfoEnrich"] = "DisableSourceInfoEnrich";
    })(TrackEventsOperationOptions || (TrackEventsOperationOptions = {}));
    /**
     * Defines values for EventLevel.
     * Possible values include: 'LogAlways', 'Critical', 'Error', 'Warning',
     * 'Informational', 'Verbose'
     * @readonly
     * @enum {string}
     */
    var EventLevel;
    (function (EventLevel) {
        EventLevel["LogAlways"] = "LogAlways";
        EventLevel["Critical"] = "Critical";
        EventLevel["Error"] = "Error";
        EventLevel["Warning"] = "Warning";
        EventLevel["Informational"] = "Informational";
        EventLevel["Verbose"] = "Verbose";
    })(EventLevel || (EventLevel = {}));
    /**
     * Defines values for TrackingRecordType.
     * Possible values include: 'NotSpecified', 'Custom', 'AS2Message', 'AS2MDN',
     * 'X12Interchange', 'X12FunctionalGroup', 'X12TransactionSet',
     * 'X12InterchangeAcknowledgment', 'X12FunctionalGroupAcknowledgment',
     * 'X12TransactionSetAcknowledgment', 'EdifactInterchange',
     * 'EdifactFunctionalGroup', 'EdifactTransactionSet',
     * 'EdifactInterchangeAcknowledgment', 'EdifactFunctionalGroupAcknowledgment',
     * 'EdifactTransactionSetAcknowledgment'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TrackingRecordType =
     * <TrackingRecordType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TrackingRecordType;
    (function (TrackingRecordType) {
        TrackingRecordType["NotSpecified"] = "NotSpecified";
        TrackingRecordType["Custom"] = "Custom";
        TrackingRecordType["AS2Message"] = "AS2Message";
        TrackingRecordType["AS2MDN"] = "AS2MDN";
        TrackingRecordType["X12Interchange"] = "X12Interchange";
        TrackingRecordType["X12FunctionalGroup"] = "X12FunctionalGroup";
        TrackingRecordType["X12TransactionSet"] = "X12TransactionSet";
        TrackingRecordType["X12InterchangeAcknowledgment"] = "X12InterchangeAcknowledgment";
        TrackingRecordType["X12FunctionalGroupAcknowledgment"] = "X12FunctionalGroupAcknowledgment";
        TrackingRecordType["X12TransactionSetAcknowledgment"] = "X12TransactionSetAcknowledgment";
        TrackingRecordType["EdifactInterchange"] = "EdifactInterchange";
        TrackingRecordType["EdifactFunctionalGroup"] = "EdifactFunctionalGroup";
        TrackingRecordType["EdifactTransactionSet"] = "EdifactTransactionSet";
        TrackingRecordType["EdifactInterchangeAcknowledgment"] = "EdifactInterchangeAcknowledgment";
        TrackingRecordType["EdifactFunctionalGroupAcknowledgment"] = "EdifactFunctionalGroupAcknowledgment";
        TrackingRecordType["EdifactTransactionSetAcknowledgment"] = "EdifactTransactionSetAcknowledgment";
    })(TrackingRecordType || (TrackingRecordType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get WorkflowProvisioningState () { return WorkflowProvisioningState; },
        get WorkflowState () { return WorkflowState; },
        get SkuName () { return SkuName; },
        get ParameterType () { return ParameterType; },
        get WorkflowTriggerProvisioningState () { return WorkflowTriggerProvisioningState; },
        get WorkflowStatus () { return WorkflowStatus; },
        get RecurrenceFrequency () { return RecurrenceFrequency; },
        get DaysOfWeek () { return DaysOfWeek; },
        get DayOfWeek () { return DayOfWeek; },
        get KeyType () { return KeyType; },
        get IntegrationAccountSkuName () { return IntegrationAccountSkuName; },
        get SchemaType () { return SchemaType; },
        get MapType () { return MapType; },
        get PartnerType () { return PartnerType; },
        get AgreementType () { return AgreementType; },
        get HashingAlgorithm () { return HashingAlgorithm; },
        get EncryptionAlgorithm () { return EncryptionAlgorithm; },
        get SigningAlgorithm () { return SigningAlgorithm; },
        get TrailingSeparatorPolicy () { return TrailingSeparatorPolicy; },
        get X12CharacterSet () { return X12CharacterSet; },
        get SegmentTerminatorSuffix () { return SegmentTerminatorSuffix; },
        get X12DateFormat () { return X12DateFormat; },
        get X12TimeFormat () { return X12TimeFormat; },
        get UsageIndicator () { return UsageIndicator; },
        get MessageFilterType () { return MessageFilterType; },
        get EdifactCharacterSet () { return EdifactCharacterSet; },
        get EdifactDecimalIndicator () { return EdifactDecimalIndicator; },
        get TrackEventsOperationOptions () { return TrackEventsOperationOptions; },
        get EventLevel () { return EventLevel; },
        get TrackingRecordType () { return TrackingRecordType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceReference = {
        serializedName: "ResourceReference",
        type: {
            name: "Composite",
            className: "ResourceReference",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "ResourceReference"
                    }
                }
            }
        }
    };
    var WorkflowParameter = {
        serializedName: "WorkflowParameter",
        type: {
            name: "Composite",
            className: "WorkflowParameter",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Object"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Workflow = {
        serializedName: "Workflow",
        type: {
            name: "Composite",
            className: "Workflow",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, accessEndpoint: {
                    readOnly: true,
                    serializedName: "properties.accessEndpoint",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, integrationAccount: {
                    serializedName: "properties.integrationAccount",
                    type: {
                        name: "Composite",
                        className: "ResourceReference"
                    }
                }, definition: {
                    serializedName: "properties.definition",
                    type: {
                        name: "Object"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "WorkflowParameter"
                            }
                        }
                    }
                } })
        }
    };
    var WorkflowFilter = {
        serializedName: "WorkflowFilter",
        type: {
            name: "Composite",
            className: "WorkflowFilter",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowVersion = {
        serializedName: "WorkflowVersion",
        type: {
            name: "Composite",
            className: "WorkflowVersion",
            modelProperties: __assign({}, Resource.type.modelProperties, { createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, version: {
                    readOnly: true,
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, accessEndpoint: {
                    readOnly: true,
                    serializedName: "properties.accessEndpoint",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, integrationAccount: {
                    serializedName: "properties.integrationAccount",
                    type: {
                        name: "Composite",
                        className: "ResourceReference"
                    }
                }, definition: {
                    serializedName: "properties.definition",
                    type: {
                        name: "Object"
                    }
                }, parameters: {
                    serializedName: "properties.parameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "WorkflowParameter"
                            }
                        }
                    }
                } })
        }
    };
    var RecurrenceScheduleOccurrence = {
        serializedName: "RecurrenceScheduleOccurrence",
        type: {
            name: "Composite",
            className: "RecurrenceScheduleOccurrence",
            modelProperties: {
                day: {
                    serializedName: "day",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Sunday",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday"
                        ]
                    }
                },
                occurrence: {
                    serializedName: "occurrence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecurrenceSchedule = {
        serializedName: "RecurrenceSchedule",
        type: {
            name: "Composite",
            className: "RecurrenceSchedule",
            modelProperties: {
                minutes: {
                    serializedName: "minutes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                hours: {
                    serializedName: "hours",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                weekDays: {
                    serializedName: "weekDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Enum",
                                allowedValues: [
                                    "Sunday",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday"
                                ]
                            }
                        }
                    }
                },
                monthDays: {
                    serializedName: "monthDays",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                monthlyOccurrences: {
                    serializedName: "monthlyOccurrences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RecurrenceScheduleOccurrence"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkflowTriggerRecurrence = {
        serializedName: "WorkflowTriggerRecurrence",
        type: {
            name: "Composite",
            className: "WorkflowTriggerRecurrence",
            modelProperties: {
                frequency: {
                    serializedName: "frequency",
                    type: {
                        name: "String"
                    }
                },
                interval: {
                    serializedName: "interval",
                    type: {
                        name: "Number"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "String"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "String"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                schedule: {
                    serializedName: "schedule",
                    type: {
                        name: "Composite",
                        className: "RecurrenceSchedule"
                    }
                }
            }
        }
    };
    var WorkflowTrigger = {
        serializedName: "WorkflowTrigger",
        type: {
            name: "Composite",
            className: "WorkflowTrigger",
            modelProperties: __assign({}, SubResource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, lastExecutionTime: {
                    readOnly: true,
                    serializedName: "properties.lastExecutionTime",
                    type: {
                        name: "DateTime"
                    }
                }, nextExecutionTime: {
                    readOnly: true,
                    serializedName: "properties.nextExecutionTime",
                    type: {
                        name: "DateTime"
                    }
                }, recurrence: {
                    readOnly: true,
                    serializedName: "properties.recurrence",
                    type: {
                        name: "Composite",
                        className: "WorkflowTriggerRecurrence"
                    }
                }, workflow: {
                    readOnly: true,
                    serializedName: "properties.workflow",
                    type: {
                        name: "Composite",
                        className: "ResourceReference"
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WorkflowTriggerFilter = {
        serializedName: "WorkflowTriggerFilter",
        type: {
            name: "Composite",
            className: "WorkflowTriggerFilter",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowTriggerListCallbackUrlQueries = {
        serializedName: "WorkflowTriggerListCallbackUrlQueries",
        type: {
            name: "Composite",
            className: "WorkflowTriggerListCallbackUrlQueries",
            modelProperties: {
                apiVersion: {
                    serializedName: "api-version",
                    type: {
                        name: "String"
                    }
                },
                sp: {
                    serializedName: "sp",
                    type: {
                        name: "String"
                    }
                },
                sv: {
                    serializedName: "sv",
                    type: {
                        name: "String"
                    }
                },
                sig: {
                    serializedName: "sig",
                    type: {
                        name: "String"
                    }
                },
                se: {
                    serializedName: "se",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowTriggerCallbackUrl = {
        serializedName: "WorkflowTriggerCallbackUrl",
        type: {
            name: "Composite",
            className: "WorkflowTriggerCallbackUrl",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                method: {
                    readOnly: true,
                    serializedName: "method",
                    type: {
                        name: "String"
                    }
                },
                basePath: {
                    readOnly: true,
                    serializedName: "basePath",
                    type: {
                        name: "String"
                    }
                },
                relativePath: {
                    readOnly: true,
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                },
                relativePathParameters: {
                    serializedName: "relativePathParameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                queries: {
                    serializedName: "queries",
                    type: {
                        name: "Composite",
                        className: "WorkflowTriggerListCallbackUrlQueries"
                    }
                }
            }
        }
    };
    var Correlation = {
        serializedName: "Correlation",
        type: {
            name: "Composite",
            className: "Correlation",
            modelProperties: {
                clientTrackingId: {
                    serializedName: "clientTrackingId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentHash = {
        serializedName: "ContentHash",
        type: {
            name: "Composite",
            className: "ContentHash",
            modelProperties: {
                algorithm: {
                    serializedName: "algorithm",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContentLink = {
        serializedName: "ContentLink",
        type: {
            name: "Composite",
            className: "ContentLink",
            modelProperties: {
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                contentVersion: {
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                },
                contentSize: {
                    serializedName: "contentSize",
                    type: {
                        name: "Number"
                    }
                },
                contentHash: {
                    serializedName: "contentHash",
                    type: {
                        name: "Composite",
                        className: "ContentHash"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var WorkflowTriggerHistory = {
        serializedName: "WorkflowTriggerHistory",
        type: {
            name: "Composite",
            className: "WorkflowTriggerHistory",
            modelProperties: __assign({}, SubResource.type.modelProperties, { startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, code: {
                    readOnly: true,
                    serializedName: "properties.code",
                    type: {
                        name: "String"
                    }
                }, error: {
                    readOnly: true,
                    serializedName: "properties.error",
                    type: {
                        name: "Object"
                    }
                }, trackingId: {
                    readOnly: true,
                    serializedName: "properties.trackingId",
                    type: {
                        name: "String"
                    }
                }, correlation: {
                    serializedName: "properties.correlation",
                    type: {
                        name: "Composite",
                        className: "Correlation"
                    }
                }, inputsLink: {
                    readOnly: true,
                    serializedName: "properties.inputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, outputsLink: {
                    readOnly: true,
                    serializedName: "properties.outputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, fired: {
                    readOnly: true,
                    serializedName: "properties.fired",
                    type: {
                        name: "Boolean"
                    }
                }, run: {
                    readOnly: true,
                    serializedName: "properties.run",
                    type: {
                        name: "Composite",
                        className: "ResourceReference"
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WorkflowTriggerHistoryFilter = {
        serializedName: "WorkflowTriggerHistoryFilter",
        type: {
            name: "Composite",
            className: "WorkflowTriggerHistoryFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowRunTrigger = {
        serializedName: "WorkflowRunTrigger",
        type: {
            name: "Composite",
            className: "WorkflowRunTrigger",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                inputs: {
                    readOnly: true,
                    serializedName: "inputs",
                    type: {
                        name: "Object"
                    }
                },
                inputsLink: {
                    readOnly: true,
                    serializedName: "inputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                outputs: {
                    readOnly: true,
                    serializedName: "outputs",
                    type: {
                        name: "Object"
                    }
                },
                outputsLink: {
                    readOnly: true,
                    serializedName: "outputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                },
                scheduledTime: {
                    readOnly: true,
                    serializedName: "scheduledTime",
                    type: {
                        name: "DateTime"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                trackingId: {
                    readOnly: true,
                    serializedName: "trackingId",
                    type: {
                        name: "String"
                    }
                },
                correlation: {
                    serializedName: "correlation",
                    type: {
                        name: "Composite",
                        className: "Correlation"
                    }
                },
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Object"
                    }
                },
                trackedProperties: {
                    readOnly: true,
                    serializedName: "trackedProperties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var WorkflowOutputParameter = {
        serializedName: "WorkflowOutputParameter",
        type: {
            name: "Composite",
            className: "WorkflowOutputParameter",
            modelProperties: __assign({}, WorkflowParameter.type.modelProperties, { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var WorkflowRun = {
        serializedName: "WorkflowRun",
        type: {
            name: "Composite",
            className: "WorkflowRun",
            modelProperties: __assign({}, SubResource.type.modelProperties, { waitEndTime: {
                    readOnly: true,
                    serializedName: "properties.waitEndTime",
                    type: {
                        name: "DateTime"
                    }
                }, startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, code: {
                    readOnly: true,
                    serializedName: "properties.code",
                    type: {
                        name: "String"
                    }
                }, error: {
                    readOnly: true,
                    serializedName: "properties.error",
                    type: {
                        name: "Object"
                    }
                }, correlationId: {
                    readOnly: true,
                    serializedName: "properties.correlationId",
                    type: {
                        name: "String"
                    }
                }, correlation: {
                    serializedName: "properties.correlation",
                    type: {
                        name: "Composite",
                        className: "Correlation"
                    }
                }, workflow: {
                    readOnly: true,
                    serializedName: "properties.workflow",
                    type: {
                        name: "Composite",
                        className: "ResourceReference"
                    }
                }, trigger: {
                    readOnly: true,
                    serializedName: "properties.trigger",
                    type: {
                        name: "Composite",
                        className: "WorkflowRunTrigger"
                    }
                }, outputs: {
                    readOnly: true,
                    serializedName: "properties.outputs",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "WorkflowOutputParameter"
                            }
                        }
                    }
                }, response: {
                    readOnly: true,
                    serializedName: "properties.response",
                    type: {
                        name: "Composite",
                        className: "WorkflowRunTrigger"
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WorkflowRunFilter = {
        serializedName: "WorkflowRunFilter",
        type: {
            name: "Composite",
            className: "WorkflowRunFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorProperties = {
        serializedName: "ErrorProperties",
        type: {
            name: "Composite",
            className: "ErrorProperties",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorProperties"
                    }
                }
            }
        }
    };
    var RetryHistory = {
        serializedName: "RetryHistory",
        type: {
            name: "Composite",
            className: "RetryHistory",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                clientRequestId: {
                    serializedName: "clientRequestId",
                    type: {
                        name: "String"
                    }
                },
                serviceRequestId: {
                    serializedName: "serviceRequestId",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var WorkflowRunAction = {
        serializedName: "WorkflowRunAction",
        type: {
            name: "Composite",
            className: "WorkflowRunAction",
            modelProperties: __assign({}, SubResource.type.modelProperties, { startTime: {
                    readOnly: true,
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    readOnly: true,
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, code: {
                    readOnly: true,
                    serializedName: "properties.code",
                    type: {
                        name: "String"
                    }
                }, error: {
                    readOnly: true,
                    serializedName: "properties.error",
                    type: {
                        name: "Object"
                    }
                }, trackingId: {
                    readOnly: true,
                    serializedName: "properties.trackingId",
                    type: {
                        name: "String"
                    }
                }, correlation: {
                    serializedName: "properties.correlation",
                    type: {
                        name: "Composite",
                        className: "Correlation"
                    }
                }, inputsLink: {
                    readOnly: true,
                    serializedName: "properties.inputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, outputsLink: {
                    readOnly: true,
                    serializedName: "properties.outputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, trackedProperties: {
                    readOnly: true,
                    serializedName: "properties.trackedProperties",
                    type: {
                        name: "Object"
                    }
                }, retryHistory: {
                    serializedName: "properties.retryHistory",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RetryHistory"
                            }
                        }
                    }
                }, name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WorkflowRunActionFilter = {
        serializedName: "WorkflowRunActionFilter",
        type: {
            name: "Composite",
            className: "WorkflowRunActionFilter",
            modelProperties: {
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegenerateActionParameter = {
        serializedName: "RegenerateActionParameter",
        type: {
            name: "Composite",
            className: "RegenerateActionParameter",
            modelProperties: {
                keyType: {
                    serializedName: "keyType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GenerateUpgradedDefinitionParameters = {
        serializedName: "GenerateUpgradedDefinitionParameters",
        type: {
            name: "Composite",
            className: "GenerateUpgradedDefinitionParameters",
            modelProperties: {
                targetSchemaVersion: {
                    serializedName: "targetSchemaVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountSku = {
        serializedName: "IntegrationAccountSku",
        type: {
            name: "Composite",
            className: "IntegrationAccountSku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccount = {
        serializedName: "IntegrationAccount",
        type: {
            name: "Composite",
            className: "IntegrationAccount",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IntegrationAccountSku"
                    }
                } })
        }
    };
    var GetCallbackUrlParameters = {
        serializedName: "GetCallbackUrlParameters",
        type: {
            name: "Composite",
            className: "GetCallbackUrlParameters",
            modelProperties: {
                notAfter: {
                    serializedName: "notAfter",
                    type: {
                        name: "DateTime"
                    }
                },
                keyType: {
                    serializedName: "keyType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CallbackUrl = {
        serializedName: "CallbackUrl",
        type: {
            name: "Composite",
            className: "CallbackUrl",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountSchema = {
        serializedName: "IntegrationAccountSchema",
        type: {
            name: "Composite",
            className: "IntegrationAccountSchema",
            modelProperties: __assign({}, Resource.type.modelProperties, { schemaType: {
                    required: true,
                    serializedName: "properties.schemaType",
                    type: {
                        name: "String"
                    }
                }, targetNamespace: {
                    serializedName: "properties.targetNamespace",
                    type: {
                        name: "String"
                    }
                }, documentName: {
                    serializedName: "properties.documentName",
                    type: {
                        name: "String"
                    }
                }, fileName: {
                    serializedName: "properties.fileName",
                    type: {
                        name: "String"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Object"
                    }
                }, content: {
                    serializedName: "properties.content",
                    type: {
                        name: "String"
                    }
                }, contentType: {
                    serializedName: "properties.contentType",
                    type: {
                        name: "String"
                    }
                }, contentLink: {
                    readOnly: true,
                    serializedName: "properties.contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                } })
        }
    };
    var IntegrationAccountSchemaFilter = {
        serializedName: "IntegrationAccountSchemaFilter",
        type: {
            name: "Composite",
            className: "IntegrationAccountSchemaFilter",
            modelProperties: {
                schemaType: {
                    required: true,
                    serializedName: "schemaType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountMapPropertiesParametersSchema = {
        serializedName: "IntegrationAccountMapProperties_parametersSchema",
        type: {
            name: "Composite",
            className: "IntegrationAccountMapPropertiesParametersSchema",
            modelProperties: {
                ref: {
                    serializedName: "ref",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountMap = {
        serializedName: "IntegrationAccountMap",
        type: {
            name: "Composite",
            className: "IntegrationAccountMap",
            modelProperties: __assign({}, Resource.type.modelProperties, { mapType: {
                    required: true,
                    serializedName: "properties.mapType",
                    type: {
                        name: "String"
                    }
                }, parametersSchema: {
                    serializedName: "properties.parametersSchema",
                    type: {
                        name: "Composite",
                        className: "IntegrationAccountMapPropertiesParametersSchema"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, content: {
                    serializedName: "properties.content",
                    type: {
                        name: "String"
                    }
                }, contentType: {
                    serializedName: "properties.contentType",
                    type: {
                        name: "String"
                    }
                }, contentLink: {
                    readOnly: true,
                    serializedName: "properties.contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var IntegrationAccountMapFilter = {
        serializedName: "IntegrationAccountMapFilter",
        type: {
            name: "Composite",
            className: "IntegrationAccountMapFilter",
            modelProperties: {
                mapType: {
                    required: true,
                    serializedName: "mapType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BusinessIdentity = {
        serializedName: "BusinessIdentity",
        type: {
            name: "Composite",
            className: "BusinessIdentity",
            modelProperties: {
                qualifier: {
                    required: true,
                    serializedName: "qualifier",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var B2BPartnerContent = {
        serializedName: "B2BPartnerContent",
        type: {
            name: "Composite",
            className: "B2BPartnerContent",
            modelProperties: {
                businessIdentities: {
                    serializedName: "businessIdentities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BusinessIdentity"
                            }
                        }
                    }
                }
            }
        }
    };
    var PartnerContent = {
        serializedName: "PartnerContent",
        type: {
            name: "Composite",
            className: "PartnerContent",
            modelProperties: {
                b2b: {
                    serializedName: "b2b",
                    type: {
                        name: "Composite",
                        className: "B2BPartnerContent"
                    }
                }
            }
        }
    };
    var IntegrationAccountPartner = {
        serializedName: "IntegrationAccountPartner",
        type: {
            name: "Composite",
            className: "IntegrationAccountPartner",
            modelProperties: __assign({}, Resource.type.modelProperties, { partnerType: {
                    required: true,
                    serializedName: "properties.partnerType",
                    type: {
                        name: "String"
                    }
                }, createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Object"
                    }
                }, content: {
                    required: true,
                    serializedName: "properties.content",
                    type: {
                        name: "Composite",
                        className: "PartnerContent"
                    }
                } })
        }
    };
    var IntegrationAccountPartnerFilter = {
        serializedName: "IntegrationAccountPartnerFilter",
        type: {
            name: "Composite",
            className: "IntegrationAccountPartnerFilter",
            modelProperties: {
                partnerType: {
                    required: true,
                    serializedName: "partnerType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AS2MessageConnectionSettings = {
        serializedName: "AS2MessageConnectionSettings",
        type: {
            name: "Composite",
            className: "AS2MessageConnectionSettings",
            modelProperties: {
                ignoreCertificateNameMismatch: {
                    required: true,
                    serializedName: "ignoreCertificateNameMismatch",
                    type: {
                        name: "Boolean"
                    }
                },
                supportHttpStatusCodeContinue: {
                    required: true,
                    serializedName: "supportHttpStatusCodeContinue",
                    type: {
                        name: "Boolean"
                    }
                },
                keepHttpConnectionAlive: {
                    required: true,
                    serializedName: "keepHttpConnectionAlive",
                    type: {
                        name: "Boolean"
                    }
                },
                unfoldHttpHeaders: {
                    required: true,
                    serializedName: "unfoldHttpHeaders",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AS2AcknowledgementConnectionSettings = {
        serializedName: "AS2AcknowledgementConnectionSettings",
        type: {
            name: "Composite",
            className: "AS2AcknowledgementConnectionSettings",
            modelProperties: {
                ignoreCertificateNameMismatch: {
                    required: true,
                    serializedName: "ignoreCertificateNameMismatch",
                    type: {
                        name: "Boolean"
                    }
                },
                supportHttpStatusCodeContinue: {
                    required: true,
                    serializedName: "supportHttpStatusCodeContinue",
                    type: {
                        name: "Boolean"
                    }
                },
                keepHttpConnectionAlive: {
                    required: true,
                    serializedName: "keepHttpConnectionAlive",
                    type: {
                        name: "Boolean"
                    }
                },
                unfoldHttpHeaders: {
                    required: true,
                    serializedName: "unfoldHttpHeaders",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AS2MdnSettings = {
        serializedName: "AS2MdnSettings",
        type: {
            name: "Composite",
            className: "AS2MdnSettings",
            modelProperties: {
                needMdn: {
                    required: true,
                    serializedName: "needMdn",
                    type: {
                        name: "Boolean"
                    }
                },
                signMdn: {
                    required: true,
                    serializedName: "signMdn",
                    type: {
                        name: "Boolean"
                    }
                },
                sendMdnAsynchronously: {
                    required: true,
                    serializedName: "sendMdnAsynchronously",
                    type: {
                        name: "Boolean"
                    }
                },
                receiptDeliveryUrl: {
                    serializedName: "receiptDeliveryUrl",
                    type: {
                        name: "String"
                    }
                },
                dispositionNotificationTo: {
                    serializedName: "dispositionNotificationTo",
                    type: {
                        name: "String"
                    }
                },
                signOutboundMdnIfOptional: {
                    required: true,
                    serializedName: "signOutboundMdnIfOptional",
                    type: {
                        name: "Boolean"
                    }
                },
                mdnText: {
                    serializedName: "mdnText",
                    type: {
                        name: "String"
                    }
                },
                sendInboundMdnToMessageBox: {
                    required: true,
                    serializedName: "sendInboundMdnToMessageBox",
                    type: {
                        name: "Boolean"
                    }
                },
                micHashingAlgorithm: {
                    required: true,
                    serializedName: "micHashingAlgorithm",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AS2SecuritySettings = {
        serializedName: "AS2SecuritySettings",
        type: {
            name: "Composite",
            className: "AS2SecuritySettings",
            modelProperties: {
                overrideGroupSigningCertificate: {
                    required: true,
                    serializedName: "overrideGroupSigningCertificate",
                    type: {
                        name: "Boolean"
                    }
                },
                signingCertificateName: {
                    serializedName: "signingCertificateName",
                    type: {
                        name: "String"
                    }
                },
                encryptionCertificateName: {
                    serializedName: "encryptionCertificateName",
                    type: {
                        name: "String"
                    }
                },
                enableNrrForInboundEncodedMessages: {
                    required: true,
                    serializedName: "enableNrrForInboundEncodedMessages",
                    type: {
                        name: "Boolean"
                    }
                },
                enableNrrForInboundDecodedMessages: {
                    required: true,
                    serializedName: "enableNrrForInboundDecodedMessages",
                    type: {
                        name: "Boolean"
                    }
                },
                enableNrrForOutboundMdn: {
                    required: true,
                    serializedName: "enableNrrForOutboundMdn",
                    type: {
                        name: "Boolean"
                    }
                },
                enableNrrForOutboundEncodedMessages: {
                    required: true,
                    serializedName: "enableNrrForOutboundEncodedMessages",
                    type: {
                        name: "Boolean"
                    }
                },
                enableNrrForOutboundDecodedMessages: {
                    required: true,
                    serializedName: "enableNrrForOutboundDecodedMessages",
                    type: {
                        name: "Boolean"
                    }
                },
                enableNrrForInboundMdn: {
                    required: true,
                    serializedName: "enableNrrForInboundMdn",
                    type: {
                        name: "Boolean"
                    }
                },
                sha2AlgorithmFormat: {
                    serializedName: "sha2AlgorithmFormat",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AS2ValidationSettings = {
        serializedName: "AS2ValidationSettings",
        type: {
            name: "Composite",
            className: "AS2ValidationSettings",
            modelProperties: {
                overrideMessageProperties: {
                    required: true,
                    serializedName: "overrideMessageProperties",
                    type: {
                        name: "Boolean"
                    }
                },
                encryptMessage: {
                    required: true,
                    serializedName: "encryptMessage",
                    type: {
                        name: "Boolean"
                    }
                },
                signMessage: {
                    required: true,
                    serializedName: "signMessage",
                    type: {
                        name: "Boolean"
                    }
                },
                compressMessage: {
                    required: true,
                    serializedName: "compressMessage",
                    type: {
                        name: "Boolean"
                    }
                },
                checkDuplicateMessage: {
                    required: true,
                    serializedName: "checkDuplicateMessage",
                    type: {
                        name: "Boolean"
                    }
                },
                interchangeDuplicatesValidityDays: {
                    required: true,
                    serializedName: "interchangeDuplicatesValidityDays",
                    type: {
                        name: "Number"
                    }
                },
                checkCertificateRevocationListOnSend: {
                    required: true,
                    serializedName: "checkCertificateRevocationListOnSend",
                    type: {
                        name: "Boolean"
                    }
                },
                checkCertificateRevocationListOnReceive: {
                    required: true,
                    serializedName: "checkCertificateRevocationListOnReceive",
                    type: {
                        name: "Boolean"
                    }
                },
                encryptionAlgorithm: {
                    required: true,
                    serializedName: "encryptionAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                signingAlgorithm: {
                    serializedName: "signingAlgorithm",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AS2EnvelopeSettings = {
        serializedName: "AS2EnvelopeSettings",
        type: {
            name: "Composite",
            className: "AS2EnvelopeSettings",
            modelProperties: {
                messageContentType: {
                    required: true,
                    serializedName: "messageContentType",
                    type: {
                        name: "String"
                    }
                },
                transmitFileNameInMimeHeader: {
                    required: true,
                    serializedName: "transmitFileNameInMimeHeader",
                    type: {
                        name: "Boolean"
                    }
                },
                fileNameTemplate: {
                    required: true,
                    serializedName: "fileNameTemplate",
                    type: {
                        name: "String"
                    }
                },
                suspendMessageOnFileNameGenerationError: {
                    required: true,
                    serializedName: "suspendMessageOnFileNameGenerationError",
                    type: {
                        name: "Boolean"
                    }
                },
                autogenerateFileName: {
                    required: true,
                    serializedName: "autogenerateFileName",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AS2ErrorSettings = {
        serializedName: "AS2ErrorSettings",
        type: {
            name: "Composite",
            className: "AS2ErrorSettings",
            modelProperties: {
                suspendDuplicateMessage: {
                    required: true,
                    serializedName: "suspendDuplicateMessage",
                    type: {
                        name: "Boolean"
                    }
                },
                resendIfMdnNotReceived: {
                    required: true,
                    serializedName: "resendIfMdnNotReceived",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AS2ProtocolSettings = {
        serializedName: "AS2ProtocolSettings",
        type: {
            name: "Composite",
            className: "AS2ProtocolSettings",
            modelProperties: {
                messageConnectionSettings: {
                    required: true,
                    serializedName: "messageConnectionSettings",
                    type: {
                        name: "Composite",
                        className: "AS2MessageConnectionSettings"
                    }
                },
                acknowledgementConnectionSettings: {
                    required: true,
                    serializedName: "acknowledgementConnectionSettings",
                    type: {
                        name: "Composite",
                        className: "AS2AcknowledgementConnectionSettings"
                    }
                },
                mdnSettings: {
                    required: true,
                    serializedName: "mdnSettings",
                    type: {
                        name: "Composite",
                        className: "AS2MdnSettings"
                    }
                },
                securitySettings: {
                    required: true,
                    serializedName: "securitySettings",
                    type: {
                        name: "Composite",
                        className: "AS2SecuritySettings"
                    }
                },
                validationSettings: {
                    required: true,
                    serializedName: "validationSettings",
                    type: {
                        name: "Composite",
                        className: "AS2ValidationSettings"
                    }
                },
                envelopeSettings: {
                    required: true,
                    serializedName: "envelopeSettings",
                    type: {
                        name: "Composite",
                        className: "AS2EnvelopeSettings"
                    }
                },
                errorSettings: {
                    required: true,
                    serializedName: "errorSettings",
                    type: {
                        name: "Composite",
                        className: "AS2ErrorSettings"
                    }
                }
            }
        }
    };
    var AS2OneWayAgreement = {
        serializedName: "AS2OneWayAgreement",
        type: {
            name: "Composite",
            className: "AS2OneWayAgreement",
            modelProperties: {
                senderBusinessIdentity: {
                    required: true,
                    serializedName: "senderBusinessIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                },
                receiverBusinessIdentity: {
                    required: true,
                    serializedName: "receiverBusinessIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                },
                protocolSettings: {
                    required: true,
                    serializedName: "protocolSettings",
                    type: {
                        name: "Composite",
                        className: "AS2ProtocolSettings"
                    }
                }
            }
        }
    };
    var AS2AgreementContent = {
        serializedName: "AS2AgreementContent",
        type: {
            name: "Composite",
            className: "AS2AgreementContent",
            modelProperties: {
                receiveAgreement: {
                    required: true,
                    serializedName: "receiveAgreement",
                    type: {
                        name: "Composite",
                        className: "AS2OneWayAgreement"
                    }
                },
                sendAgreement: {
                    required: true,
                    serializedName: "sendAgreement",
                    type: {
                        name: "Composite",
                        className: "AS2OneWayAgreement"
                    }
                }
            }
        }
    };
    var X12ValidationSettings = {
        serializedName: "X12ValidationSettings",
        type: {
            name: "Composite",
            className: "X12ValidationSettings",
            modelProperties: {
                validateCharacterSet: {
                    required: true,
                    serializedName: "validateCharacterSet",
                    type: {
                        name: "Boolean"
                    }
                },
                checkDuplicateInterchangeControlNumber: {
                    required: true,
                    serializedName: "checkDuplicateInterchangeControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                interchangeControlNumberValidityDays: {
                    required: true,
                    serializedName: "interchangeControlNumberValidityDays",
                    type: {
                        name: "Number"
                    }
                },
                checkDuplicateGroupControlNumber: {
                    required: true,
                    serializedName: "checkDuplicateGroupControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                checkDuplicateTransactionSetControlNumber: {
                    required: true,
                    serializedName: "checkDuplicateTransactionSetControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                validateEdiTypes: {
                    required: true,
                    serializedName: "validateEdiTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                validateXsdTypes: {
                    required: true,
                    serializedName: "validateXsdTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                allowLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "allowLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                trimLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "trimLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                trailingSeparatorPolicy: {
                    required: true,
                    serializedName: "trailingSeparatorPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12FramingSettings = {
        serializedName: "X12FramingSettings",
        type: {
            name: "Composite",
            className: "X12FramingSettings",
            modelProperties: {
                dataElementSeparator: {
                    required: true,
                    serializedName: "dataElementSeparator",
                    type: {
                        name: "Number"
                    }
                },
                componentSeparator: {
                    required: true,
                    serializedName: "componentSeparator",
                    type: {
                        name: "Number"
                    }
                },
                replaceSeparatorsInPayload: {
                    required: true,
                    serializedName: "replaceSeparatorsInPayload",
                    type: {
                        name: "Boolean"
                    }
                },
                replaceCharacter: {
                    required: true,
                    serializedName: "replaceCharacter",
                    type: {
                        name: "Number"
                    }
                },
                segmentTerminator: {
                    required: true,
                    serializedName: "segmentTerminator",
                    type: {
                        name: "Number"
                    }
                },
                characterSet: {
                    required: true,
                    serializedName: "characterSet",
                    type: {
                        name: "String"
                    }
                },
                segmentTerminatorSuffix: {
                    required: true,
                    serializedName: "segmentTerminatorSuffix",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "None",
                            "CR",
                            "LF",
                            "CRLF"
                        ]
                    }
                }
            }
        }
    };
    var X12EnvelopeSettings = {
        serializedName: "X12EnvelopeSettings",
        type: {
            name: "Composite",
            className: "X12EnvelopeSettings",
            modelProperties: {
                controlStandardsId: {
                    required: true,
                    serializedName: "controlStandardsId",
                    type: {
                        name: "Number"
                    }
                },
                useControlStandardsIdAsRepetitionCharacter: {
                    required: true,
                    serializedName: "useControlStandardsIdAsRepetitionCharacter",
                    type: {
                        name: "Boolean"
                    }
                },
                senderApplicationId: {
                    required: true,
                    serializedName: "senderApplicationId",
                    type: {
                        name: "String"
                    }
                },
                receiverApplicationId: {
                    required: true,
                    serializedName: "receiverApplicationId",
                    type: {
                        name: "String"
                    }
                },
                controlVersionNumber: {
                    required: true,
                    serializedName: "controlVersionNumber",
                    type: {
                        name: "String"
                    }
                },
                interchangeControlNumberLowerBound: {
                    required: true,
                    serializedName: "interchangeControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                interchangeControlNumberUpperBound: {
                    required: true,
                    serializedName: "interchangeControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverInterchangeControlNumber: {
                    required: true,
                    serializedName: "rolloverInterchangeControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                enableDefaultGroupHeaders: {
                    required: true,
                    serializedName: "enableDefaultGroupHeaders",
                    type: {
                        name: "Boolean"
                    }
                },
                functionalGroupId: {
                    serializedName: "functionalGroupId",
                    type: {
                        name: "String"
                    }
                },
                groupControlNumberLowerBound: {
                    required: true,
                    serializedName: "groupControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                groupControlNumberUpperBound: {
                    required: true,
                    serializedName: "groupControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverGroupControlNumber: {
                    required: true,
                    serializedName: "rolloverGroupControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                groupHeaderAgencyCode: {
                    required: true,
                    serializedName: "groupHeaderAgencyCode",
                    type: {
                        name: "String"
                    }
                },
                groupHeaderVersion: {
                    required: true,
                    serializedName: "groupHeaderVersion",
                    type: {
                        name: "String"
                    }
                },
                transactionSetControlNumberLowerBound: {
                    required: true,
                    serializedName: "transactionSetControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                transactionSetControlNumberUpperBound: {
                    required: true,
                    serializedName: "transactionSetControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverTransactionSetControlNumber: {
                    required: true,
                    serializedName: "rolloverTransactionSetControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                transactionSetControlNumberPrefix: {
                    serializedName: "transactionSetControlNumberPrefix",
                    type: {
                        name: "String"
                    }
                },
                transactionSetControlNumberSuffix: {
                    serializedName: "transactionSetControlNumberSuffix",
                    type: {
                        name: "String"
                    }
                },
                overwriteExistingTransactionSetControlNumber: {
                    required: true,
                    serializedName: "overwriteExistingTransactionSetControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                groupHeaderDateFormat: {
                    required: true,
                    serializedName: "groupHeaderDateFormat",
                    type: {
                        name: "String"
                    }
                },
                groupHeaderTimeFormat: {
                    required: true,
                    serializedName: "groupHeaderTimeFormat",
                    type: {
                        name: "String"
                    }
                },
                usageIndicator: {
                    required: true,
                    serializedName: "usageIndicator",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12AcknowledgementSettings = {
        serializedName: "X12AcknowledgementSettings",
        type: {
            name: "Composite",
            className: "X12AcknowledgementSettings",
            modelProperties: {
                needTechnicalAcknowledgement: {
                    required: true,
                    serializedName: "needTechnicalAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                batchTechnicalAcknowledgements: {
                    required: true,
                    serializedName: "batchTechnicalAcknowledgements",
                    type: {
                        name: "Boolean"
                    }
                },
                needFunctionalAcknowledgement: {
                    required: true,
                    serializedName: "needFunctionalAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                functionalAcknowledgementVersion: {
                    serializedName: "functionalAcknowledgementVersion",
                    type: {
                        name: "String"
                    }
                },
                batchFunctionalAcknowledgements: {
                    required: true,
                    serializedName: "batchFunctionalAcknowledgements",
                    type: {
                        name: "Boolean"
                    }
                },
                needImplementationAcknowledgement: {
                    required: true,
                    serializedName: "needImplementationAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                implementationAcknowledgementVersion: {
                    serializedName: "implementationAcknowledgementVersion",
                    type: {
                        name: "String"
                    }
                },
                batchImplementationAcknowledgements: {
                    required: true,
                    serializedName: "batchImplementationAcknowledgements",
                    type: {
                        name: "Boolean"
                    }
                },
                needLoopForValidMessages: {
                    required: true,
                    serializedName: "needLoopForValidMessages",
                    type: {
                        name: "Boolean"
                    }
                },
                sendSynchronousAcknowledgement: {
                    required: true,
                    serializedName: "sendSynchronousAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                acknowledgementControlNumberPrefix: {
                    serializedName: "acknowledgementControlNumberPrefix",
                    type: {
                        name: "String"
                    }
                },
                acknowledgementControlNumberSuffix: {
                    serializedName: "acknowledgementControlNumberSuffix",
                    type: {
                        name: "String"
                    }
                },
                acknowledgementControlNumberLowerBound: {
                    required: true,
                    serializedName: "acknowledgementControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                acknowledgementControlNumberUpperBound: {
                    required: true,
                    serializedName: "acknowledgementControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverAcknowledgementControlNumber: {
                    required: true,
                    serializedName: "rolloverAcknowledgementControlNumber",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var X12MessageFilter = {
        serializedName: "X12MessageFilter",
        type: {
            name: "Composite",
            className: "X12MessageFilter",
            modelProperties: {
                messageFilterType: {
                    required: true,
                    serializedName: "messageFilterType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12SecuritySettings = {
        serializedName: "X12SecuritySettings",
        type: {
            name: "Composite",
            className: "X12SecuritySettings",
            modelProperties: {
                authorizationQualifier: {
                    required: true,
                    serializedName: "authorizationQualifier",
                    type: {
                        name: "String"
                    }
                },
                authorizationValue: {
                    serializedName: "authorizationValue",
                    type: {
                        name: "String"
                    }
                },
                securityQualifier: {
                    required: true,
                    serializedName: "securityQualifier",
                    type: {
                        name: "String"
                    }
                },
                passwordValue: {
                    serializedName: "passwordValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12ProcessingSettings = {
        serializedName: "X12ProcessingSettings",
        type: {
            name: "Composite",
            className: "X12ProcessingSettings",
            modelProperties: {
                maskSecurityInfo: {
                    required: true,
                    serializedName: "maskSecurityInfo",
                    type: {
                        name: "Boolean"
                    }
                },
                convertImpliedDecimal: {
                    required: true,
                    serializedName: "convertImpliedDecimal",
                    type: {
                        name: "Boolean"
                    }
                },
                preserveInterchange: {
                    required: true,
                    serializedName: "preserveInterchange",
                    type: {
                        name: "Boolean"
                    }
                },
                suspendInterchangeOnError: {
                    required: true,
                    serializedName: "suspendInterchangeOnError",
                    type: {
                        name: "Boolean"
                    }
                },
                createEmptyXmlTagsForTrailingSeparators: {
                    required: true,
                    serializedName: "createEmptyXmlTagsForTrailingSeparators",
                    type: {
                        name: "Boolean"
                    }
                },
                useDotAsDecimalSeparator: {
                    required: true,
                    serializedName: "useDotAsDecimalSeparator",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var X12EnvelopeOverride = {
        serializedName: "X12EnvelopeOverride",
        type: {
            name: "Composite",
            className: "X12EnvelopeOverride",
            modelProperties: {
                targetNamespace: {
                    required: true,
                    serializedName: "targetNamespace",
                    type: {
                        name: "String"
                    }
                },
                protocolVersion: {
                    required: true,
                    serializedName: "protocolVersion",
                    type: {
                        name: "String"
                    }
                },
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                responsibleAgencyCode: {
                    required: true,
                    serializedName: "responsibleAgencyCode",
                    type: {
                        name: "String"
                    }
                },
                headerVersion: {
                    required: true,
                    serializedName: "headerVersion",
                    type: {
                        name: "String"
                    }
                },
                senderApplicationId: {
                    required: true,
                    serializedName: "senderApplicationId",
                    type: {
                        name: "String"
                    }
                },
                receiverApplicationId: {
                    required: true,
                    serializedName: "receiverApplicationId",
                    type: {
                        name: "String"
                    }
                },
                functionalIdentifierCode: {
                    serializedName: "functionalIdentifierCode",
                    type: {
                        name: "String"
                    }
                },
                dateFormat: {
                    required: true,
                    serializedName: "dateFormat",
                    type: {
                        name: "String"
                    }
                },
                timeFormat: {
                    required: true,
                    serializedName: "timeFormat",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12ValidationOverride = {
        serializedName: "X12ValidationOverride",
        type: {
            name: "Composite",
            className: "X12ValidationOverride",
            modelProperties: {
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                validateEdiTypes: {
                    required: true,
                    serializedName: "validateEdiTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                validateXsdTypes: {
                    required: true,
                    serializedName: "validateXsdTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                allowLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "allowLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                validateCharacterSet: {
                    required: true,
                    serializedName: "validateCharacterSet",
                    type: {
                        name: "Boolean"
                    }
                },
                trimLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "trimLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                trailingSeparatorPolicy: {
                    required: true,
                    serializedName: "trailingSeparatorPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12MessageIdentifier = {
        serializedName: "X12MessageIdentifier",
        type: {
            name: "Composite",
            className: "X12MessageIdentifier",
            modelProperties: {
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12SchemaReference = {
        serializedName: "X12SchemaReference",
        type: {
            name: "Composite",
            className: "X12SchemaReference",
            modelProperties: {
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                senderApplicationId: {
                    serializedName: "senderApplicationId",
                    type: {
                        name: "String"
                    }
                },
                schemaVersion: {
                    required: true,
                    serializedName: "schemaVersion",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    required: true,
                    serializedName: "schemaName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12DelimiterOverrides = {
        serializedName: "X12DelimiterOverrides",
        type: {
            name: "Composite",
            className: "X12DelimiterOverrides",
            modelProperties: {
                protocolVersion: {
                    serializedName: "protocolVersion",
                    type: {
                        name: "String"
                    }
                },
                messageId: {
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                dataElementSeparator: {
                    required: true,
                    serializedName: "dataElementSeparator",
                    type: {
                        name: "Number"
                    }
                },
                componentSeparator: {
                    required: true,
                    serializedName: "componentSeparator",
                    type: {
                        name: "Number"
                    }
                },
                segmentTerminator: {
                    required: true,
                    serializedName: "segmentTerminator",
                    type: {
                        name: "Number"
                    }
                },
                segmentTerminatorSuffix: {
                    required: true,
                    serializedName: "segmentTerminatorSuffix",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "None",
                            "CR",
                            "LF",
                            "CRLF"
                        ]
                    }
                },
                replaceCharacter: {
                    required: true,
                    serializedName: "replaceCharacter",
                    type: {
                        name: "Number"
                    }
                },
                replaceSeparatorsInPayload: {
                    required: true,
                    serializedName: "replaceSeparatorsInPayload",
                    type: {
                        name: "Boolean"
                    }
                },
                targetNamespace: {
                    serializedName: "targetNamespace",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var X12ProtocolSettings = {
        serializedName: "X12ProtocolSettings",
        type: {
            name: "Composite",
            className: "X12ProtocolSettings",
            modelProperties: {
                validationSettings: {
                    required: true,
                    serializedName: "validationSettings",
                    type: {
                        name: "Composite",
                        className: "X12ValidationSettings"
                    }
                },
                framingSettings: {
                    required: true,
                    serializedName: "framingSettings",
                    type: {
                        name: "Composite",
                        className: "X12FramingSettings"
                    }
                },
                envelopeSettings: {
                    required: true,
                    serializedName: "envelopeSettings",
                    type: {
                        name: "Composite",
                        className: "X12EnvelopeSettings"
                    }
                },
                acknowledgementSettings: {
                    required: true,
                    serializedName: "acknowledgementSettings",
                    type: {
                        name: "Composite",
                        className: "X12AcknowledgementSettings"
                    }
                },
                messageFilter: {
                    required: true,
                    serializedName: "messageFilter",
                    type: {
                        name: "Composite",
                        className: "X12MessageFilter"
                    }
                },
                securitySettings: {
                    required: true,
                    serializedName: "securitySettings",
                    type: {
                        name: "Composite",
                        className: "X12SecuritySettings"
                    }
                },
                processingSettings: {
                    required: true,
                    serializedName: "processingSettings",
                    type: {
                        name: "Composite",
                        className: "X12ProcessingSettings"
                    }
                },
                envelopeOverrides: {
                    serializedName: "envelopeOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "X12EnvelopeOverride"
                            }
                        }
                    }
                },
                validationOverrides: {
                    serializedName: "validationOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "X12ValidationOverride"
                            }
                        }
                    }
                },
                messageFilterList: {
                    serializedName: "messageFilterList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "X12MessageIdentifier"
                            }
                        }
                    }
                },
                schemaReferences: {
                    required: true,
                    serializedName: "schemaReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "X12SchemaReference"
                            }
                        }
                    }
                },
                x12DelimiterOverrides: {
                    serializedName: "x12DelimiterOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "X12DelimiterOverrides"
                            }
                        }
                    }
                }
            }
        }
    };
    var X12OneWayAgreement = {
        serializedName: "X12OneWayAgreement",
        type: {
            name: "Composite",
            className: "X12OneWayAgreement",
            modelProperties: {
                senderBusinessIdentity: {
                    required: true,
                    serializedName: "senderBusinessIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                },
                receiverBusinessIdentity: {
                    required: true,
                    serializedName: "receiverBusinessIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                },
                protocolSettings: {
                    required: true,
                    serializedName: "protocolSettings",
                    type: {
                        name: "Composite",
                        className: "X12ProtocolSettings"
                    }
                }
            }
        }
    };
    var X12AgreementContent = {
        serializedName: "X12AgreementContent",
        type: {
            name: "Composite",
            className: "X12AgreementContent",
            modelProperties: {
                receiveAgreement: {
                    required: true,
                    serializedName: "receiveAgreement",
                    type: {
                        name: "Composite",
                        className: "X12OneWayAgreement"
                    }
                },
                sendAgreement: {
                    required: true,
                    serializedName: "sendAgreement",
                    type: {
                        name: "Composite",
                        className: "X12OneWayAgreement"
                    }
                }
            }
        }
    };
    var EdifactValidationSettings = {
        serializedName: "EdifactValidationSettings",
        type: {
            name: "Composite",
            className: "EdifactValidationSettings",
            modelProperties: {
                validateCharacterSet: {
                    required: true,
                    serializedName: "validateCharacterSet",
                    type: {
                        name: "Boolean"
                    }
                },
                checkDuplicateInterchangeControlNumber: {
                    required: true,
                    serializedName: "checkDuplicateInterchangeControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                interchangeControlNumberValidityDays: {
                    required: true,
                    serializedName: "interchangeControlNumberValidityDays",
                    type: {
                        name: "Number"
                    }
                },
                checkDuplicateGroupControlNumber: {
                    required: true,
                    serializedName: "checkDuplicateGroupControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                checkDuplicateTransactionSetControlNumber: {
                    required: true,
                    serializedName: "checkDuplicateTransactionSetControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                validateEdiTypes: {
                    required: true,
                    serializedName: "validateEdiTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                validateXsdTypes: {
                    required: true,
                    serializedName: "validateXsdTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                allowLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "allowLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                trimLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "trimLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                trailingSeparatorPolicy: {
                    required: true,
                    serializedName: "trailingSeparatorPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactFramingSettings = {
        serializedName: "EdifactFramingSettings",
        type: {
            name: "Composite",
            className: "EdifactFramingSettings",
            modelProperties: {
                serviceCodeListDirectoryVersion: {
                    serializedName: "serviceCodeListDirectoryVersion",
                    type: {
                        name: "String"
                    }
                },
                characterEncoding: {
                    serializedName: "characterEncoding",
                    type: {
                        name: "String"
                    }
                },
                protocolVersion: {
                    required: true,
                    serializedName: "protocolVersion",
                    type: {
                        name: "Number"
                    }
                },
                dataElementSeparator: {
                    required: true,
                    serializedName: "dataElementSeparator",
                    type: {
                        name: "Number"
                    }
                },
                componentSeparator: {
                    required: true,
                    serializedName: "componentSeparator",
                    type: {
                        name: "Number"
                    }
                },
                segmentTerminator: {
                    required: true,
                    serializedName: "segmentTerminator",
                    type: {
                        name: "Number"
                    }
                },
                releaseIndicator: {
                    required: true,
                    serializedName: "releaseIndicator",
                    type: {
                        name: "Number"
                    }
                },
                repetitionSeparator: {
                    required: true,
                    serializedName: "repetitionSeparator",
                    type: {
                        name: "Number"
                    }
                },
                characterSet: {
                    required: true,
                    serializedName: "characterSet",
                    type: {
                        name: "String"
                    }
                },
                decimalPointIndicator: {
                    required: true,
                    serializedName: "decimalPointIndicator",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "Comma",
                            "Decimal"
                        ]
                    }
                },
                segmentTerminatorSuffix: {
                    required: true,
                    serializedName: "segmentTerminatorSuffix",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "None",
                            "CR",
                            "LF",
                            "CRLF"
                        ]
                    }
                }
            }
        }
    };
    var EdifactEnvelopeSettings = {
        serializedName: "EdifactEnvelopeSettings",
        type: {
            name: "Composite",
            className: "EdifactEnvelopeSettings",
            modelProperties: {
                groupAssociationAssignedCode: {
                    serializedName: "groupAssociationAssignedCode",
                    type: {
                        name: "String"
                    }
                },
                communicationAgreementId: {
                    serializedName: "communicationAgreementId",
                    type: {
                        name: "String"
                    }
                },
                applyDelimiterStringAdvice: {
                    required: true,
                    serializedName: "applyDelimiterStringAdvice",
                    type: {
                        name: "Boolean"
                    }
                },
                createGroupingSegments: {
                    required: true,
                    serializedName: "createGroupingSegments",
                    type: {
                        name: "Boolean"
                    }
                },
                enableDefaultGroupHeaders: {
                    required: true,
                    serializedName: "enableDefaultGroupHeaders",
                    type: {
                        name: "Boolean"
                    }
                },
                recipientReferencePasswordValue: {
                    serializedName: "recipientReferencePasswordValue",
                    type: {
                        name: "String"
                    }
                },
                recipientReferencePasswordQualifier: {
                    serializedName: "recipientReferencePasswordQualifier",
                    type: {
                        name: "String"
                    }
                },
                applicationReferenceId: {
                    serializedName: "applicationReferenceId",
                    type: {
                        name: "String"
                    }
                },
                processingPriorityCode: {
                    serializedName: "processingPriorityCode",
                    type: {
                        name: "String"
                    }
                },
                interchangeControlNumberLowerBound: {
                    required: true,
                    serializedName: "interchangeControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                interchangeControlNumberUpperBound: {
                    required: true,
                    serializedName: "interchangeControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverInterchangeControlNumber: {
                    required: true,
                    serializedName: "rolloverInterchangeControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                interchangeControlNumberPrefix: {
                    serializedName: "interchangeControlNumberPrefix",
                    type: {
                        name: "String"
                    }
                },
                interchangeControlNumberSuffix: {
                    serializedName: "interchangeControlNumberSuffix",
                    type: {
                        name: "String"
                    }
                },
                senderReverseRoutingAddress: {
                    serializedName: "senderReverseRoutingAddress",
                    type: {
                        name: "String"
                    }
                },
                receiverReverseRoutingAddress: {
                    serializedName: "receiverReverseRoutingAddress",
                    type: {
                        name: "String"
                    }
                },
                functionalGroupId: {
                    serializedName: "functionalGroupId",
                    type: {
                        name: "String"
                    }
                },
                groupControllingAgencyCode: {
                    serializedName: "groupControllingAgencyCode",
                    type: {
                        name: "String"
                    }
                },
                groupMessageVersion: {
                    serializedName: "groupMessageVersion",
                    type: {
                        name: "String"
                    }
                },
                groupMessageRelease: {
                    serializedName: "groupMessageRelease",
                    type: {
                        name: "String"
                    }
                },
                groupControlNumberLowerBound: {
                    required: true,
                    serializedName: "groupControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                groupControlNumberUpperBound: {
                    required: true,
                    serializedName: "groupControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverGroupControlNumber: {
                    required: true,
                    serializedName: "rolloverGroupControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                groupControlNumberPrefix: {
                    serializedName: "groupControlNumberPrefix",
                    type: {
                        name: "String"
                    }
                },
                groupControlNumberSuffix: {
                    serializedName: "groupControlNumberSuffix",
                    type: {
                        name: "String"
                    }
                },
                groupApplicationReceiverQualifier: {
                    serializedName: "groupApplicationReceiverQualifier",
                    type: {
                        name: "String"
                    }
                },
                groupApplicationReceiverId: {
                    serializedName: "groupApplicationReceiverId",
                    type: {
                        name: "String"
                    }
                },
                groupApplicationSenderQualifier: {
                    serializedName: "groupApplicationSenderQualifier",
                    type: {
                        name: "String"
                    }
                },
                groupApplicationSenderId: {
                    serializedName: "groupApplicationSenderId",
                    type: {
                        name: "String"
                    }
                },
                groupApplicationPassword: {
                    serializedName: "groupApplicationPassword",
                    type: {
                        name: "String"
                    }
                },
                overwriteExistingTransactionSetControlNumber: {
                    required: true,
                    serializedName: "overwriteExistingTransactionSetControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                transactionSetControlNumberPrefix: {
                    serializedName: "transactionSetControlNumberPrefix",
                    type: {
                        name: "String"
                    }
                },
                transactionSetControlNumberSuffix: {
                    serializedName: "transactionSetControlNumberSuffix",
                    type: {
                        name: "String"
                    }
                },
                transactionSetControlNumberLowerBound: {
                    required: true,
                    serializedName: "transactionSetControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                transactionSetControlNumberUpperBound: {
                    required: true,
                    serializedName: "transactionSetControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverTransactionSetControlNumber: {
                    required: true,
                    serializedName: "rolloverTransactionSetControlNumber",
                    type: {
                        name: "Boolean"
                    }
                },
                isTestInterchange: {
                    required: true,
                    serializedName: "isTestInterchange",
                    type: {
                        name: "Boolean"
                    }
                },
                senderInternalIdentification: {
                    serializedName: "senderInternalIdentification",
                    type: {
                        name: "String"
                    }
                },
                senderInternalSubIdentification: {
                    serializedName: "senderInternalSubIdentification",
                    type: {
                        name: "String"
                    }
                },
                receiverInternalIdentification: {
                    serializedName: "receiverInternalIdentification",
                    type: {
                        name: "String"
                    }
                },
                receiverInternalSubIdentification: {
                    serializedName: "receiverInternalSubIdentification",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactAcknowledgementSettings = {
        serializedName: "EdifactAcknowledgementSettings",
        type: {
            name: "Composite",
            className: "EdifactAcknowledgementSettings",
            modelProperties: {
                needTechnicalAcknowledgement: {
                    required: true,
                    serializedName: "needTechnicalAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                batchTechnicalAcknowledgements: {
                    required: true,
                    serializedName: "batchTechnicalAcknowledgements",
                    type: {
                        name: "Boolean"
                    }
                },
                needFunctionalAcknowledgement: {
                    required: true,
                    serializedName: "needFunctionalAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                batchFunctionalAcknowledgements: {
                    required: true,
                    serializedName: "batchFunctionalAcknowledgements",
                    type: {
                        name: "Boolean"
                    }
                },
                needLoopForValidMessages: {
                    required: true,
                    serializedName: "needLoopForValidMessages",
                    type: {
                        name: "Boolean"
                    }
                },
                sendSynchronousAcknowledgement: {
                    required: true,
                    serializedName: "sendSynchronousAcknowledgement",
                    type: {
                        name: "Boolean"
                    }
                },
                acknowledgementControlNumberPrefix: {
                    serializedName: "acknowledgementControlNumberPrefix",
                    type: {
                        name: "String"
                    }
                },
                acknowledgementControlNumberSuffix: {
                    serializedName: "acknowledgementControlNumberSuffix",
                    type: {
                        name: "String"
                    }
                },
                acknowledgementControlNumberLowerBound: {
                    required: true,
                    serializedName: "acknowledgementControlNumberLowerBound",
                    type: {
                        name: "Number"
                    }
                },
                acknowledgementControlNumberUpperBound: {
                    required: true,
                    serializedName: "acknowledgementControlNumberUpperBound",
                    type: {
                        name: "Number"
                    }
                },
                rolloverAcknowledgementControlNumber: {
                    required: true,
                    serializedName: "rolloverAcknowledgementControlNumber",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EdifactMessageFilter = {
        serializedName: "EdifactMessageFilter",
        type: {
            name: "Composite",
            className: "EdifactMessageFilter",
            modelProperties: {
                messageFilterType: {
                    required: true,
                    serializedName: "messageFilterType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactProcessingSettings = {
        serializedName: "EdifactProcessingSettings",
        type: {
            name: "Composite",
            className: "EdifactProcessingSettings",
            modelProperties: {
                maskSecurityInfo: {
                    required: true,
                    serializedName: "maskSecurityInfo",
                    type: {
                        name: "Boolean"
                    }
                },
                preserveInterchange: {
                    required: true,
                    serializedName: "preserveInterchange",
                    type: {
                        name: "Boolean"
                    }
                },
                suspendInterchangeOnError: {
                    required: true,
                    serializedName: "suspendInterchangeOnError",
                    type: {
                        name: "Boolean"
                    }
                },
                createEmptyXmlTagsForTrailingSeparators: {
                    required: true,
                    serializedName: "createEmptyXmlTagsForTrailingSeparators",
                    type: {
                        name: "Boolean"
                    }
                },
                useDotAsDecimalSeparator: {
                    required: true,
                    serializedName: "useDotAsDecimalSeparator",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EdifactEnvelopeOverride = {
        serializedName: "EdifactEnvelopeOverride",
        type: {
            name: "Composite",
            className: "EdifactEnvelopeOverride",
            modelProperties: {
                messageId: {
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                messageVersion: {
                    serializedName: "messageVersion",
                    type: {
                        name: "String"
                    }
                },
                messageRelease: {
                    serializedName: "messageRelease",
                    type: {
                        name: "String"
                    }
                },
                messageAssociationAssignedCode: {
                    serializedName: "messageAssociationAssignedCode",
                    type: {
                        name: "String"
                    }
                },
                targetNamespace: {
                    serializedName: "targetNamespace",
                    type: {
                        name: "String"
                    }
                },
                functionalGroupId: {
                    serializedName: "functionalGroupId",
                    type: {
                        name: "String"
                    }
                },
                senderApplicationQualifier: {
                    serializedName: "senderApplicationQualifier",
                    type: {
                        name: "String"
                    }
                },
                senderApplicationId: {
                    serializedName: "senderApplicationId",
                    type: {
                        name: "String"
                    }
                },
                receiverApplicationQualifier: {
                    serializedName: "receiverApplicationQualifier",
                    type: {
                        name: "String"
                    }
                },
                receiverApplicationId: {
                    serializedName: "receiverApplicationId",
                    type: {
                        name: "String"
                    }
                },
                controllingAgencyCode: {
                    serializedName: "controllingAgencyCode",
                    type: {
                        name: "String"
                    }
                },
                groupHeaderMessageVersion: {
                    serializedName: "groupHeaderMessageVersion",
                    type: {
                        name: "String"
                    }
                },
                groupHeaderMessageRelease: {
                    serializedName: "groupHeaderMessageRelease",
                    type: {
                        name: "String"
                    }
                },
                associationAssignedCode: {
                    serializedName: "associationAssignedCode",
                    type: {
                        name: "String"
                    }
                },
                applicationPassword: {
                    serializedName: "applicationPassword",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactMessageIdentifier = {
        serializedName: "EdifactMessageIdentifier",
        type: {
            name: "Composite",
            className: "EdifactMessageIdentifier",
            modelProperties: {
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactSchemaReference = {
        serializedName: "EdifactSchemaReference",
        type: {
            name: "Composite",
            className: "EdifactSchemaReference",
            modelProperties: {
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                messageVersion: {
                    required: true,
                    serializedName: "messageVersion",
                    type: {
                        name: "String"
                    }
                },
                messageRelease: {
                    required: true,
                    serializedName: "messageRelease",
                    type: {
                        name: "String"
                    }
                },
                senderApplicationId: {
                    serializedName: "senderApplicationId",
                    type: {
                        name: "String"
                    }
                },
                senderApplicationQualifier: {
                    serializedName: "senderApplicationQualifier",
                    type: {
                        name: "String"
                    }
                },
                associationAssignedCode: {
                    serializedName: "associationAssignedCode",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    required: true,
                    serializedName: "schemaName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactValidationOverride = {
        serializedName: "EdifactValidationOverride",
        type: {
            name: "Composite",
            className: "EdifactValidationOverride",
            modelProperties: {
                messageId: {
                    required: true,
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                enforceCharacterSet: {
                    required: true,
                    serializedName: "enforceCharacterSet",
                    type: {
                        name: "Boolean"
                    }
                },
                validateEdiTypes: {
                    required: true,
                    serializedName: "validateEdiTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                validateXsdTypes: {
                    required: true,
                    serializedName: "validateXsdTypes",
                    type: {
                        name: "Boolean"
                    }
                },
                allowLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "allowLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                },
                trailingSeparatorPolicy: {
                    required: true,
                    serializedName: "trailingSeparatorPolicy",
                    type: {
                        name: "String"
                    }
                },
                trimLeadingAndTrailingSpacesAndZeroes: {
                    required: true,
                    serializedName: "trimLeadingAndTrailingSpacesAndZeroes",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EdifactDelimiterOverride = {
        serializedName: "EdifactDelimiterOverride",
        type: {
            name: "Composite",
            className: "EdifactDelimiterOverride",
            modelProperties: {
                messageId: {
                    serializedName: "messageId",
                    type: {
                        name: "String"
                    }
                },
                messageVersion: {
                    serializedName: "messageVersion",
                    type: {
                        name: "String"
                    }
                },
                messageRelease: {
                    serializedName: "messageRelease",
                    type: {
                        name: "String"
                    }
                },
                dataElementSeparator: {
                    required: true,
                    serializedName: "dataElementSeparator",
                    type: {
                        name: "Number"
                    }
                },
                componentSeparator: {
                    required: true,
                    serializedName: "componentSeparator",
                    type: {
                        name: "Number"
                    }
                },
                segmentTerminator: {
                    required: true,
                    serializedName: "segmentTerminator",
                    type: {
                        name: "Number"
                    }
                },
                repetitionSeparator: {
                    required: true,
                    serializedName: "repetitionSeparator",
                    type: {
                        name: "Number"
                    }
                },
                segmentTerminatorSuffix: {
                    required: true,
                    serializedName: "segmentTerminatorSuffix",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "None",
                            "CR",
                            "LF",
                            "CRLF"
                        ]
                    }
                },
                decimalPointIndicator: {
                    required: true,
                    serializedName: "decimalPointIndicator",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "Comma",
                            "Decimal"
                        ]
                    }
                },
                releaseIndicator: {
                    required: true,
                    serializedName: "releaseIndicator",
                    type: {
                        name: "Number"
                    }
                },
                messageAssociationAssignedCode: {
                    serializedName: "messageAssociationAssignedCode",
                    type: {
                        name: "String"
                    }
                },
                targetNamespace: {
                    serializedName: "targetNamespace",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EdifactProtocolSettings = {
        serializedName: "EdifactProtocolSettings",
        type: {
            name: "Composite",
            className: "EdifactProtocolSettings",
            modelProperties: {
                validationSettings: {
                    required: true,
                    serializedName: "validationSettings",
                    type: {
                        name: "Composite",
                        className: "EdifactValidationSettings"
                    }
                },
                framingSettings: {
                    required: true,
                    serializedName: "framingSettings",
                    type: {
                        name: "Composite",
                        className: "EdifactFramingSettings"
                    }
                },
                envelopeSettings: {
                    required: true,
                    serializedName: "envelopeSettings",
                    type: {
                        name: "Composite",
                        className: "EdifactEnvelopeSettings"
                    }
                },
                acknowledgementSettings: {
                    required: true,
                    serializedName: "acknowledgementSettings",
                    type: {
                        name: "Composite",
                        className: "EdifactAcknowledgementSettings"
                    }
                },
                messageFilter: {
                    required: true,
                    serializedName: "messageFilter",
                    type: {
                        name: "Composite",
                        className: "EdifactMessageFilter"
                    }
                },
                processingSettings: {
                    required: true,
                    serializedName: "processingSettings",
                    type: {
                        name: "Composite",
                        className: "EdifactProcessingSettings"
                    }
                },
                envelopeOverrides: {
                    serializedName: "envelopeOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EdifactEnvelopeOverride"
                            }
                        }
                    }
                },
                messageFilterList: {
                    serializedName: "messageFilterList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EdifactMessageIdentifier"
                            }
                        }
                    }
                },
                schemaReferences: {
                    required: true,
                    serializedName: "schemaReferences",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EdifactSchemaReference"
                            }
                        }
                    }
                },
                validationOverrides: {
                    serializedName: "validationOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EdifactValidationOverride"
                            }
                        }
                    }
                },
                edifactDelimiterOverrides: {
                    serializedName: "edifactDelimiterOverrides",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EdifactDelimiterOverride"
                            }
                        }
                    }
                }
            }
        }
    };
    var EdifactOneWayAgreement = {
        serializedName: "EdifactOneWayAgreement",
        type: {
            name: "Composite",
            className: "EdifactOneWayAgreement",
            modelProperties: {
                senderBusinessIdentity: {
                    required: true,
                    serializedName: "senderBusinessIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                },
                receiverBusinessIdentity: {
                    required: true,
                    serializedName: "receiverBusinessIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                },
                protocolSettings: {
                    required: true,
                    serializedName: "protocolSettings",
                    type: {
                        name: "Composite",
                        className: "EdifactProtocolSettings"
                    }
                }
            }
        }
    };
    var EdifactAgreementContent = {
        serializedName: "EdifactAgreementContent",
        type: {
            name: "Composite",
            className: "EdifactAgreementContent",
            modelProperties: {
                receiveAgreement: {
                    required: true,
                    serializedName: "receiveAgreement",
                    type: {
                        name: "Composite",
                        className: "EdifactOneWayAgreement"
                    }
                },
                sendAgreement: {
                    required: true,
                    serializedName: "sendAgreement",
                    type: {
                        name: "Composite",
                        className: "EdifactOneWayAgreement"
                    }
                }
            }
        }
    };
    var AgreementContent = {
        serializedName: "AgreementContent",
        type: {
            name: "Composite",
            className: "AgreementContent",
            modelProperties: {
                aS2: {
                    serializedName: "aS2",
                    type: {
                        name: "Composite",
                        className: "AS2AgreementContent"
                    }
                },
                x12: {
                    serializedName: "x12",
                    type: {
                        name: "Composite",
                        className: "X12AgreementContent"
                    }
                },
                edifact: {
                    serializedName: "edifact",
                    type: {
                        name: "Composite",
                        className: "EdifactAgreementContent"
                    }
                }
            }
        }
    };
    var IntegrationAccountAgreement = {
        serializedName: "IntegrationAccountAgreement",
        type: {
            name: "Composite",
            className: "IntegrationAccountAgreement",
            modelProperties: __assign({}, Resource.type.modelProperties, { createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Object"
                    }
                }, agreementType: {
                    required: true,
                    serializedName: "properties.agreementType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "AS2",
                            "X12",
                            "Edifact"
                        ]
                    }
                }, hostPartner: {
                    required: true,
                    serializedName: "properties.hostPartner",
                    type: {
                        name: "String"
                    }
                }, guestPartner: {
                    required: true,
                    serializedName: "properties.guestPartner",
                    type: {
                        name: "String"
                    }
                }, hostIdentity: {
                    required: true,
                    serializedName: "properties.hostIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                }, guestIdentity: {
                    required: true,
                    serializedName: "properties.guestIdentity",
                    type: {
                        name: "Composite",
                        className: "BusinessIdentity"
                    }
                }, content: {
                    required: true,
                    serializedName: "properties.content",
                    type: {
                        name: "Composite",
                        className: "AgreementContent"
                    }
                } })
        }
    };
    var IntegrationAccountAgreementFilter = {
        serializedName: "IntegrationAccountAgreementFilter",
        type: {
            name: "Composite",
            className: "IntegrationAccountAgreementFilter",
            modelProperties: {
                agreementType: {
                    required: true,
                    serializedName: "agreementType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "NotSpecified",
                            "AS2",
                            "X12",
                            "Edifact"
                        ]
                    }
                }
            }
        }
    };
    var KeyVaultKeyReferenceKeyVault = {
        serializedName: "KeyVaultKeyReference_keyVault",
        type: {
            name: "Composite",
            className: "KeyVaultKeyReferenceKeyVault",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultKeyReference = {
        serializedName: "KeyVaultKeyReference",
        type: {
            name: "Composite",
            className: "KeyVaultKeyReference",
            modelProperties: {
                keyVault: {
                    required: true,
                    serializedName: "keyVault",
                    type: {
                        name: "Composite",
                        className: "KeyVaultKeyReferenceKeyVault"
                    }
                },
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                keyVersion: {
                    serializedName: "keyVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountCertificate = {
        serializedName: "IntegrationAccountCertificate",
        type: {
            name: "Composite",
            className: "IntegrationAccountCertificate",
            modelProperties: __assign({}, Resource.type.modelProperties, { createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Object"
                    }
                }, key: {
                    serializedName: "properties.key",
                    type: {
                        name: "Composite",
                        className: "KeyVaultKeyReference"
                    }
                }, publicCertificate: {
                    serializedName: "properties.publicCertificate",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IntegrationAccountSessionFilter = {
        serializedName: "IntegrationAccountSessionFilter",
        type: {
            name: "Composite",
            className: "IntegrationAccountSessionFilter",
            modelProperties: {
                changedTime: {
                    required: true,
                    serializedName: "changedTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var IntegrationAccountSession = {
        serializedName: "IntegrationAccountSession",
        type: {
            name: "Composite",
            className: "IntegrationAccountSession",
            modelProperties: __assign({}, Resource.type.modelProperties, { createdTime: {
                    readOnly: true,
                    serializedName: "properties.createdTime",
                    type: {
                        name: "DateTime"
                    }
                }, changedTime: {
                    readOnly: true,
                    serializedName: "properties.changedTime",
                    type: {
                        name: "DateTime"
                    }
                }, content: {
                    serializedName: "properties.content",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var KeyVaultReference = {
        serializedName: "KeyVaultReference",
        type: {
            name: "Composite",
            className: "KeyVaultReference",
            modelProperties: __assign({}, ResourceReference.type.modelProperties)
        }
    };
    var ListKeyVaultKeysDefinition = {
        serializedName: "ListKeyVaultKeysDefinition",
        type: {
            name: "Composite",
            className: "ListKeyVaultKeysDefinition",
            modelProperties: {
                keyVault: {
                    required: true,
                    serializedName: "keyVault",
                    type: {
                        name: "Composite",
                        className: "KeyVaultReference"
                    }
                },
                skipToken: {
                    serializedName: "skipToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultKeyAttributes = {
        serializedName: "KeyVaultKey_attributes",
        type: {
            name: "Composite",
            className: "KeyVaultKeyAttributes",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    serializedName: "created",
                    type: {
                        name: "Number"
                    }
                },
                updated: {
                    serializedName: "updated",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var KeyVaultKey = {
        serializedName: "KeyVaultKey",
        type: {
            name: "Composite",
            className: "KeyVaultKey",
            modelProperties: {
                kid: {
                    serializedName: "kid",
                    type: {
                        name: "String"
                    }
                },
                attributes: {
                    serializedName: "attributes",
                    type: {
                        name: "Composite",
                        className: "KeyVaultKeyAttributes"
                    }
                }
            }
        }
    };
    var TrackingEventErrorInfo = {
        serializedName: "TrackingEventErrorInfo",
        type: {
            name: "Composite",
            className: "TrackingEventErrorInfo",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackingEvent = {
        serializedName: "TrackingEvent",
        type: {
            name: "Composite",
            className: "TrackingEvent",
            modelProperties: {
                eventLevel: {
                    required: true,
                    serializedName: "eventLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "LogAlways",
                            "Critical",
                            "Error",
                            "Warning",
                            "Informational",
                            "Verbose"
                        ]
                    }
                },
                eventTime: {
                    required: true,
                    serializedName: "eventTime",
                    type: {
                        name: "DateTime"
                    }
                },
                recordType: {
                    required: true,
                    serializedName: "recordType",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "TrackingEventErrorInfo"
                    }
                }
            }
        }
    };
    var TrackingEventsDefinition = {
        serializedName: "TrackingEventsDefinition",
        type: {
            name: "Composite",
            className: "TrackingEventsDefinition",
            modelProperties: {
                sourceType: {
                    required: true,
                    serializedName: "sourceType",
                    type: {
                        name: "String"
                    }
                },
                trackEventsOptions: {
                    serializedName: "trackEventsOptions",
                    type: {
                        name: "String"
                    }
                },
                events: {
                    required: true,
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackingEvent"
                            }
                        }
                    }
                }
            }
        }
    };
    var SetTriggerStateActionDefinition = {
        serializedName: "SetTriggerStateActionDefinition",
        type: {
            name: "Composite",
            className: "SetTriggerStateActionDefinition",
            modelProperties: {
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "WorkflowTrigger"
                    }
                }
            }
        }
    };
    var Expression = {
        serializedName: "Expression",
        type: {
            name: "Composite",
            className: "Expression",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                },
                subexpressions: {
                    serializedName: "subexpressions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Expression"
                            }
                        }
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "AzureResourceErrorInfo"
                    }
                }
            }
        }
    };
    var ExpressionRoot = {
        serializedName: "ExpressionRoot",
        type: {
            name: "Composite",
            className: "ExpressionRoot",
            modelProperties: __assign({}, Expression.type.modelProperties, { path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ErrorInfo = {
        serializedName: "ErrorInfo",
        type: {
            name: "Composite",
            className: "ErrorInfo",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureResourceErrorInfo = {
        serializedName: "AzureResourceErrorInfo",
        type: {
            name: "Composite",
            className: "AzureResourceErrorInfo",
            modelProperties: __assign({}, ErrorInfo.type.modelProperties, { message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AzureResourceErrorInfo"
                            }
                        }
                    }
                } })
        }
    };
    var RepetitionIndex = {
        serializedName: "RepetitionIndex",
        type: {
            name: "Composite",
            className: "RepetitionIndex",
            modelProperties: {
                scopeName: {
                    serializedName: "scopeName",
                    type: {
                        name: "String"
                    }
                },
                itemIndex: {
                    required: true,
                    serializedName: "itemIndex",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var WorkflowRunActionRepetitionDefinition = {
        serializedName: "WorkflowRunActionRepetitionDefinition",
        type: {
            name: "Composite",
            className: "WorkflowRunActionRepetitionDefinition",
            modelProperties: __assign({}, Resource.type.modelProperties, { startTime: {
                    serializedName: "properties.startTime",
                    type: {
                        name: "DateTime"
                    }
                }, endTime: {
                    serializedName: "properties.endTime",
                    type: {
                        name: "DateTime"
                    }
                }, correlation: {
                    serializedName: "properties.correlation",
                    type: {
                        name: "Composite",
                        className: "RunActionCorrelation"
                    }
                }, status: {
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, code: {
                    serializedName: "properties.code",
                    type: {
                        name: "String"
                    }
                }, error: {
                    serializedName: "properties.error",
                    type: {
                        name: "Object"
                    }
                }, trackingId: {
                    readOnly: true,
                    serializedName: "properties.trackingId",
                    type: {
                        name: "String"
                    }
                }, inputs: {
                    readOnly: true,
                    serializedName: "properties.inputs",
                    type: {
                        name: "Object"
                    }
                }, inputsLink: {
                    readOnly: true,
                    serializedName: "properties.inputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, outputs: {
                    readOnly: true,
                    serializedName: "properties.outputs",
                    type: {
                        name: "Object"
                    }
                }, outputsLink: {
                    readOnly: true,
                    serializedName: "properties.outputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, trackedProperties: {
                    readOnly: true,
                    serializedName: "properties.trackedProperties",
                    type: {
                        name: "Object"
                    }
                }, retryHistory: {
                    serializedName: "properties.retryHistory",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RetryHistory"
                            }
                        }
                    }
                }, iterationCount: {
                    serializedName: "properties.iterationCount",
                    type: {
                        name: "Number"
                    }
                }, repetitionIndexes: {
                    serializedName: "properties.repetitionIndexes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RepetitionIndex"
                            }
                        }
                    }
                } })
        }
    };
    var OperationResultProperties = {
        serializedName: "OperationResultProperties",
        type: {
            name: "Composite",
            className: "OperationResultProperties",
            modelProperties: {
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                correlation: {
                    serializedName: "correlation",
                    type: {
                        name: "Composite",
                        className: "RunActionCorrelation"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var OperationResult = {
        serializedName: "OperationResult",
        type: {
            name: "Composite",
            className: "OperationResult",
            modelProperties: __assign({}, OperationResultProperties.type.modelProperties, { trackingId: {
                    readOnly: true,
                    serializedName: "trackingId",
                    type: {
                        name: "String"
                    }
                }, inputs: {
                    readOnly: true,
                    serializedName: "inputs",
                    type: {
                        name: "Object"
                    }
                }, inputsLink: {
                    readOnly: true,
                    serializedName: "inputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, outputs: {
                    readOnly: true,
                    serializedName: "outputs",
                    type: {
                        name: "Object"
                    }
                }, outputsLink: {
                    readOnly: true,
                    serializedName: "outputsLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                }, trackedProperties: {
                    readOnly: true,
                    serializedName: "trackedProperties",
                    type: {
                        name: "Object"
                    }
                }, retryHistory: {
                    serializedName: "retryHistory",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RetryHistory"
                            }
                        }
                    }
                }, iterationCount: {
                    serializedName: "iterationCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var RunCorrelation = {
        serializedName: "RunCorrelation",
        type: {
            name: "Composite",
            className: "RunCorrelation",
            modelProperties: {
                clientTrackingId: {
                    serializedName: "clientTrackingId",
                    type: {
                        name: "String"
                    }
                },
                clientKeywords: {
                    serializedName: "clientKeywords",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunActionCorrelation = {
        serializedName: "RunActionCorrelation",
        type: {
            name: "Composite",
            className: "RunActionCorrelation",
            modelProperties: __assign({}, RunCorrelation.type.modelProperties, { actionTrackingId: {
                    serializedName: "actionTrackingId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var JsonSchema = {
        serializedName: "JsonSchema",
        type: {
            name: "Composite",
            className: "JsonSchema",
            modelProperties: {
                title: {
                    serializedName: "title",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArtifactProperties = {
        serializedName: "ArtifactProperties",
        type: {
            name: "Composite",
            className: "ArtifactProperties",
            modelProperties: {
                createdTime: {
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                changedTime: {
                    serializedName: "changedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ArtifactContentPropertiesDefinition = {
        serializedName: "ArtifactContentPropertiesDefinition",
        type: {
            name: "Composite",
            className: "ArtifactContentPropertiesDefinition",
            modelProperties: __assign({}, ArtifactProperties.type.modelProperties, { content: {
                    serializedName: "content",
                    type: {
                        name: "Object"
                    }
                }, contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                }, contentLink: {
                    serializedName: "contentLink",
                    type: {
                        name: "Composite",
                        className: "ContentLink"
                    }
                } })
        }
    };
    var AssemblyProperties = {
        serializedName: "AssemblyProperties",
        type: {
            name: "Composite",
            className: "AssemblyProperties",
            modelProperties: __assign({}, ArtifactContentPropertiesDefinition.type.modelProperties, { assemblyName: {
                    required: true,
                    serializedName: "assemblyName",
                    type: {
                        name: "String"
                    }
                }, assemblyVersion: {
                    serializedName: "assemblyVersion",
                    type: {
                        name: "String"
                    }
                }, assemblyCulture: {
                    serializedName: "assemblyCulture",
                    type: {
                        name: "String"
                    }
                }, assemblyPublicKeyToken: {
                    serializedName: "assemblyPublicKeyToken",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AssemblyDefinition = {
        serializedName: "AssemblyDefinition",
        type: {
            name: "Composite",
            className: "AssemblyDefinition",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "AssemblyProperties"
                    }
                } })
        }
    };
    var BatchReleaseCriteria = {
        serializedName: "BatchReleaseCriteria",
        type: {
            name: "Composite",
            className: "BatchReleaseCriteria",
            modelProperties: {
                messageCount: {
                    serializedName: "messageCount",
                    type: {
                        name: "Number"
                    }
                },
                batchSize: {
                    serializedName: "batchSize",
                    type: {
                        name: "Number"
                    }
                },
                recurrence: {
                    serializedName: "recurrence",
                    type: {
                        name: "Composite",
                        className: "WorkflowTriggerRecurrence"
                    }
                }
            }
        }
    };
    var BatchConfigurationProperties = {
        serializedName: "BatchConfigurationProperties",
        type: {
            name: "Composite",
            className: "BatchConfigurationProperties",
            modelProperties: __assign({}, ArtifactProperties.type.modelProperties, { batchGroupName: {
                    required: true,
                    serializedName: "batchGroupName",
                    type: {
                        name: "String"
                    }
                }, releaseCriteria: {
                    required: true,
                    serializedName: "releaseCriteria",
                    type: {
                        name: "Composite",
                        className: "BatchReleaseCriteria"
                    }
                } })
        }
    };
    var BatchConfiguration = {
        serializedName: "BatchConfiguration",
        type: {
            name: "Composite",
            className: "BatchConfiguration",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "BatchConfigurationProperties"
                    }
                } })
        }
    };
    var WorkflowListResult = {
        serializedName: "WorkflowListResult",
        type: {
            name: "Composite",
            className: "WorkflowListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workflow"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowVersionListResult = {
        serializedName: "WorkflowVersionListResult",
        type: {
            name: "Composite",
            className: "WorkflowVersionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkflowVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowTriggerListResult = {
        serializedName: "WorkflowTriggerListResult",
        type: {
            name: "Composite",
            className: "WorkflowTriggerListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkflowTrigger"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowTriggerHistoryListResult = {
        serializedName: "WorkflowTriggerHistoryListResult",
        type: {
            name: "Composite",
            className: "WorkflowTriggerHistoryListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkflowTriggerHistory"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowRunListResult = {
        serializedName: "WorkflowRunListResult",
        type: {
            name: "Composite",
            className: "WorkflowRunListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkflowRun"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkflowRunActionListResult = {
        serializedName: "WorkflowRunActionListResult",
        type: {
            name: "Composite",
            className: "WorkflowRunActionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkflowRunAction"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExpressionTraces = {
        serializedName: "ExpressionTraces",
        type: {
            name: "Composite",
            className: "ExpressionTraces",
            modelProperties: {
                inputs: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExpressionRoot"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkflowRunActionRepetitionDefinitionCollection = {
        serializedName: "WorkflowRunActionRepetitionDefinitionCollection",
        type: {
            name: "Composite",
            className: "WorkflowRunActionRepetitionDefinitionCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkflowRunActionRepetitionDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var IntegrationAccountListResult = {
        serializedName: "IntegrationAccountListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccount"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultKeyCollection = {
        serializedName: "KeyVaultKeyCollection",
        type: {
            name: "Composite",
            className: "KeyVaultKeyCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyVaultKey"
                            }
                        }
                    }
                },
                skipToken: {
                    serializedName: "skipToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AssemblyCollection = {
        serializedName: "AssemblyCollection",
        type: {
            name: "Composite",
            className: "AssemblyCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AssemblyDefinition"
                            }
                        }
                    }
                }
            }
        }
    };
    var BatchConfigurationCollection = {
        serializedName: "BatchConfigurationCollection",
        type: {
            name: "Composite",
            className: "BatchConfigurationCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BatchConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var IntegrationAccountSchemaListResult = {
        serializedName: "IntegrationAccountSchemaListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountSchemaListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccountSchema"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountMapListResult = {
        serializedName: "IntegrationAccountMapListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountMapListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccountMap"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountPartnerListResult = {
        serializedName: "IntegrationAccountPartnerListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountPartnerListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccountPartner"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountAgreementListResult = {
        serializedName: "IntegrationAccountAgreementListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountAgreementListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccountAgreement"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountCertificateListResult = {
        serializedName: "IntegrationAccountCertificateListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountCertificateListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccountCertificate"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IntegrationAccountSessionListResult = {
        serializedName: "IntegrationAccountSessionListResult",
        type: {
            name: "Composite",
            className: "IntegrationAccountSessionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IntegrationAccountSession"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        SubResource: SubResource,
        ResourceReference: ResourceReference,
        Sku: Sku,
        WorkflowParameter: WorkflowParameter,
        Workflow: Workflow,
        WorkflowFilter: WorkflowFilter,
        WorkflowVersion: WorkflowVersion,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerFilter: WorkflowTriggerFilter,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        Correlation: Correlation,
        ContentHash: ContentHash,
        ContentLink: ContentLink,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        WorkflowTriggerHistoryFilter: WorkflowTriggerHistoryFilter,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunFilter: WorkflowRunFilter,
        ErrorProperties: ErrorProperties,
        ErrorResponse: ErrorResponse,
        RetryHistory: RetryHistory,
        WorkflowRunAction: WorkflowRunAction,
        WorkflowRunActionFilter: WorkflowRunActionFilter,
        RegenerateActionParameter: RegenerateActionParameter,
        GenerateUpgradedDefinitionParameters: GenerateUpgradedDefinitionParameters,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccount: IntegrationAccount,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        CallbackUrl: CallbackUrl,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountSchemaFilter: IntegrationAccountSchemaFilter,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapFilter: IntegrationAccountMapFilter,
        BusinessIdentity: BusinessIdentity,
        B2BPartnerContent: B2BPartnerContent,
        PartnerContent: PartnerContent,
        IntegrationAccountPartner: IntegrationAccountPartner,
        IntegrationAccountPartnerFilter: IntegrationAccountPartnerFilter,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2AgreementContent: AS2AgreementContent,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        X12ProtocolSettings: X12ProtocolSettings,
        X12OneWayAgreement: X12OneWayAgreement,
        X12AgreementContent: X12AgreementContent,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactAgreementContent: EdifactAgreementContent,
        AgreementContent: AgreementContent,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        IntegrationAccountAgreementFilter: IntegrationAccountAgreementFilter,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        KeyVaultKeyReference: KeyVaultKeyReference,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        IntegrationAccountSessionFilter: IntegrationAccountSessionFilter,
        IntegrationAccountSession: IntegrationAccountSession,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        KeyVaultReference: KeyVaultReference,
        ListKeyVaultKeysDefinition: ListKeyVaultKeysDefinition,
        KeyVaultKeyAttributes: KeyVaultKeyAttributes,
        KeyVaultKey: KeyVaultKey,
        TrackingEventErrorInfo: TrackingEventErrorInfo,
        TrackingEvent: TrackingEvent,
        TrackingEventsDefinition: TrackingEventsDefinition,
        SetTriggerStateActionDefinition: SetTriggerStateActionDefinition,
        Expression: Expression,
        ExpressionRoot: ExpressionRoot,
        ErrorInfo: ErrorInfo,
        AzureResourceErrorInfo: AzureResourceErrorInfo,
        RepetitionIndex: RepetitionIndex,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        OperationResultProperties: OperationResultProperties,
        OperationResult: OperationResult,
        RunCorrelation: RunCorrelation,
        RunActionCorrelation: RunActionCorrelation,
        JsonSchema: JsonSchema,
        ArtifactProperties: ArtifactProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        AssemblyProperties: AssemblyProperties,
        AssemblyDefinition: AssemblyDefinition,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchConfiguration: BatchConfiguration,
        WorkflowListResult: WorkflowListResult,
        WorkflowVersionListResult: WorkflowVersionListResult,
        WorkflowTriggerListResult: WorkflowTriggerListResult,
        WorkflowTriggerHistoryListResult: WorkflowTriggerHistoryListResult,
        WorkflowRunListResult: WorkflowRunListResult,
        WorkflowRunActionListResult: WorkflowRunActionListResult,
        ExpressionTraces: ExpressionTraces,
        WorkflowRunActionRepetitionDefinitionCollection: WorkflowRunActionRepetitionDefinitionCollection,
        IntegrationAccountListResult: IntegrationAccountListResult,
        KeyVaultKeyCollection: KeyVaultKeyCollection,
        AssemblyCollection: AssemblyCollection,
        BatchConfigurationCollection: BatchConfigurationCollection,
        IntegrationAccountSchemaListResult: IntegrationAccountSchemaListResult,
        IntegrationAccountMapListResult: IntegrationAccountMapListResult,
        IntegrationAccountPartnerListResult: IntegrationAccountPartnerListResult,
        IntegrationAccountAgreementListResult: IntegrationAccountAgreementListResult,
        IntegrationAccountCertificateListResult: IntegrationAccountCertificateListResult,
        IntegrationAccountSessionListResult: IntegrationAccountSessionListResult,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        WorkflowListResult: WorkflowListResult,
        Workflow: Workflow,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        CloudError: CloudError,
        GenerateUpgradedDefinitionParameters: GenerateUpgradedDefinitionParameters,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        RegenerateActionParameter: RegenerateActionParameter,
        SubResource: SubResource,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var actionName = {
        parameterPath: "actionName",
        mapper: {
            required: true,
            serializedName: "actionName",
            type: {
                name: "String"
            }
        }
    };
    var agreementName = {
        parameterPath: "agreementName",
        mapper: {
            required: true,
            serializedName: "agreementName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var assemblyArtifactName = {
        parameterPath: "assemblyArtifactName",
        mapper: {
            required: true,
            serializedName: "assemblyArtifactName",
            type: {
                name: "String"
            }
        }
    };
    var batchConfigurationName = {
        parameterPath: "batchConfigurationName",
        mapper: {
            required: true,
            serializedName: "batchConfigurationName",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var historyName = {
        parameterPath: "historyName",
        mapper: {
            required: true,
            serializedName: "historyName",
            type: {
                name: "String"
            }
        }
    };
    var integrationAccountName = {
        parameterPath: "integrationAccountName",
        mapper: {
            required: true,
            serializedName: "integrationAccountName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var mapName = {
        parameterPath: "mapName",
        mapper: {
            required: true,
            serializedName: "mapName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var partnerName = {
        parameterPath: "partnerName",
        mapper: {
            required: true,
            serializedName: "partnerName",
            type: {
                name: "String"
            }
        }
    };
    var repetitionName = {
        parameterPath: "repetitionName",
        mapper: {
            required: true,
            serializedName: "repetitionName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var runName = {
        parameterPath: "runName",
        mapper: {
            required: true,
            serializedName: "runName",
            type: {
                name: "String"
            }
        }
    };
    var schemaName = {
        parameterPath: "schemaName",
        mapper: {
            required: true,
            serializedName: "schemaName",
            type: {
                name: "String"
            }
        }
    };
    var sessionName = {
        parameterPath: "sessionName",
        mapper: {
            required: true,
            serializedName: "sessionName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var triggerName = {
        parameterPath: "triggerName",
        mapper: {
            required: true,
            serializedName: "triggerName",
            type: {
                name: "String"
            }
        }
    };
    var versionId = {
        parameterPath: "versionId",
        mapper: {
            required: true,
            serializedName: "versionId",
            type: {
                name: "String"
            }
        }
    };
    var workflowName = {
        parameterPath: "workflowName",
        mapper: {
            required: true,
            serializedName: "workflowName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workflows. */
    var Workflows = /** @class */ (function () {
        /**
         * Create a Workflows.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function Workflows(client) {
            this.client = client;
        }
        Workflows.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Workflows.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Workflows.prototype.get = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Workflows.prototype.createOrUpdate = function (resourceGroupName$$1, workflowName$$1, workflow, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                workflow: workflow,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Workflows.prototype.update = function (resourceGroupName$$1, workflowName$$1, workflow, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                workflow: workflow,
                options: options
            }, updateOperationSpec, callback);
        };
        Workflows.prototype.deleteMethod = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Workflows.prototype.disable = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, disableOperationSpec, callback);
        };
        Workflows.prototype.enable = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, enableOperationSpec, callback);
        };
        Workflows.prototype.generateUpgradedDefinition = function (resourceGroupName$$1, workflowName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                parameters: parameters,
                options: options
            }, generateUpgradedDefinitionOperationSpec, callback);
        };
        Workflows.prototype.listCallbackUrl = function (resourceGroupName$$1, workflowName$$1, listCallbackUrlParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                listCallbackUrlParameter: listCallbackUrlParameter,
                options: options
            }, listCallbackUrlOperationSpec, callback);
        };
        Workflows.prototype.listSwagger = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, listSwaggerOperationSpec, callback);
        };
        Workflows.prototype.move = function (resourceGroupName$$1, workflowName$$1, moveParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                moveParameter: moveParameter,
                options: options
            }, moveOperationSpec, callback);
        };
        Workflows.prototype.regenerateAccessKey = function (resourceGroupName$$1, workflowName$$1, keyType, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                keyType: keyType,
                options: options
            }, regenerateAccessKeyOperationSpec, callback);
        };
        Workflows.prototype.validateByResourceGroup = function (resourceGroupName$$1, workflowName$$1, validate, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                validate: validate,
                options: options
            }, validateByResourceGroupOperationSpec, callback);
        };
        Workflows.prototype.validateByLocation = function (resourceGroupName$$1, location$$1, workflowName$$1, workflow, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                location: location$$1,
                workflowName: workflowName$$1,
                workflow: workflow,
                options: options
            }, validateByLocationOperationSpec, callback);
        };
        Workflows.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        Workflows.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Workflows;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workflow
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workflow",
            mapper: __assign({}, Workflow, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workflow
            },
            201: {
                bodyMapper: Workflow
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workflow",
            mapper: __assign({}, Workflow, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workflow
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var disableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var enableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var generateUpgradedDefinitionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GenerateUpgradedDefinitionParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listCallbackUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "listCallbackUrlParameter",
            mapper: __assign({}, GetCallbackUrlParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listSwaggerOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var moveOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "moveParameter",
            mapper: __assign({}, Workflow, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var regenerateAccessKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "keyType",
            mapper: __assign({}, RegenerateActionParameter, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var validateByResourceGroupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "validate",
            mapper: __assign({}, Workflow, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var validateByLocationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            location,
            workflowName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workflow",
            mapper: __assign({}, Workflow, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        WorkflowVersionListResult: WorkflowVersionListResult,
        WorkflowVersion: WorkflowVersion,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        CloudError: CloudError,
        SubResource: SubResource,
        Workflow: Workflow,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowVersions. */
    var WorkflowVersions = /** @class */ (function () {
        /**
         * Create a WorkflowVersions.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowVersions(client) {
            this.client = client;
        }
        WorkflowVersions.prototype.list = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, listOperationSpec, callback);
        };
        WorkflowVersions.prototype.get = function (resourceGroupName$$1, workflowName$$1, versionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                versionId: versionId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        WorkflowVersions.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return WorkflowVersions;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            versionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowVersionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        WorkflowTriggerListResult: WorkflowTriggerListResult,
        WorkflowTrigger: WorkflowTrigger,
        SubResource: SubResource,
        BaseResource: BaseResource,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        ResourceReference: ResourceReference,
        CloudError: CloudError,
        JsonSchema: JsonSchema,
        SetTriggerStateActionDefinition: SetTriggerStateActionDefinition,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        Resource: Resource,
        Workflow: Workflow,
        Sku: Sku,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowTriggers. */
    var WorkflowTriggers = /** @class */ (function () {
        /**
         * Create a WorkflowTriggers.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowTriggers(client) {
            this.client = client;
        }
        WorkflowTriggers.prototype.list = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        WorkflowTriggers.prototype.get = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        WorkflowTriggers.prototype.reset = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                options: options
            }, resetOperationSpec, callback);
        };
        WorkflowTriggers.prototype.run = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                options: options
            }, runOperationSpec, callback);
        };
        WorkflowTriggers.prototype.getSchemaJson = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                options: options
            }, getSchemaJsonOperationSpec, callback);
        };
        WorkflowTriggers.prototype.setState = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, setStateParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                setStateParameter: setStateParameter,
                options: options
            }, setStateOperationSpec, callback);
        };
        WorkflowTriggers.prototype.listCallbackUrl = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                options: options
            }, listCallbackUrlOperationSpec$1, callback);
        };
        WorkflowTriggers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return WorkflowTriggers;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTrigger
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var resetOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/reset",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var runOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/run",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            default: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            }
        },
        serializer: serializer$2
    };
    var getSchemaJsonOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/schemas/json",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JsonSchema
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var setStateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/setState",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "setStateParameter",
            mapper: __assign({}, SetTriggerStateActionDefinition, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listCallbackUrlOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/listCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowVersionTriggers. */
    var WorkflowVersionTriggers = /** @class */ (function () {
        /**
         * Create a WorkflowVersionTriggers.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowVersionTriggers(client) {
            this.client = client;
        }
        WorkflowVersionTriggers.prototype.listCallbackUrl = function (resourceGroupName$$1, workflowName$$1, versionId$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                versionId: versionId$$1,
                triggerName: triggerName$$1,
                options: options
            }, listCallbackUrlOperationSpec$2, callback);
        };
        return WorkflowVersionTriggers;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listCallbackUrlOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}/triggers/{triggerName}/listCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            versionId,
            triggerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: GetCallbackUrlParameters
        },
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        WorkflowTriggerHistoryListResult: WorkflowTriggerHistoryListResult,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        ResourceReference: ResourceReference,
        CloudError: CloudError,
        Resource: Resource,
        Workflow: Workflow,
        Sku: Sku,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowTriggerHistories. */
    var WorkflowTriggerHistories = /** @class */ (function () {
        /**
         * Create a WorkflowTriggerHistories.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowTriggerHistories(client) {
            this.client = client;
        }
        WorkflowTriggerHistories.prototype.list = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        WorkflowTriggerHistories.prototype.get = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, historyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                historyName: historyName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        WorkflowTriggerHistories.prototype.resubmit = function (resourceGroupName$$1, workflowName$$1, triggerName$$1, historyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                triggerName: triggerName$$1,
                historyName: historyName$$1,
                options: options
            }, resubmitOperationSpec, callback);
        };
        WorkflowTriggerHistories.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return WorkflowTriggerHistories;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerHistoryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName,
            historyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerHistory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var resubmitOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}/resubmit",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            triggerName,
            historyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerHistoryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        WorkflowRunListResult: WorkflowRunListResult,
        WorkflowRun: WorkflowRun,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Correlation: Correlation,
        ResourceReference: ResourceReference,
        WorkflowRunTrigger: WorkflowRunTrigger,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowParameter: WorkflowParameter,
        CloudError: CloudError,
        Resource: Resource,
        Workflow: Workflow,
        Sku: Sku,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowRuns. */
    var WorkflowRuns = /** @class */ (function () {
        /**
         * Create a WorkflowRuns.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowRuns(client) {
            this.client = client;
        }
        WorkflowRuns.prototype.list = function (resourceGroupName$$1, workflowName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        WorkflowRuns.prototype.get = function (resourceGroupName$$1, workflowName$$1, runName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        WorkflowRuns.prototype.cancel = function (resourceGroupName$$1, workflowName$$1, runName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                options: options
            }, cancelOperationSpec, callback);
        };
        WorkflowRuns.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return WorkflowRuns;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRun
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        WorkflowRunActionListResult: WorkflowRunActionListResult,
        WorkflowRunAction: WorkflowRunAction,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        CloudError: CloudError,
        ExpressionTraces: ExpressionTraces,
        ExpressionRoot: ExpressionRoot,
        Expression: Expression,
        AzureResourceErrorInfo: AzureResourceErrorInfo,
        ErrorInfo: ErrorInfo,
        Resource: Resource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowRunActions. */
    var WorkflowRunActions = /** @class */ (function () {
        /**
         * Create a WorkflowRunActions.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowRunActions(client) {
            this.client = client;
        }
        WorkflowRunActions.prototype.list = function (resourceGroupName$$1, workflowName$$1, runName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        WorkflowRunActions.prototype.get = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        WorkflowRunActions.prototype.listExpressionTraces = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                options: options
            }, listExpressionTracesOperationSpec, callback);
        };
        WorkflowRunActions.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return WorkflowRunActions;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunActionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunAction
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listExpressionTracesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressionTraces
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunActionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        WorkflowRunActionRepetitionDefinitionCollection: WorkflowRunActionRepetitionDefinitionCollection,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        Resource: Resource,
        BaseResource: BaseResource,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        RepetitionIndex: RepetitionIndex,
        CloudError: CloudError,
        ExpressionTraces: ExpressionTraces,
        ExpressionRoot: ExpressionRoot,
        Expression: Expression,
        AzureResourceErrorInfo: AzureResourceErrorInfo,
        ErrorInfo: ErrorInfo,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowRunActionRepetitions. */
    var WorkflowRunActionRepetitions = /** @class */ (function () {
        /**
         * Create a WorkflowRunActionRepetitions.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowRunActionRepetitions(client) {
            this.client = client;
        }
        WorkflowRunActionRepetitions.prototype.list = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        WorkflowRunActionRepetitions.prototype.get = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, repetitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                repetitionName: repetitionName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        WorkflowRunActionRepetitions.prototype.listExpressionTraces = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, repetitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                repetitionName: repetitionName$$1,
                options: options
            }, listExpressionTracesOperationSpec$1, callback);
        };
        return WorkflowRunActionRepetitions;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunActionRepetitionDefinitionCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName,
            repetitionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunActionRepetitionDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listExpressionTracesOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName,
            repetitionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExpressionTraces
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        WorkflowRunActionRepetitionDefinitionCollection: WorkflowRunActionRepetitionDefinitionCollection,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        Resource: Resource,
        BaseResource: BaseResource,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        RepetitionIndex: RepetitionIndex,
        CloudError: CloudError,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowRunActionScopeRepetitions. */
    var WorkflowRunActionScopeRepetitions = /** @class */ (function () {
        /**
         * Create a WorkflowRunActionScopeRepetitions.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowRunActionScopeRepetitions(client) {
            this.client = client;
        }
        WorkflowRunActionScopeRepetitions.prototype.list = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                options: options
            }, listOperationSpec$6, callback);
        };
        WorkflowRunActionScopeRepetitions.prototype.get = function (resourceGroupName$$1, workflowName$$1, runName$$1, actionName$$1, repetitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                actionName: actionName$$1,
                repetitionName: repetitionName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        return WorkflowRunActionScopeRepetitions;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunActionRepetitionDefinitionCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            actionName,
            repetitionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRunActionRepetitionDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        WorkflowRun: WorkflowRun,
        SubResource: SubResource,
        BaseResource: BaseResource,
        Correlation: Correlation,
        ResourceReference: ResourceReference,
        WorkflowRunTrigger: WorkflowRunTrigger,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowParameter: WorkflowParameter,
        CloudError: CloudError,
        Resource: Resource,
        Workflow: Workflow,
        Sku: Sku,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkflowRunOperations. */
    var WorkflowRunOperations = /** @class */ (function () {
        /**
         * Create a WorkflowRunOperations.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function WorkflowRunOperations(client) {
            this.client = client;
        }
        WorkflowRunOperations.prototype.get = function (resourceGroupName$$1, workflowName$$1, runName$$1, operationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                workflowName: workflowName$$1,
                runName: runName$$1,
                operationId: operationId$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        return WorkflowRunOperations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/operations/{operationId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            workflowName,
            runName,
            operationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowRun
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        IntegrationAccountListResult: IntegrationAccountListResult,
        IntegrationAccount: IntegrationAccount,
        Resource: Resource,
        BaseResource: BaseResource,
        IntegrationAccountSku: IntegrationAccountSku,
        CloudError: CloudError,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        CallbackUrl: CallbackUrl,
        ListKeyVaultKeysDefinition: ListKeyVaultKeysDefinition,
        KeyVaultReference: KeyVaultReference,
        ResourceReference: ResourceReference,
        KeyVaultKeyCollection: KeyVaultKeyCollection,
        KeyVaultKey: KeyVaultKey,
        KeyVaultKeyAttributes: KeyVaultKeyAttributes,
        TrackingEventsDefinition: TrackingEventsDefinition,
        TrackingEvent: TrackingEvent,
        TrackingEventErrorInfo: TrackingEventErrorInfo,
        RegenerateActionParameter: RegenerateActionParameter,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccounts. */
    var IntegrationAccounts = /** @class */ (function () {
        /**
         * Create a IntegrationAccounts.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccounts(client) {
            this.client = client;
        }
        IntegrationAccounts.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        IntegrationAccounts.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, integrationAccount, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                integrationAccount: integrationAccount,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.update = function (resourceGroupName$$1, integrationAccountName$$1, integrationAccount, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                integrationAccount: integrationAccount,
                options: options
            }, updateOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.listCallbackUrl = function (resourceGroupName$$1, integrationAccountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                parameters: parameters,
                options: options
            }, listCallbackUrlOperationSpec$3, callback);
        };
        IntegrationAccounts.prototype.listKeyVaultKeys = function (resourceGroupName$$1, integrationAccountName$$1, listKeyVaultKeysParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                listKeyVaultKeysParameter: listKeyVaultKeysParameter,
                options: options
            }, listKeyVaultKeysOperationSpec, callback);
        };
        IntegrationAccounts.prototype.logTrackingEvents = function (resourceGroupName$$1, integrationAccountName$$1, logTrackingEventsParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                logTrackingEventsParameter: logTrackingEventsParameter,
                options: options
            }, logTrackingEventsOperationSpec, callback);
        };
        IntegrationAccounts.prototype.regenerateAccessKey = function (resourceGroupName$$1, integrationAccountName$$1, regenerateAccessKeyParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                regenerateAccessKeyParameter: regenerateAccessKeyParameter,
                options: options
            }, regenerateAccessKeyOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$1, callback);
        };
        IntegrationAccounts.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return IntegrationAccounts;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "integrationAccount",
            mapper: __assign({}, IntegrationAccount, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccount
            },
            201: {
                bodyMapper: IntegrationAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "integrationAccount",
            mapper: __assign({}, IntegrationAccount, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listCallbackUrlOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, GetCallbackUrlParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listKeyVaultKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listKeyVaultKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "listKeyVaultKeysParameter",
            mapper: __assign({}, ListKeyVaultKeysDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: KeyVaultKeyCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var logTrackingEventsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/logTrackingEvents",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "logTrackingEventsParameter",
            mapper: __assign({}, TrackingEventsDefinition, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var regenerateAccessKeyOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/regenerateAccessKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regenerateAccessKeyParameter",
            mapper: __assign({}, RegenerateActionParameter, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listBySubscriptionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        AssemblyCollection: AssemblyCollection,
        AssemblyDefinition: AssemblyDefinition,
        Resource: Resource,
        BaseResource: BaseResource,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        CloudError: CloudError,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountAssemblies. */
    var IntegrationAccountAssemblies = /** @class */ (function () {
        /**
         * Create a IntegrationAccountAssemblies.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountAssemblies(client) {
            this.client = client;
        }
        IntegrationAccountAssemblies.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$7, callback);
        };
        IntegrationAccountAssemblies.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, assemblyArtifactName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                assemblyArtifactName: assemblyArtifactName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        IntegrationAccountAssemblies.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, assemblyArtifactName$$1, assemblyArtifact, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                assemblyArtifactName: assemblyArtifactName$$1,
                assemblyArtifact: assemblyArtifact,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        IntegrationAccountAssemblies.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, assemblyArtifactName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                assemblyArtifactName: assemblyArtifactName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        IntegrationAccountAssemblies.prototype.listContentCallbackUrl = function (resourceGroupName$$1, integrationAccountName$$1, assemblyArtifactName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                assemblyArtifactName: assemblyArtifactName$$1,
                options: options
            }, listContentCallbackUrlOperationSpec, callback);
        };
        return IntegrationAccountAssemblies;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssemblyCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            assemblyArtifactName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AssemblyDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            assemblyArtifactName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "assemblyArtifact",
            mapper: __assign({}, AssemblyDefinition, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AssemblyDefinition
            },
            201: {
                bodyMapper: AssemblyDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            assemblyArtifactName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listContentCallbackUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}/listContentCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            assemblyArtifactName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        BatchConfigurationCollection: BatchConfigurationCollection,
        BatchConfiguration: BatchConfiguration,
        Resource: Resource,
        BaseResource: BaseResource,
        BatchConfigurationProperties: BatchConfigurationProperties,
        ArtifactProperties: ArtifactProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        CloudError: CloudError,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountBatchConfigurations. */
    var IntegrationAccountBatchConfigurations = /** @class */ (function () {
        /**
         * Create a IntegrationAccountBatchConfigurations.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountBatchConfigurations(client) {
            this.client = client;
        }
        IntegrationAccountBatchConfigurations.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        IntegrationAccountBatchConfigurations.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, batchConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                batchConfigurationName: batchConfigurationName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        IntegrationAccountBatchConfigurations.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, batchConfigurationName$$1, batchConfiguration, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                batchConfigurationName: batchConfigurationName$$1,
                batchConfiguration: batchConfiguration,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        IntegrationAccountBatchConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, batchConfigurationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                batchConfigurationName: batchConfigurationName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        return IntegrationAccountBatchConfigurations;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchConfigurationCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            batchConfigurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BatchConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            batchConfigurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "batchConfiguration",
            mapper: __assign({}, BatchConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BatchConfiguration
            },
            201: {
                bodyMapper: BatchConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            batchConfigurationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        IntegrationAccountSchemaListResult: IntegrationAccountSchemaListResult,
        IntegrationAccountSchema: IntegrationAccountSchema,
        Resource: Resource,
        BaseResource: BaseResource,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        CloudError: CloudError,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountSchemas. */
    var IntegrationAccountSchemas = /** @class */ (function () {
        /**
         * Create a IntegrationAccountSchemas.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountSchemas(client) {
            this.client = client;
        }
        IntegrationAccountSchemas.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$9, callback);
        };
        IntegrationAccountSchemas.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, schemaName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                schemaName: schemaName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        IntegrationAccountSchemas.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, schemaName$$1, schema, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                schemaName: schemaName$$1,
                schema: schema,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        IntegrationAccountSchemas.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, schemaName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                schemaName: schemaName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        IntegrationAccountSchemas.prototype.listContentCallbackUrl = function (resourceGroupName$$1, integrationAccountName$$1, schemaName$$1, listContentCallbackUrlParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                schemaName: schemaName$$1,
                listContentCallbackUrlParameter: listContentCallbackUrlParameter,
                options: options
            }, listContentCallbackUrlOperationSpec$1, callback);
        };
        IntegrationAccountSchemas.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return IntegrationAccountSchemas;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountSchemaListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            schemaName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountSchema
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            schemaName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "schema",
            mapper: __assign({}, IntegrationAccountSchema, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccountSchema
            },
            201: {
                bodyMapper: IntegrationAccountSchema
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            schemaName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listContentCallbackUrlOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}/listContentCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            schemaName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "listContentCallbackUrlParameter",
            mapper: __assign({}, GetCallbackUrlParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountSchemaListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        IntegrationAccountMapListResult: IntegrationAccountMapListResult,
        IntegrationAccountMap: IntegrationAccountMap,
        Resource: Resource,
        BaseResource: BaseResource,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        CloudError: CloudError,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountMaps. */
    var IntegrationAccountMaps = /** @class */ (function () {
        /**
         * Create a IntegrationAccountMaps.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountMaps(client) {
            this.client = client;
        }
        IntegrationAccountMaps.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$a, callback);
        };
        IntegrationAccountMaps.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, mapName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                mapName: mapName$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        IntegrationAccountMaps.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, mapName$$1, map, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                mapName: mapName$$1,
                map: map,
                options: options
            }, createOrUpdateOperationSpec$5, callback);
        };
        IntegrationAccountMaps.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, mapName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                mapName: mapName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        IntegrationAccountMaps.prototype.listContentCallbackUrl = function (resourceGroupName$$1, integrationAccountName$$1, mapName$$1, listContentCallbackUrlParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                mapName: mapName$$1,
                listContentCallbackUrlParameter: listContentCallbackUrlParameter,
                options: options
            }, listContentCallbackUrlOperationSpec$2, callback);
        };
        IntegrationAccountMaps.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return IntegrationAccountMaps;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountMapListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            mapName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountMap
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var createOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            mapName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "map",
            mapper: __assign({}, IntegrationAccountMap, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccountMap
            },
            201: {
                bodyMapper: IntegrationAccountMap
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            mapName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listContentCallbackUrlOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}/listContentCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            mapName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "listContentCallbackUrlParameter",
            mapper: __assign({}, GetCallbackUrlParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountMapListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        IntegrationAccountPartnerListResult: IntegrationAccountPartnerListResult,
        IntegrationAccountPartner: IntegrationAccountPartner,
        Resource: Resource,
        BaseResource: BaseResource,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        CloudError: CloudError,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountPartners. */
    var IntegrationAccountPartners = /** @class */ (function () {
        /**
         * Create a IntegrationAccountPartners.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountPartners(client) {
            this.client = client;
        }
        IntegrationAccountPartners.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$b, callback);
        };
        IntegrationAccountPartners.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, partnerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                partnerName: partnerName$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        IntegrationAccountPartners.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, partnerName$$1, partner, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                partnerName: partnerName$$1,
                partner: partner,
                options: options
            }, createOrUpdateOperationSpec$6, callback);
        };
        IntegrationAccountPartners.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, partnerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                partnerName: partnerName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        IntegrationAccountPartners.prototype.listContentCallbackUrl = function (resourceGroupName$$1, integrationAccountName$$1, partnerName$$1, listContentCallbackUrlParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                partnerName: partnerName$$1,
                listContentCallbackUrlParameter: listContentCallbackUrlParameter,
                options: options
            }, listContentCallbackUrlOperationSpec$3, callback);
        };
        IntegrationAccountPartners.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return IntegrationAccountPartners;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountPartnerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            partnerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountPartner
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var createOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            partnerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "partner",
            mapper: __assign({}, IntegrationAccountPartner, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccountPartner
            },
            201: {
                bodyMapper: IntegrationAccountPartner
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            partnerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listContentCallbackUrlOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}/listContentCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            partnerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "listContentCallbackUrlParameter",
            mapper: __assign({}, GetCallbackUrlParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountPartnerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        IntegrationAccountAgreementListResult: IntegrationAccountAgreementListResult,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        Resource: Resource,
        BaseResource: BaseResource,
        BusinessIdentity: BusinessIdentity,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        CloudError: CloudError,
        GetCallbackUrlParameters: GetCallbackUrlParameters,
        WorkflowTriggerCallbackUrl: WorkflowTriggerCallbackUrl,
        WorkflowTriggerListCallbackUrlQueries: WorkflowTriggerListCallbackUrlQueries,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountAgreements. */
    var IntegrationAccountAgreements = /** @class */ (function () {
        /**
         * Create a IntegrationAccountAgreements.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountAgreements(client) {
            this.client = client;
        }
        IntegrationAccountAgreements.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$c, callback);
        };
        IntegrationAccountAgreements.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, agreementName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                agreementName: agreementName$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        IntegrationAccountAgreements.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, agreementName$$1, agreement, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                agreementName: agreementName$$1,
                agreement: agreement,
                options: options
            }, createOrUpdateOperationSpec$7, callback);
        };
        IntegrationAccountAgreements.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, agreementName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                agreementName: agreementName$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        IntegrationAccountAgreements.prototype.listContentCallbackUrl = function (resourceGroupName$$1, integrationAccountName$$1, agreementName$$1, listContentCallbackUrlParameter, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                agreementName: agreementName$$1,
                listContentCallbackUrlParameter: listContentCallbackUrlParameter,
                options: options
            }, listContentCallbackUrlOperationSpec$4, callback);
        };
        IntegrationAccountAgreements.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        return IntegrationAccountAgreements;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountAgreementListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            agreementName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountAgreement
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var createOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            agreementName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "agreement",
            mapper: __assign({}, IntegrationAccountAgreement, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccountAgreement
            },
            201: {
                bodyMapper: IntegrationAccountAgreement
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            agreementName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listContentCallbackUrlOperationSpec$4 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}/listContentCallbackUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            agreementName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "listContentCallbackUrlParameter",
            mapper: __assign({}, GetCallbackUrlParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkflowTriggerCallbackUrl
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountAgreementListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        IntegrationAccountCertificateListResult: IntegrationAccountCertificateListResult,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        Resource: Resource,
        BaseResource: BaseResource,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        CloudError: CloudError,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountSession: IntegrationAccountSession,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountCertificates. */
    var IntegrationAccountCertificates = /** @class */ (function () {
        /**
         * Create a IntegrationAccountCertificates.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountCertificates(client) {
            this.client = client;
        }
        IntegrationAccountCertificates.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$d, callback);
        };
        IntegrationAccountCertificates.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, getOperationSpec$g, callback);
        };
        IntegrationAccountCertificates.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, certificateName$$1, certificate, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                certificateName: certificateName$$1,
                certificate: certificate,
                options: options
            }, createOrUpdateOperationSpec$8, callback);
        };
        IntegrationAccountCertificates.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                certificateName: certificateName$$1,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        IntegrationAccountCertificates.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        return IntegrationAccountCertificates;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountCertificateListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountCertificate
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var createOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificate",
            mapper: __assign({}, IntegrationAccountCertificate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccountCertificate
            },
            201: {
                bodyMapper: IntegrationAccountCertificate
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountCertificateListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        IntegrationAccountSessionListResult: IntegrationAccountSessionListResult,
        IntegrationAccountSession: IntegrationAccountSession,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        SubResource: SubResource,
        Workflow: Workflow,
        Sku: Sku,
        ResourceReference: ResourceReference,
        WorkflowParameter: WorkflowParameter,
        WorkflowVersion: WorkflowVersion,
        WorkflowTrigger: WorkflowTrigger,
        WorkflowTriggerRecurrence: WorkflowTriggerRecurrence,
        RecurrenceSchedule: RecurrenceSchedule,
        RecurrenceScheduleOccurrence: RecurrenceScheduleOccurrence,
        WorkflowTriggerHistory: WorkflowTriggerHistory,
        Correlation: Correlation,
        ContentLink: ContentLink,
        ContentHash: ContentHash,
        WorkflowOutputParameter: WorkflowOutputParameter,
        WorkflowRun: WorkflowRun,
        WorkflowRunTrigger: WorkflowRunTrigger,
        WorkflowRunAction: WorkflowRunAction,
        RetryHistory: RetryHistory,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties,
        IntegrationAccount: IntegrationAccount,
        IntegrationAccountSku: IntegrationAccountSku,
        IntegrationAccountSchema: IntegrationAccountSchema,
        IntegrationAccountMap: IntegrationAccountMap,
        IntegrationAccountMapPropertiesParametersSchema: IntegrationAccountMapPropertiesParametersSchema,
        IntegrationAccountPartner: IntegrationAccountPartner,
        PartnerContent: PartnerContent,
        B2BPartnerContent: B2BPartnerContent,
        BusinessIdentity: BusinessIdentity,
        IntegrationAccountAgreement: IntegrationAccountAgreement,
        AgreementContent: AgreementContent,
        AS2AgreementContent: AS2AgreementContent,
        AS2OneWayAgreement: AS2OneWayAgreement,
        AS2ProtocolSettings: AS2ProtocolSettings,
        AS2MessageConnectionSettings: AS2MessageConnectionSettings,
        AS2AcknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings,
        AS2MdnSettings: AS2MdnSettings,
        AS2SecuritySettings: AS2SecuritySettings,
        AS2ValidationSettings: AS2ValidationSettings,
        AS2EnvelopeSettings: AS2EnvelopeSettings,
        AS2ErrorSettings: AS2ErrorSettings,
        X12AgreementContent: X12AgreementContent,
        X12OneWayAgreement: X12OneWayAgreement,
        X12ProtocolSettings: X12ProtocolSettings,
        X12ValidationSettings: X12ValidationSettings,
        X12FramingSettings: X12FramingSettings,
        X12EnvelopeSettings: X12EnvelopeSettings,
        X12AcknowledgementSettings: X12AcknowledgementSettings,
        X12MessageFilter: X12MessageFilter,
        X12SecuritySettings: X12SecuritySettings,
        X12ProcessingSettings: X12ProcessingSettings,
        X12EnvelopeOverride: X12EnvelopeOverride,
        X12ValidationOverride: X12ValidationOverride,
        X12MessageIdentifier: X12MessageIdentifier,
        X12SchemaReference: X12SchemaReference,
        X12DelimiterOverrides: X12DelimiterOverrides,
        EdifactAgreementContent: EdifactAgreementContent,
        EdifactOneWayAgreement: EdifactOneWayAgreement,
        EdifactProtocolSettings: EdifactProtocolSettings,
        EdifactValidationSettings: EdifactValidationSettings,
        EdifactFramingSettings: EdifactFramingSettings,
        EdifactEnvelopeSettings: EdifactEnvelopeSettings,
        EdifactAcknowledgementSettings: EdifactAcknowledgementSettings,
        EdifactMessageFilter: EdifactMessageFilter,
        EdifactProcessingSettings: EdifactProcessingSettings,
        EdifactEnvelopeOverride: EdifactEnvelopeOverride,
        EdifactMessageIdentifier: EdifactMessageIdentifier,
        EdifactSchemaReference: EdifactSchemaReference,
        EdifactValidationOverride: EdifactValidationOverride,
        EdifactDelimiterOverride: EdifactDelimiterOverride,
        IntegrationAccountCertificate: IntegrationAccountCertificate,
        KeyVaultKeyReference: KeyVaultKeyReference,
        KeyVaultKeyReferenceKeyVault: KeyVaultKeyReferenceKeyVault,
        KeyVaultReference: KeyVaultReference,
        WorkflowRunActionRepetitionDefinition: WorkflowRunActionRepetitionDefinition,
        RunActionCorrelation: RunActionCorrelation,
        RunCorrelation: RunCorrelation,
        RepetitionIndex: RepetitionIndex,
        AssemblyDefinition: AssemblyDefinition,
        AssemblyProperties: AssemblyProperties,
        ArtifactContentPropertiesDefinition: ArtifactContentPropertiesDefinition,
        ArtifactProperties: ArtifactProperties,
        BatchConfigurationProperties: BatchConfigurationProperties,
        BatchReleaseCriteria: BatchReleaseCriteria,
        BatchConfiguration: BatchConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IntegrationAccountSessions. */
    var IntegrationAccountSessions = /** @class */ (function () {
        /**
         * Create a IntegrationAccountSessions.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function IntegrationAccountSessions(client) {
            this.client = client;
        }
        IntegrationAccountSessions.prototype.list = function (resourceGroupName$$1, integrationAccountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                options: options
            }, listOperationSpec$e, callback);
        };
        IntegrationAccountSessions.prototype.get = function (resourceGroupName$$1, integrationAccountName$$1, sessionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                sessionName: sessionName$$1,
                options: options
            }, getOperationSpec$h, callback);
        };
        IntegrationAccountSessions.prototype.createOrUpdate = function (resourceGroupName$$1, integrationAccountName$$1, sessionName$$1, session, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                sessionName: sessionName$$1,
                session: session,
                options: options
            }, createOrUpdateOperationSpec$9, callback);
        };
        IntegrationAccountSessions.prototype.deleteMethod = function (resourceGroupName$$1, integrationAccountName$$1, sessionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                integrationAccountName: integrationAccountName$$1,
                sessionName: sessionName$$1,
                options: options
            }, deleteMethodOperationSpec$9, callback);
        };
        IntegrationAccountSessions.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return IntegrationAccountSessions;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName
        ],
        queryParameters: [
            apiVersion,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountSessionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var getOperationSpec$h = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            sessionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountSession
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var createOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            sessionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "session",
            mapper: __assign({}, IntegrationAccountSession, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IntegrationAccountSession
            },
            201: {
                bodyMapper: IntegrationAccountSession
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var deleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/sessions/{sessionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            integrationAccountName,
            sessionName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IntegrationAccountSessionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse,
        ErrorProperties: ErrorProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {LogicManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$f, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "providers/Microsoft.Logic/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-logic";
    var packageVersion = "1.0.0-preview";
    var LogicManagementClientContext = /** @class */ (function (_super) {
        __extends(LogicManagementClientContext, _super);
        /**
         * Initializes a new instance of the LogicManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id.
         * @param [options] The parameter options
         */
        function LogicManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-07-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return LogicManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var LogicManagementClient = /** @class */ (function (_super) {
        __extends(LogicManagementClient, _super);
        /**
         * Initializes a new instance of the LogicManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription id.
         * @param [options] The parameter options
         */
        function LogicManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.workflows = new Workflows(_this);
            _this.workflowVersions = new WorkflowVersions(_this);
            _this.workflowTriggers = new WorkflowTriggers(_this);
            _this.workflowVersionTriggers = new WorkflowVersionTriggers(_this);
            _this.workflowTriggerHistories = new WorkflowTriggerHistories(_this);
            _this.workflowRuns = new WorkflowRuns(_this);
            _this.workflowRunActions = new WorkflowRunActions(_this);
            _this.workflowRunActionRepetitions = new WorkflowRunActionRepetitions(_this);
            _this.workflowRunActionScopeRepetitions = new WorkflowRunActionScopeRepetitions(_this);
            _this.workflowRunOperations = new WorkflowRunOperations(_this);
            _this.integrationAccounts = new IntegrationAccounts(_this);
            _this.integrationAccountAssemblies = new IntegrationAccountAssemblies(_this);
            _this.integrationAccountBatchConfigurations = new IntegrationAccountBatchConfigurations(_this);
            _this.integrationAccountSchemas = new IntegrationAccountSchemas(_this);
            _this.integrationAccountMaps = new IntegrationAccountMaps(_this);
            _this.integrationAccountPartners = new IntegrationAccountPartners(_this);
            _this.integrationAccountAgreements = new IntegrationAccountAgreements(_this);
            _this.integrationAccountCertificates = new IntegrationAccountCertificates(_this);
            _this.integrationAccountSessions = new IntegrationAccountSessions(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return LogicManagementClient;
    }(LogicManagementClientContext));

    exports.LogicManagementClient = LogicManagementClient;
    exports.LogicManagementClientContext = LogicManagementClientContext;
    exports.LogicManagementModels = index;
    exports.LogicManagementMappers = mappers;
    exports.Workflows = Workflows;
    exports.WorkflowVersions = WorkflowVersions;
    exports.WorkflowTriggers = WorkflowTriggers;
    exports.WorkflowVersionTriggers = WorkflowVersionTriggers;
    exports.WorkflowTriggerHistories = WorkflowTriggerHistories;
    exports.WorkflowRuns = WorkflowRuns;
    exports.WorkflowRunActions = WorkflowRunActions;
    exports.WorkflowRunActionRepetitions = WorkflowRunActionRepetitions;
    exports.WorkflowRunActionScopeRepetitions = WorkflowRunActionScopeRepetitions;
    exports.WorkflowRunOperations = WorkflowRunOperations;
    exports.IntegrationAccounts = IntegrationAccounts;
    exports.IntegrationAccountAssemblies = IntegrationAccountAssemblies;
    exports.IntegrationAccountBatchConfigurations = IntegrationAccountBatchConfigurations;
    exports.IntegrationAccountSchemas = IntegrationAccountSchemas;
    exports.IntegrationAccountMaps = IntegrationAccountMaps;
    exports.IntegrationAccountPartners = IntegrationAccountPartners;
    exports.IntegrationAccountAgreements = IntegrationAccountAgreements;
    exports.IntegrationAccountCertificates = IntegrationAccountCertificates;
    exports.IntegrationAccountSessions = IntegrationAccountSessions;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-logic.js.map
