/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmContainerinstance = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ContainerNetworkProtocol.
     * Possible values include: 'TCP', 'UDP'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerNetworkProtocol =
     * <ContainerNetworkProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerNetworkProtocol;
    (function (ContainerNetworkProtocol) {
        ContainerNetworkProtocol["TCP"] = "TCP";
        ContainerNetworkProtocol["UDP"] = "UDP";
    })(ContainerNetworkProtocol || (ContainerNetworkProtocol = {}));
    /**
     * Defines values for ResourceIdentityType.
     * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     * @readonly
     * @enum {string}
     */
    var ResourceIdentityType;
    (function (ResourceIdentityType) {
        ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
        ResourceIdentityType["UserAssigned"] = "UserAssigned";
        ResourceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
        ResourceIdentityType["None"] = "None";
    })(ResourceIdentityType || (ResourceIdentityType = {}));
    /**
     * Defines values for ContainerGroupRestartPolicy.
     * Possible values include: 'Always', 'OnFailure', 'Never'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerGroupRestartPolicy =
     * <ContainerGroupRestartPolicy>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerGroupRestartPolicy;
    (function (ContainerGroupRestartPolicy) {
        ContainerGroupRestartPolicy["Always"] = "Always";
        ContainerGroupRestartPolicy["OnFailure"] = "OnFailure";
        ContainerGroupRestartPolicy["Never"] = "Never";
    })(ContainerGroupRestartPolicy || (ContainerGroupRestartPolicy = {}));
    /**
     * Defines values for ContainerGroupNetworkProtocol.
     * Possible values include: 'TCP', 'UDP'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerGroupNetworkProtocol =
     * <ContainerGroupNetworkProtocol>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerGroupNetworkProtocol;
    (function (ContainerGroupNetworkProtocol) {
        ContainerGroupNetworkProtocol["TCP"] = "TCP";
        ContainerGroupNetworkProtocol["UDP"] = "UDP";
    })(ContainerGroupNetworkProtocol || (ContainerGroupNetworkProtocol = {}));
    /**
     * Defines values for ContainerGroupIpAddressType.
     * Possible values include: 'Public', 'Private'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerGroupIpAddressType =
     * <ContainerGroupIpAddressType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerGroupIpAddressType;
    (function (ContainerGroupIpAddressType) {
        ContainerGroupIpAddressType["Public"] = "Public";
        ContainerGroupIpAddressType["Private"] = "Private";
    })(ContainerGroupIpAddressType || (ContainerGroupIpAddressType = {}));
    /**
     * Defines values for OperatingSystemTypes.
     * Possible values include: 'Windows', 'Linux'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperatingSystemTypes =
     * <OperatingSystemTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperatingSystemTypes;
    (function (OperatingSystemTypes) {
        OperatingSystemTypes["Windows"] = "Windows";
        OperatingSystemTypes["Linux"] = "Linux";
    })(OperatingSystemTypes || (OperatingSystemTypes = {}));
    /**
     * Defines values for LogAnalyticsLogType.
     * Possible values include: 'ContainerInsights', 'ContainerInstanceLogs'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: LogAnalyticsLogType =
     * <LogAnalyticsLogType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var LogAnalyticsLogType;
    (function (LogAnalyticsLogType) {
        LogAnalyticsLogType["ContainerInsights"] = "ContainerInsights";
        LogAnalyticsLogType["ContainerInstanceLogs"] = "ContainerInstanceLogs";
    })(LogAnalyticsLogType || (LogAnalyticsLogType = {}));
    /**
     * Defines values for ContainerInstanceOperationsOrigin.
     * Possible values include: 'User', 'System'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerInstanceOperationsOrigin =
     * <ContainerInstanceOperationsOrigin>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerInstanceOperationsOrigin;
    (function (ContainerInstanceOperationsOrigin) {
        ContainerInstanceOperationsOrigin["User"] = "User";
        ContainerInstanceOperationsOrigin["System"] = "System";
    })(ContainerInstanceOperationsOrigin || (ContainerInstanceOperationsOrigin = {}));
    /**
     * Defines values for Scheme.
     * Possible values include: 'http', 'https'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Scheme = <Scheme>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Scheme;
    (function (Scheme) {
        Scheme["Http"] = "http";
        Scheme["Https"] = "https";
    })(Scheme || (Scheme = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ContainerNetworkProtocol () { return ContainerNetworkProtocol; },
        get ResourceIdentityType () { return ResourceIdentityType; },
        get ContainerGroupRestartPolicy () { return ContainerGroupRestartPolicy; },
        get ContainerGroupNetworkProtocol () { return ContainerGroupNetworkProtocol; },
        get ContainerGroupIpAddressType () { return ContainerGroupIpAddressType; },
        get OperatingSystemTypes () { return OperatingSystemTypes; },
        get LogAnalyticsLogType () { return LogAnalyticsLogType; },
        get ContainerInstanceOperationsOrigin () { return ContainerInstanceOperationsOrigin; },
        get Scheme () { return Scheme; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ContainerPort = {
        serializedName: "ContainerPort",
        type: {
            name: "Composite",
            className: "ContainerPort",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EnvironmentVariable = {
        serializedName: "EnvironmentVariable",
        type: {
            name: "Composite",
            className: "EnvironmentVariable",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                secureValue: {
                    serializedName: "secureValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerState = {
        serializedName: "ContainerState",
        type: {
            name: "Composite",
            className: "ContainerState",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "Number"
                    }
                },
                finishTime: {
                    serializedName: "finishTime",
                    type: {
                        name: "DateTime"
                    }
                },
                detailStatus: {
                    serializedName: "detailStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Event = {
        serializedName: "Event",
        type: {
            name: "Composite",
            className: "Event",
            modelProperties: {
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                firstTimestamp: {
                    serializedName: "firstTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                lastTimestamp: {
                    serializedName: "lastTimestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerPropertiesInstanceView = {
        serializedName: "ContainerProperties_instanceView",
        type: {
            name: "Composite",
            className: "ContainerPropertiesInstanceView",
            modelProperties: {
                restartCount: {
                    readOnly: true,
                    serializedName: "restartCount",
                    type: {
                        name: "Number"
                    }
                },
                currentState: {
                    readOnly: true,
                    serializedName: "currentState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                previousState: {
                    readOnly: true,
                    serializedName: "previousState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                events: {
                    readOnly: true,
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceRequests = {
        serializedName: "ResourceRequests",
        type: {
            name: "Composite",
            className: "ResourceRequests",
            modelProperties: {
                memoryInGB: {
                    required: true,
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    required: true,
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceLimits = {
        serializedName: "ResourceLimits",
        type: {
            name: "Composite",
            className: "ResourceLimits",
            modelProperties: {
                memoryInGB: {
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceRequirements = {
        serializedName: "ResourceRequirements",
        type: {
            name: "Composite",
            className: "ResourceRequirements",
            modelProperties: {
                requests: {
                    required: true,
                    serializedName: "requests",
                    type: {
                        name: "Composite",
                        className: "ResourceRequests"
                    }
                },
                limits: {
                    serializedName: "limits",
                    type: {
                        name: "Composite",
                        className: "ResourceLimits"
                    }
                }
            }
        }
    };
    var VolumeMount = {
        serializedName: "VolumeMount",
        type: {
            name: "Composite",
            className: "VolumeMount",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                mountPath: {
                    required: true,
                    serializedName: "mountPath",
                    type: {
                        name: "String"
                    }
                },
                readOnly: {
                    serializedName: "readOnly",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ContainerExec = {
        serializedName: "ContainerExec",
        type: {
            name: "Composite",
            className: "ContainerExec",
            modelProperties: {
                command: {
                    serializedName: "command",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerHttpGet = {
        serializedName: "ContainerHttpGet",
        type: {
            name: "Composite",
            className: "ContainerHttpGet",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                scheme: {
                    serializedName: "scheme",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerProbe = {
        serializedName: "ContainerProbe",
        type: {
            name: "Composite",
            className: "ContainerProbe",
            modelProperties: {
                exec: {
                    serializedName: "exec",
                    type: {
                        name: "Composite",
                        className: "ContainerExec"
                    }
                },
                httpGet: {
                    serializedName: "httpGet",
                    type: {
                        name: "Composite",
                        className: "ContainerHttpGet"
                    }
                },
                initialDelaySeconds: {
                    serializedName: "initialDelaySeconds",
                    type: {
                        name: "Number"
                    }
                },
                periodSeconds: {
                    serializedName: "periodSeconds",
                    type: {
                        name: "Number"
                    }
                },
                failureThreshold: {
                    serializedName: "failureThreshold",
                    type: {
                        name: "Number"
                    }
                },
                successThreshold: {
                    serializedName: "successThreshold",
                    type: {
                        name: "Number"
                    }
                },
                timeoutSeconds: {
                    serializedName: "timeoutSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Container = {
        serializedName: "Container",
        type: {
            name: "Composite",
            className: "Container",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    required: true,
                    serializedName: "properties.image",
                    type: {
                        name: "String"
                    }
                },
                command: {
                    serializedName: "properties.command",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                ports: {
                    serializedName: "properties.ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerPort"
                            }
                        }
                    }
                },
                environmentVariables: {
                    serializedName: "properties.environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "ContainerPropertiesInstanceView"
                    }
                },
                resources: {
                    required: true,
                    serializedName: "properties.resources",
                    type: {
                        name: "Composite",
                        className: "ResourceRequirements"
                    }
                },
                volumeMounts: {
                    serializedName: "properties.volumeMounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeMount"
                            }
                        }
                    }
                },
                livenessProbe: {
                    serializedName: "properties.livenessProbe",
                    type: {
                        name: "Composite",
                        className: "ContainerProbe"
                    }
                },
                readinessProbe: {
                    serializedName: "properties.readinessProbe",
                    type: {
                        name: "Composite",
                        className: "ContainerProbe"
                    }
                }
            }
        }
    };
    var AzureFileVolume = {
        serializedName: "AzureFileVolume",
        type: {
            name: "Composite",
            className: "AzureFileVolume",
            modelProperties: {
                shareName: {
                    required: true,
                    serializedName: "shareName",
                    type: {
                        name: "String"
                    }
                },
                readOnly: {
                    serializedName: "readOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                storageAccountName: {
                    required: true,
                    serializedName: "storageAccountName",
                    type: {
                        name: "String"
                    }
                },
                storageAccountKey: {
                    serializedName: "storageAccountKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GitRepoVolume = {
        serializedName: "GitRepoVolume",
        type: {
            name: "Composite",
            className: "GitRepoVolume",
            modelProperties: {
                directory: {
                    serializedName: "directory",
                    type: {
                        name: "String"
                    }
                },
                repository: {
                    required: true,
                    serializedName: "repository",
                    type: {
                        name: "String"
                    }
                },
                revision: {
                    serializedName: "revision",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Volume = {
        serializedName: "Volume",
        type: {
            name: "Composite",
            className: "Volume",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                azureFile: {
                    serializedName: "azureFile",
                    type: {
                        name: "Composite",
                        className: "AzureFileVolume"
                    }
                },
                emptyDir: {
                    serializedName: "emptyDir",
                    type: {
                        name: "Object"
                    }
                },
                secret: {
                    serializedName: "secret",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                gitRepo: {
                    serializedName: "gitRepo",
                    type: {
                        name: "Composite",
                        className: "GitRepoVolume"
                    }
                }
            }
        }
    };
    var ContainerGroupIdentityUserAssignedIdentitiesValue = {
        serializedName: "ContainerGroupIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "ContainerGroupIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerGroupIdentity = {
        serializedName: "ContainerGroupIdentity",
        type: {
            name: "Composite",
            className: "ContainerGroupIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "ContainerGroupIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageRegistryCredential = {
        serializedName: "ImageRegistryCredential",
        type: {
            name: "Composite",
            className: "ImageRegistryCredential",
            modelProperties: {
                server: {
                    required: true,
                    serializedName: "server",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Port = {
        serializedName: "Port",
        type: {
            name: "Composite",
            className: "Port",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IpAddress = {
        serializedName: "IpAddress",
        type: {
            name: "Composite",
            className: "IpAddress",
            modelProperties: {
                ports: {
                    required: true,
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Port"
                            }
                        }
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                ip: {
                    serializedName: "ip",
                    type: {
                        name: "String"
                    }
                },
                dnsNameLabel: {
                    serializedName: "dnsNameLabel",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerGroupPropertiesInstanceView = {
        serializedName: "ContainerGroup_properties_instanceView",
        type: {
            name: "Composite",
            className: "ContainerGroupPropertiesInstanceView",
            modelProperties: {
                events: {
                    readOnly: true,
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Event"
                            }
                        }
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogAnalytics = {
        serializedName: "LogAnalytics",
        type: {
            name: "Composite",
            className: "LogAnalytics",
            modelProperties: {
                workspaceId: {
                    required: true,
                    serializedName: "workspaceId",
                    type: {
                        name: "String"
                    }
                },
                workspaceKey: {
                    required: true,
                    serializedName: "workspaceKey",
                    type: {
                        name: "String"
                    }
                },
                logType: {
                    serializedName: "logType",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerGroupDiagnostics = {
        serializedName: "ContainerGroupDiagnostics",
        type: {
            name: "Composite",
            className: "ContainerGroupDiagnostics",
            modelProperties: {
                logAnalytics: {
                    serializedName: "logAnalytics",
                    type: {
                        name: "Composite",
                        className: "LogAnalytics"
                    }
                }
            }
        }
    };
    var ContainerGroupNetworkProfile = {
        serializedName: "ContainerGroupNetworkProfile",
        type: {
            name: "Composite",
            className: "ContainerGroupNetworkProfile",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerGroup = {
        serializedName: "ContainerGroup",
        type: {
            name: "Composite",
            className: "ContainerGroup",
            modelProperties: __assign({}, Resource.type.modelProperties, { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupIdentity"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, containers: {
                    required: true,
                    serializedName: "properties.containers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Container"
                            }
                        }
                    }
                }, imageRegistryCredentials: {
                    serializedName: "properties.imageRegistryCredentials",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegistryCredential"
                            }
                        }
                    }
                }, restartPolicy: {
                    serializedName: "properties.restartPolicy",
                    type: {
                        name: "String"
                    }
                }, ipAddress: {
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "Composite",
                        className: "IpAddress"
                    }
                }, osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, volumes: {
                    serializedName: "properties.volumes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Volume"
                            }
                        }
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupPropertiesInstanceView"
                    }
                }, diagnostics: {
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupDiagnostics"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerGroupNetworkProfile"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    required: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageName = {
        serializedName: "Usage_name",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var UsageListResult = {
        serializedName: "UsageListResult",
        type: {
            name: "Composite",
            className: "UsageListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var Logs = {
        serializedName: "Logs",
        type: {
            name: "Composite",
            className: "Logs",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerExecRequestTerminalSize = {
        serializedName: "ContainerExecRequest_terminalSize",
        type: {
            name: "Composite",
            className: "ContainerExecRequestTerminalSize",
            modelProperties: {
                rows: {
                    serializedName: "rows",
                    type: {
                        name: "Number"
                    }
                },
                cols: {
                    serializedName: "cols",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContainerExecRequest = {
        serializedName: "ContainerExecRequest",
        type: {
            name: "Composite",
            className: "ContainerExecRequest",
            modelProperties: {
                command: {
                    serializedName: "command",
                    type: {
                        name: "String"
                    }
                },
                terminalSize: {
                    serializedName: "terminalSize",
                    type: {
                        name: "Composite",
                        className: "ContainerExecRequestTerminalSize"
                    }
                }
            }
        }
    };
    var ContainerExecResponse = {
        serializedName: "ContainerExecResponse",
        type: {
            name: "Composite",
            className: "ContainerExecResponse",
            modelProperties: {
                webSocketUri: {
                    serializedName: "webSocketUri",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerGroupListResult = {
        serializedName: "ContainerGroupListResult",
        type: {
            name: "Composite",
            className: "ContainerGroupListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ContainerPort: ContainerPort,
        EnvironmentVariable: EnvironmentVariable,
        ContainerState: ContainerState,
        Event: Event,
        ContainerPropertiesInstanceView: ContainerPropertiesInstanceView,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ResourceRequirements: ResourceRequirements,
        VolumeMount: VolumeMount,
        ContainerExec: ContainerExec,
        ContainerHttpGet: ContainerHttpGet,
        ContainerProbe: ContainerProbe,
        Container: Container,
        AzureFileVolume: AzureFileVolume,
        GitRepoVolume: GitRepoVolume,
        Volume: Volume,
        ContainerGroupIdentityUserAssignedIdentitiesValue: ContainerGroupIdentityUserAssignedIdentitiesValue,
        ContainerGroupIdentity: ContainerGroupIdentity,
        ImageRegistryCredential: ImageRegistryCredential,
        Port: Port,
        IpAddress: IpAddress,
        ContainerGroupPropertiesInstanceView: ContainerGroupPropertiesInstanceView,
        LogAnalytics: LogAnalytics,
        ContainerGroupDiagnostics: ContainerGroupDiagnostics,
        ContainerGroupNetworkProfile: ContainerGroupNetworkProfile,
        Resource: Resource,
        ContainerGroup: ContainerGroup,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        UsageName: UsageName,
        Usage: Usage,
        UsageListResult: UsageListResult,
        Logs: Logs,
        ContainerExecRequestTerminalSize: ContainerExecRequestTerminalSize,
        ContainerExecRequest: ContainerExecRequest,
        ContainerExecResponse: ContainerExecResponse,
        ContainerGroupListResult: ContainerGroupListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ContainerGroupListResult: ContainerGroupListResult,
        ContainerGroup: ContainerGroup,
        Resource: Resource,
        BaseResource: BaseResource,
        ContainerGroupIdentity: ContainerGroupIdentity,
        ContainerGroupIdentityUserAssignedIdentitiesValue: ContainerGroupIdentityUserAssignedIdentitiesValue,
        Container: Container,
        ContainerPort: ContainerPort,
        EnvironmentVariable: EnvironmentVariable,
        ContainerPropertiesInstanceView: ContainerPropertiesInstanceView,
        ContainerState: ContainerState,
        Event: Event,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeMount: VolumeMount,
        ContainerProbe: ContainerProbe,
        ContainerExec: ContainerExec,
        ContainerHttpGet: ContainerHttpGet,
        ImageRegistryCredential: ImageRegistryCredential,
        IpAddress: IpAddress,
        Port: Port,
        Volume: Volume,
        AzureFileVolume: AzureFileVolume,
        GitRepoVolume: GitRepoVolume,
        ContainerGroupPropertiesInstanceView: ContainerGroupPropertiesInstanceView,
        ContainerGroupDiagnostics: ContainerGroupDiagnostics,
        LogAnalytics: LogAnalytics,
        ContainerGroupNetworkProfile: ContainerGroupNetworkProfile,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var containerGroupName = {
        parameterPath: "containerGroupName",
        mapper: {
            required: true,
            serializedName: "containerGroupName",
            type: {
                name: "String"
            }
        }
    };
    var containerName = {
        parameterPath: "containerName",
        mapper: {
            required: true,
            serializedName: "containerName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subnetName = {
        parameterPath: "subnetName",
        mapper: {
            required: true,
            serializedName: "subnetName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tail = {
        parameterPath: [
            "options",
            "tail"
        ],
        mapper: {
            serializedName: "tail",
            type: {
                name: "Number"
            }
        }
    };
    var virtualNetworkName = {
        parameterPath: "virtualNetworkName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerGroups. */
    var ContainerGroups = /** @class */ (function () {
        /**
         * Create a ContainerGroups.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function ContainerGroups(client) {
            this.client = client;
        }
        ContainerGroups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        ContainerGroups.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        ContainerGroups.prototype.get = function (resourceGroupName$$1, containerGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create or update container groups with specified configurations.
         * @summary Create or update container groups.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param containerGroup The properties of the container group to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<Models.ContainerGroupsCreateOrUpdateResponse>
         */
        ContainerGroups.prototype.createOrUpdate = function (resourceGroupName$$1, containerGroupName$$1, containerGroup, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, containerGroupName$$1, containerGroup, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerGroups.prototype.update = function (resourceGroupName$$1, containerGroupName$$1, resource, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                resource: resource,
                options: options
            }, updateOperationSpec, callback);
        };
        ContainerGroups.prototype.deleteMethod = function (resourceGroupName$$1, containerGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        /**
         * Restarts all containers in a container group in place. If container image has updates, new image
         * will be downloaded.
         * @summary Restarts all containers in a container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ContainerGroups.prototype.restart = function (resourceGroupName$$1, containerGroupName$$1, options) {
            return this.beginRestart(resourceGroupName$$1, containerGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerGroups.prototype.stop = function (resourceGroupName$$1, containerGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                options: options
            }, stopOperationSpec, callback);
        };
        /**
         * Create or update container groups with specified configurations.
         * @summary Create or update container groups.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param containerGroup The properties of the container group to be created or updated.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerGroups.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, containerGroupName$$1, containerGroup, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                containerGroup: containerGroup,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Restarts all containers in a container group in place. If container image has updates, new image
         * will be downloaded.
         * @summary Restarts all containers in a container group.
         * @param resourceGroupName The name of the resource group.
         * @param containerGroupName The name of the container group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerGroups.prototype.beginRestart = function (resourceGroupName$$1, containerGroupName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                options: options
            }, beginRestartOperationSpec, options);
        };
        ContainerGroups.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        ContainerGroups.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return ContainerGroups;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resource",
            mapper: __assign({}, Resource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var stopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "containerGroup",
            mapper: __assign({}, ContainerGroup, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerGroup
            },
            201: {
                bodyMapper: ContainerGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.ContainerInstance/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        UsageListResult: UsageListResult,
        Usage: Usage,
        UsageName: UsageName,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerGroupUsage. */
    var ContainerGroupUsage = /** @class */ (function () {
        /**
         * Create a ContainerGroupUsage.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function ContainerGroupUsage(client) {
            this.client = client;
        }
        ContainerGroupUsage.prototype.list = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        return ContainerGroupUsage;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        Logs: Logs,
        CloudError: CloudError,
        ContainerExecRequest: ContainerExecRequest,
        ContainerExecRequestTerminalSize: ContainerExecRequestTerminalSize,
        ContainerExecResponse: ContainerExecResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerOperations. */
    var ContainerOperations = /** @class */ (function () {
        /**
         * Create a ContainerOperations.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function ContainerOperations(client) {
            this.client = client;
        }
        ContainerOperations.prototype.listLogs = function (resourceGroupName$$1, containerGroupName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                containerName: containerName$$1,
                options: options
            }, listLogsOperationSpec, callback);
        };
        ContainerOperations.prototype.executeCommand = function (resourceGroupName$$1, containerGroupName$$1, containerName$$1, containerExecRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerGroupName: containerGroupName$$1,
                containerName: containerName$$1,
                containerExecRequest: containerExecRequest,
                options: options
            }, executeCommandOperationSpec, callback);
        };
        return ContainerOperations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listLogsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/logs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName,
            containerName
        ],
        queryParameters: [
            apiVersion,
            tail
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Logs
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var executeCommandOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/exec",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            containerGroupName,
            containerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "containerExecRequest",
            mapper: __assign({}, ContainerExecRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerExecResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceAssociationLink. */
    var ServiceAssociationLink = /** @class */ (function () {
        /**
         * Create a ServiceAssociationLink.
         * @param {ContainerInstanceManagementClientContext} client Reference to the service client.
         */
        function ServiceAssociationLink(client) {
            this.client = client;
        }
        ServiceAssociationLink.prototype.deleteMethod = function (resourceGroupName$$1, virtualNetworkName$$1, subnetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualNetworkName: virtualNetworkName$$1,
                subnetName: subnetName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        return ServiceAssociationLink;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}/providers/Microsoft.ContainerInstance/serviceAssociationLinks/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            virtualNetworkName,
            subnetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-containerinstance";
    var packageVersion = "1.0.0";
    var ContainerInstanceManagementClientContext = /** @class */ (function (_super) {
        __extends(ContainerInstanceManagementClientContext, _super);
        /**
         * Initializes a new instance of the ContainerInstanceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerInstanceManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-10-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ContainerInstanceManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ContainerInstanceManagementClient = /** @class */ (function (_super) {
        __extends(ContainerInstanceManagementClient, _super);
        /**
         * Initializes a new instance of the ContainerInstanceManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ContainerInstanceManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.containerGroups = new ContainerGroups(_this);
            _this.operations = new Operations(_this);
            _this.containerGroupUsage = new ContainerGroupUsage(_this);
            _this.container = new ContainerOperations(_this);
            _this.serviceAssociationLink = new ServiceAssociationLink(_this);
            return _this;
        }
        return ContainerInstanceManagementClient;
    }(ContainerInstanceManagementClientContext));

    exports.ContainerInstanceManagementClient = ContainerInstanceManagementClient;
    exports.ContainerInstanceManagementClientContext = ContainerInstanceManagementClientContext;
    exports.ContainerInstanceManagementModels = index;
    exports.ContainerInstanceManagementMappers = mappers;
    exports.ContainerGroups = ContainerGroups;
    exports.Operations = Operations;
    exports.ContainerGroupUsage = ContainerGroupUsage;
    exports.ContainerOperations = ContainerOperations;
    exports.ServiceAssociationLink = ServiceAssociationLink;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-containerinstance.js.map
