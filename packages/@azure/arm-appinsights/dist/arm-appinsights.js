/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmAppinsights = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for ApplicationType.
     * Possible values include: 'web', 'other'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ApplicationType =
     * <ApplicationType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ApplicationType;
    (function (ApplicationType) {
        ApplicationType["Web"] = "web";
        ApplicationType["Other"] = "other";
    })(ApplicationType || (ApplicationType = {}));
    /**
     * Defines values for FlowType.
     * Possible values include: 'Bluefield'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FlowType = <FlowType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FlowType;
    (function (FlowType) {
        FlowType["Bluefield"] = "Bluefield";
    })(FlowType || (FlowType = {}));
    /**
     * Defines values for RequestSource.
     * Possible values include: 'rest'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RequestSource =
     * <RequestSource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RequestSource;
    (function (RequestSource) {
        RequestSource["Rest"] = "rest";
    })(RequestSource || (RequestSource = {}));
    /**
     * Defines values for PurgeState.
     * Possible values include: 'pending', 'completed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PurgeState = <PurgeState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PurgeState;
    (function (PurgeState) {
        PurgeState["Pending"] = "pending";
        PurgeState["Completed"] = "completed";
    })(PurgeState || (PurgeState = {}));
    /**
     * Defines values for FavoriteType.
     * Possible values include: 'shared', 'user'
     * @readonly
     * @enum {string}
     */
    var FavoriteType;
    (function (FavoriteType) {
        FavoriteType["Shared"] = "shared";
        FavoriteType["User"] = "user";
    })(FavoriteType || (FavoriteType = {}));
    /**
     * Defines values for WebTestKind.
     * Possible values include: 'ping', 'multistep'
     * @readonly
     * @enum {string}
     */
    var WebTestKind;
    (function (WebTestKind) {
        WebTestKind["Ping"] = "ping";
        WebTestKind["Multistep"] = "multistep";
    })(WebTestKind || (WebTestKind = {}));
    /**
     * Defines values for ItemScope.
     * Possible values include: 'shared', 'user'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ItemScope = <ItemScope>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ItemScope;
    (function (ItemScope) {
        ItemScope["Shared"] = "shared";
        ItemScope["User"] = "user";
    })(ItemScope || (ItemScope = {}));
    /**
     * Defines values for ItemType.
     * Possible values include: 'query', 'function', 'folder', 'recent'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ItemType = <ItemType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ItemType;
    (function (ItemType) {
        ItemType["Query"] = "query";
        ItemType["Function"] = "function";
        ItemType["Folder"] = "folder";
        ItemType["Recent"] = "recent";
    })(ItemType || (ItemType = {}));
    /**
     * Defines values for SharedTypeKind.
     * Possible values include: 'user', 'shared'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SharedTypeKind =
     * <SharedTypeKind>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SharedTypeKind;
    (function (SharedTypeKind) {
        SharedTypeKind["User"] = "user";
        SharedTypeKind["Shared"] = "shared";
    })(SharedTypeKind || (SharedTypeKind = {}));
    /**
     * Defines values for FavoriteSourceType.
     * Possible values include: 'retention', 'notebook', 'sessions', 'events',
     * 'userflows', 'funnel', 'impact', 'segmentation'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FavoriteSourceType =
     * <FavoriteSourceType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FavoriteSourceType;
    (function (FavoriteSourceType) {
        FavoriteSourceType["Retention"] = "retention";
        FavoriteSourceType["Notebook"] = "notebook";
        FavoriteSourceType["Sessions"] = "sessions";
        FavoriteSourceType["Events"] = "events";
        FavoriteSourceType["Userflows"] = "userflows";
        FavoriteSourceType["Funnel"] = "funnel";
        FavoriteSourceType["Impact"] = "impact";
        FavoriteSourceType["Segmentation"] = "segmentation";
    })(FavoriteSourceType || (FavoriteSourceType = {}));
    /**
     * Defines values for ItemScopePath.
     * Possible values include: 'analyticsItems', 'myanalyticsItems'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ItemScopePath =
     * <ItemScopePath>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ItemScopePath;
    (function (ItemScopePath) {
        ItemScopePath["AnalyticsItems"] = "analyticsItems";
        ItemScopePath["MyanalyticsItems"] = "myanalyticsItems";
    })(ItemScopePath || (ItemScopePath = {}));
    /**
     * Defines values for ItemTypeParameter.
     * Possible values include: 'none', 'query', 'function', 'folder', 'recent'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ItemTypeParameter =
     * <ItemTypeParameter>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ItemTypeParameter;
    (function (ItemTypeParameter) {
        ItemTypeParameter["None"] = "none";
        ItemTypeParameter["Query"] = "query";
        ItemTypeParameter["Function"] = "function";
        ItemTypeParameter["Folder"] = "folder";
        ItemTypeParameter["Recent"] = "recent";
    })(ItemTypeParameter || (ItemTypeParameter = {}));
    /**
     * Defines values for CategoryType.
     * Possible values include: 'workbook', 'TSG', 'performance', 'retention'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CategoryType =
     * <CategoryType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CategoryType;
    (function (CategoryType) {
        CategoryType["Workbook"] = "workbook";
        CategoryType["TSG"] = "TSG";
        CategoryType["Performance"] = "performance";
        CategoryType["Retention"] = "retention";
    })(CategoryType || (CategoryType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get ApplicationType () { return ApplicationType; },
        get FlowType () { return FlowType; },
        get RequestSource () { return RequestSource; },
        get PurgeState () { return PurgeState; },
        get FavoriteType () { return FavoriteType; },
        get WebTestKind () { return WebTestKind; },
        get ItemScope () { return ItemScope; },
        get ItemType () { return ItemType; },
        get SharedTypeKind () { return SharedTypeKind; },
        get FavoriteSourceType () { return FavoriteSourceType; },
        get ItemScopePath () { return ItemScopePath; },
        get ItemTypeParameter () { return ItemTypeParameter; },
        get CategoryType () { return CategoryType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var Annotation = {
        serializedName: "Annotation",
        type: {
            name: "Composite",
            className: "Annotation",
            modelProperties: {
                annotationName: {
                    serializedName: "AnnotationName",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "Category",
                    type: {
                        name: "String"
                    }
                },
                eventTime: {
                    serializedName: "EventTime",
                    type: {
                        name: "DateTime"
                    }
                },
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "Properties",
                    type: {
                        name: "String"
                    }
                },
                relatedAnnotation: {
                    serializedName: "RelatedAnnotation",
                    defaultValue: 'null',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InnerError = {
        serializedName: "InnerError",
        type: {
            name: "Composite",
            className: "InnerError",
            modelProperties: {
                diagnosticcontext: {
                    serializedName: "diagnosticcontext",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AnnotationError = {
        serializedName: "AnnotationError",
        type: {
            name: "Composite",
            className: "AnnotationError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                }
            }
        }
    };
    var APIKeyRequest = {
        serializedName: "APIKeyRequest",
        type: {
            name: "Composite",
            className: "APIKeyRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                linkedReadProperties: {
                    serializedName: "linkedReadProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                linkedWriteProperties: {
                    serializedName: "linkedWriteProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAPIKey = {
        serializedName: "ApplicationInsightsComponentAPIKey",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAPIKey",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                apiKey: {
                    readOnly: true,
                    serializedName: "apiKey",
                    type: {
                        name: "String"
                    }
                },
                createdDate: {
                    serializedName: "createdDate",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                linkedReadProperties: {
                    serializedName: "linkedReadProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                linkedWriteProperties: {
                    serializedName: "linkedWriteProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentExportRequest = {
        serializedName: "ApplicationInsightsComponentExportRequest",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentExportRequest",
            modelProperties: {
                recordTypes: {
                    serializedName: "RecordTypes",
                    type: {
                        name: "String"
                    }
                },
                destinationType: {
                    serializedName: "DestinationType",
                    type: {
                        name: "String"
                    }
                },
                destinationAddress: {
                    serializedName: "DestinationAddress",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    serializedName: "IsEnabled",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueEnabled: {
                    serializedName: "NotificationQueueEnabled",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueUri: {
                    serializedName: "NotificationQueueUri",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageSubscriptionId: {
                    serializedName: "DestinationStorageSubscriptionId",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageLocationId: {
                    serializedName: "DestinationStorageLocationId",
                    type: {
                        name: "String"
                    }
                },
                destinationAccountId: {
                    serializedName: "DestinationAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentExportConfiguration = {
        serializedName: "ApplicationInsightsComponentExportConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentExportConfiguration",
            modelProperties: {
                exportId: {
                    readOnly: true,
                    serializedName: "ExportId",
                    type: {
                        name: "String"
                    }
                },
                instrumentationKey: {
                    readOnly: true,
                    serializedName: "InstrumentationKey",
                    type: {
                        name: "String"
                    }
                },
                recordTypes: {
                    serializedName: "RecordTypes",
                    type: {
                        name: "String"
                    }
                },
                applicationName: {
                    readOnly: true,
                    serializedName: "ApplicationName",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "SubscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    readOnly: true,
                    serializedName: "ResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageSubscriptionId: {
                    readOnly: true,
                    serializedName: "DestinationStorageSubscriptionId",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageLocationId: {
                    readOnly: true,
                    serializedName: "DestinationStorageLocationId",
                    type: {
                        name: "String"
                    }
                },
                destinationAccountId: {
                    readOnly: true,
                    serializedName: "DestinationAccountId",
                    type: {
                        name: "String"
                    }
                },
                destinationType: {
                    readOnly: true,
                    serializedName: "DestinationType",
                    type: {
                        name: "String"
                    }
                },
                isUserEnabled: {
                    readOnly: true,
                    serializedName: "IsUserEnabled",
                    type: {
                        name: "String"
                    }
                },
                lastUserUpdate: {
                    readOnly: true,
                    serializedName: "LastUserUpdate",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueEnabled: {
                    serializedName: "NotificationQueueEnabled",
                    type: {
                        name: "String"
                    }
                },
                exportStatus: {
                    readOnly: true,
                    serializedName: "ExportStatus",
                    type: {
                        name: "String"
                    }
                },
                lastSuccessTime: {
                    readOnly: true,
                    serializedName: "LastSuccessTime",
                    type: {
                        name: "String"
                    }
                },
                lastGapTime: {
                    readOnly: true,
                    serializedName: "LastGapTime",
                    type: {
                        name: "String"
                    }
                },
                permanentErrorReason: {
                    readOnly: true,
                    serializedName: "PermanentErrorReason",
                    type: {
                        name: "String"
                    }
                },
                storageName: {
                    readOnly: true,
                    serializedName: "StorageName",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    readOnly: true,
                    serializedName: "ContainerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentDataVolumeCap = {
        serializedName: "ApplicationInsightsComponentDataVolumeCap",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentDataVolumeCap",
            modelProperties: {
                cap: {
                    serializedName: "Cap",
                    type: {
                        name: "Number"
                    }
                },
                resetTime: {
                    readOnly: true,
                    serializedName: "ResetTime",
                    type: {
                        name: "Number"
                    }
                },
                warningThreshold: {
                    serializedName: "WarningThreshold",
                    type: {
                        name: "Number"
                    }
                },
                stopSendNotificationWhenHitThreshold: {
                    serializedName: "StopSendNotificationWhenHitThreshold",
                    type: {
                        name: "Boolean"
                    }
                },
                stopSendNotificationWhenHitCap: {
                    serializedName: "StopSendNotificationWhenHitCap",
                    type: {
                        name: "Boolean"
                    }
                },
                maxHistoryCap: {
                    readOnly: true,
                    serializedName: "MaxHistoryCap",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentBillingFeatures = {
        serializedName: "ApplicationInsightsComponentBillingFeatures",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentBillingFeatures",
            modelProperties: {
                dataVolumeCap: {
                    serializedName: "DataVolumeCap",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsComponentDataVolumeCap"
                    }
                },
                currentBillingFeatures: {
                    serializedName: "CurrentBillingFeatures",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentQuotaStatus = {
        serializedName: "ApplicationInsightsComponentQuotaStatus",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentQuotaStatus",
            modelProperties: {
                appId: {
                    readOnly: true,
                    serializedName: "AppId",
                    type: {
                        name: "String"
                    }
                },
                shouldBeThrottled: {
                    readOnly: true,
                    serializedName: "ShouldBeThrottled",
                    type: {
                        name: "Boolean"
                    }
                },
                expirationTime: {
                    readOnly: true,
                    serializedName: "ExpirationTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFeatureCapabilities = {
        serializedName: "ApplicationInsightsComponentFeatureCapabilities",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFeatureCapabilities",
            modelProperties: {
                supportExportData: {
                    readOnly: true,
                    serializedName: "SupportExportData",
                    type: {
                        name: "Boolean"
                    }
                },
                burstThrottlePolicy: {
                    readOnly: true,
                    serializedName: "BurstThrottlePolicy",
                    type: {
                        name: "String"
                    }
                },
                metadataClass: {
                    readOnly: true,
                    serializedName: "MetadataClass",
                    type: {
                        name: "String"
                    }
                },
                liveStreamMetrics: {
                    readOnly: true,
                    serializedName: "LiveStreamMetrics",
                    type: {
                        name: "Boolean"
                    }
                },
                applicationMap: {
                    readOnly: true,
                    serializedName: "ApplicationMap",
                    type: {
                        name: "Boolean"
                    }
                },
                workItemIntegration: {
                    readOnly: true,
                    serializedName: "WorkItemIntegration",
                    type: {
                        name: "Boolean"
                    }
                },
                powerBIIntegration: {
                    readOnly: true,
                    serializedName: "PowerBIIntegration",
                    type: {
                        name: "Boolean"
                    }
                },
                openSchema: {
                    readOnly: true,
                    serializedName: "OpenSchema",
                    type: {
                        name: "Boolean"
                    }
                },
                proactiveDetection: {
                    readOnly: true,
                    serializedName: "ProactiveDetection",
                    type: {
                        name: "Boolean"
                    }
                },
                analyticsIntegration: {
                    readOnly: true,
                    serializedName: "AnalyticsIntegration",
                    type: {
                        name: "Boolean"
                    }
                },
                multipleStepWebTest: {
                    readOnly: true,
                    serializedName: "MultipleStepWebTest",
                    type: {
                        name: "Boolean"
                    }
                },
                apiAccessLevel: {
                    readOnly: true,
                    serializedName: "ApiAccessLevel",
                    type: {
                        name: "String"
                    }
                },
                trackingType: {
                    readOnly: true,
                    serializedName: "TrackingType",
                    type: {
                        name: "String"
                    }
                },
                dailyCap: {
                    readOnly: true,
                    serializedName: "DailyCap",
                    type: {
                        name: "Number"
                    }
                },
                dailyCapResetTime: {
                    readOnly: true,
                    serializedName: "DailyCapResetTime",
                    type: {
                        name: "Number"
                    }
                },
                throttleRate: {
                    readOnly: true,
                    serializedName: "ThrottleRate",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFeatureCapability = {
        serializedName: "ApplicationInsightsComponentFeatureCapability",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFeatureCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "Unit",
                    type: {
                        name: "String"
                    }
                },
                meterId: {
                    readOnly: true,
                    serializedName: "MeterId",
                    type: {
                        name: "String"
                    }
                },
                meterRateFrequency: {
                    readOnly: true,
                    serializedName: "MeterRateFrequency",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFeature = {
        serializedName: "ApplicationInsightsComponentFeature",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFeature",
            modelProperties: {
                featureName: {
                    readOnly: true,
                    serializedName: "FeatureName",
                    type: {
                        name: "String"
                    }
                },
                meterId: {
                    readOnly: true,
                    serializedName: "MeterId",
                    type: {
                        name: "String"
                    }
                },
                meterRateFrequency: {
                    readOnly: true,
                    serializedName: "MeterRateFrequency",
                    type: {
                        name: "String"
                    }
                },
                resouceId: {
                    readOnly: true,
                    serializedName: "ResouceId",
                    type: {
                        name: "String"
                    }
                },
                isHidden: {
                    readOnly: true,
                    serializedName: "IsHidden",
                    type: {
                        name: "Boolean"
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "Capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentFeatureCapability"
                            }
                        }
                    }
                },
                title: {
                    readOnly: true,
                    serializedName: "Title",
                    type: {
                        name: "String"
                    }
                },
                isMainFeature: {
                    readOnly: true,
                    serializedName: "IsMainFeature",
                    type: {
                        name: "Boolean"
                    }
                },
                supportedAddonFeatures: {
                    readOnly: true,
                    serializedName: "SupportedAddonFeatures",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAvailableFeatures = {
        serializedName: "ApplicationInsightsComponentAvailableFeatures",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAvailableFeatures",
            modelProperties: {
                result: {
                    readOnly: true,
                    serializedName: "Result",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentFeature"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions = {
        serializedName: "ApplicationInsightsComponentProactiveDetectionConfiguration_RuleDefinitions",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "DisplayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                helpUrl: {
                    serializedName: "HelpUrl",
                    type: {
                        name: "String"
                    }
                },
                isHidden: {
                    serializedName: "IsHidden",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnabledByDefault: {
                    serializedName: "IsEnabledByDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                isInPreview: {
                    serializedName: "IsInPreview",
                    type: {
                        name: "Boolean"
                    }
                },
                supportsEmailNotifications: {
                    serializedName: "SupportsEmailNotifications",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentProactiveDetectionConfiguration = {
        serializedName: "ApplicationInsightsComponentProactiveDetectionConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentProactiveDetectionConfiguration",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "Enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                sendEmailsToSubscriptionOwners: {
                    serializedName: "SendEmailsToSubscriptionOwners",
                    type: {
                        name: "Boolean"
                    }
                },
                customEmails: {
                    serializedName: "CustomEmails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                lastUpdatedTime: {
                    serializedName: "LastUpdatedTime",
                    type: {
                        name: "String"
                    }
                },
                ruleDefinitions: {
                    serializedName: "RuleDefinitions",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions"
                    }
                }
            }
        }
    };
    var ComponentsResource = {
        serializedName: "ComponentsResource",
        type: {
            name: "Composite",
            className: "ComponentsResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TagsResource = {
        serializedName: "TagsResource",
        type: {
            name: "Composite",
            className: "TagsResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentProperties = {
        serializedName: "ApplicationInsightsComponentProperties",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentProperties",
            modelProperties: {
                applicationId: {
                    readOnly: true,
                    serializedName: "ApplicationId",
                    type: {
                        name: "String"
                    }
                },
                appId: {
                    readOnly: true,
                    serializedName: "AppId",
                    type: {
                        name: "String"
                    }
                },
                applicationType: {
                    required: true,
                    serializedName: "Application_Type",
                    defaultValue: 'web',
                    type: {
                        name: "String"
                    }
                },
                flowType: {
                    serializedName: "Flow_Type",
                    defaultValue: 'Bluefield',
                    type: {
                        name: "String"
                    }
                },
                requestSource: {
                    serializedName: "Request_Source",
                    defaultValue: 'rest',
                    type: {
                        name: "String"
                    }
                },
                instrumentationKey: {
                    readOnly: true,
                    serializedName: "InstrumentationKey",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "CreationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "TenantId",
                    type: {
                        name: "String"
                    }
                },
                hockeyAppId: {
                    serializedName: "HockeyAppId",
                    type: {
                        name: "String"
                    }
                },
                hockeyAppToken: {
                    readOnly: true,
                    serializedName: "HockeyAppToken",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                samplingPercentage: {
                    serializedName: "SamplingPercentage",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponent = {
        serializedName: "ApplicationInsightsComponent",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponent",
            modelProperties: __assign({}, ComponentsResource.type.modelProperties, { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, applicationId: {
                    readOnly: true,
                    serializedName: "properties.ApplicationId",
                    type: {
                        name: "String"
                    }
                }, appId: {
                    readOnly: true,
                    serializedName: "properties.AppId",
                    type: {
                        name: "String"
                    }
                }, applicationType: {
                    required: true,
                    serializedName: "properties.Application_Type",
                    defaultValue: 'web',
                    type: {
                        name: "String"
                    }
                }, flowType: {
                    serializedName: "properties.Flow_Type",
                    defaultValue: 'Bluefield',
                    type: {
                        name: "String"
                    }
                }, requestSource: {
                    serializedName: "properties.Request_Source",
                    defaultValue: 'rest',
                    type: {
                        name: "String"
                    }
                }, instrumentationKey: {
                    readOnly: true,
                    serializedName: "properties.InstrumentationKey",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.CreationDate",
                    type: {
                        name: "DateTime"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.TenantId",
                    type: {
                        name: "String"
                    }
                }, hockeyAppId: {
                    serializedName: "properties.HockeyAppId",
                    type: {
                        name: "String"
                    }
                }, hockeyAppToken: {
                    readOnly: true,
                    serializedName: "properties.HockeyAppToken",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, samplingPercentage: {
                    serializedName: "properties.SamplingPercentage",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ComponentPurgeBodyFilters = {
        serializedName: "ComponentPurgeBodyFilters",
        type: {
            name: "Composite",
            className: "ComponentPurgeBodyFilters",
            modelProperties: {
                column: {
                    serializedName: "column",
                    type: {
                        name: "String"
                    }
                },
                operator: {
                    serializedName: "operator",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComponentPurgeBody = {
        serializedName: "ComponentPurgeBody",
        type: {
            name: "Composite",
            className: "ComponentPurgeBody",
            modelProperties: {
                table: {
                    required: true,
                    serializedName: "table",
                    type: {
                        name: "String"
                    }
                },
                filters: {
                    required: true,
                    serializedName: "filters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComponentPurgeBodyFilters"
                            }
                        }
                    }
                }
            }
        }
    };
    var ComponentPurgeResponse = {
        serializedName: "ComponentPurgeResponse",
        type: {
            name: "Composite",
            className: "ComponentPurgeResponse",
            modelProperties: {
                operationId: {
                    required: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComponentPurgeStatusResponse = {
        serializedName: "ComponentPurgeStatusResponse",
        type: {
            name: "Composite",
            className: "ComponentPurgeStatusResponse",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkItemConfiguration = {
        serializedName: "WorkItemConfiguration",
        type: {
            name: "Composite",
            className: "WorkItemConfiguration",
            modelProperties: {
                connectorId: {
                    serializedName: "ConnectorId",
                    type: {
                        name: "String"
                    }
                },
                configDisplayName: {
                    serializedName: "ConfigDisplayName",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    serializedName: "IsDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                configProperties: {
                    serializedName: "ConfigProperties",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkItemCreateConfiguration = {
        serializedName: "WorkItemCreateConfiguration",
        type: {
            name: "Composite",
            className: "WorkItemCreateConfiguration",
            modelProperties: {
                connectorId: {
                    serializedName: "ConnectorId",
                    type: {
                        name: "String"
                    }
                },
                connectorDataConfiguration: {
                    serializedName: "ConnectorDataConfiguration",
                    type: {
                        name: "String"
                    }
                },
                validateOnly: {
                    serializedName: "ValidateOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                workItemProperties: {
                    serializedName: "WorkItemProperties",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkItemConfigurationError = {
        serializedName: "WorkItemConfigurationError",
        type: {
            name: "Composite",
            className: "WorkItemConfigurationError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFavorite = {
        serializedName: "ApplicationInsightsComponentFavorite",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFavorite",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                config: {
                    serializedName: "Config",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "Version",
                    type: {
                        name: "String"
                    }
                },
                favoriteId: {
                    readOnly: true,
                    serializedName: "FavoriteId",
                    type: {
                        name: "String"
                    }
                },
                favoriteType: {
                    serializedName: "FavoriteType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "shared",
                            "user"
                        ]
                    }
                },
                sourceType: {
                    serializedName: "SourceType",
                    type: {
                        name: "String"
                    }
                },
                timeModified: {
                    readOnly: true,
                    serializedName: "TimeModified",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "Tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                category: {
                    serializedName: "Category",
                    type: {
                        name: "String"
                    }
                },
                isGeneratedFromTemplate: {
                    serializedName: "IsGeneratedFromTemplate",
                    type: {
                        name: "Boolean"
                    }
                },
                userId: {
                    readOnly: true,
                    serializedName: "UserId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentWebTestLocation = {
        serializedName: "ApplicationInsightsComponentWebTestLocation",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentWebTestLocation",
            modelProperties: {
                displayName: {
                    readOnly: true,
                    serializedName: "DisplayName",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    readOnly: true,
                    serializedName: "Tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebtestsResource = {
        serializedName: "WebtestsResource",
        type: {
            name: "Composite",
            className: "WebtestsResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebTestGeolocation = {
        serializedName: "WebTestGeolocation",
        type: {
            name: "Composite",
            className: "WebTestGeolocation",
            modelProperties: {
                location: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebTestPropertiesConfiguration = {
        serializedName: "WebTestProperties_Configuration",
        type: {
            name: "Composite",
            className: "WebTestPropertiesConfiguration",
            modelProperties: {
                webTest: {
                    serializedName: "WebTest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebTestProperties = {
        serializedName: "WebTestProperties",
        type: {
            name: "Composite",
            className: "WebTestProperties",
            modelProperties: {
                syntheticMonitorId: {
                    required: true,
                    serializedName: "SyntheticMonitorId",
                    type: {
                        name: "String"
                    }
                },
                webTestName: {
                    required: true,
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "Enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                frequency: {
                    serializedName: "Frequency",
                    defaultValue: 300,
                    type: {
                        name: "Number"
                    }
                },
                timeout: {
                    serializedName: "Timeout",
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                },
                webTestKind: {
                    required: true,
                    serializedName: "Kind",
                    defaultValue: 'ping',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ping",
                            "multistep"
                        ]
                    }
                },
                retryEnabled: {
                    serializedName: "RetryEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                locations: {
                    required: true,
                    serializedName: "Locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebTestGeolocation"
                            }
                        }
                    }
                },
                configuration: {
                    serializedName: "Configuration",
                    type: {
                        name: "Composite",
                        className: "WebTestPropertiesConfiguration"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebTest = {
        serializedName: "WebTest",
        type: {
            name: "Composite",
            className: "WebTest",
            modelProperties: __assign({}, WebtestsResource.type.modelProperties, { kind: {
                    serializedName: "kind",
                    defaultValue: 'ping',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ping",
                            "multistep"
                        ]
                    }
                }, syntheticMonitorId: {
                    required: true,
                    serializedName: "properties.SyntheticMonitorId",
                    type: {
                        name: "String"
                    }
                }, webTestName: {
                    required: true,
                    serializedName: "properties.Name",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.Description",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.Enabled",
                    type: {
                        name: "Boolean"
                    }
                }, frequency: {
                    serializedName: "properties.Frequency",
                    defaultValue: 300,
                    type: {
                        name: "Number"
                    }
                }, timeout: {
                    serializedName: "properties.Timeout",
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                }, webTestKind: {
                    required: true,
                    serializedName: "properties.Kind",
                    defaultValue: 'ping',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ping",
                            "multistep"
                        ]
                    }
                }, retryEnabled: {
                    serializedName: "properties.RetryEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, locations: {
                    required: true,
                    serializedName: "properties.Locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebTestGeolocation"
                            }
                        }
                    }
                }, configuration: {
                    serializedName: "properties.Configuration",
                    type: {
                        name: "Composite",
                        className: "WebTestPropertiesConfiguration"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationInsightsComponentAnalyticsItemProperties = {
        serializedName: "ApplicationInsightsComponentAnalyticsItemProperties",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAnalyticsItemProperties",
            modelProperties: {
                functionAlias: {
                    serializedName: "functionAlias",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAnalyticsItem = {
        serializedName: "ApplicationInsightsComponentAnalyticsItem",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAnalyticsItem",
            modelProperties: {
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    serializedName: "Content",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "Version",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "Scope",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "Type",
                    type: {
                        name: "String"
                    }
                },
                timeCreated: {
                    readOnly: true,
                    serializedName: "TimeCreated",
                    type: {
                        name: "String"
                    }
                },
                timeModified: {
                    readOnly: true,
                    serializedName: "TimeModified",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "Properties",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsComponentAnalyticsItemProperties"
                    }
                }
            }
        }
    };
    var WorkbookResource = {
        serializedName: "WorkbookResource",
        type: {
            name: "Composite",
            className: "WorkbookResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkbookProperties = {
        serializedName: "WorkbookProperties",
        type: {
            name: "Composite",
            className: "WorkbookProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                serializedData: {
                    required: true,
                    serializedName: "serializedData",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                workbookId: {
                    required: true,
                    serializedName: "workbookId",
                    type: {
                        name: "String"
                    }
                },
                sharedTypeKind: {
                    required: true,
                    serializedName: "kind",
                    defaultValue: 'shared',
                    type: {
                        name: "String"
                    }
                },
                timeModified: {
                    readOnly: true,
                    serializedName: "timeModified",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    required: true,
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                userId: {
                    required: true,
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                sourceResourceId: {
                    serializedName: "sourceResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Workbook = {
        serializedName: "Workbook",
        type: {
            name: "Composite",
            className: "Workbook",
            modelProperties: __assign({}, WorkbookResource.type.modelProperties, { kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, workbookName: {
                    required: true,
                    serializedName: "properties.name",
                    type: {
                        name: "String"
                    }
                }, serializedData: {
                    required: true,
                    serializedName: "properties.serializedData",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, workbookId: {
                    required: true,
                    serializedName: "properties.workbookId",
                    type: {
                        name: "String"
                    }
                }, sharedTypeKind: {
                    required: true,
                    serializedName: "properties.kind",
                    defaultValue: 'shared',
                    type: {
                        name: "String"
                    }
                }, timeModified: {
                    readOnly: true,
                    serializedName: "properties.timeModified",
                    type: {
                        name: "String"
                    }
                }, category: {
                    required: true,
                    serializedName: "properties.category",
                    type: {
                        name: "String"
                    }
                }, workbookTags: {
                    serializedName: "properties.tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, userId: {
                    required: true,
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                }, sourceResourceId: {
                    serializedName: "properties.sourceResourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LinkProperties = {
        serializedName: "LinkProperties",
        type: {
            name: "Composite",
            className: "LinkProperties",
            modelProperties: {
                sourceId: {
                    serializedName: "sourceId",
                    type: {
                        name: "String"
                    }
                },
                targetId: {
                    serializedName: "targetId",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorFieldContract = {
        serializedName: "ErrorFieldContract",
        type: {
            name: "Composite",
            className: "ErrorFieldContract",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbookError = {
        serializedName: "WorkbookError",
        type: {
            name: "Composite",
            className: "WorkbookError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorFieldContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AnnotationsListResult = {
        serializedName: "AnnotationsListResult",
        type: {
            name: "Composite",
            className: "AnnotationsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Annotation"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAPIKeyListResult = {
        serializedName: "ApplicationInsightsComponentAPIKeyListResult",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAPIKeyListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentAPIKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentListResult = {
        serializedName: "ApplicationInsightsComponentListResult",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponent"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkItemConfigurationsListResult = {
        serializedName: "WorkItemConfigurationsListResult",
        type: {
            name: "Composite",
            className: "WorkItemConfigurationsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkItemConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsWebTestLocationsListResult = {
        serializedName: "ApplicationInsightsWebTestLocationsListResult",
        type: {
            name: "Composite",
            className: "ApplicationInsightsWebTestLocationsListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentWebTestLocation"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebTestListResult = {
        serializedName: "webTestListResult",
        type: {
            name: "Composite",
            className: "WebTestListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebTest"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbooksListResult = {
        serializedName: "WorkbooksListResult",
        type: {
            name: "Composite",
            className: "WorkbooksListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workbook"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        Annotation: Annotation,
        InnerError: InnerError,
        AnnotationError: AnnotationError,
        APIKeyRequest: APIKeyRequest,
        ApplicationInsightsComponentAPIKey: ApplicationInsightsComponentAPIKey,
        ApplicationInsightsComponentExportRequest: ApplicationInsightsComponentExportRequest,
        ApplicationInsightsComponentExportConfiguration: ApplicationInsightsComponentExportConfiguration,
        ApplicationInsightsComponentDataVolumeCap: ApplicationInsightsComponentDataVolumeCap,
        ApplicationInsightsComponentBillingFeatures: ApplicationInsightsComponentBillingFeatures,
        ApplicationInsightsComponentQuotaStatus: ApplicationInsightsComponentQuotaStatus,
        ApplicationInsightsComponentFeatureCapabilities: ApplicationInsightsComponentFeatureCapabilities,
        ApplicationInsightsComponentFeatureCapability: ApplicationInsightsComponentFeatureCapability,
        ApplicationInsightsComponentFeature: ApplicationInsightsComponentFeature,
        ApplicationInsightsComponentAvailableFeatures: ApplicationInsightsComponentAvailableFeatures,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ComponentsResource: ComponentsResource,
        TagsResource: TagsResource,
        ApplicationInsightsComponentProperties: ApplicationInsightsComponentProperties,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ComponentPurgeBodyFilters: ComponentPurgeBodyFilters,
        ComponentPurgeBody: ComponentPurgeBody,
        ComponentPurgeResponse: ComponentPurgeResponse,
        ComponentPurgeStatusResponse: ComponentPurgeStatusResponse,
        WorkItemConfiguration: WorkItemConfiguration,
        WorkItemCreateConfiguration: WorkItemCreateConfiguration,
        WorkItemConfigurationError: WorkItemConfigurationError,
        ApplicationInsightsComponentFavorite: ApplicationInsightsComponentFavorite,
        ApplicationInsightsComponentWebTestLocation: ApplicationInsightsComponentWebTestLocation,
        WebtestsResource: WebtestsResource,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebTestProperties: WebTestProperties,
        WebTest: WebTest,
        ApplicationInsightsComponentAnalyticsItemProperties: ApplicationInsightsComponentAnalyticsItemProperties,
        ApplicationInsightsComponentAnalyticsItem: ApplicationInsightsComponentAnalyticsItem,
        WorkbookResource: WorkbookResource,
        WorkbookProperties: WorkbookProperties,
        Workbook: Workbook,
        LinkProperties: LinkProperties,
        ErrorFieldContract: ErrorFieldContract,
        WorkbookError: WorkbookError,
        OperationListResult: OperationListResult,
        AnnotationsListResult: AnnotationsListResult,
        ApplicationInsightsComponentAPIKeyListResult: ApplicationInsightsComponentAPIKeyListResult,
        ApplicationInsightsComponentListResult: ApplicationInsightsComponentListResult,
        WorkItemConfigurationsListResult: WorkItemConfigurationsListResult,
        ApplicationInsightsWebTestLocationsListResult: ApplicationInsightsWebTestLocationsListResult,
        WebTestListResult: WebTestListResult,
        WorkbooksListResult: WorkbooksListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var annotationId = {
        parameterPath: "annotationId",
        mapper: {
            required: true,
            serializedName: "annotationId",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var canFetchContent = {
        parameterPath: [
            "options",
            "canFetchContent"
        ],
        mapper: {
            serializedName: "canFetchContent",
            type: {
                name: "Boolean"
            }
        }
    };
    var category = {
        parameterPath: "category",
        mapper: {
            required: true,
            serializedName: "category",
            type: {
                name: "String"
            }
        }
    };
    var componentName = {
        parameterPath: "componentName",
        mapper: {
            required: true,
            serializedName: "componentName",
            type: {
                name: "String"
            }
        }
    };
    var configurationId = {
        parameterPath: "configurationId",
        mapper: {
            required: true,
            serializedName: "ConfigurationId",
            type: {
                name: "String"
            }
        }
    };
    var end = {
        parameterPath: "end",
        mapper: {
            required: true,
            serializedName: "end",
            type: {
                name: "String"
            }
        }
    };
    var exportId = {
        parameterPath: "exportId",
        mapper: {
            required: true,
            serializedName: "exportId",
            type: {
                name: "String"
            }
        }
    };
    var favoriteId = {
        parameterPath: "favoriteId",
        mapper: {
            required: true,
            serializedName: "favoriteId",
            type: {
                name: "String"
            }
        }
    };
    var favoriteType = {
        parameterPath: [
            "options",
            "favoriteType"
        ],
        mapper: {
            serializedName: "favoriteType",
            defaultValue: 'shared',
            type: {
                name: "Enum",
                allowedValues: [
                    "shared",
                    "user"
                ]
            }
        }
    };
    var id = {
        parameterPath: [
            "options",
            "id"
        ],
        mapper: {
            serializedName: "id",
            type: {
                name: "String"
            }
        }
    };
    var includeContent = {
        parameterPath: [
            "options",
            "includeContent"
        ],
        mapper: {
            serializedName: "includeContent",
            type: {
                name: "Boolean"
            }
        }
    };
    var keyId = {
        parameterPath: "keyId",
        mapper: {
            required: true,
            serializedName: "keyId",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: [
            "options",
            "name"
        ],
        mapper: {
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var overrideItem = {
        parameterPath: [
            "options",
            "overrideItem"
        ],
        mapper: {
            serializedName: "overrideItem",
            type: {
                name: "Boolean"
            }
        }
    };
    var purgeId = {
        parameterPath: "purgeId",
        mapper: {
            required: true,
            serializedName: "purgeId",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var scope = {
        parameterPath: [
            "options",
            "scope"
        ],
        mapper: {
            serializedName: "scope",
            defaultValue: 'shared',
            type: {
                name: "String"
            }
        }
    };
    var scopePath = {
        parameterPath: "scopePath",
        mapper: {
            required: true,
            serializedName: "scopePath",
            type: {
                name: "String"
            }
        }
    };
    var sourceType = {
        parameterPath: [
            "options",
            "sourceType"
        ],
        mapper: {
            serializedName: "sourceType",
            type: {
                name: "String"
            }
        }
    };
    var start = {
        parameterPath: "start",
        mapper: {
            required: true,
            serializedName: "start",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tags = {
        parameterPath: [
            "options",
            "tags"
        ],
        mapper: {
            serializedName: "tags",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var type = {
        parameterPath: [
            "options",
            "type"
        ],
        mapper: {
            serializedName: "type",
            defaultValue: 'none',
            type: {
                name: "String"
            }
        }
    };
    var webTestName = {
        parameterPath: "webTestName",
        mapper: {
            required: true,
            serializedName: "webTestName",
            type: {
                name: "String"
            }
        }
    };
    var workItemConfigId = {
        parameterPath: "workItemConfigId",
        mapper: {
            required: true,
            serializedName: "workItemConfigId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Insights/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        AnnotationsListResult: AnnotationsListResult,
        Annotation: Annotation,
        AnnotationError: AnnotationError,
        InnerError: InnerError,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Annotations. */
    var Annotations = /** @class */ (function () {
        /**
         * Create a Annotations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Annotations(client) {
            this.client = client;
        }
        Annotations.prototype.list = function (resourceGroupName$$1, resourceName$$1, start$$1, end$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                start: start$$1,
                end: end$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        Annotations.prototype.create = function (resourceGroupName$$1, resourceName$$1, annotationProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                annotationProperties: annotationProperties,
                options: options
            }, createOperationSpec, callback);
        };
        Annotations.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, annotationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                annotationId: annotationId$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Annotations.prototype.get = function (resourceGroupName$$1, resourceName$$1, annotationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                annotationId: annotationId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        return Annotations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion,
            start,
            end
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnnotationsListResult
            },
            default: {
                bodyMapper: AnnotationError
            }
        },
        serializer: serializer$1
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "annotationProperties",
            mapper: __assign({}, Annotation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Annotation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: AnnotationError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations/{annotationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            annotationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations/{annotationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            annotationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Annotation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: AnnotationError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentAPIKeyListResult: ApplicationInsightsComponentAPIKeyListResult,
        ApplicationInsightsComponentAPIKey: ApplicationInsightsComponentAPIKey,
        CloudError: CloudError,
        APIKeyRequest: APIKeyRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a APIKeys. */
    var APIKeys = /** @class */ (function () {
        /**
         * Create a APIKeys.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function APIKeys(client) {
            this.client = client;
        }
        APIKeys.prototype.list = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        APIKeys.prototype.create = function (resourceGroupName$$1, resourceName$$1, aPIKeyProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                aPIKeyProperties: aPIKeyProperties,
                options: options
            }, createOperationSpec$1, callback);
        };
        APIKeys.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, keyId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                keyId: keyId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        APIKeys.prototype.get = function (resourceGroupName$$1, resourceName$$1, keyId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                keyId: keyId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        return APIKeys;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ApiKeys",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ApiKeys",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "aPIKeyProperties",
            mapper: __assign({}, APIKeyRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/APIKeys/{keyId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            keyId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/APIKeys/{keyId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            keyId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentExportConfiguration: ApplicationInsightsComponentExportConfiguration,
        CloudError: CloudError,
        ApplicationInsightsComponentExportRequest: ApplicationInsightsComponentExportRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExportConfigurations. */
    var ExportConfigurations = /** @class */ (function () {
        /**
         * Create a ExportConfigurations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ExportConfigurations(client) {
            this.client = client;
        }
        ExportConfigurations.prototype.list = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        ExportConfigurations.prototype.create = function (resourceGroupName$$1, resourceName$$1, exportProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                exportProperties: exportProperties,
                options: options
            }, createOperationSpec$2, callback);
        };
        ExportConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, exportId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                exportId: exportId$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ExportConfigurations.prototype.get = function (resourceGroupName$$1, resourceName$$1, exportId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                exportId: exportId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        ExportConfigurations.prototype.update = function (resourceGroupName$$1, resourceName$$1, exportId$$1, exportProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                exportId: exportId$$1,
                exportProperties: exportProperties,
                options: options
            }, updateOperationSpec, callback);
        };
        return ExportConfigurations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentExportConfiguration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "exportProperties",
            mapper: __assign({}, ApplicationInsightsComponentExportRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentExportConfiguration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            exportId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentExportConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            exportId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentExportConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            exportId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "exportProperties",
            mapper: __assign({}, ApplicationInsightsComponentExportRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentExportConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentBillingFeatures: ApplicationInsightsComponentBillingFeatures,
        ApplicationInsightsComponentDataVolumeCap: ApplicationInsightsComponentDataVolumeCap,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentCurrentBillingFeatures. */
    var ComponentCurrentBillingFeatures = /** @class */ (function () {
        /**
         * Create a ComponentCurrentBillingFeatures.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentCurrentBillingFeatures(client) {
            this.client = client;
        }
        ComponentCurrentBillingFeatures.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        ComponentCurrentBillingFeatures.prototype.update = function (resourceGroupName$$1, resourceName$$1, billingFeaturesProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                billingFeaturesProperties: billingFeaturesProperties,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return ComponentCurrentBillingFeatures;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/currentbillingfeatures",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentBillingFeatures
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/currentbillingfeatures",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "billingFeaturesProperties",
            mapper: __assign({}, ApplicationInsightsComponentBillingFeatures, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentBillingFeatures
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentQuotaStatus: ApplicationInsightsComponentQuotaStatus,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentQuotaStatus. */
    var ComponentQuotaStatus = /** @class */ (function () {
        /**
         * Create a ComponentQuotaStatus.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentQuotaStatus(client) {
            this.client = client;
        }
        ComponentQuotaStatus.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        return ComponentQuotaStatus;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/quotastatus",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentQuotaStatus
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentFeatureCapabilities: ApplicationInsightsComponentFeatureCapabilities,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentFeatureCapabilities. */
    var ComponentFeatureCapabilities = /** @class */ (function () {
        /**
         * Create a ComponentFeatureCapabilities.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentFeatureCapabilities(client) {
            this.client = client;
        }
        ComponentFeatureCapabilities.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        return ComponentFeatureCapabilities;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/featurecapabilities",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFeatureCapabilities
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentAvailableFeatures: ApplicationInsightsComponentAvailableFeatures,
        ApplicationInsightsComponentFeature: ApplicationInsightsComponentFeature,
        ApplicationInsightsComponentFeatureCapability: ApplicationInsightsComponentFeatureCapability,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentAvailableFeatures. */
    var ComponentAvailableFeatures = /** @class */ (function () {
        /**
         * Create a ComponentAvailableFeatures.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentAvailableFeatures(client) {
            this.client = client;
        }
        ComponentAvailableFeatures.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        return ComponentAvailableFeatures;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/getavailablebillingfeatures",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAvailableFeatures
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        BaseResource: BaseResource,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        CloudError: CloudError,
        ComponentsResource: ComponentsResource,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        WebtestsResource: WebtestsResource,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WorkbookResource: WorkbookResource,
        Workbook: Workbook
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProactiveDetectionConfigurations. */
    var ProactiveDetectionConfigurations = /** @class */ (function () {
        /**
         * Create a ProactiveDetectionConfigurations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ProactiveDetectionConfigurations(client) {
            this.client = client;
        }
        ProactiveDetectionConfigurations.prototype.list = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listOperationSpec$4, callback);
        };
        ProactiveDetectionConfigurations.prototype.get = function (resourceGroupName$$1, resourceName$$1, configurationId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                configurationId: configurationId$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        ProactiveDetectionConfigurations.prototype.update = function (resourceGroupName$$1, resourceName$$1, configurationId$$1, proactiveDetectionProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                configurationId: configurationId$$1,
                proactiveDetectionProperties: proactiveDetectionProperties,
                options: options
            }, updateOperationSpec$2, callback);
        };
        return ProactiveDetectionConfigurations;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentProactiveDetectionConfiguration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            configurationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentProactiveDetectionConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var updateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            configurationId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "proactiveDetectionProperties",
            mapper: __assign({}, ApplicationInsightsComponentProactiveDetectionConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentProactiveDetectionConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentListResult: ApplicationInsightsComponentListResult,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ComponentsResource: ComponentsResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        TagsResource: TagsResource,
        ComponentPurgeBody: ComponentPurgeBody,
        ComponentPurgeBodyFilters: ComponentPurgeBodyFilters,
        ComponentPurgeResponse: ComponentPurgeResponse,
        ComponentPurgeStatusResponse: ComponentPurgeStatusResponse,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        WebtestsResource: WebtestsResource,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WorkbookResource: WorkbookResource,
        Workbook: Workbook
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Components. */
    var Components = /** @class */ (function () {
        /**
         * Create a Components.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Components(client) {
            this.client = client;
        }
        Components.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        Components.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Components.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Components.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        Components.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, insightProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                insightProperties: insightProperties,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Components.prototype.updateTags = function (resourceGroupName$$1, resourceName$$1, componentTags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                componentTags: componentTags,
                options: options
            }, updateTagsOperationSpec, callback);
        };
        Components.prototype.purge = function (resourceGroupName$$1, resourceName$$1, body, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                body: body,
                options: options
            }, purgeOperationSpec, callback);
        };
        Components.prototype.getPurgeStatus = function (resourceGroupName$$1, resourceName$$1, purgeId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                purgeId: purgeId$$1,
                options: options
            }, getPurgeStatusOperationSpec, callback);
        };
        Components.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Components.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Components;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/components",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "insightProperties",
            mapper: __assign({}, ApplicationInsightsComponent, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var updateTagsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "componentTags",
            mapper: __assign({}, TagsResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var purgeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/purge",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign({}, ComponentPurgeBody, { required: true })
        },
        responses: {
            202: {
                bodyMapper: ComponentPurgeResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getPurgeStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/operations/{purgeId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            purgeId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComponentPurgeStatusResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        WorkItemConfigurationsListResult: WorkItemConfigurationsListResult,
        WorkItemConfiguration: WorkItemConfiguration,
        WorkItemConfigurationError: WorkItemConfigurationError,
        InnerError: InnerError,
        WorkItemCreateConfiguration: WorkItemCreateConfiguration,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkItemConfigurations. */
    var WorkItemConfigurations = /** @class */ (function () {
        /**
         * Create a WorkItemConfigurations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WorkItemConfigurations(client) {
            this.client = client;
        }
        WorkItemConfigurations.prototype.list = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listOperationSpec$6, callback);
        };
        WorkItemConfigurations.prototype.create = function (resourceGroupName$$1, resourceName$$1, workItemConfigurationProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                workItemConfigurationProperties: workItemConfigurationProperties,
                options: options
            }, createOperationSpec$3, callback);
        };
        WorkItemConfigurations.prototype.getDefault = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getDefaultOperationSpec, callback);
        };
        WorkItemConfigurations.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, workItemConfigId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                workItemConfigId: workItemConfigId$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        return WorkItemConfigurations;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkItemConfigurationsListResult
            },
            default: {
                bodyMapper: WorkItemConfigurationError
            }
        },
        serializer: serializer$a
    };
    var createOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workItemConfigurationProperties",
            mapper: __assign({}, WorkItemCreateConfiguration, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkItemConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getDefaultOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/DefaultWorkItemConfig",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkItemConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            workItemConfigId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Object"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentFavorite: ApplicationInsightsComponentFavorite,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Favorites. */
    var Favorites = /** @class */ (function () {
        /**
         * Create a Favorites.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Favorites(client) {
            this.client = client;
        }
        Favorites.prototype.list = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listOperationSpec$7, callback);
        };
        Favorites.prototype.get = function (resourceGroupName$$1, resourceName$$1, favoriteId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                favoriteId: favoriteId$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        Favorites.prototype.add = function (resourceGroupName$$1, resourceName$$1, favoriteId$$1, favoriteProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                favoriteId: favoriteId$$1,
                favoriteProperties: favoriteProperties,
                options: options
            }, addOperationSpec, callback);
        };
        Favorites.prototype.update = function (resourceGroupName$$1, resourceName$$1, favoriteId$$1, favoriteProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                favoriteId: favoriteId$$1,
                favoriteProperties: favoriteProperties,
                options: options
            }, updateOperationSpec$3, callback);
        };
        Favorites.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, favoriteId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                favoriteId: favoriteId$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        return Favorites;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion,
            favoriteType,
            sourceType,
            canFetchContent,
            tags
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentFavorite"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFavorite
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var addOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "favoriteProperties",
            mapper: __assign({}, ApplicationInsightsComponentFavorite, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFavorite
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "favoriteProperties",
            mapper: __assign({}, ApplicationInsightsComponentFavorite, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFavorite
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        ApplicationInsightsWebTestLocationsListResult: ApplicationInsightsWebTestLocationsListResult,
        ApplicationInsightsComponentWebTestLocation: ApplicationInsightsComponentWebTestLocation,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WebTestLocations. */
    var WebTestLocations = /** @class */ (function () {
        /**
         * Create a WebTestLocations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WebTestLocations(client) {
            this.client = client;
        }
        WebTestLocations.prototype.list = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        return WebTestLocations;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/syntheticmonitorlocations",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsWebTestLocationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        WebTestListResult: WebTestListResult,
        WebTest: WebTest,
        WebtestsResource: WebtestsResource,
        BaseResource: BaseResource,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        CloudError: CloudError,
        TagsResource: TagsResource,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        ComponentsResource: ComponentsResource,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        WorkbookResource: WorkbookResource,
        Workbook: Workbook
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WebTests. */
    var WebTests = /** @class */ (function () {
        /**
         * Create a WebTests.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WebTests(client) {
            this.client = client;
        }
        WebTests.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        WebTests.prototype.get = function (resourceGroupName$$1, webTestName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                webTestName: webTestName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        WebTests.prototype.createOrUpdate = function (resourceGroupName$$1, webTestName$$1, webTestDefinition, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                webTestName: webTestName$$1,
                webTestDefinition: webTestDefinition,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        WebTests.prototype.updateTags = function (resourceGroupName$$1, webTestName$$1, webTestTags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                webTestName: webTestName$$1,
                webTestTags: webTestTags,
                options: options
            }, updateTagsOperationSpec$1, callback);
        };
        WebTests.prototype.deleteMethod = function (resourceGroupName$$1, webTestName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                webTestName: webTestName$$1,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        WebTests.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$9, callback);
        };
        WebTests.prototype.listByComponent = function (componentName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                componentName: componentName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByComponentOperationSpec, callback);
        };
        WebTests.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        WebTests.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        WebTests.prototype.listByComponentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByComponentNextOperationSpec, callback);
        };
        return WebTests;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            webTestName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTest
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            webTestName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "webTestDefinition",
            mapper: __assign({}, WebTest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WebTest
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var updateTagsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            webTestName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "webTestTags",
            mapper: __assign({}, TagsResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: WebTest
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            webTestName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/webtests",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByComponentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{componentName}/webtests",
        urlParameters: [
            componentName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var listByComponentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        ApplicationInsightsComponentAnalyticsItem: ApplicationInsightsComponentAnalyticsItem,
        ApplicationInsightsComponentAnalyticsItemProperties: ApplicationInsightsComponentAnalyticsItemProperties,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AnalyticsItems. */
    var AnalyticsItems = /** @class */ (function () {
        /**
         * Create a AnalyticsItems.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function AnalyticsItems(client) {
            this.client = client;
        }
        AnalyticsItems.prototype.list = function (resourceGroupName$$1, resourceName$$1, scopePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                scopePath: scopePath$$1,
                options: options
            }, listOperationSpec$a, callback);
        };
        AnalyticsItems.prototype.get = function (resourceGroupName$$1, resourceName$$1, scopePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                scopePath: scopePath$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        AnalyticsItems.prototype.put = function (resourceGroupName$$1, resourceName$$1, scopePath$$1, itemProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                scopePath: scopePath$$1,
                itemProperties: itemProperties,
                options: options
            }, putOperationSpec, callback);
        };
        AnalyticsItems.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, scopePath$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                scopePath: scopePath$$1,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        return AnalyticsItems;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion,
            scope,
            type,
            includeContent
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentAnalyticsItem"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion,
            id,
            name
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAnalyticsItem
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var putOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion,
            overrideItem
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "itemProperties",
            mapper: __assign({}, ApplicationInsightsComponentAnalyticsItem, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAnalyticsItem
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion,
            id,
            name
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        WorkbooksListResult: WorkbooksListResult,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        BaseResource: BaseResource,
        WorkbookError: WorkbookError,
        ErrorFieldContract: ErrorFieldContract,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        ComponentsResource: ComponentsResource,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        WebtestsResource: WebtestsResource,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workbooks. */
    var Workbooks = /** @class */ (function () {
        /**
         * Create a Workbooks.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Workbooks(client) {
            this.client = client;
        }
        Workbooks.prototype.listByResourceGroup = function (resourceGroupName$$1, category$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                category: category$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        Workbooks.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        Workbooks.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        Workbooks.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, workbookProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                workbookProperties: workbookProperties,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Workbooks.prototype.update = function (resourceGroupName$$1, resourceName$$1, workbookProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                workbookProperties: workbookProperties,
                options: options
            }, updateOperationSpec$4, callback);
        };
        return Workbooks;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/providers/microsoft.insights/workbooks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            category,
            tags,
            canFetchContent,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/providers/microsoft.insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$f
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/providers/microsoft.insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            201: {},
            204: {},
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$f
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/providers/microsoft.insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workbookProperties",
            mapper: __assign({}, Workbook, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workbook
            },
            201: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$f
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/providers/microsoft.insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workbookProperties",
            mapper: __assign({}, Workbook, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-appinsights";
    var packageVersion = "1.0.0";
    var ApplicationInsightsManagementClientContext = /** @class */ (function (_super) {
        __extends(ApplicationInsightsManagementClientContext, _super);
        /**
         * Initializes a new instance of the ApplicationInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription ID.
         * @param [options] The parameter options
         */
        function ApplicationInsightsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2015-05-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ApplicationInsightsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ApplicationInsightsManagementClient = /** @class */ (function (_super) {
        __extends(ApplicationInsightsManagementClient, _super);
        /**
         * Initializes a new instance of the ApplicationInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The Azure subscription ID.
         * @param [options] The parameter options
         */
        function ApplicationInsightsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.annotations = new Annotations(_this);
            _this.aPIKeys = new APIKeys(_this);
            _this.exportConfigurations = new ExportConfigurations(_this);
            _this.componentCurrentBillingFeatures = new ComponentCurrentBillingFeatures(_this);
            _this.componentQuotaStatus = new ComponentQuotaStatus(_this);
            _this.componentFeatureCapabilities = new ComponentFeatureCapabilities(_this);
            _this.componentAvailableFeatures = new ComponentAvailableFeatures(_this);
            _this.proactiveDetectionConfigurations = new ProactiveDetectionConfigurations(_this);
            _this.components = new Components(_this);
            _this.workItemConfigurations = new WorkItemConfigurations(_this);
            _this.favorites = new Favorites(_this);
            _this.webTestLocations = new WebTestLocations(_this);
            _this.webTests = new WebTests(_this);
            _this.analyticsItems = new AnalyticsItems(_this);
            _this.workbooks = new Workbooks(_this);
            return _this;
        }
        return ApplicationInsightsManagementClient;
    }(ApplicationInsightsManagementClientContext));

    exports.ApplicationInsightsManagementClient = ApplicationInsightsManagementClient;
    exports.ApplicationInsightsManagementClientContext = ApplicationInsightsManagementClientContext;
    exports.ApplicationInsightsManagementModels = index;
    exports.ApplicationInsightsManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Annotations = Annotations;
    exports.APIKeys = APIKeys;
    exports.ExportConfigurations = ExportConfigurations;
    exports.ComponentCurrentBillingFeatures = ComponentCurrentBillingFeatures;
    exports.ComponentQuotaStatus = ComponentQuotaStatus;
    exports.ComponentFeatureCapabilities = ComponentFeatureCapabilities;
    exports.ComponentAvailableFeatures = ComponentAvailableFeatures;
    exports.ProactiveDetectionConfigurations = ProactiveDetectionConfigurations;
    exports.Components = Components;
    exports.WorkItemConfigurations = WorkItemConfigurations;
    exports.Favorites = Favorites;
    exports.WebTestLocations = WebTestLocations;
    exports.WebTests = WebTests;
    exports.AnalyticsItems = AnalyticsItems;
    exports.Workbooks = Workbooks;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-appinsights.js.map
