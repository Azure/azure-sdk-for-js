/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const APIError: msRest.CompositeMapper = {
  serializedName: "APIError",
  type: {
    name: "Composite",
    className: "APIError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "Object"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Point: msRest.CompositeMapper = {
  serializedName: "Point",
  type: {
    name: "Composite",
    className: "Point",
    modelProperties: {
      timestamp: {
        required: true,
        serializedName: "Timestamp",
        type: {
          name: "DateTime"
        }
      },
      value: {
        required: true,
        serializedName: "Value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Request: msRest.CompositeMapper = {
  serializedName: "Request",
  type: {
    name: "Composite",
    className: "Request",
    modelProperties: {
      series: {
        required: true,
        serializedName: "Series",
        constraints: {
          MaxItems: 8640,
          MinItems: 12
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Point"
            }
          }
        }
      },
      granularity: {
        required: true,
        serializedName: "Granularity",
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely"
          ]
        }
      },
      customInterval: {
        serializedName: "CustomInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "Period",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      maxAnomalyRatio: {
        serializedName: "MaxAnomalyRatio",
        defaultValue: 0.25,
        constraints: {
          ExclusiveMaximum: 0.5,
          ExclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      sensitivity: {
        serializedName: "Sensitivity",
        defaultValue: 99,
        constraints: {
          InclusiveMaximum: 99,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntireDetectResponse: msRest.CompositeMapper = {
  serializedName: "EntireDetectResponse",
  type: {
    name: "Composite",
    className: "EntireDetectResponse",
    modelProperties: {
      period: {
        required: true,
        serializedName: "Period",
        type: {
          name: "Number"
        }
      },
      expectedValues: {
        required: true,
        serializedName: "ExpectedValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      upperMargins: {
        required: true,
        serializedName: "UpperMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      lowerMargins: {
        required: true,
        serializedName: "LowerMargins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isAnomaly: {
        required: true,
        serializedName: "IsAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isNegativeAnomaly: {
        required: true,
        serializedName: "IsNegativeAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      isPositiveAnomaly: {
        required: true,
        serializedName: "IsPositiveAnomaly",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      }
    }
  }
};

export const LastDetectResponse: msRest.CompositeMapper = {
  serializedName: "LastDetectResponse",
  type: {
    name: "Composite",
    className: "LastDetectResponse",
    modelProperties: {
      period: {
        serializedName: "Period",
        type: {
          name: "Number"
        }
      },
      suggestedWindow: {
        serializedName: "SuggestedWindow",
        type: {
          name: "Number"
        }
      },
      expectedValue: {
        serializedName: "ExpectedValue",
        type: {
          name: "Number"
        }
      },
      upperMargin: {
        serializedName: "UpperMargin",
        type: {
          name: "Number"
        }
      },
      lowerMargin: {
        serializedName: "LowerMargin",
        type: {
          name: "Number"
        }
      },
      isAnomaly: {
        serializedName: "IsAnomaly",
        type: {
          name: "Boolean"
        }
      },
      isNegativeAnomaly: {
        serializedName: "IsNegativeAnomaly",
        type: {
          name: "Boolean"
        }
      },
      isPositiveAnomaly: {
        serializedName: "IsPositiveAnomaly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
