/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmSearch = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for UnavailableNameReason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: UnavailableNameReason =
     * <UnavailableNameReason>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var UnavailableNameReason;
    (function (UnavailableNameReason) {
        UnavailableNameReason["Invalid"] = "Invalid";
        UnavailableNameReason["AlreadyExists"] = "AlreadyExists";
    })(UnavailableNameReason || (UnavailableNameReason = {}));
    /**
     * Defines values for SkuName.
     * Possible values include: 'free', 'basic', 'standard', 'standard2',
     * 'standard3'
     * @readonly
     * @enum {string}
     */
    var SkuName;
    (function (SkuName) {
        SkuName["Free"] = "free";
        SkuName["Basic"] = "basic";
        SkuName["Standard"] = "standard";
        SkuName["Standard2"] = "standard2";
        SkuName["Standard3"] = "standard3";
    })(SkuName || (SkuName = {}));
    /**
     * Defines values for HostingMode.
     * Possible values include: 'default', 'highDensity'
     * @readonly
     * @enum {string}
     */
    var HostingMode;
    (function (HostingMode) {
        HostingMode["Default"] = "default";
        HostingMode["HighDensity"] = "highDensity";
    })(HostingMode || (HostingMode = {}));
    /**
     * Defines values for SearchServiceStatus.
     * Possible values include: 'running', 'provisioning', 'deleting', 'degraded',
     * 'disabled', 'error'
     * @readonly
     * @enum {string}
     */
    var SearchServiceStatus;
    (function (SearchServiceStatus) {
        SearchServiceStatus["Running"] = "running";
        SearchServiceStatus["Provisioning"] = "provisioning";
        SearchServiceStatus["Deleting"] = "deleting";
        SearchServiceStatus["Degraded"] = "degraded";
        SearchServiceStatus["Disabled"] = "disabled";
        SearchServiceStatus["Error"] = "error";
    })(SearchServiceStatus || (SearchServiceStatus = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'succeeded', 'provisioning', 'failed'
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Succeeded"] = "succeeded";
        ProvisioningState["Provisioning"] = "provisioning";
        ProvisioningState["Failed"] = "failed";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for AdminKeyKind.
     * Possible values include: 'primary', 'secondary'
     * @readonly
     * @enum {string}
     */
    var AdminKeyKind;
    (function (AdminKeyKind) {
        AdminKeyKind["Primary"] = "primary";
        AdminKeyKind["Secondary"] = "secondary";
    })(AdminKeyKind || (AdminKeyKind = {}));

    var index = /*#__PURE__*/Object.freeze({
        get UnavailableNameReason () { return UnavailableNameReason; },
        get SkuName () { return SkuName; },
        get HostingMode () { return HostingMode; },
        get SearchServiceStatus () { return SearchServiceStatus; },
        get ProvisioningState () { return ProvisioningState; },
        get AdminKeyKind () { return AdminKeyKind; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var CheckNameAvailabilityInput = {
        serializedName: "CheckNameAvailabilityInput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityInput",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'searchServices',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityOutput = {
        serializedName: "CheckNameAvailabilityOutput",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityOutput",
            modelProperties: {
                isNameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdminKeyResult = {
        serializedName: "AdminKeyResult",
        type: {
            name: "Composite",
            className: "AdminKeyResult",
            modelProperties: {
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryKey = {
        serializedName: "QueryKey",
        type: {
            name: "Composite",
            className: "QueryKey",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    readOnly: true,
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "free",
                            "basic",
                            "standard",
                            "standard2",
                            "standard3"
                        ]
                    }
                }
            }
        }
    };
    var SearchServiceProperties = {
        serializedName: "SearchServiceProperties",
        type: {
            name: "Composite",
            className: "SearchServiceProperties",
            modelProperties: {
                replicaCount: {
                    serializedName: "replicaCount",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 12,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                partitionCount: {
                    serializedName: "partitionCount",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 12,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                hostingMode: {
                    serializedName: "hostingMode",
                    defaultValue: 'default',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "default",
                            "highDensity"
                        ]
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "running",
                            "provisioning",
                            "deleting",
                            "degraded",
                            "disabled",
                            "error"
                        ]
                    }
                },
                statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "succeeded",
                            "provisioning",
                            "failed"
                        ]
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }
            }
        }
    };
    var SearchService = {
        serializedName: "SearchService",
        type: {
            name: "Composite",
            className: "SearchService",
            modelProperties: __assign({}, Resource.type.modelProperties, { replicaCount: {
                    serializedName: "properties.replicaCount",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 12,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, partitionCount: {
                    serializedName: "properties.partitionCount",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 12,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, hostingMode: {
                    serializedName: "properties.hostingMode",
                    defaultValue: 'default',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "default",
                            "highDensity"
                        ]
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "running",
                            "provisioning",
                            "deleting",
                            "degraded",
                            "disabled",
                            "error"
                        ]
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "succeeded",
                            "provisioning",
                            "failed"
                        ]
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'SystemAssigned',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var SearchManagementRequestOptions = {
        type: {
            name: "Composite",
            className: "SearchManagementRequestOptions",
            modelProperties: {
                clientRequestId: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListQueryKeysResult = {
        serializedName: "ListQueryKeysResult",
        type: {
            name: "Composite",
            className: "ListQueryKeysResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "QueryKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var SearchServiceListResult = {
        serializedName: "SearchServiceListResult",
        type: {
            name: "Composite",
            className: "SearchServiceListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SearchService"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        CheckNameAvailabilityInput: CheckNameAvailabilityInput,
        CheckNameAvailabilityOutput: CheckNameAvailabilityOutput,
        AdminKeyResult: AdminKeyResult,
        QueryKey: QueryKey,
        Sku: Sku,
        SearchServiceProperties: SearchServiceProperties,
        Resource: Resource,
        SearchService: SearchService,
        Identity: Identity,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        SearchManagementRequestOptions: SearchManagementRequestOptions,
        OperationListResult: OperationListResult,
        ListQueryKeysResult: ListQueryKeysResult,
        SearchServiceListResult: SearchServiceListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var clientRequestId = {
        parameterPath: [
            "options",
            "searchManagementRequestOptions",
            "clientRequestId"
        ],
        mapper: {
            serializedName: "x-ms-client-request-id",
            type: {
                name: "Uuid"
            }
        }
    };
    var key = {
        parameterPath: "key",
        mapper: {
            required: true,
            serializedName: "key",
            type: {
                name: "String"
            }
        }
    };
    var keyKind = {
        parameterPath: "keyKind",
        mapper: {
            required: true,
            serializedName: "keyKind",
            type: {
                name: "Enum",
                allowedValues: [
                    "primary",
                    "secondary"
                ]
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var searchServiceName = {
        parameterPath: "searchServiceName",
        mapper: {
            required: true,
            serializedName: "searchServiceName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SearchManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Search/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        AdminKeyResult: AdminKeyResult,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AdminKeys. */
    var AdminKeys = /** @class */ (function () {
        /**
         * Create a AdminKeys.
         * @param {SearchManagementClientContext} client Reference to the service client.
         */
        function AdminKeys(client) {
            this.client = client;
        }
        AdminKeys.prototype.get = function (resourceGroupName$$1, searchServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        AdminKeys.prototype.regenerate = function (resourceGroupName$$1, searchServiceName$$1, keyKind$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                keyKind: keyKind$$1,
                options: options
            }, regenerateOperationSpec, callback);
        };
        return AdminKeys;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listAdminKeys",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {
                bodyMapper: AdminKeyResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var regenerateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/regenerateAdminKey/{keyKind}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            keyKind,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {
                bodyMapper: AdminKeyResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        QueryKey: QueryKey,
        CloudError: CloudError,
        ListQueryKeysResult: ListQueryKeysResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a QueryKeys. */
    var QueryKeys = /** @class */ (function () {
        /**
         * Create a QueryKeys.
         * @param {SearchManagementClientContext} client Reference to the service client.
         */
        function QueryKeys(client) {
            this.client = client;
        }
        QueryKeys.prototype.create = function (resourceGroupName$$1, searchServiceName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                name: name$$1,
                options: options
            }, createOperationSpec, callback);
        };
        QueryKeys.prototype.listBySearchService = function (resourceGroupName$$1, searchServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                options: options
            }, listBySearchServiceOperationSpec, callback);
        };
        QueryKeys.prototype.deleteMethod = function (resourceGroupName$$1, searchServiceName$$1, key$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                key: key$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        return QueryKeys;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/createQueryKey/{name}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {
                bodyMapper: QueryKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listBySearchServiceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/listQueryKeys",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {
                bodyMapper: ListQueryKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/deleteQueryKey/{key}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            key,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {},
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        SearchService: SearchService,
        Resource: Resource,
        BaseResource: BaseResource,
        Identity: Identity,
        Sku: Sku,
        CloudError: CloudError,
        SearchServiceListResult: SearchServiceListResult,
        CheckNameAvailabilityInput: CheckNameAvailabilityInput,
        CheckNameAvailabilityOutput: CheckNameAvailabilityOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Services. */
    var Services = /** @class */ (function () {
        /**
         * Create a Services.
         * @param {SearchManagementClientContext} client Reference to the service client.
         */
        function Services(client) {
            this.client = client;
        }
        /**
         * Creates or updates a Search service in the given resource group. If the Search service already
         * exists, all properties will be updated with the given values.
         * @param resourceGroupName The name of the resource group within the current subscription. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param searchServiceName The name of the Azure Search service to create or update. Search
         * service names must only contain lowercase letters, digits or dashes, cannot use dash as the
         * first two or last one characters, cannot contain consecutive dashes, and must be between 2 and
         * 60 characters in length. Search service names must be globally unique since they are part of the
         * service URI (https://<name>.search.windows.net). You cannot change the service name after the
         * service is created.
         * @param service The definition of the Search service to create or update.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServicesCreateOrUpdateResponse>
         */
        Services.prototype.createOrUpdate = function (resourceGroupName$$1, searchServiceName$$1, service, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, searchServiceName$$1, service, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Services.prototype.update = function (resourceGroupName$$1, searchServiceName$$1, service, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                service: service,
                options: options
            }, updateOperationSpec, callback);
        };
        Services.prototype.get = function (resourceGroupName$$1, searchServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Services.prototype.deleteMethod = function (resourceGroupName$$1, searchServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Services.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Services.prototype.checkNameAvailability = function (name$$1, options, callback) {
            return this.client.sendOperationRequest({
                name: name$$1,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Creates or updates a Search service in the given resource group. If the Search service already
         * exists, all properties will be updated with the given values.
         * @param resourceGroupName The name of the resource group within the current subscription. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param searchServiceName The name of the Azure Search service to create or update. Search
         * service names must only contain lowercase letters, digits or dashes, cannot use dash as the
         * first two or last one characters, cannot contain consecutive dashes, and must be between 2 and
         * 60 characters in length. Search service names must be globally unique since they are part of the
         * service URI (https://<name>.search.windows.net). You cannot change the service name after the
         * service is created.
         * @param service The definition of the Search service to create or update.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, searchServiceName$$1, service, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                searchServiceName: searchServiceName$$1,
                service: service,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        return Services;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        requestBody: {
            parameterPath: "service",
            mapper: __assign({}, SearchService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SearchService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {
                bodyMapper: SearchService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {},
            204: {},
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        responses: {
            200: {
                bodyMapper: SearchServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Search/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign({}, CheckNameAvailabilityInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityOutput
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
        urlParameters: [
            resourceGroupName,
            searchServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage,
            clientRequestId
        ],
        requestBody: {
            parameterPath: "service",
            mapper: __assign({}, SearchService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: SearchService
            },
            201: {
                bodyMapper: SearchService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-search";
    var packageVersion = "1.1.0";
    var SearchManagementClientContext = /** @class */ (function (_super) {
        __extends(SearchManagementClientContext, _super);
        /**
         * Initializes a new instance of the SearchManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The unique identifier for a Microsoft Azure subscription. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param [options] The parameter options
         */
        function SearchManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2015-08-19';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SearchManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SearchManagementClient = /** @class */ (function (_super) {
        __extends(SearchManagementClient, _super);
        /**
         * Initializes a new instance of the SearchManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The unique identifier for a Microsoft Azure subscription. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param [options] The parameter options
         */
        function SearchManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.adminKeys = new AdminKeys(_this);
            _this.queryKeys = new QueryKeys(_this);
            _this.services = new Services(_this);
            return _this;
        }
        return SearchManagementClient;
    }(SearchManagementClientContext));

    exports.SearchManagementClient = SearchManagementClient;
    exports.SearchManagementClientContext = SearchManagementClientContext;
    exports.SearchManagementModels = index;
    exports.SearchManagementMappers = mappers;
    exports.Operations = Operations;
    exports.AdminKeys = AdminKeys;
    exports.QueryKeys = QueryKeys;
    exports.Services = Services;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-search.js.map
