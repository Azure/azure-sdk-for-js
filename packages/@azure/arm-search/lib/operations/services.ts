/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/servicesMappers";
import * as Parameters from "../models/parameters";
import { SearchManagementClientContext } from "../searchManagementClientContext";

/** Class representing a Services. */
export class Services {
  private readonly client: SearchManagementClientContext;

  /**
   * Create a Services.
   * @param {SearchManagementClientContext} client Reference to the service client.
   */
  constructor(client: SearchManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates a Search service in the given resource group. If the Search service already
   * exists, all properties will be updated with the given values.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service to create or update. Search
   * service names must only contain lowercase letters, digits or dashes, cannot use dash as the
   * first two or last one characters, cannot contain consecutive dashes, and must be between 2 and
   * 60 characters in length. Search service names must be globally unique since they are part of the
   * service URI (https://<name>.search.windows.net). You cannot change the service name after the
   * service is created.
   * @param service The definition of the Search service to create or update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, searchServiceName: string, service: Models.SearchService, options?: Models.ServicesCreateOrUpdateOptionalParams): Promise<Models.ServicesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,searchServiceName,service,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServicesCreateOrUpdateResponse>;
  }

  /**
   * Updates an existing Search service in the given resource group.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service to update.
   * @param service The definition of the Search service to update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesUpdateResponse>
   */
  update(resourceGroupName: string, searchServiceName: string, service: Models.SearchService, options?: Models.ServicesUpdateOptionalParams): Promise<Models.ServicesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service to update.
   * @param service The definition of the Search service to update.
   * @param callback The callback
   */
  update(resourceGroupName: string, searchServiceName: string, service: Models.SearchService, callback: msRest.ServiceCallback<Models.SearchService>): void;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service to update.
   * @param service The definition of the Search service to update.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, searchServiceName: string, service: Models.SearchService, options: Models.ServicesUpdateOptionalParams, callback: msRest.ServiceCallback<Models.SearchService>): void;
  update(resourceGroupName: string, searchServiceName: string, service: Models.SearchService, options?: Models.ServicesUpdateOptionalParams | msRest.ServiceCallback<Models.SearchService>, callback?: msRest.ServiceCallback<Models.SearchService>): Promise<Models.ServicesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        searchServiceName,
        service,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ServicesUpdateResponse>;
  }

  /**
   * Gets the Search service with the given name in the given resource group.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service associated with the specified
   * resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesGetResponse>
   */
  get(resourceGroupName: string, searchServiceName: string, options?: Models.ServicesGetOptionalParams): Promise<Models.ServicesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service associated with the specified
   * resource group.
   * @param callback The callback
   */
  get(resourceGroupName: string, searchServiceName: string, callback: msRest.ServiceCallback<Models.SearchService>): void;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service associated with the specified
   * resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, searchServiceName: string, options: Models.ServicesGetOptionalParams, callback: msRest.ServiceCallback<Models.SearchService>): void;
  get(resourceGroupName: string, searchServiceName: string, options?: Models.ServicesGetOptionalParams | msRest.ServiceCallback<Models.SearchService>, callback?: msRest.ServiceCallback<Models.SearchService>): Promise<Models.ServicesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        searchServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ServicesGetResponse>;
  }

  /**
   * Deletes a Search service in the given resource group, along with its associated resources.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service associated with the specified
   * resource group.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, searchServiceName: string, options?: Models.ServicesDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service associated with the specified
   * resource group.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, searchServiceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service associated with the specified
   * resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, searchServiceName: string, options: Models.ServicesDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, searchServiceName: string, options?: Models.ServicesDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        searchServiceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets a list of all Search services in the given resource group.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.ServicesListByResourceGroupOptionalParams): Promise<Models.ServicesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SearchServiceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.ServicesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.SearchServiceListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.ServicesListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.SearchServiceListResult>, callback?: msRest.ServiceCallback<Models.SearchServiceListResult>): Promise<Models.ServicesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ServicesListByResourceGroupResponse>;
  }

  /**
   * Checks whether or not the given Search service name is available for use. Search service names
   * must be globally unique since they are part of the service URI
   * (https://<name>.search.windows.net).
   * @param name The Search service name to validate. Search service names must only contain
   * lowercase letters, digits or dashes, cannot use dash as the first two or last one characters,
   * cannot contain consecutive dashes, and must be between 2 and 60 characters in length.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesCheckNameAvailabilityResponse>
   */
  checkNameAvailability(name: string, options?: Models.ServicesCheckNameAvailabilityOptionalParams): Promise<Models.ServicesCheckNameAvailabilityResponse>;
  /**
   * @param name The Search service name to validate. Search service names must only contain
   * lowercase letters, digits or dashes, cannot use dash as the first two or last one characters,
   * cannot contain consecutive dashes, and must be between 2 and 60 characters in length.
   * @param callback The callback
   */
  checkNameAvailability(name: string, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): void;
  /**
   * @param name The Search service name to validate. Search service names must only contain
   * lowercase letters, digits or dashes, cannot use dash as the first two or last one characters,
   * cannot contain consecutive dashes, and must be between 2 and 60 characters in length.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(name: string, options: Models.ServicesCheckNameAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): void;
  checkNameAvailability(name: string, options?: Models.ServicesCheckNameAvailabilityOptionalParams | msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityOutput>): Promise<Models.ServicesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.ServicesCheckNameAvailabilityResponse>;
  }

  /**
   * Creates or updates a Search service in the given resource group. If the Search service already
   * exists, all properties will be updated with the given values.
   * @param resourceGroupName The name of the resource group within the current subscription. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param searchServiceName The name of the Azure Search service to create or update. Search
   * service names must only contain lowercase letters, digits or dashes, cannot use dash as the
   * first two or last one characters, cannot contain consecutive dashes, and must be between 2 and
   * 60 characters in length. Search service names must be globally unique since they are part of the
   * service URI (https://<name>.search.windows.net). You cannot change the service name after the
   * service is created.
   * @param service The definition of the Search service to create or update.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, searchServiceName: string, service: Models.SearchService, options?: Models.ServicesBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        searchServiceName,
        service,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId
  ],
  requestBody: {
    parameterPath: "service",
    mapper: {
      ...Mappers.SearchService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SearchService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SearchService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId
  ],
  responses: {
    200: {},
    204: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SearchServiceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Search/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId
  ],
  requestBody: {
    parameterPath: {
      name: "name"
    },
    mapper: {
      ...Mappers.CheckNameAvailabilityInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.searchServiceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId
  ],
  requestBody: {
    parameterPath: "service",
    mapper: {
      ...Mappers.SearchService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SearchService
    },
    201: {
      bodyMapper: Mappers.SearchService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
