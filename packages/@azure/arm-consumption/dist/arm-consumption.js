/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmConsumption = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for BillingFrequency.
     * Possible values include: 'Month', 'Quarter', 'Year'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: BillingFrequency =
     * <BillingFrequency>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var BillingFrequency;
    (function (BillingFrequency) {
        BillingFrequency["Month"] = "Month";
        BillingFrequency["Quarter"] = "Quarter";
        BillingFrequency["Year"] = "Year";
    })(BillingFrequency || (BillingFrequency = {}));
    /**
     * Defines values for CategoryType.
     * Possible values include: 'Cost', 'Usage'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: CategoryType =
     * <CategoryType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var CategoryType;
    (function (CategoryType) {
        CategoryType["Cost"] = "Cost";
        CategoryType["Usage"] = "Usage";
    })(CategoryType || (CategoryType = {}));
    /**
     * Defines values for TimeGrainType.
     * Possible values include: 'Monthly', 'Quarterly', 'Annually'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TimeGrainType =
     * <TimeGrainType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TimeGrainType;
    (function (TimeGrainType) {
        TimeGrainType["Monthly"] = "Monthly";
        TimeGrainType["Quarterly"] = "Quarterly";
        TimeGrainType["Annually"] = "Annually";
    })(TimeGrainType || (TimeGrainType = {}));
    /**
     * Defines values for OperatorType.
     * Possible values include: 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperatorType =
     * <OperatorType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperatorType;
    (function (OperatorType) {
        OperatorType["EqualTo"] = "EqualTo";
        OperatorType["GreaterThan"] = "GreaterThan";
        OperatorType["GreaterThanOrEqualTo"] = "GreaterThanOrEqualTo";
    })(OperatorType || (OperatorType = {}));
    /**
     * Defines values for Grain.
     * Possible values include: 'Daily', 'Monthly', 'Yearly'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Grain = <Grain>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Grain;
    (function (Grain) {
        Grain["Daily"] = "Daily";
        Grain["Monthly"] = "Monthly";
        Grain["Yearly"] = "Yearly";
    })(Grain || (Grain = {}));
    /**
     * Defines values for ChargeType.
     * Possible values include: 'Actual', 'Forecast'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ChargeType = <ChargeType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ChargeType;
    (function (ChargeType) {
        ChargeType["Actual"] = "Actual";
        ChargeType["Forecast"] = "Forecast";
    })(ChargeType || (ChargeType = {}));
    /**
     * Defines values for Bound.
     * Possible values include: 'Upper', 'Lower'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Bound = <Bound>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Bound;
    (function (Bound) {
        Bound["Upper"] = "Upper";
        Bound["Lower"] = "Lower";
    })(Bound || (Bound = {}));
    /**
     * Defines values for Datagrain.
     * Possible values include: 'DailyGrain', 'MonthlyGrain'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Datagrain = <Datagrain>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Datagrain;
    (function (Datagrain) {
        /**
         * Daily grain of data
         */
        Datagrain["DailyGrain"] = "daily";
        /**
         * Monthly grain of data
         */
        Datagrain["MonthlyGrain"] = "monthly";
    })(Datagrain || (Datagrain = {}));

    var index = /*#__PURE__*/Object.freeze({
        get BillingFrequency () { return BillingFrequency; },
        get CategoryType () { return CategoryType; },
        get TimeGrainType () { return TimeGrainType; },
        get OperatorType () { return OperatorType; },
        get Grain () { return Grain; },
        get ChargeType () { return ChargeType; },
        get Bound () { return Bound; },
        get Datagrain () { return Datagrain; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var MeterDetails = {
        serializedName: "MeterDetails",
        type: {
            name: "Composite",
            className: "MeterDetails",
            modelProperties: {
                meterName: {
                    readOnly: true,
                    serializedName: "meterName",
                    type: {
                        name: "String"
                    }
                },
                meterCategory: {
                    readOnly: true,
                    serializedName: "meterCategory",
                    type: {
                        name: "String"
                    }
                },
                meterSubCategory: {
                    readOnly: true,
                    serializedName: "meterSubCategory",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                meterLocation: {
                    readOnly: true,
                    serializedName: "meterLocation",
                    type: {
                        name: "String"
                    }
                },
                totalIncludedQuantity: {
                    readOnly: true,
                    serializedName: "totalIncludedQuantity",
                    type: {
                        name: "Number"
                    }
                },
                pretaxStandardRate: {
                    readOnly: true,
                    serializedName: "pretaxStandardRate",
                    type: {
                        name: "Number"
                    }
                },
                serviceName: {
                    readOnly: true,
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                },
                serviceTier: {
                    readOnly: true,
                    serializedName: "serviceTier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var UsageDetail = {
        serializedName: "UsageDetail",
        type: {
            name: "Composite",
            className: "UsageDetail",
            modelProperties: __assign({}, Resource.type.modelProperties, { billingPeriodId: {
                    readOnly: true,
                    serializedName: "properties.billingPeriodId",
                    type: {
                        name: "String"
                    }
                }, invoiceId: {
                    readOnly: true,
                    serializedName: "properties.invoiceId",
                    type: {
                        name: "String"
                    }
                }, usageStart: {
                    readOnly: true,
                    serializedName: "properties.usageStart",
                    type: {
                        name: "DateTime"
                    }
                }, usageEnd: {
                    readOnly: true,
                    serializedName: "properties.usageEnd",
                    type: {
                        name: "DateTime"
                    }
                }, instanceName: {
                    readOnly: true,
                    serializedName: "properties.instanceName",
                    type: {
                        name: "String"
                    }
                }, instanceId: {
                    readOnly: true,
                    serializedName: "properties.instanceId",
                    type: {
                        name: "String"
                    }
                }, instanceLocation: {
                    readOnly: true,
                    serializedName: "properties.instanceLocation",
                    type: {
                        name: "String"
                    }
                }, currency: {
                    readOnly: true,
                    serializedName: "properties.currency",
                    type: {
                        name: "String"
                    }
                }, usageQuantity: {
                    readOnly: true,
                    serializedName: "properties.usageQuantity",
                    type: {
                        name: "Number"
                    }
                }, billableQuantity: {
                    readOnly: true,
                    serializedName: "properties.billableQuantity",
                    type: {
                        name: "Number"
                    }
                }, pretaxCost: {
                    readOnly: true,
                    serializedName: "properties.pretaxCost",
                    type: {
                        name: "Number"
                    }
                }, isEstimated: {
                    readOnly: true,
                    serializedName: "properties.isEstimated",
                    type: {
                        name: "Boolean"
                    }
                }, meterId: {
                    readOnly: true,
                    serializedName: "properties.meterId",
                    type: {
                        name: "Uuid"
                    }
                }, meterDetails: {
                    readOnly: true,
                    serializedName: "properties.meterDetails",
                    type: {
                        name: "Composite",
                        className: "MeterDetails"
                    }
                }, subscriptionGuid: {
                    readOnly: true,
                    serializedName: "properties.subscriptionGuid",
                    type: {
                        name: "Uuid"
                    }
                }, subscriptionName: {
                    readOnly: true,
                    serializedName: "properties.subscriptionName",
                    type: {
                        name: "String"
                    }
                }, accountName: {
                    readOnly: true,
                    serializedName: "properties.accountName",
                    type: {
                        name: "String"
                    }
                }, departmentName: {
                    readOnly: true,
                    serializedName: "properties.departmentName",
                    type: {
                        name: "String"
                    }
                }, product: {
                    readOnly: true,
                    serializedName: "properties.product",
                    type: {
                        name: "String"
                    }
                }, consumedService: {
                    readOnly: true,
                    serializedName: "properties.consumedService",
                    type: {
                        name: "String"
                    }
                }, costCenter: {
                    readOnly: true,
                    serializedName: "properties.costCenter",
                    type: {
                        name: "String"
                    }
                }, partNumber: {
                    readOnly: true,
                    serializedName: "properties.partNumber",
                    type: {
                        name: "String"
                    }
                }, resourceGuid: {
                    readOnly: true,
                    serializedName: "properties.resourceGuid",
                    type: {
                        name: "String"
                    }
                }, offerId: {
                    readOnly: true,
                    serializedName: "properties.offerId",
                    type: {
                        name: "String"
                    }
                }, chargesBilledSeparately: {
                    readOnly: true,
                    serializedName: "properties.chargesBilledSeparately",
                    type: {
                        name: "Boolean"
                    }
                }, location: {
                    readOnly: true,
                    serializedName: "properties.location",
                    type: {
                        name: "String"
                    }
                }, additionalProperties: {
                    readOnly: true,
                    serializedName: "properties.additionalProperties",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Marketplace = {
        serializedName: "Marketplace",
        type: {
            name: "Composite",
            className: "Marketplace",
            modelProperties: __assign({}, Resource.type.modelProperties, { billingPeriodId: {
                    readOnly: true,
                    serializedName: "properties.billingPeriodId",
                    type: {
                        name: "String"
                    }
                }, usageStart: {
                    readOnly: true,
                    serializedName: "properties.usageStart",
                    type: {
                        name: "DateTime"
                    }
                }, usageEnd: {
                    readOnly: true,
                    serializedName: "properties.usageEnd",
                    type: {
                        name: "DateTime"
                    }
                }, resourceRate: {
                    readOnly: true,
                    serializedName: "properties.resourceRate",
                    type: {
                        name: "Number"
                    }
                }, offerName: {
                    readOnly: true,
                    serializedName: "properties.offerName",
                    type: {
                        name: "String"
                    }
                }, resourceGroup: {
                    readOnly: true,
                    serializedName: "properties.resourceGroup",
                    type: {
                        name: "String"
                    }
                }, orderNumber: {
                    readOnly: true,
                    serializedName: "properties.orderNumber",
                    type: {
                        name: "String"
                    }
                }, instanceName: {
                    readOnly: true,
                    serializedName: "properties.instanceName",
                    type: {
                        name: "String"
                    }
                }, instanceId: {
                    readOnly: true,
                    serializedName: "properties.instanceId",
                    type: {
                        name: "String"
                    }
                }, currency: {
                    readOnly: true,
                    serializedName: "properties.currency",
                    type: {
                        name: "String"
                    }
                }, consumedQuantity: {
                    readOnly: true,
                    serializedName: "properties.consumedQuantity",
                    type: {
                        name: "Number"
                    }
                }, unitOfMeasure: {
                    readOnly: true,
                    serializedName: "properties.unitOfMeasure",
                    type: {
                        name: "String"
                    }
                }, pretaxCost: {
                    readOnly: true,
                    serializedName: "properties.pretaxCost",
                    type: {
                        name: "Number"
                    }
                }, isEstimated: {
                    readOnly: true,
                    serializedName: "properties.isEstimated",
                    type: {
                        name: "Boolean"
                    }
                }, meterId: {
                    readOnly: true,
                    serializedName: "properties.meterId",
                    type: {
                        name: "Uuid"
                    }
                }, subscriptionGuid: {
                    readOnly: true,
                    serializedName: "properties.subscriptionGuid",
                    type: {
                        name: "Uuid"
                    }
                }, subscriptionName: {
                    readOnly: true,
                    serializedName: "properties.subscriptionName",
                    type: {
                        name: "String"
                    }
                }, accountName: {
                    readOnly: true,
                    serializedName: "properties.accountName",
                    type: {
                        name: "String"
                    }
                }, departmentName: {
                    readOnly: true,
                    serializedName: "properties.departmentName",
                    type: {
                        name: "String"
                    }
                }, consumedService: {
                    readOnly: true,
                    serializedName: "properties.consumedService",
                    type: {
                        name: "String"
                    }
                }, costCenter: {
                    readOnly: true,
                    serializedName: "properties.costCenter",
                    type: {
                        name: "String"
                    }
                }, additionalProperties: {
                    readOnly: true,
                    serializedName: "properties.additionalProperties",
                    type: {
                        name: "String"
                    }
                }, publisherName: {
                    readOnly: true,
                    serializedName: "properties.publisherName",
                    type: {
                        name: "String"
                    }
                }, planName: {
                    readOnly: true,
                    serializedName: "properties.planName",
                    type: {
                        name: "String"
                    }
                }, isRecurringCharge: {
                    readOnly: true,
                    serializedName: "properties.isRecurringCharge",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var BalancePropertiesNewPurchasesDetailsItem = {
        serializedName: "BalanceProperties_newPurchasesDetailsItem",
        type: {
            name: "Composite",
            className: "BalancePropertiesNewPurchasesDetailsItem",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BalancePropertiesAdjustmentDetailsItem = {
        serializedName: "BalanceProperties_adjustmentDetailsItem",
        type: {
            name: "Composite",
            className: "BalancePropertiesAdjustmentDetailsItem",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Balance = {
        serializedName: "Balance",
        type: {
            name: "Composite",
            className: "Balance",
            modelProperties: __assign({}, Resource.type.modelProperties, { currency: {
                    readOnly: true,
                    serializedName: "properties.currency",
                    type: {
                        name: "String"
                    }
                }, beginningBalance: {
                    readOnly: true,
                    serializedName: "properties.beginningBalance",
                    type: {
                        name: "Number"
                    }
                }, endingBalance: {
                    readOnly: true,
                    serializedName: "properties.endingBalance",
                    type: {
                        name: "Number"
                    }
                }, newPurchases: {
                    readOnly: true,
                    serializedName: "properties.newPurchases",
                    type: {
                        name: "Number"
                    }
                }, adjustments: {
                    readOnly: true,
                    serializedName: "properties.adjustments",
                    type: {
                        name: "Number"
                    }
                }, utilized: {
                    readOnly: true,
                    serializedName: "properties.utilized",
                    type: {
                        name: "Number"
                    }
                }, serviceOverage: {
                    readOnly: true,
                    serializedName: "properties.serviceOverage",
                    type: {
                        name: "Number"
                    }
                }, chargesBilledSeparately: {
                    readOnly: true,
                    serializedName: "properties.chargesBilledSeparately",
                    type: {
                        name: "Number"
                    }
                }, totalOverage: {
                    readOnly: true,
                    serializedName: "properties.totalOverage",
                    type: {
                        name: "Number"
                    }
                }, totalUsage: {
                    readOnly: true,
                    serializedName: "properties.totalUsage",
                    type: {
                        name: "Number"
                    }
                }, azureMarketplaceServiceCharges: {
                    readOnly: true,
                    serializedName: "properties.azureMarketplaceServiceCharges",
                    type: {
                        name: "Number"
                    }
                }, billingFrequency: {
                    serializedName: "properties.billingFrequency",
                    type: {
                        name: "String"
                    }
                }, priceHidden: {
                    readOnly: true,
                    serializedName: "properties.priceHidden",
                    type: {
                        name: "Boolean"
                    }
                }, newPurchasesDetails: {
                    readOnly: true,
                    serializedName: "properties.newPurchasesDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BalancePropertiesNewPurchasesDetailsItem"
                            }
                        }
                    }
                }, adjustmentDetails: {
                    readOnly: true,
                    serializedName: "properties.adjustmentDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BalancePropertiesAdjustmentDetailsItem"
                            }
                        }
                    }
                } })
        }
    };
    var ReservationSummary = {
        serializedName: "ReservationSummary",
        type: {
            name: "Composite",
            className: "ReservationSummary",
            modelProperties: __assign({}, Resource.type.modelProperties, { reservationOrderId: {
                    readOnly: true,
                    serializedName: "properties.reservationOrderId",
                    type: {
                        name: "String"
                    }
                }, reservationId: {
                    readOnly: true,
                    serializedName: "properties.reservationId",
                    type: {
                        name: "String"
                    }
                }, skuName: {
                    readOnly: true,
                    serializedName: "properties.skuName",
                    type: {
                        name: "String"
                    }
                }, reservedHours: {
                    readOnly: true,
                    serializedName: "properties.reservedHours",
                    type: {
                        name: "Number"
                    }
                }, usageDate: {
                    readOnly: true,
                    serializedName: "properties.usageDate",
                    type: {
                        name: "DateTime"
                    }
                }, usedHours: {
                    readOnly: true,
                    serializedName: "properties.usedHours",
                    type: {
                        name: "Number"
                    }
                }, minUtilizationPercentage: {
                    readOnly: true,
                    serializedName: "properties.minUtilizationPercentage",
                    type: {
                        name: "Number"
                    }
                }, avgUtilizationPercentage: {
                    readOnly: true,
                    serializedName: "properties.avgUtilizationPercentage",
                    type: {
                        name: "Number"
                    }
                }, maxUtilizationPercentage: {
                    readOnly: true,
                    serializedName: "properties.maxUtilizationPercentage",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ReservationDetail = {
        serializedName: "ReservationDetail",
        type: {
            name: "Composite",
            className: "ReservationDetail",
            modelProperties: __assign({}, Resource.type.modelProperties, { reservationOrderId: {
                    readOnly: true,
                    serializedName: "properties.reservationOrderId",
                    type: {
                        name: "String"
                    }
                }, reservationId: {
                    readOnly: true,
                    serializedName: "properties.reservationId",
                    type: {
                        name: "String"
                    }
                }, skuName: {
                    readOnly: true,
                    serializedName: "properties.skuName",
                    type: {
                        name: "String"
                    }
                }, reservedHours: {
                    readOnly: true,
                    serializedName: "properties.reservedHours",
                    type: {
                        name: "Number"
                    }
                }, usageDate: {
                    readOnly: true,
                    serializedName: "properties.usageDate",
                    type: {
                        name: "DateTime"
                    }
                }, usedHours: {
                    readOnly: true,
                    serializedName: "properties.usedHours",
                    type: {
                        name: "Number"
                    }
                }, instanceId: {
                    readOnly: true,
                    serializedName: "properties.instanceId",
                    type: {
                        name: "String"
                    }
                }, totalReservedQuantity: {
                    readOnly: true,
                    serializedName: "properties.totalReservedQuantity",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ReservationRecommendation = {
        serializedName: "ReservationRecommendation",
        type: {
            name: "Composite",
            className: "ReservationRecommendation",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                },
                lookBackPeriod: {
                    readOnly: true,
                    serializedName: "properties.lookBackPeriod",
                    type: {
                        name: "String"
                    }
                },
                meterId: {
                    readOnly: true,
                    serializedName: "properties.meterId",
                    type: {
                        name: "Uuid"
                    }
                },
                term: {
                    readOnly: true,
                    serializedName: "properties.term",
                    type: {
                        name: "String"
                    }
                },
                costWithNoReservedInstances: {
                    readOnly: true,
                    serializedName: "properties.costWithNoReservedInstances",
                    type: {
                        name: "Number"
                    }
                },
                recommendedQuantity: {
                    readOnly: true,
                    serializedName: "properties.recommendedQuantity",
                    type: {
                        name: "Number"
                    }
                },
                totalCostWithReservedInstances: {
                    readOnly: true,
                    serializedName: "properties.totalCostWithReservedInstances",
                    type: {
                        name: "Number"
                    }
                },
                netSavings: {
                    readOnly: true,
                    serializedName: "properties.netSavings",
                    type: {
                        name: "Number"
                    }
                },
                firstUsageDate: {
                    readOnly: true,
                    serializedName: "properties.firstUsageDate",
                    type: {
                        name: "DateTime"
                    }
                },
                scope: {
                    readOnly: true,
                    serializedName: "properties.scope",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Tag = {
        serializedName: "Tag",
        type: {
            name: "Composite",
            className: "Tag",
            modelProperties: {
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                eTag: {
                    serializedName: "eTag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagsResult = {
        serializedName: "TagsResult",
        type: {
            name: "Composite",
            className: "TagsResult",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { tags: {
                    serializedName: "properties.tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Tag"
                            }
                        }
                    }
                } })
        }
    };
    var BudgetTimePeriod = {
        serializedName: "BudgetTimePeriod",
        type: {
            name: "Composite",
            className: "BudgetTimePeriod",
            modelProperties: {
                startDate: {
                    required: true,
                    serializedName: "startDate",
                    type: {
                        name: "DateTime"
                    }
                },
                endDate: {
                    serializedName: "endDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var Filters = {
        serializedName: "Filters",
        type: {
            name: "Composite",
            className: "Filters",
            modelProperties: {
                resourceGroups: {
                    serializedName: "resourceGroups",
                    constraints: {
                        MaxItems: 10,
                        MinItems: 0
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                resources: {
                    serializedName: "resources",
                    constraints: {
                        MaxItems: 10,
                        MinItems: 0
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                meters: {
                    serializedName: "meters",
                    constraints: {
                        MaxItems: 10,
                        MinItems: 0
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var CurrentSpend = {
        serializedName: "CurrentSpend",
        type: {
            name: "Composite",
            className: "CurrentSpend",
            modelProperties: {
                amount: {
                    readOnly: true,
                    serializedName: "amount",
                    type: {
                        name: "Number"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Notification = {
        serializedName: "Notification",
        type: {
            name: "Composite",
            className: "Notification",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                operator: {
                    required: true,
                    serializedName: "operator",
                    type: {
                        name: "String"
                    }
                },
                threshold: {
                    required: true,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                },
                contactEmails: {
                    required: true,
                    serializedName: "contactEmails",
                    constraints: {
                        MaxItems: 50,
                        MinItems: 1
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                contactRoles: {
                    serializedName: "contactRoles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                contactGroups: {
                    serializedName: "contactGroups",
                    constraints: {
                        MaxItems: 50,
                        MinItems: 0
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Budget = {
        serializedName: "Budget",
        type: {
            name: "Composite",
            className: "Budget",
            modelProperties: __assign({}, ProxyResource.type.modelProperties, { category: {
                    required: true,
                    serializedName: "properties.category",
                    type: {
                        name: "String"
                    }
                }, amount: {
                    required: true,
                    serializedName: "properties.amount",
                    type: {
                        name: "Number"
                    }
                }, timeGrain: {
                    required: true,
                    serializedName: "properties.timeGrain",
                    type: {
                        name: "String"
                    }
                }, timePeriod: {
                    required: true,
                    serializedName: "properties.timePeriod",
                    type: {
                        name: "Composite",
                        className: "BudgetTimePeriod"
                    }
                }, filters: {
                    serializedName: "properties.filters",
                    type: {
                        name: "Composite",
                        className: "Filters"
                    }
                }, currentSpend: {
                    readOnly: true,
                    serializedName: "properties.currentSpend",
                    type: {
                        name: "Composite",
                        className: "CurrentSpend"
                    }
                }, notifications: {
                    serializedName: "properties.notifications",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "Notification"
                            }
                        }
                    }
                } })
        }
    };
    var PriceSheetProperties = {
        serializedName: "PriceSheetProperties",
        type: {
            name: "Composite",
            className: "PriceSheetProperties",
            modelProperties: {
                billingPeriodId: {
                    readOnly: true,
                    serializedName: "billingPeriodId",
                    type: {
                        name: "String"
                    }
                },
                meterId: {
                    readOnly: true,
                    serializedName: "meterId",
                    type: {
                        name: "Uuid"
                    }
                },
                meterDetails: {
                    readOnly: true,
                    serializedName: "meterDetails",
                    type: {
                        name: "Composite",
                        className: "MeterDetails"
                    }
                },
                unitOfMeasure: {
                    readOnly: true,
                    serializedName: "unitOfMeasure",
                    type: {
                        name: "String"
                    }
                },
                includedQuantity: {
                    readOnly: true,
                    serializedName: "includedQuantity",
                    type: {
                        name: "Number"
                    }
                },
                partNumber: {
                    readOnly: true,
                    serializedName: "partNumber",
                    type: {
                        name: "String"
                    }
                },
                unitPrice: {
                    readOnly: true,
                    serializedName: "unitPrice",
                    type: {
                        name: "Number"
                    }
                },
                currencyCode: {
                    readOnly: true,
                    serializedName: "currencyCode",
                    type: {
                        name: "String"
                    }
                },
                offerId: {
                    readOnly: true,
                    serializedName: "offerId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PriceSheetResult = {
        serializedName: "PriceSheetResult",
        type: {
            name: "Composite",
            className: "PriceSheetResult",
            modelProperties: __assign({}, Resource.type.modelProperties, { pricesheets: {
                    readOnly: true,
                    serializedName: "properties.pricesheets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PriceSheetProperties"
                            }
                        }
                    }
                }, nextLink: {
                    readOnly: true,
                    serializedName: "properties.nextLink",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ForecastPropertiesConfidenceLevelsItem = {
        serializedName: "ForecastProperties_confidenceLevelsItem",
        type: {
            name: "Composite",
            className: "ForecastPropertiesConfidenceLevelsItem",
            modelProperties: {
                percentage: {
                    readOnly: true,
                    serializedName: "percentage",
                    type: {
                        name: "Number"
                    }
                },
                bound: {
                    serializedName: "bound",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Forecast = {
        serializedName: "Forecast",
        type: {
            name: "Composite",
            className: "Forecast",
            modelProperties: __assign({}, Resource.type.modelProperties, { usageDate: {
                    readOnly: true,
                    serializedName: "properties.usageDate",
                    type: {
                        name: "String"
                    }
                }, grain: {
                    serializedName: "properties.grain",
                    type: {
                        name: "String"
                    }
                }, charge: {
                    readOnly: true,
                    serializedName: "properties.charge",
                    type: {
                        name: "Number"
                    }
                }, currency: {
                    readOnly: true,
                    serializedName: "properties.currency",
                    type: {
                        name: "String"
                    }
                }, chargeType: {
                    serializedName: "properties.chargeType",
                    type: {
                        name: "String"
                    }
                }, confidenceLevels: {
                    readOnly: true,
                    serializedName: "properties.confidenceLevels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ForecastPropertiesConfidenceLevelsItem"
                            }
                        }
                    }
                } })
        }
    };
    var ManagementGroupAggregatedCostResult = {
        serializedName: "ManagementGroupAggregatedCostResult",
        type: {
            name: "Composite",
            className: "ManagementGroupAggregatedCostResult",
            modelProperties: __assign({}, Resource.type.modelProperties, { billingPeriodId: {
                    readOnly: true,
                    serializedName: "properties.billingPeriodId",
                    type: {
                        name: "String"
                    }
                }, usageStart: {
                    readOnly: true,
                    serializedName: "properties.usageStart",
                    type: {
                        name: "DateTime"
                    }
                }, usageEnd: {
                    readOnly: true,
                    serializedName: "properties.usageEnd",
                    type: {
                        name: "DateTime"
                    }
                }, azureCharges: {
                    readOnly: true,
                    serializedName: "properties.azureCharges",
                    type: {
                        name: "Number"
                    }
                }, marketplaceCharges: {
                    readOnly: true,
                    serializedName: "properties.marketplaceCharges",
                    type: {
                        name: "Number"
                    }
                }, chargesBilledSeparately: {
                    readOnly: true,
                    serializedName: "properties.chargesBilledSeparately",
                    type: {
                        name: "Number"
                    }
                }, currency: {
                    readOnly: true,
                    serializedName: "properties.currency",
                    type: {
                        name: "String"
                    }
                }, children: {
                    serializedName: "properties.children",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementGroupAggregatedCostResult"
                            }
                        }
                    }
                }, includedSubscriptions: {
                    serializedName: "properties.includedSubscriptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, excludedSubscriptions: {
                    serializedName: "properties.excludedSubscriptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ChargeSummary = {
        serializedName: "ChargeSummary",
        type: {
            name: "Composite",
            className: "ChargeSummary",
            modelProperties: __assign({}, Resource.type.modelProperties, { billingPeriodId: {
                    readOnly: true,
                    serializedName: "properties.billingPeriodId",
                    type: {
                        name: "String"
                    }
                }, usageStart: {
                    readOnly: true,
                    serializedName: "properties.usageStart",
                    type: {
                        name: "String"
                    }
                }, usageEnd: {
                    readOnly: true,
                    serializedName: "properties.usageEnd",
                    type: {
                        name: "String"
                    }
                }, azureCharges: {
                    readOnly: true,
                    serializedName: "properties.azureCharges",
                    type: {
                        name: "Number"
                    }
                }, chargesBilledSeparately: {
                    readOnly: true,
                    serializedName: "properties.chargesBilledSeparately",
                    type: {
                        name: "Number"
                    }
                }, marketplaceCharges: {
                    readOnly: true,
                    serializedName: "properties.marketplaceCharges",
                    type: {
                        name: "Number"
                    }
                }, currency: {
                    readOnly: true,
                    serializedName: "properties.currency",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ChargesListResult = {
        serializedName: "ChargesListResult",
        type: {
            name: "Composite",
            className: "ChargesListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ChargeSummary"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDetails"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ResourceAttributes = {
        serializedName: "ResourceAttributes",
        type: {
            name: "Composite",
            className: "ResourceAttributes",
            modelProperties: {
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryOptions = {
        type: {
            name: "Composite",
            className: "QueryOptions",
            modelProperties: {
                apply: {
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageDetailsListResult = {
        serializedName: "UsageDetailsListResult",
        type: {
            name: "Composite",
            className: "UsageDetailsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UsageDetail"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MarketplacesListResult = {
        serializedName: "MarketplacesListResult",
        type: {
            name: "Composite",
            className: "MarketplacesListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Marketplace"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationSummariesListResult = {
        serializedName: "ReservationSummariesListResult",
        type: {
            name: "Composite",
            className: "ReservationSummariesListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationSummary"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationDetailsListResult = {
        serializedName: "ReservationDetailsListResult",
        type: {
            name: "Composite",
            className: "ReservationDetailsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationDetail"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ReservationRecommendationsListResult = {
        serializedName: "ReservationRecommendationsListResult",
        type: {
            name: "Composite",
            className: "ReservationRecommendationsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReservationRecommendation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BudgetsListResult = {
        serializedName: "BudgetsListResult",
        type: {
            name: "Composite",
            className: "BudgetsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Budget"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ForecastsListResult = {
        serializedName: "ForecastsListResult",
        type: {
            name: "Composite",
            className: "ForecastsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Forecast"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        MeterDetails: MeterDetails,
        Resource: Resource,
        UsageDetail: UsageDetail,
        Marketplace: Marketplace,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        Balance: Balance,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        ReservationRecommendation: ReservationRecommendation,
        Tag: Tag,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification,
        Budget: Budget,
        PriceSheetProperties: PriceSheetProperties,
        PriceSheetResult: PriceSheetResult,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        Forecast: Forecast,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ChargesListResult: ChargesListResult,
        ErrorDetails: ErrorDetails,
        ErrorResponse: ErrorResponse,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ResourceAttributes: ResourceAttributes,
        QueryOptions: QueryOptions,
        UsageDetailsListResult: UsageDetailsListResult,
        MarketplacesListResult: MarketplacesListResult,
        ReservationSummariesListResult: ReservationSummariesListResult,
        ReservationDetailsListResult: ReservationDetailsListResult,
        ReservationRecommendationsListResult: ReservationRecommendationsListResult,
        BudgetsListResult: BudgetsListResult,
        ForecastsListResult: ForecastsListResult,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        UsageDetailsListResult: UsageDetailsListResult,
        UsageDetail: UsageDetail,
        Resource: Resource,
        BaseResource: BaseResource,
        MeterDetails: MeterDetails,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var apply = {
        parameterPath: [
            "options",
            "queryOptions",
            "apply"
        ],
        mapper: {
            serializedName: "$apply",
            type: {
                name: "String"
            }
        }
    };
    var billingAccountId = {
        parameterPath: "billingAccountId",
        mapper: {
            required: true,
            serializedName: "billingAccountId",
            type: {
                name: "String"
            }
        }
    };
    var billingPeriodName = {
        parameterPath: "billingPeriodName",
        mapper: {
            required: true,
            serializedName: "billingPeriodName",
            type: {
                name: "String"
            }
        }
    };
    var budgetName = {
        parameterPath: "budgetName",
        mapper: {
            required: true,
            serializedName: "budgetName",
            type: {
                name: "String"
            }
        }
    };
    var departmentId = {
        parameterPath: "departmentId",
        mapper: {
            required: true,
            serializedName: "departmentId",
            type: {
                name: "String"
            }
        }
    };
    var enrollmentAccountId = {
        parameterPath: "enrollmentAccountId",
        mapper: {
            required: true,
            serializedName: "enrollmentAccountId",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var filter0 = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var filter1 = {
        parameterPath: "filter",
        mapper: {
            required: true,
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var grain = {
        parameterPath: "grain",
        mapper: {
            required: true,
            serializedName: "grain",
            type: {
                name: "String"
            }
        }
    };
    var managementGroupId = {
        parameterPath: "managementGroupId",
        mapper: {
            required: true,
            serializedName: "managementGroupId",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var reservationId = {
        parameterPath: "reservationId",
        mapper: {
            required: true,
            serializedName: "reservationId",
            type: {
                name: "String"
            }
        }
    };
    var reservationOrderId = {
        parameterPath: "reservationOrderId",
        mapper: {
            required: true,
            serializedName: "reservationOrderId",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skiptoken = {
        parameterPath: [
            "options",
            "skiptoken"
        ],
        mapper: {
            serializedName: "$skiptoken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UsageDetails. */
    var UsageDetails = /** @class */ (function () {
        /**
         * Create a UsageDetails.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function UsageDetails(client) {
            this.client = client;
        }
        UsageDetails.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        UsageDetails.prototype.listByBillingPeriod = function (billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listByBillingPeriodOperationSpec, callback);
        };
        UsageDetails.prototype.listByBillingAccount = function (billingAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                options: options
            }, listByBillingAccountOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByBillingAccount = function (billingAccountId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByBillingAccountOperationSpec, callback);
        };
        UsageDetails.prototype.listByDepartment = function (departmentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                departmentId: departmentId$$1,
                options: options
            }, listByDepartmentOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByDepartment = function (departmentId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                departmentId: departmentId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByDepartmentOperationSpec, callback);
        };
        UsageDetails.prototype.listByEnrollmentAccount = function (enrollmentAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                enrollmentAccountId: enrollmentAccountId$$1,
                options: options
            }, listByEnrollmentAccountOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByEnrollmentAccount = function (enrollmentAccountId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                enrollmentAccountId: enrollmentAccountId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByEnrollmentAccountOperationSpec, callback);
        };
        UsageDetails.prototype.listByManagementGroup = function (managementGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                options: options
            }, listByManagementGroupOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByManagementGroup = function (managementGroupId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByManagementGroupOperationSpec, callback);
        };
        UsageDetails.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        UsageDetails.prototype.listByBillingPeriodNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBillingPeriodNextOperationSpec, callback);
        };
        UsageDetails.prototype.listByBillingAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBillingAccountNextOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByBillingAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByBillingAccountNextOperationSpec, callback);
        };
        UsageDetails.prototype.listByDepartmentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDepartmentNextOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByDepartmentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByDepartmentNextOperationSpec, callback);
        };
        UsageDetails.prototype.listByEnrollmentAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByEnrollmentAccountNextOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByEnrollmentAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByEnrollmentAccountNextOperationSpec, callback);
        };
        UsageDetails.prototype.listByManagementGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByManagementGroupNextOperationSpec, callback);
        };
        UsageDetails.prototype.listForBillingPeriodByManagementGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByManagementGroupNextOperationSpec, callback);
        };
        return UsageDetails;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByBillingPeriodOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            subscriptionId,
            billingPeriodName
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByBillingAccountOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            billingAccountId
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByBillingAccountOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            billingAccountId,
            billingPeriodName
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByDepartmentOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            departmentId
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByDepartmentOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            departmentId,
            billingPeriodName
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByEnrollmentAccountOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            enrollmentAccountId
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByEnrollmentAccountOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            enrollmentAccountId,
            billingPeriodName
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByManagementGroupOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            managementGroupId
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByManagementGroupOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails",
        urlParameters: [
            managementGroupId,
            billingPeriodName
        ],
        queryParameters: [
            expand,
            filter0,
            skiptoken,
            top,
            apiVersion,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByBillingPeriodNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByBillingAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByBillingAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByDepartmentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByDepartmentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByEnrollmentAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByEnrollmentAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByManagementGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listForBillingPeriodByManagementGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        MarketplacesListResult: MarketplacesListResult,
        Marketplace: Marketplace,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Marketplaces. */
    var Marketplaces = /** @class */ (function () {
        /**
         * Create a Marketplaces.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Marketplaces(client) {
            this.client = client;
        }
        Marketplaces.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByBillingPeriod = function (billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listByBillingPeriodOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByBillingAccount = function (billingAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                options: options
            }, listByBillingAccountOperationSpec$1, callback);
        };
        Marketplaces.prototype.listForBillingPeriodByBillingAccount = function (billingAccountId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByBillingAccountOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByDepartment = function (departmentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                departmentId: departmentId$$1,
                options: options
            }, listByDepartmentOperationSpec$1, callback);
        };
        Marketplaces.prototype.listForBillingPeriodByDepartment = function (departmentId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                departmentId: departmentId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByDepartmentOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByEnrollmentAccount = function (enrollmentAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                enrollmentAccountId: enrollmentAccountId$$1,
                options: options
            }, listByEnrollmentAccountOperationSpec$1, callback);
        };
        Marketplaces.prototype.listForBillingPeriodByEnrollmentAccount = function (enrollmentAccountId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                enrollmentAccountId: enrollmentAccountId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByEnrollmentAccountOperationSpec$1, callback);
        };
        Marketplaces.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByBillingPeriodNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBillingPeriodNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByBillingAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBillingAccountNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listForBillingPeriodByBillingAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByBillingAccountNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByDepartmentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDepartmentNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listForBillingPeriodByDepartmentNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByDepartmentNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listByEnrollmentAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByEnrollmentAccountNextOperationSpec$1, callback);
        };
        Marketplaces.prototype.listForBillingPeriodByEnrollmentAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForBillingPeriodByEnrollmentAccountNextOperationSpec$1, callback);
        };
        return Marketplaces;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByBillingPeriodOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            subscriptionId,
            billingPeriodName
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByBillingAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            billingAccountId
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForBillingPeriodByBillingAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            billingAccountId,
            billingPeriodName
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByDepartmentOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            departmentId
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForBillingPeriodByDepartmentOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            departmentId,
            billingPeriodName
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByEnrollmentAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            enrollmentAccountId
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForBillingPeriodByEnrollmentAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/marketplaces",
        urlParameters: [
            enrollmentAccountId,
            billingPeriodName
        ],
        queryParameters: [
            filter0,
            top,
            skiptoken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByBillingPeriodNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByBillingAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForBillingPeriodByBillingAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByDepartmentNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForBillingPeriodByDepartmentNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByEnrollmentAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForBillingPeriodByEnrollmentAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MarketplacesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        Balance: Balance,
        Resource: Resource,
        BaseResource: BaseResource,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Balances. */
    var Balances = /** @class */ (function () {
        /**
         * Create a Balances.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Balances(client) {
            this.client = client;
        }
        Balances.prototype.getByBillingAccount = function (billingAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                options: options
            }, getByBillingAccountOperationSpec, callback);
        };
        Balances.prototype.getForBillingPeriodByBillingAccount = function (billingAccountId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, getForBillingPeriodByBillingAccountOperationSpec, callback);
        };
        return Balances;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getByBillingAccountOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/balances",
        urlParameters: [
            billingAccountId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Balance
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getForBillingPeriodByBillingAccountOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/balances",
        urlParameters: [
            billingAccountId,
            billingPeriodName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Balance
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        ReservationSummariesListResult: ReservationSummariesListResult,
        ReservationSummary: ReservationSummary,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReservationsSummaries. */
    var ReservationsSummaries = /** @class */ (function () {
        /**
         * Create a ReservationsSummaries.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function ReservationsSummaries(client) {
            this.client = client;
        }
        ReservationsSummaries.prototype.listByReservationOrder = function (reservationOrderId$$1, grain$$1, options, callback) {
            return this.client.sendOperationRequest({
                reservationOrderId: reservationOrderId$$1,
                grain: grain$$1,
                options: options
            }, listByReservationOrderOperationSpec, callback);
        };
        ReservationsSummaries.prototype.listByReservationOrderAndReservation = function (reservationOrderId$$1, reservationId$$1, grain$$1, options, callback) {
            return this.client.sendOperationRequest({
                reservationOrderId: reservationOrderId$$1,
                reservationId: reservationId$$1,
                grain: grain$$1,
                options: options
            }, listByReservationOrderAndReservationOperationSpec, callback);
        };
        ReservationsSummaries.prototype.listByReservationOrderNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReservationOrderNextOperationSpec, callback);
        };
        ReservationsSummaries.prototype.listByReservationOrderAndReservationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReservationOrderAndReservationNextOperationSpec, callback);
        };
        return ReservationsSummaries;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByReservationOrderOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationSummaries",
        urlParameters: [
            reservationOrderId
        ],
        queryParameters: [
            grain,
            filter0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationSummariesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByReservationOrderAndReservationOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationSummaries",
        urlParameters: [
            reservationOrderId,
            reservationId
        ],
        queryParameters: [
            grain,
            filter0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationSummariesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByReservationOrderNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationSummariesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByReservationOrderAndReservationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationSummariesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        ReservationDetailsListResult: ReservationDetailsListResult,
        ReservationDetail: ReservationDetail,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReservationsDetails. */
    var ReservationsDetails = /** @class */ (function () {
        /**
         * Create a ReservationsDetails.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function ReservationsDetails(client) {
            this.client = client;
        }
        ReservationsDetails.prototype.listByReservationOrder = function (reservationOrderId$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                reservationOrderId: reservationOrderId$$1,
                filter: filter,
                options: options
            }, listByReservationOrderOperationSpec$1, callback);
        };
        ReservationsDetails.prototype.listByReservationOrderAndReservation = function (reservationOrderId$$1, reservationId$$1, filter, options, callback) {
            return this.client.sendOperationRequest({
                reservationOrderId: reservationOrderId$$1,
                reservationId: reservationId$$1,
                filter: filter,
                options: options
            }, listByReservationOrderAndReservationOperationSpec$1, callback);
        };
        ReservationsDetails.prototype.listByReservationOrderNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReservationOrderNextOperationSpec$1, callback);
        };
        ReservationsDetails.prototype.listByReservationOrderAndReservationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByReservationOrderAndReservationNextOperationSpec$1, callback);
        };
        return ReservationsDetails;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByReservationOrderOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationDetails",
        urlParameters: [
            reservationOrderId
        ],
        queryParameters: [
            filter1,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listByReservationOrderAndReservationOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationDetails",
        urlParameters: [
            reservationOrderId,
            reservationId
        ],
        queryParameters: [
            filter1,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listByReservationOrderNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listByReservationOrderAndReservationNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationDetailsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ReservationRecommendationsListResult: ReservationRecommendationsListResult,
        ReservationRecommendation: ReservationRecommendation,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ReservationRecommendations. */
    var ReservationRecommendations = /** @class */ (function () {
        /**
         * Create a ReservationRecommendations.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function ReservationRecommendations(client) {
            this.client = client;
        }
        ReservationRecommendations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        ReservationRecommendations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return ReservationRecommendations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/reservationRecommendations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationRecommendationsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ReservationRecommendationsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        BudgetsListResult: BudgetsListResult,
        Budget: Budget,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        TagsResult: TagsResult,
        Tag: Tag,
        Resource: Resource,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Budgets. */
    var Budgets = /** @class */ (function () {
        /**
         * Create a Budgets.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Budgets(client) {
            this.client = client;
        }
        Budgets.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$3, callback);
        };
        Budgets.prototype.listByResourceGroupName = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupNameOperationSpec, callback);
        };
        Budgets.prototype.get = function (budgetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                budgetName: budgetName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Budgets.prototype.createOrUpdate = function (budgetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                budgetName: budgetName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Budgets.prototype.deleteMethod = function (budgetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                budgetName: budgetName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Budgets.prototype.getByResourceGroupName = function (resourceGroupName$$1, budgetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                budgetName: budgetName$$1,
                options: options
            }, getByResourceGroupNameOperationSpec, callback);
        };
        Budgets.prototype.createOrUpdateByResourceGroupName = function (resourceGroupName$$1, budgetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                budgetName: budgetName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateByResourceGroupNameOperationSpec, callback);
        };
        Budgets.prototype.deleteByResourceGroupName = function (resourceGroupName$$1, budgetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                budgetName: budgetName$$1,
                options: options
            }, deleteByResourceGroupNameOperationSpec, callback);
        };
        Budgets.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        Budgets.prototype.listByResourceGroupNameNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNameNextOperationSpec, callback);
        };
        return Budgets;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BudgetsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupNameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BudgetsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}",
        urlParameters: [
            subscriptionId,
            budgetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Budget
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}",
        urlParameters: [
            subscriptionId,
            budgetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Budget, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Budget
            },
            201: {
                bodyMapper: Budget
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}",
        urlParameters: [
            subscriptionId,
            budgetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var getByResourceGroupNameOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            budgetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Budget
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateByResourceGroupNameOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            budgetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Budget, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Budget
            },
            201: {
                bodyMapper: Budget
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var deleteByResourceGroupNameOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Consumption/budgets/{budgetName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            budgetName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BudgetsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupNameNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BudgetsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        PriceSheetResult: PriceSheetResult,
        Resource: Resource,
        BaseResource: BaseResource,
        PriceSheetProperties: PriceSheetProperties,
        MeterDetails: MeterDetails,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PriceSheet. */
    var PriceSheet = /** @class */ (function () {
        /**
         * Create a PriceSheet.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function PriceSheet(client) {
            this.client = client;
        }
        PriceSheet.prototype.get = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getOperationSpec$1, callback);
        };
        PriceSheet.prototype.getByBillingPeriod = function (billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, getByBillingPeriodOperationSpec, callback);
        };
        return PriceSheet;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/pricesheets/default",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            expand,
            skiptoken,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PriceSheetResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };
    var getByBillingPeriodOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/pricesheets/default",
        urlParameters: [
            subscriptionId,
            billingPeriodName
        ],
        queryParameters: [
            expand,
            skiptoken,
            top,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PriceSheetResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        TagsResult: TagsResult,
        ProxyResource: ProxyResource,
        BaseResource: BaseResource,
        Tag: Tag,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification,
        Resource: Resource,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Tags. */
    var Tags = /** @class */ (function () {
        /**
         * Create a Tags.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Tags(client) {
            this.client = client;
        }
        Tags.prototype.get = function (billingAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        return Tags;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.CostManagement/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/tags",
        urlParameters: [
            billingAccountId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TagsResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        ForecastsListResult: ForecastsListResult,
        Forecast: Forecast,
        Resource: Resource,
        BaseResource: BaseResource,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Forecasts. */
    var Forecasts = /** @class */ (function () {
        /**
         * Create a Forecasts.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Forecasts(client) {
            this.client = client;
        }
        Forecasts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        return Forecasts;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/forecasts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ForecastsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Consumption/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ChargeSummary: ChargeSummary,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AggregatedCost. */
    var AggregatedCost = /** @class */ (function () {
        /**
         * Create a AggregatedCost.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function AggregatedCost(client) {
            this.client = client;
        }
        AggregatedCost.prototype.getByManagementGroup = function (managementGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                options: options
            }, getByManagementGroupOperationSpec, callback);
        };
        AggregatedCost.prototype.getForBillingPeriodByManagementGroup = function (managementGroupId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, getForBillingPeriodByManagementGroupOperationSpec, callback);
        };
        return AggregatedCost;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var getByManagementGroupOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Consumption/aggregatedcost",
        urlParameters: [
            managementGroupId
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementGroupAggregatedCostResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };
    var getForBillingPeriodByManagementGroupOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/Microsoft.Consumption/aggregatedcost",
        urlParameters: [
            managementGroupId,
            billingPeriodName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementGroupAggregatedCostResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        ChargesListResult: ChargesListResult,
        ChargeSummary: ChargeSummary,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        ErrorDetails: ErrorDetails,
        UsageDetail: UsageDetail,
        MeterDetails: MeterDetails,
        Marketplace: Marketplace,
        Balance: Balance,
        BalancePropertiesNewPurchasesDetailsItem: BalancePropertiesNewPurchasesDetailsItem,
        BalancePropertiesAdjustmentDetailsItem: BalancePropertiesAdjustmentDetailsItem,
        ReservationSummary: ReservationSummary,
        ReservationDetail: ReservationDetail,
        PriceSheetResult: PriceSheetResult,
        PriceSheetProperties: PriceSheetProperties,
        Forecast: Forecast,
        ForecastPropertiesConfidenceLevelsItem: ForecastPropertiesConfidenceLevelsItem,
        ManagementGroupAggregatedCostResult: ManagementGroupAggregatedCostResult,
        ProxyResource: ProxyResource,
        TagsResult: TagsResult,
        Tag: Tag,
        Budget: Budget,
        BudgetTimePeriod: BudgetTimePeriod,
        Filters: Filters,
        CurrentSpend: CurrentSpend,
        Notification: Notification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Charges. */
    var Charges = /** @class */ (function () {
        /**
         * Create a Charges.
         * @param {ConsumptionManagementClientContext} client Reference to the service client.
         */
        function Charges(client) {
            this.client = client;
        }
        Charges.prototype.listByEnrollmentAccount = function (billingAccountId$$1, enrollmentAccountId$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                enrollmentAccountId: enrollmentAccountId$$1,
                options: options
            }, listByEnrollmentAccountOperationSpec$2, callback);
        };
        Charges.prototype.listForBillingPeriodByEnrollmentAccount = function (billingAccountId$$1, enrollmentAccountId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                enrollmentAccountId: enrollmentAccountId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByEnrollmentAccountOperationSpec$2, callback);
        };
        Charges.prototype.listByDepartment = function (billingAccountId$$1, departmentId$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                departmentId: departmentId$$1,
                options: options
            }, listByDepartmentOperationSpec$2, callback);
        };
        Charges.prototype.listForBillingPeriodByDepartment = function (billingAccountId$$1, departmentId$$1, billingPeriodName$$1, options, callback) {
            return this.client.sendOperationRequest({
                billingAccountId: billingAccountId$$1,
                departmentId: departmentId$$1,
                billingPeriodName: billingPeriodName$$1,
                options: options
            }, listForBillingPeriodByDepartmentOperationSpec$2, callback);
        };
        return Charges;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByEnrollmentAccountOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/charges",
        urlParameters: [
            billingAccountId,
            enrollmentAccountId
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChargesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listForBillingPeriodByEnrollmentAccountOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/charges",
        urlParameters: [
            billingAccountId,
            enrollmentAccountId,
            billingPeriodName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChargeSummary
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listByDepartmentOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Consumption/charges",
        urlParameters: [
            billingAccountId,
            departmentId
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChargesListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };
    var listForBillingPeriodByDepartmentOperationSpec$2 = {
        httpMethod: "GET",
        path: "providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/charges",
        urlParameters: [
            billingAccountId,
            departmentId,
            billingPeriodName
        ],
        queryParameters: [
            apiVersion,
            filter0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChargeSummary
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-consumption";
    var packageVersion = "1.0.0";
    var ConsumptionManagementClientContext = /** @class */ (function (_super) {
        __extends(ConsumptionManagementClientContext, _super);
        /**
         * Initializes a new instance of the ConsumptionManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function ConsumptionManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-10-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ConsumptionManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ConsumptionManagementClient = /** @class */ (function (_super) {
        __extends(ConsumptionManagementClient, _super);
        /**
         * Initializes a new instance of the ConsumptionManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function ConsumptionManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.usageDetails = new UsageDetails(_this);
            _this.marketplaces = new Marketplaces(_this);
            _this.balances = new Balances(_this);
            _this.reservationsSummaries = new ReservationsSummaries(_this);
            _this.reservationsDetails = new ReservationsDetails(_this);
            _this.reservationRecommendations = new ReservationRecommendations(_this);
            _this.budgets = new Budgets(_this);
            _this.priceSheet = new PriceSheet(_this);
            _this.tags = new Tags(_this);
            _this.forecasts = new Forecasts(_this);
            _this.operations = new Operations(_this);
            _this.aggregatedCost = new AggregatedCost(_this);
            _this.charges = new Charges(_this);
            return _this;
        }
        return ConsumptionManagementClient;
    }(ConsumptionManagementClientContext));

    exports.ConsumptionManagementClient = ConsumptionManagementClient;
    exports.ConsumptionManagementClientContext = ConsumptionManagementClientContext;
    exports.ConsumptionManagementModels = index;
    exports.ConsumptionManagementMappers = mappers;
    exports.UsageDetails = UsageDetails;
    exports.Marketplaces = Marketplaces;
    exports.Balances = Balances;
    exports.ReservationsSummaries = ReservationsSummaries;
    exports.ReservationsDetails = ReservationsDetails;
    exports.ReservationRecommendations = ReservationRecommendations;
    exports.Budgets = Budgets;
    exports.PriceSheet = PriceSheet;
    exports.Tags = Tags;
    exports.Forecasts = Forecasts;
    exports.Operations = Operations;
    exports.AggregatedCost = AggregatedCost;
    exports.Charges = Charges;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-consumption.js.map
