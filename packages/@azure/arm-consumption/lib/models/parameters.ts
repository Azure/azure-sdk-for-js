/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";

export const acceptLanguage: msRest.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const apiVersion: msRest.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const apply: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "queryOptions",
    "apply"
  ],
  mapper: {
    serializedName: "$apply",
    type: {
      name: "String"
    }
  }
};
export const billingAccountId: msRest.OperationURLParameter = {
  parameterPath: "billingAccountId",
  mapper: {
    required: true,
    serializedName: "billingAccountId",
    type: {
      name: "String"
    }
  }
};
export const billingPeriodName: msRest.OperationURLParameter = {
  parameterPath: "billingPeriodName",
  mapper: {
    required: true,
    serializedName: "billingPeriodName",
    type: {
      name: "String"
    }
  }
};
export const budgetName: msRest.OperationURLParameter = {
  parameterPath: "budgetName",
  mapper: {
    required: true,
    serializedName: "budgetName",
    type: {
      name: "String"
    }
  }
};
export const expand: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "expand"
  ],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};
export const filter0: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "filter"
  ],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const filter1: msRest.OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    required: true,
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};
export const grain: msRest.OperationQueryParameter = {
  parameterPath: "grain",
  mapper: {
    required: true,
    serializedName: "grain",
    type: {
      name: "String"
    }
  }
};
export const managementGroupId: msRest.OperationURLParameter = {
  parameterPath: "managementGroupId",
  mapper: {
    required: true,
    serializedName: "managementGroupId",
    type: {
      name: "String"
    }
  }
};
export const nextPageLink: msRest.OperationURLParameter = {
  parameterPath: "nextPageLink",
  mapper: {
    required: true,
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const reservationId: msRest.OperationURLParameter = {
  parameterPath: "reservationId",
  mapper: {
    required: true,
    serializedName: "reservationId",
    type: {
      name: "String"
    }
  }
};
export const reservationOrderId: msRest.OperationURLParameter = {
  parameterPath: "reservationOrderId",
  mapper: {
    required: true,
    serializedName: "reservationOrderId",
    type: {
      name: "String"
    }
  }
};
export const scope: msRest.OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    required: true,
    serializedName: "scope",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const skiptoken: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "skiptoken"
  ],
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String"
    }
  }
};
export const subscriptionId: msRest.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};
export const top: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "top"
  ],
  mapper: {
    serializedName: "$top",
    constraints: {
      InclusiveMaximum: 1000,
      InclusiveMinimum: 1
    },
    type: {
      name: "Number"
    }
  }
};
