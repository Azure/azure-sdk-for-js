/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing MeterDetails.
 * The properties of the meter detail.
 *
 */
export interface MeterDetails {
  /**
   * @member {string} [meterName] The name of the meter, within the given meter
   * category
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterName?: string;
  /**
   * @member {string} [meterCategory] The category of the meter, for example,
   * 'Cloud services', 'Networking', etc..
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterCategory?: string;
  /**
   * @member {string} [meterSubCategory] The subcategory of the meter, for
   * example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterSubCategory?: string;
  /**
   * @member {string} [unit] The unit in which the meter consumption is
   * charged, for example, 'Hours', 'GB', etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: string;
  /**
   * @member {string} [meterLocation] The location in which the Azure service
   * is available.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterLocation?: string;
  /**
   * @member {number} [totalIncludedQuantity] The total included quantity
   * associated with the offer.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalIncludedQuantity?: number;
  /**
   * @member {number} [pretaxStandardRate] The pretax listing price.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pretaxStandardRate?: number;
  /**
   * @member {string} [serviceName] The name of the service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceName?: string;
  /**
   * @member {string} [serviceTier] The service tier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceTier?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * The Resource model definition.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing UsageDetail.
 * An usage detail resource.
 *
 * @extends Resource
 */
export interface UsageDetail extends Resource {
  /**
   * @member {string} [billingPeriodId] The id of the billing period resource
   * that the usage belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * @member {string} [invoiceId] The id of the invoice resource that the usage
   * belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly invoiceId?: string;
  /**
   * @member {Date} [usageStart] The start of the date time range covered by
   * the usage detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageStart?: Date;
  /**
   * @member {Date} [usageEnd] The end of the date time range covered by the
   * usage detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageEnd?: Date;
  /**
   * @member {string} [instanceName] The name of the resource instance that the
   * usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceName?: string;
  /**
   * @member {string} [instanceId] The uri of the resource instance that the
   * usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceId?: string;
  /**
   * @member {string} [instanceLocation] The location of the resource instance
   * that the usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceLocation?: string;
  /**
   * @member {string} [currency] The ISO currency in which the meter is
   * charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currency?: string;
  /**
   * @member {number} [usageQuantity] The quantity of usage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageQuantity?: number;
  /**
   * @member {number} [billableQuantity] The billable usage quantity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly billableQuantity?: number;
  /**
   * @member {number} [pretaxCost] The amount of cost before tax.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pretaxCost?: number;
  /**
   * @member {boolean} [isEstimated] The estimated usage is subject to change.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isEstimated?: boolean;
  /**
   * @member {string} [meterId] The meter id (GUID).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterId?: string;
  /**
   * @member {MeterDetails} [meterDetails] The details about the meter. By
   * default this is not populated, unless it's specified in $expand.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterDetails?: MeterDetails;
  /**
   * @member {string} [subscriptionGuid] Subscription guid.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subscriptionGuid?: string;
  /**
   * @member {string} [subscriptionName] Subscription name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subscriptionName?: string;
  /**
   * @member {string} [accountName] Account name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountName?: string;
  /**
   * @member {string} [departmentName] Department name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly departmentName?: string;
  /**
   * @member {string} [product] Product name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly product?: string;
  /**
   * @member {string} [consumedService] Consumed service name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly consumedService?: string;
  /**
   * @member {string} [costCenter] The cost center of this department if it is
   * a department and a costcenter exists
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly costCenter?: string;
  /**
   * @member {string} [partNumber] Part Number
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly partNumber?: string;
  /**
   * @member {string} [resourceGuid] Resource Guid
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGuid?: string;
  /**
   * @member {string} [offerId] Offer Id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly offerId?: string;
  /**
   * @member {boolean} [chargesBilledSeparately] Charges billed separately
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly chargesBilledSeparately?: boolean;
  /**
   * @member {string} [location] Resource Location
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly location?: string;
  /**
   * @member {string} [additionalProperties] Additional details of this usage
   * item. By default this is not populated, unless it's specified in $expand.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly additionalProperties?: string;
}

/**
 * @interface
 * An interface representing Marketplace.
 * An marketplace resource.
 *
 * @extends Resource
 */
export interface Marketplace extends Resource {
  /**
   * @member {string} [billingPeriodId] The id of the billing period resource
   * that the usage belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * @member {Date} [usageStart] The start of the date time range covered by
   * the usage detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageStart?: Date;
  /**
   * @member {Date} [usageEnd] The end of the date time range covered by the
   * usage detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageEnd?: Date;
  /**
   * @member {number} [resourceRate] The marketplace resource rate.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceRate?: number;
  /**
   * @member {string} [offerName] The type of offer.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly offerName?: string;
  /**
   * @member {string} [resourceGroup] The name of resource group.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceGroup?: string;
  /**
   * @member {string} [orderNumber] The order number.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly orderNumber?: string;
  /**
   * @member {string} [instanceName] The name of the resource instance that the
   * usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceName?: string;
  /**
   * @member {string} [instanceId] The uri of the resource instance that the
   * usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceId?: string;
  /**
   * @member {string} [currency] The ISO currency in which the meter is
   * charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currency?: string;
  /**
   * @member {number} [consumedQuantity] The quantity of usage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly consumedQuantity?: number;
  /**
   * @member {string} [unitOfMeasure] The unit of measure.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unitOfMeasure?: string;
  /**
   * @member {number} [pretaxCost] The amount of cost before tax.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pretaxCost?: number;
  /**
   * @member {boolean} [isEstimated] The estimated usage is subject to change.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isEstimated?: boolean;
  /**
   * @member {string} [meterId] The meter id (GUID).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterId?: string;
  /**
   * @member {string} [subscriptionGuid] Subscription guid.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subscriptionGuid?: string;
  /**
   * @member {string} [subscriptionName] Subscription name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subscriptionName?: string;
  /**
   * @member {string} [accountName] Account name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountName?: string;
  /**
   * @member {string} [departmentName] Department name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly departmentName?: string;
  /**
   * @member {string} [consumedService] Consumed service name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly consumedService?: string;
  /**
   * @member {string} [costCenter] The cost center of this department if it is
   * a department and a costcenter exists
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly costCenter?: string;
  /**
   * @member {string} [additionalProperties] Additional details of this usage
   * item. By default this is not populated, unless it's specified in $expand.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly additionalProperties?: string;
  /**
   * @member {string} [publisherName] The name of publisher.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly publisherName?: string;
  /**
   * @member {string} [planName] The name of plan.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly planName?: string;
  /**
   * @member {boolean} [isRecurringCharge] Flag indicating whether this is a
   * recurring charge or not.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isRecurringCharge?: boolean;
}

/**
 * @interface
 * An interface representing BalancePropertiesNewPurchasesDetailsItem.
 */
export interface BalancePropertiesNewPurchasesDetailsItem {
  /**
   * @member {string} [name] the name of new purchase.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {number} [value] the value of new purchase.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: number;
}

/**
 * @interface
 * An interface representing BalancePropertiesAdjustmentDetailsItem.
 */
export interface BalancePropertiesAdjustmentDetailsItem {
  /**
   * @member {string} [name] the name of new adjustment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {number} [value] the value of new adjustment.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: number;
}

/**
 * @interface
 * An interface representing Balance.
 * A balance resource.
 *
 * @extends Resource
 */
export interface Balance extends Resource {
  /**
   * @member {string} [currency] The ISO currency in which the meter is
   * charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currency?: string;
  /**
   * @member {number} [beginningBalance] The beginning balance for the billing
   * period.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly beginningBalance?: number;
  /**
   * @member {number} [endingBalance] The ending balance for the billing period
   * (for open periods this will be updated daily).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endingBalance?: number;
  /**
   * @member {number} [newPurchases] Total new purchase amount.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly newPurchases?: number;
  /**
   * @member {number} [adjustments] Total adjustment amount.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly adjustments?: number;
  /**
   * @member {number} [utilized] Total Commitment usage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly utilized?: number;
  /**
   * @member {number} [serviceOverage] Overage for Azure services.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceOverage?: number;
  /**
   * @member {number} [chargesBilledSeparately] Charges Billed separately.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly chargesBilledSeparately?: number;
  /**
   * @member {number} [totalOverage] serviceOverage + chargesBilledSeparately.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalOverage?: number;
  /**
   * @member {number} [totalUsage] Azure service commitment + total Overage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalUsage?: number;
  /**
   * @member {number} [azureMarketplaceServiceCharges] Total charges for Azure
   * Marketplace.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly azureMarketplaceServiceCharges?: number;
  /**
   * @member {BillingFrequency} [billingFrequency] The billing frequency.
   * Possible values include: 'Month', 'Quarter', 'Year'
   */
  billingFrequency?: BillingFrequency;
  /**
   * @member {boolean} [priceHidden] Price is hidden or not.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly priceHidden?: boolean;
  /**
   * @member {BalancePropertiesNewPurchasesDetailsItem[]} [newPurchasesDetails]
   * List of new purchases.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly newPurchasesDetails?: BalancePropertiesNewPurchasesDetailsItem[];
  /**
   * @member {BalancePropertiesAdjustmentDetailsItem[]} [adjustmentDetails]
   * List of Adjustments (Promo credit, SIE credit etc.).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly adjustmentDetails?: BalancePropertiesAdjustmentDetailsItem[];
}

/**
 * @interface
 * An interface representing ReservationSummary.
 * reservation summary resource.
 *
 * @extends Resource
 */
export interface ReservationSummary extends Resource {
  /**
   * @member {string} [reservationOrderId] The reservation order ID is the
   * identifier for a reservation purchase. Each reservation order ID
   * represents a single purchase transaction. A reservation order contains
   * reservations. The reservation order specifies the VM size and region for
   * the reservations.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reservationOrderId?: string;
  /**
   * @member {string} [reservationId] The reservation ID is the identifier of a
   * reservation within a reservation order. Each reservation is the grouping
   * for applying the benefit scope and also specifies the number of instances
   * to which the reservation benefit can be applied to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reservationId?: string;
  /**
   * @member {string} [skuName] This is the ARM Sku name. It can be used to
   * join with the serviceType field in additional info in usage records.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly skuName?: string;
  /**
   * @member {number} [reservedHours] This is the total hours reserved. E.g. if
   * reservation for 1 instance was made on 1 PM, this will be 11 hours for
   * that day and 24 hours from subsequent days
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reservedHours?: number;
  /**
   * @member {Date} [usageDate] Data corresponding to the utilization record.
   * If the grain of data is monthly, it will be first day of month.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageDate?: Date;
  /**
   * @member {number} [usedHours] Total used hours by the reservation
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usedHours?: number;
  /**
   * @member {number} [minUtilizationPercentage] This is the minimum hourly
   * utilization in the usage time (day or month). E.g. if usage record
   * corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was
   * 10%, this field will return 10% for that day
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly minUtilizationPercentage?: number;
  /**
   * @member {number} [avgUtilizationPercentage] This is average utilization
   * for the entire time range. (day or month depending on the grain)
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly avgUtilizationPercentage?: number;
  /**
   * @member {number} [maxUtilizationPercentage] This is the maximum hourly
   * utilization in the usage time (day or month). E.g. if usage record
   * corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was
   * 100%, this field will return 100% for that day.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxUtilizationPercentage?: number;
}

/**
 * @interface
 * An interface representing ReservationDetail.
 * reservation detail resource.
 *
 * @extends Resource
 */
export interface ReservationDetail extends Resource {
  /**
   * @member {string} [reservationOrderId] The reservation order ID is the
   * identifier for a reservation purchase. Each reservation order ID
   * represents a single purchase transaction. A reservation order contains
   * reservations. The reservation order specifies the VM size and region for
   * the reservations.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reservationOrderId?: string;
  /**
   * @member {string} [reservationId] The reservation ID is the identifier of a
   * reservation within a reservation order. Each reservation is the grouping
   * for applying the benefit scope and also specifies the number of instances
   * to which the reservation benefit can be applied to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reservationId?: string;
  /**
   * @member {string} [skuName] This is the ARM Sku name. It can be used to
   * join with the serviceType field in additional info in usage records.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly skuName?: string;
  /**
   * @member {number} [reservedHours] This is the total hours reserved for the
   * day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11
   * hours for that day and 24 hours from subsequent days.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reservedHours?: number;
  /**
   * @member {Date} [usageDate] The date on which consumption occurred.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageDate?: Date;
  /**
   * @member {number} [usedHours] This is the total hours used by the instance.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usedHours?: number;
  /**
   * @member {string} [instanceId] This identifier is the name of the resource
   * or the fully qualified Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly instanceId?: string;
  /**
   * @member {number} [totalReservedQuantity] This is the total count of
   * instances that are reserved for the reservationId.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalReservedQuantity?: number;
}

/**
 * @interface
 * An interface representing ReservationRecommendation.
 * Reservation recommendation resource.
 *
 */
export interface ReservationRecommendation {
  /**
   * @member {string} [id] Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tags?: { [propertyName: string]: string };
  /**
   * @member {string} [location] Resource location
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly location?: string;
  /**
   * @member {string} [sku] Resource sku
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sku?: string;
  /**
   * @member {string} [lookBackPeriod] The number of days of usage to look back
   * for recommendation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lookBackPeriod?: string;
  /**
   * @member {string} [meterId] The meter id (GUID)
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterId?: string;
  /**
   * @member {string} [term] RI recommendations in one or three year terms.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly term?: string;
  /**
   * @member {number} [costWithNoReservedInstances] The total amount of cost
   * without reserved instances.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly costWithNoReservedInstances?: number;
  /**
   * @member {number} [recommendedQuantity] Recommended quality for reserved
   * instances.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly recommendedQuantity?: number;
  /**
   * @member {number} [totalCostWithReservedInstances] The total amount of cost
   * with reserved instances.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly totalCostWithReservedInstances?: number;
  /**
   * @member {number} [netSavings] Total estimated savings with reserved
   * instances.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly netSavings?: number;
  /**
   * @member {Date} [firstUsageDate] The usage date for looking back.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firstUsageDate?: Date;
  /**
   * @member {string} [scope] Shared or single recommendation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly scope?: string;
}

/**
 * @interface
 * An interface representing Tag.
 * The tag resource.
 *
 */
export interface Tag {
  /**
   * @member {string} [key] Tag key.
   */
  key?: string;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The Resource model definition.
 *
 * @extends BaseResource
 */
export interface ProxyResource extends BaseResource {
  /**
   * @member {string} [id] Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [eTag] eTag of the resource. To handle concurrent update
   * scenario, this field will be used to determine whether the user is
   * updating the latest version or not.
   */
  eTag?: string;
}

/**
 * @interface
 * An interface representing TagsResult.
 * A resource listing all tags.
 *
 * @extends ProxyResource
 */
export interface TagsResult extends ProxyResource {
  /**
   * @member {Tag[]} [tags] A list of Tag.
   */
  tags?: Tag[];
}

/**
 * @interface
 * An interface representing BudgetTimePeriod.
 * The start and end date for a budget.
 *
 */
export interface BudgetTimePeriod {
  /**
   * @member {Date} startDate The start date for the budget.
   */
  startDate: Date;
  /**
   * @member {Date} [endDate] The end date for the budget. If not provided, we
   * default this to 10 years from the start date.
   */
  endDate?: Date;
}

/**
 * @interface
 * An interface representing Filters.
 * May be used to filter budgets by resource group, resource, or meter.
 *
 */
export interface Filters {
  /**
   * @member {string[]} [resourceGroups] The list of filters on resource
   * groups, allowed at subscription level only.
   */
  resourceGroups?: string[];
  /**
   * @member {string[]} [resources] The list of filters on resources.
   */
  resources?: string[];
  /**
   * @member {string[]} [meters] The list of filters on meters (GUID),
   * mandatory for budgets of usage category.
   */
  meters?: string[];
  /**
   * @member {{ [propertyName: string]: string[] }} [tags] The dictionary of
   * filters on tags.
   */
  tags?: { [propertyName: string]: string[] };
}

/**
 * @interface
 * An interface representing CurrentSpend.
 * The current amount of cost which is being tracked for a budget.
 *
 */
export interface CurrentSpend {
  /**
   * @member {number} [amount] The total amount of cost which is being tracked
   * by the budget.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly amount?: number;
  /**
   * @member {string} [unit] The unit of measure for the budget amount.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: string;
}

/**
 * @interface
 * An interface representing Notification.
 * The notification associated with a budget.
 *
 */
export interface Notification {
  /**
   * @member {boolean} enabled The notification is enabled or not.
   */
  enabled: boolean;
  /**
   * @member {OperatorType} operator The comparison operator. Possible values
   * include: 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo'
   */
  operator: OperatorType;
  /**
   * @member {number} threshold Threshold value associated with a notification.
   * Notification is sent when the cost exceeded the threshold. It is always
   * percent and has to be between 0 and 1000.
   */
  threshold: number;
  /**
   * @member {string[]} contactEmails Email addresses to send the budget
   * notification to when the threshold is exceeded.
   */
  contactEmails: string[];
  /**
   * @member {string[]} [contactRoles] Contact roles to send the budget
   * notification to when the threshold is exceeded.
   */
  contactRoles?: string[];
  /**
   * @member {string[]} [contactGroups] Action groups to send the budget
   * notification to when the threshold is exceeded.
   */
  contactGroups?: string[];
}

/**
 * @interface
 * An interface representing Budget.
 * A budget resource.
 *
 * @extends ProxyResource
 */
export interface Budget extends ProxyResource {
  /**
   * @member {CategoryType} category The category of the budget, whether the
   * budget tracks cost or usage. Possible values include: 'Cost', 'Usage'
   */
  category: CategoryType;
  /**
   * @member {number} amount The total amount of cost to track with the budget
   */
  amount: number;
  /**
   * @member {TimeGrainType} timeGrain The time covered by a budget. Tracking
   * of the amount will be reset based on the time grain. Possible values
   * include: 'Monthly', 'Quarterly', 'Annually'
   */
  timeGrain: TimeGrainType;
  /**
   * @member {BudgetTimePeriod} timePeriod Has start and end date of the
   * budget. The start date must be first of the month and should be less than
   * the end date. Budget start date must be on or after June 1, 2017. Future
   * start date should not be more than three months. Past start date should
   * be selected within the timegrain period. There are no restrictions on the
   * end date.
   */
  timePeriod: BudgetTimePeriod;
  /**
   * @member {Filters} [filters] May be used to filter budgets by resource
   * group, resource, or meter.
   */
  filters?: Filters;
  /**
   * @member {CurrentSpend} [currentSpend] The current amount of cost which is
   * being tracked for a budget.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentSpend?: CurrentSpend;
  /**
   * @member {{ [propertyName: string]: Notification }} [notifications]
   * Dictionary of notifications associated with the budget. Budget can have up
   * to five notifications.
   */
  notifications?: { [propertyName: string]: Notification };
}

/**
 * @interface
 * An interface representing PriceSheetProperties.
 * The properties of the price sheet.
 *
 */
export interface PriceSheetProperties {
  /**
   * @member {string} [billingPeriodId] The id of the billing period resource
   * that the usage belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * @member {string} [meterId] The meter id (GUID)
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterId?: string;
  /**
   * @member {MeterDetails} [meterDetails] The details about the meter. By
   * default this is not populated, unless it's specified in $expand.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly meterDetails?: MeterDetails;
  /**
   * @member {string} [unitOfMeasure] Unit of measure
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unitOfMeasure?: string;
  /**
   * @member {number} [includedQuantity] Included quality for an offer
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly includedQuantity?: number;
  /**
   * @member {string} [partNumber] Part Number
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly partNumber?: string;
  /**
   * @member {number} [unitPrice] Unit Price
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unitPrice?: number;
  /**
   * @member {string} [currencyCode] Currency Code
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currencyCode?: string;
  /**
   * @member {string} [offerId] Offer Id
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly offerId?: string;
}

/**
 * @interface
 * An interface representing PriceSheetResult.
 * An pricesheet resource.
 *
 * @extends Resource
 */
export interface PriceSheetResult extends Resource {
  /**
   * @member {PriceSheetProperties[]} [pricesheets] Price sheet
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pricesheets?: PriceSheetProperties[];
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing ForecastPropertiesConfidenceLevelsItem.
 */
export interface ForecastPropertiesConfidenceLevelsItem {
  /**
   * @member {number} [percentage] The percentage level of the confidence
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly percentage?: number;
  /**
   * @member {Bound} [bound] The boundary of the percentage, values could be
   * 'Upper' or 'Lower'. Possible values include: 'Upper', 'Lower'
   */
  bound?: Bound;
  /**
   * @member {number} [value] The amount of forecast within the percentage
   * level
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: number;
}

/**
 * @interface
 * An interface representing Forecast.
 * A forecast resource.
 *
 * @extends Resource
 */
export interface Forecast extends Resource {
  /**
   * @member {string} [usageDate] The usage date of the forecast.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageDate?: string;
  /**
   * @member {Grain} [grain] The granularity of forecast. Possible values
   * include: 'Daily', 'Monthly', 'Yearly'
   */
  grain?: Grain;
  /**
   * @member {number} [charge] The amount of charge
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly charge?: number;
  /**
   * @member {string} [currency] The ISO currency in which the meter is
   * charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currency?: string;
  /**
   * @member {ChargeType} [chargeType] The type of the charge. Could be actual
   * or forecast. Possible values include: 'Actual', 'Forecast'
   */
  chargeType?: ChargeType;
  /**
   * @member {ForecastPropertiesConfidenceLevelsItem[]} [confidenceLevels] The
   * details about the forecast confidence levels. This is populated only when
   * chargeType is Forecast.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly confidenceLevels?: ForecastPropertiesConfidenceLevelsItem[];
}

/**
 * @interface
 * An interface representing ManagementGroupAggregatedCostResult.
 * A management group aggregated cost resource.
 *
 * @extends Resource
 */
export interface ManagementGroupAggregatedCostResult extends Resource {
  /**
   * @member {string} [billingPeriodId] The id of the billing period resource
   * that the aggregated cost belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * @member {Date} [usageStart] The start of the date time range covered by
   * aggregated cost.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageStart?: Date;
  /**
   * @member {Date} [usageEnd] The end of the date time range covered by the
   * aggregated cost.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageEnd?: Date;
  /**
   * @member {number} [azureCharges] Azure Charges.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly azureCharges?: number;
  /**
   * @member {number} [marketplaceCharges] Marketplace Charges.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly marketplaceCharges?: number;
  /**
   * @member {number} [chargesBilledSeparately] Charges Billed Separately.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly chargesBilledSeparately?: number;
  /**
   * @member {string} [currency] The ISO currency in which the meter is
   * charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currency?: string;
  /**
   * @member {ManagementGroupAggregatedCostResult[]} [children] Children of a
   * management group
   */
  children?: ManagementGroupAggregatedCostResult[];
  /**
   * @member {string[]} [includedSubscriptions] List of subscription Guids
   * included in the calculation of aggregated cost
   */
  includedSubscriptions?: string[];
  /**
   * @member {string[]} [excludedSubscriptions] List of subscription Guids
   * excluded from the calculation of aggregated cost
   */
  excludedSubscriptions?: string[];
}

/**
 * @interface
 * An interface representing ChargeSummary.
 * A charge summary resource.
 *
 * @extends Resource
 */
export interface ChargeSummary extends Resource {
  /**
   * @member {string} [billingPeriodId] The id of the billing period resource
   * that the charge belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * @member {string} [usageStart] Usage start date.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageStart?: string;
  /**
   * @member {string} [usageEnd] Usage end date.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly usageEnd?: string;
  /**
   * @member {number} [azureCharges] Azure Charges.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly azureCharges?: number;
  /**
   * @member {number} [chargesBilledSeparately] Charges Billed separately.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly chargesBilledSeparately?: number;
  /**
   * @member {number} [marketplaceCharges] Marketplace Charges.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly marketplaceCharges?: number;
  /**
   * @member {string} [currency] Currency Code
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currency?: string;
}

/**
 * @interface
 * An interface representing ChargesListResult.
 * Result of listing charge summary.
 *
 */
export interface ChargesListResult {
  /**
   * @member {ChargeSummary[]} [value] The list of charge summary
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: ChargeSummary[];
}

/**
 * @interface
 * An interface representing ErrorDetails.
 * The details of the error.
 *
 */
export interface ErrorDetails {
  /**
   * @member {string} [code] Error code.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly code?: string;
  /**
   * @member {string} [message] Error message indicating why the operation
   * failed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing ErrorResponse.
 * Error response indicates that the service is not able to process the
 * incoming request. The reason is provided in the error message.
 *
 */
export interface ErrorResponse {
  /**
   * @member {ErrorDetails} [error] The details of the error.
   */
  error?: ErrorDetails;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * The object that represents the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Service provider: Microsoft.Consumption.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provider?: string;
  /**
   * @member {string} [resource] Resource on which the operation is performed:
   * UsageDetail, etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resource?: string;
  /**
   * @member {string} [operation] Operation type: Read, write, delete, etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operation?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * A Consumption REST API operation.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {OperationDisplay} [display] The object that represents the
   * operation.
   */
  display?: OperationDisplay;
}

/**
 * @interface
 * An interface representing ResourceAttributes.
 * The Resource model definition.
 *
 */
export interface ResourceAttributes {
  /**
   * @member {string} [location] Resource location
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly location?: string;
  /**
   * @member {string} [sku] Resource sku
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sku?: string;
}

/**
 * @interface
 * An interface representing QueryOptions.
 * Additional parameters for list operation.
 *
 */
export interface QueryOptions {
  /**
   * @member {string} [apply] OData apply expression to aggregate usageDetails
   * by tags or (tags and properties/usageStart)
   */
  apply?: string;
}

/**
 * @interface
 * An interface representing UsageDetailsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface UsageDetailsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] May be used to expand the
   * properties/additionalProperties or properties/meterDetails within a list
   * of usage details. By default, these fields are not included when listing
   * usage details.
   */
  expand?: string;
  /**
   * @member {string} [filter] May be used to filter usageDetails by
   * properties/usageEnd (Utc time), properties/usageStart (Utc time),
   * properties/resourceGroup, properties/instanceName, properties/instanceId
   * or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It
   * does not currently support 'ne', 'or', or 'not'. Tag filter is a key value
   * pair string where key and value is separated by a colon (:).
   */
  filter?: string;
  /**
   * @member {string} [skiptoken] Skiptoken is only used if a previous
   * operation returned a partial result. If a previous response contains a
   * nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent
   * calls.
   */
  skiptoken?: string;
  /**
   * @member {number} [top] May be used to limit the number of results to the
   * most recent N usageDetails.
   */
  top?: number;
  /**
   * @member {QueryOptions} [queryOptions] Additional parameters for the
   * operation
   */
  queryOptions?: QueryOptions;
}

/**
 * @interface
 * An interface representing MarketplacesListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MarketplacesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] May be used to filter marketplaces by
   * properties/usageEnd (Utc time), properties/usageStart (Utc time),
   * properties/resourceGroup, properties/instanceName or
   * properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge',
   * and 'and'. It does not currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
  /**
   * @member {number} [top] May be used to limit the number of results to the
   * most recent N marketplaces.
   */
  top?: number;
  /**
   * @member {string} [skiptoken] Skiptoken is only used if a previous
   * operation returned a partial result. If a previous response contains a
   * nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent
   * calls.
   */
  skiptoken?: string;
}

/**
 * @interface
 * An interface representing ChargesListByScopeOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ChargesListByScopeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] May be used to filter charges by
   * properties/usageEnd (Utc time), properties/usageStart (Utc time). The
   * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
   * string where key and value is separated by a colon (:).
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing ReservationsSummariesListByReservationOrderOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ReservationsSummariesListByReservationOrderOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] Required only for daily grain. The
   * properties/UsageDate for start date and end date. The filter supports 'le'
   * and  'ge'
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing ReservationsSummariesListByReservationOrderAndReservationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ReservationsSummariesListByReservationOrderAndReservationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] Required only for daily grain. The
   * properties/UsageDate for start date and end date. The filter supports 'le'
   * and  'ge'
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing ReservationRecommendationsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ReservationRecommendationsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] May be used to filter reservationRecommendations
   * by properties/scope and properties/lookBackPeriod.
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing PriceSheetGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PriceSheetGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] May be used to expand the
   * properties/meterDetails within a price sheet. By default, these fields are
   * not included when returning price sheet.
   */
  expand?: string;
  /**
   * @member {string} [skiptoken] Skiptoken is only used if a previous
   * operation returned a partial result. If a previous response contains a
   * nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent
   * calls.
   */
  skiptoken?: string;
  /**
   * @member {number} [top] May be used to limit the number of results to the
   * top N results.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing PriceSheetGetByBillingPeriodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PriceSheetGetByBillingPeriodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [expand] May be used to expand the
   * properties/meterDetails within a price sheet. By default, these fields are
   * not included when returning price sheet.
   */
  expand?: string;
  /**
   * @member {string} [skiptoken] Skiptoken is only used if a previous
   * operation returned a partial result. If a previous response contains a
   * nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent
   * calls.
   */
  skiptoken?: string;
  /**
   * @member {number} [top] May be used to limit the number of results to the
   * top N results.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing ForecastsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ForecastsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] May be used to filter forecasts by
   * properties/usageDate (Utc time), properties/chargeType or
   * properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and
   * 'and'. It does not currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing AggregatedCostGetByManagementGroupOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface AggregatedCostGetByManagementGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] May be used to filter aggregated cost by
   * properties/usageStart (Utc time), properties/usageEnd (Utc time). The
   * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'. Tag filter is a key value pair
   * string where key and value is separated by a colon (:).
   */
  filter?: string;
}

/**
 * @interface
 * An interface representing ConsumptionManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface ConsumptionManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the UsageDetailsListResult.
 * Result of listing usage details. It contains a list of available usage
 * details in reverse chronological order by billing period.
 *
 * @extends Array<UsageDetail>
 */
export interface UsageDetailsListResult extends Array<UsageDetail> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the MarketplacesListResult.
 * Result of listing marketplaces. It contains a list of available marketplaces
 * in reverse chronological order by billing period.
 *
 * @extends Array<Marketplace>
 */
export interface MarketplacesListResult extends Array<Marketplace> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the BudgetsListResult.
 * Result of listing budgets. It contains a list of available budgets in the
 * scope provided.
 *
 * @extends Array<Budget>
 */
export interface BudgetsListResult extends Array<Budget> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ReservationSummariesListResult.
 * Result of listing reservation summaries.
 *
 * @extends Array<ReservationSummary>
 */
export interface ReservationSummariesListResult extends Array<ReservationSummary> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ReservationDetailsListResult.
 * Result of listing reservation details.
 *
 * @extends Array<ReservationDetail>
 */
export interface ReservationDetailsListResult extends Array<ReservationDetail> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ReservationRecommendationsListResult.
 * Result of listing reservation recommendations.
 *
 * @extends Array<ReservationRecommendation>
 */
export interface ReservationRecommendationsListResult extends Array<ReservationRecommendation> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the ForecastsListResult.
 * Result of listing forecasts. It contains a list of available forecasts.
 *
 * @extends Array<Forecast>
 */
export interface ForecastsListResult extends Array<Forecast> {
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of listing consumption operations. It contains a list of operations
 * and a URL link to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for BillingFrequency.
 * Possible values include: 'Month', 'Quarter', 'Year'
 * @readonly
 * @enum {string}
 */
export type BillingFrequency = 'Month' | 'Quarter' | 'Year';

/**
 * Defines values for CategoryType.
 * Possible values include: 'Cost', 'Usage'
 * @readonly
 * @enum {string}
 */
export type CategoryType = 'Cost' | 'Usage';

/**
 * Defines values for TimeGrainType.
 * Possible values include: 'Monthly', 'Quarterly', 'Annually'
 * @readonly
 * @enum {string}
 */
export type TimeGrainType = 'Monthly' | 'Quarterly' | 'Annually';

/**
 * Defines values for OperatorType.
 * Possible values include: 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo'
 * @readonly
 * @enum {string}
 */
export type OperatorType = 'EqualTo' | 'GreaterThan' | 'GreaterThanOrEqualTo';

/**
 * Defines values for Grain.
 * Possible values include: 'Daily', 'Monthly', 'Yearly'
 * @readonly
 * @enum {string}
 */
export type Grain = 'Daily' | 'Monthly' | 'Yearly';

/**
 * Defines values for ChargeType.
 * Possible values include: 'Actual', 'Forecast'
 * @readonly
 * @enum {string}
 */
export type ChargeType = 'Actual' | 'Forecast';

/**
 * Defines values for Bound.
 * Possible values include: 'Upper', 'Lower'
 * @readonly
 * @enum {string}
 */
export type Bound = 'Upper' | 'Lower';

/**
 * Defines values for Datagrain.
 * Possible values include: 'DailyGrain', 'MonthlyGrain'
 * @readonly
 * @enum {string}
 */
export type Datagrain = 'daily' | 'monthly';

/**
 * Contains response data for the list operation.
 */
export type UsageDetailsListResponse = UsageDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageDetailsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsageDetailsListNextResponse = UsageDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageDetailsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type MarketplacesListResponse = MarketplacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MarketplacesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type MarketplacesListNextResponse = MarketplacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MarketplacesListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BudgetsListResponse = BudgetsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BudgetsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type BudgetsGetResponse = Budget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Budget;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BudgetsCreateOrUpdateResponse = Budget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Budget;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type BudgetsListNextResponse = BudgetsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BudgetsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TagsGetResponse = TagsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagsResult;
    };
};

/**
 * Contains response data for the listByScope operation.
 */
export type ChargesListByScopeResponse = ChargeSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ChargeSummary;
    };
};

/**
 * Contains response data for the getByBillingAccount operation.
 */
export type BalancesGetByBillingAccountResponse = Balance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Balance;
    };
};

/**
 * Contains response data for the getForBillingPeriodByBillingAccount operation.
 */
export type BalancesGetForBillingPeriodByBillingAccountResponse = Balance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Balance;
    };
};

/**
 * Contains response data for the listByReservationOrder operation.
 */
export type ReservationsSummariesListByReservationOrderResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservation operation.
 */
export type ReservationsSummariesListByReservationOrderAndReservationResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderNext operation.
 */
export type ReservationsSummariesListByReservationOrderNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservationNext operation.
 */
export type ReservationsSummariesListByReservationOrderAndReservationNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrder operation.
 */
export type ReservationsDetailsListByReservationOrderResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservation operation.
 */
export type ReservationsDetailsListByReservationOrderAndReservationResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderNext operation.
 */
export type ReservationsDetailsListByReservationOrderNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservationNext operation.
 */
export type ReservationsDetailsListByReservationOrderAndReservationNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ReservationRecommendationsListResponse = ReservationRecommendationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationRecommendationsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ReservationRecommendationsListNextResponse = ReservationRecommendationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationRecommendationsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PriceSheetGetResponse = PriceSheetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PriceSheetResult;
    };
};

/**
 * Contains response data for the getByBillingPeriod operation.
 */
export type PriceSheetGetByBillingPeriodResponse = PriceSheetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PriceSheetResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ForecastsListResponse = ForecastsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ForecastsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the getByManagementGroup operation.
 */
export type AggregatedCostGetByManagementGroupResponse = ManagementGroupAggregatedCostResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagementGroupAggregatedCostResult;
    };
};

/**
 * Contains response data for the getForBillingPeriodByManagementGroup operation.
 */
export type AggregatedCostGetForBillingPeriodByManagementGroupResponse = ManagementGroupAggregatedCostResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagementGroupAggregatedCostResult;
    };
};
