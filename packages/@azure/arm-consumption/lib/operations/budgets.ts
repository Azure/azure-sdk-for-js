/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/budgetsMappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClientContext } from "../consumptionManagementClientContext";

/** Class representing a Budgets. */
export class Budgets {
  private readonly client: ConsumptionManagementClientContext;

  /**
   * Create a Budgets.
   * @param {ConsumptionManagementClientContext} client Reference to the service client.
   */
  constructor(client: ConsumptionManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all budgets for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.BudgetsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.BudgetsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.BudgetsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BudgetsListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BudgetsListResult>, callback?: msRest.ServiceCallback<Models.BudgetsListResult>): Promise<Models.BudgetsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.BudgetsListResponse>;
  }

  /**
   * Gets the budget for a subscription by budget name.
   * @param [options] The optional parameters
   * @returns Promise<Models.BudgetsGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.BudgetsGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.Budget>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Budget>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Budget>, callback?: msRest.ServiceCallback<Models.Budget>): Promise<Models.BudgetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BudgetsGetResponse>;
  }

  /**
   * The operation to create or update a budget. Update operation requires latest eTag to be set in
   * the request mandatorily. You may obtain the latest eTag by performing a get operation. Create
   * operation does not require eTag.
   * @param parameters Parameters supplied to the Create Budget operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BudgetsCreateOrUpdateResponse>
   */
  createOrUpdate(parameters: Models.Budget, options?: msRest.RequestOptionsBase): Promise<Models.BudgetsCreateOrUpdateResponse>;
  /**
   * @param parameters Parameters supplied to the Create Budget operation.
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.Budget, callback: msRest.ServiceCallback<Models.Budget>): void;
  /**
   * @param parameters Parameters supplied to the Create Budget operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.Budget, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Budget>): void;
  createOrUpdate(parameters: Models.Budget, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Budget>, callback?: msRest.ServiceCallback<Models.Budget>): Promise<Models.BudgetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.BudgetsCreateOrUpdateResponse>;
  }

  /**
   * The operation to delete a budget.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteMethod(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BudgetsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Budget
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Budget,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Budget
    },
    201: {
      bodyMapper: Mappers.Budget
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
