/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/usageDetailsListMappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClientContext } from "../consumptionManagementClientContext";

/** Class representing a UsageDetailsList. */
export class UsageDetailsList {
  private readonly client: ConsumptionManagementClientContext;

  /**
   * Create a UsageDetailsList.
   * @param {ConsumptionManagementClientContext} client Reference to the service client.
   */
  constructor(client: ConsumptionManagementClientContext) {
    this.client = client;
  }

  /**
   * Download usage details data.
   * @param scope The scope associated with usage details operations. This includes
   * '/subscriptions/{subscriptionId}/' for subscription scope,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
   * '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount
   * scope and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management
   * Group scope. For subscription, billing account, department, enrollment account and management
   * group, you can also add billing period to the scope using
   * '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
   * period at department scope use
   * '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'
   * @param [options] The optional parameters
   * @returns Promise<Models.UsageDetailsListDownloadResponse>
   */
  download(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.UsageDetailsListDownloadResponse> {
    return this.beginDownload(scope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.UsageDetailsListDownloadResponse>;
  }

  /**
   * Download usage details data.
   * @param scope The scope associated with usage details operations. This includes
   * '/subscriptions/{subscriptionId}/' for subscription scope,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
   * '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount
   * scope and '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management
   * Group scope. For subscription, billing account, department, enrollment account and management
   * group, you can also add billing period to the scope using
   * '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For e.g. to specify billing
   * period at department scope use
   * '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDownload(scope: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        scope,
        options
      },
      beginDownloadOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginDownloadOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Consumption/usageDetails/download",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageDetailsDownloadResponse,
      headersMapper: Mappers.UsageDetailsListDownloadHeaders
    },
    202: {
      headersMapper: Mappers.UsageDetailsListDownloadHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
