/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDomainservices = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Ldaps.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Ldaps = <Ldaps>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Ldaps;
    (function (Ldaps) {
        Ldaps["Enabled"] = "Enabled";
        Ldaps["Disabled"] = "Disabled";
    })(Ldaps || (Ldaps = {}));
    /**
     * Defines values for ExternalAccess.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ExternalAccess =
     * <ExternalAccess>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ExternalAccess;
    (function (ExternalAccess) {
        ExternalAccess["Enabled"] = "Enabled";
        ExternalAccess["Disabled"] = "Disabled";
    })(ExternalAccess || (ExternalAccess = {}));
    /**
     * Defines values for NotifyGlobalAdmins.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NotifyGlobalAdmins =
     * <NotifyGlobalAdmins>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NotifyGlobalAdmins;
    (function (NotifyGlobalAdmins) {
        NotifyGlobalAdmins["Enabled"] = "Enabled";
        NotifyGlobalAdmins["Disabled"] = "Disabled";
    })(NotifyGlobalAdmins || (NotifyGlobalAdmins = {}));
    /**
     * Defines values for NotifyDcAdmins.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NotifyDcAdmins =
     * <NotifyDcAdmins>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NotifyDcAdmins;
    (function (NotifyDcAdmins) {
        NotifyDcAdmins["Enabled"] = "Enabled";
        NotifyDcAdmins["Disabled"] = "Disabled";
    })(NotifyDcAdmins || (NotifyDcAdmins = {}));
    /**
     * Defines values for NtlmV1.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: NtlmV1 = <NtlmV1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var NtlmV1;
    (function (NtlmV1) {
        NtlmV1["Enabled"] = "Enabled";
        NtlmV1["Disabled"] = "Disabled";
    })(NtlmV1 || (NtlmV1 = {}));
    /**
     * Defines values for TlsV1.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TlsV1 = <TlsV1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TlsV1;
    (function (TlsV1) {
        TlsV1["Enabled"] = "Enabled";
        TlsV1["Disabled"] = "Disabled";
    })(TlsV1 || (TlsV1 = {}));
    /**
     * Defines values for SyncNtlmPasswords.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SyncNtlmPasswords =
     * <SyncNtlmPasswords>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SyncNtlmPasswords;
    (function (SyncNtlmPasswords) {
        SyncNtlmPasswords["Enabled"] = "Enabled";
        SyncNtlmPasswords["Disabled"] = "Disabled";
    })(SyncNtlmPasswords || (SyncNtlmPasswords = {}));
    /**
     * Defines values for FilteredSync.
     * Possible values include: 'Enabled', 'Disabled'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: FilteredSync =
     * <FilteredSync>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var FilteredSync;
    (function (FilteredSync) {
        FilteredSync["Enabled"] = "Enabled";
        FilteredSync["Disabled"] = "Disabled";
    })(FilteredSync || (FilteredSync = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Ldaps () { return Ldaps; },
        get ExternalAccess () { return ExternalAccess; },
        get NotifyGlobalAdmins () { return NotifyGlobalAdmins; },
        get NotifyDcAdmins () { return NotifyDcAdmins; },
        get NtlmV1 () { return NtlmV1; },
        get TlsV1 () { return TlsV1; },
        get SyncNtlmPasswords () { return SyncNtlmPasswords; },
        get FilteredSync () { return FilteredSync; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LdapsSettings = {
        serializedName: "LdapsSettings",
        type: {
            name: "Composite",
            className: "LdapsSettings",
            modelProperties: {
                ldaps: {
                    serializedName: "ldaps",
                    type: {
                        name: "String"
                    }
                },
                pfxCertificate: {
                    serializedName: "pfxCertificate",
                    type: {
                        name: "String"
                    }
                },
                pfxCertificatePassword: {
                    serializedName: "pfxCertificatePassword",
                    type: {
                        name: "String"
                    }
                },
                publicCertificate: {
                    readOnly: true,
                    serializedName: "publicCertificate",
                    type: {
                        name: "String"
                    }
                },
                certificateThumbprint: {
                    readOnly: true,
                    serializedName: "certificateThumbprint",
                    type: {
                        name: "String"
                    }
                },
                certificateNotAfter: {
                    readOnly: true,
                    serializedName: "certificateNotAfter",
                    type: {
                        name: "DateTime"
                    }
                },
                externalAccess: {
                    serializedName: "externalAccess",
                    type: {
                        name: "String"
                    }
                },
                externalAccessIpAddress: {
                    readOnly: true,
                    serializedName: "externalAccessIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HealthMonitor = {
        serializedName: "HealthMonitor",
        type: {
            name: "Composite",
            className: "HealthMonitor",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HealthAlert = {
        serializedName: "HealthAlert",
        type: {
            name: "Composite",
            className: "HealthAlert",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                issue: {
                    readOnly: true,
                    serializedName: "issue",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    readOnly: true,
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                raised: {
                    readOnly: true,
                    serializedName: "raised",
                    type: {
                        name: "DateTime"
                    }
                },
                lastDetected: {
                    readOnly: true,
                    serializedName: "lastDetected",
                    type: {
                        name: "DateTime"
                    }
                },
                resolutionUri: {
                    readOnly: true,
                    serializedName: "resolutionUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NotificationSettings = {
        serializedName: "NotificationSettings",
        type: {
            name: "Composite",
            className: "NotificationSettings",
            modelProperties: {
                notifyGlobalAdmins: {
                    serializedName: "notifyGlobalAdmins",
                    type: {
                        name: "String"
                    }
                },
                notifyDcAdmins: {
                    serializedName: "notifyDcAdmins",
                    type: {
                        name: "String"
                    }
                },
                additionalRecipients: {
                    serializedName: "additionalRecipients",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DomainSecuritySettings = {
        serializedName: "DomainSecuritySettings",
        type: {
            name: "Composite",
            className: "DomainSecuritySettings",
            modelProperties: {
                ntlmV1: {
                    serializedName: "ntlmV1",
                    type: {
                        name: "String"
                    }
                },
                tlsV1: {
                    serializedName: "tlsV1",
                    type: {
                        name: "String"
                    }
                },
                syncNtlmPasswords: {
                    serializedName: "syncNtlmPasswords",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DomainServiceProperties = {
        serializedName: "DomainServiceProperties",
        type: {
            name: "Composite",
            className: "DomainServiceProperties",
            modelProperties: {
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                domainName: {
                    serializedName: "domainName",
                    type: {
                        name: "String"
                    }
                },
                vnetSiteId: {
                    readOnly: true,
                    serializedName: "vnetSiteId",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                },
                ldapsSettings: {
                    serializedName: "ldapsSettings",
                    type: {
                        name: "Composite",
                        className: "LdapsSettings"
                    }
                },
                healthLastEvaluated: {
                    readOnly: true,
                    serializedName: "healthLastEvaluated",
                    type: {
                        name: "DateTime"
                    }
                },
                healthMonitors: {
                    readOnly: true,
                    serializedName: "healthMonitors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthMonitor"
                            }
                        }
                    }
                },
                healthAlerts: {
                    readOnly: true,
                    serializedName: "healthAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthAlert"
                            }
                        }
                    }
                },
                notificationSettings: {
                    serializedName: "notificationSettings",
                    type: {
                        name: "Composite",
                        className: "NotificationSettings"
                    }
                },
                domainSecuritySettings: {
                    serializedName: "domainSecuritySettings",
                    type: {
                        name: "Composite",
                        className: "DomainSecuritySettings"
                    }
                },
                filteredSync: {
                    serializedName: "filteredSync",
                    type: {
                        name: "String"
                    }
                },
                domainControllerIpAddress: {
                    readOnly: true,
                    serializedName: "domainControllerIpAddress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                serviceStatus: {
                    readOnly: true,
                    serializedName: "serviceStatus",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DomainService = {
        serializedName: "DomainService",
        type: {
            name: "Composite",
            className: "DomainService",
            modelProperties: __assign({}, Resource.type.modelProperties, { tenantId: {
                    readOnly: true,
                    serializedName: "properties.tenantId",
                    type: {
                        name: "String"
                    }
                }, domainName: {
                    serializedName: "properties.domainName",
                    type: {
                        name: "String"
                    }
                }, vnetSiteId: {
                    readOnly: true,
                    serializedName: "properties.vnetSiteId",
                    type: {
                        name: "String"
                    }
                }, subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }, ldapsSettings: {
                    serializedName: "properties.ldapsSettings",
                    type: {
                        name: "Composite",
                        className: "LdapsSettings"
                    }
                }, healthLastEvaluated: {
                    readOnly: true,
                    serializedName: "properties.healthLastEvaluated",
                    type: {
                        name: "DateTime"
                    }
                }, healthMonitors: {
                    readOnly: true,
                    serializedName: "properties.healthMonitors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthMonitor"
                            }
                        }
                    }
                }, healthAlerts: {
                    readOnly: true,
                    serializedName: "properties.healthAlerts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HealthAlert"
                            }
                        }
                    }
                }, notificationSettings: {
                    serializedName: "properties.notificationSettings",
                    type: {
                        name: "Composite",
                        className: "NotificationSettings"
                    }
                }, domainSecuritySettings: {
                    serializedName: "properties.domainSecuritySettings",
                    type: {
                        name: "Composite",
                        className: "DomainSecuritySettings"
                    }
                }, filteredSync: {
                    serializedName: "properties.filteredSync",
                    type: {
                        name: "String"
                    }
                }, domainControllerIpAddress: {
                    readOnly: true,
                    serializedName: "properties.domainControllerIpAddress",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, serviceStatus: {
                    readOnly: true,
                    serializedName: "properties.serviceStatus",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DomainServicePatchProperties = {
        serializedName: "DomainServicePatchProperties",
        type: {
            name: "Composite",
            className: "DomainServicePatchProperties",
            modelProperties: {
                ldapsSettings: {
                    serializedName: "ldapsSettings",
                    type: {
                        name: "Composite",
                        className: "LdapsSettings"
                    }
                },
                notificationSettings: {
                    serializedName: "notificationSettings",
                    type: {
                        name: "Composite",
                        className: "NotificationSettings"
                    }
                },
                domainSecuritySettings: {
                    serializedName: "domainSecuritySettings",
                    type: {
                        name: "Composite",
                        className: "DomainSecuritySettings"
                    }
                },
                filteredSync: {
                    serializedName: "filteredSync",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplayInfo = {
        serializedName: "OperationDisplayInfo",
        type: {
            name: "Composite",
            className: "OperationDisplayInfo",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntity = {
        serializedName: "OperationEntity",
        type: {
            name: "Composite",
            className: "OperationEntity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplayInfo"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntityListResult = {
        serializedName: "OperationEntityListResult",
        type: {
            name: "Composite",
            className: "OperationEntityListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationEntity"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DomainServiceListResult = {
        serializedName: "DomainServiceListResult",
        type: {
            name: "Composite",
            className: "DomainServiceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DomainService"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        LdapsSettings: LdapsSettings,
        HealthMonitor: HealthMonitor,
        HealthAlert: HealthAlert,
        NotificationSettings: NotificationSettings,
        DomainSecuritySettings: DomainSecuritySettings,
        DomainServiceProperties: DomainServiceProperties,
        DomainService: DomainService,
        DomainServicePatchProperties: DomainServicePatchProperties,
        OperationDisplayInfo: OperationDisplayInfo,
        OperationEntity: OperationEntity,
        OperationEntityListResult: OperationEntityListResult,
        DomainServiceListResult: DomainServiceListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationEntityListResult: OperationEntityListResult,
        OperationEntity: OperationEntity,
        OperationDisplayInfo: OperationDisplayInfo,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var domainServiceName = {
        parameterPath: "domainServiceName",
        mapper: {
            required: true,
            serializedName: "domainServiceName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DomainServiceOperations. */
    var DomainServiceOperations = /** @class */ (function () {
        /**
         * Create a DomainServiceOperations.
         * @param {DomainservicesManagementClientContext} client Reference to the service client.
         */
        function DomainServiceOperations(client) {
            this.client = client;
        }
        DomainServiceOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        DomainServiceOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return DomainServiceOperations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.AAD/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        DomainServiceListResult: DomainServiceListResult,
        DomainService: DomainService,
        Resource: Resource,
        BaseResource: BaseResource,
        LdapsSettings: LdapsSettings,
        HealthMonitor: HealthMonitor,
        HealthAlert: HealthAlert,
        NotificationSettings: NotificationSettings,
        DomainSecuritySettings: DomainSecuritySettings,
        CloudError: CloudError,
        DomainServiceProperties: DomainServiceProperties,
        DomainServicePatchProperties: DomainServicePatchProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DomainServices. */
    var DomainServices = /** @class */ (function () {
        /**
         * Create a DomainServices.
         * @param {DomainservicesManagementClientContext} client Reference to the service client.
         */
        function DomainServices(client) {
            this.client = client;
        }
        DomainServices.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        DomainServices.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * The Create Domain Service operation creates a new domain service with the specified parameters.
         * If the specific service already exists, then any patchable properties will be updated and any
         * immutable properties will remain unchanged.
         * @summary Create or Update Domain Service (PUT Resource)
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param domainServiceName The name of the domain service in the specified subscription and
         * resource group.
         * @param properties Properties supplied to the Create or Update a Domain Service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DomainServicesCreateOrUpdateResponse>
         */
        DomainServices.prototype.createOrUpdate = function (resourceGroupName$$1, domainServiceName$$1, properties, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, domainServiceName$$1, properties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        DomainServices.prototype.get = function (resourceGroupName$$1, domainServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                domainServiceName: domainServiceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * The Delete Domain Service operation deletes an existing Domain Service.
         * @summary Delete Domain Service (DELETE Resource)
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param domainServiceName The name of the domain service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<Models.DomainServicesDeleteMethodResponse>
         */
        DomainServices.prototype.deleteMethod = function (resourceGroupName$$1, domainServiceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, domainServiceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Update Domain Service operation can be used to update the existing deployment. The update
         * call only supports the properties listed in the PATCH body.
         * @summary Update Domain Service (PATCH Resource)
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param domainServiceName The name of the domain service in the specified subscription and
         * resource group.
         * @param properties Properties supplied to the Update a Domain Service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DomainServicesUpdateResponse>
         */
        DomainServices.prototype.update = function (resourceGroupName$$1, domainServiceName$$1, properties, options) {
            return this.beginUpdate(resourceGroupName$$1, domainServiceName$$1, properties, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The Create Domain Service operation creates a new domain service with the specified parameters.
         * If the specific service already exists, then any patchable properties will be updated and any
         * immutable properties will remain unchanged.
         * @summary Create or Update Domain Service (PUT Resource)
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param domainServiceName The name of the domain service in the specified subscription and
         * resource group.
         * @param properties Properties supplied to the Create or Update a Domain Service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DomainServices.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, domainServiceName$$1, properties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                domainServiceName: domainServiceName$$1,
                properties: properties,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * The Delete Domain Service operation deletes an existing Domain Service.
         * @summary Delete Domain Service (DELETE Resource)
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param domainServiceName The name of the domain service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DomainServices.prototype.beginDeleteMethod = function (resourceGroupName$$1, domainServiceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                domainServiceName: domainServiceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * The Update Domain Service operation can be used to update the existing deployment. The update
         * call only supports the properties listed in the PATCH body.
         * @summary Update Domain Service (PATCH Resource)
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param domainServiceName The name of the domain service in the specified subscription and
         * resource group.
         * @param properties Properties supplied to the Update a Domain Service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        DomainServices.prototype.beginUpdate = function (resourceGroupName$$1, domainServiceName$$1, properties, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                domainServiceName: domainServiceName$$1,
                properties: properties,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        DomainServices.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        DomainServices.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return DomainServices;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AAD/domainServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            domainServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            domainServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "properties",
            mapper: __assign({}, DomainServiceProperties, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DomainService
            },
            201: {
                bodyMapper: DomainService
            },
            202: {
                bodyMapper: DomainService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            domainServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {
                bodyMapper: DomainService
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            domainServiceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "properties",
            mapper: __assign({}, DomainServicePatchProperties, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DomainService
            },
            202: {
                bodyMapper: DomainService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DomainServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-domainservices";
    var packageVersion = "1.0.0";
    var DomainservicesManagementClientContext = /** @class */ (function (_super) {
        __extends(DomainservicesManagementClientContext, _super);
        /**
         * Initializes a new instance of the DomainservicesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function DomainservicesManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-06-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DomainservicesManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DomainservicesManagementClient = /** @class */ (function (_super) {
        __extends(DomainservicesManagementClient, _super);
        /**
         * Initializes a new instance of the DomainservicesManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function DomainservicesManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.domainServiceOperations = new DomainServiceOperations(_this);
            _this.domainServices = new DomainServices(_this);
            return _this;
        }
        return DomainservicesManagementClient;
    }(DomainservicesManagementClientContext));

    exports.DomainservicesManagementClient = DomainservicesManagementClient;
    exports.DomainservicesManagementClientContext = DomainservicesManagementClientContext;
    exports.DomainservicesManagementModels = index;
    exports.DomainservicesManagementMappers = mappers;
    exports.DomainServiceOperations = DomainServiceOperations;
    exports.DomainServices = DomainServices;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-domainservices.js.map
