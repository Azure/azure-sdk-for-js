/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/ioTSpacesMappers";
import * as Parameters from "../models/parameters";
import { IoTSpacesClientContext } from "../ioTSpacesClientContext";

/** Class representing a IoTSpaces. */
export class IoTSpaces {
  private readonly client: IoTSpacesClientContext;

  /**
   * Create a IoTSpaces.
   * @param {IoTSpacesClientContext} client Reference to the service client.
   */
  constructor(client: IoTSpacesClientContext) {
    this.client = client;
  }

  /**
   * Get the metadata of a IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.IoTSpacesDescription>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IoTSpacesDescription>): void;
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IoTSpacesDescription>, callback?: msRest.ServiceCallback<Models.IoTSpacesDescription>): Promise<Models.IoTSpacesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IoTSpacesGetResponse>;
  }

  /**
   * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property
   * is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with
   * the modified values in a new body to update the IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, iotSpaceDescription: Models.IoTSpacesDescription, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,resourceName,iotSpaceDescription,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IoTSpacesCreateOrUpdateResponse>;
  }

  /**
   * Update the metadata of a IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesUpdateResponse>
   */
  update(resourceGroupName: string, resourceName: string, iotSpacePatchDescription: Models.IoTSpacesPatchDescription, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,resourceName,iotSpacePatchDescription,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IoTSpacesUpdateResponse>;
  }

  /**
   * Delete an IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IoTSpacesDeleteMethodResponse>;
  }

  /**
   * Get all the IoTSpaces instances in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>, callback?: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): Promise<Models.IoTSpacesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IoTSpacesListResponse>;
  }

  /**
   * Get all the IoTSpaces instances in a resource group.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>, callback?: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): Promise<Models.IoTSpacesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.IoTSpacesListByResourceGroupResponse>;
  }

  /**
   * Check if an IoTSpaces instance name is available.
   * @param operationInputs Set the name parameter in the OperationInputs structure to the name of
   * the IoTSpaces instance to check.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesCheckNameAvailabilityResponse>
   */
  checkNameAvailability(operationInputs: Models.OperationInputs, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesCheckNameAvailabilityResponse>;
  /**
   * @param operationInputs Set the name parameter in the OperationInputs structure to the name of
   * the IoTSpaces instance to check.
   * @param callback The callback
   */
  checkNameAvailability(operationInputs: Models.OperationInputs, callback: msRest.ServiceCallback<Models.IoTSpacesNameAvailabilityInfo>): void;
  /**
   * @param operationInputs Set the name parameter in the OperationInputs structure to the name of
   * the IoTSpaces instance to check.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(operationInputs: Models.OperationInputs, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IoTSpacesNameAvailabilityInfo>): void;
  checkNameAvailability(operationInputs: Models.OperationInputs, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IoTSpacesNameAvailabilityInfo>, callback?: msRest.ServiceCallback<Models.IoTSpacesNameAvailabilityInfo>): Promise<Models.IoTSpacesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        operationInputs,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.IoTSpacesCheckNameAvailabilityResponse>;
  }

  /**
   * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property
   * is to retrieve the IoTSpaces instance metadata and security metadata, and then combine them with
   * the modified values in a new body to update the IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, resourceName: string, iotSpaceDescription: Models.IoTSpacesDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        iotSpaceDescription,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update the metadata of a IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, resourceName: string, iotSpacePatchDescription: Models.IoTSpacesPatchDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        iotSpacePatchDescription,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete an IoTSpaces instance.
   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
   * @param resourceName The name of the IoTSpaces instance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Get all the IoTSpaces instances in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>, callback?: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): Promise<Models.IoTSpacesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.IoTSpacesListNextResponse>;
  }

  /**
   * Get all the IoTSpaces instances in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IoTSpacesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IoTSpacesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>, callback?: msRest.ServiceCallback<Models.IoTSpacesDescriptionListResult>): Promise<Models.IoTSpacesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.IoTSpacesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescription
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/Graph",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "operationInputs",
    mapper: {
      ...Mappers.OperationInputs,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesNameAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "iotSpaceDescription",
    mapper: {
      ...Mappers.IoTSpacesDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescription
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "iotSpacePatchDescription",
    mapper: {
      ...Mappers.IoTSpacesPatchDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescription
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescription
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IoTSpacesDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDetails
    }
  },
  serializer
};
