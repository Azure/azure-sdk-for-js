/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmCompute = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for StatusLevelTypes.
     * Possible values include: 'Info', 'Warning', 'Error'
     * @readonly
     * @enum {string}
     */
    var StatusLevelTypes;
    (function (StatusLevelTypes) {
        StatusLevelTypes["Info"] = "Info";
        StatusLevelTypes["Warning"] = "Warning";
        StatusLevelTypes["Error"] = "Error";
    })(StatusLevelTypes || (StatusLevelTypes = {}));
    /**
     * Defines values for AvailabilitySetSkuTypes.
     * Possible values include: 'Classic', 'Aligned'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AvailabilitySetSkuTypes =
     * <AvailabilitySetSkuTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AvailabilitySetSkuTypes;
    (function (AvailabilitySetSkuTypes) {
        AvailabilitySetSkuTypes["Classic"] = "Classic";
        AvailabilitySetSkuTypes["Aligned"] = "Aligned";
    })(AvailabilitySetSkuTypes || (AvailabilitySetSkuTypes = {}));
    /**
     * Defines values for OperatingSystemTypes.
     * Possible values include: 'Windows', 'Linux'
     * @readonly
     * @enum {string}
     */
    var OperatingSystemTypes;
    (function (OperatingSystemTypes) {
        OperatingSystemTypes["Windows"] = "Windows";
        OperatingSystemTypes["Linux"] = "Linux";
    })(OperatingSystemTypes || (OperatingSystemTypes = {}));
    /**
     * Defines values for VirtualMachineSizeTypes.
     * Possible values include: 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
     * 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
     * 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
     * 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
     * 'Standard_A2_v2', 'Standard_A4_v2', 'Standard_A8_v2', 'Standard_A2m_v2',
     * 'Standard_A4m_v2', 'Standard_A8m_v2', 'Standard_B1s', 'Standard_B1ms',
     * 'Standard_B2s', 'Standard_B2ms', 'Standard_B4ms', 'Standard_B8ms',
     * 'Standard_D1', 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11',
     * 'Standard_D12', 'Standard_D13', 'Standard_D14', 'Standard_D1_v2',
     * 'Standard_D2_v2', 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2',
     * 'Standard_D2_v3', 'Standard_D4_v3', 'Standard_D8_v3', 'Standard_D16_v3',
     * 'Standard_D32_v3', 'Standard_D64_v3', 'Standard_D2s_v3', 'Standard_D4s_v3',
     * 'Standard_D8s_v3', 'Standard_D16s_v3', 'Standard_D32s_v3',
     * 'Standard_D64s_v3', 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_D13_v2',
     * 'Standard_D14_v2', 'Standard_D15_v2', 'Standard_DS1', 'Standard_DS2',
     * 'Standard_DS3', 'Standard_DS4', 'Standard_DS11', 'Standard_DS12',
     * 'Standard_DS13', 'Standard_DS14', 'Standard_DS1_v2', 'Standard_DS2_v2',
     * 'Standard_DS3_v2', 'Standard_DS4_v2', 'Standard_DS5_v2', 'Standard_DS11_v2',
     * 'Standard_DS12_v2', 'Standard_DS13_v2', 'Standard_DS14_v2',
     * 'Standard_DS15_v2', 'Standard_DS13-4_v2', 'Standard_DS13-2_v2',
     * 'Standard_DS14-8_v2', 'Standard_DS14-4_v2', 'Standard_E2_v3',
     * 'Standard_E4_v3', 'Standard_E8_v3', 'Standard_E16_v3', 'Standard_E32_v3',
     * 'Standard_E64_v3', 'Standard_E2s_v3', 'Standard_E4s_v3', 'Standard_E8s_v3',
     * 'Standard_E16s_v3', 'Standard_E32s_v3', 'Standard_E64s_v3',
     * 'Standard_E32-16_v3', 'Standard_E32-8s_v3', 'Standard_E64-32s_v3',
     * 'Standard_E64-16s_v3', 'Standard_F1', 'Standard_F2', 'Standard_F4',
     * 'Standard_F8', 'Standard_F16', 'Standard_F1s', 'Standard_F2s',
     * 'Standard_F4s', 'Standard_F8s', 'Standard_F16s', 'Standard_F2s_v2',
     * 'Standard_F4s_v2', 'Standard_F8s_v2', 'Standard_F16s_v2',
     * 'Standard_F32s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5',
     * 'Standard_GS4-8', 'Standard_GS4-4', 'Standard_GS5-16', 'Standard_GS5-8',
     * 'Standard_H8', 'Standard_H16', 'Standard_H8m', 'Standard_H16m',
     * 'Standard_H16r', 'Standard_H16mr', 'Standard_L4s', 'Standard_L8s',
     * 'Standard_L16s', 'Standard_L32s', 'Standard_M64s', 'Standard_M64ms',
     * 'Standard_M128s', 'Standard_M128ms', 'Standard_M64-32ms',
     * 'Standard_M64-16ms', 'Standard_M128-64ms', 'Standard_M128-32ms',
     * 'Standard_NC6', 'Standard_NC12', 'Standard_NC24', 'Standard_NC24r',
     * 'Standard_NC6s_v2', 'Standard_NC12s_v2', 'Standard_NC24s_v2',
     * 'Standard_NC24rs_v2', 'Standard_NC6s_v3', 'Standard_NC12s_v3',
     * 'Standard_NC24s_v3', 'Standard_NC24rs_v3', 'Standard_ND6s',
     * 'Standard_ND12s', 'Standard_ND24s', 'Standard_ND24rs', 'Standard_NV6',
     * 'Standard_NV12', 'Standard_NV24'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualMachineSizeTypes =
     * <VirtualMachineSizeTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualMachineSizeTypes;
    (function (VirtualMachineSizeTypes) {
        VirtualMachineSizeTypes["BasicA0"] = "Basic_A0";
        VirtualMachineSizeTypes["BasicA1"] = "Basic_A1";
        VirtualMachineSizeTypes["BasicA2"] = "Basic_A2";
        VirtualMachineSizeTypes["BasicA3"] = "Basic_A3";
        VirtualMachineSizeTypes["BasicA4"] = "Basic_A4";
        VirtualMachineSizeTypes["StandardA0"] = "Standard_A0";
        VirtualMachineSizeTypes["StandardA1"] = "Standard_A1";
        VirtualMachineSizeTypes["StandardA2"] = "Standard_A2";
        VirtualMachineSizeTypes["StandardA3"] = "Standard_A3";
        VirtualMachineSizeTypes["StandardA4"] = "Standard_A4";
        VirtualMachineSizeTypes["StandardA5"] = "Standard_A5";
        VirtualMachineSizeTypes["StandardA6"] = "Standard_A6";
        VirtualMachineSizeTypes["StandardA7"] = "Standard_A7";
        VirtualMachineSizeTypes["StandardA8"] = "Standard_A8";
        VirtualMachineSizeTypes["StandardA9"] = "Standard_A9";
        VirtualMachineSizeTypes["StandardA10"] = "Standard_A10";
        VirtualMachineSizeTypes["StandardA11"] = "Standard_A11";
        VirtualMachineSizeTypes["StandardA1V2"] = "Standard_A1_v2";
        VirtualMachineSizeTypes["StandardA2V2"] = "Standard_A2_v2";
        VirtualMachineSizeTypes["StandardA4V2"] = "Standard_A4_v2";
        VirtualMachineSizeTypes["StandardA8V2"] = "Standard_A8_v2";
        VirtualMachineSizeTypes["StandardA2mV2"] = "Standard_A2m_v2";
        VirtualMachineSizeTypes["StandardA4mV2"] = "Standard_A4m_v2";
        VirtualMachineSizeTypes["StandardA8mV2"] = "Standard_A8m_v2";
        VirtualMachineSizeTypes["StandardB1s"] = "Standard_B1s";
        VirtualMachineSizeTypes["StandardB1ms"] = "Standard_B1ms";
        VirtualMachineSizeTypes["StandardB2s"] = "Standard_B2s";
        VirtualMachineSizeTypes["StandardB2ms"] = "Standard_B2ms";
        VirtualMachineSizeTypes["StandardB4ms"] = "Standard_B4ms";
        VirtualMachineSizeTypes["StandardB8ms"] = "Standard_B8ms";
        VirtualMachineSizeTypes["StandardD1"] = "Standard_D1";
        VirtualMachineSizeTypes["StandardD2"] = "Standard_D2";
        VirtualMachineSizeTypes["StandardD3"] = "Standard_D3";
        VirtualMachineSizeTypes["StandardD4"] = "Standard_D4";
        VirtualMachineSizeTypes["StandardD11"] = "Standard_D11";
        VirtualMachineSizeTypes["StandardD12"] = "Standard_D12";
        VirtualMachineSizeTypes["StandardD13"] = "Standard_D13";
        VirtualMachineSizeTypes["StandardD14"] = "Standard_D14";
        VirtualMachineSizeTypes["StandardD1V2"] = "Standard_D1_v2";
        VirtualMachineSizeTypes["StandardD2V2"] = "Standard_D2_v2";
        VirtualMachineSizeTypes["StandardD3V2"] = "Standard_D3_v2";
        VirtualMachineSizeTypes["StandardD4V2"] = "Standard_D4_v2";
        VirtualMachineSizeTypes["StandardD5V2"] = "Standard_D5_v2";
        VirtualMachineSizeTypes["StandardD2V3"] = "Standard_D2_v3";
        VirtualMachineSizeTypes["StandardD4V3"] = "Standard_D4_v3";
        VirtualMachineSizeTypes["StandardD8V3"] = "Standard_D8_v3";
        VirtualMachineSizeTypes["StandardD16V3"] = "Standard_D16_v3";
        VirtualMachineSizeTypes["StandardD32V3"] = "Standard_D32_v3";
        VirtualMachineSizeTypes["StandardD64V3"] = "Standard_D64_v3";
        VirtualMachineSizeTypes["StandardD2sV3"] = "Standard_D2s_v3";
        VirtualMachineSizeTypes["StandardD4sV3"] = "Standard_D4s_v3";
        VirtualMachineSizeTypes["StandardD8sV3"] = "Standard_D8s_v3";
        VirtualMachineSizeTypes["StandardD16sV3"] = "Standard_D16s_v3";
        VirtualMachineSizeTypes["StandardD32sV3"] = "Standard_D32s_v3";
        VirtualMachineSizeTypes["StandardD64sV3"] = "Standard_D64s_v3";
        VirtualMachineSizeTypes["StandardD11V2"] = "Standard_D11_v2";
        VirtualMachineSizeTypes["StandardD12V2"] = "Standard_D12_v2";
        VirtualMachineSizeTypes["StandardD13V2"] = "Standard_D13_v2";
        VirtualMachineSizeTypes["StandardD14V2"] = "Standard_D14_v2";
        VirtualMachineSizeTypes["StandardD15V2"] = "Standard_D15_v2";
        VirtualMachineSizeTypes["StandardDS1"] = "Standard_DS1";
        VirtualMachineSizeTypes["StandardDS2"] = "Standard_DS2";
        VirtualMachineSizeTypes["StandardDS3"] = "Standard_DS3";
        VirtualMachineSizeTypes["StandardDS4"] = "Standard_DS4";
        VirtualMachineSizeTypes["StandardDS11"] = "Standard_DS11";
        VirtualMachineSizeTypes["StandardDS12"] = "Standard_DS12";
        VirtualMachineSizeTypes["StandardDS13"] = "Standard_DS13";
        VirtualMachineSizeTypes["StandardDS14"] = "Standard_DS14";
        VirtualMachineSizeTypes["StandardDS1V2"] = "Standard_DS1_v2";
        VirtualMachineSizeTypes["StandardDS2V2"] = "Standard_DS2_v2";
        VirtualMachineSizeTypes["StandardDS3V2"] = "Standard_DS3_v2";
        VirtualMachineSizeTypes["StandardDS4V2"] = "Standard_DS4_v2";
        VirtualMachineSizeTypes["StandardDS5V2"] = "Standard_DS5_v2";
        VirtualMachineSizeTypes["StandardDS11V2"] = "Standard_DS11_v2";
        VirtualMachineSizeTypes["StandardDS12V2"] = "Standard_DS12_v2";
        VirtualMachineSizeTypes["StandardDS13V2"] = "Standard_DS13_v2";
        VirtualMachineSizeTypes["StandardDS14V2"] = "Standard_DS14_v2";
        VirtualMachineSizeTypes["StandardDS15V2"] = "Standard_DS15_v2";
        VirtualMachineSizeTypes["StandardDS134V2"] = "Standard_DS13-4_v2";
        VirtualMachineSizeTypes["StandardDS132V2"] = "Standard_DS13-2_v2";
        VirtualMachineSizeTypes["StandardDS148V2"] = "Standard_DS14-8_v2";
        VirtualMachineSizeTypes["StandardDS144V2"] = "Standard_DS14-4_v2";
        VirtualMachineSizeTypes["StandardE2V3"] = "Standard_E2_v3";
        VirtualMachineSizeTypes["StandardE4V3"] = "Standard_E4_v3";
        VirtualMachineSizeTypes["StandardE8V3"] = "Standard_E8_v3";
        VirtualMachineSizeTypes["StandardE16V3"] = "Standard_E16_v3";
        VirtualMachineSizeTypes["StandardE32V3"] = "Standard_E32_v3";
        VirtualMachineSizeTypes["StandardE64V3"] = "Standard_E64_v3";
        VirtualMachineSizeTypes["StandardE2sV3"] = "Standard_E2s_v3";
        VirtualMachineSizeTypes["StandardE4sV3"] = "Standard_E4s_v3";
        VirtualMachineSizeTypes["StandardE8sV3"] = "Standard_E8s_v3";
        VirtualMachineSizeTypes["StandardE16sV3"] = "Standard_E16s_v3";
        VirtualMachineSizeTypes["StandardE32sV3"] = "Standard_E32s_v3";
        VirtualMachineSizeTypes["StandardE64sV3"] = "Standard_E64s_v3";
        VirtualMachineSizeTypes["StandardE3216V3"] = "Standard_E32-16_v3";
        VirtualMachineSizeTypes["StandardE328sV3"] = "Standard_E32-8s_v3";
        VirtualMachineSizeTypes["StandardE6432sV3"] = "Standard_E64-32s_v3";
        VirtualMachineSizeTypes["StandardE6416sV3"] = "Standard_E64-16s_v3";
        VirtualMachineSizeTypes["StandardF1"] = "Standard_F1";
        VirtualMachineSizeTypes["StandardF2"] = "Standard_F2";
        VirtualMachineSizeTypes["StandardF4"] = "Standard_F4";
        VirtualMachineSizeTypes["StandardF8"] = "Standard_F8";
        VirtualMachineSizeTypes["StandardF16"] = "Standard_F16";
        VirtualMachineSizeTypes["StandardF1s"] = "Standard_F1s";
        VirtualMachineSizeTypes["StandardF2s"] = "Standard_F2s";
        VirtualMachineSizeTypes["StandardF4s"] = "Standard_F4s";
        VirtualMachineSizeTypes["StandardF8s"] = "Standard_F8s";
        VirtualMachineSizeTypes["StandardF16s"] = "Standard_F16s";
        VirtualMachineSizeTypes["StandardF2sV2"] = "Standard_F2s_v2";
        VirtualMachineSizeTypes["StandardF4sV2"] = "Standard_F4s_v2";
        VirtualMachineSizeTypes["StandardF8sV2"] = "Standard_F8s_v2";
        VirtualMachineSizeTypes["StandardF16sV2"] = "Standard_F16s_v2";
        VirtualMachineSizeTypes["StandardF32sV2"] = "Standard_F32s_v2";
        VirtualMachineSizeTypes["StandardF64sV2"] = "Standard_F64s_v2";
        VirtualMachineSizeTypes["StandardF72sV2"] = "Standard_F72s_v2";
        VirtualMachineSizeTypes["StandardG1"] = "Standard_G1";
        VirtualMachineSizeTypes["StandardG2"] = "Standard_G2";
        VirtualMachineSizeTypes["StandardG3"] = "Standard_G3";
        VirtualMachineSizeTypes["StandardG4"] = "Standard_G4";
        VirtualMachineSizeTypes["StandardG5"] = "Standard_G5";
        VirtualMachineSizeTypes["StandardGS1"] = "Standard_GS1";
        VirtualMachineSizeTypes["StandardGS2"] = "Standard_GS2";
        VirtualMachineSizeTypes["StandardGS3"] = "Standard_GS3";
        VirtualMachineSizeTypes["StandardGS4"] = "Standard_GS4";
        VirtualMachineSizeTypes["StandardGS5"] = "Standard_GS5";
        VirtualMachineSizeTypes["StandardGS48"] = "Standard_GS4-8";
        VirtualMachineSizeTypes["StandardGS44"] = "Standard_GS4-4";
        VirtualMachineSizeTypes["StandardGS516"] = "Standard_GS5-16";
        VirtualMachineSizeTypes["StandardGS58"] = "Standard_GS5-8";
        VirtualMachineSizeTypes["StandardH8"] = "Standard_H8";
        VirtualMachineSizeTypes["StandardH16"] = "Standard_H16";
        VirtualMachineSizeTypes["StandardH8m"] = "Standard_H8m";
        VirtualMachineSizeTypes["StandardH16m"] = "Standard_H16m";
        VirtualMachineSizeTypes["StandardH16r"] = "Standard_H16r";
        VirtualMachineSizeTypes["StandardH16mr"] = "Standard_H16mr";
        VirtualMachineSizeTypes["StandardL4s"] = "Standard_L4s";
        VirtualMachineSizeTypes["StandardL8s"] = "Standard_L8s";
        VirtualMachineSizeTypes["StandardL16s"] = "Standard_L16s";
        VirtualMachineSizeTypes["StandardL32s"] = "Standard_L32s";
        VirtualMachineSizeTypes["StandardM64s"] = "Standard_M64s";
        VirtualMachineSizeTypes["StandardM64ms"] = "Standard_M64ms";
        VirtualMachineSizeTypes["StandardM128s"] = "Standard_M128s";
        VirtualMachineSizeTypes["StandardM128ms"] = "Standard_M128ms";
        VirtualMachineSizeTypes["StandardM6432ms"] = "Standard_M64-32ms";
        VirtualMachineSizeTypes["StandardM6416ms"] = "Standard_M64-16ms";
        VirtualMachineSizeTypes["StandardM12864ms"] = "Standard_M128-64ms";
        VirtualMachineSizeTypes["StandardM12832ms"] = "Standard_M128-32ms";
        VirtualMachineSizeTypes["StandardNC6"] = "Standard_NC6";
        VirtualMachineSizeTypes["StandardNC12"] = "Standard_NC12";
        VirtualMachineSizeTypes["StandardNC24"] = "Standard_NC24";
        VirtualMachineSizeTypes["StandardNC24r"] = "Standard_NC24r";
        VirtualMachineSizeTypes["StandardNC6sV2"] = "Standard_NC6s_v2";
        VirtualMachineSizeTypes["StandardNC12sV2"] = "Standard_NC12s_v2";
        VirtualMachineSizeTypes["StandardNC24sV2"] = "Standard_NC24s_v2";
        VirtualMachineSizeTypes["StandardNC24rsV2"] = "Standard_NC24rs_v2";
        VirtualMachineSizeTypes["StandardNC6sV3"] = "Standard_NC6s_v3";
        VirtualMachineSizeTypes["StandardNC12sV3"] = "Standard_NC12s_v3";
        VirtualMachineSizeTypes["StandardNC24sV3"] = "Standard_NC24s_v3";
        VirtualMachineSizeTypes["StandardNC24rsV3"] = "Standard_NC24rs_v3";
        VirtualMachineSizeTypes["StandardND6s"] = "Standard_ND6s";
        VirtualMachineSizeTypes["StandardND12s"] = "Standard_ND12s";
        VirtualMachineSizeTypes["StandardND24s"] = "Standard_ND24s";
        VirtualMachineSizeTypes["StandardND24rs"] = "Standard_ND24rs";
        VirtualMachineSizeTypes["StandardNV6"] = "Standard_NV6";
        VirtualMachineSizeTypes["StandardNV12"] = "Standard_NV12";
        VirtualMachineSizeTypes["StandardNV24"] = "Standard_NV24";
    })(VirtualMachineSizeTypes || (VirtualMachineSizeTypes = {}));
    /**
     * Defines values for CachingTypes.
     * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
     * @readonly
     * @enum {string}
     */
    var CachingTypes;
    (function (CachingTypes) {
        CachingTypes["None"] = "None";
        CachingTypes["ReadOnly"] = "ReadOnly";
        CachingTypes["ReadWrite"] = "ReadWrite";
    })(CachingTypes || (CachingTypes = {}));
    /**
     * Defines values for DiskCreateOptionTypes.
     * Possible values include: 'FromImage', 'Empty', 'Attach'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DiskCreateOptionTypes =
     * <DiskCreateOptionTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DiskCreateOptionTypes;
    (function (DiskCreateOptionTypes) {
        DiskCreateOptionTypes["FromImage"] = "FromImage";
        DiskCreateOptionTypes["Empty"] = "Empty";
        DiskCreateOptionTypes["Attach"] = "Attach";
    })(DiskCreateOptionTypes || (DiskCreateOptionTypes = {}));
    /**
     * Defines values for StorageAccountTypes.
     * Possible values include: 'Standard_LRS', 'Premium_LRS', 'StandardSSD_LRS',
     * 'UltraSSD_LRS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: StorageAccountTypes =
     * <StorageAccountTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var StorageAccountTypes;
    (function (StorageAccountTypes) {
        StorageAccountTypes["StandardLRS"] = "Standard_LRS";
        StorageAccountTypes["PremiumLRS"] = "Premium_LRS";
        StorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
        StorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
    })(StorageAccountTypes || (StorageAccountTypes = {}));
    /**
     * Defines values for DiffDiskOptions.
     * Possible values include: 'Local'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DiffDiskOptions =
     * <DiffDiskOptions>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DiffDiskOptions;
    (function (DiffDiskOptions) {
        DiffDiskOptions["Local"] = "Local";
    })(DiffDiskOptions || (DiffDiskOptions = {}));
    /**
     * Defines values for PassNames.
     * Possible values include: 'OobeSystem'
     * @readonly
     * @enum {string}
     */
    var PassNames;
    (function (PassNames) {
        PassNames["OobeSystem"] = "OobeSystem";
    })(PassNames || (PassNames = {}));
    /**
     * Defines values for ComponentNames.
     * Possible values include: 'Microsoft-Windows-Shell-Setup'
     * @readonly
     * @enum {string}
     */
    var ComponentNames;
    (function (ComponentNames) {
        ComponentNames["MicrosoftWindowsShellSetup"] = "Microsoft-Windows-Shell-Setup";
    })(ComponentNames || (ComponentNames = {}));
    /**
     * Defines values for SettingNames.
     * Possible values include: 'AutoLogon', 'FirstLogonCommands'
     * @readonly
     * @enum {string}
     */
    var SettingNames;
    (function (SettingNames) {
        SettingNames["AutoLogon"] = "AutoLogon";
        SettingNames["FirstLogonCommands"] = "FirstLogonCommands";
    })(SettingNames || (SettingNames = {}));
    /**
     * Defines values for ProtocolTypes.
     * Possible values include: 'Http', 'Https'
     * @readonly
     * @enum {string}
     */
    var ProtocolTypes;
    (function (ProtocolTypes) {
        ProtocolTypes["Http"] = "Http";
        ProtocolTypes["Https"] = "Https";
    })(ProtocolTypes || (ProtocolTypes = {}));
    /**
     * Defines values for ResourceIdentityType.
     * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
     * UserAssigned', 'None'
     * @readonly
     * @enum {string}
     */
    var ResourceIdentityType;
    (function (ResourceIdentityType) {
        ResourceIdentityType["SystemAssigned"] = "SystemAssigned";
        ResourceIdentityType["UserAssigned"] = "UserAssigned";
        ResourceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
        ResourceIdentityType["None"] = "None";
    })(ResourceIdentityType || (ResourceIdentityType = {}));
    /**
     * Defines values for MaintenanceOperationResultCodeTypes.
     * Possible values include: 'None', 'RetryLater', 'MaintenanceAborted',
     * 'MaintenanceCompleted'
     * @readonly
     * @enum {string}
     */
    var MaintenanceOperationResultCodeTypes;
    (function (MaintenanceOperationResultCodeTypes) {
        MaintenanceOperationResultCodeTypes["None"] = "None";
        MaintenanceOperationResultCodeTypes["RetryLater"] = "RetryLater";
        MaintenanceOperationResultCodeTypes["MaintenanceAborted"] = "MaintenanceAborted";
        MaintenanceOperationResultCodeTypes["MaintenanceCompleted"] = "MaintenanceCompleted";
    })(MaintenanceOperationResultCodeTypes || (MaintenanceOperationResultCodeTypes = {}));
    /**
     * Defines values for UpgradeMode.
     * Possible values include: 'Automatic', 'Manual', 'Rolling'
     * @readonly
     * @enum {string}
     */
    var UpgradeMode;
    (function (UpgradeMode) {
        UpgradeMode["Automatic"] = "Automatic";
        UpgradeMode["Manual"] = "Manual";
        UpgradeMode["Rolling"] = "Rolling";
    })(UpgradeMode || (UpgradeMode = {}));
    /**
     * Defines values for OperatingSystemStateTypes.
     * Possible values include: 'Generalized', 'Specialized'
     * @readonly
     * @enum {string}
     */
    var OperatingSystemStateTypes;
    (function (OperatingSystemStateTypes) {
        OperatingSystemStateTypes["Generalized"] = "Generalized";
        OperatingSystemStateTypes["Specialized"] = "Specialized";
    })(OperatingSystemStateTypes || (OperatingSystemStateTypes = {}));
    /**
     * Defines values for IPVersion.
     * Possible values include: 'IPv4', 'IPv6'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IPVersion = <IPVersion>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IPVersion;
    (function (IPVersion) {
        IPVersion["IPv4"] = "IPv4";
        IPVersion["IPv6"] = "IPv6";
    })(IPVersion || (IPVersion = {}));
    /**
     * Defines values for VirtualMachinePriorityTypes.
     * Possible values include: 'Regular', 'Low'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualMachinePriorityTypes =
     * <VirtualMachinePriorityTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualMachinePriorityTypes;
    (function (VirtualMachinePriorityTypes) {
        VirtualMachinePriorityTypes["Regular"] = "Regular";
        VirtualMachinePriorityTypes["Low"] = "Low";
    })(VirtualMachinePriorityTypes || (VirtualMachinePriorityTypes = {}));
    /**
     * Defines values for VirtualMachineEvictionPolicyTypes.
     * Possible values include: 'Deallocate', 'Delete'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: VirtualMachineEvictionPolicyTypes =
     * <VirtualMachineEvictionPolicyTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var VirtualMachineEvictionPolicyTypes;
    (function (VirtualMachineEvictionPolicyTypes) {
        VirtualMachineEvictionPolicyTypes["Deallocate"] = "Deallocate";
        VirtualMachineEvictionPolicyTypes["Delete"] = "Delete";
    })(VirtualMachineEvictionPolicyTypes || (VirtualMachineEvictionPolicyTypes = {}));
    /**
     * Defines values for VirtualMachineScaleSetSkuScaleType.
     * Possible values include: 'Automatic', 'None'
     * @readonly
     * @enum {string}
     */
    var VirtualMachineScaleSetSkuScaleType;
    (function (VirtualMachineScaleSetSkuScaleType) {
        VirtualMachineScaleSetSkuScaleType["Automatic"] = "Automatic";
        VirtualMachineScaleSetSkuScaleType["None"] = "None";
    })(VirtualMachineScaleSetSkuScaleType || (VirtualMachineScaleSetSkuScaleType = {}));
    /**
     * Defines values for UpgradeState.
     * Possible values include: 'RollingForward', 'Cancelled', 'Completed',
     * 'Faulted'
     * @readonly
     * @enum {string}
     */
    var UpgradeState;
    (function (UpgradeState) {
        UpgradeState["RollingForward"] = "RollingForward";
        UpgradeState["Cancelled"] = "Cancelled";
        UpgradeState["Completed"] = "Completed";
        UpgradeState["Faulted"] = "Faulted";
    })(UpgradeState || (UpgradeState = {}));
    /**
     * Defines values for UpgradeOperationInvoker.
     * Possible values include: 'Unknown', 'User', 'Platform'
     * @readonly
     * @enum {string}
     */
    var UpgradeOperationInvoker;
    (function (UpgradeOperationInvoker) {
        UpgradeOperationInvoker["Unknown"] = "Unknown";
        UpgradeOperationInvoker["User"] = "User";
        UpgradeOperationInvoker["Platform"] = "Platform";
    })(UpgradeOperationInvoker || (UpgradeOperationInvoker = {}));
    /**
     * Defines values for RollingUpgradeStatusCode.
     * Possible values include: 'RollingForward', 'Cancelled', 'Completed',
     * 'Faulted'
     * @readonly
     * @enum {string}
     */
    var RollingUpgradeStatusCode;
    (function (RollingUpgradeStatusCode) {
        RollingUpgradeStatusCode["RollingForward"] = "RollingForward";
        RollingUpgradeStatusCode["Cancelled"] = "Cancelled";
        RollingUpgradeStatusCode["Completed"] = "Completed";
        RollingUpgradeStatusCode["Faulted"] = "Faulted";
    })(RollingUpgradeStatusCode || (RollingUpgradeStatusCode = {}));
    /**
     * Defines values for RollingUpgradeActionType.
     * Possible values include: 'Start', 'Cancel'
     * @readonly
     * @enum {string}
     */
    var RollingUpgradeActionType;
    (function (RollingUpgradeActionType) {
        RollingUpgradeActionType["Start"] = "Start";
        RollingUpgradeActionType["Cancel"] = "Cancel";
    })(RollingUpgradeActionType || (RollingUpgradeActionType = {}));
    /**
     * Defines values for IntervalInMins.
     * Possible values include: 'ThreeMins', 'FiveMins', 'ThirtyMins', 'SixtyMins'
     * @readonly
     * @enum {string}
     */
    var IntervalInMins;
    (function (IntervalInMins) {
        IntervalInMins["ThreeMins"] = "ThreeMins";
        IntervalInMins["FiveMins"] = "FiveMins";
        IntervalInMins["ThirtyMins"] = "ThirtyMins";
        IntervalInMins["SixtyMins"] = "SixtyMins";
    })(IntervalInMins || (IntervalInMins = {}));
    /**
     * Defines values for ResourceSkuCapacityScaleType.
     * Possible values include: 'Automatic', 'Manual', 'None'
     * @readonly
     * @enum {string}
     */
    var ResourceSkuCapacityScaleType;
    (function (ResourceSkuCapacityScaleType) {
        ResourceSkuCapacityScaleType["Automatic"] = "Automatic";
        ResourceSkuCapacityScaleType["Manual"] = "Manual";
        ResourceSkuCapacityScaleType["None"] = "None";
    })(ResourceSkuCapacityScaleType || (ResourceSkuCapacityScaleType = {}));
    /**
     * Defines values for ResourceSkuRestrictionsType.
     * Possible values include: 'Location', 'Zone'
     * @readonly
     * @enum {string}
     */
    var ResourceSkuRestrictionsType;
    (function (ResourceSkuRestrictionsType) {
        ResourceSkuRestrictionsType["Location"] = "Location";
        ResourceSkuRestrictionsType["Zone"] = "Zone";
    })(ResourceSkuRestrictionsType || (ResourceSkuRestrictionsType = {}));
    /**
     * Defines values for ResourceSkuRestrictionsReasonCode.
     * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
     * @readonly
     * @enum {string}
     */
    var ResourceSkuRestrictionsReasonCode;
    (function (ResourceSkuRestrictionsReasonCode) {
        ResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
        ResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
    })(ResourceSkuRestrictionsReasonCode || (ResourceSkuRestrictionsReasonCode = {}));
    /**
     * Defines values for DiskStorageAccountTypes.
     * Possible values include: 'Standard_LRS', 'Premium_LRS', 'StandardSSD_LRS',
     * 'UltraSSD_LRS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DiskStorageAccountTypes =
     * <DiskStorageAccountTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DiskStorageAccountTypes;
    (function (DiskStorageAccountTypes) {
        DiskStorageAccountTypes["StandardLRS"] = "Standard_LRS";
        DiskStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
        DiskStorageAccountTypes["StandardSSDLRS"] = "StandardSSD_LRS";
        DiskStorageAccountTypes["UltraSSDLRS"] = "UltraSSD_LRS";
    })(DiskStorageAccountTypes || (DiskStorageAccountTypes = {}));
    /**
     * Defines values for DiskCreateOption.
     * Possible values include: 'Empty', 'Attach', 'FromImage', 'Import', 'Copy',
     * 'Restore'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: DiskCreateOption =
     * <DiskCreateOption>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var DiskCreateOption;
    (function (DiskCreateOption) {
        DiskCreateOption["Empty"] = "Empty";
        DiskCreateOption["Attach"] = "Attach";
        DiskCreateOption["FromImage"] = "FromImage";
        DiskCreateOption["Import"] = "Import";
        DiskCreateOption["Copy"] = "Copy";
        DiskCreateOption["Restore"] = "Restore";
    })(DiskCreateOption || (DiskCreateOption = {}));
    /**
     * Defines values for SnapshotStorageAccountTypes.
     * Possible values include: 'Standard_LRS', 'Premium_LRS', 'Standard_ZRS'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SnapshotStorageAccountTypes =
     * <SnapshotStorageAccountTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SnapshotStorageAccountTypes;
    (function (SnapshotStorageAccountTypes) {
        SnapshotStorageAccountTypes["StandardLRS"] = "Standard_LRS";
        SnapshotStorageAccountTypes["PremiumLRS"] = "Premium_LRS";
        SnapshotStorageAccountTypes["StandardZRS"] = "Standard_ZRS";
    })(SnapshotStorageAccountTypes || (SnapshotStorageAccountTypes = {}));
    /**
     * Defines values for AccessLevel.
     * Possible values include: 'None', 'Read'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AccessLevel =
     * <AccessLevel>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AccessLevel;
    (function (AccessLevel) {
        AccessLevel["None"] = "None";
        AccessLevel["Read"] = "Read";
    })(AccessLevel || (AccessLevel = {}));
    /**
     * Defines values for AggregatedReplicationState.
     * Possible values include: 'Unknown', 'InProgress', 'Completed', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: AggregatedReplicationState =
     * <AggregatedReplicationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var AggregatedReplicationState;
    (function (AggregatedReplicationState) {
        AggregatedReplicationState["Unknown"] = "Unknown";
        AggregatedReplicationState["InProgress"] = "InProgress";
        AggregatedReplicationState["Completed"] = "Completed";
        AggregatedReplicationState["Failed"] = "Failed";
    })(AggregatedReplicationState || (AggregatedReplicationState = {}));
    /**
     * Defines values for ReplicationState.
     * Possible values include: 'Unknown', 'Replicating', 'Completed', 'Failed'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReplicationState =
     * <ReplicationState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReplicationState;
    (function (ReplicationState) {
        ReplicationState["Unknown"] = "Unknown";
        ReplicationState["Replicating"] = "Replicating";
        ReplicationState["Completed"] = "Completed";
        ReplicationState["Failed"] = "Failed";
    })(ReplicationState || (ReplicationState = {}));
    /**
     * Defines values for HostCaching.
     * Possible values include: 'None', 'ReadOnly', 'ReadWrite'
     * @readonly
     * @enum {string}
     */
    var HostCaching;
    (function (HostCaching) {
        HostCaching["None"] = "None";
        HostCaching["ReadOnly"] = "ReadOnly";
        HostCaching["ReadWrite"] = "ReadWrite";
    })(HostCaching || (HostCaching = {}));
    /**
     * Defines values for ContainerServiceOrchestratorTypes.
     * Possible values include: 'Swarm', 'DCOS', 'Custom', 'Kubernetes'
     * @readonly
     * @enum {string}
     */
    var ContainerServiceOrchestratorTypes;
    (function (ContainerServiceOrchestratorTypes) {
        ContainerServiceOrchestratorTypes["Swarm"] = "Swarm";
        ContainerServiceOrchestratorTypes["DCOS"] = "DCOS";
        ContainerServiceOrchestratorTypes["Custom"] = "Custom";
        ContainerServiceOrchestratorTypes["Kubernetes"] = "Kubernetes";
    })(ContainerServiceOrchestratorTypes || (ContainerServiceOrchestratorTypes = {}));
    /**
     * Defines values for ContainerServiceVMSizeTypes.
     * Possible values include: 'Standard_A0', 'Standard_A1', 'Standard_A2',
     * 'Standard_A3', 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
     * 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11', 'Standard_D1',
     * 'Standard_D2', 'Standard_D3', 'Standard_D4', 'Standard_D11', 'Standard_D12',
     * 'Standard_D13', 'Standard_D14', 'Standard_D1_v2', 'Standard_D2_v2',
     * 'Standard_D3_v2', 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
     * 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2', 'Standard_G1',
     * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_DS1',
     * 'Standard_DS2', 'Standard_DS3', 'Standard_DS4', 'Standard_DS11',
     * 'Standard_DS12', 'Standard_DS13', 'Standard_DS14', 'Standard_GS1',
     * 'Standard_GS2', 'Standard_GS3', 'Standard_GS4', 'Standard_GS5'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ContainerServiceVMSizeTypes =
     * <ContainerServiceVMSizeTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ContainerServiceVMSizeTypes;
    (function (ContainerServiceVMSizeTypes) {
        ContainerServiceVMSizeTypes["StandardA0"] = "Standard_A0";
        ContainerServiceVMSizeTypes["StandardA1"] = "Standard_A1";
        ContainerServiceVMSizeTypes["StandardA2"] = "Standard_A2";
        ContainerServiceVMSizeTypes["StandardA3"] = "Standard_A3";
        ContainerServiceVMSizeTypes["StandardA4"] = "Standard_A4";
        ContainerServiceVMSizeTypes["StandardA5"] = "Standard_A5";
        ContainerServiceVMSizeTypes["StandardA6"] = "Standard_A6";
        ContainerServiceVMSizeTypes["StandardA7"] = "Standard_A7";
        ContainerServiceVMSizeTypes["StandardA8"] = "Standard_A8";
        ContainerServiceVMSizeTypes["StandardA9"] = "Standard_A9";
        ContainerServiceVMSizeTypes["StandardA10"] = "Standard_A10";
        ContainerServiceVMSizeTypes["StandardA11"] = "Standard_A11";
        ContainerServiceVMSizeTypes["StandardD1"] = "Standard_D1";
        ContainerServiceVMSizeTypes["StandardD2"] = "Standard_D2";
        ContainerServiceVMSizeTypes["StandardD3"] = "Standard_D3";
        ContainerServiceVMSizeTypes["StandardD4"] = "Standard_D4";
        ContainerServiceVMSizeTypes["StandardD11"] = "Standard_D11";
        ContainerServiceVMSizeTypes["StandardD12"] = "Standard_D12";
        ContainerServiceVMSizeTypes["StandardD13"] = "Standard_D13";
        ContainerServiceVMSizeTypes["StandardD14"] = "Standard_D14";
        ContainerServiceVMSizeTypes["StandardD1V2"] = "Standard_D1_v2";
        ContainerServiceVMSizeTypes["StandardD2V2"] = "Standard_D2_v2";
        ContainerServiceVMSizeTypes["StandardD3V2"] = "Standard_D3_v2";
        ContainerServiceVMSizeTypes["StandardD4V2"] = "Standard_D4_v2";
        ContainerServiceVMSizeTypes["StandardD5V2"] = "Standard_D5_v2";
        ContainerServiceVMSizeTypes["StandardD11V2"] = "Standard_D11_v2";
        ContainerServiceVMSizeTypes["StandardD12V2"] = "Standard_D12_v2";
        ContainerServiceVMSizeTypes["StandardD13V2"] = "Standard_D13_v2";
        ContainerServiceVMSizeTypes["StandardD14V2"] = "Standard_D14_v2";
        ContainerServiceVMSizeTypes["StandardG1"] = "Standard_G1";
        ContainerServiceVMSizeTypes["StandardG2"] = "Standard_G2";
        ContainerServiceVMSizeTypes["StandardG3"] = "Standard_G3";
        ContainerServiceVMSizeTypes["StandardG4"] = "Standard_G4";
        ContainerServiceVMSizeTypes["StandardG5"] = "Standard_G5";
        ContainerServiceVMSizeTypes["StandardDS1"] = "Standard_DS1";
        ContainerServiceVMSizeTypes["StandardDS2"] = "Standard_DS2";
        ContainerServiceVMSizeTypes["StandardDS3"] = "Standard_DS3";
        ContainerServiceVMSizeTypes["StandardDS4"] = "Standard_DS4";
        ContainerServiceVMSizeTypes["StandardDS11"] = "Standard_DS11";
        ContainerServiceVMSizeTypes["StandardDS12"] = "Standard_DS12";
        ContainerServiceVMSizeTypes["StandardDS13"] = "Standard_DS13";
        ContainerServiceVMSizeTypes["StandardDS14"] = "Standard_DS14";
        ContainerServiceVMSizeTypes["StandardGS1"] = "Standard_GS1";
        ContainerServiceVMSizeTypes["StandardGS2"] = "Standard_GS2";
        ContainerServiceVMSizeTypes["StandardGS3"] = "Standard_GS3";
        ContainerServiceVMSizeTypes["StandardGS4"] = "Standard_GS4";
        ContainerServiceVMSizeTypes["StandardGS5"] = "Standard_GS5";
    })(ContainerServiceVMSizeTypes || (ContainerServiceVMSizeTypes = {}));
    /**
     * Defines values for InstanceViewTypes.
     * Possible values include: 'instanceView'
     * @readonly
     * @enum {string}
     */
    var InstanceViewTypes;
    (function (InstanceViewTypes) {
        InstanceViewTypes["InstanceView"] = "instanceView";
    })(InstanceViewTypes || (InstanceViewTypes = {}));
    /**
     * Defines values for ReplicationStatusTypes.
     * Possible values include: 'ReplicationStatus'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ReplicationStatusTypes =
     * <ReplicationStatusTypes>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ReplicationStatusTypes;
    (function (ReplicationStatusTypes) {
        ReplicationStatusTypes["ReplicationStatus"] = "ReplicationStatus";
    })(ReplicationStatusTypes || (ReplicationStatusTypes = {}));
    /**
     * Defines values for ProvisioningState.
     * Possible values include: 'Creating', 'Updating', 'Failed', 'Succeeded',
     * 'Deleting', 'Migrating'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState =
     * <ProvisioningState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState;
    (function (ProvisioningState) {
        ProvisioningState["Creating"] = "Creating";
        ProvisioningState["Updating"] = "Updating";
        ProvisioningState["Failed"] = "Failed";
        ProvisioningState["Succeeded"] = "Succeeded";
        ProvisioningState["Deleting"] = "Deleting";
        ProvisioningState["Migrating"] = "Migrating";
    })(ProvisioningState || (ProvisioningState = {}));
    /**
     * Defines values for ProvisioningState1.
     * Possible values include: 'Creating', 'Updating', 'Failed', 'Succeeded',
     * 'Deleting', 'Migrating'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState1 =
     * <ProvisioningState1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState1;
    (function (ProvisioningState1) {
        ProvisioningState1["Creating"] = "Creating";
        ProvisioningState1["Updating"] = "Updating";
        ProvisioningState1["Failed"] = "Failed";
        ProvisioningState1["Succeeded"] = "Succeeded";
        ProvisioningState1["Deleting"] = "Deleting";
        ProvisioningState1["Migrating"] = "Migrating";
    })(ProvisioningState1 || (ProvisioningState1 = {}));
    /**
     * Defines values for ProvisioningState2.
     * Possible values include: 'Creating', 'Updating', 'Failed', 'Succeeded',
     * 'Deleting', 'Migrating'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: ProvisioningState2 =
     * <ProvisioningState2>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var ProvisioningState2;
    (function (ProvisioningState2) {
        ProvisioningState2["Creating"] = "Creating";
        ProvisioningState2["Updating"] = "Updating";
        ProvisioningState2["Failed"] = "Failed";
        ProvisioningState2["Succeeded"] = "Succeeded";
        ProvisioningState2["Deleting"] = "Deleting";
        ProvisioningState2["Migrating"] = "Migrating";
    })(ProvisioningState2 || (ProvisioningState2 = {}));

    var index = /*#__PURE__*/Object.freeze({
        get StatusLevelTypes () { return StatusLevelTypes; },
        get AvailabilitySetSkuTypes () { return AvailabilitySetSkuTypes; },
        get OperatingSystemTypes () { return OperatingSystemTypes; },
        get VirtualMachineSizeTypes () { return VirtualMachineSizeTypes; },
        get CachingTypes () { return CachingTypes; },
        get DiskCreateOptionTypes () { return DiskCreateOptionTypes; },
        get StorageAccountTypes () { return StorageAccountTypes; },
        get DiffDiskOptions () { return DiffDiskOptions; },
        get PassNames () { return PassNames; },
        get ComponentNames () { return ComponentNames; },
        get SettingNames () { return SettingNames; },
        get ProtocolTypes () { return ProtocolTypes; },
        get ResourceIdentityType () { return ResourceIdentityType; },
        get MaintenanceOperationResultCodeTypes () { return MaintenanceOperationResultCodeTypes; },
        get UpgradeMode () { return UpgradeMode; },
        get OperatingSystemStateTypes () { return OperatingSystemStateTypes; },
        get IPVersion () { return IPVersion; },
        get VirtualMachinePriorityTypes () { return VirtualMachinePriorityTypes; },
        get VirtualMachineEvictionPolicyTypes () { return VirtualMachineEvictionPolicyTypes; },
        get VirtualMachineScaleSetSkuScaleType () { return VirtualMachineScaleSetSkuScaleType; },
        get UpgradeState () { return UpgradeState; },
        get UpgradeOperationInvoker () { return UpgradeOperationInvoker; },
        get RollingUpgradeStatusCode () { return RollingUpgradeStatusCode; },
        get RollingUpgradeActionType () { return RollingUpgradeActionType; },
        get IntervalInMins () { return IntervalInMins; },
        get ResourceSkuCapacityScaleType () { return ResourceSkuCapacityScaleType; },
        get ResourceSkuRestrictionsType () { return ResourceSkuRestrictionsType; },
        get ResourceSkuRestrictionsReasonCode () { return ResourceSkuRestrictionsReasonCode; },
        get DiskStorageAccountTypes () { return DiskStorageAccountTypes; },
        get DiskCreateOption () { return DiskCreateOption; },
        get SnapshotStorageAccountTypes () { return SnapshotStorageAccountTypes; },
        get AccessLevel () { return AccessLevel; },
        get AggregatedReplicationState () { return AggregatedReplicationState; },
        get ReplicationState () { return ReplicationState; },
        get HostCaching () { return HostCaching; },
        get ContainerServiceOrchestratorTypes () { return ContainerServiceOrchestratorTypes; },
        get ContainerServiceVMSizeTypes () { return ContainerServiceVMSizeTypes; },
        get InstanceViewTypes () { return InstanceViewTypes; },
        get ReplicationStatusTypes () { return ReplicationStatusTypes; },
        get ProvisioningState () { return ProvisioningState; },
        get ProvisioningState1 () { return ProvisioningState1; },
        get ProvisioningState2 () { return ProvisioningState2; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ComputeOperationValue = {
        serializedName: "ComputeOperationValue",
        type: {
            name: "Composite",
            className: "ComputeOperationValue",
            modelProperties: {
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "display.operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "display.resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "display.description",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    readOnly: true,
                    serializedName: "display.provider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstanceViewStatus = {
        serializedName: "InstanceViewStatus",
        type: {
            name: "Composite",
            className: "InstanceViewStatus",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                level: {
                    serializedName: "level",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Info",
                            "Warning",
                            "Error"
                        ]
                    }
                },
                displayStatus: {
                    serializedName: "displayStatus",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailabilitySet = {
        serializedName: "AvailabilitySet",
        type: {
            name: "Composite",
            className: "AvailabilitySet",
            modelProperties: __assign({}, Resource.type.modelProperties, { platformUpdateDomainCount: {
                    serializedName: "properties.platformUpdateDomainCount",
                    type: {
                        name: "Number"
                    }
                }, platformFaultDomainCount: {
                    serializedName: "properties.platformFaultDomainCount",
                    type: {
                        name: "Number"
                    }
                }, virtualMachines: {
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, statuses: {
                    readOnly: true,
                    serializedName: "properties.statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var UpdateResource = {
        serializedName: "UpdateResource",
        type: {
            name: "Composite",
            className: "UpdateResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailabilitySetUpdate = {
        serializedName: "AvailabilitySetUpdate",
        type: {
            name: "Composite",
            className: "AvailabilitySetUpdate",
            modelProperties: __assign({}, UpdateResource.type.modelProperties, { platformUpdateDomainCount: {
                    serializedName: "properties.platformUpdateDomainCount",
                    type: {
                        name: "Number"
                    }
                }, platformFaultDomainCount: {
                    serializedName: "properties.platformFaultDomainCount",
                    type: {
                        name: "Number"
                    }
                }, virtualMachines: {
                    serializedName: "properties.virtualMachines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, statuses: {
                    readOnly: true,
                    serializedName: "properties.statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var VirtualMachineSize = {
        serializedName: "VirtualMachineSize",
        type: {
            name: "Composite",
            className: "VirtualMachineSize",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                numberOfCores: {
                    serializedName: "numberOfCores",
                    type: {
                        name: "Number"
                    }
                },
                osDiskSizeInMB: {
                    serializedName: "osDiskSizeInMB",
                    type: {
                        name: "Number"
                    }
                },
                resourceDiskSizeInMB: {
                    serializedName: "resourceDiskSizeInMB",
                    type: {
                        name: "Number"
                    }
                },
                memoryInMB: {
                    serializedName: "memoryInMB",
                    type: {
                        name: "Number"
                    }
                },
                maxDataDiskCount: {
                    serializedName: "maxDataDiskCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualMachineExtensionImage = {
        serializedName: "VirtualMachineExtensionImage",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionImage",
            modelProperties: __assign({}, Resource.type.modelProperties, { operatingSystem: {
                    required: true,
                    serializedName: "properties.operatingSystem",
                    type: {
                        name: "String"
                    }
                }, computeRole: {
                    required: true,
                    serializedName: "properties.computeRole",
                    type: {
                        name: "String"
                    }
                }, handlerSchema: {
                    required: true,
                    serializedName: "properties.handlerSchema",
                    type: {
                        name: "String"
                    }
                }, vmScaleSetEnabled: {
                    serializedName: "properties.vmScaleSetEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, supportsMultipleExtensions: {
                    serializedName: "properties.supportsMultipleExtensions",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var VirtualMachineImageResource = {
        serializedName: "VirtualMachineImageResource",
        type: {
            name: "Composite",
            className: "VirtualMachineImageResource",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineExtensionInstanceView = {
        serializedName: "VirtualMachineExtensionInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionInstanceView",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                typeHandlerVersion: {
                    serializedName: "typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                },
                substatuses: {
                    serializedName: "substatuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineExtension = {
        serializedName: "VirtualMachineExtension",
        type: {
            name: "Composite",
            className: "VirtualMachineExtension",
            modelProperties: __assign({}, Resource.type.modelProperties, { forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, virtualMachineExtensionType: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineExtensionInstanceView"
                    }
                } })
        }
    };
    var VirtualMachineExtensionUpdate = {
        serializedName: "VirtualMachineExtensionUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionUpdate",
            modelProperties: __assign({}, UpdateResource.type.modelProperties, { forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var VirtualMachineExtensionsListResult = {
        serializedName: "VirtualMachineExtensionsListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionsListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtension"
                            }
                        }
                    }
                }
            }
        }
    };
    var PurchasePlan = {
        serializedName: "PurchasePlan",
        type: {
            name: "Composite",
            className: "PurchasePlan",
            modelProperties: {
                publisher: {
                    required: true,
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    required: true,
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OSDiskImage = {
        serializedName: "OSDiskImage",
        type: {
            name: "Composite",
            className: "OSDiskImage",
            modelProperties: {
                operatingSystem: {
                    required: true,
                    serializedName: "operatingSystem",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }
            }
        }
    };
    var DataDiskImage = {
        serializedName: "DataDiskImage",
        type: {
            name: "Composite",
            className: "DataDiskImage",
            modelProperties: {
                lun: {
                    readOnly: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AutomaticOSUpgradeProperties = {
        serializedName: "AutomaticOSUpgradeProperties",
        type: {
            name: "Composite",
            className: "AutomaticOSUpgradeProperties",
            modelProperties: {
                automaticOSUpgradeSupported: {
                    required: true,
                    serializedName: "automaticOSUpgradeSupported",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineImage = {
        serializedName: "VirtualMachineImage",
        type: {
            name: "Composite",
            className: "VirtualMachineImage",
            modelProperties: __assign({}, VirtualMachineImageResource.type.modelProperties, { plan: {
                    serializedName: "properties.plan",
                    type: {
                        name: "Composite",
                        className: "PurchasePlan"
                    }
                }, osDiskImage: {
                    serializedName: "properties.osDiskImage",
                    type: {
                        name: "Composite",
                        className: "OSDiskImage"
                    }
                }, dataDiskImages: {
                    serializedName: "properties.dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDiskImage"
                            }
                        }
                    }
                }, automaticOSUpgradeProperties: {
                    serializedName: "properties.automaticOSUpgradeProperties",
                    type: {
                        name: "Composite",
                        className: "AutomaticOSUpgradeProperties"
                    }
                } })
        }
    };
    var UsageName = {
        serializedName: "UsageName",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    required: true,
                    isConstant: true,
                    serializedName: "unit",
                    defaultValue: 'Count',
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    required: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    required: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var VirtualMachineCaptureParameters = {
        serializedName: "VirtualMachineCaptureParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineCaptureParameters",
            modelProperties: {
                vhdPrefix: {
                    required: true,
                    serializedName: "vhdPrefix",
                    type: {
                        name: "String"
                    }
                },
                destinationContainerName: {
                    required: true,
                    serializedName: "destinationContainerName",
                    type: {
                        name: "String"
                    }
                },
                overwriteVhds: {
                    required: true,
                    serializedName: "overwriteVhds",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualMachineCaptureResult = {
        serializedName: "VirtualMachineCaptureResult",
        type: {
            name: "Composite",
            className: "VirtualMachineCaptureResult",
            modelProperties: __assign({}, SubResource.type.modelProperties, { schema: {
                    readOnly: true,
                    serializedName: "$schema",
                    type: {
                        name: "String"
                    }
                }, contentVersion: {
                    readOnly: true,
                    serializedName: "contentVersion",
                    type: {
                        name: "String"
                    }
                }, parameters: {
                    readOnly: true,
                    serializedName: "parameters",
                    type: {
                        name: "Object"
                    }
                }, resources: {
                    readOnly: true,
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var Plan = {
        serializedName: "Plan",
        type: {
            name: "Composite",
            className: "Plan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HardwareProfile = {
        serializedName: "HardwareProfile",
        type: {
            name: "Composite",
            className: "HardwareProfile",
            modelProperties: {
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageReference = {
        serializedName: "ImageReference",
        type: {
            name: "Composite",
            className: "ImageReference",
            modelProperties: __assign({}, SubResource.type.modelProperties, { publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                }, offer: {
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var KeyVaultSecretReference = {
        serializedName: "KeyVaultSecretReference",
        type: {
            name: "Composite",
            className: "KeyVaultSecretReference",
            modelProperties: {
                secretUrl: {
                    required: true,
                    serializedName: "secretUrl",
                    type: {
                        name: "String"
                    }
                },
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var KeyVaultKeyReference = {
        serializedName: "KeyVaultKeyReference",
        type: {
            name: "Composite",
            className: "KeyVaultKeyReference",
            modelProperties: {
                keyUrl: {
                    required: true,
                    serializedName: "keyUrl",
                    type: {
                        name: "String"
                    }
                },
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var DiskEncryptionSettings = {
        serializedName: "DiskEncryptionSettings",
        type: {
            name: "Composite",
            className: "DiskEncryptionSettings",
            modelProperties: {
                diskEncryptionKey: {
                    serializedName: "diskEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultSecretReference"
                    }
                },
                keyEncryptionKey: {
                    serializedName: "keyEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultKeyReference"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VirtualHardDisk = {
        serializedName: "VirtualHardDisk",
        type: {
            name: "Composite",
            className: "VirtualHardDisk",
            modelProperties: {
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiffDiskSettings = {
        serializedName: "DiffDiskSettings",
        type: {
            name: "Composite",
            className: "DiffDiskSettings",
            modelProperties: {
                option: {
                    serializedName: "option",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedDiskParameters = {
        serializedName: "ManagedDiskParameters",
        type: {
            name: "Composite",
            className: "ManagedDiskParameters",
            modelProperties: __assign({}, SubResource.type.modelProperties, { storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OSDisk = {
        serializedName: "OSDisk",
        type: {
            name: "Composite",
            className: "OSDisk",
            modelProperties: {
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                encryptionSettings: {
                    serializedName: "encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "DiskEncryptionSettings"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                vhd: {
                    serializedName: "vhd",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                diffDiskSettings: {
                    serializedName: "diffDiskSettings",
                    type: {
                        name: "Composite",
                        className: "DiffDiskSettings"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "ManagedDiskParameters"
                    }
                }
            }
        }
    };
    var DataDisk = {
        serializedName: "DataDisk",
        type: {
            name: "Composite",
            className: "DataDisk",
            modelProperties: {
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                vhd: {
                    serializedName: "vhd",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "ManagedDiskParameters"
                    }
                }
            }
        }
    };
    var StorageProfile = {
        serializedName: "StorageProfile",
        type: {
            name: "Composite",
            className: "StorageProfile",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "OSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var AdditionalCapabilities = {
        serializedName: "AdditionalCapabilities",
        type: {
            name: "Composite",
            className: "AdditionalCapabilities",
            modelProperties: {
                ultraSSDEnabled: {
                    serializedName: "ultraSSDEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AdditionalUnattendContent = {
        serializedName: "AdditionalUnattendContent",
        type: {
            name: "Composite",
            className: "AdditionalUnattendContent",
            modelProperties: {
                passName: {
                    serializedName: "passName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "OobeSystem"
                        ]
                    }
                },
                componentName: {
                    serializedName: "componentName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Microsoft-Windows-Shell-Setup"
                        ]
                    }
                },
                settingName: {
                    serializedName: "settingName",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AutoLogon",
                            "FirstLogonCommands"
                        ]
                    }
                },
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WinRMListener = {
        serializedName: "WinRMListener",
        type: {
            name: "Composite",
            className: "WinRMListener",
            modelProperties: {
                protocol: {
                    serializedName: "protocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Http",
                            "Https"
                        ]
                    }
                },
                certificateUrl: {
                    serializedName: "certificateUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WinRMConfiguration = {
        serializedName: "WinRMConfiguration",
        type: {
            name: "Composite",
            className: "WinRMConfiguration",
            modelProperties: {
                listeners: {
                    serializedName: "listeners",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WinRMListener"
                            }
                        }
                    }
                }
            }
        }
    };
    var WindowsConfiguration = {
        serializedName: "WindowsConfiguration",
        type: {
            name: "Composite",
            className: "WindowsConfiguration",
            modelProperties: {
                provisionVMAgent: {
                    serializedName: "provisionVMAgent",
                    type: {
                        name: "Boolean"
                    }
                },
                enableAutomaticUpdates: {
                    serializedName: "enableAutomaticUpdates",
                    type: {
                        name: "Boolean"
                    }
                },
                timeZone: {
                    serializedName: "timeZone",
                    type: {
                        name: "String"
                    }
                },
                additionalUnattendContent: {
                    serializedName: "additionalUnattendContent",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AdditionalUnattendContent"
                            }
                        }
                    }
                },
                winRM: {
                    serializedName: "winRM",
                    type: {
                        name: "Composite",
                        className: "WinRMConfiguration"
                    }
                }
            }
        }
    };
    var SshPublicKey = {
        serializedName: "SshPublicKey",
        type: {
            name: "Composite",
            className: "SshPublicKey",
            modelProperties: {
                path: {
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                keyData: {
                    serializedName: "keyData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SshConfiguration = {
        serializedName: "SshConfiguration",
        type: {
            name: "Composite",
            className: "SshConfiguration",
            modelProperties: {
                publicKeys: {
                    serializedName: "publicKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SshPublicKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var LinuxConfiguration = {
        serializedName: "LinuxConfiguration",
        type: {
            name: "Composite",
            className: "LinuxConfiguration",
            modelProperties: {
                disablePasswordAuthentication: {
                    serializedName: "disablePasswordAuthentication",
                    type: {
                        name: "Boolean"
                    }
                },
                ssh: {
                    serializedName: "ssh",
                    type: {
                        name: "Composite",
                        className: "SshConfiguration"
                    }
                },
                provisionVMAgent: {
                    serializedName: "provisionVMAgent",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var VaultCertificate = {
        serializedName: "VaultCertificate",
        type: {
            name: "Composite",
            className: "VaultCertificate",
            modelProperties: {
                certificateUrl: {
                    serializedName: "certificateUrl",
                    type: {
                        name: "String"
                    }
                },
                certificateStore: {
                    serializedName: "certificateStore",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VaultSecretGroup = {
        serializedName: "VaultSecretGroup",
        type: {
            name: "Composite",
            className: "VaultSecretGroup",
            modelProperties: {
                sourceVault: {
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                vaultCertificates: {
                    serializedName: "vaultCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultCertificate"
                            }
                        }
                    }
                }
            }
        }
    };
    var OSProfile = {
        serializedName: "OSProfile",
        type: {
            name: "Composite",
            className: "OSProfile",
            modelProperties: {
                computerName: {
                    serializedName: "computerName",
                    type: {
                        name: "String"
                    }
                },
                adminUsername: {
                    serializedName: "adminUsername",
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    serializedName: "adminPassword",
                    type: {
                        name: "String"
                    }
                },
                customData: {
                    serializedName: "customData",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                linuxConfiguration: {
                    serializedName: "linuxConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxConfiguration"
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultSecretGroup"
                            }
                        }
                    }
                },
                allowExtensionOperations: {
                    serializedName: "allowExtensionOperations",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var NetworkInterfaceReference = {
        serializedName: "NetworkInterfaceReference",
        type: {
            name: "Composite",
            className: "NetworkInterfaceReference",
            modelProperties: __assign({}, SubResource.type.modelProperties, { primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                networkInterfaces: {
                    serializedName: "networkInterfaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkInterfaceReference"
                            }
                        }
                    }
                }
            }
        }
    };
    var BootDiagnostics = {
        serializedName: "BootDiagnostics",
        type: {
            name: "Composite",
            className: "BootDiagnostics",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageUri: {
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticsProfile = {
        serializedName: "DiagnosticsProfile",
        type: {
            name: "Composite",
            className: "DiagnosticsProfile",
            modelProperties: {
                bootDiagnostics: {
                    serializedName: "bootDiagnostics",
                    type: {
                        name: "Composite",
                        className: "BootDiagnostics"
                    }
                }
            }
        }
    };
    var VirtualMachineExtensionHandlerInstanceView = {
        serializedName: "VirtualMachineExtensionHandlerInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineExtensionHandlerInstanceView",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                typeHandlerVersion: {
                    serializedName: "typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                }
            }
        }
    };
    var VirtualMachineAgentInstanceView = {
        serializedName: "VirtualMachineAgentInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineAgentInstanceView",
            modelProperties: {
                vmAgentVersion: {
                    serializedName: "vmAgentVersion",
                    type: {
                        name: "String"
                    }
                },
                extensionHandlers: {
                    serializedName: "extensionHandlers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionHandlerInstanceView"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var DiskInstanceView = {
        serializedName: "DiskInstanceView",
        type: {
            name: "Composite",
            className: "DiskInstanceView",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                encryptionSettings: {
                    serializedName: "encryptionSettings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskEncryptionSettings"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var BootDiagnosticsInstanceView = {
        serializedName: "BootDiagnosticsInstanceView",
        type: {
            name: "Composite",
            className: "BootDiagnosticsInstanceView",
            modelProperties: {
                consoleScreenshotBlobUri: {
                    readOnly: true,
                    serializedName: "consoleScreenshotBlobUri",
                    type: {
                        name: "String"
                    }
                },
                serialConsoleLogBlobUri: {
                    readOnly: true,
                    serializedName: "serialConsoleLogBlobUri",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                }
            }
        }
    };
    var VirtualMachineIdentityUserAssignedIdentitiesValue = {
        serializedName: "VirtualMachineIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "VirtualMachineIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineIdentity = {
        serializedName: "VirtualMachineIdentity",
        type: {
            name: "Composite",
            className: "VirtualMachineIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var MaintenanceRedeployStatus = {
        serializedName: "MaintenanceRedeployStatus",
        type: {
            name: "Composite",
            className: "MaintenanceRedeployStatus",
            modelProperties: {
                isCustomerInitiatedMaintenanceAllowed: {
                    serializedName: "isCustomerInitiatedMaintenanceAllowed",
                    type: {
                        name: "Boolean"
                    }
                },
                preMaintenanceWindowStartTime: {
                    serializedName: "preMaintenanceWindowStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                preMaintenanceWindowEndTime: {
                    serializedName: "preMaintenanceWindowEndTime",
                    type: {
                        name: "DateTime"
                    }
                },
                maintenanceWindowStartTime: {
                    serializedName: "maintenanceWindowStartTime",
                    type: {
                        name: "DateTime"
                    }
                },
                maintenanceWindowEndTime: {
                    serializedName: "maintenanceWindowEndTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastOperationResultCode: {
                    serializedName: "lastOperationResultCode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "RetryLater",
                            "MaintenanceAborted",
                            "MaintenanceCompleted"
                        ]
                    }
                },
                lastOperationMessage: {
                    serializedName: "lastOperationMessage",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineInstanceView = {
        serializedName: "VirtualMachineInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineInstanceView",
            modelProperties: {
                platformUpdateDomain: {
                    serializedName: "platformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                },
                platformFaultDomain: {
                    serializedName: "platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                },
                computerName: {
                    serializedName: "computerName",
                    type: {
                        name: "String"
                    }
                },
                osName: {
                    serializedName: "osName",
                    type: {
                        name: "String"
                    }
                },
                osVersion: {
                    serializedName: "osVersion",
                    type: {
                        name: "String"
                    }
                },
                rdpThumbPrint: {
                    serializedName: "rdpThumbPrint",
                    type: {
                        name: "String"
                    }
                },
                vmAgent: {
                    serializedName: "vmAgent",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineAgentInstanceView"
                    }
                },
                maintenanceRedeployStatus: {
                    serializedName: "maintenanceRedeployStatus",
                    type: {
                        name: "Composite",
                        className: "MaintenanceRedeployStatus"
                    }
                },
                disks: {
                    serializedName: "disks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskInstanceView"
                            }
                        }
                    }
                },
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionInstanceView"
                            }
                        }
                    }
                },
                bootDiagnostics: {
                    serializedName: "bootDiagnostics",
                    type: {
                        name: "Composite",
                        className: "BootDiagnosticsInstanceView"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachine = {
        serializedName: "VirtualMachine",
        type: {
            name: "Composite",
            className: "VirtualMachine",
            modelProperties: __assign({}, Resource.type.modelProperties, { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                }, availabilitySet: {
                    serializedName: "properties.availabilitySet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineInstanceView"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, vmId: {
                    readOnly: true,
                    serializedName: "properties.vmId",
                    type: {
                        name: "String"
                    }
                }, resources: {
                    readOnly: true,
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtension"
                            }
                        }
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineIdentity"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineUpdate = {
        serializedName: "VirtualMachineUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineUpdate",
            modelProperties: __assign({}, UpdateResource.type.modelProperties, { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                }, availabilitySet: {
                    serializedName: "properties.availabilitySet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineInstanceView"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, vmId: {
                    readOnly: true,
                    serializedName: "properties.vmId",
                    type: {
                        name: "String"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineIdentity"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AutomaticOSUpgradePolicy = {
        serializedName: "AutomaticOSUpgradePolicy",
        type: {
            name: "Composite",
            className: "AutomaticOSUpgradePolicy",
            modelProperties: {
                enableAutomaticOSUpgrade: {
                    serializedName: "enableAutomaticOSUpgrade",
                    type: {
                        name: "Boolean"
                    }
                },
                disableAutomaticRollback: {
                    serializedName: "disableAutomaticRollback",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RollingUpgradePolicy = {
        serializedName: "RollingUpgradePolicy",
        type: {
            name: "Composite",
            className: "RollingUpgradePolicy",
            modelProperties: {
                maxBatchInstancePercent: {
                    serializedName: "maxBatchInstancePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 5
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxUnhealthyInstancePercent: {
                    serializedName: "maxUnhealthyInstancePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 5
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxUnhealthyUpgradedInstancePercent: {
                    serializedName: "maxUnhealthyUpgradedInstancePercent",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                pauseTimeBetweenBatches: {
                    serializedName: "pauseTimeBetweenBatches",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpgradePolicy = {
        serializedName: "UpgradePolicy",
        type: {
            name: "Composite",
            className: "UpgradePolicy",
            modelProperties: {
                mode: {
                    serializedName: "mode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "Manual",
                            "Rolling"
                        ]
                    }
                },
                rollingUpgradePolicy: {
                    serializedName: "rollingUpgradePolicy",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradePolicy"
                    }
                },
                automaticOSUpgradePolicy: {
                    serializedName: "automaticOSUpgradePolicy",
                    type: {
                        name: "Composite",
                        className: "AutomaticOSUpgradePolicy"
                    }
                }
            }
        }
    };
    var ImageOSDisk = {
        serializedName: "ImageOSDisk",
        type: {
            name: "Composite",
            className: "ImageOSDisk",
            modelProperties: {
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                osState: {
                    required: true,
                    serializedName: "osState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Generalized",
                            "Specialized"
                        ]
                    }
                },
                snapshot: {
                    serializedName: "snapshot",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                blobUri: {
                    serializedName: "blobUri",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageDataDisk = {
        serializedName: "ImageDataDisk",
        type: {
            name: "Composite",
            className: "ImageDataDisk",
            modelProperties: {
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                snapshot: {
                    serializedName: "snapshot",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                },
                blobUri: {
                    serializedName: "blobUri",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageStorageProfile = {
        serializedName: "ImageStorageProfile",
        type: {
            name: "Composite",
            className: "ImageStorageProfile",
            modelProperties: {
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "ImageOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageDataDisk"
                            }
                        }
                    }
                },
                zoneResilient: {
                    serializedName: "zoneResilient",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Image = {
        serializedName: "Image",
        type: {
            name: "Composite",
            className: "Image",
            modelProperties: __assign({}, Resource.type.modelProperties, { sourceVirtualMachine: {
                    serializedName: "properties.sourceVirtualMachine",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "ImageStorageProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImageUpdate = {
        serializedName: "ImageUpdate",
        type: {
            name: "Composite",
            className: "ImageUpdate",
            modelProperties: __assign({}, UpdateResource.type.modelProperties, { sourceVirtualMachine: {
                    serializedName: "properties.sourceVirtualMachine",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "ImageStorageProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue = {
        serializedName: "VirtualMachineScaleSetIdentity_userAssignedIdentitiesValue",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetIdentity = {
        serializedName: "VirtualMachineScaleSetIdentity",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned, UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetOSProfile = {
        serializedName: "VirtualMachineScaleSetOSProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetOSProfile",
            modelProperties: {
                computerNamePrefix: {
                    serializedName: "computerNamePrefix",
                    type: {
                        name: "String"
                    }
                },
                adminUsername: {
                    serializedName: "adminUsername",
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    serializedName: "adminPassword",
                    type: {
                        name: "String"
                    }
                },
                customData: {
                    serializedName: "customData",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                linuxConfiguration: {
                    serializedName: "linuxConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxConfiguration"
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultSecretGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateOSProfile = {
        serializedName: "VirtualMachineScaleSetUpdateOSProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateOSProfile",
            modelProperties: {
                customData: {
                    serializedName: "customData",
                    type: {
                        name: "String"
                    }
                },
                windowsConfiguration: {
                    serializedName: "windowsConfiguration",
                    type: {
                        name: "Composite",
                        className: "WindowsConfiguration"
                    }
                },
                linuxConfiguration: {
                    serializedName: "linuxConfiguration",
                    type: {
                        name: "Composite",
                        className: "LinuxConfiguration"
                    }
                },
                secrets: {
                    serializedName: "secrets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VaultSecretGroup"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetManagedDiskParameters = {
        serializedName: "VirtualMachineScaleSetManagedDiskParameters",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetManagedDiskParameters",
            modelProperties: {
                storageAccountType: {
                    serializedName: "storageAccountType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetOSDisk = {
        serializedName: "VirtualMachineScaleSetOSDisk",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetOSDisk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diffDiskSettings: {
                    serializedName: "diffDiskSettings",
                    type: {
                        name: "Composite",
                        className: "DiffDiskSettings"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                osType: {
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                vhdContainers: {
                    serializedName: "vhdContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetManagedDiskParameters"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateOSDisk = {
        serializedName: "VirtualMachineScaleSetUpdateOSDisk",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateOSDisk",
            modelProperties: {
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                image: {
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "VirtualHardDisk"
                    }
                },
                vhdContainers: {
                    serializedName: "vhdContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetManagedDiskParameters"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetDataDisk = {
        serializedName: "VirtualMachineScaleSetDataDisk",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetDataDisk",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                lun: {
                    required: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                },
                caching: {
                    serializedName: "caching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                },
                writeAcceleratorEnabled: {
                    serializedName: "writeAcceleratorEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                diskSizeGB: {
                    serializedName: "diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                managedDisk: {
                    serializedName: "managedDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetManagedDiskParameters"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetStorageProfile = {
        serializedName: "VirtualMachineScaleSetStorageProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetStorageProfile",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetDataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateStorageProfile = {
        serializedName: "VirtualMachineScaleSetUpdateStorageProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateStorageProfile",
            modelProperties: {
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                osDisk: {
                    serializedName: "osDisk",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateOSDisk"
                    }
                },
                dataDisks: {
                    serializedName: "dataDisks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetDataDisk"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApiEntityReference = {
        serializedName: "ApiEntityReference",
        type: {
            name: "Composite",
            className: "ApiEntityReference",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings = {
        serializedName: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings",
            modelProperties: {
                domainNameLabel: {
                    required: true,
                    serializedName: "domainNameLabel",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetIpTag = {
        serializedName: "VirtualMachineScaleSetIpTag",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIpTag",
            modelProperties: {
                ipTagType: {
                    serializedName: "ipTagType",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetPublicIPAddressConfiguration = {
        serializedName: "VirtualMachineScaleSetPublicIPAddressConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetPublicIPAddressConfiguration",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"
                    }
                },
                ipTags: {
                    serializedName: "properties.ipTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetIpTag"
                            }
                        }
                    }
                },
                publicIPPrefix: {
                    serializedName: "properties.publicIPPrefix",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdatePublicIPAddressConfiguration = {
        serializedName: "VirtualMachineScaleSetUpdatePublicIPAddressConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdatePublicIPAddressConfiguration",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idleTimeoutInMinutes: {
                    serializedName: "properties.idleTimeoutInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetIPConfiguration = {
        serializedName: "VirtualMachineScaleSetIPConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, publicIPAddressConfiguration: {
                    serializedName: "properties.publicIPAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetPublicIPAddressConfiguration"
                    }
                }, privateIPAddressVersion: {
                    serializedName: "properties.privateIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, applicationGatewayBackendAddressPools: {
                    serializedName: "properties.applicationGatewayBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, applicationSecurityGroups: {
                    serializedName: "properties.applicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerBackendAddressPools: {
                    serializedName: "properties.loadBalancerBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerInboundNatPools: {
                    serializedName: "properties.loadBalancerInboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetUpdateIPConfiguration = {
        serializedName: "VirtualMachineScaleSetUpdateIPConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateIPConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, subnet: {
                    serializedName: "properties.subnet",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, publicIPAddressConfiguration: {
                    serializedName: "properties.publicIPAddressConfiguration",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdatePublicIPAddressConfiguration"
                    }
                }, privateIPAddressVersion: {
                    serializedName: "properties.privateIPAddressVersion",
                    type: {
                        name: "String"
                    }
                }, applicationGatewayBackendAddressPools: {
                    serializedName: "properties.applicationGatewayBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, applicationSecurityGroups: {
                    serializedName: "properties.applicationSecurityGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerBackendAddressPools: {
                    serializedName: "properties.loadBalancerBackendAddressPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                }, loadBalancerInboundNatPools: {
                    serializedName: "properties.loadBalancerInboundNatPools",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SubResource"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetNetworkConfigurationDnsSettings = {
        serializedName: "VirtualMachineScaleSetNetworkConfigurationDnsSettings",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetNetworkConfigurationDnsSettings",
            modelProperties: {
                dnsServers: {
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetNetworkConfiguration = {
        serializedName: "VirtualMachineScaleSetNetworkConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetNetworkConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, enableAcceleratedNetworking: {
                    serializedName: "properties.enableAcceleratedNetworking",
                    type: {
                        name: "Boolean"
                    }
                }, networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetNetworkConfigurationDnsSettings"
                    }
                }, ipConfigurations: {
                    required: true,
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetIPConfiguration"
                            }
                        }
                    }
                }, enableIPForwarding: {
                    serializedName: "properties.enableIPForwarding",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetUpdateNetworkConfiguration = {
        serializedName: "VirtualMachineScaleSetUpdateNetworkConfiguration",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateNetworkConfiguration",
            modelProperties: __assign({}, SubResource.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, primary: {
                    serializedName: "properties.primary",
                    type: {
                        name: "Boolean"
                    }
                }, enableAcceleratedNetworking: {
                    serializedName: "properties.enableAcceleratedNetworking",
                    type: {
                        name: "Boolean"
                    }
                }, networkSecurityGroup: {
                    serializedName: "properties.networkSecurityGroup",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, dnsSettings: {
                    serializedName: "properties.dnsSettings",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetNetworkConfigurationDnsSettings"
                    }
                }, ipConfigurations: {
                    serializedName: "properties.ipConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetUpdateIPConfiguration"
                            }
                        }
                    }
                }, enableIPForwarding: {
                    serializedName: "properties.enableIPForwarding",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetNetworkProfile = {
        serializedName: "VirtualMachineScaleSetNetworkProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetNetworkProfile",
            modelProperties: {
                healthProbe: {
                    serializedName: "healthProbe",
                    type: {
                        name: "Composite",
                        className: "ApiEntityReference"
                    }
                },
                networkInterfaceConfigurations: {
                    serializedName: "networkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetNetworkConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateNetworkProfile = {
        serializedName: "VirtualMachineScaleSetUpdateNetworkProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateNetworkProfile",
            modelProperties: {
                networkInterfaceConfigurations: {
                    serializedName: "networkInterfaceConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetUpdateNetworkConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubResourceReadOnly = {
        serializedName: "SubResourceReadOnly",
        type: {
            name: "Composite",
            className: "SubResourceReadOnly",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetExtension = {
        serializedName: "VirtualMachineScaleSetExtension",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtension",
            modelProperties: __assign({}, SubResourceReadOnly.type.modelProperties, { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, forceUpdateTag: {
                    serializedName: "properties.forceUpdateTag",
                    type: {
                        name: "String"
                    }
                }, publisher: {
                    serializedName: "properties.publisher",
                    type: {
                        name: "String"
                    }
                }, type: {
                    serializedName: "properties.type",
                    type: {
                        name: "String"
                    }
                }, typeHandlerVersion: {
                    serializedName: "properties.typeHandlerVersion",
                    type: {
                        name: "String"
                    }
                }, autoUpgradeMinorVersion: {
                    serializedName: "properties.autoUpgradeMinorVersion",
                    type: {
                        name: "Boolean"
                    }
                }, settings: {
                    serializedName: "properties.settings",
                    type: {
                        name: "Object"
                    }
                }, protectedSettings: {
                    serializedName: "properties.protectedSettings",
                    type: {
                        name: "Object"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetExtensionProfile = {
        serializedName: "VirtualMachineScaleSetExtensionProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtensionProfile",
            modelProperties: {
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetExtension"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMProfile = {
        serializedName: "VirtualMachineScaleSetVMProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMProfile",
            modelProperties: {
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetOSProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetStorageProfile"
                    }
                },
                additionalCapabilities: {
                    serializedName: "additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetNetworkProfile"
                    }
                },
                diagnosticsProfile: {
                    serializedName: "diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                },
                extensionProfile: {
                    serializedName: "extensionProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetExtensionProfile"
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                },
                priority: {
                    serializedName: "priority",
                    type: {
                        name: "String"
                    }
                },
                evictionPolicy: {
                    serializedName: "evictionPolicy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetUpdateVMProfile = {
        serializedName: "VirtualMachineScaleSetUpdateVMProfile",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdateVMProfile",
            modelProperties: {
                osProfile: {
                    serializedName: "osProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateOSProfile"
                    }
                },
                storageProfile: {
                    serializedName: "storageProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateStorageProfile"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateNetworkProfile"
                    }
                },
                diagnosticsProfile: {
                    serializedName: "diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                },
                extensionProfile: {
                    serializedName: "extensionProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetExtensionProfile"
                    }
                },
                licenseType: {
                    serializedName: "licenseType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSet = {
        serializedName: "VirtualMachineScaleSet",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSet",
            modelProperties: __assign({}, Resource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, upgradePolicy: {
                    serializedName: "properties.upgradePolicy",
                    type: {
                        name: "Composite",
                        className: "UpgradePolicy"
                    }
                }, virtualMachineProfile: {
                    serializedName: "properties.virtualMachineProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetVMProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, overprovision: {
                    serializedName: "properties.overprovision",
                    type: {
                        name: "Boolean"
                    }
                }, uniqueId: {
                    readOnly: true,
                    serializedName: "properties.uniqueId",
                    type: {
                        name: "String"
                    }
                }, singlePlacementGroup: {
                    serializedName: "properties.singlePlacementGroup",
                    type: {
                        name: "Boolean"
                    }
                }, zoneBalance: {
                    serializedName: "properties.zoneBalance",
                    type: {
                        name: "Boolean"
                    }
                }, platformFaultDomainCount: {
                    serializedName: "properties.platformFaultDomainCount",
                    type: {
                        name: "Number"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetIdentity"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var VirtualMachineScaleSetUpdate = {
        serializedName: "VirtualMachineScaleSetUpdate",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetUpdate",
            modelProperties: __assign({}, UpdateResource.type.modelProperties, { sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, upgradePolicy: {
                    serializedName: "properties.upgradePolicy",
                    type: {
                        name: "Composite",
                        className: "UpgradePolicy"
                    }
                }, virtualMachineProfile: {
                    serializedName: "properties.virtualMachineProfile",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetUpdateVMProfile"
                    }
                }, overprovision: {
                    serializedName: "properties.overprovision",
                    type: {
                        name: "Boolean"
                    }
                }, singlePlacementGroup: {
                    serializedName: "properties.singlePlacementGroup",
                    type: {
                        name: "Boolean"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetIdentity"
                    }
                } })
        }
    };
    var VirtualMachineScaleSetVMInstanceIDs = {
        serializedName: "VirtualMachineScaleSetVMInstanceIDs",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMInstanceIDs",
            modelProperties: {
                instanceIds: {
                    serializedName: "instanceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMInstanceRequiredIDs = {
        serializedName: "VirtualMachineScaleSetVMInstanceRequiredIDs",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMInstanceRequiredIDs",
            modelProperties: {
                instanceIds: {
                    required: true,
                    serializedName: "instanceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineStatusCodeCount = {
        serializedName: "VirtualMachineStatusCodeCount",
        type: {
            name: "Composite",
            className: "VirtualMachineStatusCodeCount",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    readOnly: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetInstanceViewStatusesSummary = {
        serializedName: "VirtualMachineScaleSetInstanceViewStatusesSummary",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetInstanceViewStatusesSummary",
            modelProperties: {
                statusesSummary: {
                    readOnly: true,
                    serializedName: "statusesSummary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineStatusCodeCount"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMExtensionsSummary = {
        serializedName: "VirtualMachineScaleSetVMExtensionsSummary",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMExtensionsSummary",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                statusesSummary: {
                    readOnly: true,
                    serializedName: "statusesSummary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineStatusCodeCount"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetInstanceView = {
        serializedName: "VirtualMachineScaleSetInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetInstanceView",
            modelProperties: {
                virtualMachine: {
                    readOnly: true,
                    serializedName: "virtualMachine",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetInstanceViewStatusesSummary"
                    }
                },
                extensions: {
                    readOnly: true,
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetVMExtensionsSummary"
                            }
                        }
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetSkuCapacity = {
        serializedName: "VirtualMachineScaleSetSkuCapacity",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetSkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                defaultCapacity: {
                    readOnly: true,
                    serializedName: "defaultCapacity",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "None"
                        ]
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetSku = {
        serializedName: "VirtualMachineScaleSetSku",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetSkuCapacity"
                    }
                }
            }
        }
    };
    var ApiErrorBase = {
        serializedName: "ApiErrorBase",
        type: {
            name: "Composite",
            className: "ApiErrorBase",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InnerError = {
        serializedName: "InnerError",
        type: {
            name: "Composite",
            className: "InnerError",
            modelProperties: {
                exceptiontype: {
                    serializedName: "exceptiontype",
                    type: {
                        name: "String"
                    }
                },
                errordetail: {
                    serializedName: "errordetail",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApiError = {
        serializedName: "ApiError",
        type: {
            name: "Composite",
            className: "ApiError",
            modelProperties: {
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApiErrorBase"
                            }
                        }
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                },
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RollbackStatusInfo = {
        serializedName: "RollbackStatusInfo",
        type: {
            name: "Composite",
            className: "RollbackStatusInfo",
            modelProperties: {
                successfullyRolledbackInstanceCount: {
                    readOnly: true,
                    serializedName: "successfullyRolledbackInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                failedRolledbackInstanceCount: {
                    readOnly: true,
                    serializedName: "failedRolledbackInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                rollbackError: {
                    readOnly: true,
                    serializedName: "rollbackError",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                }
            }
        }
    };
    var UpgradeOperationHistoryStatus = {
        serializedName: "UpgradeOperationHistoryStatus",
        type: {
            name: "Composite",
            className: "UpgradeOperationHistoryStatus",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RollingForward",
                            "Cancelled",
                            "Completed",
                            "Faulted"
                        ]
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RollingUpgradeProgressInfo = {
        serializedName: "RollingUpgradeProgressInfo",
        type: {
            name: "Composite",
            className: "RollingUpgradeProgressInfo",
            modelProperties: {
                successfulInstanceCount: {
                    readOnly: true,
                    serializedName: "successfulInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                failedInstanceCount: {
                    readOnly: true,
                    serializedName: "failedInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                inProgressInstanceCount: {
                    readOnly: true,
                    serializedName: "inProgressInstanceCount",
                    type: {
                        name: "Number"
                    }
                },
                pendingInstanceCount: {
                    readOnly: true,
                    serializedName: "pendingInstanceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpgradeOperationHistoricalStatusInfoProperties = {
        serializedName: "UpgradeOperationHistoricalStatusInfoProperties",
        type: {
            name: "Composite",
            className: "UpgradeOperationHistoricalStatusInfoProperties",
            modelProperties: {
                runningStatus: {
                    readOnly: true,
                    serializedName: "runningStatus",
                    type: {
                        name: "Composite",
                        className: "UpgradeOperationHistoryStatus"
                    }
                },
                progress: {
                    readOnly: true,
                    serializedName: "progress",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradeProgressInfo"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                },
                startedBy: {
                    readOnly: true,
                    serializedName: "startedBy",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Unknown",
                            "User",
                            "Platform"
                        ]
                    }
                },
                targetImageReference: {
                    readOnly: true,
                    serializedName: "targetImageReference",
                    type: {
                        name: "Composite",
                        className: "ImageReference"
                    }
                },
                rollbackInfo: {
                    readOnly: true,
                    serializedName: "rollbackInfo",
                    type: {
                        name: "Composite",
                        className: "RollbackStatusInfo"
                    }
                }
            }
        }
    };
    var UpgradeOperationHistoricalStatusInfo = {
        serializedName: "UpgradeOperationHistoricalStatusInfo",
        type: {
            name: "Composite",
            className: "UpgradeOperationHistoricalStatusInfo",
            modelProperties: {
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "UpgradeOperationHistoricalStatusInfoProperties"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineHealthStatus = {
        serializedName: "VirtualMachineHealthStatus",
        type: {
            name: "Composite",
            className: "VirtualMachineHealthStatus",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Composite",
                        className: "InstanceViewStatus"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMInstanceView = {
        serializedName: "VirtualMachineScaleSetVMInstanceView",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMInstanceView",
            modelProperties: {
                platformUpdateDomain: {
                    serializedName: "platformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                },
                platformFaultDomain: {
                    serializedName: "platformFaultDomain",
                    type: {
                        name: "Number"
                    }
                },
                rdpThumbPrint: {
                    serializedName: "rdpThumbPrint",
                    type: {
                        name: "String"
                    }
                },
                vmAgent: {
                    serializedName: "vmAgent",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineAgentInstanceView"
                    }
                },
                maintenanceRedeployStatus: {
                    serializedName: "maintenanceRedeployStatus",
                    type: {
                        name: "Composite",
                        className: "MaintenanceRedeployStatus"
                    }
                },
                disks: {
                    serializedName: "disks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiskInstanceView"
                            }
                        }
                    }
                },
                extensions: {
                    serializedName: "extensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionInstanceView"
                            }
                        }
                    }
                },
                vmHealth: {
                    readOnly: true,
                    serializedName: "vmHealth",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineHealthStatus"
                    }
                },
                bootDiagnostics: {
                    serializedName: "bootDiagnostics",
                    type: {
                        name: "Composite",
                        className: "BootDiagnosticsInstanceView"
                    }
                },
                statuses: {
                    serializedName: "statuses",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                },
                placementGroupId: {
                    serializedName: "placementGroupId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVM = {
        serializedName: "VirtualMachineScaleSetVM",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVM",
            modelProperties: __assign({}, Resource.type.modelProperties, { instanceId: {
                    readOnly: true,
                    serializedName: "instanceId",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, latestModelApplied: {
                    readOnly: true,
                    serializedName: "properties.latestModelApplied",
                    type: {
                        name: "Boolean"
                    }
                }, vmId: {
                    readOnly: true,
                    serializedName: "properties.vmId",
                    type: {
                        name: "String"
                    }
                }, instanceView: {
                    readOnly: true,
                    serializedName: "properties.instanceView",
                    type: {
                        name: "Composite",
                        className: "VirtualMachineScaleSetVMInstanceView"
                    }
                }, hardwareProfile: {
                    serializedName: "properties.hardwareProfile",
                    type: {
                        name: "Composite",
                        className: "HardwareProfile"
                    }
                }, storageProfile: {
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "StorageProfile"
                    }
                }, additionalCapabilities: {
                    serializedName: "properties.additionalCapabilities",
                    type: {
                        name: "Composite",
                        className: "AdditionalCapabilities"
                    }
                }, osProfile: {
                    serializedName: "properties.osProfile",
                    type: {
                        name: "Composite",
                        className: "OSProfile"
                    }
                }, networkProfile: {
                    serializedName: "properties.networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsProfile"
                    }
                }, availabilitySet: {
                    serializedName: "properties.availabilitySet",
                    type: {
                        name: "Composite",
                        className: "SubResource"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, licenseType: {
                    serializedName: "properties.licenseType",
                    type: {
                        name: "String"
                    }
                }, plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "Plan"
                    }
                }, resources: {
                    readOnly: true,
                    serializedName: "resources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtension"
                            }
                        }
                    }
                }, zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var RollingUpgradeRunningStatus = {
        serializedName: "RollingUpgradeRunningStatus",
        type: {
            name: "Composite",
            className: "RollingUpgradeRunningStatus",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RollingForward",
                            "Cancelled",
                            "Completed",
                            "Faulted"
                        ]
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastAction: {
                    readOnly: true,
                    serializedName: "lastAction",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Start",
                            "Cancel"
                        ]
                    }
                },
                lastActionTime: {
                    readOnly: true,
                    serializedName: "lastActionTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var RollingUpgradeStatusInfo = {
        serializedName: "RollingUpgradeStatusInfo",
        type: {
            name: "Composite",
            className: "RollingUpgradeStatusInfo",
            modelProperties: __assign({}, Resource.type.modelProperties, { policy: {
                    readOnly: true,
                    serializedName: "properties.policy",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradePolicy"
                    }
                }, runningStatus: {
                    readOnly: true,
                    serializedName: "properties.runningStatus",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradeRunningStatus"
                    }
                }, progress: {
                    readOnly: true,
                    serializedName: "properties.progress",
                    type: {
                        name: "Composite",
                        className: "RollingUpgradeProgressInfo"
                    }
                }, error: {
                    readOnly: true,
                    serializedName: "properties.error",
                    type: {
                        name: "Composite",
                        className: "ApiError"
                    }
                } })
        }
    };
    var RecoveryWalkResponse = {
        serializedName: "RecoveryWalkResponse",
        type: {
            name: "Composite",
            className: "RecoveryWalkResponse",
            modelProperties: {
                walkPerformed: {
                    readOnly: true,
                    serializedName: "walkPerformed",
                    type: {
                        name: "Boolean"
                    }
                },
                nextPlatformUpdateDomain: {
                    readOnly: true,
                    serializedName: "nextPlatformUpdateDomain",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LogAnalyticsInputBase = {
        serializedName: "LogAnalyticsInputBase",
        type: {
            name: "Composite",
            className: "LogAnalyticsInputBase",
            modelProperties: {
                blobContainerSasUri: {
                    required: true,
                    serializedName: "blobContainerSasUri",
                    type: {
                        name: "String"
                    }
                },
                fromTime: {
                    required: true,
                    serializedName: "fromTime",
                    type: {
                        name: "DateTime"
                    }
                },
                toTime: {
                    required: true,
                    serializedName: "toTime",
                    type: {
                        name: "DateTime"
                    }
                },
                groupByThrottlePolicy: {
                    serializedName: "groupByThrottlePolicy",
                    type: {
                        name: "Boolean"
                    }
                },
                groupByOperationName: {
                    serializedName: "groupByOperationName",
                    type: {
                        name: "Boolean"
                    }
                },
                groupByResourceName: {
                    serializedName: "groupByResourceName",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RequestRateByIntervalInput = {
        serializedName: "RequestRateByIntervalInput",
        type: {
            name: "Composite",
            className: "RequestRateByIntervalInput",
            modelProperties: __assign({}, LogAnalyticsInputBase.type.modelProperties, { intervalLength: {
                    required: true,
                    serializedName: "intervalLength",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ThreeMins",
                            "FiveMins",
                            "ThirtyMins",
                            "SixtyMins"
                        ]
                    }
                } })
        }
    };
    var ThrottledRequestsInput = {
        serializedName: "ThrottledRequestsInput",
        type: {
            name: "Composite",
            className: "ThrottledRequestsInput",
            modelProperties: __assign({}, LogAnalyticsInputBase.type.modelProperties)
        }
    };
    var LogAnalyticsOutput = {
        serializedName: "LogAnalyticsOutput",
        type: {
            name: "Composite",
            className: "LogAnalyticsOutput",
            modelProperties: {
                output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogAnalyticsOperationResult = {
        serializedName: "LogAnalyticsOperationResult",
        type: {
            name: "Composite",
            className: "LogAnalyticsOperationResult",
            modelProperties: {
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "LogAnalyticsOutput"
                    }
                }
            }
        }
    };
    var RunCommandInputParameter = {
        serializedName: "RunCommandInputParameter",
        type: {
            name: "Composite",
            className: "RunCommandInputParameter",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandInput = {
        serializedName: "RunCommandInput",
        type: {
            name: "Composite",
            className: "RunCommandInput",
            modelProperties: {
                commandId: {
                    required: true,
                    serializedName: "commandId",
                    type: {
                        name: "String"
                    }
                },
                script: {
                    serializedName: "script",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandInputParameter"
                            }
                        }
                    }
                }
            }
        }
    };
    var RunCommandParameterDefinition = {
        serializedName: "RunCommandParameterDefinition",
        type: {
            name: "Composite",
            className: "RunCommandParameterDefinition",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                defaultValue: {
                    serializedName: "defaultValue",
                    type: {
                        name: "String"
                    }
                },
                required: {
                    serializedName: "required",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RunCommandDocumentBase = {
        serializedName: "RunCommandDocumentBase",
        type: {
            name: "Composite",
            className: "RunCommandDocumentBase",
            modelProperties: {
                schema: {
                    required: true,
                    serializedName: "$schema",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                label: {
                    required: true,
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    required: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandDocument = {
        serializedName: "RunCommandDocument",
        type: {
            name: "Composite",
            className: "RunCommandDocument",
            modelProperties: __assign({}, RunCommandDocumentBase.type.modelProperties, { script: {
                    required: true,
                    serializedName: "script",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandParameterDefinition"
                            }
                        }
                    }
                } })
        }
    };
    var RunCommandResult = {
        serializedName: "RunCommandResult",
        type: {
            name: "Composite",
            className: "RunCommandResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstanceViewStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuCapacity = {
        serializedName: "ResourceSkuCapacity",
        type: {
            name: "Composite",
            className: "ResourceSkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "Manual",
                            "None"
                        ]
                    }
                }
            }
        }
    };
    var ResourceSkuCosts = {
        serializedName: "ResourceSkuCosts",
        type: {
            name: "Composite",
            className: "ResourceSkuCosts",
            modelProperties: {
                meterID: {
                    readOnly: true,
                    serializedName: "meterID",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    readOnly: true,
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                extendedUnit: {
                    readOnly: true,
                    serializedName: "extendedUnit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCapabilities = {
        serializedName: "ResourceSkuCapabilities",
        type: {
            name: "Composite",
            className: "ResourceSkuCapabilities",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictionInfo = {
        serializedName: "ResourceSkuRestrictionInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictionInfo",
            modelProperties: {
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictions = {
        serializedName: "ResourceSkuRestrictions",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictions",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Location",
                            "Zone"
                        ]
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                restrictionInfo: {
                    readOnly: true,
                    serializedName: "restrictionInfo",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuRestrictionInfo"
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "QuotaId",
                            "NotAvailableForSubscription"
                        ]
                    }
                }
            }
        }
    };
    var ResourceSkuLocationInfo = {
        serializedName: "ResourceSkuLocationInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuLocationInfo",
            modelProperties: {
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                zones: {
                    readOnly: true,
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    readOnly: true,
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    readOnly: true,
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuCapacity"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locationInfo: {
                    readOnly: true,
                    serializedName: "locationInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuLocationInfo"
                            }
                        }
                    }
                },
                apiVersions: {
                    readOnly: true,
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                costs: {
                    readOnly: true,
                    serializedName: "costs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCosts"
                            }
                        }
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCapabilities"
                            }
                        }
                    }
                },
                restrictions: {
                    readOnly: true,
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuRestrictions"
                            }
                        }
                    }
                }
            }
        }
    };
    var DiskSku = {
        serializedName: "DiskSku",
        type: {
            name: "Composite",
            className: "DiskSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageDiskReference = {
        serializedName: "ImageDiskReference",
        type: {
            name: "Composite",
            className: "ImageDiskReference",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                lun: {
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CreationData = {
        serializedName: "CreationData",
        type: {
            name: "Composite",
            className: "CreationData",
            modelProperties: {
                createOption: {
                    required: true,
                    serializedName: "createOption",
                    type: {
                        name: "String"
                    }
                },
                storageAccountId: {
                    serializedName: "storageAccountId",
                    type: {
                        name: "String"
                    }
                },
                imageReference: {
                    serializedName: "imageReference",
                    type: {
                        name: "Composite",
                        className: "ImageDiskReference"
                    }
                },
                sourceUri: {
                    serializedName: "sourceUri",
                    type: {
                        name: "String"
                    }
                },
                sourceResourceId: {
                    serializedName: "sourceResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SourceVault = {
        serializedName: "SourceVault",
        type: {
            name: "Composite",
            className: "SourceVault",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultAndSecretReference = {
        serializedName: "KeyVaultAndSecretReference",
        type: {
            name: "Composite",
            className: "KeyVaultAndSecretReference",
            modelProperties: {
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SourceVault"
                    }
                },
                secretUrl: {
                    required: true,
                    serializedName: "secretUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KeyVaultAndKeyReference = {
        serializedName: "KeyVaultAndKeyReference",
        type: {
            name: "Composite",
            className: "KeyVaultAndKeyReference",
            modelProperties: {
                sourceVault: {
                    required: true,
                    serializedName: "sourceVault",
                    type: {
                        name: "Composite",
                        className: "SourceVault"
                    }
                },
                keyUrl: {
                    required: true,
                    serializedName: "keyUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionSettings = {
        serializedName: "EncryptionSettings",
        type: {
            name: "Composite",
            className: "EncryptionSettings",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                diskEncryptionKey: {
                    serializedName: "diskEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultAndSecretReference"
                    }
                },
                keyEncryptionKey: {
                    serializedName: "keyEncryptionKey",
                    type: {
                        name: "Composite",
                        className: "KeyVaultAndKeyReference"
                    }
                }
            }
        }
    };
    var Disk = {
        serializedName: "Disk",
        type: {
            name: "Composite",
            className: "Disk",
            modelProperties: __assign({}, Resource.type.modelProperties, { managedBy: {
                    readOnly: true,
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "DiskSku"
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, timeCreated: {
                    readOnly: true,
                    serializedName: "properties.timeCreated",
                    type: {
                        name: "DateTime"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, creationData: {
                    required: true,
                    serializedName: "properties.creationData",
                    type: {
                        name: "Composite",
                        className: "CreationData"
                    }
                }, diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                }, encryptionSettings: {
                    serializedName: "properties.encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettings"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, diskIOPSReadWrite: {
                    serializedName: "properties.diskIOPSReadWrite",
                    type: {
                        name: "Number"
                    }
                }, diskMBpsReadWrite: {
                    serializedName: "properties.diskMBpsReadWrite",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var DiskUpdate = {
        serializedName: "DiskUpdate",
        type: {
            name: "Composite",
            className: "DiskUpdate",
            modelProperties: {
                osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                encryptionSettings: {
                    serializedName: "properties.encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettings"
                    }
                },
                diskIOPSReadWrite: {
                    serializedName: "properties.diskIOPSReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                diskMBpsReadWrite: {
                    serializedName: "properties.diskMBpsReadWrite",
                    type: {
                        name: "Number"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "DiskSku"
                    }
                }
            }
        }
    };
    var SnapshotSku = {
        serializedName: "SnapshotSku",
        type: {
            name: "Composite",
            className: "SnapshotSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GrantAccessData = {
        serializedName: "GrantAccessData",
        type: {
            name: "Composite",
            className: "GrantAccessData",
            modelProperties: {
                access: {
                    required: true,
                    serializedName: "access",
                    type: {
                        name: "String"
                    }
                },
                durationInSeconds: {
                    required: true,
                    serializedName: "durationInSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AccessUri = {
        serializedName: "AccessUri",
        type: {
            name: "Composite",
            className: "AccessUri",
            modelProperties: {
                accessSAS: {
                    readOnly: true,
                    serializedName: "accessSAS",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Snapshot = {
        serializedName: "Snapshot",
        type: {
            name: "Composite",
            className: "Snapshot",
            modelProperties: __assign({}, Resource.type.modelProperties, { managedBy: {
                    readOnly: true,
                    serializedName: "managedBy",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SnapshotSku"
                    }
                }, timeCreated: {
                    readOnly: true,
                    serializedName: "properties.timeCreated",
                    type: {
                        name: "DateTime"
                    }
                }, osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, creationData: {
                    required: true,
                    serializedName: "properties.creationData",
                    type: {
                        name: "Composite",
                        className: "CreationData"
                    }
                }, diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                }, encryptionSettings: {
                    serializedName: "properties.encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettings"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SnapshotUpdate = {
        serializedName: "SnapshotUpdate",
        type: {
            name: "Composite",
            className: "SnapshotUpdate",
            modelProperties: {
                osType: {
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                },
                diskSizeGB: {
                    serializedName: "properties.diskSizeGB",
                    type: {
                        name: "Number"
                    }
                },
                encryptionSettings: {
                    serializedName: "properties.encryptionSettings",
                    type: {
                        name: "Composite",
                        className: "EncryptionSettings"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "SnapshotSku"
                    }
                }
            }
        }
    };
    var GalleryIdentifier = {
        serializedName: "GalleryIdentifier",
        type: {
            name: "Composite",
            className: "GalleryIdentifier",
            modelProperties: {
                uniqueName: {
                    readOnly: true,
                    serializedName: "uniqueName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Gallery = {
        serializedName: "Gallery",
        type: {
            name: "Composite",
            className: "Gallery",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, identifier: {
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryIdentifier"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GalleryImageIdentifier = {
        serializedName: "GalleryImageIdentifier",
        type: {
            name: "Composite",
            className: "GalleryImageIdentifier",
            modelProperties: {
                publisher: {
                    required: true,
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                offer: {
                    required: true,
                    serializedName: "offer",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceRange = {
        serializedName: "ResourceRange",
        type: {
            name: "Composite",
            className: "ResourceRange",
            modelProperties: {
                min: {
                    serializedName: "min",
                    type: {
                        name: "Number"
                    }
                },
                max: {
                    serializedName: "max",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RecommendedMachineConfiguration = {
        serializedName: "RecommendedMachineConfiguration",
        type: {
            name: "Composite",
            className: "RecommendedMachineConfiguration",
            modelProperties: {
                vCPUs: {
                    serializedName: "vCPUs",
                    type: {
                        name: "Composite",
                        className: "ResourceRange"
                    }
                },
                memory: {
                    serializedName: "memory",
                    type: {
                        name: "Composite",
                        className: "ResourceRange"
                    }
                }
            }
        }
    };
    var Disallowed = {
        serializedName: "Disallowed",
        type: {
            name: "Composite",
            className: "Disallowed",
            modelProperties: {
                diskTypes: {
                    serializedName: "diskTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImagePurchasePlan = {
        serializedName: "ImagePurchasePlan",
        type: {
            name: "Composite",
            className: "ImagePurchasePlan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImage = {
        serializedName: "GalleryImage",
        type: {
            name: "Composite",
            className: "GalleryImage",
            modelProperties: __assign({}, Resource.type.modelProperties, { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, eula: {
                    serializedName: "properties.eula",
                    type: {
                        name: "String"
                    }
                }, privacyStatementUri: {
                    serializedName: "properties.privacyStatementUri",
                    type: {
                        name: "String"
                    }
                }, releaseNoteUri: {
                    serializedName: "properties.releaseNoteUri",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Windows",
                            "Linux"
                        ]
                    }
                }, osState: {
                    required: true,
                    serializedName: "properties.osState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Generalized",
                            "Specialized"
                        ]
                    }
                }, endOfLifeDate: {
                    serializedName: "properties.endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                }, identifier: {
                    required: true,
                    serializedName: "properties.identifier",
                    type: {
                        name: "Composite",
                        className: "GalleryImageIdentifier"
                    }
                }, recommended: {
                    serializedName: "properties.recommended",
                    type: {
                        name: "Composite",
                        className: "RecommendedMachineConfiguration"
                    }
                }, disallowed: {
                    serializedName: "properties.disallowed",
                    type: {
                        name: "Composite",
                        className: "Disallowed"
                    }
                }, purchasePlan: {
                    serializedName: "properties.purchasePlan",
                    type: {
                        name: "Composite",
                        className: "ImagePurchasePlan"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var GalleryArtifactPublishingProfileBase = {
        serializedName: "GalleryArtifactPublishingProfileBase",
        type: {
            name: "Composite",
            className: "GalleryArtifactPublishingProfileBase",
            modelProperties: {
                targetRegions: {
                    serializedName: "targetRegions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TargetRegion"
                            }
                        }
                    }
                },
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "GalleryArtifactSource"
                    }
                }
            }
        }
    };
    var GalleryImageVersionPublishingProfile = {
        serializedName: "GalleryImageVersionPublishingProfile",
        type: {
            name: "Composite",
            className: "GalleryImageVersionPublishingProfile",
            modelProperties: __assign({}, GalleryArtifactPublishingProfileBase.type.modelProperties, { replicaCount: {
                    serializedName: "replicaCount",
                    type: {
                        name: "Number"
                    }
                }, excludeFromLatest: {
                    serializedName: "excludeFromLatest",
                    type: {
                        name: "Boolean"
                    }
                }, publishedDate: {
                    readOnly: true,
                    serializedName: "publishedDate",
                    type: {
                        name: "DateTime"
                    }
                }, endOfLifeDate: {
                    serializedName: "endOfLifeDate",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var GalleryDiskImage = {
        serializedName: "GalleryDiskImage",
        type: {
            name: "Composite",
            className: "GalleryDiskImage",
            modelProperties: {
                sizeInGB: {
                    readOnly: true,
                    serializedName: "sizeInGB",
                    type: {
                        name: "Number"
                    }
                },
                hostCaching: {
                    readOnly: true,
                    serializedName: "hostCaching",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "None",
                            "ReadOnly",
                            "ReadWrite"
                        ]
                    }
                }
            }
        }
    };
    var GalleryOSDiskImage = {
        serializedName: "GalleryOSDiskImage",
        type: {
            name: "Composite",
            className: "GalleryOSDiskImage",
            modelProperties: __assign({}, GalleryDiskImage.type.modelProperties)
        }
    };
    var GalleryDataDiskImage = {
        serializedName: "GalleryDataDiskImage",
        type: {
            name: "Composite",
            className: "GalleryDataDiskImage",
            modelProperties: __assign({}, GalleryDiskImage.type.modelProperties, { lun: {
                    readOnly: true,
                    serializedName: "lun",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var GalleryImageVersionStorageProfile = {
        serializedName: "GalleryImageVersionStorageProfile",
        type: {
            name: "Composite",
            className: "GalleryImageVersionStorageProfile",
            modelProperties: {
                osDiskImage: {
                    readOnly: true,
                    serializedName: "osDiskImage",
                    type: {
                        name: "Composite",
                        className: "GalleryOSDiskImage"
                    }
                },
                dataDiskImages: {
                    readOnly: true,
                    serializedName: "dataDiskImages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryDataDiskImage"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegionalReplicationStatus = {
        serializedName: "RegionalReplicationStatus",
        type: {
            name: "Composite",
            className: "RegionalReplicationStatus",
            modelProperties: {
                region: {
                    readOnly: true,
                    serializedName: "region",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                },
                progress: {
                    readOnly: true,
                    serializedName: "progress",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ReplicationStatus = {
        serializedName: "ReplicationStatus",
        type: {
            name: "Composite",
            className: "ReplicationStatus",
            modelProperties: {
                aggregatedState: {
                    readOnly: true,
                    serializedName: "aggregatedState",
                    type: {
                        name: "String"
                    }
                },
                summary: {
                    readOnly: true,
                    serializedName: "summary",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegionalReplicationStatus"
                            }
                        }
                    }
                }
            }
        }
    };
    var GalleryImageVersion = {
        serializedName: "GalleryImageVersion",
        type: {
            name: "Composite",
            className: "GalleryImageVersion",
            modelProperties: __assign({}, Resource.type.modelProperties, { publishingProfile: {
                    required: true,
                    serializedName: "properties.publishingProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryImageVersionPublishingProfile"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, storageProfile: {
                    readOnly: true,
                    serializedName: "properties.storageProfile",
                    type: {
                        name: "Composite",
                        className: "GalleryImageVersionStorageProfile"
                    }
                }, replicationStatus: {
                    readOnly: true,
                    serializedName: "properties.replicationStatus",
                    type: {
                        name: "Composite",
                        className: "ReplicationStatus"
                    }
                } })
        }
    };
    var TargetRegion = {
        serializedName: "TargetRegion",
        type: {
            name: "Composite",
            className: "TargetRegion",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                regionalReplicaCount: {
                    serializedName: "regionalReplicaCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagedArtifact = {
        serializedName: "ManagedArtifact",
        type: {
            name: "Composite",
            className: "ManagedArtifact",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryArtifactSource = {
        serializedName: "GalleryArtifactSource",
        type: {
            name: "Composite",
            className: "GalleryArtifactSource",
            modelProperties: {
                managedImage: {
                    required: true,
                    serializedName: "managedImage",
                    type: {
                        name: "Composite",
                        className: "ManagedArtifact"
                    }
                }
            }
        }
    };
    var ContainerServiceCustomProfile = {
        serializedName: "ContainerServiceCustomProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceCustomProfile",
            modelProperties: {
                orchestrator: {
                    required: true,
                    serializedName: "orchestrator",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceServicePrincipalProfile = {
        serializedName: "ContainerServiceServicePrincipalProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceServicePrincipalProfile",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    required: true,
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceOrchestratorProfile = {
        serializedName: "ContainerServiceOrchestratorProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceOrchestratorProfile",
            modelProperties: {
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Swarm",
                            "DCOS",
                            "Custom",
                            "Kubernetes"
                        ]
                    }
                }
            }
        }
    };
    var ContainerServiceMasterProfile = {
        serializedName: "ContainerServiceMasterProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceMasterProfile",
            modelProperties: {
                count: {
                    serializedName: "count",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                dnsPrefix: {
                    required: true,
                    serializedName: "dnsPrefix",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceAgentPoolProfile = {
        serializedName: "ContainerServiceAgentPoolProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceAgentPoolProfile",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                vmSize: {
                    required: true,
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                dnsPrefix: {
                    required: true,
                    serializedName: "dnsPrefix",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    readOnly: true,
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceWindowsProfile = {
        serializedName: "ContainerServiceWindowsProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceWindowsProfile",
            modelProperties: {
                adminUsername: {
                    required: true,
                    serializedName: "adminUsername",
                    constraints: {
                        Pattern: /^[a-zA-Z0-9]+([._]?[a-zA-Z0-9]+)*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                adminPassword: {
                    required: true,
                    serializedName: "adminPassword",
                    constraints: {
                        Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\^&\*\(\)])[a-zA-Z\d!@#$%\^&\*\(\)]{12,123}$/
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceSshPublicKey = {
        serializedName: "ContainerServiceSshPublicKey",
        type: {
            name: "Composite",
            className: "ContainerServiceSshPublicKey",
            modelProperties: {
                keyData: {
                    required: true,
                    serializedName: "keyData",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceSshConfiguration = {
        serializedName: "ContainerServiceSshConfiguration",
        type: {
            name: "Composite",
            className: "ContainerServiceSshConfiguration",
            modelProperties: {
                publicKeys: {
                    required: true,
                    serializedName: "publicKeys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerServiceSshPublicKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerServiceLinuxProfile = {
        serializedName: "ContainerServiceLinuxProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceLinuxProfile",
            modelProperties: {
                adminUsername: {
                    required: true,
                    serializedName: "adminUsername",
                    constraints: {
                        Pattern: /^[a-z][a-z0-9_-]*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                ssh: {
                    required: true,
                    serializedName: "ssh",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceSshConfiguration"
                    }
                }
            }
        }
    };
    var ContainerServiceVMDiagnostics = {
        serializedName: "ContainerServiceVMDiagnostics",
        type: {
            name: "Composite",
            className: "ContainerServiceVMDiagnostics",
            modelProperties: {
                enabled: {
                    required: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                storageUri: {
                    readOnly: true,
                    serializedName: "storageUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceDiagnosticsProfile = {
        serializedName: "ContainerServiceDiagnosticsProfile",
        type: {
            name: "Composite",
            className: "ContainerServiceDiagnosticsProfile",
            modelProperties: {
                vmDiagnostics: {
                    required: true,
                    serializedName: "vmDiagnostics",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceVMDiagnostics"
                    }
                }
            }
        }
    };
    var ContainerService = {
        serializedName: "ContainerService",
        type: {
            name: "Composite",
            className: "ContainerService",
            modelProperties: __assign({}, Resource.type.modelProperties, { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, orchestratorProfile: {
                    serializedName: "properties.orchestratorProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceOrchestratorProfile"
                    }
                }, customProfile: {
                    serializedName: "properties.customProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceCustomProfile"
                    }
                }, servicePrincipalProfile: {
                    serializedName: "properties.servicePrincipalProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceServicePrincipalProfile"
                    }
                }, masterProfile: {
                    required: true,
                    serializedName: "properties.masterProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceMasterProfile"
                    }
                }, agentPoolProfiles: {
                    required: true,
                    serializedName: "properties.agentPoolProfiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerServiceAgentPoolProfile"
                            }
                        }
                    }
                }, windowsProfile: {
                    serializedName: "properties.windowsProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceWindowsProfile"
                    }
                }, linuxProfile: {
                    required: true,
                    serializedName: "properties.linuxProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceLinuxProfile"
                    }
                }, diagnosticsProfile: {
                    serializedName: "properties.diagnosticsProfile",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceDiagnosticsProfile"
                    }
                } })
        }
    };
    var ComputeOperationListResult = {
        serializedName: "ComputeOperationListResult",
        type: {
            name: "Composite",
            className: "ComputeOperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputeOperationValue"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailabilitySetListResult = {
        serializedName: "AvailabilitySetListResult",
        type: {
            name: "Composite",
            className: "AvailabilitySetListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailabilitySet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineSizeListResult = {
        serializedName: "VirtualMachineSizeListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineSizeListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineSize"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListUsagesResult = {
        serializedName: "ListUsagesResult",
        type: {
            name: "Composite",
            className: "ListUsagesResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineListResult = {
        serializedName: "VirtualMachineListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachine"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageListResult = {
        serializedName: "ImageListResult",
        type: {
            name: "Composite",
            className: "ImageListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListResult = {
        serializedName: "VirtualMachineScaleSetListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListWithLinkResult = {
        serializedName: "VirtualMachineScaleSetListWithLinkResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListWithLinkResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSet"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListSkusResult = {
        serializedName: "VirtualMachineScaleSetListSkusResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListSkusResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetListOSUpgradeHistory = {
        serializedName: "VirtualMachineScaleSetListOSUpgradeHistory",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetListOSUpgradeHistory",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpgradeOperationHistoricalStatusInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetExtensionListResult = {
        serializedName: "VirtualMachineScaleSetExtensionListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetExtensionListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetExtension"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualMachineScaleSetVMListResult = {
        serializedName: "VirtualMachineScaleSetVMListResult",
        type: {
            name: "Composite",
            className: "VirtualMachineScaleSetVMListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineScaleSetVM"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RunCommandListResult = {
        serializedName: "RunCommandListResult",
        type: {
            name: "Composite",
            className: "RunCommandListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RunCommandDocumentBase"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkusResult = {
        serializedName: "ResourceSkusResult",
        type: {
            name: "Composite",
            className: "ResourceSkusResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiskList = {
        serializedName: "DiskList",
        type: {
            name: "Composite",
            className: "DiskList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Disk"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SnapshotList = {
        serializedName: "SnapshotList",
        type: {
            name: "Composite",
            className: "SnapshotList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Snapshot"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryList = {
        serializedName: "GalleryList",
        type: {
            name: "Composite",
            className: "GalleryList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Gallery"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImageList = {
        serializedName: "GalleryImageList",
        type: {
            name: "Composite",
            className: "GalleryImageList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImage"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GalleryImageVersionList = {
        serializedName: "GalleryImageVersionList",
        type: {
            name: "Composite",
            className: "GalleryImageVersionList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GalleryImageVersion"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceListResult = {
        serializedName: "ContainerServiceListResult",
        type: {
            name: "Composite",
            className: "ContainerServiceListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerService"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        ComputeOperationValue: ComputeOperationValue,
        InstanceViewStatus: InstanceViewStatus,
        SubResource: SubResource,
        Sku: Sku,
        Resource: Resource,
        AvailabilitySet: AvailabilitySet,
        UpdateResource: UpdateResource,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineSize: VirtualMachineSize,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineExtensionsListResult: VirtualMachineExtensionsListResult,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineImage: VirtualMachineImage,
        UsageName: UsageName,
        Usage: Usage,
        VirtualMachineCaptureParameters: VirtualMachineCaptureParameters,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        ImageReference: ImageReference,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        DiskEncryptionSettings: DiskEncryptionSettings,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        ManagedDiskParameters: ManagedDiskParameters,
        OSDisk: OSDisk,
        DataDisk: DataDisk,
        StorageProfile: StorageProfile,
        AdditionalCapabilities: AdditionalCapabilities,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMListener: WinRMListener,
        WinRMConfiguration: WinRMConfiguration,
        WindowsConfiguration: WindowsConfiguration,
        SshPublicKey: SshPublicKey,
        SshConfiguration: SshConfiguration,
        LinuxConfiguration: LinuxConfiguration,
        VaultCertificate: VaultCertificate,
        VaultSecretGroup: VaultSecretGroup,
        OSProfile: OSProfile,
        NetworkInterfaceReference: NetworkInterfaceReference,
        NetworkProfile: NetworkProfile,
        BootDiagnostics: BootDiagnostics,
        DiagnosticsProfile: DiagnosticsProfile,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineIdentity: VirtualMachineIdentity,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachine: VirtualMachine,
        VirtualMachineUpdate: VirtualMachineUpdate,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        UpgradePolicy: UpgradePolicy,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageStorageProfile: ImageStorageProfile,
        Image: Image,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetVMInstanceIDs: VirtualMachineScaleSetVMInstanceIDs,
        VirtualMachineScaleSetVMInstanceRequiredIDs: VirtualMachineScaleSetVMInstanceRequiredIDs,
        VirtualMachineStatusCodeCount: VirtualMachineStatusCodeCount,
        VirtualMachineScaleSetInstanceViewStatusesSummary: VirtualMachineScaleSetInstanceViewStatusesSummary,
        VirtualMachineScaleSetVMExtensionsSummary: VirtualMachineScaleSetVMExtensionsSummary,
        VirtualMachineScaleSetInstanceView: VirtualMachineScaleSetInstanceView,
        VirtualMachineScaleSetSkuCapacity: VirtualMachineScaleSetSkuCapacity,
        VirtualMachineScaleSetSku: VirtualMachineScaleSetSku,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        ApiError: ApiError,
        RollbackStatusInfo: RollbackStatusInfo,
        UpgradeOperationHistoryStatus: UpgradeOperationHistoryStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        UpgradeOperationHistoricalStatusInfoProperties: UpgradeOperationHistoricalStatusInfoProperties,
        UpgradeOperationHistoricalStatusInfo: UpgradeOperationHistoricalStatusInfo,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RecoveryWalkResponse: RecoveryWalkResponse,
        LogAnalyticsInputBase: LogAnalyticsInputBase,
        RequestRateByIntervalInput: RequestRateByIntervalInput,
        ThrottledRequestsInput: ThrottledRequestsInput,
        LogAnalyticsOutput: LogAnalyticsOutput,
        LogAnalyticsOperationResult: LogAnalyticsOperationResult,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandInput: RunCommandInput,
        RunCommandParameterDefinition: RunCommandParameterDefinition,
        RunCommandDocumentBase: RunCommandDocumentBase,
        RunCommandDocument: RunCommandDocument,
        RunCommandResult: RunCommandResult,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuCosts: ResourceSkuCosts,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkuLocationInfo: ResourceSkuLocationInfo,
        ResourceSku: ResourceSku,
        DiskSku: DiskSku,
        ImageDiskReference: ImageDiskReference,
        CreationData: CreationData,
        SourceVault: SourceVault,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        EncryptionSettings: EncryptionSettings,
        Disk: Disk,
        DiskUpdate: DiskUpdate,
        SnapshotSku: SnapshotSku,
        GrantAccessData: GrantAccessData,
        AccessUri: AccessUri,
        Snapshot: Snapshot,
        SnapshotUpdate: SnapshotUpdate,
        GalleryIdentifier: GalleryIdentifier,
        Gallery: Gallery,
        GalleryImageIdentifier: GalleryImageIdentifier,
        ResourceRange: ResourceRange,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImage: GalleryImage,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryDiskImage: GalleryDiskImage,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ReplicationStatus: ReplicationStatus,
        GalleryImageVersion: GalleryImageVersion,
        TargetRegion: TargetRegion,
        ManagedArtifact: ManagedArtifact,
        GalleryArtifactSource: GalleryArtifactSource,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerService: ContainerService,
        ComputeOperationListResult: ComputeOperationListResult,
        AvailabilitySetListResult: AvailabilitySetListResult,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        ListUsagesResult: ListUsagesResult,
        VirtualMachineListResult: VirtualMachineListResult,
        ImageListResult: ImageListResult,
        VirtualMachineScaleSetListResult: VirtualMachineScaleSetListResult,
        VirtualMachineScaleSetListWithLinkResult: VirtualMachineScaleSetListWithLinkResult,
        VirtualMachineScaleSetListSkusResult: VirtualMachineScaleSetListSkusResult,
        VirtualMachineScaleSetListOSUpgradeHistory: VirtualMachineScaleSetListOSUpgradeHistory,
        VirtualMachineScaleSetExtensionListResult: VirtualMachineScaleSetExtensionListResult,
        VirtualMachineScaleSetVMListResult: VirtualMachineScaleSetVMListResult,
        RunCommandListResult: RunCommandListResult,
        ResourceSkusResult: ResourceSkusResult,
        DiskList: DiskList,
        SnapshotList: SnapshotList,
        GalleryList: GalleryList,
        GalleryImageList: GalleryImageList,
        GalleryImageVersionList: GalleryImageVersionList,
        ContainerServiceListResult: ContainerServiceListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        ComputeOperationListResult: ComputeOperationListResult,
        ComputeOperationValue: ComputeOperationValue,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-10-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-09-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-06-01',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2017-01-31',
            type: {
                name: "String"
            }
        }
    };
    var availabilitySetName = {
        parameterPath: "availabilitySetName",
        mapper: {
            required: true,
            serializedName: "availabilitySetName",
            type: {
                name: "String"
            }
        }
    };
    var commandId = {
        parameterPath: "commandId",
        mapper: {
            required: true,
            serializedName: "commandId",
            type: {
                name: "String"
            }
        }
    };
    var containerServiceName = {
        parameterPath: "containerServiceName",
        mapper: {
            required: true,
            serializedName: "containerServiceName",
            type: {
                name: "String"
            }
        }
    };
    var diskName = {
        parameterPath: "diskName",
        mapper: {
            required: true,
            serializedName: "diskName",
            type: {
                name: "String"
            }
        }
    };
    var expand0 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var expand1 = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "instanceView"
                ]
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var galleryImageName = {
        parameterPath: "galleryImageName",
        mapper: {
            required: true,
            serializedName: "galleryImageName",
            type: {
                name: "String"
            }
        }
    };
    var galleryImageVersionName = {
        parameterPath: "galleryImageVersionName",
        mapper: {
            required: true,
            serializedName: "galleryImageVersionName",
            type: {
                name: "String"
            }
        }
    };
    var galleryName = {
        parameterPath: "galleryName",
        mapper: {
            required: true,
            serializedName: "galleryName",
            type: {
                name: "String"
            }
        }
    };
    var imageName = {
        parameterPath: "imageName",
        mapper: {
            required: true,
            serializedName: "imageName",
            type: {
                name: "String"
            }
        }
    };
    var instanceId = {
        parameterPath: "instanceId",
        mapper: {
            required: true,
            serializedName: "instanceId",
            type: {
                name: "String"
            }
        }
    };
    var location0 = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var location1 = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            constraints: {
                Pattern: /^[-\w\._]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var offer = {
        parameterPath: "offer",
        mapper: {
            required: true,
            serializedName: "offer",
            type: {
                name: "String"
            }
        }
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var platformUpdateDomain = {
        parameterPath: "platformUpdateDomain",
        mapper: {
            required: true,
            serializedName: "platformUpdateDomain",
            type: {
                name: "Number"
            }
        }
    };
    var publisherName = {
        parameterPath: "publisherName",
        mapper: {
            required: true,
            serializedName: "publisherName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var skus = {
        parameterPath: "skus",
        mapper: {
            required: true,
            serializedName: "skus",
            type: {
                name: "String"
            }
        }
    };
    var snapshotName = {
        parameterPath: "snapshotName",
        mapper: {
            required: true,
            serializedName: "snapshotName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            type: {
                name: "Number"
            }
        }
    };
    var type = {
        parameterPath: "type",
        mapper: {
            required: true,
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };
    var version = {
        parameterPath: "version",
        mapper: {
            required: true,
            serializedName: "version",
            type: {
                name: "String"
            }
        }
    };
    var virtualMachineScaleSetName = {
        parameterPath: "virtualMachineScaleSetName",
        mapper: {
            required: true,
            serializedName: "virtualMachineScaleSetName",
            type: {
                name: "String"
            }
        }
    };
    var vmExtensionName = {
        parameterPath: "vmExtensionName",
        mapper: {
            required: true,
            serializedName: "vmExtensionName",
            type: {
                name: "String"
            }
        }
    };
    var vmName = {
        parameterPath: "vmName",
        mapper: {
            required: true,
            serializedName: "vmName",
            type: {
                name: "String"
            }
        }
    };
    var vmScaleSetName = {
        parameterPath: "vmScaleSetName",
        mapper: {
            required: true,
            serializedName: "vmScaleSetName",
            type: {
                name: "String"
            }
        }
    };
    var vmssExtensionName = {
        parameterPath: "vmssExtensionName",
        mapper: {
            required: true,
            serializedName: "vmssExtensionName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Compute/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputeOperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        AvailabilitySet: AvailabilitySet,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        CloudError: CloudError,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        UpdateResource: UpdateResource,
        AvailabilitySetListResult: AvailabilitySetListResult,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        VirtualMachineSize: VirtualMachineSize,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineUpdate: VirtualMachineUpdate,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailabilitySets. */
    var AvailabilitySets = /** @class */ (function () {
        /**
         * Create a AvailabilitySets.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function AvailabilitySets(client) {
            this.client = client;
        }
        AvailabilitySets.prototype.createOrUpdate = function (resourceGroupName$$1, availabilitySetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                availabilitySetName: availabilitySetName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        AvailabilitySets.prototype.update = function (resourceGroupName$$1, availabilitySetName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                availabilitySetName: availabilitySetName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        AvailabilitySets.prototype.deleteMethod = function (resourceGroupName$$1, availabilitySetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                availabilitySetName: availabilitySetName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        AvailabilitySets.prototype.get = function (resourceGroupName$$1, availabilitySetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                availabilitySetName: availabilitySetName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        AvailabilitySets.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        AvailabilitySets.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        AvailabilitySets.prototype.listAvailableSizes = function (resourceGroupName$$1, availabilitySetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                availabilitySetName: availabilitySetName$$1,
                options: options
            }, listAvailableSizesOperationSpec, callback);
        };
        AvailabilitySets.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        AvailabilitySets.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return AvailabilitySets;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AvailabilitySet, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailabilitySet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AvailabilitySetUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailabilitySet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/availabilitySets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listAvailableSizesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}/vmSizes",
        urlParameters: [
            resourceGroupName,
            availabilitySetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineSizeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilitySetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineExtensionImages. */
    var VirtualMachineExtensionImages = /** @class */ (function () {
        /**
         * Create a VirtualMachineExtensionImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineExtensionImages(client) {
            this.client = client;
        }
        VirtualMachineExtensionImages.prototype.get = function (location, publisherName$$1, type$$1, version$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                type: type$$1,
                version: version$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        VirtualMachineExtensionImages.prototype.listTypes = function (location, publisherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                options: options
            }, listTypesOperationSpec, callback);
        };
        VirtualMachineExtensionImages.prototype.listVersions = function (location, publisherName$$1, type$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                type: type$$1,
                options: options
            }, listVersionsOperationSpec, callback);
        };
        return VirtualMachineExtensionImages;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}",
        urlParameters: [
            location0,
            publisherName,
            type,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineExtensionImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listTypesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types",
        urlParameters: [
            location0,
            publisherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionImage"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listVersionsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions",
        urlParameters: [
            location0,
            publisherName,
            type,
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            orderby,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineExtensionImage"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        VirtualMachineExtension: VirtualMachineExtension,
        Resource: Resource,
        BaseResource: BaseResource,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        InstanceViewStatus: InstanceViewStatus,
        CloudError: CloudError,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        UpdateResource: UpdateResource,
        VirtualMachineExtensionsListResult: VirtualMachineExtensionsListResult,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        Sku: Sku,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineUpdate: VirtualMachineUpdate,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineExtensions. */
    var VirtualMachineExtensions = /** @class */ (function () {
        /**
         * Create a VirtualMachineExtensions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineExtensions(client) {
            this.client = client;
        }
        /**
         * The operation to create or update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be created or updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineExtensionsCreateOrUpdateResponse>
         */
        VirtualMachineExtensions.prototype.createOrUpdate = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, extensionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, vmName$$1, vmExtensionName$$1, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineExtensionsUpdateResponse>
         */
        VirtualMachineExtensions.prototype.update = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, extensionParameters, options) {
            return this.beginUpdate(resourceGroupName$$1, vmName$$1, vmExtensionName$$1, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be deleted.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineExtensions.prototype.deleteMethod = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, vmName$$1, vmExtensionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineExtensions.prototype.get = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                vmExtensionName: vmExtensionName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        VirtualMachineExtensions.prototype.list = function (resourceGroupName$$1, vmName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        /**
         * The operation to create or update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be created or updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Create Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                vmExtensionName: vmExtensionName$$1,
                extensionParameters: extensionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * The operation to update the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be updated.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param extensionParameters Parameters supplied to the Update Virtual Machine Extension
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineExtensions.prototype.beginUpdate = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                vmExtensionName: vmExtensionName$$1,
                extensionParameters: extensionParameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine where the extension should be deleted.
         * @param vmExtensionName The name of the virtual machine extension.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineExtensions.prototype.beginDeleteMethod = function (resourceGroupName$$1, vmName$$1, vmExtensionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                vmExtensionName: vmExtensionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        return VirtualMachineExtensions;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineExtensionsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign({}, VirtualMachineExtension, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineExtension
            },
            201: {
                bodyMapper: VirtualMachineExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign({}, VirtualMachineExtensionUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            vmExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        VirtualMachineImage: VirtualMachineImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        SubResource: SubResource,
        BaseResource: BaseResource,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        CloudError: CloudError,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        Resource: Resource,
        UpdateResource: UpdateResource,
        SubResourceReadOnly: SubResourceReadOnly,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineUpdate: VirtualMachineUpdate,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineImages. */
    var VirtualMachineImages = /** @class */ (function () {
        /**
         * Create a VirtualMachineImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineImages(client) {
            this.client = client;
        }
        VirtualMachineImages.prototype.get = function (location, publisherName$$1, offer$$1, skus$$1, version$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                offer: offer$$1,
                skus: skus$$1,
                version: version$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        VirtualMachineImages.prototype.list = function (location, publisherName$$1, offer$$1, skus$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                offer: offer$$1,
                skus: skus$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        VirtualMachineImages.prototype.listOffers = function (location, publisherName$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                options: options
            }, listOffersOperationSpec, callback);
        };
        VirtualMachineImages.prototype.listPublishers = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listPublishersOperationSpec, callback);
        };
        VirtualMachineImages.prototype.listSkus = function (location, publisherName$$1, offer$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                publisherName: publisherName$$1,
                offer: offer$$1,
                options: options
            }, listSkusOperationSpec, callback);
        };
        return VirtualMachineImages;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}",
        urlParameters: [
            location0,
            publisherName,
            offer,
            skus,
            version,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions",
        urlParameters: [
            location0,
            publisherName,
            offer,
            skus,
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            orderby,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOffersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers",
        urlParameters: [
            location0,
            publisherName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listPublishersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers",
        urlParameters: [
            location0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus",
        urlParameters: [
            location0,
            publisherName,
            offer,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualMachineImageResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        ListUsagesResult: ListUsagesResult,
        Usage: Usage,
        UsageName: UsageName,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UsageOperations. */
    var UsageOperations = /** @class */ (function () {
        /**
         * Create a UsageOperations.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function UsageOperations(client) {
            this.client = client;
        }
        UsageOperations.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$4, callback);
        };
        UsageOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return UsageOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/usages",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListUsagesResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        VirtualMachineListResult: VirtualMachineListResult,
        VirtualMachine: VirtualMachine,
        Resource: Resource,
        BaseResource: BaseResource,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        ImageReference: ImageReference,
        SubResource: SubResource,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        ManagedDiskParameters: ManagedDiskParameters,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        NetworkInterfaceReference: NetworkInterfaceReference,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        InstanceViewStatus: InstanceViewStatus,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        CloudError: CloudError,
        VirtualMachineCaptureParameters: VirtualMachineCaptureParameters,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachineUpdate: VirtualMachineUpdate,
        UpdateResource: UpdateResource,
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        VirtualMachineSize: VirtualMachineSize,
        RunCommandInput: RunCommandInput,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandResult: RunCommandResult,
        AvailabilitySet: AvailabilitySet,
        Sku: Sku,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachines. */
    var VirtualMachines = /** @class */ (function () {
        /**
         * Create a VirtualMachines.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachines(client) {
            this.client = client;
        }
        VirtualMachines.prototype.listByLocation = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        /**
         * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
         * to create similar VMs.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Capture Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesCaptureResponse>
         */
        VirtualMachines.prototype.capture = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.beginCapture(resourceGroupName$$1, vmName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to create or update a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Create Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesCreateOrUpdateResponse>
         */
        VirtualMachines.prototype.createOrUpdate = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, vmName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to update a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesUpdateResponse>
         */
        VirtualMachines.prototype.update = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, vmName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.deleteMethod = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.get = function (resourceGroupName$$1, vmName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        VirtualMachines.prototype.instanceView = function (resourceGroupName$$1, vmName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, instanceViewOperationSpec, callback);
        };
        /**
         * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
         * stop-deallocated before invoking this operation.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.convertToManagedDisks = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginConvertToManagedDisks(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Shuts down the virtual machine and releases the compute resources. You are not billed for the
         * compute resources that this virtual machine uses.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.deallocate = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginDeallocate(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachines.prototype.generalize = function (resourceGroupName$$1, vmName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, generalizeOperationSpec, callback);
        };
        VirtualMachines.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$5, callback);
        };
        VirtualMachines.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec, callback);
        };
        VirtualMachines.prototype.listAvailableSizes = function (resourceGroupName$$1, vmName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, listAvailableSizesOperationSpec$1, callback);
        };
        /**
         * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
         * the same provisioned resources. You are still charged for this virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.powerOff = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginPowerOff(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to restart a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.restart = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginRestart(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to start a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.start = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginStart(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to redeploy a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.redeploy = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginRedeploy(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to perform maintenance on a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachines.prototype.performMaintenance = function (resourceGroupName$$1, vmName$$1, options) {
            return this.beginPerformMaintenance(resourceGroupName$$1, vmName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Run command on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachinesRunCommandResponse>
         */
        VirtualMachines.prototype.runCommand = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.beginRunCommand(resourceGroupName$$1, vmName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used
         * to create similar VMs.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Capture Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginCapture = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                parameters: parameters,
                options: options
            }, beginCaptureOperationSpec, options);
        };
        /**
         * The operation to create or update a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Create Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * The operation to update a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginUpdate = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        /**
         * The operation to delete a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginDeleteMethod = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Converts virtual machine disks from blob-based to managed disks. Virtual machine must be
         * stop-deallocated before invoking this operation.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginConvertToManagedDisks = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginConvertToManagedDisksOperationSpec, options);
        };
        /**
         * Shuts down the virtual machine and releases the compute resources. You are not billed for the
         * compute resources that this virtual machine uses.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginDeallocate = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginDeallocateOperationSpec, options);
        };
        /**
         * The operation to power off (stop) a virtual machine. The virtual machine can be restarted with
         * the same provisioned resources. You are still charged for this virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginPowerOff = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginPowerOffOperationSpec, options);
        };
        /**
         * The operation to restart a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginRestart = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginRestartOperationSpec, options);
        };
        /**
         * The operation to start a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginStart = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * The operation to redeploy a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginRedeploy = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginRedeployOperationSpec, options);
        };
        /**
         * The operation to perform maintenance on a virtual machine.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginPerformMaintenance = function (resourceGroupName$$1, vmName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                options: options
            }, beginPerformMaintenanceOperationSpec, options);
        };
        /**
         * Run command on the VM.
         * @param resourceGroupName The name of the resource group.
         * @param vmName The name of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachines.prototype.beginRunCommand = function (resourceGroupName$$1, vmName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmName: vmName$$1,
                parameters: parameters,
                options: options
            }, beginRunCommandOperationSpec, options);
        };
        VirtualMachines.prototype.listByLocationNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByLocationNextOperationSpec, callback);
        };
        VirtualMachines.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        VirtualMachines.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec, callback);
        };
        return VirtualMachines;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/virtualMachines",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            expand1,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var instanceViewOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var generalizeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listAllOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listAvailableSizesOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineSizeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCaptureOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualMachineCaptureParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineCaptureResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualMachine, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachine
            },
            201: {
                bodyMapper: VirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualMachineUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachine
            },
            201: {
                bodyMapper: VirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginConvertToManagedDisksOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeallocateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginPowerOffOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginRedeployOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginPerformMaintenanceOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginRunCommandOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/runCommand",
        urlParameters: [
            resourceGroupName,
            vmName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RunCommandInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RunCommandResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByLocationNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listAllNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        VirtualMachineSizeListResult: VirtualMachineSizeListResult,
        VirtualMachineSize: VirtualMachineSize,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineSizes. */
    var VirtualMachineSizes = /** @class */ (function () {
        /**
         * Create a VirtualMachineSizes.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineSizes(client) {
            this.client = client;
        }
        VirtualMachineSizes.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$6, callback);
        };
        return VirtualMachineSizes;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/vmSizes",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineSizeListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        Image: Image,
        Resource: Resource,
        BaseResource: BaseResource,
        SubResource: SubResource,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        CloudError: CloudError,
        ImageUpdate: ImageUpdate,
        UpdateResource: UpdateResource,
        ImageListResult: ImageListResult,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineUpdate: VirtualMachineUpdate,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Images. */
    var Images = /** @class */ (function () {
        /**
         * Create a Images.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Images(client) {
            this.client = client;
        }
        /**
         * Create or update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Create Image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ImagesCreateOrUpdateResponse>
         */
        Images.prototype.createOrUpdate = function (resourceGroupName$$1, imageName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, imageName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Update Image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ImagesUpdateResponse>
         */
        Images.prototype.update = function (resourceGroupName$$1, imageName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, imageName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an Image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Images.prototype.deleteMethod = function (resourceGroupName$$1, imageName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, imageName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Images.prototype.get = function (resourceGroupName$$1, imageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                imageName: imageName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Images.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Images.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$7, callback);
        };
        /**
         * Create or update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Create Image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Images.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, imageName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                imageName: imageName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Update an image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param parameters Parameters supplied to the Update Image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Images.prototype.beginUpdate = function (resourceGroupName$$1, imageName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                imageName: imageName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        /**
         * Deletes an Image.
         * @param resourceGroupName The name of the resource group.
         * @param imageName The name of the image.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Images.prototype.beginDeleteMethod = function (resourceGroupName$$1, imageName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                imageName: imageName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        Images.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Images.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return Images;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/images",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Image, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Image
            },
            201: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ImageUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Image
            },
            201: {
                bodyMapper: Image
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}",
        urlParameters: [
            resourceGroupName,
            imageName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        Plan: Plan,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        SubResource: SubResource,
        VaultCertificate: VaultCertificate,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        ImageReference: ImageReference,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        DiffDiskSettings: DiffDiskSettings,
        VirtualHardDisk: VirtualHardDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        CloudError: CloudError,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        UpdateResource: UpdateResource,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetVMInstanceIDs: VirtualMachineScaleSetVMInstanceIDs,
        VirtualMachineScaleSetVMInstanceRequiredIDs: VirtualMachineScaleSetVMInstanceRequiredIDs,
        VirtualMachineScaleSetInstanceView: VirtualMachineScaleSetInstanceView,
        VirtualMachineScaleSetInstanceViewStatusesSummary: VirtualMachineScaleSetInstanceViewStatusesSummary,
        VirtualMachineStatusCodeCount: VirtualMachineStatusCodeCount,
        VirtualMachineScaleSetVMExtensionsSummary: VirtualMachineScaleSetVMExtensionsSummary,
        InstanceViewStatus: InstanceViewStatus,
        VirtualMachineScaleSetListResult: VirtualMachineScaleSetListResult,
        VirtualMachineScaleSetListWithLinkResult: VirtualMachineScaleSetListWithLinkResult,
        VirtualMachineScaleSetListSkusResult: VirtualMachineScaleSetListSkusResult,
        VirtualMachineScaleSetSku: VirtualMachineScaleSetSku,
        VirtualMachineScaleSetSkuCapacity: VirtualMachineScaleSetSkuCapacity,
        VirtualMachineScaleSetListOSUpgradeHistory: VirtualMachineScaleSetListOSUpgradeHistory,
        UpgradeOperationHistoricalStatusInfo: UpgradeOperationHistoricalStatusInfo,
        UpgradeOperationHistoricalStatusInfoProperties: UpgradeOperationHistoricalStatusInfoProperties,
        UpgradeOperationHistoryStatus: UpgradeOperationHistoryStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        RollbackStatusInfo: RollbackStatusInfo,
        RecoveryWalkResponse: RecoveryWalkResponse,
        AvailabilitySet: AvailabilitySet,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        DataDisk: DataDisk,
        OSProfile: OSProfile,
        NetworkProfile: NetworkProfile,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineUpdate: VirtualMachineUpdate,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSets. */
    var VirtualMachineScaleSets = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSets.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSets(client) {
            this.client = client;
        }
        /**
         * Create or update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetsCreateOrUpdateResponse>
         */
        VirtualMachineScaleSets.prototype.createOrUpdate = function (resourceGroupName$$1, vmScaleSetName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, vmScaleSetName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetsUpdateResponse>
         */
        VirtualMachineScaleSets.prototype.update = function (resourceGroupName$$1, vmScaleSetName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, vmScaleSetName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.deleteMethod = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSets.prototype.get = function (resourceGroupName$$1, vmScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
         * releases the compute resources. You are not billed for the compute resources that this virtual
         * machine scale set deallocates.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.deallocate = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginDeallocate(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.deleteInstances = function (resourceGroupName$$1, vmScaleSetName$$1, vmInstanceIDs, options) {
            return this.beginDeleteInstances(resourceGroupName$$1, vmScaleSetName$$1, vmInstanceIDs, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSets.prototype.getInstanceView = function (resourceGroupName$$1, vmScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, getInstanceViewOperationSpec, callback);
        };
        VirtualMachineScaleSets.prototype.list = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listOperationSpec$8, callback);
        };
        VirtualMachineScaleSets.prototype.listAll = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAllOperationSpec$1, callback);
        };
        VirtualMachineScaleSets.prototype.listSkus = function (resourceGroupName$$1, vmScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, listSkusOperationSpec$1, callback);
        };
        VirtualMachineScaleSets.prototype.getOSUpgradeHistory = function (resourceGroupName$$1, vmScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, getOSUpgradeHistoryOperationSpec, callback);
        };
        /**
         * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
         * attached and you are getting charged for the resources. Instead, use deallocate to release
         * resources and avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.powerOff = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginPowerOff(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restarts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.restart = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginRestart(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.start = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginStart(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Redeploy one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.redeploy = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginRedeploy(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
         * which are not eligible for perform maintenance will be failed. Please refer to best practices
         * for more details:
         * https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.performMaintenance = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginPerformMaintenance(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.updateInstances = function (resourceGroupName$$1, vmScaleSetName$$1, vmInstanceIDs, options) {
            return this.beginUpdateInstances(resourceGroupName$$1, vmScaleSetName$$1, vmInstanceIDs, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.reimage = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginReimage(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
         * operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSets.prototype.reimageAll = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginReimageAll(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSets.prototype.forceRecoveryServiceFabricPlatformUpdateDomainWalk = function (resourceGroupName$$1, vmScaleSetName$$1, platformUpdateDomain$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                platformUpdateDomain: platformUpdateDomain$$1,
                options: options
            }, forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec, callback);
        };
        /**
         * Create or update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, vmScaleSetName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Update a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set to create or update.
         * @param parameters The scale set object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginUpdate = function (resourceGroupName$$1, vmScaleSetName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        /**
         * Deletes a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginDeleteMethod = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        /**
         * Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and
         * releases the compute resources. You are not billed for the compute resources that this virtual
         * machine scale set deallocates.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginDeallocate = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginDeallocateOperationSpec$1, options);
        };
        /**
         * Deletes virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginDeleteInstances = function (resourceGroupName$$1, vmScaleSetName$$1, vmInstanceIDs, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                vmInstanceIDs: vmInstanceIDs,
                options: options
            }, beginDeleteInstancesOperationSpec, options);
        };
        /**
         * Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still
         * attached and you are getting charged for the resources. Instead, use deallocate to release
         * resources and avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginPowerOff = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginPowerOffOperationSpec$1, options);
        };
        /**
         * Restarts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginRestart = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginRestartOperationSpec$1, options);
        };
        /**
         * Starts one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginStart = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginStartOperationSpec$1, options);
        };
        /**
         * Redeploy one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginRedeploy = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginRedeployOperationSpec$1, options);
        };
        /**
         * Perform maintenance on one or more virtual machines in a VM scale set. Operation on instances
         * which are not eligible for perform maintenance will be failed. Please refer to best practices
         * for more details:
         * https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-maintenance-notifications
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginPerformMaintenance = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginPerformMaintenanceOperationSpec$1, options);
        };
        /**
         * Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param vmInstanceIDs A list of virtual machine instance IDs from the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginUpdateInstances = function (resourceGroupName$$1, vmScaleSetName$$1, vmInstanceIDs, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                vmInstanceIDs: vmInstanceIDs,
                options: options
            }, beginUpdateInstancesOperationSpec, options);
        };
        /**
         * Reimages (upgrade the operating system) one or more virtual machines in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginReimage = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginReimageOperationSpec, options);
        };
        /**
         * Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This
         * operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSets.prototype.beginReimageAll = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginReimageAllOperationSpec, options);
        };
        VirtualMachineScaleSets.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        VirtualMachineScaleSets.prototype.listAllNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listAllNextOperationSpec$1, callback);
        };
        VirtualMachineScaleSets.prototype.listSkusNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listSkusNextOperationSpec, callback);
        };
        VirtualMachineScaleSets.prototype.getOSUpgradeHistoryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, getOSUpgradeHistoryNextOperationSpec, callback);
        };
        return VirtualMachineScaleSets;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getInstanceViewOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/instanceView",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listAllOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachineScaleSets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListWithLinkResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listSkusOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/skus",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOSUpgradeHistoryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osUpgradeHistory",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListOSUpgradeHistory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var forceRecoveryServiceFabricPlatformUpdateDomainWalkOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/forceRecoveryServiceFabricPlatformUpdateDomainWalk",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            platformUpdateDomain
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RecoveryWalkResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualMachineScaleSet, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSet
            },
            201: {
                bodyMapper: VirtualMachineScaleSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualMachineScaleSetUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSet
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeallocateOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/deallocate",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteInstancesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/delete",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vmInstanceIDs",
            mapper: __assign({}, VirtualMachineScaleSetVMInstanceRequiredIDs, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginPowerOffOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/poweroff",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginRestartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/restart",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginStartOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/start",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginRedeployOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/redeploy",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginPerformMaintenanceOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/performMaintenance",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginUpdateInstancesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/manualupgrade",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "vmInstanceIDs",
            mapper: __assign({}, VirtualMachineScaleSetVMInstanceRequiredIDs, { required: true })
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginReimageOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimage",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginReimageAllOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/reimageall",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "vmInstanceIDs"
            ],
            mapper: VirtualMachineScaleSetVMInstanceIDs
        },
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listAllNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListWithLinkResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOSUpgradeHistoryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetListOSUpgradeHistory
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        BaseResource: BaseResource,
        CloudError: CloudError,
        VirtualMachineScaleSetExtensionListResult: VirtualMachineScaleSetExtensionListResult,
        SubResource: SubResource,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        Resource: Resource,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        VirtualMachineUpdate: VirtualMachineUpdate,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetExtensions. */
    var VirtualMachineScaleSetExtensions = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetExtensions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetExtensions(client) {
            this.client = client;
        }
        /**
         * The operation to create or update an extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param extensionParameters Parameters supplied to the Create VM scale set Extension operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetExtensionsCreateOrUpdateResponse>
         */
        VirtualMachineScaleSetExtensions.prototype.createOrUpdate = function (resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, extensionParameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, extensionParameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be deleted.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetExtensions.prototype.deleteMethod = function (resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetExtensions.prototype.get = function (resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                vmssExtensionName: vmssExtensionName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        VirtualMachineScaleSetExtensions.prototype.list = function (resourceGroupName$$1, vmScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, listOperationSpec$9, callback);
        };
        /**
         * The operation to create or update an extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param extensionParameters Parameters supplied to the Create VM scale set Extension operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetExtensions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, extensionParameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                vmssExtensionName: vmssExtensionName$$1,
                extensionParameters: extensionParameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * The operation to delete the extension.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be deleted.
         * @param vmssExtensionName The name of the VM scale set extension.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetExtensions.prototype.beginDeleteMethod = function (resourceGroupName$$1, vmScaleSetName$$1, vmssExtensionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                vmssExtensionName: vmssExtensionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        VirtualMachineScaleSetExtensions.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return VirtualMachineScaleSetExtensions;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtensionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "extensionParameters",
            mapper: __assign({}, VirtualMachineScaleSetExtension, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            201: {
                bodyMapper: VirtualMachineScaleSetExtension
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            vmssExtensionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetExtensionListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        Resource: Resource,
        BaseResource: BaseResource,
        RollingUpgradePolicy: RollingUpgradePolicy,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetRollingUpgrades. */
    var VirtualMachineScaleSetRollingUpgrades = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetRollingUpgrades.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetRollingUpgrades(client) {
            this.client = client;
        }
        /**
         * Cancels the current virtual machine scale set rolling upgrade.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.cancel = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginCancel(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
         * Platform Image OS version. Instances which are already running the latest available OS version
         * are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.startOSUpgrade = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginStartOSUpgrade(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to
         * the latest available extension version. Instances which are already running the latest extension
         * versions are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.startExtensionUpgrade = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.beginStartExtensionUpgrade(resourceGroupName$$1, vmScaleSetName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetRollingUpgrades.prototype.getLatest = function (resourceGroupName$$1, vmScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, getLatestOperationSpec, callback);
        };
        /**
         * Cancels the current virtual machine scale set rolling upgrade.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.beginCancel = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginCancelOperationSpec, options);
        };
        /**
         * Starts a rolling upgrade to move all virtual machine scale set instances to the latest available
         * Platform Image OS version. Instances which are already running the latest available OS version
         * are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.beginStartOSUpgrade = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginStartOSUpgradeOperationSpec, options);
        };
        /**
         * Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to
         * the latest available extension version. Instances which are already running the latest extension
         * versions are not affected.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetRollingUpgrades.prototype.beginStartExtensionUpgrade = function (resourceGroupName$$1, vmScaleSetName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                options: options
            }, beginStartExtensionUpgradeOperationSpec, options);
        };
        return VirtualMachineScaleSetRollingUpgrades;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var getLatestOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/rollingUpgrades/latest",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RollingUpgradeStatusInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginCancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/rollingUpgrades/cancel",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginStartOSUpgradeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osRollingUpgrade",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginStartExtensionUpgradeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensionRollingUpgrade",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        Resource: Resource,
        BaseResource: BaseResource,
        Sku: Sku,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        InstanceViewStatus: InstanceViewStatus,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        SubResource: SubResource,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        ImageReference: ImageReference,
        OSDisk: OSDisk,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        ManagedDiskParameters: ManagedDiskParameters,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        NetworkInterfaceReference: NetworkInterfaceReference,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        Plan: Plan,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineScaleSetVMListResult: VirtualMachineScaleSetVMListResult,
        RunCommandInput: RunCommandInput,
        RunCommandInputParameter: RunCommandInputParameter,
        RunCommandResult: RunCommandResult,
        AvailabilitySet: AvailabilitySet,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        VirtualMachine: VirtualMachine,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineScaleSetVMs. */
    var VirtualMachineScaleSetVMs = /** @class */ (function () {
        /**
         * Create a VirtualMachineScaleSetVMs.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineScaleSetVMs(client) {
            this.client = client;
        }
        /**
         * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.reimage = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginReimage(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance.
         * This operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.reimageAll = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginReimageAll(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
         * releases the compute resources it uses. You are not billed for the compute resources of this
         * virtual machine once it is deallocated.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.deallocate = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginDeallocate(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a virtual machine of a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMsUpdateResponse>
         */
        VirtualMachineScaleSetVMs.prototype.update = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a virtual machine from a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.deleteMethod = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        VirtualMachineScaleSetVMs.prototype.get = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        VirtualMachineScaleSetVMs.prototype.getInstanceView = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, getInstanceViewOperationSpec$1, callback);
        };
        VirtualMachineScaleSetVMs.prototype.list = function (resourceGroupName$$1, virtualMachineScaleSetName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                virtualMachineScaleSetName: virtualMachineScaleSetName$$1,
                options: options
            }, listOperationSpec$a, callback);
        };
        /**
         * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and
         * you are getting charged for the resources. Instead, use deallocate to release resources and
         * avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.powerOff = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginPowerOff(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restarts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.restart = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginRestart(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Starts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.start = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginStart(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Redeploys a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.redeploy = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginRedeploy(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Performs maintenance on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        VirtualMachineScaleSetVMs.prototype.performMaintenance = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.beginPerformMaintenance(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Run command on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.VirtualMachineScaleSetVMsRunCommandResponse>
         */
        VirtualMachineScaleSetVMs.prototype.runCommand = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, parameters, options) {
            return this.beginRunCommand(resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginReimage = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginReimageOperationSpec$1, options);
        };
        /**
         * Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance.
         * This operation is only supported for managed disks.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginReimageAll = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginReimageAllOperationSpec$1, options);
        };
        /**
         * Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and
         * releases the compute resources it uses. You are not billed for the compute resources of this
         * virtual machine once it is deallocated.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginDeallocate = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginDeallocateOperationSpec$2, options);
        };
        /**
         * Updates a virtual machine of a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set where the extension should be create or
         * updated.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Update Virtual Machine Scale Sets VM operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginUpdate = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        /**
         * Deletes a virtual machine from a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginDeleteMethod = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and
         * you are getting charged for the resources. Instead, use deallocate to release resources and
         * avoid charges.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginPowerOff = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginPowerOffOperationSpec$2, options);
        };
        /**
         * Restarts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginRestart = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginRestartOperationSpec$2, options);
        };
        /**
         * Starts a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginStart = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginStartOperationSpec$2, options);
        };
        /**
         * Redeploys a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginRedeploy = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginRedeployOperationSpec$2, options);
        };
        /**
         * Performs maintenance on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginPerformMaintenance = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                options: options
            }, beginPerformMaintenanceOperationSpec$2, options);
        };
        /**
         * Run command on a virtual machine in a VM scale set.
         * @param resourceGroupName The name of the resource group.
         * @param vmScaleSetName The name of the VM scale set.
         * @param instanceId The instance ID of the virtual machine.
         * @param parameters Parameters supplied to the Run command operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        VirtualMachineScaleSetVMs.prototype.beginRunCommand = function (resourceGroupName$$1, vmScaleSetName$$1, instanceId$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                vmScaleSetName: vmScaleSetName$$1,
                instanceId: instanceId$$1,
                parameters: parameters,
                options: options
            }, beginRunCommandOperationSpec$1, options);
        };
        VirtualMachineScaleSetVMs.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return VirtualMachineScaleSetVMs;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVM
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getInstanceViewOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/instanceView",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMInstanceView
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines",
        urlParameters: [
            resourceGroupName,
            virtualMachineScaleSetName,
            subscriptionId
        ],
        queryParameters: [
            filter,
            select,
            expand0,
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginReimageOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginReimageAllOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimageall",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginDeallocateOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/deallocate",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, VirtualMachineScaleSetVM, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVM
            },
            202: {
                bodyMapper: VirtualMachineScaleSetVM
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginPowerOffOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/poweroff",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginRestartOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/restart",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginStartOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/start",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginRedeployOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/redeploy",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginPerformMaintenanceOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/performMaintenance",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var beginRunCommandOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand",
        urlParameters: [
            resourceGroupName,
            vmScaleSetName,
            instanceId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RunCommandInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: RunCommandResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualMachineScaleSetVMListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        RequestRateByIntervalInput: RequestRateByIntervalInput,
        LogAnalyticsInputBase: LogAnalyticsInputBase,
        LogAnalyticsOperationResult: LogAnalyticsOperationResult,
        LogAnalyticsOutput: LogAnalyticsOutput,
        CloudError: CloudError,
        ThrottledRequestsInput: ThrottledRequestsInput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LogAnalytics. */
    var LogAnalytics = /** @class */ (function () {
        /**
         * Create a LogAnalytics.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function LogAnalytics(client) {
            this.client = client;
        }
        /**
         * Export logs that show Api requests made by this subscription in the given time window to show
         * throttling activities.
         * @param parameters Parameters supplied to the LogAnalytics getRequestRateByInterval Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<Models.LogAnalyticsExportRequestRateByIntervalResponse>
         */
        LogAnalytics.prototype.exportRequestRateByInterval = function (parameters, location, options) {
            return this.beginExportRequestRateByInterval(parameters, location, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Export logs that show total throttled Api requests for this subscription in the given time
         * window.
         * @param parameters Parameters supplied to the LogAnalytics getThrottledRequests Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<Models.LogAnalyticsExportThrottledRequestsResponse>
         */
        LogAnalytics.prototype.exportThrottledRequests = function (parameters, location, options) {
            return this.beginExportThrottledRequests(parameters, location, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Export logs that show Api requests made by this subscription in the given time window to show
         * throttling activities.
         * @param parameters Parameters supplied to the LogAnalytics getRequestRateByInterval Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LogAnalytics.prototype.beginExportRequestRateByInterval = function (parameters, location, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                location: location,
                options: options
            }, beginExportRequestRateByIntervalOperationSpec, options);
        };
        /**
         * Export logs that show total throttled Api requests for this subscription in the given time
         * window.
         * @param parameters Parameters supplied to the LogAnalytics getThrottledRequests Api.
         * @param location The location upon which virtual-machine-sizes is queried.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LogAnalytics.prototype.beginExportThrottledRequests = function (parameters, location, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                location: location,
                options: options
            }, beginExportThrottledRequestsOperationSpec, options);
        };
        return LogAnalytics;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var beginExportRequestRateByIntervalOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getRequestRateByInterval",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, RequestRateByIntervalInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogAnalyticsOperationResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var beginExportThrottledRequestsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getThrottledRequests",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ThrottledRequestsInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LogAnalyticsOperationResult
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        RunCommandListResult: RunCommandListResult,
        RunCommandDocumentBase: RunCommandDocumentBase,
        CloudError: CloudError,
        RunCommandDocument: RunCommandDocument,
        RunCommandParameterDefinition: RunCommandParameterDefinition
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualMachineRunCommands. */
    var VirtualMachineRunCommands = /** @class */ (function () {
        /**
         * Create a VirtualMachineRunCommands.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function VirtualMachineRunCommands(client) {
            this.client = client;
        }
        VirtualMachineRunCommands.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$b, callback);
        };
        VirtualMachineRunCommands.prototype.get = function (location, commandId$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                commandId: commandId$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        VirtualMachineRunCommands.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return VirtualMachineRunCommands;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands",
        urlParameters: [
            location1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunCommandListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands/{commandId}",
        urlParameters: [
            location1,
            commandId,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunCommandDocument
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RunCommandListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        ResourceSkusResult: ResourceSkusResult,
        ResourceSku: ResourceSku,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuLocationInfo: ResourceSkuLocationInfo,
        ResourceSkuCosts: ResourceSkuCosts,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceSkus. */
    var ResourceSkus = /** @class */ (function () {
        /**
         * Create a ResourceSkus.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function ResourceSkus(client) {
            this.client = client;
        }
        ResourceSkus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$c, callback);
        };
        ResourceSkus.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$8, callback);
        };
        return ResourceSkus;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };
    var listNextOperationSpec$8 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        Disk: Disk,
        Resource: Resource,
        BaseResource: BaseResource,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        CloudError: CloudError,
        DiskUpdate: DiskUpdate,
        DiskList: DiskList,
        GrantAccessData: GrantAccessData,
        AccessUri: AccessUri,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        UpdateResource: UpdateResource,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Disks. */
    var Disks = /** @class */ (function () {
        /**
         * Create a Disks.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Disks(client) {
            this.client = client;
        }
        /**
         * Creates or updates a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksCreateOrUpdateResponse>
         */
        Disks.prototype.createOrUpdate = function (resourceGroupName$$1, diskName$$1, disk, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, diskName$$1, disk, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates (patches) a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Patch disk operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksUpdateResponse>
         */
        Disks.prototype.update = function (resourceGroupName$$1, diskName$$1, disk, options) {
            return this.beginUpdate(resourceGroupName$$1, diskName$$1, disk, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Disks.prototype.get = function (resourceGroupName$$1, diskName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                diskName: diskName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * Deletes a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.deleteMethod = function (resourceGroupName$$1, diskName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, diskName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Disks.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        Disks.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$d, callback);
        };
        /**
         * Grants access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.DisksGrantAccessResponse>
         */
        Disks.prototype.grantAccess = function (resourceGroupName$$1, diskName$$1, grantAccessData, options) {
            return this.beginGrantAccess(resourceGroupName$$1, diskName$$1, grantAccessData, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revokes access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Disks.prototype.revokeAccess = function (resourceGroupName$$1, diskName$$1, options) {
            return this.beginRevokeAccess(resourceGroupName$$1, diskName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, diskName$$1, disk, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                diskName: diskName$$1,
                disk: disk,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Updates (patches) a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param disk Disk object supplied in the body of the Patch disk operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginUpdate = function (resourceGroupName$$1, diskName$$1, disk, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                diskName: diskName$$1,
                disk: disk,
                options: options
            }, beginUpdateOperationSpec$5, options);
        };
        /**
         * Deletes a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginDeleteMethod = function (resourceGroupName$$1, diskName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                diskName: diskName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        /**
         * Grants access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get disk access operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginGrantAccess = function (resourceGroupName$$1, diskName$$1, grantAccessData, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                diskName: diskName$$1,
                grantAccessData: grantAccessData,
                options: options
            }, beginGrantAccessOperationSpec, options);
        };
        /**
         * Revokes access to a disk.
         * @param resourceGroupName The name of the resource group.
         * @param diskName The name of the managed disk that is being created. The name can't be changed
         * after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * maximum name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Disks.prototype.beginRevokeAccess = function (resourceGroupName$$1, diskName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                diskName: diskName$$1,
                options: options
            }, beginRevokeAccessOperationSpec, options);
        };
        Disks.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        Disks.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$9, callback);
        };
        return Disks;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/disks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "disk",
            mapper: __assign({}, Disk, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Disk
            },
            202: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginUpdateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "disk",
            mapper: __assign({}, DiskUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Disk
            },
            202: {
                bodyMapper: Disk
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginGrantAccessOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/beginGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "grantAccessData",
            mapper: __assign({}, GrantAccessData, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessUri
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var beginRevokeAccessOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/endGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            diskName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };
    var listNextOperationSpec$9 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DiskList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        Snapshot: Snapshot,
        Resource: Resource,
        BaseResource: BaseResource,
        SnapshotSku: SnapshotSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        CloudError: CloudError,
        SnapshotUpdate: SnapshotUpdate,
        SnapshotList: SnapshotList,
        GrantAccessData: GrantAccessData,
        AccessUri: AccessUri,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Snapshots. */
    var Snapshots = /** @class */ (function () {
        /**
         * Create a Snapshots.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Snapshots(client) {
            this.client = client;
        }
        /**
         * Creates or updates a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SnapshotsCreateOrUpdateResponse>
         */
        Snapshots.prototype.createOrUpdate = function (resourceGroupName$$1, snapshotName$$1, snapshot, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, snapshotName$$1, snapshot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates (patches) a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Patch snapshot operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SnapshotsUpdateResponse>
         */
        Snapshots.prototype.update = function (resourceGroupName$$1, snapshotName$$1, snapshot, options) {
            return this.beginUpdate(resourceGroupName$$1, snapshotName$$1, snapshot, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Snapshots.prototype.get = function (resourceGroupName$$1, snapshotName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                snapshotName: snapshotName$$1,
                options: options
            }, getOperationSpec$b, callback);
        };
        /**
         * Deletes a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Snapshots.prototype.deleteMethod = function (resourceGroupName$$1, snapshotName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, snapshotName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Snapshots.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        Snapshots.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$e, callback);
        };
        /**
         * Grants access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get snapshot access
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.SnapshotsGrantAccessResponse>
         */
        Snapshots.prototype.grantAccess = function (resourceGroupName$$1, snapshotName$$1, grantAccessData, options) {
            return this.beginGrantAccess(resourceGroupName$$1, snapshotName$$1, grantAccessData, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Revokes access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Snapshots.prototype.revokeAccess = function (resourceGroupName$$1, snapshotName$$1, options) {
            return this.beginRevokeAccess(resourceGroupName$$1, snapshotName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Put disk operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, snapshotName$$1, snapshot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                snapshotName: snapshotName$$1,
                snapshot: snapshot,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Updates (patches) a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param snapshot Snapshot object supplied in the body of the Patch snapshot operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginUpdate = function (resourceGroupName$$1, snapshotName$$1, snapshot, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                snapshotName: snapshotName$$1,
                snapshot: snapshot,
                options: options
            }, beginUpdateOperationSpec$6, options);
        };
        /**
         * Deletes a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginDeleteMethod = function (resourceGroupName$$1, snapshotName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                snapshotName: snapshotName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        /**
         * Grants access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param grantAccessData Access data object supplied in the body of the get snapshot access
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginGrantAccess = function (resourceGroupName$$1, snapshotName$$1, grantAccessData, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                snapshotName: snapshotName$$1,
                grantAccessData: grantAccessData,
                options: options
            }, beginGrantAccessOperationSpec$1, options);
        };
        /**
         * Revokes access to a snapshot.
         * @param resourceGroupName The name of the resource group.
         * @param snapshotName The name of the snapshot that is being created. The name can't be changed
         * after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The
         * max name length is 80 characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Snapshots.prototype.beginRevokeAccess = function (resourceGroupName$$1, snapshotName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                snapshotName: snapshotName$$1,
                options: options
            }, beginRevokeAccessOperationSpec$1, options);
        };
        Snapshots.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        Snapshots.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$a, callback);
        };
        return Snapshots;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/snapshots",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "snapshot",
            mapper: __assign({}, Snapshot, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            202: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginUpdateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "snapshot",
            mapper: __assign({}, SnapshotUpdate, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Snapshot
            },
            202: {
                bodyMapper: Snapshot
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginGrantAccessOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/beginGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "grantAccessData",
            mapper: __assign({}, GrantAccessData, { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccessUri
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var beginRevokeAccessOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/snapshots/{snapshotName}/endGetAccess",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            snapshotName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listNextOperationSpec$a = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SnapshotList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        Gallery: Gallery,
        Resource: Resource,
        BaseResource: BaseResource,
        GalleryIdentifier: GalleryIdentifier,
        CloudError: CloudError,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        GalleryList: GalleryList,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Galleries. */
    var Galleries = /** @class */ (function () {
        /**
         * Create a Galleries.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function Galleries(client) {
            this.client = client;
        }
        /**
         * Create or update a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets
         * and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
         * @param gallery Parameters supplied to the create or update Shared Image Gallery operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleriesCreateOrUpdateResponse>
         */
        Galleries.prototype.createOrUpdate = function (resourceGroupName$$1, galleryName$$1, gallery, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, galleryName$$1, gallery, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Galleries.prototype.get = function (resourceGroupName$$1, galleryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                options: options
            }, getOperationSpec$c, callback);
        };
        /**
         * Delete a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Galleries.prototype.deleteMethod = function (resourceGroupName$$1, galleryName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, galleryName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Galleries.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        Galleries.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$f, callback);
        };
        /**
         * Create or update a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery. The allowed characters are alphabets
         * and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.
         * @param gallery Parameters supplied to the create or update Shared Image Gallery operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Galleries.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, galleryName$$1, gallery, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                gallery: gallery,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * Delete a Shared Image Gallery.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Galleries.prototype.beginDeleteMethod = function (resourceGroupName$$1, galleryName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$8, options);
        };
        Galleries.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        Galleries.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$b, callback);
        };
        return Galleries;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Gallery
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Compute/galleries",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "gallery",
            mapper: __assign({}, Gallery, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Gallery
            },
            201: {
                bodyMapper: Gallery
            },
            202: {
                bodyMapper: Gallery
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var beginDeleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };
    var listNextOperationSpec$b = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        GalleryImage: GalleryImage,
        Resource: Resource,
        BaseResource: BaseResource,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        CloudError: CloudError,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        GalleryImageList: GalleryImageList,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryImages. */
    var GalleryImages = /** @class */ (function () {
        /**
         * Create a GalleryImages.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GalleryImages(client) {
            this.client = client;
        }
        /**
         * Create or update a gallery Image Definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * created.
         * @param galleryImageName The name of the gallery Image Definition to be created or updated. The
         * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
         * middle. The maximum length is 80 characters.
         * @param galleryImage Parameters supplied to the create or update gallery image operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryImagesCreateOrUpdateResponse>
         */
        GalleryImages.prototype.createOrUpdate = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImage, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImage, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImages.prototype.get = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                options: options
            }, getOperationSpec$d, callback);
        };
        /**
         * Delete a gallery image.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * deleted.
         * @param galleryImageName The name of the gallery Image Definition to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GalleryImages.prototype.deleteMethod = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, galleryName$$1, galleryImageName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImages.prototype.listByGallery = function (resourceGroupName$$1, galleryName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                options: options
            }, listByGalleryOperationSpec, callback);
        };
        /**
         * Create or update a gallery Image Definition.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * created.
         * @param galleryImageName The name of the gallery Image Definition to be created or updated. The
         * allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the
         * middle. The maximum length is 80 characters.
         * @param galleryImage Parameters supplied to the create or update gallery image operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImages.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImage, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                galleryImage: galleryImage,
                options: options
            }, beginCreateOrUpdateOperationSpec$8, options);
        };
        /**
         * Delete a gallery image.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition is to be
         * deleted.
         * @param galleryImageName The name of the gallery Image Definition to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImages.prototype.beginDeleteMethod = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$9, options);
        };
        GalleryImages.prototype.listByGalleryNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByGalleryNextOperationSpec, callback);
        };
        return GalleryImages;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listByGalleryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginCreateOrUpdateOperationSpec$8 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryImage",
            mapper: __assign({}, GalleryImage, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryImage
            },
            201: {
                bodyMapper: GalleryImage
            },
            202: {
                bodyMapper: GalleryImage
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var beginDeleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };
    var listByGalleryNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$k = /*#__PURE__*/Object.freeze({
        GalleryImageVersion: GalleryImageVersion,
        Resource: Resource,
        BaseResource: BaseResource,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        CloudError: CloudError,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        GalleryImageVersionList: GalleryImageVersionList,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        ContainerService: ContainerService,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a GalleryImageVersions. */
    var GalleryImageVersions = /** @class */ (function () {
        /**
         * Create a GalleryImageVersions.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function GalleryImageVersions(client) {
            this.client = client;
        }
        /**
         * Create or update a gallery Image Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery Image Definition in which the Image Version is
         * to be created.
         * @param galleryImageVersionName The name of the gallery Image Version to be created. Needs to
         * follow semantic version name pattern: The allowed characters are digit and period. Digits must
         * be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryImageVersion Parameters supplied to the create or update gallery Image Version
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.GalleryImageVersionsCreateOrUpdateResponse>
         */
        GalleryImageVersions.prototype.createOrUpdate = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, galleryImageVersion, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, galleryImageVersion, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImageVersions.prototype.get = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                galleryImageVersionName: galleryImageVersionName$$1,
                options: options
            }, getOperationSpec$e, callback);
        };
        /**
         * Delete a gallery Image Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery Image Definition in which the Image Version
         * resides.
         * @param galleryImageVersionName The name of the gallery Image Version to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        GalleryImageVersions.prototype.deleteMethod = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        GalleryImageVersions.prototype.listByGalleryImage = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                options: options
            }, listByGalleryImageOperationSpec, callback);
        };
        /**
         * Create or update a gallery Image Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery Image Definition in which the Image Version is
         * to be created.
         * @param galleryImageVersionName The name of the gallery Image Version to be created. Needs to
         * follow semantic version name pattern: The allowed characters are digit and period. Digits must
         * be within the range of a 32-bit integer. Format: <MajorVersion>.<MinorVersion>.<Patch>
         * @param galleryImageVersion Parameters supplied to the create or update gallery Image Version
         * operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImageVersions.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, galleryImageVersion, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                galleryImageVersionName: galleryImageVersionName$$1,
                galleryImageVersion: galleryImageVersion,
                options: options
            }, beginCreateOrUpdateOperationSpec$9, options);
        };
        /**
         * Delete a gallery Image Version.
         * @param resourceGroupName The name of the resource group.
         * @param galleryName The name of the Shared Image Gallery in which the Image Definition resides.
         * @param galleryImageName The name of the gallery Image Definition in which the Image Version
         * resides.
         * @param galleryImageVersionName The name of the gallery Image Version to be deleted.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        GalleryImageVersions.prototype.beginDeleteMethod = function (resourceGroupName$$1, galleryName$$1, galleryImageName$$1, galleryImageVersionName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                galleryName: galleryName$$1,
                galleryImageName: galleryImageName$$1,
                galleryImageVersionName: galleryImageVersionName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$a, options);
        };
        GalleryImageVersions.prototype.listByGalleryImageNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByGalleryImageNextOperationSpec, callback);
        };
        return GalleryImageVersions;
    }());
    // Operation Specifications
    var serializer$k = new msRest.Serializer(Mappers$k);
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            expand0,
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var listByGalleryImageOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginCreateOrUpdateOperationSpec$9 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "galleryImageVersion",
            mapper: __assign({}, GalleryImageVersion, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GalleryImageVersion
            },
            201: {
                bodyMapper: GalleryImageVersion
            },
            202: {
                bodyMapper: GalleryImageVersion
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var beginDeleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            galleryName,
            galleryImageName,
            galleryImageVersionName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };
    var listByGalleryImageNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GalleryImageVersionList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$k
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$l = /*#__PURE__*/Object.freeze({
        ContainerServiceListResult: ContainerServiceListResult,
        ContainerService: ContainerService,
        Resource: Resource,
        BaseResource: BaseResource,
        ContainerServiceOrchestratorProfile: ContainerServiceOrchestratorProfile,
        ContainerServiceCustomProfile: ContainerServiceCustomProfile,
        ContainerServiceServicePrincipalProfile: ContainerServiceServicePrincipalProfile,
        ContainerServiceMasterProfile: ContainerServiceMasterProfile,
        ContainerServiceAgentPoolProfile: ContainerServiceAgentPoolProfile,
        ContainerServiceWindowsProfile: ContainerServiceWindowsProfile,
        ContainerServiceLinuxProfile: ContainerServiceLinuxProfile,
        ContainerServiceSshConfiguration: ContainerServiceSshConfiguration,
        ContainerServiceSshPublicKey: ContainerServiceSshPublicKey,
        ContainerServiceDiagnosticsProfile: ContainerServiceDiagnosticsProfile,
        ContainerServiceVMDiagnostics: ContainerServiceVMDiagnostics,
        CloudError: CloudError,
        SubResource: SubResource,
        AvailabilitySet: AvailabilitySet,
        InstanceViewStatus: InstanceViewStatus,
        Sku: Sku,
        VirtualMachineExtensionImage: VirtualMachineExtensionImage,
        VirtualMachineImageResource: VirtualMachineImageResource,
        VirtualMachineExtension: VirtualMachineExtension,
        VirtualMachineExtensionInstanceView: VirtualMachineExtensionInstanceView,
        VirtualMachineImage: VirtualMachineImage,
        PurchasePlan: PurchasePlan,
        OSDiskImage: OSDiskImage,
        DataDiskImage: DataDiskImage,
        AutomaticOSUpgradeProperties: AutomaticOSUpgradeProperties,
        VirtualMachineCaptureResult: VirtualMachineCaptureResult,
        ImageReference: ImageReference,
        ManagedDiskParameters: ManagedDiskParameters,
        NetworkInterfaceReference: NetworkInterfaceReference,
        VirtualMachine: VirtualMachine,
        Plan: Plan,
        HardwareProfile: HardwareProfile,
        StorageProfile: StorageProfile,
        OSDisk: OSDisk,
        DiskEncryptionSettings: DiskEncryptionSettings,
        KeyVaultSecretReference: KeyVaultSecretReference,
        KeyVaultKeyReference: KeyVaultKeyReference,
        VirtualHardDisk: VirtualHardDisk,
        DiffDiskSettings: DiffDiskSettings,
        DataDisk: DataDisk,
        AdditionalCapabilities: AdditionalCapabilities,
        OSProfile: OSProfile,
        WindowsConfiguration: WindowsConfiguration,
        AdditionalUnattendContent: AdditionalUnattendContent,
        WinRMConfiguration: WinRMConfiguration,
        WinRMListener: WinRMListener,
        LinuxConfiguration: LinuxConfiguration,
        SshConfiguration: SshConfiguration,
        SshPublicKey: SshPublicKey,
        VaultSecretGroup: VaultSecretGroup,
        VaultCertificate: VaultCertificate,
        NetworkProfile: NetworkProfile,
        DiagnosticsProfile: DiagnosticsProfile,
        BootDiagnostics: BootDiagnostics,
        VirtualMachineInstanceView: VirtualMachineInstanceView,
        VirtualMachineAgentInstanceView: VirtualMachineAgentInstanceView,
        VirtualMachineExtensionHandlerInstanceView: VirtualMachineExtensionHandlerInstanceView,
        MaintenanceRedeployStatus: MaintenanceRedeployStatus,
        DiskInstanceView: DiskInstanceView,
        BootDiagnosticsInstanceView: BootDiagnosticsInstanceView,
        VirtualMachineIdentity: VirtualMachineIdentity,
        VirtualMachineIdentityUserAssignedIdentitiesValue: VirtualMachineIdentityUserAssignedIdentitiesValue,
        Image: Image,
        ImageStorageProfile: ImageStorageProfile,
        ImageOSDisk: ImageOSDisk,
        ImageDataDisk: ImageDataDisk,
        VirtualMachineScaleSetIPConfiguration: VirtualMachineScaleSetIPConfiguration,
        ApiEntityReference: ApiEntityReference,
        VirtualMachineScaleSetPublicIPAddressConfiguration: VirtualMachineScaleSetPublicIPAddressConfiguration,
        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings: VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings,
        VirtualMachineScaleSetIpTag: VirtualMachineScaleSetIpTag,
        VirtualMachineScaleSetUpdateIPConfiguration: VirtualMachineScaleSetUpdateIPConfiguration,
        VirtualMachineScaleSetUpdatePublicIPAddressConfiguration: VirtualMachineScaleSetUpdatePublicIPAddressConfiguration,
        VirtualMachineScaleSetNetworkConfiguration: VirtualMachineScaleSetNetworkConfiguration,
        VirtualMachineScaleSetNetworkConfigurationDnsSettings: VirtualMachineScaleSetNetworkConfigurationDnsSettings,
        VirtualMachineScaleSetUpdateNetworkConfiguration: VirtualMachineScaleSetUpdateNetworkConfiguration,
        VirtualMachineScaleSet: VirtualMachineScaleSet,
        UpgradePolicy: UpgradePolicy,
        RollingUpgradePolicy: RollingUpgradePolicy,
        AutomaticOSUpgradePolicy: AutomaticOSUpgradePolicy,
        VirtualMachineScaleSetVMProfile: VirtualMachineScaleSetVMProfile,
        VirtualMachineScaleSetOSProfile: VirtualMachineScaleSetOSProfile,
        VirtualMachineScaleSetStorageProfile: VirtualMachineScaleSetStorageProfile,
        VirtualMachineScaleSetOSDisk: VirtualMachineScaleSetOSDisk,
        VirtualMachineScaleSetManagedDiskParameters: VirtualMachineScaleSetManagedDiskParameters,
        VirtualMachineScaleSetDataDisk: VirtualMachineScaleSetDataDisk,
        VirtualMachineScaleSetNetworkProfile: VirtualMachineScaleSetNetworkProfile,
        VirtualMachineScaleSetExtensionProfile: VirtualMachineScaleSetExtensionProfile,
        VirtualMachineScaleSetExtension: VirtualMachineScaleSetExtension,
        SubResourceReadOnly: SubResourceReadOnly,
        VirtualMachineScaleSetIdentity: VirtualMachineScaleSetIdentity,
        VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue: VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue,
        VirtualMachineScaleSetVM: VirtualMachineScaleSetVM,
        VirtualMachineScaleSetVMInstanceView: VirtualMachineScaleSetVMInstanceView,
        VirtualMachineHealthStatus: VirtualMachineHealthStatus,
        RollingUpgradeStatusInfo: RollingUpgradeStatusInfo,
        RollingUpgradeRunningStatus: RollingUpgradeRunningStatus,
        RollingUpgradeProgressInfo: RollingUpgradeProgressInfo,
        ApiError: ApiError,
        ApiErrorBase: ApiErrorBase,
        InnerError: InnerError,
        UpdateResource: UpdateResource,
        Disk: Disk,
        DiskSku: DiskSku,
        CreationData: CreationData,
        ImageDiskReference: ImageDiskReference,
        EncryptionSettings: EncryptionSettings,
        KeyVaultAndSecretReference: KeyVaultAndSecretReference,
        SourceVault: SourceVault,
        KeyVaultAndKeyReference: KeyVaultAndKeyReference,
        Snapshot: Snapshot,
        SnapshotSku: SnapshotSku,
        Gallery: Gallery,
        GalleryIdentifier: GalleryIdentifier,
        GalleryImage: GalleryImage,
        GalleryImageIdentifier: GalleryImageIdentifier,
        RecommendedMachineConfiguration: RecommendedMachineConfiguration,
        ResourceRange: ResourceRange,
        Disallowed: Disallowed,
        ImagePurchasePlan: ImagePurchasePlan,
        GalleryImageVersion: GalleryImageVersion,
        GalleryImageVersionPublishingProfile: GalleryImageVersionPublishingProfile,
        GalleryArtifactPublishingProfileBase: GalleryArtifactPublishingProfileBase,
        TargetRegion: TargetRegion,
        GalleryArtifactSource: GalleryArtifactSource,
        ManagedArtifact: ManagedArtifact,
        GalleryImageVersionStorageProfile: GalleryImageVersionStorageProfile,
        GalleryOSDiskImage: GalleryOSDiskImage,
        GalleryDiskImage: GalleryDiskImage,
        GalleryDataDiskImage: GalleryDataDiskImage,
        ReplicationStatus: ReplicationStatus,
        RegionalReplicationStatus: RegionalReplicationStatus,
        AvailabilitySetUpdate: AvailabilitySetUpdate,
        VirtualMachineExtensionUpdate: VirtualMachineExtensionUpdate,
        VirtualMachineUpdate: VirtualMachineUpdate,
        ImageUpdate: ImageUpdate,
        VirtualMachineScaleSetUpdate: VirtualMachineScaleSetUpdate,
        VirtualMachineScaleSetUpdateVMProfile: VirtualMachineScaleSetUpdateVMProfile,
        VirtualMachineScaleSetUpdateOSProfile: VirtualMachineScaleSetUpdateOSProfile,
        VirtualMachineScaleSetUpdateStorageProfile: VirtualMachineScaleSetUpdateStorageProfile,
        VirtualMachineScaleSetUpdateOSDisk: VirtualMachineScaleSetUpdateOSDisk,
        VirtualMachineScaleSetUpdateNetworkProfile: VirtualMachineScaleSetUpdateNetworkProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ContainerServices. */
    var ContainerServices = /** @class */ (function () {
        /**
         * Create a ContainerServices.
         * @param {ComputeManagementClientContext} client Reference to the service client.
         */
        function ContainerServices(client) {
            this.client = client;
        }
        ContainerServices.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$g, callback);
        };
        /**
         * Creates or updates a container service with the specified configuration of orchestrator,
         * masters, and agents.
         * @summary Creates or updates a container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param parameters Parameters supplied to the Create or Update a Container Service operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.ContainerServicesCreateOrUpdateResponse>
         */
        ContainerServices.prototype.createOrUpdate = function (resourceGroupName$$1, containerServiceName$$1, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, containerServiceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerServices.prototype.get = function (resourceGroupName$$1, containerServiceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                containerServiceName: containerServiceName$$1,
                options: options
            }, getOperationSpec$f, callback);
        };
        /**
         * Deletes the specified container service in the specified subscription and resource group. The
         * operation does not delete other resources created as part of creating a container service,
         * including storage accounts, VMs, and availability sets. All the other resources created with the
         * container service are part of the same resource group and can be deleted individually.
         * @summary Deletes the specified container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        ContainerServices.prototype.deleteMethod = function (resourceGroupName$$1, containerServiceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, containerServiceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ContainerServices.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        /**
         * Creates or updates a container service with the specified configuration of orchestrator,
         * masters, and agents.
         * @summary Creates or updates a container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param parameters Parameters supplied to the Create or Update a Container Service operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerServices.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, containerServiceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                containerServiceName: containerServiceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$a, options);
        };
        /**
         * Deletes the specified container service in the specified subscription and resource group. The
         * operation does not delete other resources created as part of creating a container service,
         * including storage accounts, VMs, and availability sets. All the other resources created with the
         * container service are part of the same resource group and can be deleted individually.
         * @summary Deletes the specified container service.
         * @param resourceGroupName The name of the resource group.
         * @param containerServiceName The name of the container service in the specified subscription and
         * resource group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ContainerServices.prototype.beginDeleteMethod = function (resourceGroupName$$1, containerServiceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                containerServiceName: containerServiceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$b, options);
        };
        ContainerServices.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$c, callback);
        };
        ContainerServices.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$4, callback);
        };
        return ContainerServices;
    }());
    // Operation Specifications
    var serializer$l = new msRest.Serializer(Mappers$l);
    var listOperationSpec$g = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/containerServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginCreateOrUpdateOperationSpec$a = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ContainerService, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ContainerService
            },
            201: {
                bodyMapper: ContainerService
            },
            202: {
                bodyMapper: ContainerService
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var beginDeleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}",
        urlParameters: [
            resourceGroupName,
            containerServiceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var listNextOperationSpec$c = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };
    var listByResourceGroupNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerServiceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$l
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-compute";
    var packageVersion = "1.0.0";
    var ComputeManagementClientContext = /** @class */ (function (_super) {
        __extends(ComputeManagementClientContext, _super);
        /**
         * Initializes a new instance of the ComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ComputeManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ComputeManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ComputeManagementClient = /** @class */ (function (_super) {
        __extends(ComputeManagementClient, _super);
        /**
         * Initializes a new instance of the ComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function ComputeManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.availabilitySets = new AvailabilitySets(_this);
            _this.virtualMachineExtensionImages = new VirtualMachineExtensionImages(_this);
            _this.virtualMachineExtensions = new VirtualMachineExtensions(_this);
            _this.virtualMachineImages = new VirtualMachineImages(_this);
            _this.usage = new UsageOperations(_this);
            _this.virtualMachines = new VirtualMachines(_this);
            _this.virtualMachineSizes = new VirtualMachineSizes(_this);
            _this.images = new Images(_this);
            _this.virtualMachineScaleSets = new VirtualMachineScaleSets(_this);
            _this.virtualMachineScaleSetExtensions = new VirtualMachineScaleSetExtensions(_this);
            _this.virtualMachineScaleSetRollingUpgrades = new VirtualMachineScaleSetRollingUpgrades(_this);
            _this.virtualMachineScaleSetVMs = new VirtualMachineScaleSetVMs(_this);
            _this.logAnalytics = new LogAnalytics(_this);
            _this.virtualMachineRunCommands = new VirtualMachineRunCommands(_this);
            _this.resourceSkus = new ResourceSkus(_this);
            _this.disks = new Disks(_this);
            _this.snapshots = new Snapshots(_this);
            _this.galleries = new Galleries(_this);
            _this.galleryImages = new GalleryImages(_this);
            _this.galleryImageVersions = new GalleryImageVersions(_this);
            _this.containerServices = new ContainerServices(_this);
            return _this;
        }
        return ComputeManagementClient;
    }(ComputeManagementClientContext));

    exports.ComputeManagementClient = ComputeManagementClient;
    exports.ComputeManagementClientContext = ComputeManagementClientContext;
    exports.ComputeManagementModels = index;
    exports.ComputeManagementMappers = mappers;
    exports.Operations = Operations;
    exports.AvailabilitySets = AvailabilitySets;
    exports.VirtualMachineExtensionImages = VirtualMachineExtensionImages;
    exports.VirtualMachineExtensions = VirtualMachineExtensions;
    exports.VirtualMachineImages = VirtualMachineImages;
    exports.UsageOperations = UsageOperations;
    exports.VirtualMachines = VirtualMachines;
    exports.VirtualMachineSizes = VirtualMachineSizes;
    exports.Images = Images;
    exports.VirtualMachineScaleSets = VirtualMachineScaleSets;
    exports.VirtualMachineScaleSetExtensions = VirtualMachineScaleSetExtensions;
    exports.VirtualMachineScaleSetRollingUpgrades = VirtualMachineScaleSetRollingUpgrades;
    exports.VirtualMachineScaleSetVMs = VirtualMachineScaleSetVMs;
    exports.LogAnalytics = LogAnalytics;
    exports.VirtualMachineRunCommands = VirtualMachineRunCommands;
    exports.ResourceSkus = ResourceSkus;
    exports.Disks = Disks;
    exports.Snapshots = Snapshots;
    exports.Galleries = Galleries;
    exports.GalleryImages = GalleryImages;
    exports.GalleryImageVersions = GalleryImageVersions;
    exports.ContainerServices = ContainerServices;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-compute.js.map
