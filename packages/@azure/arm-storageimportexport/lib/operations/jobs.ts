/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/jobsMappers";
import * as Parameters from "../models/parameters";
import { StorageImportExportManagementClientContext } from "../storageImportExportManagementClientContext";

/** Class representing a Jobs. */
export class Jobs {
  private readonly client: StorageImportExportManagementClientContext;

  /**
   * Create a Jobs.
   * @param {StorageImportExportManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorageImportExportManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns all active and completed jobs in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.JobsListBySubscriptionOptionalParams): Promise<Models.JobsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.JobsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  listBySubscription(options?: Models.JobsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.ListJobsResponse>, callback?: msRest.ServiceCallback<Models.ListJobsResponse>): Promise<Models.JobsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.JobsListBySubscriptionResponse>;
  }

  /**
   * Returns all active and completed jobs in a resource group.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.JobsListByResourceGroupOptionalParams): Promise<Models.JobsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  /**
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.JobsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.JobsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.ListJobsResponse>, callback?: msRest.ServiceCallback<Models.ListJobsResponse>): Promise<Models.JobsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.JobsListByResourceGroupResponse>;
  }

  /**
   * Gets information about an existing job.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetResponse>
   */
  get(jobName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetResponse>;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param callback The callback
   */
  get(jobName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(jobName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  get(jobName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>, callback?: msRest.ServiceCallback<Models.JobResponse>): Promise<Models.JobsGetResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobsGetResponse>;
  }

  /**
   * Updates specific properties of a job. You can call this operation to notify the Import/Export
   * service that the hard drives comprising the import or export job have been shipped to the
   * Microsoft data center. It can also be used to cancel an existing job.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param body The parameters to update in the job
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsUpdateResponse>
   */
  update(jobName: string, resourceGroupName: string, body: Models.UpdateJobParameters, options?: msRest.RequestOptionsBase): Promise<Models.JobsUpdateResponse>;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param body The parameters to update in the job
   * @param callback The callback
   */
  update(jobName: string, resourceGroupName: string, body: Models.UpdateJobParameters, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param body The parameters to update in the job
   * @param options The optional parameters
   * @param callback The callback
   */
  update(jobName: string, resourceGroupName: string, body: Models.UpdateJobParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  update(jobName: string, resourceGroupName: string, body: Models.UpdateJobParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JobResponse>, callback?: msRest.ServiceCallback<Models.JobResponse>): Promise<Models.JobsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        resourceGroupName,
        body,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.JobsUpdateResponse>;
  }

  /**
   * Creates a new job or updates an existing job in the specified subscription.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param body The parameters used for creating the job
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateResponse>
   */
  create(jobName: string, resourceGroupName: string, body: Models.PutJobParameters, options?: Models.JobsCreateOptionalParams): Promise<Models.JobsCreateResponse>;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param body The parameters used for creating the job
   * @param callback The callback
   */
  create(jobName: string, resourceGroupName: string, body: Models.PutJobParameters, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param body The parameters used for creating the job
   * @param options The optional parameters
   * @param callback The callback
   */
  create(jobName: string, resourceGroupName: string, body: Models.PutJobParameters, options: Models.JobsCreateOptionalParams, callback: msRest.ServiceCallback<Models.JobResponse>): void;
  create(jobName: string, resourceGroupName: string, body: Models.PutJobParameters, options?: Models.JobsCreateOptionalParams | msRest.ServiceCallback<Models.JobResponse>, callback?: msRest.ServiceCallback<Models.JobResponse>): Promise<Models.JobsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        resourceGroupName,
        body,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.JobsCreateResponse>;
  }

  /**
   * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(jobName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param callback The callback
   */
  deleteMethod(jobName: string, resourceGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within
   * the user subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(jobName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(jobName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        jobName,
        resourceGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Returns all active and completed jobs in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListJobsResponse>, callback?: msRest.ServiceCallback<Models.ListJobsResponse>): Promise<Models.JobsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.JobsListBySubscriptionNextResponse>;
  }

  /**
   * Returns all active and completed jobs in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListJobsResponse>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListJobsResponse>, callback?: msRest.ServiceCallback<Models.ListJobsResponse>): Promise<Models.JobsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.JobsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListJobsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListJobsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
  urlParameters: [
    Parameters.jobName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
  urlParameters: [
    Parameters.jobName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.UpdateJobParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
  urlParameters: [
    Parameters.jobName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientTenantId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PutJobParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JobResponse
    },
    201: {
      bodyMapper: Mappers.JobResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}",
  urlParameters: [
    Parameters.jobName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListJobsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListJobsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
