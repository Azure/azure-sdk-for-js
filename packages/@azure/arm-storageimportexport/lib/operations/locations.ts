/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/locationsMappers";
import * as Parameters from "../models/parameters";
import { StorageImportExportManagementClientContext } from "../storageImportExportManagementClientContext";

/** Class representing a Locations. */
export class Locations {
  private readonly client: StorageImportExportManagementClientContext;

  /**
   * Create a Locations.
   * @param {StorageImportExportManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorageImportExportManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns a list of locations to which you can ship the disks associated with an import or export
   * job. A location is a Microsoft data center region.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.LocationsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.LocationsResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LocationsResponse>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LocationsResponse>, callback?: msRest.ServiceCallback<Models.LocationsResponse>): Promise<Models.LocationsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.LocationsListResponse>;
  }

  /**
   * Returns the details about a location to which you can ship the disks associated with an import
   * or export job. A location is an Azure region.
   * @param locationName The name of the location. For example, West US or westus.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationsGetResponse>
   */
  get(locationName: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationsGetResponse>;
  /**
   * @param locationName The name of the location. For example, West US or westus.
   * @param callback The callback
   */
  get(locationName: string, callback: msRest.ServiceCallback<Models.Location>): void;
  /**
   * @param locationName The name of the location. For example, West US or westus.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(locationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Location>): void;
  get(locationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Location>, callback?: msRest.ServiceCallback<Models.Location>): Promise<Models.LocationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LocationsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.ImportExport/locations",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LocationsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.ImportExport/locations/{locationName}",
  urlParameters: [
    Parameters.locationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Location
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
