/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/globalUsersMappers";
import * as Parameters from "../models/parameters";
import { ManagedLabsClientContext } from "../managedLabsClientContext";

/** Class representing a GlobalUsers. */
export class GlobalUsers {
  private readonly client: ManagedLabsClientContext;

  /**
   * Create a GlobalUsers.
   * @param {ManagedLabsClientContext} client Reference to the service client.
   */
  constructor(client: ManagedLabsClientContext) {
    this.client = client;
  }

  /**
   * Gets the virtual machine details
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUsersGetEnvironmentResponse>
   */
  getEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options?: Models.GlobalUsersGetEnvironmentOptionalParams): Promise<Models.GlobalUsersGetEnvironmentResponse>;
  /**
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param callback The callback
   */
  getEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, callback: msRest.ServiceCallback<Models.GetEnvironmentResponse>): void;
  /**
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param options The optional parameters
   * @param callback The callback
   */
  getEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options: Models.GlobalUsersGetEnvironmentOptionalParams, callback: msRest.ServiceCallback<Models.GetEnvironmentResponse>): void;
  getEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options?: Models.GlobalUsersGetEnvironmentOptionalParams | msRest.ServiceCallback<Models.GetEnvironmentResponse>, callback?: msRest.ServiceCallback<Models.GetEnvironmentResponse>): Promise<Models.GlobalUsersGetEnvironmentResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        environmentOperationsPayload,
        options
      },
      getEnvironmentOperationSpec,
      callback) as Promise<Models.GlobalUsersGetEnvironmentResponse>;
  }

  /**
   * Get batch operation status
   * @param userName The name of the user.
   * @param operationBatchStatusPayload Payload to get the status of an operation
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUsersGetOperationBatchStatusResponse>
   */
  getOperationBatchStatus(userName: string, operationBatchStatusPayload: Models.OperationBatchStatusPayload, options?: msRest.RequestOptionsBase): Promise<Models.GlobalUsersGetOperationBatchStatusResponse>;
  /**
   * @param userName The name of the user.
   * @param operationBatchStatusPayload Payload to get the status of an operation
   * @param callback The callback
   */
  getOperationBatchStatus(userName: string, operationBatchStatusPayload: Models.OperationBatchStatusPayload, callback: msRest.ServiceCallback<Models.OperationBatchStatusResponse>): void;
  /**
   * @param userName The name of the user.
   * @param operationBatchStatusPayload Payload to get the status of an operation
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperationBatchStatus(userName: string, operationBatchStatusPayload: Models.OperationBatchStatusPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationBatchStatusResponse>): void;
  getOperationBatchStatus(userName: string, operationBatchStatusPayload: Models.OperationBatchStatusPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationBatchStatusResponse>, callback?: msRest.ServiceCallback<Models.OperationBatchStatusResponse>): Promise<Models.GlobalUsersGetOperationBatchStatusResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        operationBatchStatusPayload,
        options
      },
      getOperationBatchStatusOperationSpec,
      callback) as Promise<Models.GlobalUsersGetOperationBatchStatusResponse>;
  }

  /**
   * Gets the status of long running operation
   * @param userName The name of the user.
   * @param operationStatusPayload Payload to get the status of an operation
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUsersGetOperationStatusResponse>
   */
  getOperationStatus(userName: string, operationStatusPayload: Models.OperationStatusPayload, options?: msRest.RequestOptionsBase): Promise<Models.GlobalUsersGetOperationStatusResponse>;
  /**
   * @param userName The name of the user.
   * @param operationStatusPayload Payload to get the status of an operation
   * @param callback The callback
   */
  getOperationStatus(userName: string, operationStatusPayload: Models.OperationStatusPayload, callback: msRest.ServiceCallback<Models.OperationStatusResponse>): void;
  /**
   * @param userName The name of the user.
   * @param operationStatusPayload Payload to get the status of an operation
   * @param options The optional parameters
   * @param callback The callback
   */
  getOperationStatus(userName: string, operationStatusPayload: Models.OperationStatusPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationStatusResponse>): void;
  getOperationStatus(userName: string, operationStatusPayload: Models.OperationStatusPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationStatusResponse>, callback?: msRest.ServiceCallback<Models.OperationStatusResponse>): Promise<Models.GlobalUsersGetOperationStatusResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        operationStatusPayload,
        options
      },
      getOperationStatusOperationSpec,
      callback) as Promise<Models.GlobalUsersGetOperationStatusResponse>;
  }

  /**
   * Get personal preferences for a user
   * @param userName The name of the user.
   * @param personalPreferencesOperationsPayload Represents payload for any Environment operations
   * like get, start, stop, connect
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUsersGetPersonalPreferencesResponse>
   */
  getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: Models.PersonalPreferencesOperationsPayload, options?: msRest.RequestOptionsBase): Promise<Models.GlobalUsersGetPersonalPreferencesResponse>;
  /**
   * @param userName The name of the user.
   * @param personalPreferencesOperationsPayload Represents payload for any Environment operations
   * like get, start, stop, connect
   * @param callback The callback
   */
  getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: Models.PersonalPreferencesOperationsPayload, callback: msRest.ServiceCallback<Models.GetPersonalPreferencesResponse>): void;
  /**
   * @param userName The name of the user.
   * @param personalPreferencesOperationsPayload Represents payload for any Environment operations
   * like get, start, stop, connect
   * @param options The optional parameters
   * @param callback The callback
   */
  getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: Models.PersonalPreferencesOperationsPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetPersonalPreferencesResponse>): void;
  getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: Models.PersonalPreferencesOperationsPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetPersonalPreferencesResponse>, callback?: msRest.ServiceCallback<Models.GetPersonalPreferencesResponse>): Promise<Models.GlobalUsersGetPersonalPreferencesResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        personalPreferencesOperationsPayload,
        options
      },
      getPersonalPreferencesOperationSpec,
      callback) as Promise<Models.GlobalUsersGetPersonalPreferencesResponse>;
  }

  /**
   * List Environments for the user
   * @param userName The name of the user.
   * @param listEnvironmentsPayload Represents the payload to list environments owned by a user
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUsersListEnvironmentsResponse>
   */
  listEnvironments(userName: string, listEnvironmentsPayload: Models.ListEnvironmentsPayload, options?: msRest.RequestOptionsBase): Promise<Models.GlobalUsersListEnvironmentsResponse>;
  /**
   * @param userName The name of the user.
   * @param listEnvironmentsPayload Represents the payload to list environments owned by a user
   * @param callback The callback
   */
  listEnvironments(userName: string, listEnvironmentsPayload: Models.ListEnvironmentsPayload, callback: msRest.ServiceCallback<Models.ListEnvironmentsResponse>): void;
  /**
   * @param userName The name of the user.
   * @param listEnvironmentsPayload Represents the payload to list environments owned by a user
   * @param options The optional parameters
   * @param callback The callback
   */
  listEnvironments(userName: string, listEnvironmentsPayload: Models.ListEnvironmentsPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListEnvironmentsResponse>): void;
  listEnvironments(userName: string, listEnvironmentsPayload: Models.ListEnvironmentsPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListEnvironmentsResponse>, callback?: msRest.ServiceCallback<Models.ListEnvironmentsResponse>): Promise<Models.GlobalUsersListEnvironmentsResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        listEnvironmentsPayload,
        options
      },
      listEnvironmentsOperationSpec,
      callback) as Promise<Models.GlobalUsersListEnvironmentsResponse>;
  }

  /**
   * List labs for the user.
   * @param userName The name of the user.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUsersListLabsResponse>
   */
  listLabs(userName: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalUsersListLabsResponse>;
  /**
   * @param userName The name of the user.
   * @param callback The callback
   */
  listLabs(userName: string, callback: msRest.ServiceCallback<Models.ListLabsResponse>): void;
  /**
   * @param userName The name of the user.
   * @param options The optional parameters
   * @param callback The callback
   */
  listLabs(userName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListLabsResponse>): void;
  listLabs(userName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListLabsResponse>, callback?: msRest.ServiceCallback<Models.ListLabsResponse>): Promise<Models.GlobalUsersListLabsResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        options
      },
      listLabsOperationSpec,
      callback) as Promise<Models.GlobalUsersListLabsResponse>;
  }

  /**
   * Register a user to a managed lab
   * @param userName The name of the user.
   * @param registerPayload Represents payload for Register action.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  register(userName: string, registerPayload: Models.RegisterPayload, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userName The name of the user.
   * @param registerPayload Represents payload for Register action.
   * @param callback The callback
   */
  register(userName: string, registerPayload: Models.RegisterPayload, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userName The name of the user.
   * @param registerPayload Represents payload for Register action.
   * @param options The optional parameters
   * @param callback The callback
   */
  register(userName: string, registerPayload: Models.RegisterPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  register(userName: string, registerPayload: Models.RegisterPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        userName,
        registerPayload,
        options
      },
      registerOperationSpec,
      callback);
  }

  /**
   * Resets the user password on an environment This operation can take a while to complete
   * @param userName The name of the user.
   * @param resetPasswordPayload Represents the payload for resetting passwords.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetPassword(userName: string, resetPasswordPayload: Models.ResetPasswordPayload, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginResetPassword(userName,resetPasswordPayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Starts an environment by starting all resources inside the environment. This operation can take
   * a while to complete
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  startEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStartEnvironment(userName,environmentOperationsPayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Stops an environment by stopping all resources inside the environment This operation can take a
   * while to complete
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stopEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStopEnvironment(userName,environmentOperationsPayload,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Resets the user password on an environment This operation can take a while to complete
   * @param userName The name of the user.
   * @param resetPasswordPayload Represents the payload for resetting passwords.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResetPassword(userName: string, resetPasswordPayload: Models.ResetPasswordPayload, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        userName,
        resetPasswordPayload,
        options
      },
      beginResetPasswordOperationSpec,
      options);
  }

  /**
   * Starts an environment by starting all resources inside the environment. This operation can take
   * a while to complete
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStartEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        userName,
        environmentOperationsPayload,
        options
      },
      beginStartEnvironmentOperationSpec,
      options);
  }

  /**
   * Stops an environment by stopping all resources inside the environment This operation can take a
   * while to complete
   * @param userName The name of the user.
   * @param environmentOperationsPayload Represents payload for any Environment operations like get,
   * start, stop, connect
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStopEnvironment(userName: string, environmentOperationsPayload: Models.EnvironmentOperationsPayload, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        userName,
        environmentOperationsPayload,
        options
      },
      beginStopEnvironmentOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/getEnvironment",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "environmentOperationsPayload",
    mapper: {
      ...Mappers.EnvironmentOperationsPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GetEnvironmentResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationBatchStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/getOperationBatchStatus",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "operationBatchStatusPayload",
    mapper: {
      ...Mappers.OperationBatchStatusPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationBatchStatusResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/getOperationStatus",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "operationStatusPayload",
    mapper: {
      ...Mappers.OperationStatusPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatusResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPersonalPreferencesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/getPersonalPreferences",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "personalPreferencesOperationsPayload",
    mapper: {
      ...Mappers.PersonalPreferencesOperationsPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GetPersonalPreferencesResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listEnvironmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/listEnvironments",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "listEnvironmentsPayload",
    mapper: {
      ...Mappers.ListEnvironmentsPayload,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ListEnvironmentsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listLabsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/listLabs",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListLabsResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const registerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/register",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "registerPayload",
    mapper: {
      ...Mappers.RegisterPayload,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResetPasswordOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/resetPassword",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resetPasswordPayload",
    mapper: {
      ...Mappers.ResetPasswordPayload,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/startEnvironment",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "environmentOperationsPayload",
    mapper: {
      ...Mappers.EnvironmentOperationsPayload,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.LabServices/users/{userName}/stopEnvironment",
  urlParameters: [
    Parameters.userName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "environmentOperationsPayload",
    mapper: {
      ...Mappers.EnvironmentOperationsPayload,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
