/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/environmentSettingsMappers";
import * as Parameters from "../models/parameters";
import { ManagedLabsClientContext } from "../managedLabsClientContext";

/** Class representing a EnvironmentSettings. */
export class EnvironmentSettings {
  private readonly client: ManagedLabsClientContext;

  /**
   * Create a EnvironmentSettings.
   * @param {ManagedLabsClientContext} client Reference to the service client.
   */
  constructor(client: ManagedLabsClientContext) {
    this.client = client;
  }

  /**
   * List environment setting in a given lab.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param [options] The optional parameters
   * @returns Promise<Models.EnvironmentSettingsListResponse>
   */
  list(resourceGroupName: string, labAccountName: string, labName: string, options?: Models.EnvironmentSettingsListOptionalParams): Promise<Models.EnvironmentSettingsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param callback The callback
   */
  list(resourceGroupName: string, labAccountName: string, labName: string, callback: msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, labAccountName: string, labName: string, options: Models.EnvironmentSettingsListOptionalParams, callback: msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>): void;
  list(resourceGroupName: string, labAccountName: string, labName: string, options?: Models.EnvironmentSettingsListOptionalParams | msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>, callback?: msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>): Promise<Models.EnvironmentSettingsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.EnvironmentSettingsListResponse>;
  }

  /**
   * Get environment setting
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<Models.EnvironmentSettingsGetResponse>
   */
  get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: Models.EnvironmentSettingsGetOptionalParams): Promise<Models.EnvironmentSettingsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param callback The callback
   */
  get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: msRest.ServiceCallback<Models.EnvironmentSetting>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: Models.EnvironmentSettingsGetOptionalParams, callback: msRest.ServiceCallback<Models.EnvironmentSetting>): void;
  get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: Models.EnvironmentSettingsGetOptionalParams | msRest.ServiceCallback<Models.EnvironmentSetting>, callback?: msRest.ServiceCallback<Models.EnvironmentSetting>): Promise<Models.EnvironmentSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EnvironmentSettingsGetResponse>;
  }

  /**
   * Create or replace an existing Environment Setting. This operation can take a while to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param environmentSetting Represents settings of an environment, from which environment
   * instances would be created
   * @param [options] The optional parameters
   * @returns Promise<Models.EnvironmentSettingsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: Models.EnvironmentSetting, options?: msRest.RequestOptionsBase): Promise<Models.EnvironmentSettingsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,labAccountName,labName,environmentSettingName,environmentSetting,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.EnvironmentSettingsCreateOrUpdateResponse>;
  }

  /**
   * Delete environment setting. This operation can take a while to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,labAccountName,labName,environmentSettingName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Modify properties of environment setting.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param environmentSetting Represents settings of an environment, from which environment
   * instances would be created
   * @param [options] The optional parameters
   * @returns Promise<Models.EnvironmentSettingsUpdateResponse>
   */
  update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: Models.EnvironmentSettingFragment, options?: msRest.RequestOptionsBase): Promise<Models.EnvironmentSettingsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param environmentSetting Represents settings of an environment, from which environment
   * instances would be created
   * @param callback The callback
   */
  update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: Models.EnvironmentSettingFragment, callback: msRest.ServiceCallback<Models.EnvironmentSetting>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param environmentSetting Represents settings of an environment, from which environment
   * instances would be created
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: Models.EnvironmentSettingFragment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EnvironmentSetting>): void;
  update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: Models.EnvironmentSettingFragment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EnvironmentSetting>, callback?: msRest.ServiceCallback<Models.EnvironmentSetting>): Promise<Models.EnvironmentSettingsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        environmentSetting,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.EnvironmentSettingsUpdateResponse>;
  }

  /**
   * Claims a random environment for a user in an environment settings
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param callback The callback
   */
  claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param options The optional parameters
   * @param callback The callback
   */
  claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        options
      },
      claimAnyOperationSpec,
      callback);
  }

  /**
   * Provisions/deprovisions required resources for an environment setting based on current state of
   * the lab/environment setting.
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param publishPayload Payload for Publish operation on EnvironmentSetting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: Models.PublishPayload, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param publishPayload Payload for Publish operation on EnvironmentSetting.
   * @param callback The callback
   */
  publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: Models.PublishPayload, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param publishPayload Payload for Publish operation on EnvironmentSetting.
   * @param options The optional parameters
   * @param callback The callback
   */
  publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: Models.PublishPayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: Models.PublishPayload, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        publishPayload,
        options
      },
      publishOperationSpec,
      callback);
  }

  /**
   * Starts a template by starting all resources inside the template. This operation can take a while
   * to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName,labAccountName,labName,environmentSettingName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Starts a template by starting all resources inside the template. This operation can take a while
   * to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(resourceGroupName,labAccountName,labName,environmentSettingName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create or replace an existing Environment Setting. This operation can take a while to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param environmentSetting Represents settings of an environment, from which environment
   * instances would be created
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: Models.EnvironmentSetting, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        environmentSetting,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete environment setting. This operation can take a while to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Starts a template by starting all resources inside the template. This operation can take a while
   * to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Starts a template by starting all resources inside the template. This operation can take a while
   * to complete
   * @param resourceGroupName The name of the resource group.
   * @param labAccountName The name of the lab Account.
   * @param labName The name of the lab.
   * @param environmentSettingName The name of the environment Setting.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labAccountName,
        labName,
        environmentSettingName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * List environment setting in a given lab.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EnvironmentSettingsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.EnvironmentSettingsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>, callback?: msRest.ServiceCallback<Models.ResponseWithContinuationEnvironmentSetting>): Promise<Models.EnvironmentSettingsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.EnvironmentSettingsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResponseWithContinuationEnvironmentSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EnvironmentSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "environmentSetting",
    mapper: {
      ...Mappers.EnvironmentSettingFragment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EnvironmentSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const claimAnyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/claimAny",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const publishOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/publish",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "publishPayload",
    mapper: {
      ...Mappers.PublishPayload,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "environmentSetting",
    mapper: {
      ...Mappers.EnvironmentSetting,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.EnvironmentSetting
    },
    201: {
      bodyMapper: Mappers.EnvironmentSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/stop",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labAccountName,
    Parameters.labName,
    Parameters.environmentSettingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResponseWithContinuationEnvironmentSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
