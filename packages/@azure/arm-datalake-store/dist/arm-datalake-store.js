/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDatalakeStore = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for FileType.
     * Possible values include: 'FILE', 'DIRECTORY'
     * @readonly
     * @enum {string}
     */
    var FileType;
    (function (FileType) {
        FileType["FILE"] = "FILE";
        FileType["DIRECTORY"] = "DIRECTORY";
    })(FileType || (FileType = {}));
    /**
     * Defines values for ExpiryOptionType.
     * Possible values include: 'NeverExpire', 'RelativeToNow',
     * 'RelativeToCreationDate', 'Absolute'
     * @readonly
     * @enum {string}
     */
    var ExpiryOptionType;
    (function (ExpiryOptionType) {
        ExpiryOptionType["NeverExpire"] = "NeverExpire";
        ExpiryOptionType["RelativeToNow"] = "RelativeToNow";
        ExpiryOptionType["RelativeToCreationDate"] = "RelativeToCreationDate";
        ExpiryOptionType["Absolute"] = "Absolute";
    })(ExpiryOptionType || (ExpiryOptionType = {}));
    /**
     * Defines values for AppendModeType.
     * Possible values include: 'autocreate'
     * @readonly
     * @enum {string}
     */
    var AppendModeType;
    (function (AppendModeType) {
        AppendModeType["Autocreate"] = "autocreate";
    })(AppendModeType || (AppendModeType = {}));
    /**
     * Defines values for SyncFlag.
     * Possible values include: 'DATA', 'METADATA', 'CLOSE'
     * @readonly
     * @enum {string}
     */
    var SyncFlag;
    (function (SyncFlag) {
        SyncFlag["DATA"] = "DATA";
        SyncFlag["METADATA"] = "METADATA";
        SyncFlag["CLOSE"] = "CLOSE";
    })(SyncFlag || (SyncFlag = {}));

    var index = /*#__PURE__*/Object.freeze({
        get FileType () { return FileType; },
        get ExpiryOptionType () { return ExpiryOptionType; },
        get AppendModeType () { return AppendModeType; },
        get SyncFlag () { return SyncFlag; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var FileOperationResult = {
        serializedName: "FileOperationResult",
        type: {
            name: "Composite",
            className: "FileOperationResult",
            modelProperties: {
                operationResult: {
                    readOnly: true,
                    serializedName: "boolean",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AclStatus = {
        serializedName: "AclStatus",
        type: {
            name: "Composite",
            className: "AclStatus",
            modelProperties: {
                entries: {
                    serializedName: "entries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                group: {
                    serializedName: "group",
                    type: {
                        name: "String"
                    }
                },
                owner: {
                    serializedName: "owner",
                    type: {
                        name: "String"
                    }
                },
                permission: {
                    serializedName: "permission",
                    type: {
                        name: "String"
                    }
                },
                stickyBit: {
                    readOnly: true,
                    serializedName: "stickyBit",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AclStatusResult = {
        serializedName: "AclStatusResult",
        type: {
            name: "Composite",
            className: "AclStatusResult",
            modelProperties: {
                aclStatus: {
                    serializedName: "aclStatus",
                    type: {
                        name: "Composite",
                        className: "AclStatus"
                    }
                }
            }
        }
    };
    var ContentSummary = {
        serializedName: "ContentSummary",
        type: {
            name: "Composite",
            className: "ContentSummary",
            modelProperties: {
                directoryCount: {
                    readOnly: true,
                    serializedName: "directoryCount",
                    type: {
                        name: "Number"
                    }
                },
                fileCount: {
                    readOnly: true,
                    serializedName: "fileCount",
                    type: {
                        name: "Number"
                    }
                },
                length: {
                    readOnly: true,
                    serializedName: "length",
                    type: {
                        name: "Number"
                    }
                },
                spaceConsumed: {
                    readOnly: true,
                    serializedName: "spaceConsumed",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ContentSummaryResult = {
        serializedName: "ContentSummaryResult",
        type: {
            name: "Composite",
            className: "ContentSummaryResult",
            modelProperties: {
                contentSummary: {
                    readOnly: true,
                    serializedName: "contentSummary",
                    type: {
                        name: "Composite",
                        className: "ContentSummary"
                    }
                }
            }
        }
    };
    var FileStatusProperties = {
        serializedName: "FileStatusProperties",
        type: {
            name: "Composite",
            className: "FileStatusProperties",
            modelProperties: {
                accessTime: {
                    readOnly: true,
                    serializedName: "accessTime",
                    type: {
                        name: "Number"
                    }
                },
                blockSize: {
                    readOnly: true,
                    serializedName: "blockSize",
                    type: {
                        name: "Number"
                    }
                },
                expirationTime: {
                    readOnly: true,
                    serializedName: "msExpirationTime",
                    type: {
                        name: "Number"
                    }
                },
                group: {
                    readOnly: true,
                    serializedName: "group",
                    type: {
                        name: "String"
                    }
                },
                length: {
                    readOnly: true,
                    serializedName: "length",
                    type: {
                        name: "Number"
                    }
                },
                modificationTime: {
                    readOnly: true,
                    serializedName: "modificationTime",
                    type: {
                        name: "Number"
                    }
                },
                owner: {
                    readOnly: true,
                    serializedName: "owner",
                    type: {
                        name: "String"
                    }
                },
                pathSuffix: {
                    readOnly: true,
                    serializedName: "pathSuffix",
                    type: {
                        name: "String"
                    }
                },
                permission: {
                    readOnly: true,
                    serializedName: "permission",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "FILE",
                            "DIRECTORY"
                        ]
                    }
                },
                aclBit: {
                    readOnly: true,
                    serializedName: "aclBit",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FileStatuses = {
        serializedName: "FileStatuses",
        type: {
            name: "Composite",
            className: "FileStatuses",
            modelProperties: {
                fileStatus: {
                    readOnly: true,
                    serializedName: "fileStatus",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FileStatusProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var FileStatusesResult = {
        serializedName: "FileStatusesResult",
        type: {
            name: "Composite",
            className: "FileStatusesResult",
            modelProperties: {
                fileStatuses: {
                    readOnly: true,
                    serializedName: "fileStatuses",
                    type: {
                        name: "Composite",
                        className: "FileStatuses"
                    }
                }
            }
        }
    };
    var FileStatusResult = {
        serializedName: "FileStatusResult",
        type: {
            name: "Composite",
            className: "FileStatusResult",
            modelProperties: {
                fileStatus: {
                    readOnly: true,
                    serializedName: "fileStatus",
                    type: {
                        name: "Composite",
                        className: "FileStatusProperties"
                    }
                }
            }
        }
    };
    var AdlsRemoteException = {
        serializedName: "AdlsRemoteException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "exception",
                clientName: "exception"
            },
            uberParent: "AdlsRemoteException",
            className: "AdlsRemoteException",
            modelProperties: {
                javaClassName: {
                    readOnly: true,
                    serializedName: "javaClassName",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                exception: {
                    required: true,
                    serializedName: "exception",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdlsIllegalArgumentException = {
        serializedName: "IllegalArgumentException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsIllegalArgumentException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsUnsupportedOperationException = {
        serializedName: "UnsupportedOperationException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsUnsupportedOperationException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsSecurityException = {
        serializedName: "SecurityException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsSecurityException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsIOException = {
        serializedName: "IOException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsIOException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsFileNotFoundException = {
        serializedName: "FileNotFoundException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsFileNotFoundException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsFileAlreadyExistsException = {
        serializedName: "FileAlreadyExistsException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsFileAlreadyExistsException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsBadOffsetException = {
        serializedName: "BadOffsetException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsBadOffsetException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsRuntimeException = {
        serializedName: "RuntimeException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsRuntimeException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsAccessControlException = {
        serializedName: "AccessControlException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsAccessControlException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsThrottledException = {
        serializedName: "ThrottledException",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
            uberParent: "AdlsRemoteException",
            className: "AdlsThrottledException",
            modelProperties: __assign({}, AdlsRemoteException.type.modelProperties)
        }
    };
    var AdlsError = {
        serializedName: "AdlsError",
        type: {
            name: "Composite",
            className: "AdlsError",
            modelProperties: {
                remoteException: {
                    readOnly: true,
                    serializedName: "remoteException",
                    type: {
                        name: "Composite",
                        polymorphicDiscriminator: {
                            serializedName: "exception",
                            clientName: "exception"
                        },
                        uberParent: "AdlsRemoteException",
                        className: "AdlsRemoteException"
                    }
                }
            }
        }
    };
    var discriminators = {
        'AdlsRemoteException.IllegalArgumentException': AdlsIllegalArgumentException,
        'AdlsRemoteException.UnsupportedOperationException': AdlsUnsupportedOperationException,
        'AdlsRemoteException.SecurityException': AdlsSecurityException,
        'AdlsRemoteException.IOException': AdlsIOException,
        'AdlsRemoteException.FileNotFoundException': AdlsFileNotFoundException,
        'AdlsRemoteException.FileAlreadyExistsException': AdlsFileAlreadyExistsException,
        'AdlsRemoteException.BadOffsetException': AdlsBadOffsetException,
        'AdlsRemoteException.RuntimeException': AdlsRuntimeException,
        'AdlsRemoteException.AccessControlException': AdlsAccessControlException,
        'AdlsRemoteException.ThrottledException': AdlsThrottledException,
        'AdlsRemoteException': AdlsRemoteException
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        FileOperationResult: FileOperationResult,
        AclStatus: AclStatus,
        AclStatusResult: AclStatusResult,
        ContentSummary: ContentSummary,
        ContentSummaryResult: ContentSummaryResult,
        FileStatusProperties: FileStatusProperties,
        FileStatuses: FileStatuses,
        FileStatusesResult: FileStatusesResult,
        FileStatusResult: FileStatusResult,
        AdlsRemoteException: AdlsRemoteException,
        AdlsIllegalArgumentException: AdlsIllegalArgumentException,
        AdlsUnsupportedOperationException: AdlsUnsupportedOperationException,
        AdlsSecurityException: AdlsSecurityException,
        AdlsIOException: AdlsIOException,
        AdlsFileNotFoundException: AdlsFileNotFoundException,
        AdlsFileAlreadyExistsException: AdlsFileAlreadyExistsException,
        AdlsBadOffsetException: AdlsBadOffsetException,
        AdlsRuntimeException: AdlsRuntimeException,
        AdlsAccessControlException: AdlsAccessControlException,
        AdlsThrottledException: AdlsThrottledException,
        AdlsError: AdlsError,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        AdlsError: AdlsError,
        AdlsRemoteException: AdlsRemoteException,
        FileOperationResult: FileOperationResult,
        FileStatusesResult: FileStatusesResult,
        FileStatuses: FileStatuses,
        FileStatusProperties: FileStatusProperties,
        ContentSummaryResult: ContentSummaryResult,
        ContentSummary: ContentSummary,
        FileStatusResult: FileStatusResult,
        CloudError: CloudError,
        AclStatusResult: AclStatusResult,
        AclStatus: AclStatus,
        AdlsIllegalArgumentException: AdlsIllegalArgumentException,
        AdlsUnsupportedOperationException: AdlsUnsupportedOperationException,
        AdlsSecurityException: AdlsSecurityException,
        AdlsIOException: AdlsIOException,
        AdlsFileNotFoundException: AdlsFileNotFoundException,
        AdlsFileAlreadyExistsException: AdlsFileAlreadyExistsException,
        AdlsBadOffsetException: AdlsBadOffsetException,
        AdlsRuntimeException: AdlsRuntimeException,
        AdlsAccessControlException: AdlsAccessControlException,
        AdlsThrottledException: AdlsThrottledException
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var aclspec = {
        parameterPath: "aclspec",
        mapper: {
            required: true,
            serializedName: "aclspec",
            type: {
                name: "String"
            }
        }
    };
    var adlsFileSystemDnsSuffix = {
        parameterPath: "adlsFileSystemDnsSuffix",
        mapper: {
            required: true,
            serializedName: "adlsFileSystemDnsSuffix",
            defaultValue: 'azuredatalakestore.net',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var appendMode = {
        parameterPath: [
            "options",
            "appendMode"
        ],
        mapper: {
            serializedName: "appendMode",
            type: {
                name: "Enum",
                allowedValues: [
                    "autocreate"
                ]
            }
        }
    };
    var appendParameter = {
        parameterPath: "appendParameter",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "append",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };
    var deleteSourceDirectory = {
        parameterPath: [
            "options",
            "deleteSourceDirectory"
        ],
        mapper: {
            serializedName: "deleteSourceDirectory",
            type: {
                name: "Boolean"
            }
        }
    };
    var destination = {
        parameterPath: "destination",
        mapper: {
            required: true,
            serializedName: "destination",
            type: {
                name: "String"
            }
        }
    };
    var expireTime = {
        parameterPath: [
            "options",
            "expireTime"
        ],
        mapper: {
            serializedName: "expireTime",
            type: {
                name: "Number"
            }
        }
    };
    var expiryOption = {
        parameterPath: "expiryOption",
        mapper: {
            required: true,
            serializedName: "expiryOption",
            type: {
                name: "Enum",
                allowedValues: [
                    "NeverExpire",
                    "RelativeToNow",
                    "RelativeToCreationDate",
                    "Absolute"
                ]
            }
        }
    };
    var fileSessionId = {
        parameterPath: [
            "options",
            "fileSessionId"
        ],
        mapper: {
            serializedName: "fileSessionId",
            type: {
                name: "Uuid"
            }
        }
    };
    var fsaction = {
        parameterPath: "fsaction",
        mapper: {
            required: true,
            serializedName: "fsaction",
            type: {
                name: "String"
            }
        }
    };
    var group = {
        parameterPath: [
            "options",
            "group"
        ],
        mapper: {
            serializedName: "group",
            type: {
                name: "String"
            }
        }
    };
    var leaseId = {
        parameterPath: [
            "options",
            "leaseId"
        ],
        mapper: {
            serializedName: "leaseId",
            type: {
                name: "Uuid"
            }
        }
    };
    var length = {
        parameterPath: [
            "options",
            "length"
        ],
        mapper: {
            serializedName: "length",
            type: {
                name: "Number"
            }
        }
    };
    var listAfter = {
        parameterPath: [
            "options",
            "listAfter"
        ],
        mapper: {
            serializedName: "listAfter",
            type: {
                name: "String"
            }
        }
    };
    var listBefore = {
        parameterPath: [
            "options",
            "listBefore"
        ],
        mapper: {
            serializedName: "listBefore",
            type: {
                name: "String"
            }
        }
    };
    var listSize = {
        parameterPath: [
            "options",
            "listSize"
        ],
        mapper: {
            serializedName: "listSize",
            type: {
                name: "Number"
            }
        }
    };
    var offset = {
        parameterPath: [
            "options",
            "offset"
        ],
        mapper: {
            serializedName: "offset",
            type: {
                name: "Number"
            }
        }
    };
    var op0 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'SETEXPIRY',
            type: {
                name: "String"
            }
        }
    };
    var op1 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'CONCURRENTAPPEND',
            type: {
                name: "String"
            }
        }
    };
    var op10 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'APPEND',
            type: {
                name: "String"
            }
        }
    };
    var op11 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'CREATE',
            type: {
                name: "String"
            }
        }
    };
    var op12 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'SETACL',
            type: {
                name: "String"
            }
        }
    };
    var op13 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'MODIFYACLENTRIES',
            type: {
                name: "String"
            }
        }
    };
    var op14 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'REMOVEACLENTRIES',
            type: {
                name: "String"
            }
        }
    };
    var op15 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'REMOVEDEFAULTACL',
            type: {
                name: "String"
            }
        }
    };
    var op16 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'REMOVEACL',
            type: {
                name: "String"
            }
        }
    };
    var op17 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'GETACLSTATUS',
            type: {
                name: "String"
            }
        }
    };
    var op18 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'DELETE',
            type: {
                name: "String"
            }
        }
    };
    var op19 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'RENAME',
            type: {
                name: "String"
            }
        }
    };
    var op2 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'CHECKACCESS',
            type: {
                name: "String"
            }
        }
    };
    var op20 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'SETOWNER',
            type: {
                name: "String"
            }
        }
    };
    var op21 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'SETPERMISSION',
            type: {
                name: "String"
            }
        }
    };
    var op3 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'MKDIRS',
            type: {
                name: "String"
            }
        }
    };
    var op4 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'CONCAT',
            type: {
                name: "String"
            }
        }
    };
    var op5 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'MSCONCAT',
            type: {
                name: "String"
            }
        }
    };
    var op6 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'LISTSTATUS',
            type: {
                name: "String"
            }
        }
    };
    var op7 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'GETCONTENTSUMMARY',
            type: {
                name: "String"
            }
        }
    };
    var op8 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'GETFILESTATUS',
            type: {
                name: "String"
            }
        }
    };
    var op9 = {
        parameterPath: "op",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "op",
            defaultValue: 'OPEN',
            type: {
                name: "String"
            }
        }
    };
    var overwrite = {
        parameterPath: [
            "options",
            "overwrite"
        ],
        mapper: {
            serializedName: "overwrite",
            type: {
                name: "Boolean"
            }
        }
    };
    var owner = {
        parameterPath: [
            "options",
            "owner"
        ],
        mapper: {
            serializedName: "owner",
            type: {
                name: "String"
            }
        }
    };
    var path = {
        parameterPath: "path",
        mapper: {
            required: true,
            serializedName: "path",
            type: {
                name: "String"
            }
        }
    };
    var permission0 = {
        parameterPath: [
            "options",
            "permission"
        ],
        mapper: {
            serializedName: "permission",
            type: {
                name: "Number"
            }
        }
    };
    var permission1 = {
        parameterPath: [
            "options",
            "permission"
        ],
        mapper: {
            serializedName: "permission",
            type: {
                name: "String"
            }
        }
    };
    var read = {
        parameterPath: "read",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "read",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };
    var recursive = {
        parameterPath: [
            "options",
            "recursive"
        ],
        mapper: {
            serializedName: "recursive",
            type: {
                name: "Boolean"
            }
        }
    };
    var sources = {
        parameterPath: "sources",
        mapper: {
            required: true,
            serializedName: "sources",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var syncFlag0 = {
        parameterPath: [
            "options",
            "syncFlag"
        ],
        mapper: {
            serializedName: "syncFlag",
            defaultValue: 'DATA',
            type: {
                name: "Enum",
                allowedValues: [
                    "DATA",
                    "METADATA",
                    "CLOSE"
                ]
            }
        }
    };
    var syncFlag1 = {
        parameterPath: [
            "options",
            "syncFlag"
        ],
        mapper: {
            serializedName: "syncFlag",
            defaultValue: 'CLOSE',
            type: {
                name: "Enum",
                allowedValues: [
                    "DATA",
                    "METADATA",
                    "CLOSE"
                ]
            }
        }
    };
    var tooId = {
        parameterPath: [
            "options",
            "tooId"
        ],
        mapper: {
            serializedName: "tooId",
            type: {
                name: "Boolean"
            }
        }
    };
    var transferEncoding = {
        parameterPath: "transferEncoding",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "Transfer-Encoding",
            defaultValue: 'chunked',
            type: {
                name: "String"
            }
        }
    };
    var write = {
        parameterPath: "write",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "write",
            defaultValue: 'true',
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FileSystem. */
    var FileSystem = /** @class */ (function () {
        /**
         * Create a FileSystem.
         * @param {DataLakeStoreFileSystemManagementClientContext} client Reference to the service client.
         */
        function FileSystem(client) {
            this.client = client;
        }
        FileSystem.prototype.setFileExpiry = function (accountName$$1, path$$1, expiryOption$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                expiryOption: expiryOption$$1,
                options: options
            }, setFileExpiryOperationSpec, callback);
        };
        FileSystem.prototype.concurrentAppend = function (accountName$$1, path$$1, streamContents, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                streamContents: streamContents,
                options: options
            }, concurrentAppendOperationSpec, callback);
        };
        FileSystem.prototype.checkAccess = function (accountName$$1, path$$1, fsaction$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                fsaction: fsaction$$1,
                options: options
            }, checkAccessOperationSpec, callback);
        };
        FileSystem.prototype.mkdirs = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, mkdirsOperationSpec, callback);
        };
        FileSystem.prototype.concat = function (accountName$$1, path$$1, sources$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                sources: sources$$1,
                options: options
            }, concatOperationSpec, callback);
        };
        FileSystem.prototype.msConcat = function (accountName$$1, path$$1, streamContents, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                streamContents: streamContents,
                options: options
            }, msConcatOperationSpec, callback);
        };
        FileSystem.prototype.listFileStatus = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, listFileStatusOperationSpec, callback);
        };
        FileSystem.prototype.getContentSummary = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, getContentSummaryOperationSpec, callback);
        };
        FileSystem.prototype.getFileStatus = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, getFileStatusOperationSpec, callback);
        };
        FileSystem.prototype.open = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, openOperationSpec, callback);
        };
        FileSystem.prototype.append = function (accountName$$1, path$$1, streamContents, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                streamContents: streamContents,
                options: options
            }, appendOperationSpec, callback);
        };
        FileSystem.prototype.create = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, createOperationSpec, callback);
        };
        FileSystem.prototype.setAcl = function (accountName$$1, path$$1, aclspec$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                aclspec: aclspec$$1,
                options: options
            }, setAclOperationSpec, callback);
        };
        FileSystem.prototype.modifyAclEntries = function (accountName$$1, path$$1, aclspec$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                aclspec: aclspec$$1,
                options: options
            }, modifyAclEntriesOperationSpec, callback);
        };
        FileSystem.prototype.removeAclEntries = function (accountName$$1, path$$1, aclspec$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                aclspec: aclspec$$1,
                options: options
            }, removeAclEntriesOperationSpec, callback);
        };
        FileSystem.prototype.removeDefaultAcl = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, removeDefaultAclOperationSpec, callback);
        };
        FileSystem.prototype.removeAcl = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, removeAclOperationSpec, callback);
        };
        FileSystem.prototype.getAclStatus = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, getAclStatusOperationSpec, callback);
        };
        FileSystem.prototype.deleteMethod = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        FileSystem.prototype.rename = function (accountName$$1, path$$1, destination$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                destination: destination$$1,
                options: options
            }, renameOperationSpec, callback);
        };
        FileSystem.prototype.setOwner = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, setOwnerOperationSpec, callback);
        };
        FileSystem.prototype.setPermission = function (accountName$$1, path$$1, options, callback) {
            return this.client.sendOperationRequest({
                accountName: accountName$$1,
                path: path$$1,
                options: options
            }, setPermissionOperationSpec, callback);
        };
        return FileSystem;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var setFileExpiryOperationSpec = {
        httpMethod: "PUT",
        path: "WebHdfsExt/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            expiryOption,
            expireTime,
            op0,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var concurrentAppendOperationSpec = {
        httpMethod: "POST",
        path: "WebHdfsExt/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            appendMode,
            op1,
            syncFlag0,
            apiVersion
        ],
        headerParameters: [
            transferEncoding,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "streamContents",
            mapper: {
                required: true,
                serializedName: "streamContents",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var checkAccessOperationSpec = {
        httpMethod: "GET",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            fsaction,
            op2,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var mkdirsOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            permission0,
            op3,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileOperationResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var concatOperationSpec = {
        httpMethod: "POST",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            sources,
            op4,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var msConcatOperationSpec = {
        httpMethod: "POST",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            deleteSourceDirectory,
            op5,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "streamContents",
            mapper: {
                required: true,
                serializedName: "streamContents",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var listFileStatusOperationSpec = {
        httpMethod: "GET",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            listSize,
            listAfter,
            listBefore,
            tooId,
            op6,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileStatusesResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var getContentSummaryOperationSpec = {
        httpMethod: "GET",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            op7,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContentSummaryResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var getFileStatusOperationSpec = {
        httpMethod: "GET",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            tooId,
            op8,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileStatusResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var openOperationSpec = {
        httpMethod: "GET",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            length,
            offset,
            fileSessionId,
            read,
            op9,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var appendOperationSpec = {
        httpMethod: "POST",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            offset,
            syncFlag1,
            leaseId,
            fileSessionId,
            appendParameter,
            op10,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "streamContents",
            mapper: {
                required: true,
                serializedName: "streamContents",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            overwrite,
            syncFlag1,
            leaseId,
            permission0,
            write,
            op11,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "streamContents"
            ],
            mapper: {
                serializedName: "streamContents",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            201: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var setAclOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            aclspec,
            op12,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var modifyAclEntriesOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            aclspec,
            op13,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var removeAclEntriesOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            aclspec,
            op14,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var removeDefaultAclOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            op15,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var removeAclOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            op16,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var getAclStatusOperationSpec = {
        httpMethod: "GET",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            tooId,
            op17,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AclStatusResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            recursive,
            op18,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileOperationResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var renameOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            destination,
            op19,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileOperationResult
            },
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var setOwnerOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            owner,
            group,
            op20,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };
    var setPermissionOperationSpec = {
        httpMethod: "PUT",
        path: "webhdfs/v1/{path}",
        urlParameters: [
            accountName,
            adlsFileSystemDnsSuffix,
            path
        ],
        queryParameters: [
            permission1,
            op21,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: AdlsError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-datalake-store";
    var packageVersion = "1.0.0";
    var DataLakeStoreFileSystemManagementClientContext = /** @class */ (function (_super) {
        __extends(DataLakeStoreFileSystemManagementClientContext, _super);
        /**
         * Initializes a new instance of the DataLakeStoreFileSystemManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function DataLakeStoreFileSystemManagementClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-11-01';
            _this.adlsFileSystemDnsSuffix = 'azuredatalakestore.net';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = 'https://{accountName}.{adlsFileSystemDnsSuffix}';
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.adlsFileSystemDnsSuffix !== null && options.adlsFileSystemDnsSuffix !== undefined) {
                _this.adlsFileSystemDnsSuffix = options.adlsFileSystemDnsSuffix;
            }
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataLakeStoreFileSystemManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataLakeStoreFileSystemManagementClient = /** @class */ (function (_super) {
        __extends(DataLakeStoreFileSystemManagementClient, _super);
        /**
         * Initializes a new instance of the DataLakeStoreFileSystemManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function DataLakeStoreFileSystemManagementClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.fileSystem = new FileSystem(_this);
            return _this;
        }
        return DataLakeStoreFileSystemManagementClient;
    }(DataLakeStoreFileSystemManagementClientContext));

    exports.DataLakeStoreFileSystemManagementClient = DataLakeStoreFileSystemManagementClient;
    exports.DataLakeStoreFileSystemManagementClientContext = DataLakeStoreFileSystemManagementClientContext;
    exports.DataLakeStoreFileSystemManagementModels = index;
    exports.DataLakeStoreFileSystemManagementMappers = mappers;
    exports.FileSystem = FileSystem;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-datalake-store.js.map
