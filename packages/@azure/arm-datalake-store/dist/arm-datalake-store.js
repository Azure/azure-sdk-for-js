/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmDatalakeStore = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for EncryptionConfigType.
     * Possible values include: 'UserManaged', 'ServiceManaged'
     * @readonly
     * @enum {string}
     */
    var EncryptionConfigType;
    (function (EncryptionConfigType) {
        EncryptionConfigType["UserManaged"] = "UserManaged";
        EncryptionConfigType["ServiceManaged"] = "ServiceManaged";
    })(EncryptionConfigType || (EncryptionConfigType = {}));
    /**
     * Defines values for EncryptionState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var EncryptionState;
    (function (EncryptionState) {
        EncryptionState["Enabled"] = "Enabled";
        EncryptionState["Disabled"] = "Disabled";
    })(EncryptionState || (EncryptionState = {}));
    /**
     * Defines values for EncryptionProvisioningState.
     * Possible values include: 'Creating', 'Succeeded'
     * @readonly
     * @enum {string}
     */
    var EncryptionProvisioningState;
    (function (EncryptionProvisioningState) {
        EncryptionProvisioningState["Creating"] = "Creating";
        EncryptionProvisioningState["Succeeded"] = "Succeeded";
    })(EncryptionProvisioningState || (EncryptionProvisioningState = {}));
    /**
     * Defines values for FirewallState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var FirewallState;
    (function (FirewallState) {
        FirewallState["Enabled"] = "Enabled";
        FirewallState["Disabled"] = "Disabled";
    })(FirewallState || (FirewallState = {}));
    /**
     * Defines values for FirewallAllowAzureIpsState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var FirewallAllowAzureIpsState;
    (function (FirewallAllowAzureIpsState) {
        FirewallAllowAzureIpsState["Enabled"] = "Enabled";
        FirewallAllowAzureIpsState["Disabled"] = "Disabled";
    })(FirewallAllowAzureIpsState || (FirewallAllowAzureIpsState = {}));
    /**
     * Defines values for TrustedIdProviderState.
     * Possible values include: 'Enabled', 'Disabled'
     * @readonly
     * @enum {string}
     */
    var TrustedIdProviderState;
    (function (TrustedIdProviderState) {
        TrustedIdProviderState["Enabled"] = "Enabled";
        TrustedIdProviderState["Disabled"] = "Disabled";
    })(TrustedIdProviderState || (TrustedIdProviderState = {}));
    /**
     * Defines values for TierType.
     * Possible values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB',
     * 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB'
     * @readonly
     * @enum {string}
     */
    var TierType;
    (function (TierType) {
        TierType["Consumption"] = "Consumption";
        TierType["Commitment1TB"] = "Commitment_1TB";
        TierType["Commitment10TB"] = "Commitment_10TB";
        TierType["Commitment100TB"] = "Commitment_100TB";
        TierType["Commitment500TB"] = "Commitment_500TB";
        TierType["Commitment1PB"] = "Commitment_1PB";
        TierType["Commitment5PB"] = "Commitment_5PB";
    })(TierType || (TierType = {}));
    /**
     * Defines values for DataLakeStoreAccountStatus.
     * Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded',
     * 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting',
     * 'Canceled'
     * @readonly
     * @enum {string}
     */
    var DataLakeStoreAccountStatus;
    (function (DataLakeStoreAccountStatus) {
        DataLakeStoreAccountStatus["Failed"] = "Failed";
        DataLakeStoreAccountStatus["Creating"] = "Creating";
        DataLakeStoreAccountStatus["Running"] = "Running";
        DataLakeStoreAccountStatus["Succeeded"] = "Succeeded";
        DataLakeStoreAccountStatus["Patching"] = "Patching";
        DataLakeStoreAccountStatus["Suspending"] = "Suspending";
        DataLakeStoreAccountStatus["Resuming"] = "Resuming";
        DataLakeStoreAccountStatus["Deleting"] = "Deleting";
        DataLakeStoreAccountStatus["Deleted"] = "Deleted";
        DataLakeStoreAccountStatus["Undeleting"] = "Undeleting";
        DataLakeStoreAccountStatus["Canceled"] = "Canceled";
    })(DataLakeStoreAccountStatus || (DataLakeStoreAccountStatus = {}));
    /**
     * Defines values for DataLakeStoreAccountState.
     * Possible values include: 'Active', 'Suspended'
     * @readonly
     * @enum {string}
     */
    var DataLakeStoreAccountState;
    (function (DataLakeStoreAccountState) {
        DataLakeStoreAccountState["Active"] = "Active";
        DataLakeStoreAccountState["Suspended"] = "Suspended";
    })(DataLakeStoreAccountState || (DataLakeStoreAccountState = {}));
    /**
     * Defines values for OperationOrigin.
     * Possible values include: 'user', 'system', 'user,system'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperationOrigin =
     * <OperationOrigin>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperationOrigin;
    (function (OperationOrigin) {
        OperationOrigin["User"] = "user";
        OperationOrigin["System"] = "system";
        OperationOrigin["Usersystem"] = "user,system";
    })(OperationOrigin || (OperationOrigin = {}));
    /**
     * Defines values for SubscriptionState.
     * Possible values include: 'Registered', 'Suspended', 'Deleted',
     * 'Unregistered', 'Warned'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: SubscriptionState =
     * <SubscriptionState>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var SubscriptionState;
    (function (SubscriptionState) {
        SubscriptionState["Registered"] = "Registered";
        SubscriptionState["Suspended"] = "Suspended";
        SubscriptionState["Deleted"] = "Deleted";
        SubscriptionState["Unregistered"] = "Unregistered";
        SubscriptionState["Warned"] = "Warned";
    })(SubscriptionState || (SubscriptionState = {}));

    var index = /*#__PURE__*/Object.freeze({
        get EncryptionConfigType () { return EncryptionConfigType; },
        get EncryptionState () { return EncryptionState; },
        get EncryptionProvisioningState () { return EncryptionProvisioningState; },
        get FirewallState () { return FirewallState; },
        get FirewallAllowAzureIpsState () { return FirewallAllowAzureIpsState; },
        get TrustedIdProviderState () { return TrustedIdProviderState; },
        get TierType () { return TierType; },
        get DataLakeStoreAccountStatus () { return DataLakeStoreAccountStatus; },
        get DataLakeStoreAccountState () { return DataLakeStoreAccountState; },
        get OperationOrigin () { return OperationOrigin; },
        get SubscriptionState () { return SubscriptionState; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionIdentity = {
        serializedName: "EncryptionIdentity",
        type: {
            name: "Composite",
            className: "EncryptionIdentity",
            modelProperties: {
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'SystemAssigned',
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var KeyVaultMetaInfo = {
        serializedName: "KeyVaultMetaInfo",
        type: {
            name: "Composite",
            className: "KeyVaultMetaInfo",
            modelProperties: {
                keyVaultResourceId: {
                    required: true,
                    serializedName: "keyVaultResourceId",
                    type: {
                        name: "String"
                    }
                },
                encryptionKeyName: {
                    required: true,
                    serializedName: "encryptionKeyName",
                    type: {
                        name: "String"
                    }
                },
                encryptionKeyVersion: {
                    required: true,
                    serializedName: "encryptionKeyVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EncryptionConfig = {
        serializedName: "EncryptionConfig",
        type: {
            name: "Composite",
            className: "EncryptionConfig",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "UserManaged",
                            "ServiceManaged"
                        ]
                    }
                },
                keyVaultMetaInfo: {
                    serializedName: "keyVaultMetaInfo",
                    type: {
                        name: "Composite",
                        className: "KeyVaultMetaInfo"
                    }
                }
            }
        }
    };
    var FirewallRuleProperties = {
        serializedName: "FirewallRuleProperties",
        type: {
            name: "Composite",
            className: "FirewallRuleProperties",
            modelProperties: {
                startIpAddress: {
                    readOnly: true,
                    serializedName: "startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    readOnly: true,
                    serializedName: "endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FirewallRule = {
        serializedName: "FirewallRule",
        type: {
            name: "Composite",
            className: "FirewallRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { startIpAddress: {
                    readOnly: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                }, endIpAddress: {
                    readOnly: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VirtualNetworkRuleProperties = {
        serializedName: "VirtualNetworkRuleProperties",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleProperties",
            modelProperties: {
                subnetId: {
                    readOnly: true,
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: __assign({}, SubResource.type.modelProperties, { subnetId: {
                    readOnly: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TrustedIdProviderProperties = {
        serializedName: "TrustedIdProviderProperties",
        type: {
            name: "Composite",
            className: "TrustedIdProviderProperties",
            modelProperties: {
                idProvider: {
                    readOnly: true,
                    serializedName: "idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrustedIdProvider = {
        serializedName: "TrustedIdProvider",
        type: {
            name: "Composite",
            className: "TrustedIdProvider",
            modelProperties: __assign({}, SubResource.type.modelProperties, { idProvider: {
                    readOnly: true,
                    serializedName: "properties.idProvider",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataLakeStoreAccountPropertiesBasic = {
        serializedName: "DataLakeStoreAccountPropertiesBasic",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccountPropertiesBasic",
            modelProperties: {
                accountId: {
                    readOnly: true,
                    serializedName: "accountId",
                    type: {
                        name: "Uuid"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Failed",
                            "Creating",
                            "Running",
                            "Succeeded",
                            "Patching",
                            "Suspending",
                            "Resuming",
                            "Deleting",
                            "Deleted",
                            "Undeleting",
                            "Canceled"
                        ]
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Suspended"
                        ]
                    }
                },
                creationTime: {
                    readOnly: true,
                    serializedName: "creationTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endpoint: {
                    readOnly: true,
                    serializedName: "endpoint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataLakeStoreAccountProperties = {
        serializedName: "DataLakeStoreAccountProperties",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccountProperties",
            modelProperties: __assign({}, DataLakeStoreAccountPropertiesBasic.type.modelProperties, { defaultGroup: {
                    readOnly: true,
                    serializedName: "defaultGroup",
                    type: {
                        name: "String"
                    }
                }, encryptionConfig: {
                    readOnly: true,
                    serializedName: "encryptionConfig",
                    type: {
                        name: "Composite",
                        className: "EncryptionConfig"
                    }
                }, encryptionState: {
                    readOnly: true,
                    serializedName: "encryptionState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, encryptionProvisioningState: {
                    readOnly: true,
                    serializedName: "encryptionProvisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded"
                        ]
                    }
                }, firewallRules: {
                    readOnly: true,
                    serializedName: "firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                }, virtualNetworkRules: {
                    readOnly: true,
                    serializedName: "virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                }, firewallState: {
                    readOnly: true,
                    serializedName: "firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, firewallAllowAzureIps: {
                    readOnly: true,
                    serializedName: "firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, trustedIdProviders: {
                    readOnly: true,
                    serializedName: "trustedIdProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrustedIdProvider"
                            }
                        }
                    }
                }, trustedIdProviderState: {
                    readOnly: true,
                    serializedName: "trustedIdProviderState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, newTier: {
                    readOnly: true,
                    serializedName: "newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                }, currentTier: {
                    readOnly: true,
                    serializedName: "currentTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                } })
        }
    };
    var DataLakeStoreAccount = {
        serializedName: "DataLakeStoreAccount",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccount",
            modelProperties: __assign({}, Resource.type.modelProperties, { identity: {
                    readOnly: true,
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "EncryptionIdentity"
                    }
                }, accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "Uuid"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Failed",
                            "Creating",
                            "Running",
                            "Succeeded",
                            "Patching",
                            "Suspending",
                            "Resuming",
                            "Deleting",
                            "Deleted",
                            "Undeleting",
                            "Canceled"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Suspended"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, endpoint: {
                    readOnly: true,
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                }, defaultGroup: {
                    readOnly: true,
                    serializedName: "properties.defaultGroup",
                    type: {
                        name: "String"
                    }
                }, encryptionConfig: {
                    readOnly: true,
                    serializedName: "properties.encryptionConfig",
                    type: {
                        name: "Composite",
                        className: "EncryptionConfig"
                    }
                }, encryptionState: {
                    readOnly: true,
                    serializedName: "properties.encryptionState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, encryptionProvisioningState: {
                    readOnly: true,
                    serializedName: "properties.encryptionProvisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "Succeeded"
                        ]
                    }
                }, firewallRules: {
                    readOnly: true,
                    serializedName: "properties.firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                }, virtualNetworkRules: {
                    readOnly: true,
                    serializedName: "properties.virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                }, firewallState: {
                    readOnly: true,
                    serializedName: "properties.firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, firewallAllowAzureIps: {
                    readOnly: true,
                    serializedName: "properties.firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, trustedIdProviders: {
                    readOnly: true,
                    serializedName: "properties.trustedIdProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrustedIdProvider"
                            }
                        }
                    }
                }, trustedIdProviderState: {
                    readOnly: true,
                    serializedName: "properties.trustedIdProviderState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, newTier: {
                    readOnly: true,
                    serializedName: "properties.newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                }, currentTier: {
                    readOnly: true,
                    serializedName: "properties.currentTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                } })
        }
    };
    var DataLakeStoreAccountBasic = {
        serializedName: "DataLakeStoreAccountBasic",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccountBasic",
            modelProperties: __assign({}, Resource.type.modelProperties, { accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "Uuid"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Failed",
                            "Creating",
                            "Running",
                            "Succeeded",
                            "Patching",
                            "Suspending",
                            "Resuming",
                            "Deleting",
                            "Deleted",
                            "Undeleting",
                            "Canceled"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Suspended"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, endpoint: {
                    readOnly: true,
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapabilityInformation = {
        serializedName: "CapabilityInformation",
        type: {
            name: "Composite",
            className: "CapabilityInformation",
            modelProperties: {
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "Uuid"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                maxAccountCount: {
                    readOnly: true,
                    serializedName: "maxAccountCount",
                    type: {
                        name: "Number"
                    }
                },
                accountCount: {
                    readOnly: true,
                    serializedName: "accountCount",
                    type: {
                        name: "Number"
                    }
                },
                migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var NameAvailabilityInformation = {
        serializedName: "NameAvailabilityInformation",
        type: {
            name: "Composite",
            className: "NameAvailabilityInformation",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateOrUpdateFirewallRuleProperties = {
        serializedName: "CreateOrUpdateFirewallRuleProperties",
        type: {
            name: "Composite",
            className: "CreateOrUpdateFirewallRuleProperties",
            modelProperties: {
                startIpAddress: {
                    required: true,
                    serializedName: "startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    required: true,
                    serializedName: "endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateFirewallRuleWithAccountParameters = {
        serializedName: "CreateFirewallRuleWithAccountParameters",
        type: {
            name: "Composite",
            className: "CreateFirewallRuleWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateOrUpdateVirtualNetworkRuleProperties = {
        serializedName: "CreateOrUpdateVirtualNetworkRuleProperties",
        type: {
            name: "Composite",
            className: "CreateOrUpdateVirtualNetworkRuleProperties",
            modelProperties: {
                subnetId: {
                    required: true,
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateVirtualNetworkRuleWithAccountParameters = {
        serializedName: "CreateVirtualNetworkRuleWithAccountParameters",
        type: {
            name: "Composite",
            className: "CreateVirtualNetworkRuleWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    required: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateOrUpdateTrustedIdProviderProperties = {
        serializedName: "CreateOrUpdateTrustedIdProviderProperties",
        type: {
            name: "Composite",
            className: "CreateOrUpdateTrustedIdProviderProperties",
            modelProperties: {
                idProvider: {
                    required: true,
                    serializedName: "idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateTrustedIdProviderWithAccountParameters = {
        serializedName: "CreateTrustedIdProviderWithAccountParameters",
        type: {
            name: "Composite",
            className: "CreateTrustedIdProviderWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idProvider: {
                    required: true,
                    serializedName: "properties.idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateDataLakeStoreAccountProperties = {
        serializedName: "CreateDataLakeStoreAccountProperties",
        type: {
            name: "Composite",
            className: "CreateDataLakeStoreAccountProperties",
            modelProperties: {
                defaultGroup: {
                    serializedName: "defaultGroup",
                    type: {
                        name: "String"
                    }
                },
                encryptionConfig: {
                    serializedName: "encryptionConfig",
                    type: {
                        name: "Composite",
                        className: "EncryptionConfig"
                    }
                },
                encryptionState: {
                    serializedName: "encryptionState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallRules: {
                    serializedName: "firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateFirewallRuleWithAccountParameters"
                            }
                        }
                    }
                },
                virtualNetworkRules: {
                    serializedName: "virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateVirtualNetworkRuleWithAccountParameters"
                            }
                        }
                    }
                },
                firewallState: {
                    serializedName: "firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallAllowAzureIps: {
                    serializedName: "firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                trustedIdProviders: {
                    serializedName: "trustedIdProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateTrustedIdProviderWithAccountParameters"
                            }
                        }
                    }
                },
                trustedIdProviderState: {
                    serializedName: "trustedIdProviderState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                newTier: {
                    serializedName: "newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                }
            }
        }
    };
    var CreateDataLakeStoreAccountParameters = {
        serializedName: "CreateDataLakeStoreAccountParameters",
        type: {
            name: "Composite",
            className: "CreateDataLakeStoreAccountParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "EncryptionIdentity"
                    }
                },
                defaultGroup: {
                    serializedName: "properties.defaultGroup",
                    type: {
                        name: "String"
                    }
                },
                encryptionConfig: {
                    serializedName: "properties.encryptionConfig",
                    type: {
                        name: "Composite",
                        className: "EncryptionConfig"
                    }
                },
                encryptionState: {
                    serializedName: "properties.encryptionState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallRules: {
                    serializedName: "properties.firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateFirewallRuleWithAccountParameters"
                            }
                        }
                    }
                },
                virtualNetworkRules: {
                    serializedName: "properties.virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateVirtualNetworkRuleWithAccountParameters"
                            }
                        }
                    }
                },
                firewallState: {
                    serializedName: "properties.firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallAllowAzureIps: {
                    serializedName: "properties.firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                trustedIdProviders: {
                    serializedName: "properties.trustedIdProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateTrustedIdProviderWithAccountParameters"
                            }
                        }
                    }
                },
                trustedIdProviderState: {
                    serializedName: "properties.trustedIdProviderState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                newTier: {
                    serializedName: "properties.newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                }
            }
        }
    };
    var UpdateKeyVaultMetaInfo = {
        serializedName: "UpdateKeyVaultMetaInfo",
        type: {
            name: "Composite",
            className: "UpdateKeyVaultMetaInfo",
            modelProperties: {
                encryptionKeyVersion: {
                    serializedName: "encryptionKeyVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateEncryptionConfig = {
        serializedName: "UpdateEncryptionConfig",
        type: {
            name: "Composite",
            className: "UpdateEncryptionConfig",
            modelProperties: {
                keyVaultMetaInfo: {
                    serializedName: "keyVaultMetaInfo",
                    type: {
                        name: "Composite",
                        className: "UpdateKeyVaultMetaInfo"
                    }
                }
            }
        }
    };
    var UpdateFirewallRuleProperties = {
        serializedName: "UpdateFirewallRuleProperties",
        type: {
            name: "Composite",
            className: "UpdateFirewallRuleProperties",
            modelProperties: {
                startIpAddress: {
                    serializedName: "startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    serializedName: "endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateFirewallRuleWithAccountParameters = {
        serializedName: "UpdateFirewallRuleWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateFirewallRuleWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startIpAddress: {
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateVirtualNetworkRuleProperties = {
        serializedName: "UpdateVirtualNetworkRuleProperties",
        type: {
            name: "Composite",
            className: "UpdateVirtualNetworkRuleProperties",
            modelProperties: {
                subnetId: {
                    serializedName: "subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateVirtualNetworkRuleWithAccountParameters = {
        serializedName: "UpdateVirtualNetworkRuleWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateVirtualNetworkRuleWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateTrustedIdProviderProperties = {
        serializedName: "UpdateTrustedIdProviderProperties",
        type: {
            name: "Composite",
            className: "UpdateTrustedIdProviderProperties",
            modelProperties: {
                idProvider: {
                    serializedName: "idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateTrustedIdProviderWithAccountParameters = {
        serializedName: "UpdateTrustedIdProviderWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateTrustedIdProviderWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                idProvider: {
                    serializedName: "properties.idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateDataLakeStoreAccountProperties = {
        serializedName: "UpdateDataLakeStoreAccountProperties",
        type: {
            name: "Composite",
            className: "UpdateDataLakeStoreAccountProperties",
            modelProperties: {
                defaultGroup: {
                    serializedName: "defaultGroup",
                    type: {
                        name: "String"
                    }
                },
                encryptionConfig: {
                    serializedName: "encryptionConfig",
                    type: {
                        name: "Composite",
                        className: "UpdateEncryptionConfig"
                    }
                },
                firewallRules: {
                    serializedName: "firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateFirewallRuleWithAccountParameters"
                            }
                        }
                    }
                },
                virtualNetworkRules: {
                    serializedName: "virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateVirtualNetworkRuleWithAccountParameters"
                            }
                        }
                    }
                },
                firewallState: {
                    serializedName: "firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallAllowAzureIps: {
                    serializedName: "firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                trustedIdProviders: {
                    serializedName: "trustedIdProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateTrustedIdProviderWithAccountParameters"
                            }
                        }
                    }
                },
                trustedIdProviderState: {
                    serializedName: "trustedIdProviderState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                newTier: {
                    serializedName: "newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                }
            }
        }
    };
    var UpdateDataLakeStoreAccountParameters = {
        serializedName: "UpdateDataLakeStoreAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateDataLakeStoreAccountParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                defaultGroup: {
                    serializedName: "properties.defaultGroup",
                    type: {
                        name: "String"
                    }
                },
                encryptionConfig: {
                    serializedName: "properties.encryptionConfig",
                    type: {
                        name: "Composite",
                        className: "UpdateEncryptionConfig"
                    }
                },
                firewallRules: {
                    serializedName: "properties.firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateFirewallRuleWithAccountParameters"
                            }
                        }
                    }
                },
                virtualNetworkRules: {
                    serializedName: "properties.virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateVirtualNetworkRuleWithAccountParameters"
                            }
                        }
                    }
                },
                firewallState: {
                    serializedName: "properties.firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallAllowAzureIps: {
                    serializedName: "properties.firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                trustedIdProviders: {
                    serializedName: "properties.trustedIdProviders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateTrustedIdProviderWithAccountParameters"
                            }
                        }
                    }
                },
                trustedIdProviderState: {
                    serializedName: "properties.trustedIdProviderState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                newTier: {
                    serializedName: "properties.newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_1TB",
                            "Commitment_10TB",
                            "Commitment_100TB",
                            "Commitment_500TB",
                            "Commitment_1PB",
                            "Commitment_5PB"
                        ]
                    }
                }
            }
        }
    };
    var CreateOrUpdateFirewallRuleParameters = {
        serializedName: "CreateOrUpdateFirewallRuleParameters",
        type: {
            name: "Composite",
            className: "CreateOrUpdateFirewallRuleParameters",
            modelProperties: {
                startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateFirewallRuleParameters = {
        serializedName: "UpdateFirewallRuleParameters",
        type: {
            name: "Composite",
            className: "UpdateFirewallRuleParameters",
            modelProperties: {
                startIpAddress: {
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateOrUpdateVirtualNetworkRuleParameters = {
        serializedName: "CreateOrUpdateVirtualNetworkRuleParameters",
        type: {
            name: "Composite",
            className: "CreateOrUpdateVirtualNetworkRuleParameters",
            modelProperties: {
                subnetId: {
                    required: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateVirtualNetworkRuleParameters = {
        serializedName: "UpdateVirtualNetworkRuleParameters",
        type: {
            name: "Composite",
            className: "UpdateVirtualNetworkRuleParameters",
            modelProperties: {
                subnetId: {
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateOrUpdateTrustedIdProviderParameters = {
        serializedName: "CreateOrUpdateTrustedIdProviderParameters",
        type: {
            name: "Composite",
            className: "CreateOrUpdateTrustedIdProviderParameters",
            modelProperties: {
                idProvider: {
                    required: true,
                    serializedName: "properties.idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateTrustedIdProviderParameters = {
        serializedName: "UpdateTrustedIdProviderParameters",
        type: {
            name: "Composite",
            className: "UpdateTrustedIdProviderParameters",
            modelProperties: {
                idProvider: {
                    serializedName: "properties.idProvider",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityParameters = {
        serializedName: "CheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.DataLakeStore/accounts',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataLakeStoreAccountListResult = {
        serializedName: "DataLakeStoreAccountListResult",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccountListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataLakeStoreAccountBasic"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FirewallRuleListResult = {
        serializedName: "FirewallRuleListResult",
        type: {
            name: "Composite",
            className: "FirewallRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRuleListResult = {
        serializedName: "VirtualNetworkRuleListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrustedIdProviderListResult = {
        serializedName: "TrustedIdProviderListResult",
        type: {
            name: "Composite",
            className: "TrustedIdProviderListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrustedIdProvider"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        SubResource: SubResource,
        EncryptionIdentity: EncryptionIdentity,
        KeyVaultMetaInfo: KeyVaultMetaInfo,
        EncryptionConfig: EncryptionConfig,
        FirewallRuleProperties: FirewallRuleProperties,
        FirewallRule: FirewallRule,
        VirtualNetworkRuleProperties: VirtualNetworkRuleProperties,
        VirtualNetworkRule: VirtualNetworkRule,
        TrustedIdProviderProperties: TrustedIdProviderProperties,
        TrustedIdProvider: TrustedIdProvider,
        DataLakeStoreAccountPropertiesBasic: DataLakeStoreAccountPropertiesBasic,
        DataLakeStoreAccountProperties: DataLakeStoreAccountProperties,
        DataLakeStoreAccount: DataLakeStoreAccount,
        DataLakeStoreAccountBasic: DataLakeStoreAccountBasic,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        CapabilityInformation: CapabilityInformation,
        NameAvailabilityInformation: NameAvailabilityInformation,
        CreateOrUpdateFirewallRuleProperties: CreateOrUpdateFirewallRuleProperties,
        CreateFirewallRuleWithAccountParameters: CreateFirewallRuleWithAccountParameters,
        CreateOrUpdateVirtualNetworkRuleProperties: CreateOrUpdateVirtualNetworkRuleProperties,
        CreateVirtualNetworkRuleWithAccountParameters: CreateVirtualNetworkRuleWithAccountParameters,
        CreateOrUpdateTrustedIdProviderProperties: CreateOrUpdateTrustedIdProviderProperties,
        CreateTrustedIdProviderWithAccountParameters: CreateTrustedIdProviderWithAccountParameters,
        CreateDataLakeStoreAccountProperties: CreateDataLakeStoreAccountProperties,
        CreateDataLakeStoreAccountParameters: CreateDataLakeStoreAccountParameters,
        UpdateKeyVaultMetaInfo: UpdateKeyVaultMetaInfo,
        UpdateEncryptionConfig: UpdateEncryptionConfig,
        UpdateFirewallRuleProperties: UpdateFirewallRuleProperties,
        UpdateFirewallRuleWithAccountParameters: UpdateFirewallRuleWithAccountParameters,
        UpdateVirtualNetworkRuleProperties: UpdateVirtualNetworkRuleProperties,
        UpdateVirtualNetworkRuleWithAccountParameters: UpdateVirtualNetworkRuleWithAccountParameters,
        UpdateTrustedIdProviderProperties: UpdateTrustedIdProviderProperties,
        UpdateTrustedIdProviderWithAccountParameters: UpdateTrustedIdProviderWithAccountParameters,
        UpdateDataLakeStoreAccountProperties: UpdateDataLakeStoreAccountProperties,
        UpdateDataLakeStoreAccountParameters: UpdateDataLakeStoreAccountParameters,
        CreateOrUpdateFirewallRuleParameters: CreateOrUpdateFirewallRuleParameters,
        UpdateFirewallRuleParameters: UpdateFirewallRuleParameters,
        CreateOrUpdateVirtualNetworkRuleParameters: CreateOrUpdateVirtualNetworkRuleParameters,
        UpdateVirtualNetworkRuleParameters: UpdateVirtualNetworkRuleParameters,
        CreateOrUpdateTrustedIdProviderParameters: CreateOrUpdateTrustedIdProviderParameters,
        UpdateTrustedIdProviderParameters: UpdateTrustedIdProviderParameters,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        DataLakeStoreAccountListResult: DataLakeStoreAccountListResult,
        FirewallRuleListResult: FirewallRuleListResult,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        TrustedIdProviderListResult: TrustedIdProviderListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        DataLakeStoreAccountListResult: DataLakeStoreAccountListResult,
        DataLakeStoreAccountBasic: DataLakeStoreAccountBasic,
        Resource: Resource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CreateDataLakeStoreAccountParameters: CreateDataLakeStoreAccountParameters,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionConfig: EncryptionConfig,
        KeyVaultMetaInfo: KeyVaultMetaInfo,
        CreateFirewallRuleWithAccountParameters: CreateFirewallRuleWithAccountParameters,
        CreateVirtualNetworkRuleWithAccountParameters: CreateVirtualNetworkRuleWithAccountParameters,
        CreateTrustedIdProviderWithAccountParameters: CreateTrustedIdProviderWithAccountParameters,
        DataLakeStoreAccount: DataLakeStoreAccount,
        FirewallRule: FirewallRule,
        SubResource: SubResource,
        VirtualNetworkRule: VirtualNetworkRule,
        TrustedIdProvider: TrustedIdProvider,
        UpdateDataLakeStoreAccountParameters: UpdateDataLakeStoreAccountParameters,
        UpdateEncryptionConfig: UpdateEncryptionConfig,
        UpdateKeyVaultMetaInfo: UpdateKeyVaultMetaInfo,
        UpdateFirewallRuleWithAccountParameters: UpdateFirewallRuleWithAccountParameters,
        UpdateVirtualNetworkRuleWithAccountParameters: UpdateVirtualNetworkRuleWithAccountParameters,
        UpdateTrustedIdProviderWithAccountParameters: UpdateTrustedIdProviderWithAccountParameters,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        NameAvailabilityInformation: NameAvailabilityInformation
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var count = {
        parameterPath: [
            "options",
            "count"
        ],
        mapper: {
            serializedName: "$count",
            type: {
                name: "Boolean"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var firewallRuleName = {
        parameterPath: "firewallRuleName",
        mapper: {
            required: true,
            serializedName: "firewallRuleName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            constraints: {
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var trustedIdProviderName = {
        parameterPath: "trustedIdProviderName",
        mapper: {
            required: true,
            serializedName: "trustedIdProviderName",
            type: {
                name: "String"
            }
        }
    };
    var virtualNetworkRuleName = {
        parameterPath: "virtualNetworkRuleName",
        mapper: {
            required: true,
            serializedName: "virtualNetworkRuleName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Accounts. */
    var Accounts = /** @class */ (function () {
        /**
         * Create a Accounts.
         * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
         */
        function Accounts(client) {
            this.client = client;
        }
        Accounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Creates the specified Data Lake Store account.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Store account.
         * @param parameters Parameters supplied to create the Data Lake Store account.
         * @param [options] The optional parameters
         * @returns Promise<Models.AccountsCreateResponse>
         */
        Accounts.prototype.create = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Accounts.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Updates the specified Data Lake Store account information.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Store account.
         * @param parameters Parameters supplied to update the Data Lake Store account.
         * @param [options] The optional parameters
         * @returns Promise<Models.AccountsUpdateResponse>
         */
        Accounts.prototype.update = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.beginUpdate(resourceGroupName$$1, accountName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified Data Lake Store account.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Store account.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Accounts.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, accountName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Accounts.prototype.enableKeyVault = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, enableKeyVaultOperationSpec, callback);
        };
        Accounts.prototype.checkNameAvailability = function (location$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Creates the specified Data Lake Store account.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Store account.
         * @param parameters Parameters supplied to create the Data Lake Store account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Accounts.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Updates the specified Data Lake Store account information.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Store account.
         * @param parameters Parameters supplied to update the Data Lake Store account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Accounts.prototype.beginUpdate = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes the specified Data Lake Store account.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Store account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Accounts.prototype.beginDeleteMethod = function (resourceGroupName$$1, accountName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Accounts.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Accounts;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var enableKeyVaultOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/enableKeyVault",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/checkNameAvailability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailabilityInformation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CreateDataLakeStoreAccountParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccount
            },
            201: {
                bodyMapper: DataLakeStoreAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, UpdateDataLakeStoreAccountParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccount
            },
            201: {
                bodyMapper: DataLakeStoreAccount
            },
            202: {
                bodyMapper: DataLakeStoreAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        FirewallRuleListResult: FirewallRuleListResult,
        FirewallRule: FirewallRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CreateOrUpdateFirewallRuleParameters: CreateOrUpdateFirewallRuleParameters,
        UpdateFirewallRuleParameters: UpdateFirewallRuleParameters,
        Resource: Resource,
        VirtualNetworkRule: VirtualNetworkRule,
        TrustedIdProvider: TrustedIdProvider,
        DataLakeStoreAccount: DataLakeStoreAccount,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionConfig: EncryptionConfig,
        KeyVaultMetaInfo: KeyVaultMetaInfo,
        DataLakeStoreAccountBasic: DataLakeStoreAccountBasic
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FirewallRules. */
    var FirewallRules = /** @class */ (function () {
        /**
         * Create a FirewallRules.
         * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
         */
        function FirewallRules(client) {
            this.client = client;
        }
        FirewallRules.prototype.listByAccount = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listByAccountOperationSpec, callback);
        };
        FirewallRules.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, firewallRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                firewallRuleName: firewallRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        FirewallRules.prototype.get = function (resourceGroupName$$1, accountName$$1, firewallRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        FirewallRules.prototype.update = function (resourceGroupName$$1, accountName$$1, firewallRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        FirewallRules.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, firewallRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                firewallRuleName: firewallRuleName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        FirewallRules.prototype.listByAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAccountNextOperationSpec, callback);
        };
        return FirewallRules;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listByAccountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CreateOrUpdateFirewallRuleParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateFirewallRuleParameters
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        VirtualNetworkRule: VirtualNetworkRule,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CreateOrUpdateVirtualNetworkRuleParameters: CreateOrUpdateVirtualNetworkRuleParameters,
        UpdateVirtualNetworkRuleParameters: UpdateVirtualNetworkRuleParameters,
        Resource: Resource,
        FirewallRule: FirewallRule,
        TrustedIdProvider: TrustedIdProvider,
        DataLakeStoreAccount: DataLakeStoreAccount,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionConfig: EncryptionConfig,
        KeyVaultMetaInfo: KeyVaultMetaInfo,
        DataLakeStoreAccountBasic: DataLakeStoreAccountBasic
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a VirtualNetworkRules. */
    var VirtualNetworkRules = /** @class */ (function () {
        /**
         * Create a VirtualNetworkRules.
         * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
         */
        function VirtualNetworkRules(client) {
            this.client = client;
        }
        VirtualNetworkRules.prototype.listByAccount = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listByAccountOperationSpec$1, callback);
        };
        VirtualNetworkRules.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, virtualNetworkRuleName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        VirtualNetworkRules.prototype.get = function (resourceGroupName$$1, accountName$$1, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        VirtualNetworkRules.prototype.update = function (resourceGroupName$$1, accountName$$1, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, updateOperationSpec$1, callback);
        };
        VirtualNetworkRules.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, virtualNetworkRuleName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                virtualNetworkRuleName: virtualNetworkRuleName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        VirtualNetworkRules.prototype.listByAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAccountNextOperationSpec$1, callback);
        };
        return VirtualNetworkRules;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            virtualNetworkRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CreateOrUpdateVirtualNetworkRuleParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            virtualNetworkRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            virtualNetworkRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateVirtualNetworkRuleParameters
        },
        responses: {
            200: {
                bodyMapper: VirtualNetworkRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/virtualNetworkRules/{virtualNetworkRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            virtualNetworkRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VirtualNetworkRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        TrustedIdProviderListResult: TrustedIdProviderListResult,
        TrustedIdProvider: TrustedIdProvider,
        SubResource: SubResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        CreateOrUpdateTrustedIdProviderParameters: CreateOrUpdateTrustedIdProviderParameters,
        UpdateTrustedIdProviderParameters: UpdateTrustedIdProviderParameters,
        Resource: Resource,
        FirewallRule: FirewallRule,
        VirtualNetworkRule: VirtualNetworkRule,
        DataLakeStoreAccount: DataLakeStoreAccount,
        EncryptionIdentity: EncryptionIdentity,
        EncryptionConfig: EncryptionConfig,
        KeyVaultMetaInfo: KeyVaultMetaInfo,
        DataLakeStoreAccountBasic: DataLakeStoreAccountBasic
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a TrustedIdProviders. */
    var TrustedIdProviders = /** @class */ (function () {
        /**
         * Create a TrustedIdProviders.
         * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
         */
        function TrustedIdProviders(client) {
            this.client = client;
        }
        TrustedIdProviders.prototype.listByAccount = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listByAccountOperationSpec$2, callback);
        };
        TrustedIdProviders.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, trustedIdProviderName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                trustedIdProviderName: trustedIdProviderName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        TrustedIdProviders.prototype.get = function (resourceGroupName$$1, accountName$$1, trustedIdProviderName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                trustedIdProviderName: trustedIdProviderName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        TrustedIdProviders.prototype.update = function (resourceGroupName$$1, accountName$$1, trustedIdProviderName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                trustedIdProviderName: trustedIdProviderName$$1,
                options: options
            }, updateOperationSpec$2, callback);
        };
        TrustedIdProviders.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, trustedIdProviderName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                trustedIdProviderName: trustedIdProviderName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        TrustedIdProviders.prototype.listByAccountNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByAccountNextOperationSpec$2, callback);
        };
        return TrustedIdProviders;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByAccountOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TrustedIdProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            trustedIdProviderName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CreateOrUpdateTrustedIdProviderParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TrustedIdProvider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            trustedIdProviderName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TrustedIdProvider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            trustedIdProviderName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateTrustedIdProviderParameters
        },
        responses: {
            200: {
                bodyMapper: TrustedIdProvider
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            trustedIdProviderName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByAccountNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TrustedIdProviderListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DataLakeStore/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        CapabilityInformation: CapabilityInformation,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Locations. */
    var Locations = /** @class */ (function () {
        /**
         * Create a Locations.
         * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
         */
        function Locations(client) {
            this.client = client;
        }
        Locations.prototype.getCapability = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, getCapabilityOperationSpec, callback);
        };
        return Locations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getCapabilityOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/capability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapabilityInformation
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-datalake-store";
    var packageVersion = "1.0.0";
    var DataLakeStoreAccountManagementClientContext = /** @class */ (function (_super) {
        __extends(DataLakeStoreAccountManagementClientContext, _super);
        /**
         * Initializes a new instance of the DataLakeStoreAccountManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function DataLakeStoreAccountManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-11-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataLakeStoreAccountManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataLakeStoreAccountManagementClient = /** @class */ (function (_super) {
        __extends(DataLakeStoreAccountManagementClient, _super);
        /**
         * Initializes a new instance of the DataLakeStoreAccountManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function DataLakeStoreAccountManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.accounts = new Accounts(_this);
            _this.firewallRules = new FirewallRules(_this);
            _this.virtualNetworkRules = new VirtualNetworkRules(_this);
            _this.trustedIdProviders = new TrustedIdProviders(_this);
            _this.operations = new Operations(_this);
            _this.locations = new Locations(_this);
            return _this;
        }
        return DataLakeStoreAccountManagementClient;
    }(DataLakeStoreAccountManagementClientContext));

    exports.DataLakeStoreAccountManagementClient = DataLakeStoreAccountManagementClient;
    exports.DataLakeStoreAccountManagementClientContext = DataLakeStoreAccountManagementClientContext;
    exports.DataLakeStoreAccountManagementModels = index;
    exports.DataLakeStoreAccountManagementMappers = mappers;
    exports.Accounts = Accounts;
    exports.FirewallRules = FirewallRules;
    exports.VirtualNetworkRules = VirtualNetworkRules;
    exports.TrustedIdProviders = TrustedIdProviders;
    exports.Operations = Operations;
    exports.Locations = Locations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-datalake-store.js.map
