/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/fileSystemMappers";
import * as Parameters from "../models/parameters";
import { DataLakeStoreFileSystemManagementClientContext } from "../dataLakeStoreFileSystemManagementClientContext";

/** Class representing a FileSystem. */
export class FileSystem {
  private readonly client: DataLakeStoreFileSystemManagementClientContext;

  /**
   * Create a FileSystem.
   * @param {DataLakeStoreFileSystemManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataLakeStoreFileSystemManagementClientContext) {
    this.client = client;
  }

  /**
   * Sets or removes the expiration time on the specified file. This operation can only be executed
   * against files. Folders are not supported.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file on which to set or remove
   * the expiration time.
   * @param expiryOption Indicates the type of expiration to use for the file: 1. NeverExpire:
   * ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in milliseconds representing
   * the expiration date relative to when file expiration is updated. 3. RelativeToCreationDate:
   * ExpireTime is an integer in milliseconds representing the expiration date relative to file
   * creation. 4. Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to
   * 1/1/1970 00:00:00. Possible values include: 'NeverExpire', 'RelativeToNow',
   * 'RelativeToCreationDate', 'Absolute'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setFileExpiry(accountName: string, path: string, expiryOption: Models.ExpiryOptionType, options?: Models.FileSystemSetFileExpiryOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file on which to set or remove
   * the expiration time.
   * @param expiryOption Indicates the type of expiration to use for the file: 1. NeverExpire:
   * ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in milliseconds representing
   * the expiration date relative to when file expiration is updated. 3. RelativeToCreationDate:
   * ExpireTime is an integer in milliseconds representing the expiration date relative to file
   * creation. 4. Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to
   * 1/1/1970 00:00:00. Possible values include: 'NeverExpire', 'RelativeToNow',
   * 'RelativeToCreationDate', 'Absolute'
   * @param callback The callback
   */
  setFileExpiry(accountName: string, path: string, expiryOption: Models.ExpiryOptionType, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file on which to set or remove
   * the expiration time.
   * @param expiryOption Indicates the type of expiration to use for the file: 1. NeverExpire:
   * ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in milliseconds representing
   * the expiration date relative to when file expiration is updated. 3. RelativeToCreationDate:
   * ExpireTime is an integer in milliseconds representing the expiration date relative to file
   * creation. 4. Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to
   * 1/1/1970 00:00:00. Possible values include: 'NeverExpire', 'RelativeToNow',
   * 'RelativeToCreationDate', 'Absolute'
   * @param options The optional parameters
   * @param callback The callback
   */
  setFileExpiry(accountName: string, path: string, expiryOption: Models.ExpiryOptionType, options: Models.FileSystemSetFileExpiryOptionalParams, callback: msRest.ServiceCallback<void>): void;
  setFileExpiry(accountName: string, path: string, expiryOption: Models.ExpiryOptionType, options?: Models.FileSystemSetFileExpiryOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        expiryOption,
        options
      },
      setFileExpiryOperationSpec,
      callback);
  }

  /**
   * Appends to the specified file, optionally first creating the file if it does not yet exist. This
   * method supports multiple concurrent appends to the file. NOTE: The target must not contain data
   * added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used
   * interchangeably; once a target file has been modified using either of these append options, the
   * other append option cannot be used on the target file. ConcurrentAppend does not guarantee order
   * and can result in duplicated data landing in the target file.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append using
   * concurrent append.
   * @param streamContents The file contents to include when appending to the file.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  concurrentAppend(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options?: Models.FileSystemConcurrentAppendOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append using
   * concurrent append.
   * @param streamContents The file contents to include when appending to the file.
   * @param callback The callback
   */
  concurrentAppend(accountName: string, path: string, streamContents: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append using
   * concurrent append.
   * @param streamContents The file contents to include when appending to the file.
   * @param options The optional parameters
   * @param callback The callback
   */
  concurrentAppend(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options: Models.FileSystemConcurrentAppendOptionalParams, callback: msRest.ServiceCallback<void>): void;
  concurrentAppend(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options?: Models.FileSystemConcurrentAppendOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        streamContents,
        options
      },
      concurrentAppendOperationSpec,
      callback);
  }

  /**
   * Checks if the specified access is available at the given path.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * check access.
   * @param fsaction File system operation read/write/execute in string form, matching regex pattern
   * '[rwx-]{3}'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  checkAccess(accountName: string, path: string, fsaction: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * check access.
   * @param fsaction File system operation read/write/execute in string form, matching regex pattern
   * '[rwx-]{3}'
   * @param callback The callback
   */
  checkAccess(accountName: string, path: string, fsaction: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * check access.
   * @param fsaction File system operation read/write/execute in string form, matching regex pattern
   * '[rwx-]{3}'
   * @param options The optional parameters
   * @param callback The callback
   */
  checkAccess(accountName: string, path: string, fsaction: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  checkAccess(accountName: string, path: string, fsaction: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        fsaction,
        options
      },
      checkAccessOperationSpec,
      callback);
  }

  /**
   * Creates a directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemMkdirsResponse>
   */
  mkdirs(accountName: string, path: string, options?: Models.FileSystemMkdirsOptionalParams): Promise<Models.FileSystemMkdirsResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to create.
   * @param callback The callback
   */
  mkdirs(accountName: string, path: string, callback: msRest.ServiceCallback<Models.FileOperationResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  mkdirs(accountName: string, path: string, options: Models.FileSystemMkdirsOptionalParams, callback: msRest.ServiceCallback<Models.FileOperationResult>): void;
  mkdirs(accountName: string, path: string, options?: Models.FileSystemMkdirsOptionalParams, callback?: msRest.ServiceCallback<Models.FileOperationResult>): Promise<Models.FileSystemMkdirsResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      mkdirsOperationSpec,
      callback) as Promise<Models.FileSystemMkdirsResponse>;
  }

  /**
   * Concatenates the list of source files into the destination file, removing all source files upon
   * success.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from
   * the concatenation.
   * @param sources A list of comma separated Data Lake Store paths (starting with '/') of the files
   * to concatenate, in the order in which they should be concatenated.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  concat(accountName: string, path: string, sources: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from
   * the concatenation.
   * @param sources A list of comma separated Data Lake Store paths (starting with '/') of the files
   * to concatenate, in the order in which they should be concatenated.
   * @param callback The callback
   */
  concat(accountName: string, path: string, sources: string[], callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from
   * the concatenation.
   * @param sources A list of comma separated Data Lake Store paths (starting with '/') of the files
   * to concatenate, in the order in which they should be concatenated.
   * @param options The optional parameters
   * @param callback The callback
   */
  concat(accountName: string, path: string, sources: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  concat(accountName: string, path: string, sources: string[], options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        sources,
        options
      },
      concatOperationSpec,
      callback);
  }

  /**
   * Concatenates the list of source files into the destination file, deleting all source files upon
   * success. This method accepts more source file paths than the Concat method. This method and the
   * parameters it accepts are subject to change for usability in an upcoming version.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from
   * the concatenation.
   * @param streamContents A list of Data Lake Store paths (starting with '/') of the source files.
   * Must be a comma-separated path list in the format:
   * sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  msConcat(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options?: Models.FileSystemMsConcatOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from
   * the concatenation.
   * @param streamContents A list of Data Lake Store paths (starting with '/') of the source files.
   * Must be a comma-separated path list in the format:
   * sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
   * @param callback The callback
   */
  msConcat(accountName: string, path: string, streamContents: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the destination file resulting from
   * the concatenation.
   * @param streamContents A list of Data Lake Store paths (starting with '/') of the source files.
   * Must be a comma-separated path list in the format:
   * sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
   * @param options The optional parameters
   * @param callback The callback
   */
  msConcat(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options: Models.FileSystemMsConcatOptionalParams, callback: msRest.ServiceCallback<void>): void;
  msConcat(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options?: Models.FileSystemMsConcatOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        streamContents,
        options
      },
      msConcatOperationSpec,
      callback);
  }

  /**
   * Get the list of file status objects specified by the file path, with optional pagination
   * parameters
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to list.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemListFileStatusResponse>
   */
  listFileStatus(accountName: string, path: string, options?: Models.FileSystemListFileStatusOptionalParams): Promise<Models.FileSystemListFileStatusResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to list.
   * @param callback The callback
   */
  listFileStatus(accountName: string, path: string, callback: msRest.ServiceCallback<Models.FileStatusesResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory to list.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFileStatus(accountName: string, path: string, options: Models.FileSystemListFileStatusOptionalParams, callback: msRest.ServiceCallback<Models.FileStatusesResult>): void;
  listFileStatus(accountName: string, path: string, options?: Models.FileSystemListFileStatusOptionalParams, callback?: msRest.ServiceCallback<Models.FileStatusesResult>): Promise<Models.FileSystemListFileStatusResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      listFileStatusOperationSpec,
      callback) as Promise<Models.FileSystemListFileStatusResponse>;
  }

  /**
   * Gets the file content summary object specified by the file path.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file for which to retrieve the
   * summary.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemGetContentSummaryResponse>
   */
  getContentSummary(accountName: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.FileSystemGetContentSummaryResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file for which to retrieve the
   * summary.
   * @param callback The callback
   */
  getContentSummary(accountName: string, path: string, callback: msRest.ServiceCallback<Models.ContentSummaryResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file for which to retrieve the
   * summary.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContentSummary(accountName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContentSummaryResult>): void;
  getContentSummary(accountName: string, path: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ContentSummaryResult>): Promise<Models.FileSystemGetContentSummaryResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      getContentSummaryOperationSpec,
      callback) as Promise<Models.FileSystemGetContentSummaryResponse>;
  }

  /**
   * Get the file status object specified by the file path.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * retrieve the status.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemGetFileStatusResponse>
   */
  getFileStatus(accountName: string, path: string, options?: Models.FileSystemGetFileStatusOptionalParams): Promise<Models.FileSystemGetFileStatusResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * retrieve the status.
   * @param callback The callback
   */
  getFileStatus(accountName: string, path: string, callback: msRest.ServiceCallback<Models.FileStatusResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * retrieve the status.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFileStatus(accountName: string, path: string, options: Models.FileSystemGetFileStatusOptionalParams, callback: msRest.ServiceCallback<Models.FileStatusResult>): void;
  getFileStatus(accountName: string, path: string, options?: Models.FileSystemGetFileStatusOptionalParams, callback?: msRest.ServiceCallback<Models.FileStatusResult>): Promise<Models.FileSystemGetFileStatusResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      getFileStatusOperationSpec,
      callback) as Promise<Models.FileSystemGetFileStatusResponse>;
  }

  /**
   * Opens and reads from the specified file.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to open.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemOpenResponse>
   */
  open(accountName: string, path: string, options?: Models.FileSystemOpenOptionalParams): Promise<Models.FileSystemOpenResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to open.
   * @param callback The callback
   */
  open(accountName: string, path: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to open.
   * @param options The optional parameters
   * @param callback The callback
   */
  open(accountName: string, path: string, options: Models.FileSystemOpenOptionalParams, callback: msRest.ServiceCallback<void>): void;
  open(accountName: string, path: string, options?: Models.FileSystemOpenOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<Models.FileSystemOpenResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      openOperationSpec,
      callback) as Promise<Models.FileSystemOpenResponse>;
  }

  /**
   * Used for serial appends to the specified file. NOTE: The target must not contain data added by
   * ConcurrentAppend. ConcurrentAppend and Append cannot be used interchangeably; once a target file
   * has been modified using either of these append options, the other append option cannot be used
   * on the target file.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append.
   * @param streamContents The file contents to include when appending to the file.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  append(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options?: Models.FileSystemAppendOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append.
   * @param streamContents The file contents to include when appending to the file.
   * @param callback The callback
   */
  append(accountName: string, path: string, streamContents: msRest.HttpRequestBody, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to which to append.
   * @param streamContents The file contents to include when appending to the file.
   * @param options The optional parameters
   * @param callback The callback
   */
  append(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options: Models.FileSystemAppendOptionalParams, callback: msRest.ServiceCallback<void>): void;
  append(accountName: string, path: string, streamContents: msRest.HttpRequestBody, options?: Models.FileSystemAppendOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        streamContents,
        options
      },
      appendOperationSpec,
      callback);
  }

  /**
   * Creates a file with optionally specified content. NOTE: If content is provided, the resulting
   * file cannot be modified using ConcurrentAppend.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to create.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  create(accountName: string, path: string, options?: Models.FileSystemCreateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to create.
   * @param callback The callback
   */
  create(accountName: string, path: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(accountName: string, path: string, options: Models.FileSystemCreateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  create(accountName: string, path: string, options?: Models.FileSystemCreateOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      createOperationSpec,
      callback);
  }

  /**
   * Sets the Access Control List (ACL) for a file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory on which to
   * set the ACL.
   * @param aclspec The ACL spec included in ACL creation operations in the format
   * '[default:]user|group|other::r|-w|-x|-'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setAcl(accountName: string, path: string, aclspec: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory on which to
   * set the ACL.
   * @param aclspec The ACL spec included in ACL creation operations in the format
   * '[default:]user|group|other::r|-w|-x|-'
   * @param callback The callback
   */
  setAcl(accountName: string, path: string, aclspec: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory on which to
   * set the ACL.
   * @param aclspec The ACL spec included in ACL creation operations in the format
   * '[default:]user|group|other::r|-w|-x|-'
   * @param options The optional parameters
   * @param callback The callback
   */
  setAcl(accountName: string, path: string, aclspec: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  setAcl(accountName: string, path: string, aclspec: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        aclspec,
        options
      },
      setAclOperationSpec,
      callback);
  }

  /**
   * Modifies existing Access Control List (ACL) entries on a file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being modified.
   * @param aclspec The ACL specification included in ACL modification operations in the format
   * '[default:]user|group|other::r|-w|-x|-'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  modifyAclEntries(accountName: string, path: string, aclspec: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being modified.
   * @param aclspec The ACL specification included in ACL modification operations in the format
   * '[default:]user|group|other::r|-w|-x|-'
   * @param callback The callback
   */
  modifyAclEntries(accountName: string, path: string, aclspec: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being modified.
   * @param aclspec The ACL specification included in ACL modification operations in the format
   * '[default:]user|group|other::r|-w|-x|-'
   * @param options The optional parameters
   * @param callback The callback
   */
  modifyAclEntries(accountName: string, path: string, aclspec: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  modifyAclEntries(accountName: string, path: string, aclspec: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        aclspec,
        options
      },
      modifyAclEntriesOperationSpec,
      callback);
  }

  /**
   * Removes existing Access Control List (ACL) entries for a file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being removed.
   * @param aclspec The ACL spec included in ACL removal operations in the format
   * '[default:]user|group|other'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeAclEntries(accountName: string, path: string, aclspec: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being removed.
   * @param aclspec The ACL spec included in ACL removal operations in the format
   * '[default:]user|group|other'
   * @param callback The callback
   */
  removeAclEntries(accountName: string, path: string, aclspec: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being removed.
   * @param aclspec The ACL spec included in ACL removal operations in the format
   * '[default:]user|group|other'
   * @param options The optional parameters
   * @param callback The callback
   */
  removeAclEntries(accountName: string, path: string, aclspec: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeAclEntries(accountName: string, path: string, aclspec: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        aclspec,
        options
      },
      removeAclEntriesOperationSpec,
      callback);
  }

  /**
   * Removes the existing Default Access Control List (ACL) of the specified directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory with the default ACL
   * being removed.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeDefaultAcl(accountName: string, path: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory with the default ACL
   * being removed.
   * @param callback The callback
   */
  removeDefaultAcl(accountName: string, path: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the directory with the default ACL
   * being removed.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeDefaultAcl(accountName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeDefaultAcl(accountName: string, path: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      removeDefaultAclOperationSpec,
      callback);
  }

  /**
   * Removes the existing Access Control List (ACL) of the specified file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being removed.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeAcl(accountName: string, path: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being removed.
   * @param callback The callback
   */
  removeAcl(accountName: string, path: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory with the ACL
   * being removed.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeAcl(accountName: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeAcl(accountName: string, path: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      removeAclOperationSpec,
      callback);
  }

  /**
   * Gets Access Control List (ACL) entries for the specified file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * get the ACL.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemGetAclStatusResponse>
   */
  getAclStatus(accountName: string, path: string, options?: Models.FileSystemGetAclStatusOptionalParams): Promise<Models.FileSystemGetAclStatusResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * get the ACL.
   * @param callback The callback
   */
  getAclStatus(accountName: string, path: string, callback: msRest.ServiceCallback<Models.AclStatusResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * get the ACL.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAclStatus(accountName: string, path: string, options: Models.FileSystemGetAclStatusOptionalParams, callback: msRest.ServiceCallback<Models.AclStatusResult>): void;
  getAclStatus(accountName: string, path: string, options?: Models.FileSystemGetAclStatusOptionalParams, callback?: msRest.ServiceCallback<Models.AclStatusResult>): Promise<Models.FileSystemGetAclStatusResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      getAclStatusOperationSpec,
      callback) as Promise<Models.FileSystemGetAclStatusResponse>;
  }

  /**
   * Deletes the requested file or directory, optionally recursively.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemDeleteMethodResponse>
   */
  deleteMethod(accountName: string, path: string, options?: Models.FileSystemDeleteMethodOptionalParams): Promise<Models.FileSystemDeleteMethodResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to delete.
   * @param callback The callback
   */
  deleteMethod(accountName: string, path: string, callback: msRest.ServiceCallback<Models.FileOperationResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(accountName: string, path: string, options: Models.FileSystemDeleteMethodOptionalParams, callback: msRest.ServiceCallback<Models.FileOperationResult>): void;
  deleteMethod(accountName: string, path: string, options?: Models.FileSystemDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<Models.FileOperationResult>): Promise<Models.FileSystemDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.FileSystemDeleteMethodResponse>;
  }

  /**
   * Rename a file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to
   * move/rename.
   * @param destination The path to move/rename the file or folder to
   * @param [options] The optional parameters
   * @returns Promise<Models.FileSystemRenameResponse>
   */
  rename(accountName: string, path: string, destination: string, options?: msRest.RequestOptionsBase): Promise<Models.FileSystemRenameResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to
   * move/rename.
   * @param destination The path to move/rename the file or folder to
   * @param callback The callback
   */
  rename(accountName: string, path: string, destination: string, callback: msRest.ServiceCallback<Models.FileOperationResult>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory to
   * move/rename.
   * @param destination The path to move/rename the file or folder to
   * @param options The optional parameters
   * @param callback The callback
   */
  rename(accountName: string, path: string, destination: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileOperationResult>): void;
  rename(accountName: string, path: string, destination: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.FileOperationResult>): Promise<Models.FileSystemRenameResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        destination,
        options
      },
      renameOperationSpec,
      callback) as Promise<Models.FileSystemRenameResponse>;
  }

  /**
   * Sets the owner of a file or directory.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * set the owner.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setOwner(accountName: string, path: string, options?: Models.FileSystemSetOwnerOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * set the owner.
   * @param callback The callback
   */
  setOwner(accountName: string, path: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * set the owner.
   * @param options The optional parameters
   * @param callback The callback
   */
  setOwner(accountName: string, path: string, options: Models.FileSystemSetOwnerOptionalParams, callback: msRest.ServiceCallback<void>): void;
  setOwner(accountName: string, path: string, options?: Models.FileSystemSetOwnerOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      setOwnerOperationSpec,
      callback);
  }

  /**
   * Sets the permission of the file or folder.
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * set the permission.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setPermission(accountName: string, path: string, options?: Models.FileSystemSetPermissionOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * set the permission.
   * @param callback The callback
   */
  setPermission(accountName: string, path: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param accountName The Azure Data Lake Store account to execute filesystem operations on.
   * @param path The Data Lake Store path (starting with '/') of the file or directory for which to
   * set the permission.
   * @param options The optional parameters
   * @param callback The callback
   */
  setPermission(accountName: string, path: string, options: Models.FileSystemSetPermissionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  setPermission(accountName: string, path: string, options?: Models.FileSystemSetPermissionOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        accountName,
        path,
        options
      },
      setPermissionOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const setFileExpiryOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "WebHdfsExt/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.expiryOption,
    Parameters.expireTime,
    Parameters.op0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const concurrentAppendOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "WebHdfsExt/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.appendMode,
    Parameters.op1,
    Parameters.syncFlag0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.transferEncoding,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "streamContents",
    mapper: {
      required: true,
      serializedName: "streamContents",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const checkAccessOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.fsaction,
    Parameters.op2,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const mkdirsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.permission0,
    Parameters.op3,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileOperationResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const concatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.sources,
    Parameters.op4,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const msConcatOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.deleteSourceDirectory,
    Parameters.op5,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "streamContents",
    mapper: {
      required: true,
      serializedName: "streamContents",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const listFileStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.listSize,
    Parameters.listAfter,
    Parameters.listBefore,
    Parameters.tooId,
    Parameters.op6,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileStatusesResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const getContentSummaryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.op7,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContentSummaryResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const getFileStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.tooId,
    Parameters.op8,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileStatusResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const openOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.length,
    Parameters.offset,
    Parameters.fileSessionId,
    Parameters.read,
    Parameters.op9,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const appendOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.offset,
    Parameters.syncFlag1,
    Parameters.leaseId,
    Parameters.fileSessionId,
    Parameters.appendParameter,
    Parameters.op10,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "streamContents",
    mapper: {
      required: true,
      serializedName: "streamContents",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.overwrite,
    Parameters.syncFlag1,
    Parameters.leaseId,
    Parameters.permission0,
    Parameters.write,
    Parameters.op11,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "streamContents"
    ],
    mapper: {
      serializedName: "streamContents",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const setAclOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.aclspec,
    Parameters.op12,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const modifyAclEntriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.aclspec,
    Parameters.op13,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const removeAclEntriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.aclspec,
    Parameters.op14,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const removeDefaultAclOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.op15,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const removeAclOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.op16,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const getAclStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.tooId,
    Parameters.op17,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AclStatusResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.op18,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileOperationResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const renameOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.destination,
    Parameters.op19,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FileOperationResult
    },
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const setOwnerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.owner,
    Parameters.group,
    Parameters.op20,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};

const setPermissionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "webhdfs/v1/{path}",
  urlParameters: [
    Parameters.accountName,
    Parameters.adlsFileSystemDnsSuffix,
    Parameters.path
  ],
  queryParameters: [
    Parameters.permission1,
    Parameters.op21,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AdlsError
    }
  },
  serializer
};
