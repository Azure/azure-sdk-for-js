/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const FileOperationResult: msRest.CompositeMapper = {
  serializedName: "FileOperationResult",
  type: {
    name: "Composite",
    className: "FileOperationResult",
    modelProperties: {
      operationResult: {
        readOnly: true,
        serializedName: "boolean",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AclStatus: msRest.CompositeMapper = {
  serializedName: "AclStatus",
  type: {
    name: "Composite",
    className: "AclStatus",
    modelProperties: {
      entries: {
        serializedName: "entries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      group: {
        serializedName: "group",
        type: {
          name: "String"
        }
      },
      owner: {
        serializedName: "owner",
        type: {
          name: "String"
        }
      },
      permission: {
        serializedName: "permission",
        type: {
          name: "String"
        }
      },
      stickyBit: {
        readOnly: true,
        serializedName: "stickyBit",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AclStatusResult: msRest.CompositeMapper = {
  serializedName: "AclStatusResult",
  type: {
    name: "Composite",
    className: "AclStatusResult",
    modelProperties: {
      aclStatus: {
        serializedName: "aclStatus",
        type: {
          name: "Composite",
          className: "AclStatus"
        }
      }
    }
  }
};

export const ContentSummary: msRest.CompositeMapper = {
  serializedName: "ContentSummary",
  type: {
    name: "Composite",
    className: "ContentSummary",
    modelProperties: {
      directoryCount: {
        readOnly: true,
        serializedName: "directoryCount",
        type: {
          name: "Number"
        }
      },
      fileCount: {
        readOnly: true,
        serializedName: "fileCount",
        type: {
          name: "Number"
        }
      },
      length: {
        readOnly: true,
        serializedName: "length",
        type: {
          name: "Number"
        }
      },
      spaceConsumed: {
        readOnly: true,
        serializedName: "spaceConsumed",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContentSummaryResult: msRest.CompositeMapper = {
  serializedName: "ContentSummaryResult",
  type: {
    name: "Composite",
    className: "ContentSummaryResult",
    modelProperties: {
      contentSummary: {
        readOnly: true,
        serializedName: "contentSummary",
        type: {
          name: "Composite",
          className: "ContentSummary"
        }
      }
    }
  }
};

export const FileStatusProperties: msRest.CompositeMapper = {
  serializedName: "FileStatusProperties",
  type: {
    name: "Composite",
    className: "FileStatusProperties",
    modelProperties: {
      accessTime: {
        readOnly: true,
        serializedName: "accessTime",
        type: {
          name: "Number"
        }
      },
      blockSize: {
        readOnly: true,
        serializedName: "blockSize",
        type: {
          name: "Number"
        }
      },
      expirationTime: {
        readOnly: true,
        serializedName: "msExpirationTime",
        type: {
          name: "Number"
        }
      },
      group: {
        readOnly: true,
        serializedName: "group",
        type: {
          name: "String"
        }
      },
      length: {
        readOnly: true,
        serializedName: "length",
        type: {
          name: "Number"
        }
      },
      modificationTime: {
        readOnly: true,
        serializedName: "modificationTime",
        type: {
          name: "Number"
        }
      },
      owner: {
        readOnly: true,
        serializedName: "owner",
        type: {
          name: "String"
        }
      },
      pathSuffix: {
        readOnly: true,
        serializedName: "pathSuffix",
        type: {
          name: "String"
        }
      },
      permission: {
        readOnly: true,
        serializedName: "permission",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "FILE",
            "DIRECTORY"
          ]
        }
      },
      aclBit: {
        readOnly: true,
        serializedName: "aclBit",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FileStatuses: msRest.CompositeMapper = {
  serializedName: "FileStatuses",
  type: {
    name: "Composite",
    className: "FileStatuses",
    modelProperties: {
      fileStatus: {
        readOnly: true,
        serializedName: "fileStatus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FileStatusProperties"
            }
          }
        }
      }
    }
  }
};

export const FileStatusesResult: msRest.CompositeMapper = {
  serializedName: "FileStatusesResult",
  type: {
    name: "Composite",
    className: "FileStatusesResult",
    modelProperties: {
      fileStatuses: {
        readOnly: true,
        serializedName: "fileStatuses",
        type: {
          name: "Composite",
          className: "FileStatuses"
        }
      }
    }
  }
};

export const FileStatusResult: msRest.CompositeMapper = {
  serializedName: "FileStatusResult",
  type: {
    name: "Composite",
    className: "FileStatusResult",
    modelProperties: {
      fileStatus: {
        readOnly: true,
        serializedName: "fileStatus",
        type: {
          name: "Composite",
          className: "FileStatusProperties"
        }
      }
    }
  }
};

export const AdlsRemoteException: msRest.CompositeMapper = {
  serializedName: "AdlsRemoteException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "exception",
      clientName: "exception"
    },
    uberParent: "AdlsRemoteException",
    className: "AdlsRemoteException",
    modelProperties: {
      javaClassName: {
        readOnly: true,
        serializedName: "javaClassName",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      exception: {
        required: true,
        serializedName: "exception",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdlsIllegalArgumentException: msRest.CompositeMapper = {
  serializedName: "IllegalArgumentException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsIllegalArgumentException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsUnsupportedOperationException: msRest.CompositeMapper = {
  serializedName: "UnsupportedOperationException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsUnsupportedOperationException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsSecurityException: msRest.CompositeMapper = {
  serializedName: "SecurityException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsSecurityException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsIOException: msRest.CompositeMapper = {
  serializedName: "IOException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsIOException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsFileNotFoundException: msRest.CompositeMapper = {
  serializedName: "FileNotFoundException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsFileNotFoundException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsFileAlreadyExistsException: msRest.CompositeMapper = {
  serializedName: "FileAlreadyExistsException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsFileAlreadyExistsException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsBadOffsetException: msRest.CompositeMapper = {
  serializedName: "BadOffsetException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsBadOffsetException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsRuntimeException: msRest.CompositeMapper = {
  serializedName: "RuntimeException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsRuntimeException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsAccessControlException: msRest.CompositeMapper = {
  serializedName: "AccessControlException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsAccessControlException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsThrottledException: msRest.CompositeMapper = {
  serializedName: "ThrottledException",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AdlsRemoteException.type.polymorphicDiscriminator,
    uberParent: "AdlsRemoteException",
    className: "AdlsThrottledException",
    modelProperties: {
      ...AdlsRemoteException.type.modelProperties
    }
  }
};

export const AdlsError: msRest.CompositeMapper = {
  serializedName: "AdlsError",
  type: {
    name: "Composite",
    className: "AdlsError",
    modelProperties: {
      remoteException: {
        readOnly: true,
        serializedName: "remoteException",
        type: {
          name: "Composite",
          polymorphicDiscriminator: {
            serializedName: "exception",
            clientName: "exception"
          },
          uberParent: "AdlsRemoteException",
          className: "AdlsRemoteException"
        }
      }
    }
  }
};

export const discriminators = {
  'AdlsRemoteException.IllegalArgumentException' : AdlsIllegalArgumentException,
  'AdlsRemoteException.UnsupportedOperationException' : AdlsUnsupportedOperationException,
  'AdlsRemoteException.SecurityException' : AdlsSecurityException,
  'AdlsRemoteException.IOException' : AdlsIOException,
  'AdlsRemoteException.FileNotFoundException' : AdlsFileNotFoundException,
  'AdlsRemoteException.FileAlreadyExistsException' : AdlsFileAlreadyExistsException,
  'AdlsRemoteException.BadOffsetException' : AdlsBadOffsetException,
  'AdlsRemoteException.RuntimeException' : AdlsRuntimeException,
  'AdlsRemoteException.AccessControlException' : AdlsAccessControlException,
  'AdlsRemoteException.ThrottledException' : AdlsThrottledException,
  'AdlsRemoteException' : AdlsRemoteException
};
