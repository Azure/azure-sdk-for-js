/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing FileOperationResult.
 * The result of the request or operation.
 *
 */
export interface FileOperationResult {
  /**
   * @member {boolean} [operationResult] the result of the operation or
   * request.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationResult?: boolean;
}

/**
 * @interface
 * An interface representing AclStatus.
 * Data Lake Store file or directory Access Control List information.
 *
 */
export interface AclStatus {
  /**
   * @member {string[]} [entries] the list of ACLSpec entries on a file or
   * directory.
   */
  entries?: string[];
  /**
   * @member {string} [group] the group owner, an AAD Object ID.
   */
  group?: string;
  /**
   * @member {string} [owner] the user owner, an AAD Object ID.
   */
  owner?: string;
  /**
   * @member {string} [permission] The octal representation of the unnamed
   * user, mask and other permissions.
   */
  permission?: string;
  /**
   * @member {boolean} [stickyBit] the indicator of whether the sticky bit is
   * on or off.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly stickyBit?: boolean;
}

/**
 * @interface
 * An interface representing AclStatusResult.
 * Data Lake Store file or directory Access Control List information.
 *
 */
export interface AclStatusResult {
  /**
   * @member {AclStatus} [aclStatus] the AclStatus object for a given file or
   * directory.
   */
  aclStatus?: AclStatus;
}

/**
 * @interface
 * An interface representing ContentSummary.
 * Data Lake Store content summary information
 *
 */
export interface ContentSummary {
  /**
   * @member {number} [directoryCount] the number of directories.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly directoryCount?: number;
  /**
   * @member {number} [fileCount] the number of files.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fileCount?: number;
  /**
   * @member {number} [length] the number of bytes used by the content.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly length?: number;
  /**
   * @member {number} [spaceConsumed] the disk space consumed by the content.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly spaceConsumed?: number;
}

/**
 * @interface
 * An interface representing ContentSummaryResult.
 * Data Lake Store filesystem content summary information response.
 *
 */
export interface ContentSummaryResult {
  /**
   * @member {ContentSummary} [contentSummary] the content summary for the
   * specified path
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly contentSummary?: ContentSummary;
}

/**
 * @interface
 * An interface representing FileStatusProperties.
 * Data Lake Store file or directory information.
 *
 */
export interface FileStatusProperties {
  /**
   * @member {number} [accessTime] the last access time as ticks since the
   * epoch.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accessTime?: number;
  /**
   * @member {number} [blockSize] the block size for the file.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly blockSize?: number;
  /**
   * @member {number} [expirationTime] Gets the expiration time, if any, as
   * ticks since the epoch. If the value is 0 or DateTime.MaxValue there is no
   * expiration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly expirationTime?: number;
  /**
   * @member {string} [group] the group owner.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly group?: string;
  /**
   * @member {number} [length] the number of bytes in a file.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly length?: number;
  /**
   * @member {number} [modificationTime] the modification time as ticks since
   * the epoch.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly modificationTime?: number;
  /**
   * @member {string} [owner] the user who is the owner.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly owner?: string;
  /**
   * @member {string} [pathSuffix] the path suffix.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly pathSuffix?: string;
  /**
   * @member {string} [permission] the permission represented as an string.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly permission?: string;
  /**
   * @member {FileType} [type] the type of the path object. Possible values
   * include: 'FILE', 'DIRECTORY'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: FileType;
  /**
   * @member {boolean} [aclBit] flag to indicate if extended acls are enabled
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly aclBit?: boolean;
}

/**
 * @interface
 * An interface representing FileStatuses.
 * Data Lake Store file status list information.
 *
 */
export interface FileStatuses {
  /**
   * @member {FileStatusProperties[]} [fileStatus] the object containing the
   * list of properties of the files.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fileStatus?: FileStatusProperties[];
}

/**
 * @interface
 * An interface representing FileStatusesResult.
 * Data Lake Store filesystem file status list information response.
 *
 */
export interface FileStatusesResult {
  /**
   * @member {FileStatuses} [fileStatuses] the object representing the list of
   * file statuses.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fileStatuses?: FileStatuses;
}

/**
 * @interface
 * An interface representing FileStatusResult.
 * Data Lake Store filesystem file status information response.
 *
 */
export interface FileStatusResult {
  /**
   * @member {FileStatusProperties} [fileStatus] the file status object
   * associated with the specified path.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fileStatus?: FileStatusProperties;
}

/**
 * Contains the possible cases for AdlsRemoteException.
 */
export type AdlsRemoteExceptionUnion = AdlsRemoteException | AdlsIllegalArgumentException | AdlsUnsupportedOperationException | AdlsSecurityException | AdlsIOException | AdlsFileNotFoundException | AdlsFileAlreadyExistsException | AdlsBadOffsetException | AdlsRuntimeException | AdlsAccessControlException | AdlsThrottledException;

/**
 * @interface
 * An interface representing AdlsRemoteException.
 * Data Lake Store filesystem exception based on the WebHDFS definition for
 * RemoteExceptions. This is a WebHDFS 'catch all' exception
 *
 */
export interface AdlsRemoteException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "AdlsRemoteException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsIllegalArgumentException.
 * A WebHDFS exception thrown indicating that one more arguments is incorrect.
 * Thrown when a 400 error response code is returned (bad request).
 *
 */
export interface AdlsIllegalArgumentException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "IllegalArgumentException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsUnsupportedOperationException.
 * A WebHDFS exception thrown indicating that the requested operation is not
 * supported. Thrown when a 400 error response code is returned (bad request).
 *
 */
export interface AdlsUnsupportedOperationException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "UnsupportedOperationException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsSecurityException.
 * A WebHDFS exception thrown indicating that access is denied. Thrown when a
 * 401 error response code is returned (Unauthorized).
 *
 */
export interface AdlsSecurityException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "SecurityException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsIOException.
 * A WebHDFS exception thrown indicating there was an IO (read or write) error.
 * Thrown when a 403 error response code is returned (forbidden).
 *
 */
export interface AdlsIOException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "IOException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsFileNotFoundException.
 * A WebHDFS exception thrown indicating the file or folder could not be found.
 * Thrown when a 404 error response code is returned (not found).
 *
 */
export interface AdlsFileNotFoundException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "FileNotFoundException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsFileAlreadyExistsException.
 * A WebHDFS exception thrown indicating the file or folder already exists.
 * Thrown when a 403 error response code is returned (forbidden).
 *
 */
export interface AdlsFileAlreadyExistsException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "FileAlreadyExistsException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsBadOffsetException.
 * A WebHDFS exception thrown indicating the append or read is from a bad
 * offset. Thrown when a 400 error response code is returned for append and
 * open operations (Bad request).
 *
 */
export interface AdlsBadOffsetException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "BadOffsetException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsRuntimeException.
 * A WebHDFS exception thrown when an unexpected error occurs during an
 * operation. Thrown when a 500 error response code is returned (Internal
 * server error).
 *
 */
export interface AdlsRuntimeException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "RuntimeException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsAccessControlException.
 * A WebHDFS exception thrown indicating that access is denied due to
 * insufficient permissions. Thrown when a 403 error response code is returned
 * (forbidden).
 *
 */
export interface AdlsAccessControlException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "AccessControlException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsThrottledException.
 * A WebHDFS exception thrown indicating that the request is being throttled.
 * Reducing the number of requests or request size helps to mitigate this
 * error.
 *
 */
export interface AdlsThrottledException {
  /**
   * @member {string} exception Polymorphic Discriminator
   */
  exception: "ThrottledException";
  /**
   * @member {string} [javaClassName] the full class package name for the
   * exception thrown, such as 'java.lang.IllegalArgumentException'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly javaClassName?: string;
  /**
   * @member {string} [message] the message associated with the exception that
   * was thrown, such as 'Invalid value for webhdfs parameter
   * "permission":...'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing AdlsError.
 * Data Lake Store filesystem error containing a specific WebHDFS exception.
 *
 */
export interface AdlsError {
  /**
   * @member {AdlsRemoteExceptionUnion} [remoteException] the object
   * representing the actual WebHDFS exception being returned.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly remoteException?: AdlsRemoteExceptionUnion;
}

/**
 * @interface
 * An interface representing FileSystemSetFileExpiryOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemSetFileExpiryOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [expireTime] The time that the file will expire,
   * corresponding to the ExpiryOption that was set.
   */
  expireTime?: number;
}

/**
 * @interface
 * An interface representing FileSystemConcurrentAppendOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemConcurrentAppendOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {AppendModeType} [appendMode] Indicates the concurrent append call
   * should create the file if it doesn't exist or just open the existing file
   * for append. Possible values include: 'autocreate'
   */
  appendMode?: AppendModeType;
  /**
   * @member {SyncFlag} [syncFlag] Optionally indicates what to do after
   * completion of the concurrent append. DATA indicates that more data will be
   * sent immediately by the client, the file handle should remain open/locked,
   * and file metadata (including file length, last modified time) should NOT
   * get updated. METADATA indicates that more data will be sent immediately by
   * the client, the file handle should remain open/locked, and file metadata
   * should get updated. CLOSE indicates that the client is done sending data,
   * the file handle should be closed/unlocked, and file metadata should get
   * updated. Possible values include: 'DATA', 'METADATA', 'CLOSE'. Default
   * value: 'DATA' .
   */
  syncFlag?: SyncFlag;
}

/**
 * @interface
 * An interface representing FileSystemMkdirsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemMkdirsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [permission] Optional octal permission with which the
   * directory should be created.
   */
  permission?: number;
}

/**
 * @interface
 * An interface representing FileSystemMsConcatOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemMsConcatOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [deleteSourceDirectory] Indicates that as an
   * optimization instead of deleting each individual source stream, delete the
   * source stream folder if all streams are in the same folder instead. This
   * results in a substantial performance improvement when the only streams in
   * the folder are part of the concatenation operation. WARNING: This includes
   * the deletion of any other files that are not source files. Only set this
   * to true when source files are the only files in the source directory.
   */
  deleteSourceDirectory?: boolean;
}

/**
 * @interface
 * An interface representing FileSystemListFileStatusOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemListFileStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [listSize] Gets or sets the number of items to return.
   * Optional.
   */
  listSize?: number;
  /**
   * @member {string} [listAfter] Gets or sets the item or lexographical index
   * after which to begin returning results. For example, a file list of
   * 'a','b','d' and listAfter='b' will return 'd', and a listAfter='c' will
   * also return 'd'. Optional.
   */
  listAfter?: string;
  /**
   * @member {string} [listBefore] Gets or sets the item or lexographical index
   * before which to begin returning results. For example, a file list of
   * 'a','b','d' and listBefore='d' will return 'a','b', and a listBefore='c'
   * will also return 'a','b'. Optional.
   */
  listBefore?: string;
  /**
   * @member {boolean} [tooId] An optional switch to return friendly names in
   * place of owner and group. tooid=false returns friendly names instead of
   * the AAD Object ID. Default value is true, returning AAD object IDs.
   */
  tooId?: boolean;
}

/**
 * @interface
 * An interface representing FileSystemGetFileStatusOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemGetFileStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [tooId] An optional switch to return friendly names in
   * place of owner and group. tooid=false returns friendly names instead of
   * the AAD Object ID. Default value is true, returning AAD object IDs.
   */
  tooId?: boolean;
}

/**
 * @interface
 * An interface representing FileSystemOpenOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemOpenOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [length] The number of bytes that the server will attempt
   * to retrieve. It will retrieve <= length bytes.
   */
  length?: number;
  /**
   * @member {number} [offset] The byte offset to start reading data from.
   */
  offset?: number;
  /**
   * @member {string} [fileSessionId] Optional unique GUID per file indicating
   * all the reads with the same fileSessionId are from the same client and
   * same session. This will give a performance benefit.
   */
  fileSessionId?: string;
}

/**
 * @interface
 * An interface representing FileSystemAppendOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemAppendOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [offset] The optional offset in the stream to begin the
   * append operation. Default is to append at the end of the stream.
   */
  offset?: number;
  /**
   * @member {SyncFlag} [syncFlag] Optionally indicates what to do after
   * completion of the concurrent append. DATA indicates that more data will be
   * sent immediately by the client, the file handle should remain open/locked,
   * and file metadata (including file length, last modified time) should NOT
   * get updated. METADATA indicates that more data will be sent immediately by
   * the client, the file handle should remain open/locked, and file metadata
   * should get updated. CLOSE indicates that the client is done sending data,
   * the file handle should be closed/unlocked, and file metadata should get
   * updated. Possible values include: 'DATA', 'METADATA', 'CLOSE'. Default
   * value: 'CLOSE' .
   */
  syncFlag?: SyncFlag;
  /**
   * @member {string} [leaseId] Optional unique GUID per file to ensure single
   * writer semantics, meaning that only clients that append to the file with
   * the same leaseId will be allowed to do so.
   */
  leaseId?: string;
  /**
   * @member {string} [fileSessionId] Optional unique GUID per file indicating
   * all the appends with the same fileSessionId are from the same client and
   * same session. This will give a performance benefit when syncFlag is DATA
   * or METADATA.
   */
  fileSessionId?: string;
}

/**
 * @interface
 * An interface representing FileSystemCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {msRest.HttpRequestBody} [streamContents] The file contents to
   * include when creating the file. This parameter is optional, resulting in
   * an empty file if not specified.
   */
  streamContents?: msRest.HttpRequestBody;
  /**
   * @member {boolean} [overwrite] The indication of if the file should be
   * overwritten.
   */
  overwrite?: boolean;
  /**
   * @member {SyncFlag} [syncFlag] Optionally indicates what to do after
   * completion of the create. DATA indicates that more data will be sent
   * immediately by the client, the file handle should remain open/locked, and
   * file metadata (including file length, last modified time) should NOT get
   * updated. METADATA indicates that more data will be sent immediately by the
   * client, the file handle should remain open/locked, and file metadata
   * should get updated. CLOSE indicates that the client is done sending data,
   * the file handle should be closed/unlocked, and file metadata should get
   * updated. Possible values include: 'DATA', 'METADATA', 'CLOSE'. Default
   * value: 'CLOSE' .
   */
  syncFlag?: SyncFlag;
  /**
   * @member {string} [leaseId] Optional unique GUID per file to ensure single
   * writer semantics, meaning that only clients that append to the file with
   * the same leaseId will be allowed to do so.
   */
  leaseId?: string;
  /**
   * @member {number} [permission] The octal representation of the unnamed
   * user, mask and other permissions that should be set for the file when
   * created. If not specified, it inherits these from the container.
   */
  permission?: number;
}

/**
 * @interface
 * An interface representing FileSystemGetAclStatusOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemGetAclStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [tooId] An optional switch to return friendly names in
   * place of object ID for ACL entries. tooid=false returns friendly names
   * instead of the AAD Object ID. Default value is true, returning AAD object
   * IDs.
   */
  tooId?: boolean;
}

/**
 * @interface
 * An interface representing FileSystemDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [recursive] The optional switch indicating if the delete
   * should be recursive
   */
  recursive?: boolean;
}

/**
 * @interface
 * An interface representing FileSystemSetOwnerOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemSetOwnerOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [owner] The AAD Object ID of the user owner of the file
   * or directory. If empty, the property will remain unchanged.
   */
  owner?: string;
  /**
   * @member {string} [group] The AAD Object ID of the group owner of the file
   * or directory. If empty, the property will remain unchanged.
   */
  group?: string;
}

/**
 * @interface
 * An interface representing FileSystemSetPermissionOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FileSystemSetPermissionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [permission] A string representation of the permission
   * (i.e 'rwx'). If empty, this property remains unchanged.
   */
  permission?: string;
}

/**
 * @interface
 * An interface representing DataLakeStoreFileSystemManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface DataLakeStoreFileSystemManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [adlsFileSystemDnsSuffix] Gets the URI used as the base
   * for all cloud service requests. Default value: 'azuredatalakestore.net' .
   */
  adlsFileSystemDnsSuffix?: string;
}


/**
 * Defines values for FileType.
 * Possible values include: 'FILE', 'DIRECTORY'
 * @readonly
 * @enum {string}
 */
export enum FileType {
  FILE = 'FILE',
  DIRECTORY = 'DIRECTORY',
}

/**
 * Defines values for ExpiryOptionType.
 * Possible values include: 'NeverExpire', 'RelativeToNow',
 * 'RelativeToCreationDate', 'Absolute'
 * @readonly
 * @enum {string}
 */
export enum ExpiryOptionType {
  NeverExpire = 'NeverExpire',
  RelativeToNow = 'RelativeToNow',
  RelativeToCreationDate = 'RelativeToCreationDate',
  Absolute = 'Absolute',
}

/**
 * Defines values for AppendModeType.
 * Possible values include: 'autocreate'
 * @readonly
 * @enum {string}
 */
export enum AppendModeType {
  Autocreate = 'autocreate',
}

/**
 * Defines values for SyncFlag.
 * Possible values include: 'DATA', 'METADATA', 'CLOSE'
 * @readonly
 * @enum {string}
 */
export enum SyncFlag {
  DATA = 'DATA',
  METADATA = 'METADATA',
  CLOSE = 'CLOSE',
}

/**
 * Contains response data for the mkdirs operation.
 */
export type FileSystemMkdirsResponse = FileOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileOperationResult;
    };
};

/**
 * Contains response data for the listFileStatus operation.
 */
export type FileSystemListFileStatusResponse = FileStatusesResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileStatusesResult;
    };
};

/**
 * Contains response data for the getContentSummary operation.
 */
export type FileSystemGetContentSummaryResponse = ContentSummaryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ContentSummaryResult;
    };
};

/**
 * Contains response data for the getFileStatus operation.
 */
export type FileSystemGetFileStatusResponse = FileStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileStatusResult;
    };
};

/**
 * Contains response data for the open operation.
 */
export type FileSystemOpenResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse;
};

/**
 * Contains response data for the getAclStatus operation.
 */
export type FileSystemGetAclStatusResponse = AclStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AclStatusResult;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type FileSystemDeleteMethodResponse = FileOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileOperationResult;
    };
};

/**
 * Contains response data for the rename operation.
 */
export type FileSystemRenameResponse = FileOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileOperationResult;
    };
};
