/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing Resource.
 * The resource model definition.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] The resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] The resource location.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The resource tags.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing SubResource.
 * The resource model definition for a nested resource.
 *
 * @extends BaseResource
 */
export interface SubResource extends BaseResource {
  /**
   * @member {string} [id] The resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing EncryptionIdentity.
 * The encryption identity properties.
 *
 */
export interface EncryptionIdentity {
  /**
   * @member {string} [principalId] The principal identifier associated with
   * the encryption.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly principalId?: string;
  /**
   * @member {string} [tenantId] The tenant identifier associated with the
   * encryption.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
}

/**
 * @interface
 * An interface representing KeyVaultMetaInfo.
 * Metadata information used by account encryption.
 *
 */
export interface KeyVaultMetaInfo {
  /**
   * @member {string} keyVaultResourceId The resource identifier for the user
   * managed Key Vault being used to encrypt.
   */
  keyVaultResourceId: string;
  /**
   * @member {string} encryptionKeyName The name of the user managed encryption
   * key.
   */
  encryptionKeyName: string;
  /**
   * @member {string} encryptionKeyVersion The version of the user managed
   * encryption key.
   */
  encryptionKeyVersion: string;
}

/**
 * @interface
 * An interface representing EncryptionConfig.
 * The encryption configuration for the account.
 *
 */
export interface EncryptionConfig {
  /**
   * @member {EncryptionConfigType} type The type of encryption configuration
   * being used. Currently the only supported types are 'UserManaged' and
   * 'ServiceManaged'. Possible values include: 'UserManaged', 'ServiceManaged'
   */
  type: EncryptionConfigType;
  /**
   * @member {KeyVaultMetaInfo} [keyVaultMetaInfo] The Key Vault information
   * for connecting to user managed encryption keys.
   */
  keyVaultMetaInfo?: KeyVaultMetaInfo;
}

/**
 * @interface
 * An interface representing FirewallRuleProperties.
 * The firewall rule properties.
 *
 */
export interface FirewallRuleProperties {
  /**
   * @member {string} [startIpAddress] The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startIpAddress?: string;
  /**
   * @member {string} [endIpAddress] The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endIpAddress?: string;
}

/**
 * @interface
 * An interface representing FirewallRule.
 * Data Lake Store firewall rule information.
 *
 * @extends SubResource
 */
export interface FirewallRule extends SubResource {
  /**
   * @member {string} [startIpAddress] The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly startIpAddress?: string;
  /**
   * @member {string} [endIpAddress] The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endIpAddress?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkRuleProperties.
 * The virtual network rule properties.
 *
 */
export interface VirtualNetworkRuleProperties {
  /**
   * @member {string} [subnetId] The resource identifier for the subnet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subnetId?: string;
}

/**
 * @interface
 * An interface representing VirtualNetworkRule.
 * Data Lake Store virtual network rule information.
 *
 * @extends SubResource
 */
export interface VirtualNetworkRule extends SubResource {
  /**
   * @member {string} [subnetId] The resource identifier for the subnet.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subnetId?: string;
}

/**
 * @interface
 * An interface representing TrustedIdProviderProperties.
 * The trusted identity provider properties.
 *
 */
export interface TrustedIdProviderProperties {
  /**
   * @member {string} [idProvider] The URL of this trusted identity provider.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly idProvider?: string;
}

/**
 * @interface
 * An interface representing TrustedIdProvider.
 * Data Lake Store trusted identity provider information.
 *
 * @extends SubResource
 */
export interface TrustedIdProvider extends SubResource {
  /**
   * @member {string} [idProvider] The URL of this trusted identity provider.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly idProvider?: string;
}

/**
 * @interface
 * An interface representing DataLakeStoreAccountPropertiesBasic.
 * The basic account specific properties that are associated with an underlying
 * Data Lake Store account.
 *
 */
export interface DataLakeStoreAccountPropertiesBasic {
  /**
   * @member {string} [accountId] The unique identifier associated with this
   * Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountId?: string;
  /**
   * @member {DataLakeStoreAccountStatus} [provisioningState] The provisioning
   * status of the Data Lake Store account. Possible values include: 'Failed',
   * 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming',
   * 'Deleting', 'Deleted', 'Undeleting', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: DataLakeStoreAccountStatus;
  /**
   * @member {DataLakeStoreAccountState} [state] The state of the Data Lake
   * Store account. Possible values include: 'Active', 'Suspended'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: DataLakeStoreAccountState;
  /**
   * @member {Date} [creationTime] The account creation time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {Date} [lastModifiedTime] The account last modified time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * @member {string} [endpoint] The full CName endpoint for this account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endpoint?: string;
}

/**
 * @interface
 * An interface representing DataLakeStoreAccountProperties.
 * Data Lake Store account properties information.
 *
 * @extends DataLakeStoreAccountPropertiesBasic
 */
export interface DataLakeStoreAccountProperties extends DataLakeStoreAccountPropertiesBasic {
  /**
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly defaultGroup?: string;
  /**
   * @member {EncryptionConfig} [encryptionConfig] The Key Vault encryption
   * configuration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryptionConfig?: EncryptionConfig;
  /**
   * @member {EncryptionState} [encryptionState] The current state of
   * encryption for this Data Lake Store account. Possible values include:
   * 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryptionState?: EncryptionState;
  /**
   * @member {EncryptionProvisioningState} [encryptionProvisioningState] The
   * current state of encryption provisioning for this Data Lake Store account.
   * Possible values include: 'Creating', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryptionProvisioningState?: EncryptionProvisioningState;
  /**
   * @member {FirewallRule[]} [firewallRules] The list of firewall rules
   * associated with this Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firewallRules?: FirewallRule[];
  /**
   * @member {VirtualNetworkRule[]} [virtualNetworkRules] The list of virtual
   * network rules associated with this Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * @member {FirewallState} [firewallState] The current state of the IP
   * address firewall for this Data Lake Store account. Possible values
   * include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firewallState?: FirewallState;
  /**
   * @member {FirewallAllowAzureIpsState} [firewallAllowAzureIps] The current
   * state of allowing or disallowing IPs originating within Azure through the
   * firewall. If the firewall is disabled, this is not enforced. Possible
   * values include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * @member {TrustedIdProvider[]} [trustedIdProviders] The list of trusted
   * identity providers associated with this Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trustedIdProviders?: TrustedIdProvider[];
  /**
   * @member {TrustedIdProviderState} [trustedIdProviderState] The current
   * state of the trusted identity provider feature for this Data Lake Store
   * account. Possible values include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trustedIdProviderState?: TrustedIdProviderState;
  /**
   * @member {TierType} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly newTier?: TierType;
  /**
   * @member {TierType} [currentTier] The commitment tier in use for the
   * current month. Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentTier?: TierType;
}

/**
 * @interface
 * An interface representing DataLakeStoreAccount.
 * Data Lake Store account information.
 *
 * @extends Resource
 */
export interface DataLakeStoreAccount extends Resource {
  /**
   * @member {EncryptionIdentity} [identity] The Key Vault encryption identity,
   * if any.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly identity?: EncryptionIdentity;
  /**
   * @member {string} [accountId] The unique identifier associated with this
   * Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountId?: string;
  /**
   * @member {DataLakeStoreAccountStatus} [provisioningState] The provisioning
   * status of the Data Lake Store account. Possible values include: 'Failed',
   * 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming',
   * 'Deleting', 'Deleted', 'Undeleting', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: DataLakeStoreAccountStatus;
  /**
   * @member {DataLakeStoreAccountState} [state] The state of the Data Lake
   * Store account. Possible values include: 'Active', 'Suspended'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: DataLakeStoreAccountState;
  /**
   * @member {Date} [creationTime] The account creation time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {Date} [lastModifiedTime] The account last modified time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * @member {string} [endpoint] The full CName endpoint for this account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endpoint?: string;
  /**
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly defaultGroup?: string;
  /**
   * @member {EncryptionConfig} [encryptionConfig] The Key Vault encryption
   * configuration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryptionConfig?: EncryptionConfig;
  /**
   * @member {EncryptionState} [encryptionState] The current state of
   * encryption for this Data Lake Store account. Possible values include:
   * 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryptionState?: EncryptionState;
  /**
   * @member {EncryptionProvisioningState} [encryptionProvisioningState] The
   * current state of encryption provisioning for this Data Lake Store account.
   * Possible values include: 'Creating', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryptionProvisioningState?: EncryptionProvisioningState;
  /**
   * @member {FirewallRule[]} [firewallRules] The list of firewall rules
   * associated with this Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firewallRules?: FirewallRule[];
  /**
   * @member {VirtualNetworkRule[]} [virtualNetworkRules] The list of virtual
   * network rules associated with this Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * @member {FirewallState} [firewallState] The current state of the IP
   * address firewall for this Data Lake Store account. Possible values
   * include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firewallState?: FirewallState;
  /**
   * @member {FirewallAllowAzureIpsState} [firewallAllowAzureIps] The current
   * state of allowing or disallowing IPs originating within Azure through the
   * firewall. If the firewall is disabled, this is not enforced. Possible
   * values include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * @member {TrustedIdProvider[]} [trustedIdProviders] The list of trusted
   * identity providers associated with this Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trustedIdProviders?: TrustedIdProvider[];
  /**
   * @member {TrustedIdProviderState} [trustedIdProviderState] The current
   * state of the trusted identity provider feature for this Data Lake Store
   * account. Possible values include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trustedIdProviderState?: TrustedIdProviderState;
  /**
   * @member {TierType} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly newTier?: TierType;
  /**
   * @member {TierType} [currentTier] The commitment tier in use for the
   * current month. Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentTier?: TierType;
}

/**
 * @interface
 * An interface representing DataLakeStoreAccountBasic.
 * Basic Data Lake Store account information, returned on list calls.
 *
 * @extends Resource
 */
export interface DataLakeStoreAccountBasic extends Resource {
  /**
   * @member {string} [accountId] The unique identifier associated with this
   * Data Lake Store account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountId?: string;
  /**
   * @member {DataLakeStoreAccountStatus} [provisioningState] The provisioning
   * status of the Data Lake Store account. Possible values include: 'Failed',
   * 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming',
   * 'Deleting', 'Deleted', 'Undeleting', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: DataLakeStoreAccountStatus;
  /**
   * @member {DataLakeStoreAccountState} [state] The state of the Data Lake
   * Store account. Possible values include: 'Active', 'Suspended'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: DataLakeStoreAccountState;
  /**
   * @member {Date} [creationTime] The account creation time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {Date} [lastModifiedTime] The account last modified time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * @member {string} [endpoint] The full CName endpoint for this account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly endpoint?: string;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * The display information for a particular operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] The resource provider of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provider?: string;
  /**
   * @member {string} [resource] The resource type of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resource?: string;
  /**
   * @member {string} [operation] A friendly name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operation?: string;
  /**
   * @member {string} [description] A friendly description of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly description?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * An available operation for Data Lake Store.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] The name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {OperationDisplay} [display] The display information for the
   * operation.
   */
  display?: OperationDisplay;
  /**
   * @member {OperationOrigin} [origin] The intended executor of the operation.
   * Possible values include: 'user', 'system', 'user,system'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly origin?: OperationOrigin;
}

/**
 * @interface
 * An interface representing OperationListResult.
 * The list of available operations for Data Lake Store.
 *
 */
export interface OperationListResult {
  /**
   * @member {Operation[]} [value] The results of the list operation.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: Operation[];
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing CapabilityInformation.
 * Subscription-level properties and limits for Data Lake Store.
 *
 */
export interface CapabilityInformation {
  /**
   * @member {string} [subscriptionId] The subscription credentials that
   * uniquely identifies the subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly subscriptionId?: string;
  /**
   * @member {SubscriptionState} [state] The subscription state. Possible
   * values include: 'Registered', 'Suspended', 'Deleted', 'Unregistered',
   * 'Warned'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: SubscriptionState;
  /**
   * @member {number} [maxAccountCount] The maximum supported number of
   * accounts under this subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly maxAccountCount?: number;
  /**
   * @member {number} [accountCount] The current number of accounts under this
   * subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountCount?: number;
  /**
   * @member {boolean} [migrationState] The Boolean value of true or false to
   * indicate the maintenance state.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly migrationState?: boolean;
}

/**
 * @interface
 * An interface representing NameAvailabilityInformation.
 * Data Lake Store account name availability result information.
 *
 */
export interface NameAvailabilityInformation {
  /**
   * @member {boolean} [nameAvailable] The Boolean value of true or false to
   * indicate whether the Data Lake Store account name is available or not.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nameAvailable?: boolean;
  /**
   * @member {string} [reason] The reason why the Data Lake Store account name
   * is not available, if nameAvailable is false.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reason?: string;
  /**
   * @member {string} [message] The message describing why the Data Lake Store
   * account name is not available, if nameAvailable is false.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing CreateOrUpdateFirewallRuleProperties.
 * The firewall rule properties to use when creating a new firewall rule.
 *
 */
export interface CreateOrUpdateFirewallRuleProperties {
  /**
   * @member {string} startIpAddress The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  startIpAddress: string;
  /**
   * @member {string} endIpAddress The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  endIpAddress: string;
}

/**
 * @interface
 * An interface representing CreateFirewallRuleWithAccountParameters.
 * The parameters used to create a new firewall rule while creating a new Data
 * Lake Store account.
 *
 */
export interface CreateFirewallRuleWithAccountParameters {
  /**
   * @member {string} name The unique name of the firewall rule to create.
   */
  name: string;
  /**
   * @member {string} startIpAddress The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  startIpAddress: string;
  /**
   * @member {string} endIpAddress The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  endIpAddress: string;
}

/**
 * @interface
 * An interface representing CreateOrUpdateVirtualNetworkRuleProperties.
 * The virtual network rule properties to use when creating a new virtual
 * network rule.
 *
 */
export interface CreateOrUpdateVirtualNetworkRuleProperties {
  /**
   * @member {string} subnetId The resource identifier for the subnet.
   */
  subnetId: string;
}

/**
 * @interface
 * An interface representing CreateVirtualNetworkRuleWithAccountParameters.
 * The parameters used to create a new virtual network rule while creating a
 * new Data Lake Store account.
 *
 */
export interface CreateVirtualNetworkRuleWithAccountParameters {
  /**
   * @member {string} name The unique name of the virtual network rule to
   * create.
   */
  name: string;
  /**
   * @member {string} subnetId The resource identifier for the subnet.
   */
  subnetId: string;
}

/**
 * @interface
 * An interface representing CreateOrUpdateTrustedIdProviderProperties.
 * The trusted identity provider properties to use when creating a new trusted
 * identity provider.
 *
 */
export interface CreateOrUpdateTrustedIdProviderProperties {
  /**
   * @member {string} idProvider The URL of this trusted identity provider.
   */
  idProvider: string;
}

/**
 * @interface
 * An interface representing CreateTrustedIdProviderWithAccountParameters.
 * The parameters used to create a new trusted identity provider while creating
 * a new Data Lake Store account.
 *
 */
export interface CreateTrustedIdProviderWithAccountParameters {
  /**
   * @member {string} name The unique name of the trusted identity provider to
   * create.
   */
  name: string;
  /**
   * @member {string} idProvider The URL of this trusted identity provider.
   */
  idProvider: string;
}

/**
 * @interface
 * An interface representing CreateDataLakeStoreAccountProperties.
 */
export interface CreateDataLakeStoreAccountProperties {
  /**
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   */
  defaultGroup?: string;
  /**
   * @member {EncryptionConfig} [encryptionConfig] The Key Vault encryption
   * configuration.
   */
  encryptionConfig?: EncryptionConfig;
  /**
   * @member {EncryptionState} [encryptionState] The current state of
   * encryption for this Data Lake Store account. Possible values include:
   * 'Enabled', 'Disabled'
   */
  encryptionState?: EncryptionState;
  /**
   * @member {CreateFirewallRuleWithAccountParameters[]} [firewallRules] The
   * list of firewall rules associated with this Data Lake Store account.
   */
  firewallRules?: CreateFirewallRuleWithAccountParameters[];
  /**
   * @member {CreateVirtualNetworkRuleWithAccountParameters[]}
   * [virtualNetworkRules] The list of virtual network rules associated with
   * this Data Lake Store account.
   */
  virtualNetworkRules?: CreateVirtualNetworkRuleWithAccountParameters[];
  /**
   * @member {FirewallState} [firewallState] The current state of the IP
   * address firewall for this Data Lake Store account. Possible values
   * include: 'Enabled', 'Disabled'
   */
  firewallState?: FirewallState;
  /**
   * @member {FirewallAllowAzureIpsState} [firewallAllowAzureIps] The current
   * state of allowing or disallowing IPs originating within Azure through the
   * firewall. If the firewall is disabled, this is not enforced. Possible
   * values include: 'Enabled', 'Disabled'
   */
  firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * @member {CreateTrustedIdProviderWithAccountParameters[]}
   * [trustedIdProviders] The list of trusted identity providers associated
   * with this Data Lake Store account.
   */
  trustedIdProviders?: CreateTrustedIdProviderWithAccountParameters[];
  /**
   * @member {TrustedIdProviderState} [trustedIdProviderState] The current
   * state of the trusted identity provider feature for this Data Lake Store
   * account. Possible values include: 'Enabled', 'Disabled'
   */
  trustedIdProviderState?: TrustedIdProviderState;
  /**
   * @member {TierType} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   */
  newTier?: TierType;
}

/**
 * @interface
 * An interface representing CreateDataLakeStoreAccountParameters.
 */
export interface CreateDataLakeStoreAccountParameters {
  /**
   * @member {string} location The resource location.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] The resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {EncryptionIdentity} [identity] The Key Vault encryption identity,
   * if any.
   */
  identity?: EncryptionIdentity;
  /**
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   */
  defaultGroup?: string;
  /**
   * @member {EncryptionConfig} [encryptionConfig] The Key Vault encryption
   * configuration.
   */
  encryptionConfig?: EncryptionConfig;
  /**
   * @member {EncryptionState} [encryptionState] The current state of
   * encryption for this Data Lake Store account. Possible values include:
   * 'Enabled', 'Disabled'
   */
  encryptionState?: EncryptionState;
  /**
   * @member {CreateFirewallRuleWithAccountParameters[]} [firewallRules] The
   * list of firewall rules associated with this Data Lake Store account.
   */
  firewallRules?: CreateFirewallRuleWithAccountParameters[];
  /**
   * @member {CreateVirtualNetworkRuleWithAccountParameters[]}
   * [virtualNetworkRules] The list of virtual network rules associated with
   * this Data Lake Store account.
   */
  virtualNetworkRules?: CreateVirtualNetworkRuleWithAccountParameters[];
  /**
   * @member {FirewallState} [firewallState] The current state of the IP
   * address firewall for this Data Lake Store account. Possible values
   * include: 'Enabled', 'Disabled'
   */
  firewallState?: FirewallState;
  /**
   * @member {FirewallAllowAzureIpsState} [firewallAllowAzureIps] The current
   * state of allowing or disallowing IPs originating within Azure through the
   * firewall. If the firewall is disabled, this is not enforced. Possible
   * values include: 'Enabled', 'Disabled'
   */
  firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * @member {CreateTrustedIdProviderWithAccountParameters[]}
   * [trustedIdProviders] The list of trusted identity providers associated
   * with this Data Lake Store account.
   */
  trustedIdProviders?: CreateTrustedIdProviderWithAccountParameters[];
  /**
   * @member {TrustedIdProviderState} [trustedIdProviderState] The current
   * state of the trusted identity provider feature for this Data Lake Store
   * account. Possible values include: 'Enabled', 'Disabled'
   */
  trustedIdProviderState?: TrustedIdProviderState;
  /**
   * @member {TierType} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   */
  newTier?: TierType;
}

/**
 * @interface
 * An interface representing UpdateKeyVaultMetaInfo.
 * The Key Vault update information used for user managed key rotation.
 *
 */
export interface UpdateKeyVaultMetaInfo {
  /**
   * @member {string} [encryptionKeyVersion] The version of the user managed
   * encryption key to update through a key rotation.
   */
  encryptionKeyVersion?: string;
}

/**
 * @interface
 * An interface representing UpdateEncryptionConfig.
 * The encryption configuration used to update a user managed Key Vault key.
 *
 */
export interface UpdateEncryptionConfig {
  /**
   * @member {UpdateKeyVaultMetaInfo} [keyVaultMetaInfo] The updated Key Vault
   * key to use in user managed key rotation.
   */
  keyVaultMetaInfo?: UpdateKeyVaultMetaInfo;
}

/**
 * @interface
 * An interface representing UpdateFirewallRuleProperties.
 * The firewall rule properties to use when updating a firewall rule.
 *
 */
export interface UpdateFirewallRuleProperties {
  /**
   * @member {string} [startIpAddress] The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  startIpAddress?: string;
  /**
   * @member {string} [endIpAddress] The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  endIpAddress?: string;
}

/**
 * @interface
 * An interface representing UpdateFirewallRuleWithAccountParameters.
 * The parameters used to update a firewall rule while updating a Data Lake
 * Store account.
 *
 */
export interface UpdateFirewallRuleWithAccountParameters {
  /**
   * @member {string} name The unique name of the firewall rule to update.
   */
  name: string;
  /**
   * @member {string} [startIpAddress] The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  startIpAddress?: string;
  /**
   * @member {string} [endIpAddress] The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  endIpAddress?: string;
}

/**
 * @interface
 * An interface representing UpdateVirtualNetworkRuleProperties.
 * The virtual network rule properties to use when updating a virtual network
 * rule.
 *
 */
export interface UpdateVirtualNetworkRuleProperties {
  /**
   * @member {string} [subnetId] The resource identifier for the subnet.
   */
  subnetId?: string;
}

/**
 * @interface
 * An interface representing UpdateVirtualNetworkRuleWithAccountParameters.
 * The parameters used to update a virtual network rule while updating a Data
 * Lake Store account.
 *
 */
export interface UpdateVirtualNetworkRuleWithAccountParameters {
  /**
   * @member {string} name The unique name of the virtual network rule to
   * update.
   */
  name: string;
  /**
   * @member {string} [subnetId] The resource identifier for the subnet.
   */
  subnetId?: string;
}

/**
 * @interface
 * An interface representing UpdateTrustedIdProviderProperties.
 * The trusted identity provider properties to use when updating a trusted
 * identity provider.
 *
 */
export interface UpdateTrustedIdProviderProperties {
  /**
   * @member {string} [idProvider] The URL of this trusted identity provider.
   */
  idProvider?: string;
}

/**
 * @interface
 * An interface representing UpdateTrustedIdProviderWithAccountParameters.
 * The parameters used to update a trusted identity provider while updating a
 * Data Lake Store account.
 *
 */
export interface UpdateTrustedIdProviderWithAccountParameters {
  /**
   * @member {string} name The unique name of the trusted identity provider to
   * update.
   */
  name: string;
  /**
   * @member {string} [idProvider] The URL of this trusted identity provider.
   */
  idProvider?: string;
}

/**
 * @interface
 * An interface representing UpdateDataLakeStoreAccountProperties.
 * Data Lake Store account properties information to be updated.
 *
 */
export interface UpdateDataLakeStoreAccountProperties {
  /**
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   */
  defaultGroup?: string;
  /**
   * @member {UpdateEncryptionConfig} [encryptionConfig] Used for rotation of
   * user managed Key Vault keys. Can only be used to rotate a user managed
   * encryption Key Vault key.
   */
  encryptionConfig?: UpdateEncryptionConfig;
  /**
   * @member {UpdateFirewallRuleWithAccountParameters[]} [firewallRules] The
   * list of firewall rules associated with this Data Lake Store account.
   */
  firewallRules?: UpdateFirewallRuleWithAccountParameters[];
  /**
   * @member {UpdateVirtualNetworkRuleWithAccountParameters[]}
   * [virtualNetworkRules] The list of virtual network rules associated with
   * this Data Lake Store account.
   */
  virtualNetworkRules?: UpdateVirtualNetworkRuleWithAccountParameters[];
  /**
   * @member {FirewallState} [firewallState] The current state of the IP
   * address firewall for this Data Lake Store account. Disabling the firewall
   * does not remove existing rules, they will just be ignored until the
   * firewall is re-enabled. Possible values include: 'Enabled', 'Disabled'
   */
  firewallState?: FirewallState;
  /**
   * @member {FirewallAllowAzureIpsState} [firewallAllowAzureIps] The current
   * state of allowing or disallowing IPs originating within Azure through the
   * firewall. If the firewall is disabled, this is not enforced. Possible
   * values include: 'Enabled', 'Disabled'
   */
  firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * @member {UpdateTrustedIdProviderWithAccountParameters[]}
   * [trustedIdProviders] The list of trusted identity providers associated
   * with this Data Lake Store account.
   */
  trustedIdProviders?: UpdateTrustedIdProviderWithAccountParameters[];
  /**
   * @member {TrustedIdProviderState} [trustedIdProviderState] The current
   * state of the trusted identity provider feature for this Data Lake Store
   * account. Disabling trusted identity provider functionality does not remove
   * the providers, they will just be ignored until this feature is re-enabled.
   * Possible values include: 'Enabled', 'Disabled'
   */
  trustedIdProviderState?: TrustedIdProviderState;
  /**
   * @member {TierType} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   */
  newTier?: TierType;
}

/**
 * @interface
 * An interface representing UpdateDataLakeStoreAccountParameters.
 * Data Lake Store account information to update.
 *
 */
export interface UpdateDataLakeStoreAccountParameters {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   */
  defaultGroup?: string;
  /**
   * @member {UpdateEncryptionConfig} [encryptionConfig] Used for rotation of
   * user managed Key Vault keys. Can only be used to rotate a user managed
   * encryption Key Vault key.
   */
  encryptionConfig?: UpdateEncryptionConfig;
  /**
   * @member {UpdateFirewallRuleWithAccountParameters[]} [firewallRules] The
   * list of firewall rules associated with this Data Lake Store account.
   */
  firewallRules?: UpdateFirewallRuleWithAccountParameters[];
  /**
   * @member {UpdateVirtualNetworkRuleWithAccountParameters[]}
   * [virtualNetworkRules] The list of virtual network rules associated with
   * this Data Lake Store account.
   */
  virtualNetworkRules?: UpdateVirtualNetworkRuleWithAccountParameters[];
  /**
   * @member {FirewallState} [firewallState] The current state of the IP
   * address firewall for this Data Lake Store account. Disabling the firewall
   * does not remove existing rules, they will just be ignored until the
   * firewall is re-enabled. Possible values include: 'Enabled', 'Disabled'
   */
  firewallState?: FirewallState;
  /**
   * @member {FirewallAllowAzureIpsState} [firewallAllowAzureIps] The current
   * state of allowing or disallowing IPs originating within Azure through the
   * firewall. If the firewall is disabled, this is not enforced. Possible
   * values include: 'Enabled', 'Disabled'
   */
  firewallAllowAzureIps?: FirewallAllowAzureIpsState;
  /**
   * @member {UpdateTrustedIdProviderWithAccountParameters[]}
   * [trustedIdProviders] The list of trusted identity providers associated
   * with this Data Lake Store account.
   */
  trustedIdProviders?: UpdateTrustedIdProviderWithAccountParameters[];
  /**
   * @member {TrustedIdProviderState} [trustedIdProviderState] The current
   * state of the trusted identity provider feature for this Data Lake Store
   * account. Disabling trusted identity provider functionality does not remove
   * the providers, they will just be ignored until this feature is re-enabled.
   * Possible values include: 'Enabled', 'Disabled'
   */
  trustedIdProviderState?: TrustedIdProviderState;
  /**
   * @member {TierType} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   */
  newTier?: TierType;
}

/**
 * @interface
 * An interface representing CreateOrUpdateFirewallRuleParameters.
 * The parameters used to create a new firewall rule.
 *
 */
export interface CreateOrUpdateFirewallRuleParameters {
  /**
   * @member {string} startIpAddress The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  startIpAddress: string;
  /**
   * @member {string} endIpAddress The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  endIpAddress: string;
}

/**
 * @interface
 * An interface representing UpdateFirewallRuleParameters.
 * The parameters used to update a firewall rule.
 *
 */
export interface UpdateFirewallRuleParameters {
  /**
   * @member {string} [startIpAddress] The start IP address for the firewall
   * rule. This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  startIpAddress?: string;
  /**
   * @member {string} [endIpAddress] The end IP address for the firewall rule.
   * This can be either ipv4 or ipv6. Start and End should be in the same
   * protocol.
   */
  endIpAddress?: string;
}

/**
 * @interface
 * An interface representing CreateOrUpdateVirtualNetworkRuleParameters.
 * The parameters used to create a new virtual network rule.
 *
 */
export interface CreateOrUpdateVirtualNetworkRuleParameters {
  /**
   * @member {string} subnetId The resource identifier for the subnet.
   */
  subnetId: string;
}

/**
 * @interface
 * An interface representing UpdateVirtualNetworkRuleParameters.
 * The parameters used to update a virtual network rule.
 *
 */
export interface UpdateVirtualNetworkRuleParameters {
  /**
   * @member {string} [subnetId] The resource identifier for the subnet.
   */
  subnetId?: string;
}

/**
 * @interface
 * An interface representing CreateOrUpdateTrustedIdProviderParameters.
 * The parameters used to create a new trusted identity provider.
 *
 */
export interface CreateOrUpdateTrustedIdProviderParameters {
  /**
   * @member {string} idProvider The URL of this trusted identity provider.
   */
  idProvider: string;
}

/**
 * @interface
 * An interface representing UpdateTrustedIdProviderParameters.
 * The parameters used to update a trusted identity provider.
 *
 */
export interface UpdateTrustedIdProviderParameters {
  /**
   * @member {string} [idProvider] The URL of this trusted identity provider.
   */
  idProvider?: string;
}

/**
 * @interface
 * An interface representing CheckNameAvailabilityParameters.
 * Data Lake Store account name availability check parameters.
 *
 */
export interface CheckNameAvailabilityParameters {
  /**
   * @member {string} name The Data Lake Store name to check availability for.
   */
  name: string;
}

/**
 * @interface
 * An interface representing AccountsListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface AccountsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData filter. Optional.
   */
  filter?: string;
  /**
   * @member {number} [top] The number of items to return. Optional.
   */
  top?: number;
  /**
   * @member {number} [skip] The number of items to skip over before returning
   * elements. Optional.
   */
  skip?: number;
  /**
   * @member {string} [select] OData Select statement. Limits the properties on
   * each entry to just those requested, e.g.
   * Categories?$select=CategoryName,Description. Optional.
   */
  select?: string;
  /**
   * @member {string} [orderby] OrderBy clause. One or more comma-separated
   * expressions with an optional "asc" (the default) or "desc" depending on
   * the order you'd like the values sorted, e.g.
   * Categories?$orderby=CategoryName desc. Optional.
   */
  orderby?: string;
  /**
   * @member {boolean} [count] The Boolean value of true or false to request a
   * count of the matching resources included with the resources in the
   * response, e.g. Categories?$count=true. Optional.
   */
  count?: boolean;
}

/**
 * @interface
 * An interface representing AccountsListByResourceGroupOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface AccountsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [filter] OData filter. Optional.
   */
  filter?: string;
  /**
   * @member {number} [top] The number of items to return. Optional.
   */
  top?: number;
  /**
   * @member {number} [skip] The number of items to skip over before returning
   * elements. Optional.
   */
  skip?: number;
  /**
   * @member {string} [select] OData Select statement. Limits the properties on
   * each entry to just those requested, e.g.
   * Categories?$select=CategoryName,Description. Optional.
   */
  select?: string;
  /**
   * @member {string} [orderby] OrderBy clause. One or more comma-separated
   * expressions with an optional "asc" (the default) or "desc" depending on
   * the order you'd like the values sorted, e.g.
   * Categories?$orderby=CategoryName desc. Optional.
   */
  orderby?: string;
  /**
   * @member {boolean} [count] A Boolean value of true or false to request a
   * count of the matching resources included with the resources in the
   * response, e.g. Categories?$count=true. Optional.
   */
  count?: boolean;
}

/**
 * @interface
 * An interface representing FirewallRulesUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FirewallRulesUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {UpdateFirewallRuleParameters} [parameters] Parameters supplied to
   * update the firewall rule.
   */
  parameters?: UpdateFirewallRuleParameters;
}

/**
 * @interface
 * An interface representing VirtualNetworkRulesUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface VirtualNetworkRulesUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {UpdateVirtualNetworkRuleParameters} [parameters] Parameters
   * supplied to update the virtual network rule.
   */
  parameters?: UpdateVirtualNetworkRuleParameters;
}

/**
 * @interface
 * An interface representing TrustedIdProvidersUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrustedIdProvidersUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {UpdateTrustedIdProviderParameters} [parameters] Parameters
   * supplied to update the trusted identity provider.
   */
  parameters?: UpdateTrustedIdProviderParameters;
}

/**
 * @interface
 * An interface representing DataLakeStoreAccountManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface DataLakeStoreAccountManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the DataLakeStoreAccountListResult.
 * Data Lake Store account list information response.
 *
 * @extends Array<DataLakeStoreAccountBasic>
 */
export interface DataLakeStoreAccountListResult extends Array<DataLakeStoreAccountBasic> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the FirewallRuleListResult.
 * Data Lake Store firewall rule list information.
 *
 * @extends Array<FirewallRule>
 */
export interface FirewallRuleListResult extends Array<FirewallRule> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the VirtualNetworkRuleListResult.
 * Data Lake Store virtual network rule list information.
 *
 * @extends Array<VirtualNetworkRule>
 */
export interface VirtualNetworkRuleListResult extends Array<VirtualNetworkRule> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the TrustedIdProviderListResult.
 * Data Lake Store trusted identity provider list information.
 *
 * @extends Array<TrustedIdProvider>
 */
export interface TrustedIdProviderListResult extends Array<TrustedIdProvider> {
  /**
   * @member {string} [nextLink] The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for EncryptionConfigType.
 * Possible values include: 'UserManaged', 'ServiceManaged'
 * @readonly
 * @enum {string}
 */
export enum EncryptionConfigType {
  UserManaged = 'UserManaged',
  ServiceManaged = 'ServiceManaged',
}

/**
 * Defines values for EncryptionState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export enum EncryptionState {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for EncryptionProvisioningState.
 * Possible values include: 'Creating', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export enum EncryptionProvisioningState {
  Creating = 'Creating',
  Succeeded = 'Succeeded',
}

/**
 * Defines values for FirewallState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export enum FirewallState {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for FirewallAllowAzureIpsState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export enum FirewallAllowAzureIpsState {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for TrustedIdProviderState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export enum TrustedIdProviderState {
  Enabled = 'Enabled',
  Disabled = 'Disabled',
}

/**
 * Defines values for TierType.
 * Possible values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB',
 * 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB'
 * @readonly
 * @enum {string}
 */
export enum TierType {
  Consumption = 'Consumption',
  Commitment1TB = 'Commitment_1TB',
  Commitment10TB = 'Commitment_10TB',
  Commitment100TB = 'Commitment_100TB',
  Commitment500TB = 'Commitment_500TB',
  Commitment1PB = 'Commitment_1PB',
  Commitment5PB = 'Commitment_5PB',
}

/**
 * Defines values for DataLakeStoreAccountStatus.
 * Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded',
 * 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting',
 * 'Canceled'
 * @readonly
 * @enum {string}
 */
export enum DataLakeStoreAccountStatus {
  Failed = 'Failed',
  Creating = 'Creating',
  Running = 'Running',
  Succeeded = 'Succeeded',
  Patching = 'Patching',
  Suspending = 'Suspending',
  Resuming = 'Resuming',
  Deleting = 'Deleting',
  Deleted = 'Deleted',
  Undeleting = 'Undeleting',
  Canceled = 'Canceled',
}

/**
 * Defines values for DataLakeStoreAccountState.
 * Possible values include: 'Active', 'Suspended'
 * @readonly
 * @enum {string}
 */
export enum DataLakeStoreAccountState {
  Active = 'Active',
  Suspended = 'Suspended',
}

/**
 * Defines values for OperationOrigin.
 * Possible values include: 'user', 'system', 'user,system'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OperationOrigin =
 * <OperationOrigin>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum OperationOrigin {
  User = 'user',
  System = 'system',
  Usersystem = 'user,system',
}

/**
 * Defines values for SubscriptionState.
 * Possible values include: 'Registered', 'Suspended', 'Deleted',
 * 'Unregistered', 'Warned'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: SubscriptionState =
 * <SubscriptionState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum SubscriptionState {
  Registered = 'Registered',
  Suspended = 'Suspended',
  Deleted = 'Deleted',
  Unregistered = 'Unregistered',
  Warned = 'Warned',
}

/**
 * Contains response data for the list operation.
 */
export type AccountsListResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AccountsListByResourceGroupResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccountListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type AccountsCreateResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccount;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AccountsGetResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccount;
    };
};

/**
 * Contains response data for the update operation.
 */
export type AccountsUpdateResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccount;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type AccountsCheckNameAvailabilityResponse = NameAvailabilityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NameAvailabilityInformation;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type AccountsBeginCreateResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccount;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type AccountsBeginUpdateResponse = DataLakeStoreAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccount;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccountsListNextResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AccountsListByResourceGroupNextResponse = DataLakeStoreAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataLakeStoreAccountListResult;
    };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type FirewallRulesListByAccountResponse = FirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallRulesCreateOrUpdateResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRule;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FirewallRulesGetResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type FirewallRulesUpdateResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRule;
    };
};

/**
 * Contains response data for the listByAccountNext operation.
 */
export type FirewallRulesListByAccountNextResponse = FirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRuleListResult;
    };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type VirtualNetworkRulesListByAccountResponse = VirtualNetworkRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkRulesCreateOrUpdateResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkRule;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkRulesGetResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkRule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type VirtualNetworkRulesUpdateResponse = VirtualNetworkRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkRule;
    };
};

/**
 * Contains response data for the listByAccountNext operation.
 */
export type VirtualNetworkRulesListByAccountNextResponse = VirtualNetworkRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkRuleListResult;
    };
};

/**
 * Contains response data for the listByAccount operation.
 */
export type TrustedIdProvidersListByAccountResponse = TrustedIdProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrustedIdProviderListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TrustedIdProvidersCreateOrUpdateResponse = TrustedIdProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrustedIdProvider;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TrustedIdProvidersGetResponse = TrustedIdProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrustedIdProvider;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TrustedIdProvidersUpdateResponse = TrustedIdProvider & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrustedIdProvider;
    };
};

/**
 * Contains response data for the listByAccountNext operation.
 */
export type TrustedIdProvidersListByAccountNextResponse = TrustedIdProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrustedIdProviderListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the getCapability operation.
 */
export type LocationsGetCapabilityResponse = CapabilityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CapabilityInformation;
    };
};
