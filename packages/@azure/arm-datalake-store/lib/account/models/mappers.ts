/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";
import * as msRest from "ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        readOnly: true,
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionIdentity: msRest.CompositeMapper = {
  serializedName: "EncryptionIdentity",
  type: {
    name: "Composite",
    className: "EncryptionIdentity",
    modelProperties: {
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'SystemAssigned',
        type: {
          name: "String"
        }
      },
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const KeyVaultMetaInfo: msRest.CompositeMapper = {
  serializedName: "KeyVaultMetaInfo",
  type: {
    name: "Composite",
    className: "KeyVaultMetaInfo",
    modelProperties: {
      keyVaultResourceId: {
        required: true,
        serializedName: "keyVaultResourceId",
        type: {
          name: "String"
        }
      },
      encryptionKeyName: {
        required: true,
        serializedName: "encryptionKeyName",
        type: {
          name: "String"
        }
      },
      encryptionKeyVersion: {
        required: true,
        serializedName: "encryptionKeyVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionConfig: msRest.CompositeMapper = {
  serializedName: "EncryptionConfig",
  type: {
    name: "Composite",
    className: "EncryptionConfig",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "UserManaged",
            "ServiceManaged"
          ]
        }
      },
      keyVaultMetaInfo: {
        serializedName: "keyVaultMetaInfo",
        type: {
          name: "Composite",
          className: "KeyVaultMetaInfo"
        }
      }
    }
  }
};

export const FirewallRuleProperties: msRest.CompositeMapper = {
  serializedName: "FirewallRuleProperties",
  type: {
    name: "Composite",
    className: "FirewallRuleProperties",
    modelProperties: {
      startIpAddress: {
        readOnly: true,
        serializedName: "startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        readOnly: true,
        serializedName: "endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRule: msRest.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      startIpAddress: {
        readOnly: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        readOnly: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleProperties: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRuleProperties",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleProperties",
    modelProperties: {
      subnetId: {
        readOnly: true,
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      subnetId: {
        readOnly: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedIdProviderProperties: msRest.CompositeMapper = {
  serializedName: "TrustedIdProviderProperties",
  type: {
    name: "Composite",
    className: "TrustedIdProviderProperties",
    modelProperties: {
      idProvider: {
        readOnly: true,
        serializedName: "idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedIdProvider: msRest.CompositeMapper = {
  serializedName: "TrustedIdProvider",
  type: {
    name: "Composite",
    className: "TrustedIdProvider",
    modelProperties: {
      ...SubResource.type.modelProperties,
      idProvider: {
        readOnly: true,
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountPropertiesBasic: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccountPropertiesBasic",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountPropertiesBasic",
    modelProperties: {
      accountId: {
        readOnly: true,
        serializedName: "accountId",
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Suspended"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "lastModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountProperties: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccountProperties",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountProperties",
    modelProperties: {
      ...DataLakeStoreAccountPropertiesBasic.type.modelProperties,
      defaultGroup: {
        readOnly: true,
        serializedName: "defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        readOnly: true,
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        readOnly: true,
        serializedName: "encryptionState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      encryptionProvisioningState: {
        readOnly: true,
        serializedName: "encryptionProvisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "Succeeded"
          ]
        }
      },
      firewallRules: {
        readOnly: true,
        serializedName: "firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      virtualNetworkRules: {
        readOnly: true,
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      firewallState: {
        readOnly: true,
        serializedName: "firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        readOnly: true,
        serializedName: "firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      trustedIdProviders: {
        readOnly: true,
        serializedName: "trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedIdProvider"
            }
          }
        }
      },
      trustedIdProviderState: {
        readOnly: true,
        serializedName: "trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        readOnly: true,
        serializedName: "newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      },
      currentTier: {
        readOnly: true,
        serializedName: "currentTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const DataLakeStoreAccount: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccount",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        readOnly: true,
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionIdentity"
        }
      },
      accountId: {
        readOnly: true,
        serializedName: "properties.accountId",
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Suspended"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      },
      defaultGroup: {
        readOnly: true,
        serializedName: "properties.defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        readOnly: true,
        serializedName: "properties.encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        readOnly: true,
        serializedName: "properties.encryptionState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      encryptionProvisioningState: {
        readOnly: true,
        serializedName: "properties.encryptionProvisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Creating",
            "Succeeded"
          ]
        }
      },
      firewallRules: {
        readOnly: true,
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      virtualNetworkRules: {
        readOnly: true,
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      firewallState: {
        readOnly: true,
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        readOnly: true,
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      trustedIdProviders: {
        readOnly: true,
        serializedName: "properties.trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedIdProvider"
            }
          }
        }
      },
      trustedIdProviderState: {
        readOnly: true,
        serializedName: "properties.trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        readOnly: true,
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      },
      currentTier: {
        readOnly: true,
        serializedName: "properties.currentTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const DataLakeStoreAccountBasic: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccountBasic",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountBasic",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountId: {
        readOnly: true,
        serializedName: "properties.accountId",
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Suspended"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityInformation: msRest.CompositeMapper = {
  serializedName: "CapabilityInformation",
  type: {
    name: "Composite",
    className: "CapabilityInformation",
    modelProperties: {
      subscriptionId: {
        readOnly: true,
        serializedName: "subscriptionId",
        type: {
          name: "Uuid"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      maxAccountCount: {
        readOnly: true,
        serializedName: "maxAccountCount",
        type: {
          name: "Number"
        }
      },
      accountCount: {
        readOnly: true,
        serializedName: "accountCount",
        type: {
          name: "Number"
        }
      },
      migrationState: {
        readOnly: true,
        serializedName: "migrationState",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NameAvailabilityInformation: msRest.CompositeMapper = {
  serializedName: "NameAvailabilityInformation",
  type: {
    name: "Composite",
    className: "NameAvailabilityInformation",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateFirewallRuleProperties: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateFirewallRuleProperties",
  type: {
    name: "Composite",
    className: "CreateOrUpdateFirewallRuleProperties",
    modelProperties: {
      startIpAddress: {
        required: true,
        serializedName: "startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateFirewallRuleWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateFirewallRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        required: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateVirtualNetworkRuleProperties: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateVirtualNetworkRuleProperties",
  type: {
    name: "Composite",
    className: "CreateOrUpdateVirtualNetworkRuleProperties",
    modelProperties: {
      subnetId: {
        required: true,
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateVirtualNetworkRuleWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateVirtualNetworkRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateVirtualNetworkRuleWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      subnetId: {
        required: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateTrustedIdProviderProperties: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateTrustedIdProviderProperties",
  type: {
    name: "Composite",
    className: "CreateOrUpdateTrustedIdProviderProperties",
    modelProperties: {
      idProvider: {
        required: true,
        serializedName: "idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateTrustedIdProviderWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateTrustedIdProviderWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateTrustedIdProviderWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      idProvider: {
        required: true,
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateDataLakeStoreAccountProperties: msRest.CompositeMapper = {
  serializedName: "CreateDataLakeStoreAccountProperties",
  type: {
    name: "Composite",
    className: "CreateDataLakeStoreAccountProperties",
    modelProperties: {
      defaultGroup: {
        serializedName: "defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        serializedName: "encryptionState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallRules: {
        serializedName: "firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateVirtualNetworkRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      trustedIdProviders: {
        serializedName: "trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateTrustedIdProviderWithAccountParameters"
            }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        serializedName: "newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const CreateDataLakeStoreAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateDataLakeStoreAccountParameters",
  type: {
    name: "Composite",
    className: "CreateDataLakeStoreAccountParameters",
    modelProperties: {
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionIdentity"
        }
      },
      defaultGroup: {
        serializedName: "properties.defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "properties.encryptionConfig",
        type: {
          name: "Composite",
          className: "EncryptionConfig"
        }
      },
      encryptionState: {
        serializedName: "properties.encryptionState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateVirtualNetworkRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      trustedIdProviders: {
        serializedName: "properties.trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateTrustedIdProviderWithAccountParameters"
            }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "properties.trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const UpdateKeyVaultMetaInfo: msRest.CompositeMapper = {
  serializedName: "UpdateKeyVaultMetaInfo",
  type: {
    name: "Composite",
    className: "UpdateKeyVaultMetaInfo",
    modelProperties: {
      encryptionKeyVersion: {
        serializedName: "encryptionKeyVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateEncryptionConfig: msRest.CompositeMapper = {
  serializedName: "UpdateEncryptionConfig",
  type: {
    name: "Composite",
    className: "UpdateEncryptionConfig",
    modelProperties: {
      keyVaultMetaInfo: {
        serializedName: "keyVaultMetaInfo",
        type: {
          name: "Composite",
          className: "UpdateKeyVaultMetaInfo"
        }
      }
    }
  }
};

export const UpdateFirewallRuleProperties: msRest.CompositeMapper = {
  serializedName: "UpdateFirewallRuleProperties",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleProperties",
    modelProperties: {
      startIpAddress: {
        serializedName: "startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateFirewallRuleWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateFirewallRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVirtualNetworkRuleProperties: msRest.CompositeMapper = {
  serializedName: "UpdateVirtualNetworkRuleProperties",
  type: {
    name: "Composite",
    className: "UpdateVirtualNetworkRuleProperties",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVirtualNetworkRuleWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateVirtualNetworkRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateVirtualNetworkRuleWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateTrustedIdProviderProperties: msRest.CompositeMapper = {
  serializedName: "UpdateTrustedIdProviderProperties",
  type: {
    name: "Composite",
    className: "UpdateTrustedIdProviderProperties",
    modelProperties: {
      idProvider: {
        serializedName: "idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateTrustedIdProviderWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateTrustedIdProviderWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateTrustedIdProviderWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      idProvider: {
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDataLakeStoreAccountProperties: msRest.CompositeMapper = {
  serializedName: "UpdateDataLakeStoreAccountProperties",
  type: {
    name: "Composite",
    className: "UpdateDataLakeStoreAccountProperties",
    modelProperties: {
      defaultGroup: {
        serializedName: "defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "encryptionConfig",
        type: {
          name: "Composite",
          className: "UpdateEncryptionConfig"
        }
      },
      firewallRules: {
        serializedName: "firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateVirtualNetworkRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      trustedIdProviders: {
        serializedName: "trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateTrustedIdProviderWithAccountParameters"
            }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        serializedName: "newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const UpdateDataLakeStoreAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateDataLakeStoreAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateDataLakeStoreAccountParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultGroup: {
        serializedName: "properties.defaultGroup",
        type: {
          name: "String"
        }
      },
      encryptionConfig: {
        serializedName: "properties.encryptionConfig",
        type: {
          name: "Composite",
          className: "UpdateEncryptionConfig"
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateVirtualNetworkRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      trustedIdProviders: {
        serializedName: "properties.trustedIdProviders",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateTrustedIdProviderWithAccountParameters"
            }
          }
        }
      },
      trustedIdProviderState: {
        serializedName: "properties.trustedIdProviderState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_1TB",
            "Commitment_10TB",
            "Commitment_100TB",
            "Commitment_500TB",
            "Commitment_1PB",
            "Commitment_5PB"
          ]
        }
      }
    }
  }
};

export const CreateOrUpdateFirewallRuleParameters: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateFirewallRuleParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        required: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateFirewallRuleParameters: msRest.CompositeMapper = {
  serializedName: "UpdateFirewallRuleParameters",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateVirtualNetworkRuleParameters: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateVirtualNetworkRuleParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateVirtualNetworkRuleParameters",
    modelProperties: {
      subnetId: {
        required: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVirtualNetworkRuleParameters: msRest.CompositeMapper = {
  serializedName: "UpdateVirtualNetworkRuleParameters",
  type: {
    name: "Composite",
    className: "UpdateVirtualNetworkRuleParameters",
    modelProperties: {
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateTrustedIdProviderParameters: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateTrustedIdProviderParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateTrustedIdProviderParameters",
    modelProperties: {
      idProvider: {
        required: true,
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateTrustedIdProviderParameters: msRest.CompositeMapper = {
  serializedName: "UpdateTrustedIdProviderParameters",
  type: {
    name: "Composite",
    className: "UpdateTrustedIdProviderParameters",
    modelProperties: {
      idProvider: {
        serializedName: "properties.idProvider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.DataLakeStore/accounts',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountListResult: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccountListResult",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountBasic"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: msRest.CompositeMapper = {
  serializedName: "FirewallRuleListResult",
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRuleListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedIdProviderListResult: msRest.CompositeMapper = {
  serializedName: "TrustedIdProviderListResult",
  type: {
    name: "Composite",
    className: "TrustedIdProviderListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedIdProvider"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
