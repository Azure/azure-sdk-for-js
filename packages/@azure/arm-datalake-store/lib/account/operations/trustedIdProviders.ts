/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/trustedIdProvidersMappers";
import * as Parameters from "../models/parameters";
import { DataLakeStoreAccountManagementClientContext } from "../dataLakeStoreAccountManagementClientContext";

/** Class representing a TrustedIdProviders. */
export class TrustedIdProviders {
  private readonly client: DataLakeStoreAccountManagementClientContext;

  /**
   * Create a TrustedIdProviders.
   * @param {DataLakeStoreAccountManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataLakeStoreAccountManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store
   * account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrustedIdProvidersListByAccountResponse>
   */
  listByAccount(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.TrustedIdProvidersListByAccountResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.TrustedIdProviderListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustedIdProviderListResult>): void;
  listByAccount(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TrustedIdProviderListResult>): Promise<Models.TrustedIdProvidersListByAccountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listByAccountOperationSpec,
      callback) as Promise<Models.TrustedIdProvidersListByAccountResponse>;
  }

  /**
   * Creates or updates the specified trusted identity provider. During update, the trusted identity
   * provider with the specified name will be replaced with this new provider
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   * differentiation of providers in the account.
   * @param parameters Parameters supplied to create or replace the trusted identity provider.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrustedIdProvidersCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, trustedIdProviderName: string, parameters: Models.CreateOrUpdateTrustedIdProviderParameters, options?: msRest.RequestOptionsBase): Promise<Models.TrustedIdProvidersCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   * differentiation of providers in the account.
   * @param parameters Parameters supplied to create or replace the trusted identity provider.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, trustedIdProviderName: string, parameters: Models.CreateOrUpdateTrustedIdProviderParameters, callback: msRest.ServiceCallback<Models.TrustedIdProvider>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   * differentiation of providers in the account.
   * @param parameters Parameters supplied to create or replace the trusted identity provider.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, trustedIdProviderName: string, parameters: Models.CreateOrUpdateTrustedIdProviderParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustedIdProvider>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, trustedIdProviderName: string, parameters: Models.CreateOrUpdateTrustedIdProviderParameters, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TrustedIdProvider>): Promise<Models.TrustedIdProvidersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.TrustedIdProvidersCreateOrUpdateResponse>;
  }

  /**
   * Gets the specified Data Lake Store trusted identity provider.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrustedIdProvidersGetResponse>
   */
  get(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options?: msRest.RequestOptionsBase): Promise<Models.TrustedIdProvidersGetResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to retrieve.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, trustedIdProviderName: string, callback: msRest.ServiceCallback<Models.TrustedIdProvider>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustedIdProvider>): void;
  get(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TrustedIdProvider>): Promise<Models.TrustedIdProvidersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TrustedIdProvidersGetResponse>;
  }

  /**
   * Updates the specified trusted identity provider.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   * differentiation of providers in the account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrustedIdProvidersUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options?: Models.TrustedIdProvidersUpdateOptionalParams): Promise<Models.TrustedIdProvidersUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   * differentiation of providers in the account.
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, trustedIdProviderName: string, callback: msRest.ServiceCallback<Models.TrustedIdProvider>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider. This is used for
   * differentiation of providers in the account.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options: Models.TrustedIdProvidersUpdateOptionalParams, callback: msRest.ServiceCallback<Models.TrustedIdProvider>): void;
  update(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options?: Models.TrustedIdProvidersUpdateOptionalParams, callback?: msRest.ServiceCallback<Models.TrustedIdProvider>): Promise<Models.TrustedIdProvidersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.TrustedIdProvidersUpdateResponse>;
  }

  /**
   * Deletes the specified trusted identity provider from the specified Data Lake Store account
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to delete.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, trustedIdProviderName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Store account.
   * @param trustedIdProviderName The name of the trusted identity provider to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, trustedIdProviderName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        trustedIdProviderName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists the Data Lake Store trusted identity providers within the specified Data Lake Store
   * account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrustedIdProvidersListByAccountNextResponse>
   */
  listByAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TrustedIdProvidersListByAccountNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TrustedIdProviderListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustedIdProviderListResult>): void;
  listByAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TrustedIdProviderListResult>): Promise<Models.TrustedIdProvidersListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByAccountNextOperationSpec,
      callback) as Promise<Models.TrustedIdProvidersListByAccountNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CreateOrUpdateTrustedIdProviderParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.UpdateTrustedIdProviderParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/trustedIdProviders/{trustedIdProviderName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.trustedIdProviderName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByAccountNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TrustedIdProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
