/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmIothub = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for AccessRights.
     * Possible values include: 'RegistryRead', 'RegistryWrite', 'ServiceConnect',
     * 'DeviceConnect', 'RegistryRead, RegistryWrite', 'RegistryRead,
     * ServiceConnect', 'RegistryRead, DeviceConnect', 'RegistryWrite,
     * ServiceConnect', 'RegistryWrite, DeviceConnect', 'ServiceConnect,
     * DeviceConnect', 'RegistryRead, RegistryWrite, ServiceConnect',
     * 'RegistryRead, RegistryWrite, DeviceConnect', 'RegistryRead, ServiceConnect,
     * DeviceConnect', 'RegistryWrite, ServiceConnect, DeviceConnect',
     * 'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect'
     * @readonly
     * @enum {string}
     */
    var AccessRights;
    (function (AccessRights) {
        AccessRights["RegistryRead"] = "RegistryRead";
        AccessRights["RegistryWrite"] = "RegistryWrite";
        AccessRights["ServiceConnect"] = "ServiceConnect";
        AccessRights["DeviceConnect"] = "DeviceConnect";
        AccessRights["RegistryReadRegistryWrite"] = "RegistryRead, RegistryWrite";
        AccessRights["RegistryReadServiceConnect"] = "RegistryRead, ServiceConnect";
        AccessRights["RegistryReadDeviceConnect"] = "RegistryRead, DeviceConnect";
        AccessRights["RegistryWriteServiceConnect"] = "RegistryWrite, ServiceConnect";
        AccessRights["RegistryWriteDeviceConnect"] = "RegistryWrite, DeviceConnect";
        AccessRights["ServiceConnectDeviceConnect"] = "ServiceConnect, DeviceConnect";
        AccessRights["RegistryReadRegistryWriteServiceConnect"] = "RegistryRead, RegistryWrite, ServiceConnect";
        AccessRights["RegistryReadRegistryWriteDeviceConnect"] = "RegistryRead, RegistryWrite, DeviceConnect";
        AccessRights["RegistryReadServiceConnectDeviceConnect"] = "RegistryRead, ServiceConnect, DeviceConnect";
        AccessRights["RegistryWriteServiceConnectDeviceConnect"] = "RegistryWrite, ServiceConnect, DeviceConnect";
        AccessRights["RegistryReadRegistryWriteServiceConnectDeviceConnect"] = "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect";
    })(AccessRights || (AccessRights = {}));
    /**
     * Defines values for IpFilterActionType.
     * Possible values include: 'Accept', 'Reject'
     * @readonly
     * @enum {string}
     */
    var IpFilterActionType;
    (function (IpFilterActionType) {
        IpFilterActionType["Accept"] = "Accept";
        IpFilterActionType["Reject"] = "Reject";
    })(IpFilterActionType || (IpFilterActionType = {}));
    /**
     * Defines values for RoutingSource.
     * Possible values include: 'Invalid', 'DeviceMessages', 'TwinChangeEvents',
     * 'DeviceLifecycleEvents', 'DeviceJobLifecycleEvents'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RoutingSource =
     * <RoutingSource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RoutingSource;
    (function (RoutingSource) {
        RoutingSource["Invalid"] = "Invalid";
        RoutingSource["DeviceMessages"] = "DeviceMessages";
        RoutingSource["TwinChangeEvents"] = "TwinChangeEvents";
        RoutingSource["DeviceLifecycleEvents"] = "DeviceLifecycleEvents";
        RoutingSource["DeviceJobLifecycleEvents"] = "DeviceJobLifecycleEvents";
    })(RoutingSource || (RoutingSource = {}));
    /**
     * Defines values for OperationMonitoringLevel.
     * Possible values include: 'None', 'Error', 'Information', 'Error,
     * Information'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: OperationMonitoringLevel =
     * <OperationMonitoringLevel>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var OperationMonitoringLevel;
    (function (OperationMonitoringLevel) {
        OperationMonitoringLevel["None"] = "None";
        OperationMonitoringLevel["Error"] = "Error";
        OperationMonitoringLevel["Information"] = "Information";
        OperationMonitoringLevel["ErrorInformation"] = "Error, Information";
    })(OperationMonitoringLevel || (OperationMonitoringLevel = {}));
    /**
     * Defines values for Capabilities.
     * Possible values include: 'None', 'DeviceManagement'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Capabilities =
     * <Capabilities>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Capabilities;
    (function (Capabilities) {
        Capabilities["None"] = "None";
        Capabilities["DeviceManagement"] = "DeviceManagement";
    })(Capabilities || (Capabilities = {}));
    /**
     * Defines values for IotHubSku.
     * Possible values include: 'F1', 'S1', 'S2', 'S3', 'B1', 'B2', 'B3'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: IotHubSku = <IotHubSku>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var IotHubSku;
    (function (IotHubSku) {
        IotHubSku["F1"] = "F1";
        IotHubSku["S1"] = "S1";
        IotHubSku["S2"] = "S2";
        IotHubSku["S3"] = "S3";
        IotHubSku["B1"] = "B1";
        IotHubSku["B2"] = "B2";
        IotHubSku["B3"] = "B3";
    })(IotHubSku || (IotHubSku = {}));
    /**
     * Defines values for IotHubSkuTier.
     * Possible values include: 'Free', 'Standard', 'Basic'
     * @readonly
     * @enum {string}
     */
    var IotHubSkuTier;
    (function (IotHubSkuTier) {
        IotHubSkuTier["Free"] = "Free";
        IotHubSkuTier["Standard"] = "Standard";
        IotHubSkuTier["Basic"] = "Basic";
    })(IotHubSkuTier || (IotHubSkuTier = {}));
    /**
     * Defines values for EndpointHealthStatus.
     * Possible values include: 'unknown', 'healthy', 'unhealthy', 'dead'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: EndpointHealthStatus =
     * <EndpointHealthStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var EndpointHealthStatus;
    (function (EndpointHealthStatus) {
        EndpointHealthStatus["Unknown"] = "unknown";
        EndpointHealthStatus["Healthy"] = "healthy";
        EndpointHealthStatus["Unhealthy"] = "unhealthy";
        EndpointHealthStatus["Dead"] = "dead";
    })(EndpointHealthStatus || (EndpointHealthStatus = {}));
    /**
     * Defines values for JobType.
     * Possible values include: 'unknown', 'export', 'import', 'backup',
     * 'readDeviceProperties', 'writeDeviceProperties',
     * 'updateDeviceConfiguration', 'rebootDevice', 'factoryResetDevice',
     * 'firmwareUpdate'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: JobType = <JobType>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var JobType;
    (function (JobType) {
        JobType["Unknown"] = "unknown";
        JobType["Export"] = "export";
        JobType["Import"] = "import";
        JobType["Backup"] = "backup";
        JobType["ReadDeviceProperties"] = "readDeviceProperties";
        JobType["WriteDeviceProperties"] = "writeDeviceProperties";
        JobType["UpdateDeviceConfiguration"] = "updateDeviceConfiguration";
        JobType["RebootDevice"] = "rebootDevice";
        JobType["FactoryResetDevice"] = "factoryResetDevice";
        JobType["FirmwareUpdate"] = "firmwareUpdate";
    })(JobType || (JobType = {}));
    /**
     * Defines values for JobStatus.
     * Possible values include: 'unknown', 'enqueued', 'running', 'completed',
     * 'failed', 'cancelled'
     * @readonly
     * @enum {string}
     */
    var JobStatus;
    (function (JobStatus) {
        JobStatus["Unknown"] = "unknown";
        JobStatus["Enqueued"] = "enqueued";
        JobStatus["Running"] = "running";
        JobStatus["Completed"] = "completed";
        JobStatus["Failed"] = "failed";
        JobStatus["Cancelled"] = "cancelled";
    })(JobStatus || (JobStatus = {}));
    /**
     * Defines values for IotHubScaleType.
     * Possible values include: 'Automatic', 'Manual', 'None'
     * @readonly
     * @enum {string}
     */
    var IotHubScaleType;
    (function (IotHubScaleType) {
        IotHubScaleType["Automatic"] = "Automatic";
        IotHubScaleType["Manual"] = "Manual";
        IotHubScaleType["None"] = "None";
    })(IotHubScaleType || (IotHubScaleType = {}));
    /**
     * Defines values for IotHubNameUnavailabilityReason.
     * Possible values include: 'Invalid', 'AlreadyExists'
     * @readonly
     * @enum {string}
     */
    var IotHubNameUnavailabilityReason;
    (function (IotHubNameUnavailabilityReason) {
        IotHubNameUnavailabilityReason["Invalid"] = "Invalid";
        IotHubNameUnavailabilityReason["AlreadyExists"] = "AlreadyExists";
    })(IotHubNameUnavailabilityReason || (IotHubNameUnavailabilityReason = {}));
    /**
     * Defines values for TestResultStatus.
     * Possible values include: 'undefined', 'false', 'true'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: TestResultStatus =
     * <TestResultStatus>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var TestResultStatus;
    (function (TestResultStatus) {
        TestResultStatus["Undefined"] = "undefined";
        TestResultStatus["False"] = "false";
        TestResultStatus["True"] = "true";
    })(TestResultStatus || (TestResultStatus = {}));
    /**
     * Defines values for RouteErrorSeverity.
     * Possible values include: 'error', 'warning'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: RouteErrorSeverity =
     * <RouteErrorSeverity>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var RouteErrorSeverity;
    (function (RouteErrorSeverity) {
        RouteErrorSeverity["Error"] = "error";
        RouteErrorSeverity["Warning"] = "warning";
    })(RouteErrorSeverity || (RouteErrorSeverity = {}));

    var index = /*#__PURE__*/Object.freeze({
        get AccessRights () { return AccessRights; },
        get IpFilterActionType () { return IpFilterActionType; },
        get RoutingSource () { return RoutingSource; },
        get OperationMonitoringLevel () { return OperationMonitoringLevel; },
        get Capabilities () { return Capabilities; },
        get IotHubSku () { return IotHubSku; },
        get IotHubSkuTier () { return IotHubSkuTier; },
        get EndpointHealthStatus () { return EndpointHealthStatus; },
        get JobType () { return JobType; },
        get JobStatus () { return JobStatus; },
        get IotHubScaleType () { return IotHubScaleType; },
        get IotHubNameUnavailabilityReason () { return IotHubNameUnavailabilityReason; },
        get TestResultStatus () { return TestResultStatus; },
        get RouteErrorSeverity () { return RouteErrorSeverity; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var CertificateVerificationDescription = {
        serializedName: "CertificateVerificationDescription",
        type: {
            name: "Composite",
            className: "CertificateVerificationDescription",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateProperties = {
        serializedName: "CertificateProperties",
        type: {
            name: "Composite",
            className: "CertificateProperties",
            modelProperties: {
                subject: {
                    readOnly: true,
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                expiry: {
                    readOnly: true,
                    serializedName: "expiry",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                thumbprint: {
                    readOnly: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                isVerified: {
                    readOnly: true,
                    serializedName: "isVerified",
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                updated: {
                    readOnly: true,
                    serializedName: "updated",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateDescription = {
        serializedName: "CertificateDescription",
        type: {
            name: "Composite",
            className: "CertificateDescription",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CertificateProperties"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateListDescription = {
        serializedName: "CertificateListDescription",
        type: {
            name: "Composite",
            className: "CertificateListDescription",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateBodyDescription = {
        serializedName: "CertificateBodyDescription",
        type: {
            name: "Composite",
            className: "CertificateBodyDescription",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificatePropertiesWithNonce = {
        serializedName: "CertificatePropertiesWithNonce",
        type: {
            name: "Composite",
            className: "CertificatePropertiesWithNonce",
            modelProperties: {
                subject: {
                    readOnly: true,
                    serializedName: "subject",
                    type: {
                        name: "String"
                    }
                },
                expiry: {
                    readOnly: true,
                    serializedName: "expiry",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                thumbprint: {
                    readOnly: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                isVerified: {
                    readOnly: true,
                    serializedName: "isVerified",
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                updated: {
                    readOnly: true,
                    serializedName: "updated",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                verificationCode: {
                    readOnly: true,
                    serializedName: "verificationCode",
                    type: {
                        name: "String"
                    }
                },
                certificate: {
                    readOnly: true,
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateWithNonceDescription = {
        serializedName: "CertificateWithNonceDescription",
        type: {
            name: "Composite",
            className: "CertificateWithNonceDescription",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CertificatePropertiesWithNonce"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedAccessSignatureAuthorizationRule = {
        serializedName: "SharedAccessSignatureAuthorizationRule",
        type: {
            name: "Composite",
            className: "SharedAccessSignatureAuthorizationRule",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                rights: {
                    required: true,
                    serializedName: "rights",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RegistryRead",
                            "RegistryWrite",
                            "ServiceConnect",
                            "DeviceConnect",
                            "RegistryRead, RegistryWrite",
                            "RegistryRead, ServiceConnect",
                            "RegistryRead, DeviceConnect",
                            "RegistryWrite, ServiceConnect",
                            "RegistryWrite, DeviceConnect",
                            "ServiceConnect, DeviceConnect",
                            "RegistryRead, RegistryWrite, ServiceConnect",
                            "RegistryRead, RegistryWrite, DeviceConnect",
                            "RegistryRead, ServiceConnect, DeviceConnect",
                            "RegistryWrite, ServiceConnect, DeviceConnect",
                            "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"
                        ]
                    }
                }
            }
        }
    };
    var IpFilterRule = {
        serializedName: "IpFilterRule",
        type: {
            name: "Composite",
            className: "IpFilterRule",
            modelProperties: {
                filterName: {
                    required: true,
                    serializedName: "filterName",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Accept",
                            "Reject"
                        ]
                    }
                },
                ipMask: {
                    required: true,
                    serializedName: "ipMask",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubProperties = {
        serializedName: "EventHubProperties",
        type: {
            name: "Composite",
            className: "EventHubProperties",
            modelProperties: {
                retentionTimeInDays: {
                    serializedName: "retentionTimeInDays",
                    type: {
                        name: "Number"
                    }
                },
                partitionCount: {
                    serializedName: "partitionCount",
                    type: {
                        name: "Number"
                    }
                },
                partitionIds: {
                    readOnly: true,
                    serializedName: "partitionIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                path: {
                    readOnly: true,
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    readOnly: true,
                    serializedName: "endpoint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingServiceBusQueueEndpointProperties = {
        serializedName: "RoutingServiceBusQueueEndpointProperties",
        type: {
            name: "Composite",
            className: "RoutingServiceBusQueueEndpointProperties",
            modelProperties: {
                connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^[A-Za-z0-9-._]{1,64}$/
                    },
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingServiceBusTopicEndpointProperties = {
        serializedName: "RoutingServiceBusTopicEndpointProperties",
        type: {
            name: "Composite",
            className: "RoutingServiceBusTopicEndpointProperties",
            modelProperties: {
                connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^[A-Za-z0-9-._]{1,64}$/
                    },
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingEventHubProperties = {
        serializedName: "RoutingEventHubProperties",
        type: {
            name: "Composite",
            className: "RoutingEventHubProperties",
            modelProperties: {
                connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^[A-Za-z0-9-._]{1,64}$/
                    },
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingStorageContainerProperties = {
        serializedName: "RoutingStorageContainerProperties",
        type: {
            name: "Composite",
            className: "RoutingStorageContainerProperties",
            modelProperties: {
                connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^[A-Za-z0-9-._]{1,64}$/
                    },
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    required: true,
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                },
                fileNameFormat: {
                    serializedName: "fileNameFormat",
                    type: {
                        name: "String"
                    }
                },
                batchFrequencyInSeconds: {
                    serializedName: "batchFrequencyInSeconds",
                    constraints: {
                        InclusiveMaximum: 720,
                        InclusiveMinimum: 60
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxChunkSizeInBytes: {
                    serializedName: "maxChunkSizeInBytes",
                    constraints: {
                        InclusiveMaximum: 524288000,
                        InclusiveMinimum: 10485760
                    },
                    type: {
                        name: "Number"
                    }
                },
                encoding: {
                    serializedName: "encoding",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingEndpoints = {
        serializedName: "RoutingEndpoints",
        type: {
            name: "Composite",
            className: "RoutingEndpoints",
            modelProperties: {
                serviceBusQueues: {
                    serializedName: "serviceBusQueues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingServiceBusQueueEndpointProperties"
                            }
                        }
                    }
                },
                serviceBusTopics: {
                    serializedName: "serviceBusTopics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingServiceBusTopicEndpointProperties"
                            }
                        }
                    }
                },
                eventHubs: {
                    serializedName: "eventHubs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingEventHubProperties"
                            }
                        }
                    }
                },
                storageContainers: {
                    serializedName: "storageContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingStorageContainerProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var RouteProperties = {
        serializedName: "RouteProperties",
        type: {
            name: "Composite",
            className: "RouteProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^[A-Za-z0-9-._]{1,64}$/
                    },
                    type: {
                        name: "String"
                    }
                },
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "String"
                    }
                },
                condition: {
                    serializedName: "condition",
                    type: {
                        name: "String"
                    }
                },
                endpointNames: {
                    required: true,
                    serializedName: "endpointNames",
                    constraints: {
                        MaxItems: 1,
                        MinItems: 1
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FallbackRouteProperties = {
        serializedName: "FallbackRouteProperties",
        type: {
            name: "Composite",
            className: "FallbackRouteProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    required: true,
                    isConstant: true,
                    serializedName: "source",
                    defaultValue: 'DeviceMessages',
                    type: {
                        name: "String"
                    }
                },
                condition: {
                    serializedName: "condition",
                    type: {
                        name: "String"
                    }
                },
                endpointNames: {
                    required: true,
                    serializedName: "endpointNames",
                    constraints: {
                        MaxItems: 1,
                        MinItems: 1
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RoutingProperties = {
        serializedName: "RoutingProperties",
        type: {
            name: "Composite",
            className: "RoutingProperties",
            modelProperties: {
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Composite",
                        className: "RoutingEndpoints"
                    }
                },
                routes: {
                    serializedName: "routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteProperties"
                            }
                        }
                    }
                },
                fallbackRoute: {
                    serializedName: "fallbackRoute",
                    type: {
                        name: "Composite",
                        className: "FallbackRouteProperties"
                    }
                }
            }
        }
    };
    var StorageEndpointProperties = {
        serializedName: "StorageEndpointProperties",
        type: {
            name: "Composite",
            className: "StorageEndpointProperties",
            modelProperties: {
                sasTtlAsIso8601: {
                    serializedName: "sasTtlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    required: true,
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MessagingEndpointProperties = {
        serializedName: "MessagingEndpointProperties",
        type: {
            name: "Composite",
            className: "MessagingEndpointProperties",
            modelProperties: {
                lockDurationAsIso8601: {
                    serializedName: "lockDurationAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                ttlAsIso8601: {
                    serializedName: "ttlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                maxDeliveryCount: {
                    serializedName: "maxDeliveryCount",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FeedbackProperties = {
        serializedName: "FeedbackProperties",
        type: {
            name: "Composite",
            className: "FeedbackProperties",
            modelProperties: {
                lockDurationAsIso8601: {
                    serializedName: "lockDurationAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                ttlAsIso8601: {
                    serializedName: "ttlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                maxDeliveryCount: {
                    serializedName: "maxDeliveryCount",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CloudToDeviceProperties = {
        serializedName: "CloudToDeviceProperties",
        type: {
            name: "Composite",
            className: "CloudToDeviceProperties",
            modelProperties: {
                maxDeliveryCount: {
                    serializedName: "maxDeliveryCount",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                defaultTtlAsIso8601: {
                    serializedName: "defaultTtlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                feedback: {
                    serializedName: "feedback",
                    type: {
                        name: "Composite",
                        className: "FeedbackProperties"
                    }
                }
            }
        }
    };
    var OperationsMonitoringProperties = {
        serializedName: "OperationsMonitoringProperties",
        type: {
            name: "Composite",
            className: "OperationsMonitoringProperties",
            modelProperties: {
                events: {
                    serializedName: "events",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var IotHubProperties = {
        serializedName: "IotHubProperties",
        type: {
            name: "Composite",
            className: "IotHubProperties",
            modelProperties: {
                authorizationPolicies: {
                    serializedName: "authorizationPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessSignatureAuthorizationRule"
                            }
                        }
                    }
                },
                ipFilterRules: {
                    serializedName: "ipFilterRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpFilterRule"
                            }
                        }
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                hostName: {
                    readOnly: true,
                    serializedName: "hostName",
                    type: {
                        name: "String"
                    }
                },
                eventHubEndpoints: {
                    serializedName: "eventHubEndpoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "EventHubProperties"
                            }
                        }
                    }
                },
                routing: {
                    serializedName: "routing",
                    type: {
                        name: "Composite",
                        className: "RoutingProperties"
                    }
                },
                storageEndpoints: {
                    serializedName: "storageEndpoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "StorageEndpointProperties"
                            }
                        }
                    }
                },
                messagingEndpoints: {
                    serializedName: "messagingEndpoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MessagingEndpointProperties"
                            }
                        }
                    }
                },
                enableFileUploadNotifications: {
                    serializedName: "enableFileUploadNotifications",
                    type: {
                        name: "Boolean"
                    }
                },
                cloudToDevice: {
                    serializedName: "cloudToDevice",
                    type: {
                        name: "Composite",
                        className: "CloudToDeviceProperties"
                    }
                },
                comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                },
                operationsMonitoringProperties: {
                    serializedName: "operationsMonitoringProperties",
                    type: {
                        name: "Composite",
                        className: "OperationsMonitoringProperties"
                    }
                },
                features: {
                    serializedName: "features",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubSkuInfo = {
        serializedName: "IotHubSkuInfo",
        type: {
            name: "Composite",
            className: "IotHubSkuInfo",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Free",
                            "Standard",
                            "Basic"
                        ]
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    constraints: {
                        Pattern: /^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$/
                    },
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var IotHubDescription = {
        serializedName: "IotHubDescription",
        type: {
            name: "Composite",
            className: "IotHubDescription",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "IotHubProperties"
                    }
                }, sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IotHubSkuInfo"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                httpStatusCode: {
                    readOnly: true,
                    serializedName: "httpStatusCode",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubQuotaMetricInfo = {
        serializedName: "IotHubQuotaMetricInfo",
        type: {
            name: "Composite",
            className: "IotHubQuotaMetricInfo",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                maxValue: {
                    readOnly: true,
                    serializedName: "maxValue",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EndpointHealthData = {
        serializedName: "EndpointHealthData",
        type: {
            name: "Composite",
            className: "EndpointHealthData",
            modelProperties: {
                endpointId: {
                    serializedName: "endpointId",
                    type: {
                        name: "String"
                    }
                },
                healthStatus: {
                    serializedName: "healthStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryStatistics = {
        serializedName: "RegistryStatistics",
        type: {
            name: "Composite",
            className: "RegistryStatistics",
            modelProperties: {
                totalDeviceCount: {
                    readOnly: true,
                    serializedName: "totalDeviceCount",
                    type: {
                        name: "Number"
                    }
                },
                enabledDeviceCount: {
                    readOnly: true,
                    serializedName: "enabledDeviceCount",
                    type: {
                        name: "Number"
                    }
                },
                disabledDeviceCount: {
                    readOnly: true,
                    serializedName: "disabledDeviceCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var JobResponse = {
        serializedName: "JobResponse",
        type: {
            name: "Composite",
            className: "JobResponse",
            modelProperties: {
                jobId: {
                    readOnly: true,
                    serializedName: "jobId",
                    type: {
                        name: "String"
                    }
                },
                startTimeUtc: {
                    readOnly: true,
                    serializedName: "startTimeUtc",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                endTimeUtc: {
                    readOnly: true,
                    serializedName: "endTimeUtc",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "enqueued",
                            "running",
                            "completed",
                            "failed",
                            "cancelled"
                        ]
                    }
                },
                failureReason: {
                    readOnly: true,
                    serializedName: "failureReason",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                },
                parentJobId: {
                    readOnly: true,
                    serializedName: "parentJobId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubCapacity = {
        serializedName: "IotHubCapacity",
        type: {
            name: "Composite",
            className: "IotHubCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    constraints: {
                        InclusiveMaximum: 1,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Automatic",
                            "Manual",
                            "None"
                        ]
                    }
                }
            }
        }
    };
    var IotHubSkuDescription = {
        serializedName: "IotHubSkuDescription",
        type: {
            name: "Composite",
            className: "IotHubSkuDescription",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IotHubSkuInfo"
                    }
                },
                capacity: {
                    required: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "IotHubCapacity"
                    }
                }
            }
        }
    };
    var TagsResource = {
        serializedName: "TagsResource",
        type: {
            name: "Composite",
            className: "TagsResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EventHubConsumerGroupInfo = {
        serializedName: "EventHubConsumerGroupInfo",
        type: {
            name: "Composite",
            className: "EventHubConsumerGroupInfo",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationInputs = {
        serializedName: "OperationInputs",
        type: {
            name: "Composite",
            className: "OperationInputs",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubNameAvailabilityInfo = {
        serializedName: "IotHubNameAvailabilityInfo",
        type: {
            name: "Composite",
            className: "IotHubNameAvailabilityInfo",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Invalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Name = {
        serializedName: "Name",
        type: {
            name: "Composite",
            className: "Name",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserSubscriptionQuota = {
        serializedName: "UserSubscriptionQuota",
        type: {
            name: "Composite",
            className: "UserSubscriptionQuota",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "Name"
                    }
                }
            }
        }
    };
    var UserSubscriptionQuotaListResult = {
        serializedName: "UserSubscriptionQuotaListResult",
        type: {
            name: "Composite",
            className: "UserSubscriptionQuotaListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserSubscriptionQuota"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingMessage = {
        serializedName: "RoutingMessage",
        type: {
            name: "Composite",
            className: "RoutingMessage",
            modelProperties: {
                body: {
                    serializedName: "body",
                    type: {
                        name: "String"
                    }
                },
                appProperties: {
                    serializedName: "appProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                systemProperties: {
                    serializedName: "systemProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoutingTwinProperties = {
        serializedName: "RoutingTwin_properties",
        type: {
            name: "Composite",
            className: "RoutingTwinProperties",
            modelProperties: {
                desiredProperties: {
                    serializedName: "desiredProperties",
                    type: {
                        name: "Object"
                    }
                },
                reportedProperties: {
                    serializedName: "reportedProperties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var RoutingTwin = {
        serializedName: "RoutingTwin",
        type: {
            name: "Composite",
            className: "RoutingTwin",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Object"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RoutingTwinProperties"
                    }
                }
            }
        }
    };
    var TestAllRoutesInput = {
        serializedName: "TestAllRoutesInput",
        type: {
            name: "Composite",
            className: "TestAllRoutesInput",
            modelProperties: {
                routingSource: {
                    serializedName: "routingSource",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "Composite",
                        className: "RoutingMessage"
                    }
                },
                twin: {
                    serializedName: "twin",
                    type: {
                        name: "Composite",
                        className: "RoutingTwin"
                    }
                }
            }
        }
    };
    var MatchedRoute = {
        serializedName: "MatchedRoute",
        type: {
            name: "Composite",
            className: "MatchedRoute",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RouteProperties"
                    }
                }
            }
        }
    };
    var TestAllRoutesResult = {
        serializedName: "TestAllRoutesResult",
        type: {
            name: "Composite",
            className: "TestAllRoutesResult",
            modelProperties: {
                routes: {
                    serializedName: "routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MatchedRoute"
                            }
                        }
                    }
                }
            }
        }
    };
    var TestRouteInput = {
        serializedName: "TestRouteInput",
        type: {
            name: "Composite",
            className: "TestRouteInput",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "Composite",
                        className: "RoutingMessage"
                    }
                },
                route: {
                    required: true,
                    serializedName: "route",
                    type: {
                        name: "Composite",
                        className: "RouteProperties"
                    }
                },
                twin: {
                    serializedName: "twin",
                    type: {
                        name: "Composite",
                        className: "RoutingTwin"
                    }
                }
            }
        }
    };
    var RouteErrorPosition = {
        serializedName: "RouteErrorPosition",
        type: {
            name: "Composite",
            className: "RouteErrorPosition",
            modelProperties: {
                line: {
                    serializedName: "line",
                    type: {
                        name: "Number"
                    }
                },
                column: {
                    serializedName: "column",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RouteErrorRange = {
        serializedName: "RouteErrorRange",
        type: {
            name: "Composite",
            className: "RouteErrorRange",
            modelProperties: {
                start: {
                    serializedName: "start",
                    type: {
                        name: "Composite",
                        className: "RouteErrorPosition"
                    }
                },
                end: {
                    serializedName: "end",
                    type: {
                        name: "Composite",
                        className: "RouteErrorPosition"
                    }
                }
            }
        }
    };
    var RouteCompilationError = {
        serializedName: "RouteCompilationError",
        type: {
            name: "Composite",
            className: "RouteCompilationError",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "Composite",
                        className: "RouteErrorRange"
                    }
                }
            }
        }
    };
    var TestRouteResultDetails = {
        serializedName: "TestRouteResultDetails",
        type: {
            name: "Composite",
            className: "TestRouteResultDetails",
            modelProperties: {
                compilationErrors: {
                    serializedName: "compilationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteCompilationError"
                            }
                        }
                    }
                }
            }
        }
    };
    var TestRouteResult = {
        serializedName: "TestRouteResult",
        type: {
            name: "Composite",
            className: "TestRouteResult",
            modelProperties: {
                result: {
                    serializedName: "result",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Composite",
                        className: "TestRouteResultDetails"
                    }
                }
            }
        }
    };
    var ExportDevicesRequest = {
        serializedName: "ExportDevicesRequest",
        type: {
            name: "Composite",
            className: "ExportDevicesRequest",
            modelProperties: {
                exportBlobContainerUri: {
                    required: true,
                    serializedName: "exportBlobContainerUri",
                    type: {
                        name: "String"
                    }
                },
                excludeKeys: {
                    required: true,
                    serializedName: "excludeKeys",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ImportDevicesRequest = {
        serializedName: "ImportDevicesRequest",
        type: {
            name: "Composite",
            className: "ImportDevicesRequest",
            modelProperties: {
                inputBlobContainerUri: {
                    required: true,
                    serializedName: "inputBlobContainerUri",
                    type: {
                        name: "String"
                    }
                },
                outputBlobContainerUri: {
                    required: true,
                    serializedName: "outputBlobContainerUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubDescriptionListResult = {
        serializedName: "IotHubDescriptionListResult",
        type: {
            name: "Composite",
            className: "IotHubDescriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubSkuDescriptionListResult = {
        serializedName: "IotHubSkuDescriptionListResult",
        type: {
            name: "Composite",
            className: "IotHubSkuDescriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubSkuDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubConsumerGroupsListResult = {
        serializedName: "EventHubConsumerGroupsListResult",
        type: {
            name: "Composite",
            className: "EventHubConsumerGroupsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventHubConsumerGroupInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobResponseListResult = {
        serializedName: "JobResponseListResult",
        type: {
            name: "Composite",
            className: "JobResponseListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubQuotaMetricInfoListResult = {
        serializedName: "IotHubQuotaMetricInfoListResult",
        type: {
            name: "Composite",
            className: "IotHubQuotaMetricInfoListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubQuotaMetricInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointHealthDataListResult = {
        serializedName: "EndpointHealthDataListResult",
        type: {
            name: "Composite",
            className: "EndpointHealthDataListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointHealthData"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SharedAccessSignatureAuthorizationRuleListResult = {
        serializedName: "SharedAccessSignatureAuthorizationRuleListResult",
        type: {
            name: "Composite",
            className: "SharedAccessSignatureAuthorizationRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessSignatureAuthorizationRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        CertificateVerificationDescription: CertificateVerificationDescription,
        CertificateProperties: CertificateProperties,
        CertificateDescription: CertificateDescription,
        CertificateListDescription: CertificateListDescription,
        CertificateBodyDescription: CertificateBodyDescription,
        CertificatePropertiesWithNonce: CertificatePropertiesWithNonce,
        CertificateWithNonceDescription: CertificateWithNonceDescription,
        SharedAccessSignatureAuthorizationRule: SharedAccessSignatureAuthorizationRule,
        IpFilterRule: IpFilterRule,
        EventHubProperties: EventHubProperties,
        RoutingServiceBusQueueEndpointProperties: RoutingServiceBusQueueEndpointProperties,
        RoutingServiceBusTopicEndpointProperties: RoutingServiceBusTopicEndpointProperties,
        RoutingEventHubProperties: RoutingEventHubProperties,
        RoutingStorageContainerProperties: RoutingStorageContainerProperties,
        RoutingEndpoints: RoutingEndpoints,
        RouteProperties: RouteProperties,
        FallbackRouteProperties: FallbackRouteProperties,
        RoutingProperties: RoutingProperties,
        StorageEndpointProperties: StorageEndpointProperties,
        MessagingEndpointProperties: MessagingEndpointProperties,
        FeedbackProperties: FeedbackProperties,
        CloudToDeviceProperties: CloudToDeviceProperties,
        OperationsMonitoringProperties: OperationsMonitoringProperties,
        IotHubProperties: IotHubProperties,
        IotHubSkuInfo: IotHubSkuInfo,
        Resource: Resource,
        IotHubDescription: IotHubDescription,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        ErrorDetails: ErrorDetails,
        IotHubQuotaMetricInfo: IotHubQuotaMetricInfo,
        EndpointHealthData: EndpointHealthData,
        RegistryStatistics: RegistryStatistics,
        JobResponse: JobResponse,
        IotHubCapacity: IotHubCapacity,
        IotHubSkuDescription: IotHubSkuDescription,
        TagsResource: TagsResource,
        EventHubConsumerGroupInfo: EventHubConsumerGroupInfo,
        OperationInputs: OperationInputs,
        IotHubNameAvailabilityInfo: IotHubNameAvailabilityInfo,
        Name: Name,
        UserSubscriptionQuota: UserSubscriptionQuota,
        UserSubscriptionQuotaListResult: UserSubscriptionQuotaListResult,
        RoutingMessage: RoutingMessage,
        RoutingTwinProperties: RoutingTwinProperties,
        RoutingTwin: RoutingTwin,
        TestAllRoutesInput: TestAllRoutesInput,
        MatchedRoute: MatchedRoute,
        TestAllRoutesResult: TestAllRoutesResult,
        TestRouteInput: TestRouteInput,
        RouteErrorPosition: RouteErrorPosition,
        RouteErrorRange: RouteErrorRange,
        RouteCompilationError: RouteCompilationError,
        TestRouteResultDetails: TestRouteResultDetails,
        TestRouteResult: TestRouteResult,
        ExportDevicesRequest: ExportDevicesRequest,
        ImportDevicesRequest: ImportDevicesRequest,
        OperationListResult: OperationListResult,
        IotHubDescriptionListResult: IotHubDescriptionListResult,
        IotHubSkuDescriptionListResult: IotHubSkuDescriptionListResult,
        EventHubConsumerGroupsListResult: EventHubConsumerGroupsListResult,
        JobResponseListResult: JobResponseListResult,
        IotHubQuotaMetricInfoListResult: IotHubQuotaMetricInfoListResult,
        EndpointHealthDataListResult: EndpointHealthDataListResult,
        SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            constraints: {
                Pattern: /^[A-Za-z0-9-._]{1,64}$/
            },
            type: {
                name: "String"
            }
        }
    };
    var eventHubEndpointName = {
        parameterPath: "eventHubEndpointName",
        mapper: {
            required: true,
            serializedName: "eventHubEndpointName",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch0 = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var iotHubName = {
        parameterPath: "iotHubName",
        mapper: {
            required: true,
            serializedName: "iotHubName",
            type: {
                name: "String"
            }
        }
    };
    var jobId = {
        parameterPath: "jobId",
        mapper: {
            required: true,
            serializedName: "jobId",
            type: {
                name: "String"
            }
        }
    };
    var keyName = {
        parameterPath: "keyName",
        mapper: {
            required: true,
            serializedName: "keyName",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {IotHubClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Devices/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        IotHubDescription: IotHubDescription,
        Resource: Resource,
        BaseResource: BaseResource,
        IotHubProperties: IotHubProperties,
        SharedAccessSignatureAuthorizationRule: SharedAccessSignatureAuthorizationRule,
        IpFilterRule: IpFilterRule,
        EventHubProperties: EventHubProperties,
        RoutingProperties: RoutingProperties,
        RoutingEndpoints: RoutingEndpoints,
        RoutingServiceBusQueueEndpointProperties: RoutingServiceBusQueueEndpointProperties,
        RoutingServiceBusTopicEndpointProperties: RoutingServiceBusTopicEndpointProperties,
        RoutingEventHubProperties: RoutingEventHubProperties,
        RoutingStorageContainerProperties: RoutingStorageContainerProperties,
        RouteProperties: RouteProperties,
        FallbackRouteProperties: FallbackRouteProperties,
        StorageEndpointProperties: StorageEndpointProperties,
        MessagingEndpointProperties: MessagingEndpointProperties,
        CloudToDeviceProperties: CloudToDeviceProperties,
        FeedbackProperties: FeedbackProperties,
        OperationsMonitoringProperties: OperationsMonitoringProperties,
        IotHubSkuInfo: IotHubSkuInfo,
        ErrorDetails: ErrorDetails,
        TagsResource: TagsResource,
        CloudError: CloudError,
        IotHubDescriptionListResult: IotHubDescriptionListResult,
        RegistryStatistics: RegistryStatistics,
        IotHubSkuDescriptionListResult: IotHubSkuDescriptionListResult,
        IotHubSkuDescription: IotHubSkuDescription,
        IotHubCapacity: IotHubCapacity,
        EventHubConsumerGroupsListResult: EventHubConsumerGroupsListResult,
        EventHubConsumerGroupInfo: EventHubConsumerGroupInfo,
        JobResponseListResult: JobResponseListResult,
        JobResponse: JobResponse,
        IotHubQuotaMetricInfoListResult: IotHubQuotaMetricInfoListResult,
        IotHubQuotaMetricInfo: IotHubQuotaMetricInfo,
        EndpointHealthDataListResult: EndpointHealthDataListResult,
        EndpointHealthData: EndpointHealthData,
        OperationInputs: OperationInputs,
        IotHubNameAvailabilityInfo: IotHubNameAvailabilityInfo,
        TestAllRoutesInput: TestAllRoutesInput,
        RoutingMessage: RoutingMessage,
        RoutingTwin: RoutingTwin,
        RoutingTwinProperties: RoutingTwinProperties,
        TestAllRoutesResult: TestAllRoutesResult,
        MatchedRoute: MatchedRoute,
        TestRouteInput: TestRouteInput,
        TestRouteResult: TestRouteResult,
        TestRouteResultDetails: TestRouteResultDetails,
        RouteCompilationError: RouteCompilationError,
        RouteErrorRange: RouteErrorRange,
        RouteErrorPosition: RouteErrorPosition,
        SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult,
        ExportDevicesRequest: ExportDevicesRequest,
        ImportDevicesRequest: ImportDevicesRequest,
        CertificateDescription: CertificateDescription,
        CertificateProperties: CertificateProperties,
        CertificateWithNonceDescription: CertificateWithNonceDescription,
        CertificatePropertiesWithNonce: CertificatePropertiesWithNonce
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a IotHubResource. */
    var IotHubResource = /** @class */ (function () {
        /**
         * Create a IotHubResource.
         * @param {IotHubClientContext} client Reference to the service client.
         */
        function IotHubResource(client) {
            this.client = client;
        }
        IotHubResource.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
         * retrieve the IoT hub metadata and security metadata, and then combine them with the modified
         * values in a new body to update the IoT hub.
         * @summary Create or update the metadata of an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param iotHubDescription The IoT hub metadata and security metadata.
         * @param [options] The optional parameters
         * @returns Promise<Models.IotHubResourceCreateOrUpdateResponse>
         */
        IotHubResource.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, iotHubDescription, options) {
            return this.beginCreateOrUpdate(resourceGroupName$$1, resourceName$$1, iotHubDescription, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
         * @summary Update an existing IoT Hubs tags.
         * @param resourceGroupName Resource group identifier.
         * @param resourceName Name of iot hub to update.
         * @param [options] The optional parameters
         * @returns Promise<Models.IotHubResourceUpdateResponse>
         */
        IotHubResource.prototype.update = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginUpdate(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete an IoT hub.
         * @summary Delete an IoT hub
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param [options] The optional parameters
         * @returns Promise<Models.IotHubResourceDeleteMethodResponse>
         */
        IotHubResource.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        IotHubResource.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        IotHubResource.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        IotHubResource.prototype.getStats = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getStatsOperationSpec, callback);
        };
        IotHubResource.prototype.getValidSkus = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getValidSkusOperationSpec, callback);
        };
        IotHubResource.prototype.listEventHubConsumerGroups = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                options: options
            }, listEventHubConsumerGroupsOperationSpec, callback);
        };
        IotHubResource.prototype.getEventHubConsumerGroup = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                name: name$$1,
                options: options
            }, getEventHubConsumerGroupOperationSpec, callback);
        };
        IotHubResource.prototype.createEventHubConsumerGroup = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                name: name$$1,
                options: options
            }, createEventHubConsumerGroupOperationSpec, callback);
        };
        IotHubResource.prototype.deleteEventHubConsumerGroup = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, name$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                name: name$$1,
                options: options
            }, deleteEventHubConsumerGroupOperationSpec, callback);
        };
        IotHubResource.prototype.listJobs = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listJobsOperationSpec, callback);
        };
        IotHubResource.prototype.getJob = function (resourceGroupName$$1, resourceName$$1, jobId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                jobId: jobId$$1,
                options: options
            }, getJobOperationSpec, callback);
        };
        IotHubResource.prototype.getQuotaMetrics = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getQuotaMetricsOperationSpec, callback);
        };
        IotHubResource.prototype.getEndpointHealth = function (resourceGroupName$$1, iotHubName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                iotHubName: iotHubName$$1,
                options: options
            }, getEndpointHealthOperationSpec, callback);
        };
        IotHubResource.prototype.checkNameAvailability = function (name$$1, options, callback) {
            return this.client.sendOperationRequest({
                name: name$$1,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        IotHubResource.prototype.testAllRoutes = function (input, iotHubName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                input: input,
                iotHubName: iotHubName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, testAllRoutesOperationSpec, callback);
        };
        IotHubResource.prototype.testRoute = function (input, iotHubName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                input: input,
                iotHubName: iotHubName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, testRouteOperationSpec, callback);
        };
        IotHubResource.prototype.listKeys = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        IotHubResource.prototype.getKeysForKeyName = function (resourceGroupName$$1, resourceName$$1, keyName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                keyName: keyName$$1,
                options: options
            }, getKeysForKeyNameOperationSpec, callback);
        };
        IotHubResource.prototype.exportDevices = function (resourceGroupName$$1, resourceName$$1, exportDevicesParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                exportDevicesParameters: exportDevicesParameters,
                options: options
            }, exportDevicesOperationSpec, callback);
        };
        IotHubResource.prototype.importDevices = function (resourceGroupName$$1, resourceName$$1, importDevicesParameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                importDevicesParameters: importDevicesParameters,
                options: options
            }, importDevicesOperationSpec, callback);
        };
        /**
         * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to
         * retrieve the IoT hub metadata and security metadata, and then combine them with the modified
         * values in a new body to update the IoT hub.
         * @summary Create or update the metadata of an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param iotHubDescription The IoT hub metadata and security metadata.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IotHubResource.prototype.beginCreateOrUpdate = function (resourceGroupName$$1, resourceName$$1, iotHubDescription, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                iotHubDescription: iotHubDescription,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
         * @summary Update an existing IoT Hubs tags.
         * @param resourceGroupName Resource group identifier.
         * @param resourceName Name of iot hub to update.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IotHubResource.prototype.beginUpdate = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Delete an IoT hub.
         * @summary Delete an IoT hub
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        IotHubResource.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        IotHubResource.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        IotHubResource.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        IotHubResource.prototype.getValidSkusNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, getValidSkusNextOperationSpec, callback);
        };
        IotHubResource.prototype.listEventHubConsumerGroupsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listEventHubConsumerGroupsNextOperationSpec, callback);
        };
        IotHubResource.prototype.listJobsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listJobsNextOperationSpec, callback);
        };
        IotHubResource.prototype.getQuotaMetricsNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, getQuotaMetricsNextOperationSpec, callback);
        };
        IotHubResource.prototype.getEndpointHealthNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, getEndpointHealthNextOperationSpec, callback);
        };
        IotHubResource.prototype.listKeysNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listKeysNextOperationSpec, callback);
        };
        return IotHubResource;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getStatsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RegistryStatistics
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getValidSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubSkuDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listEventHubConsumerGroupsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupsListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getEventHubConsumerGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var createEventHubConsumerGroupOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var deleteEventHubConsumerGroupOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listJobsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResponseListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getJobOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            jobId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getQuotaMetricsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubQuotaMetricInfoListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getEndpointHealthOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            iotHubName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EndpointHealthDataListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign({}, OperationInputs, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IotHubNameAvailabilityInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var testAllRoutesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall",
        urlParameters: [
            iotHubName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, TestAllRoutesInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TestAllRoutesResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var testRouteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew",
        urlParameters: [
            iotHubName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "input",
            mapper: __assign({}, TestRouteInput, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TestRouteResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getKeysForKeyNameOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            keyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRule
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var exportDevicesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "exportDevicesParameters",
            mapper: __assign({}, ExportDevicesRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var importDevicesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "importDevicesParameters",
            mapper: __assign({}, ImportDevicesRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: JobResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "iotHubDescription",
            mapper: __assign({}, IotHubDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            201: {
                bodyMapper: IotHubDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: [
                    "options",
                    "tags"
                ]
            },
            mapper: __assign({}, TagsResource, { required: true })
        },
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            202: {
                bodyMapper: IotHubDescription
            },
            204: {},
            404: {
                bodyMapper: ErrorDetails
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getValidSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubSkuDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listEventHubConsumerGroupsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupsListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listJobsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: JobResponseListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getQuotaMetricsNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: IotHubQuotaMetricInfoListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var getEndpointHealthNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EndpointHealthDataListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };
    var listKeysNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        UserSubscriptionQuotaListResult: UserSubscriptionQuotaListResult,
        UserSubscriptionQuota: UserSubscriptionQuota,
        Name: Name,
        ErrorDetails: ErrorDetails
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceProviderCommon. */
    var ResourceProviderCommon = /** @class */ (function () {
        /**
         * Create a ResourceProviderCommon.
         * @param {IotHubClientContext} client Reference to the service client.
         */
        function ResourceProviderCommon(client) {
            this.client = client;
        }
        ResourceProviderCommon.prototype.getSubscriptionQuota = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, getSubscriptionQuotaOperationSpec, callback);
        };
        return ResourceProviderCommon;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getSubscriptionQuotaOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserSubscriptionQuotaListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        CertificateListDescription: CertificateListDescription,
        CertificateDescription: CertificateDescription,
        BaseResource: BaseResource,
        CertificateProperties: CertificateProperties,
        ErrorDetails: ErrorDetails,
        CertificateBodyDescription: CertificateBodyDescription,
        CertificateWithNonceDescription: CertificateWithNonceDescription,
        CertificatePropertiesWithNonce: CertificatePropertiesWithNonce,
        CertificateVerificationDescription: CertificateVerificationDescription,
        Resource: Resource,
        EventHubConsumerGroupInfo: EventHubConsumerGroupInfo,
        IotHubDescription: IotHubDescription,
        IotHubProperties: IotHubProperties,
        SharedAccessSignatureAuthorizationRule: SharedAccessSignatureAuthorizationRule,
        IpFilterRule: IpFilterRule,
        EventHubProperties: EventHubProperties,
        RoutingProperties: RoutingProperties,
        RoutingEndpoints: RoutingEndpoints,
        RoutingServiceBusQueueEndpointProperties: RoutingServiceBusQueueEndpointProperties,
        RoutingServiceBusTopicEndpointProperties: RoutingServiceBusTopicEndpointProperties,
        RoutingEventHubProperties: RoutingEventHubProperties,
        RoutingStorageContainerProperties: RoutingStorageContainerProperties,
        RouteProperties: RouteProperties,
        FallbackRouteProperties: FallbackRouteProperties,
        StorageEndpointProperties: StorageEndpointProperties,
        MessagingEndpointProperties: MessagingEndpointProperties,
        CloudToDeviceProperties: CloudToDeviceProperties,
        FeedbackProperties: FeedbackProperties,
        OperationsMonitoringProperties: OperationsMonitoringProperties,
        IotHubSkuInfo: IotHubSkuInfo
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Certificates. */
    var Certificates = /** @class */ (function () {
        /**
         * Create a Certificates.
         * @param {IotHubClientContext} client Reference to the service client.
         */
        function Certificates(client) {
            this.client = client;
        }
        Certificates.prototype.listByIotHub = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listByIotHubOperationSpec, callback);
        };
        Certificates.prototype.get = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Certificates.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Certificates.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                ifMatch: ifMatch,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Certificates.prototype.generateVerificationCode = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                ifMatch: ifMatch,
                options: options
            }, generateVerificationCodeOperationSpec, callback);
        };
        Certificates.prototype.verify = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                ifMatch: ifMatch,
                options: options
            }, verifyOperationSpec, callback);
        };
        return Certificates;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByIotHubOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateListDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                certificate: [
                    "options",
                    "certificate"
                ]
            },
            mapper: __assign({}, CertificateBodyDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CertificateDescription
            },
            201: {
                bodyMapper: CertificateDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$3
    };
    var generateVerificationCodeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateWithNonceDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$3
    };
    var verifyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                certificate: [
                    "options",
                    "certificate"
                ]
            },
            mapper: __assign({}, CertificateVerificationDescription, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CertificateDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-iothub";
    var packageVersion = "1.0.0";
    var IotHubClientContext = /** @class */ (function (_super) {
        __extends(IotHubClientContext, _super);
        /**
         * Initializes a new instance of the IotHubClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function IotHubClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return IotHubClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var IotHubClient = /** @class */ (function (_super) {
        __extends(IotHubClient, _super);
        /**
         * Initializes a new instance of the IotHubClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The subscription identifier.
         * @param [options] The parameter options
         */
        function IotHubClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.iotHubResource = new IotHubResource(_this);
            _this.resourceProviderCommon = new ResourceProviderCommon(_this);
            _this.certificates = new Certificates(_this);
            return _this;
        }
        return IotHubClient;
    }(IotHubClientContext));

    exports.IotHubClient = IotHubClient;
    exports.IotHubClientContext = IotHubClientContext;
    exports.IotHubModels = index;
    exports.IotHubMappers = mappers;
    exports.Operations = Operations;
    exports.IotHubResource = IotHubResource;
    exports.ResourceProviderCommon = ResourceProviderCommon;
    exports.Certificates = Certificates;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-iothub.js.map
