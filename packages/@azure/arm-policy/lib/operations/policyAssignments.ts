/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policyAssignmentsMappers";
import * as Parameters from "../models/parameters";
import { PolicyClientContext } from "../policyClientContext";

/** Class representing a PolicyAssignments. */
export class PolicyAssignments {
  private readonly client: PolicyClientContext;

  /**
   * Create a PolicyAssignments.
   * @param {PolicyClientContext} client Reference to the service client.
   */
  constructor(client: PolicyClientContext) {
    this.client = client;
  }

  /**
   * This operation deletes a policy assignment, given its name and the scope it was created in. The
   * scope of a policy assignment is the part of its ID preceding
   * '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @summary Deletes a policy assignment.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsDeleteMethodResponse>
   */
  deleteMethod(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsDeleteMethodResponse>;
  /**
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param callback The callback
   */
  deleteMethod(scope: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(scope: string, policyAssignmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  deleteMethod(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        policyAssignmentName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsDeleteMethodResponse>;
  }

  /**
   * This operation creates or updates a policy assignment with the given scope and name. Policy
   * assignments apply to all resources contained within their scope. For example, when you assign a
   * policy at resource group scope, that policy applies to all resources in the group.
   * @summary Creates or updates a policy assignment.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsCreateResponse>
   */
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsCreateResponse>;
  /**
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param callback The callback
   */
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        policyAssignmentName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsCreateResponse>;
  }

  /**
   * This operation retrieves a single policy assignment, given its name and the scope it was created
   * at.
   * @summary Retrieves a policy assignment.
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsGetResponse>
   */
  get(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsGetResponse>;
  /**
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param callback The callback
   */
  get(scope: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param scope The scope of the policy assignment. Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, policyAssignmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  get(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        policyAssignmentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsGetResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given resource
   * group in the given subscription that match the optional given $filter. Valid values for $filter
   * are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource group, including
   * those that apply directly or apply from containing scopes, as well as any applied to resources
   * contained within the resource group. If $filter=atScope() is provided, the returned list
   * includes all policy assignments that apply to the resource group, which is everything in the
   * unfiltered list except those applied to resources contained within the resource group. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes only policy
   * assignments that apply to the resource group and assign the policy definition whose id is
   * {value}.
   * @summary Retrieves all policy assignments that apply to a resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListForResourceGroupResponse>
   */
  listForResourceGroup(resourceGroupName: string, options?: Models.PolicyAssignmentsListForResourceGroupOptionalParams): Promise<Models.PolicyAssignmentsListForResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param callback The callback
   */
  listForResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroup(resourceGroupName: string, options: Models.PolicyAssignmentsListForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResourceGroup(resourceGroupName: string, options?: Models.PolicyAssignmentsListForResourceGroupOptionalParams, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listForResourceGroupOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceGroupResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the specified
   * resource in the given resource group and subscription that match the optional given $filter.
   * Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
   * not provided, the unfiltered list includes all policy assignments associated with the resource,
   * including those that apply directly or from all containing scopes, as well as any applied to
   * resources contained within the resource. If $filter=atScope() is provided, the returned list
   * includes all policy assignments that apply to the resource, which is everything in the
   * unfiltered list except those applied to resources contained within the resource. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes only policy
   * assignments that apply to the resource and assign the policy definition whose id is {value}.
   * Three parameters plus the resource name are used to identify a specific resource. If the
   * resource is not part of a parent resource (the more common case), the parent resource path
   * should not be provided (or provided as ''). For example a web app could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately
   * is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} ==
   * 'MyWebApp').
   * @summary Retrieves all policy assignments that apply to a resource.
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the
   * namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites'
   * (from Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListForResourceResponse>
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: Models.PolicyAssignmentsListForResourceOptionalParams): Promise<Models.PolicyAssignmentsListForResourceResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the
   * namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites'
   * (from Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param callback The callback
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the
   * namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites'
   * (from Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: Models.PolicyAssignmentsListForResourceOptionalParams, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: Models.PolicyAssignmentsListForResourceOptionalParams, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        options
      },
      listForResourceOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given
   * subscription that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects
   * contained within the subscription. If $filter=atScope() is provided, the returned list includes
   * all policy assignments that apply to the subscription, which is everything in the unfiltered
   * list except those applied to objects contained within the subscription. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes only policy
   * assignments that apply to the subscription and assign the policy definition whose id is {value}.
   * @summary Retrieves all policy assignments that apply to a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListResponse>
   */
  list(options?: Models.PolicyAssignmentsListOptionalParams): Promise<Models.PolicyAssignmentsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.PolicyAssignmentsListOptionalParams, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  list(options?: Models.PolicyAssignmentsListOptionalParams, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListResponse>;
  }

  /**
   * This operation deletes the policy with the given ID. Policy assignment IDs have this format:
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * formats for {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}'
   * (management group), '/subscriptions/{subscriptionId}' (subscription),
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * (resource).
   * @summary Deletes a policy assignment.
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsDeleteByIdResponse>
   */
  deleteById(policyAssignmentId: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsDeleteByIdResponse>;
  /**
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param callback The callback
   */
  deleteById(policyAssignmentId: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteById(policyAssignmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  deleteById(policyAssignmentId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsDeleteByIdResponse> {
    return this.client.sendOperationRequest(
      {
        policyAssignmentId,
        options
      },
      deleteByIdOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsDeleteByIdResponse>;
  }

  /**
   * This operation creates or updates the policy assignment with the given ID. Policy assignments
   * made on a scope apply to all resources contained in that scope. For example, when you assign a
   * policy to a resource group that policy applies to all resources in the group. Policy assignment
   * IDs have this format:
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'. Valid
   * scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   * @summary Creates or updates a policy assignment.
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param parameters Parameters for policy assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsCreateByIdResponse>
   */
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsCreateByIdResponse>;
  /**
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param parameters Parameters for policy assignment.
   * @param callback The callback
   */
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param parameters Parameters for policy assignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsCreateByIdResponse> {
    return this.client.sendOperationRequest(
      {
        policyAssignmentId,
        parameters,
        options
      },
      createByIdOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsCreateByIdResponse>;
  }

  /**
   * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this
   * format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * Valid scopes are: management group (format:
   * '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   * '/subscriptions/{subscriptionId}'), resource group (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
   * @summary Retrieves the policy assignment with the given ID.
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsGetByIdResponse>
   */
  getById(policyAssignmentId: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsGetByIdResponse>;
  /**
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param callback The callback
   */
  getById(policyAssignmentId: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   * '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(policyAssignmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  getById(policyAssignmentId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        policyAssignmentId,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsGetByIdResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given resource
   * group in the given subscription that match the optional given $filter. Valid values for $filter
   * are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
   * unfiltered list includes all policy assignments associated with the resource group, including
   * those that apply directly or apply from containing scopes, as well as any applied to resources
   * contained within the resource group. If $filter=atScope() is provided, the returned list
   * includes all policy assignments that apply to the resource group, which is everything in the
   * unfiltered list except those applied to resources contained within the resource group. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes only policy
   * assignments that apply to the resource group and assign the policy definition whose id is
   * {value}.
   * @summary Retrieves all policy assignments that apply to a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>
   */
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceGroupNextOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the specified
   * resource in the given resource group and subscription that match the optional given $filter.
   * Valid values for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
   * not provided, the unfiltered list includes all policy assignments associated with the resource,
   * including those that apply directly or from all containing scopes, as well as any applied to
   * resources contained within the resource. If $filter=atScope() is provided, the returned list
   * includes all policy assignments that apply to the resource, which is everything in the
   * unfiltered list except those applied to resources contained within the resource. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes only policy
   * assignments that apply to the resource and assign the policy definition whose id is {value}.
   * Three parameters plus the resource name are used to identify a specific resource. If the
   * resource is not part of a parent resource (the more common case), the parent resource path
   * should not be provided (or provided as ''). For example a web app could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '', {resourceType} ==
   * 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all
   * parameters should be provided. For example a virtual machine DNS name could be specified as
   * ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately
   * is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} ==
   * 'MyWebApp').
   * @summary Retrieves all policy assignments that apply to a resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListForResourceNextResponse>
   */
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsListForResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceNextOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceNextResponse>;
  }

  /**
   * This operation retrieves the list of all policy assignments associated with the given
   * subscription that match the optional given $filter. Valid values for $filter are: 'atScope()' or
   * 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all
   * policy assignments associated with the subscription, including those that apply directly or from
   * management groups that contain the given subscription, as well as any applied to objects
   * contained within the subscription. If $filter=atScope() is provided, the returned list includes
   * all policy assignments that apply to the subscription, which is everything in the unfiltered
   * list except those applied to objects contained within the subscription. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes only policy
   * assignments that apply to the subscription and assign the policy definition whose id is {value}.
   * @summary Retrieves all policy assignments that apply to a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicyAssignment,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{policyAssignmentId}",
  urlParameters: [
    Parameters.policyAssignmentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{policyAssignmentId}",
  urlParameters: [
    Parameters.policyAssignmentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicyAssignment,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{policyAssignmentId}",
  urlParameters: [
    Parameters.policyAssignmentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
