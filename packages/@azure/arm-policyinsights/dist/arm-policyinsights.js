/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-azure-js'), require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-azure-js', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmPolicyinsights = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for PolicyStatesResource.
     * Possible values include: 'default', 'latest'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: PolicyStatesResource =
     * <PolicyStatesResource>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var PolicyStatesResource;
    (function (PolicyStatesResource) {
        PolicyStatesResource["Default"] = "default";
        PolicyStatesResource["Latest"] = "latest";
    })(PolicyStatesResource || (PolicyStatesResource = {}));

    var index = /*#__PURE__*/Object.freeze({
        get PolicyStatesResource () { return PolicyStatesResource; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var PolicyDetails = {
        serializedName: "PolicyDetails",
        type: {
            name: "Composite",
            className: "PolicyDetails",
            modelProperties: {
                policyDefinitionId: {
                    readOnly: true,
                    serializedName: "policyDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentId: {
                    readOnly: true,
                    serializedName: "policyAssignmentId",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentDisplayName: {
                    readOnly: true,
                    serializedName: "policyAssignmentDisplayName",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentScope: {
                    readOnly: true,
                    serializedName: "policyAssignmentScope",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionId: {
                    readOnly: true,
                    serializedName: "policySetDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionReferenceId: {
                    readOnly: true,
                    serializedName: "policyDefinitionReferenceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResourceModificationDetails = {
        serializedName: "TrackedResourceModificationDetails",
        type: {
            name: "Composite",
            className: "TrackedResourceModificationDetails",
            modelProperties: {
                policyDetails: {
                    readOnly: true,
                    serializedName: "policyDetails",
                    type: {
                        name: "Composite",
                        className: "PolicyDetails"
                    }
                },
                deploymentId: {
                    readOnly: true,
                    serializedName: "deploymentId",
                    type: {
                        name: "String"
                    }
                },
                deploymentTime: {
                    readOnly: true,
                    serializedName: "deploymentTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var PolicyTrackedResource = {
        serializedName: "PolicyTrackedResource",
        type: {
            name: "Composite",
            className: "PolicyTrackedResource",
            modelProperties: {
                trackedResourceId: {
                    readOnly: true,
                    serializedName: "trackedResourceId",
                    type: {
                        name: "String"
                    }
                },
                policyDetails: {
                    readOnly: true,
                    serializedName: "policyDetails",
                    type: {
                        name: "Composite",
                        className: "PolicyDetails"
                    }
                },
                createdBy: {
                    readOnly: true,
                    serializedName: "createdBy",
                    type: {
                        name: "Composite",
                        className: "TrackedResourceModificationDetails"
                    }
                },
                lastModifiedBy: {
                    readOnly: true,
                    serializedName: "lastModifiedBy",
                    type: {
                        name: "Composite",
                        className: "TrackedResourceModificationDetails"
                    }
                },
                lastUpdateUtc: {
                    readOnly: true,
                    serializedName: "lastUpdateUtc",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var QueryFailureError = {
        serializedName: "QueryFailure_error",
        type: {
            name: "Composite",
            className: "QueryFailureError",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryFailure = {
        serializedName: "QueryFailure",
        type: {
            name: "Composite",
            className: "QueryFailure",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "QueryFailureError"
                    }
                }
            }
        }
    };
    var RemediationFilters = {
        serializedName: "RemediationFilters",
        type: {
            name: "Composite",
            className: "RemediationFilters",
            modelProperties: {
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RemediationDeploymentSummary = {
        serializedName: "RemediationDeploymentSummary",
        type: {
            name: "Composite",
            className: "RemediationDeploymentSummary",
            modelProperties: {
                totalDeployments: {
                    serializedName: "totalDeployments",
                    type: {
                        name: "Number"
                    }
                },
                successfulDeployments: {
                    serializedName: "successfulDeployments",
                    type: {
                        name: "Number"
                    }
                },
                failedDeployments: {
                    serializedName: "failedDeployments",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RemediationProperties = {
        serializedName: "RemediationProperties",
        type: {
            name: "Composite",
            className: "RemediationProperties",
            modelProperties: {
                policyAssignmentId: {
                    serializedName: "policyAssignmentId",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionReferenceId: {
                    serializedName: "policyDefinitionReferenceId",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                createdOn: {
                    readOnly: true,
                    serializedName: "createdOn",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedOn: {
                    readOnly: true,
                    serializedName: "lastUpdatedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "RemediationFilters"
                    }
                },
                deploymentStatus: {
                    serializedName: "deploymentStatus",
                    type: {
                        name: "Composite",
                        className: "RemediationDeploymentSummary"
                    }
                }
            }
        }
    };
    var Remediation = {
        serializedName: "Remediation",
        type: {
            name: "Composite",
            className: "Remediation",
            modelProperties: {
                policyAssignmentId: {
                    serializedName: "properties.policyAssignmentId",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionReferenceId: {
                    serializedName: "properties.policyDefinitionReferenceId",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                },
                createdOn: {
                    readOnly: true,
                    serializedName: "properties.createdOn",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedOn: {
                    readOnly: true,
                    serializedName: "properties.lastUpdatedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                filters: {
                    serializedName: "properties.filters",
                    type: {
                        name: "Composite",
                        className: "RemediationFilters"
                    }
                },
                deploymentStatus: {
                    serializedName: "properties.deploymentStatus",
                    type: {
                        name: "Composite",
                        className: "RemediationDeploymentSummary"
                    }
                },
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TypedErrorInfo = {
        serializedName: "TypedErrorInfo",
        type: {
            name: "Composite",
            className: "TypedErrorInfo",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                info: {
                    readOnly: true,
                    serializedName: "info",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ErrorDefinition = {
        serializedName: "ErrorDefinition",
        type: {
            name: "Composite",
            className: "ErrorDefinition",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDefinition"
                            }
                        }
                    }
                },
                additionalInfo: {
                    readOnly: true,
                    serializedName: "additionalInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TypedErrorInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var RemediationDeployment = {
        serializedName: "RemediationDeployment",
        type: {
            name: "Composite",
            className: "RemediationDeployment",
            modelProperties: {
                remediatedResourceId: {
                    readOnly: true,
                    serializedName: "remediatedResourceId",
                    type: {
                        name: "String"
                    }
                },
                deploymentId: {
                    readOnly: true,
                    serializedName: "deploymentId",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                resourceLocation: {
                    readOnly: true,
                    serializedName: "resourceLocation",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDefinition"
                    }
                },
                createdOn: {
                    readOnly: true,
                    serializedName: "createdOn",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedOn: {
                    readOnly: true,
                    serializedName: "lastUpdatedOn",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDefinition"
                    }
                }
            }
        }
    };
    var PolicyEvent = {
        serializedName: "PolicyEvent",
        type: {
            name: "Composite",
            className: "PolicyEvent",
            modelProperties: {
                odataid: {
                    serializedName: "@odata\\.id",
                    type: {
                        name: "String"
                    }
                },
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentId: {
                    serializedName: "policyAssignmentId",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionId: {
                    serializedName: "policyDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                effectiveParameters: {
                    serializedName: "effectiveParameters",
                    type: {
                        name: "String"
                    }
                },
                isCompliant: {
                    serializedName: "isCompliant",
                    type: {
                        name: "Boolean"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceLocation: {
                    serializedName: "resourceLocation",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceTags: {
                    serializedName: "resourceTags",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentName: {
                    serializedName: "policyAssignmentName",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentOwner: {
                    serializedName: "policyAssignmentOwner",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentParameters: {
                    serializedName: "policyAssignmentParameters",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentScope: {
                    serializedName: "policyAssignmentScope",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionName: {
                    serializedName: "policyDefinitionName",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionAction: {
                    serializedName: "policyDefinitionAction",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionCategory: {
                    serializedName: "policyDefinitionCategory",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionId: {
                    serializedName: "policySetDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionName: {
                    serializedName: "policySetDefinitionName",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionOwner: {
                    serializedName: "policySetDefinitionOwner",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionCategory: {
                    serializedName: "policySetDefinitionCategory",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionParameters: {
                    serializedName: "policySetDefinitionParameters",
                    type: {
                        name: "String"
                    }
                },
                managementGroupIds: {
                    serializedName: "managementGroupIds",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionReferenceId: {
                    serializedName: "policyDefinitionReferenceId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                principalOid: {
                    serializedName: "principalOid",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var PolicyEventsQueryResults = {
        serializedName: "PolicyEventsQueryResults",
        type: {
            name: "Composite",
            className: "PolicyEventsQueryResults",
            modelProperties: {
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                odatacount: {
                    serializedName: "@odata\\.count",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyEvent",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var PolicyState = {
        serializedName: "PolicyState",
        type: {
            name: "Composite",
            className: "PolicyState",
            modelProperties: {
                odataid: {
                    serializedName: "@odata\\.id",
                    type: {
                        name: "String"
                    }
                },
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentId: {
                    serializedName: "policyAssignmentId",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionId: {
                    serializedName: "policyDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                effectiveParameters: {
                    serializedName: "effectiveParameters",
                    type: {
                        name: "String"
                    }
                },
                isCompliant: {
                    serializedName: "isCompliant",
                    type: {
                        name: "Boolean"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceLocation: {
                    serializedName: "resourceLocation",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                resourceTags: {
                    serializedName: "resourceTags",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentName: {
                    serializedName: "policyAssignmentName",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentOwner: {
                    serializedName: "policyAssignmentOwner",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentParameters: {
                    serializedName: "policyAssignmentParameters",
                    type: {
                        name: "String"
                    }
                },
                policyAssignmentScope: {
                    serializedName: "policyAssignmentScope",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionName: {
                    serializedName: "policyDefinitionName",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionAction: {
                    serializedName: "policyDefinitionAction",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionCategory: {
                    serializedName: "policyDefinitionCategory",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionId: {
                    serializedName: "policySetDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionName: {
                    serializedName: "policySetDefinitionName",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionOwner: {
                    serializedName: "policySetDefinitionOwner",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionCategory: {
                    serializedName: "policySetDefinitionCategory",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionParameters: {
                    serializedName: "policySetDefinitionParameters",
                    type: {
                        name: "String"
                    }
                },
                managementGroupIds: {
                    serializedName: "managementGroupIds",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionReferenceId: {
                    serializedName: "policyDefinitionReferenceId",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var PolicyStatesQueryResults = {
        serializedName: "PolicyStatesQueryResults",
        type: {
            name: "Composite",
            className: "PolicyStatesQueryResults",
            modelProperties: {
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                odatacount: {
                    serializedName: "@odata\\.count",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyState",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var SummaryResults = {
        serializedName: "SummaryResults",
        type: {
            name: "Composite",
            className: "SummaryResults",
            modelProperties: {
                queryResultsUri: {
                    serializedName: "queryResultsUri",
                    type: {
                        name: "String"
                    }
                },
                nonCompliantResources: {
                    serializedName: "nonCompliantResources",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                nonCompliantPolicies: {
                    serializedName: "nonCompliantPolicies",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PolicyDefinitionSummary = {
        serializedName: "PolicyDefinitionSummary",
        type: {
            name: "Composite",
            className: "PolicyDefinitionSummary",
            modelProperties: {
                policyDefinitionId: {
                    serializedName: "policyDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                policyDefinitionReferenceId: {
                    serializedName: "policyDefinitionReferenceId",
                    type: {
                        name: "String"
                    }
                },
                effect: {
                    serializedName: "effect",
                    type: {
                        name: "String"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "Composite",
                        className: "SummaryResults"
                    }
                }
            }
        }
    };
    var PolicyAssignmentSummary = {
        serializedName: "PolicyAssignmentSummary",
        type: {
            name: "Composite",
            className: "PolicyAssignmentSummary",
            modelProperties: {
                policyAssignmentId: {
                    serializedName: "policyAssignmentId",
                    type: {
                        name: "String"
                    }
                },
                policySetDefinitionId: {
                    serializedName: "policySetDefinitionId",
                    type: {
                        name: "String"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "Composite",
                        className: "SummaryResults"
                    }
                },
                policyDefinitions: {
                    serializedName: "policyDefinitions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyDefinitionSummary"
                            }
                        }
                    }
                }
            }
        }
    };
    var Summary = {
        serializedName: "Summary",
        type: {
            name: "Composite",
            className: "Summary",
            modelProperties: {
                odataid: {
                    serializedName: "@odata\\.id",
                    type: {
                        name: "String"
                    }
                },
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                results: {
                    serializedName: "results",
                    type: {
                        name: "Composite",
                        className: "SummaryResults"
                    }
                },
                policyAssignments: {
                    serializedName: "policyAssignments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyAssignmentSummary"
                            }
                        }
                    }
                }
            }
        }
    };
    var SummarizeResults = {
        serializedName: "SummarizeResults",
        type: {
            name: "Composite",
            className: "SummarizeResults",
            modelProperties: {
                odatacontext: {
                    serializedName: "@odata\\.context",
                    type: {
                        name: "String"
                    }
                },
                odatacount: {
                    serializedName: "@odata\\.count",
                    constraints: {
                        InclusiveMaximum: 1,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Summary"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationsListResults = {
        serializedName: "OperationsListResults",
        type: {
            name: "Composite",
            className: "OperationsListResults",
            modelProperties: {
                odatacount: {
                    serializedName: "@odata\\.count",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var QueryOptions = {
        type: {
            name: "Composite",
            className: "QueryOptions",
            modelProperties: {
                top: {
                    type: {
                        name: "Number"
                    }
                },
                filter: {
                    type: {
                        name: "String"
                    }
                },
                orderBy: {
                    type: {
                        name: "String"
                    }
                },
                select: {
                    type: {
                        name: "String"
                    }
                },
                from: {
                    type: {
                        name: "DateTime"
                    }
                },
                to: {
                    type: {
                        name: "DateTime"
                    }
                },
                apply: {
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PolicyTrackedResourcesQueryResults = {
        serializedName: "PolicyTrackedResourcesQueryResults",
        type: {
            name: "Composite",
            className: "PolicyTrackedResourcesQueryResults",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PolicyTrackedResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RemediationDeploymentsListResult = {
        serializedName: "RemediationDeploymentsListResult",
        type: {
            name: "Composite",
            className: "RemediationDeploymentsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RemediationDeployment"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RemediationListResult = {
        serializedName: "RemediationListResult",
        type: {
            name: "Composite",
            className: "RemediationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Remediation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        PolicyDetails: PolicyDetails,
        TrackedResourceModificationDetails: TrackedResourceModificationDetails,
        PolicyTrackedResource: PolicyTrackedResource,
        QueryFailureError: QueryFailureError,
        QueryFailure: QueryFailure,
        RemediationFilters: RemediationFilters,
        RemediationDeploymentSummary: RemediationDeploymentSummary,
        RemediationProperties: RemediationProperties,
        Remediation: Remediation,
        TypedErrorInfo: TypedErrorInfo,
        ErrorDefinition: ErrorDefinition,
        RemediationDeployment: RemediationDeployment,
        ErrorResponse: ErrorResponse,
        PolicyEvent: PolicyEvent,
        PolicyEventsQueryResults: PolicyEventsQueryResults,
        PolicyState: PolicyState,
        PolicyStatesQueryResults: PolicyStatesQueryResults,
        SummaryResults: SummaryResults,
        PolicyDefinitionSummary: PolicyDefinitionSummary,
        PolicyAssignmentSummary: PolicyAssignmentSummary,
        Summary: Summary,
        SummarizeResults: SummarizeResults,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationsListResults: OperationsListResults,
        QueryOptions: QueryOptions,
        PolicyTrackedResourcesQueryResults: PolicyTrackedResourcesQueryResults,
        RemediationDeploymentsListResult: RemediationDeploymentsListResult,
        RemediationListResult: RemediationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        PolicyTrackedResourcesQueryResults: PolicyTrackedResourcesQueryResults,
        PolicyTrackedResource: PolicyTrackedResource,
        PolicyDetails: PolicyDetails,
        TrackedResourceModificationDetails: TrackedResourceModificationDetails,
        QueryFailure: QueryFailure,
        QueryFailureError: QueryFailureError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-07-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-04-04',
            type: {
                name: "String"
            }
        }
    };
    var apply = {
        parameterPath: [
            "options",
            "queryOptions",
            "apply"
        ],
        mapper: {
            serializedName: "$apply",
            type: {
                name: "String"
            }
        }
    };
    var authorizationNamespace = {
        parameterPath: "authorizationNamespace",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "authorizationNamespace",
            defaultValue: 'Microsoft.Authorization',
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "queryOptions",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var from = {
        parameterPath: [
            "options",
            "queryOptions",
            "from"
        ],
        mapper: {
            serializedName: "$from",
            type: {
                name: "DateTime"
            }
        }
    };
    var managementGroupId = {
        parameterPath: "managementGroupId",
        mapper: {
            required: true,
            serializedName: "managementGroupId",
            type: {
                name: "String"
            }
        }
    };
    var managementGroupName = {
        parameterPath: "managementGroupName",
        mapper: {
            required: true,
            serializedName: "managementGroupName",
            type: {
                name: "String"
            }
        }
    };
    var managementGroupsNamespace = {
        parameterPath: "managementGroupsNamespace",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "managementGroupsNamespace",
            defaultValue: 'Microsoft.Management',
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var orderBy = {
        parameterPath: [
            "options",
            "queryOptions",
            "orderBy"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var policyAssignmentName = {
        parameterPath: "policyAssignmentName",
        mapper: {
            required: true,
            serializedName: "policyAssignmentName",
            type: {
                name: "String"
            }
        }
    };
    var policyDefinitionName = {
        parameterPath: "policyDefinitionName",
        mapper: {
            required: true,
            serializedName: "policyDefinitionName",
            type: {
                name: "String"
            }
        }
    };
    var policyEventsResource = {
        parameterPath: "policyEventsResource",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "policyEventsResource",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var policySetDefinitionName = {
        parameterPath: "policySetDefinitionName",
        mapper: {
            required: true,
            serializedName: "policySetDefinitionName",
            type: {
                name: "String"
            }
        }
    };
    var policyStatesResource = {
        parameterPath: "policyStatesResource",
        mapper: {
            required: true,
            serializedName: "policyStatesResource",
            type: {
                name: "String"
            }
        }
    };
    var policyStatesSummaryResource = {
        parameterPath: "policyStatesSummaryResource",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "policyStatesSummaryResource",
            defaultValue: 'latest',
            type: {
                name: "String"
            }
        }
    };
    var policyTrackedResourcesResource = {
        parameterPath: "policyTrackedResourcesResource",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "policyTrackedResourcesResource",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var remediationName = {
        parameterPath: "remediationName",
        mapper: {
            required: true,
            serializedName: "remediationName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceId = {
        parameterPath: "resourceId",
        mapper: {
            required: true,
            serializedName: "resourceId",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var scope = {
        parameterPath: "scope",
        mapper: {
            required: true,
            serializedName: "scope",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var select = {
        parameterPath: [
            "options",
            "queryOptions",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var to = {
        parameterPath: [
            "options",
            "queryOptions",
            "to"
        ],
        mapper: {
            serializedName: "$to",
            type: {
                name: "DateTime"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "queryOptions",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMinimum: 0
            },
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PolicyTrackedResources. */
    var PolicyTrackedResources = /** @class */ (function () {
        /**
         * Create a PolicyTrackedResources.
         * @param {PolicyInsightsClientContext} client Reference to the service client.
         */
        function PolicyTrackedResources(client) {
            this.client = client;
        }
        PolicyTrackedResources.prototype.listQueryResultsForManagementGroup = function (managementGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupName: managementGroupName$$1,
                options: options
            }, listQueryResultsForManagementGroupOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForSubscription = function (subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, listQueryResultsForSubscriptionOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForResourceGroup = function (resourceGroupName$$1, subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                subscriptionId: subscriptionId$$1,
                options: options
            }, listQueryResultsForResourceGroupOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForResource = function (resourceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                options: options
            }, listQueryResultsForResourceOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForManagementGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listQueryResultsForManagementGroupNextOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForSubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listQueryResultsForSubscriptionNextOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listQueryResultsForResourceGroupNextOperationSpec, callback);
        };
        PolicyTrackedResources.prototype.listQueryResultsForResourceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listQueryResultsForResourceNextOperationSpec, callback);
        };
        return PolicyTrackedResources;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listQueryResultsForManagementGroupOperationSpec = {
        httpMethod: "POST",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupName,
            policyTrackedResourcesResource
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
        urlParameters: [
            policyTrackedResourcesResource,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForResourceGroupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
        urlParameters: [
            resourceGroupName,
            policyTrackedResourcesResource,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForResourceOperationSpec = {
        httpMethod: "POST",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/policyTrackedResources/{policyTrackedResourcesResource}/queryResults",
        urlParameters: [
            resourceId,
            policyTrackedResourcesResource
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForManagementGroupNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForSubscriptionNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForResourceGroupNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };
    var listQueryResultsForResourceNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyTrackedResourcesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        RemediationDeploymentsListResult: RemediationDeploymentsListResult,
        RemediationDeployment: RemediationDeployment,
        ErrorDefinition: ErrorDefinition,
        TypedErrorInfo: TypedErrorInfo,
        ErrorResponse: ErrorResponse,
        Remediation: Remediation,
        BaseResource: BaseResource,
        RemediationFilters: RemediationFilters,
        RemediationDeploymentSummary: RemediationDeploymentSummary,
        RemediationListResult: RemediationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Remediations. */
    var Remediations = /** @class */ (function () {
        /**
         * Create a Remediations.
         * @param {PolicyInsightsClientContext} client Reference to the service client.
         */
        function Remediations(client) {
            this.client = client;
        }
        Remediations.prototype.listDeploymentsAtManagementGroup = function (managementGroupId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                remediationName: remediationName$$1,
                options: options
            }, listDeploymentsAtManagementGroupOperationSpec, callback);
        };
        Remediations.prototype.cancelAtManagementGroup = function (managementGroupId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                remediationName: remediationName$$1,
                options: options
            }, cancelAtManagementGroupOperationSpec, callback);
        };
        Remediations.prototype.listForManagementGroup = function (managementGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                options: options
            }, listForManagementGroupOperationSpec, callback);
        };
        Remediations.prototype.createOrUpdateAtManagementGroup = function (managementGroupId$$1, remediationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                remediationName: remediationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAtManagementGroupOperationSpec, callback);
        };
        Remediations.prototype.getAtManagementGroup = function (managementGroupId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                remediationName: remediationName$$1,
                options: options
            }, getAtManagementGroupOperationSpec, callback);
        };
        Remediations.prototype.deleteAtManagementGroup = function (managementGroupId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupId: managementGroupId$$1,
                remediationName: remediationName$$1,
                options: options
            }, deleteAtManagementGroupOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtSubscription = function (subscriptionId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                remediationName: remediationName$$1,
                options: options
            }, listDeploymentsAtSubscriptionOperationSpec, callback);
        };
        Remediations.prototype.cancelAtSubscription = function (subscriptionId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                remediationName: remediationName$$1,
                options: options
            }, cancelAtSubscriptionOperationSpec, callback);
        };
        Remediations.prototype.listForSubscription = function (subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, listForSubscriptionOperationSpec, callback);
        };
        Remediations.prototype.createOrUpdateAtSubscription = function (subscriptionId$$1, remediationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                remediationName: remediationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAtSubscriptionOperationSpec, callback);
        };
        Remediations.prototype.getAtSubscription = function (subscriptionId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                remediationName: remediationName$$1,
                options: options
            }, getAtSubscriptionOperationSpec, callback);
        };
        Remediations.prototype.deleteAtSubscription = function (subscriptionId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                remediationName: remediationName$$1,
                options: options
            }, deleteAtSubscriptionOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                remediationName: remediationName$$1,
                options: options
            }, listDeploymentsAtResourceGroupOperationSpec, callback);
        };
        Remediations.prototype.cancelAtResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                remediationName: remediationName$$1,
                options: options
            }, cancelAtResourceGroupOperationSpec, callback);
        };
        Remediations.prototype.listForResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listForResourceGroupOperationSpec, callback);
        };
        Remediations.prototype.createOrUpdateAtResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, remediationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                remediationName: remediationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAtResourceGroupOperationSpec, callback);
        };
        Remediations.prototype.getAtResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                remediationName: remediationName$$1,
                options: options
            }, getAtResourceGroupOperationSpec, callback);
        };
        Remediations.prototype.deleteAtResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                remediationName: remediationName$$1,
                options: options
            }, deleteAtResourceGroupOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtResource = function (resourceId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                remediationName: remediationName$$1,
                options: options
            }, listDeploymentsAtResourceOperationSpec, callback);
        };
        Remediations.prototype.cancelAtResource = function (resourceId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                remediationName: remediationName$$1,
                options: options
            }, cancelAtResourceOperationSpec, callback);
        };
        Remediations.prototype.listForResource = function (resourceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                options: options
            }, listForResourceOperationSpec, callback);
        };
        Remediations.prototype.createOrUpdateAtResource = function (resourceId$$1, remediationName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                remediationName: remediationName$$1,
                parameters: parameters,
                options: options
            }, createOrUpdateAtResourceOperationSpec, callback);
        };
        Remediations.prototype.getAtResource = function (resourceId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                remediationName: remediationName$$1,
                options: options
            }, getAtResourceOperationSpec, callback);
        };
        Remediations.prototype.deleteAtResource = function (resourceId$$1, remediationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                remediationName: remediationName$$1,
                options: options
            }, deleteAtResourceOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtManagementGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listDeploymentsAtManagementGroupNextOperationSpec, callback);
        };
        Remediations.prototype.listForManagementGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForManagementGroupNextOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtSubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listDeploymentsAtSubscriptionNextOperationSpec, callback);
        };
        Remediations.prototype.listForSubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForSubscriptionNextOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listDeploymentsAtResourceGroupNextOperationSpec, callback);
        };
        Remediations.prototype.listForResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceGroupNextOperationSpec, callback);
        };
        Remediations.prototype.listDeploymentsAtResourceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listDeploymentsAtResourceNextOperationSpec, callback);
        };
        Remediations.prototype.listForResourceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listForResourceNextOperationSpec, callback);
        };
        return Remediations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listDeploymentsAtManagementGroupOperationSpec = {
        httpMethod: "POST",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupId,
            remediationName
        ],
        queryParameters: [
            apiVersion0,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var cancelAtManagementGroupOperationSpec = {
        httpMethod: "POST",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForManagementGroupOperationSpec = {
        httpMethod: "GET",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupId
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAtManagementGroupOperationSpec = {
        httpMethod: "PUT",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Remediation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Remediation
            },
            201: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getAtManagementGroupOperationSpec = {
        httpMethod: "GET",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteAtManagementGroupOperationSpec = {
        httpMethod: "DELETE",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            managementGroupsNamespace,
            managementGroupId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
        urlParameters: [
            subscriptionId,
            remediationName
        ],
        queryParameters: [
            apiVersion0,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var cancelAtSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
        urlParameters: [
            subscriptionId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForSubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAtSubscriptionOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            subscriptionId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Remediation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Remediation
            },
            201: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getAtSubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            subscriptionId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteAtSubscriptionOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            subscriptionId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtResourceGroupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            remediationName
        ],
        queryParameters: [
            apiVersion0,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var cancelAtResourceGroupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAtResourceGroupOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Remediation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Remediation
            },
            201: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getAtResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteAtResourceGroupOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtResourceOperationSpec = {
        httpMethod: "POST",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
        urlParameters: [
            resourceId,
            remediationName
        ],
        queryParameters: [
            apiVersion0,
            top
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var cancelAtResourceOperationSpec = {
        httpMethod: "POST",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
        urlParameters: [
            resourceId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForResourceOperationSpec = {
        httpMethod: "GET",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations",
        urlParameters: [
            resourceId
        ],
        queryParameters: [
            apiVersion0,
            top,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateAtResourceOperationSpec = {
        httpMethod: "PUT",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            resourceId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Remediation, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Remediation
            },
            201: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getAtResourceOperationSpec = {
        httpMethod: "GET",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            resourceId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteAtResourceOperationSpec = {
        httpMethod: "DELETE",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
        urlParameters: [
            resourceId,
            remediationName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Remediation
            },
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtManagementGroupNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForManagementGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtSubscriptionNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForSubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtResourceGroupNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listDeploymentsAtResourceNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationDeploymentsListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listForResourceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RemediationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        PolicyEventsQueryResults: PolicyEventsQueryResults,
        PolicyEvent: PolicyEvent,
        QueryFailure: QueryFailure,
        QueryFailureError: QueryFailureError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PolicyEvents. */
    var PolicyEvents = /** @class */ (function () {
        /**
         * Create a PolicyEvents.
         * @param {PolicyInsightsClientContext} client Reference to the service client.
         */
        function PolicyEvents(client) {
            this.client = client;
        }
        PolicyEvents.prototype.listQueryResultsForManagementGroup = function (managementGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupName: managementGroupName$$1,
                options: options
            }, listQueryResultsForManagementGroupOperationSpec$1, callback);
        };
        PolicyEvents.prototype.listQueryResultsForSubscription = function (subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, listQueryResultsForSubscriptionOperationSpec$1, callback);
        };
        PolicyEvents.prototype.listQueryResultsForResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listQueryResultsForResourceGroupOperationSpec$1, callback);
        };
        PolicyEvents.prototype.listQueryResultsForResource = function (resourceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                options: options
            }, listQueryResultsForResourceOperationSpec$1, callback);
        };
        PolicyEvents.prototype.listQueryResultsForPolicySetDefinition = function (subscriptionId$$1, policySetDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                policySetDefinitionName: policySetDefinitionName$$1,
                options: options
            }, listQueryResultsForPolicySetDefinitionOperationSpec, callback);
        };
        PolicyEvents.prototype.listQueryResultsForPolicyDefinition = function (subscriptionId$$1, policyDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                policyDefinitionName: policyDefinitionName$$1,
                options: options
            }, listQueryResultsForPolicyDefinitionOperationSpec, callback);
        };
        PolicyEvents.prototype.listQueryResultsForSubscriptionLevelPolicyAssignment = function (subscriptionId$$1, policyAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                policyAssignmentName: policyAssignmentName$$1,
                options: options
            }, listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec, callback);
        };
        PolicyEvents.prototype.listQueryResultsForResourceGroupLevelPolicyAssignment = function (subscriptionId$$1, resourceGroupName$$1, policyAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                policyAssignmentName: policyAssignmentName$$1,
                options: options
            }, listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec, callback);
        };
        PolicyEvents.prototype.getMetadata = function (scope$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                options: options
            }, getMetadataOperationSpec, callback);
        };
        return PolicyEvents;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listQueryResultsForManagementGroupOperationSpec$1 = {
        httpMethod: "POST",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            managementGroupsNamespace,
            managementGroupName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForSubscriptionOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForResourceGroupOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForResourceOperationSpec$1 = {
        httpMethod: "POST",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            resourceId
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForPolicySetDefinitionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            subscriptionId,
            authorizationNamespace,
            policySetDefinitionName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForPolicyDefinitionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            subscriptionId,
            authorizationNamespace,
            policyDefinitionName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            subscriptionId,
            authorizationNamespace,
            policyAssignmentName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
        urlParameters: [
            policyEventsResource,
            subscriptionId,
            resourceGroupName,
            authorizationNamespace,
            policyAssignmentName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyEventsQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };
    var getMetadataOperationSpec = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.PolicyInsights/policyEvents/$metadata",
        urlParameters: [
            scope
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        PolicyStatesQueryResults: PolicyStatesQueryResults,
        PolicyState: PolicyState,
        QueryFailure: QueryFailure,
        QueryFailureError: QueryFailureError,
        SummarizeResults: SummarizeResults,
        Summary: Summary,
        SummaryResults: SummaryResults,
        PolicyAssignmentSummary: PolicyAssignmentSummary,
        PolicyDefinitionSummary: PolicyDefinitionSummary
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PolicyStates. */
    var PolicyStates = /** @class */ (function () {
        /**
         * Create a PolicyStates.
         * @param {PolicyInsightsClientContext} client Reference to the service client.
         */
        function PolicyStates(client) {
            this.client = client;
        }
        PolicyStates.prototype.listQueryResultsForManagementGroup = function (policyStatesResource$$1, managementGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                managementGroupName: managementGroupName$$1,
                options: options
            }, listQueryResultsForManagementGroupOperationSpec$2, callback);
        };
        PolicyStates.prototype.summarizeForManagementGroup = function (managementGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                managementGroupName: managementGroupName$$1,
                options: options
            }, summarizeForManagementGroupOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForSubscription = function (policyStatesResource$$1, subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                subscriptionId: subscriptionId$$1,
                options: options
            }, listQueryResultsForSubscriptionOperationSpec$2, callback);
        };
        PolicyStates.prototype.summarizeForSubscription = function (subscriptionId$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                options: options
            }, summarizeForSubscriptionOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForResourceGroup = function (policyStatesResource$$1, subscriptionId$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listQueryResultsForResourceGroupOperationSpec$2, callback);
        };
        PolicyStates.prototype.summarizeForResourceGroup = function (subscriptionId$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, summarizeForResourceGroupOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForResource = function (policyStatesResource$$1, resourceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                resourceId: resourceId$$1,
                options: options
            }, listQueryResultsForResourceOperationSpec$2, callback);
        };
        PolicyStates.prototype.summarizeForResource = function (resourceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceId: resourceId$$1,
                options: options
            }, summarizeForResourceOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForPolicySetDefinition = function (policyStatesResource$$1, subscriptionId$$1, policySetDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                subscriptionId: subscriptionId$$1,
                policySetDefinitionName: policySetDefinitionName$$1,
                options: options
            }, listQueryResultsForPolicySetDefinitionOperationSpec$1, callback);
        };
        PolicyStates.prototype.summarizeForPolicySetDefinition = function (subscriptionId$$1, policySetDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                policySetDefinitionName: policySetDefinitionName$$1,
                options: options
            }, summarizeForPolicySetDefinitionOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForPolicyDefinition = function (policyStatesResource$$1, subscriptionId$$1, policyDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                subscriptionId: subscriptionId$$1,
                policyDefinitionName: policyDefinitionName$$1,
                options: options
            }, listQueryResultsForPolicyDefinitionOperationSpec$1, callback);
        };
        PolicyStates.prototype.summarizeForPolicyDefinition = function (subscriptionId$$1, policyDefinitionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                policyDefinitionName: policyDefinitionName$$1,
                options: options
            }, summarizeForPolicyDefinitionOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForSubscriptionLevelPolicyAssignment = function (policyStatesResource$$1, subscriptionId$$1, policyAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                subscriptionId: subscriptionId$$1,
                policyAssignmentName: policyAssignmentName$$1,
                options: options
            }, listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec$1, callback);
        };
        PolicyStates.prototype.summarizeForSubscriptionLevelPolicyAssignment = function (subscriptionId$$1, policyAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                policyAssignmentName: policyAssignmentName$$1,
                options: options
            }, summarizeForSubscriptionLevelPolicyAssignmentOperationSpec, callback);
        };
        PolicyStates.prototype.listQueryResultsForResourceGroupLevelPolicyAssignment = function (policyStatesResource$$1, subscriptionId$$1, resourceGroupName$$1, policyAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                policyStatesResource: policyStatesResource$$1,
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                policyAssignmentName: policyAssignmentName$$1,
                options: options
            }, listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec$1, callback);
        };
        PolicyStates.prototype.summarizeForResourceGroupLevelPolicyAssignment = function (subscriptionId$$1, resourceGroupName$$1, policyAssignmentName$$1, options, callback) {
            return this.client.sendOperationRequest({
                subscriptionId: subscriptionId$$1,
                resourceGroupName: resourceGroupName$$1,
                policyAssignmentName: policyAssignmentName$$1,
                options: options
            }, summarizeForResourceGroupLevelPolicyAssignmentOperationSpec, callback);
        };
        PolicyStates.prototype.getMetadata = function (scope$$1, options, callback) {
            return this.client.sendOperationRequest({
                scope: scope$$1,
                options: options
            }, getMetadataOperationSpec$1, callback);
        };
        return PolicyStates;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listQueryResultsForManagementGroupOperationSpec$2 = {
        httpMethod: "POST",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            managementGroupsNamespace,
            managementGroupName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForManagementGroupOperationSpec = {
        httpMethod: "POST",
        path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            managementGroupsNamespace,
            managementGroupName
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForSubscriptionOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForSubscriptionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            subscriptionId
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForResourceGroupOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForResourceGroupOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForResourceOperationSpec$2 = {
        httpMethod: "POST",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            resourceId
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForResourceOperationSpec = {
        httpMethod: "POST",
        path: "{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            resourceId
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForPolicySetDefinitionOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            subscriptionId,
            authorizationNamespace,
            policySetDefinitionName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForPolicySetDefinitionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            subscriptionId,
            authorizationNamespace,
            policySetDefinitionName
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForPolicyDefinitionOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            subscriptionId,
            authorizationNamespace,
            policyDefinitionName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForPolicyDefinitionOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            subscriptionId,
            authorizationNamespace,
            policyDefinitionName
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            subscriptionId,
            authorizationNamespace,
            policyAssignmentName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForSubscriptionLevelPolicyAssignmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            subscriptionId,
            authorizationNamespace,
            policyAssignmentName
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
        urlParameters: [
            policyStatesResource,
            subscriptionId,
            resourceGroupName,
            authorizationNamespace,
            policyAssignmentName
        ],
        queryParameters: [
            apiVersion1,
            top,
            orderBy,
            select,
            from,
            to,
            filter,
            apply
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PolicyStatesQueryResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var summarizeForResourceGroupLevelPolicyAssignmentOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
        urlParameters: [
            policyStatesSummaryResource,
            subscriptionId,
            resourceGroupName,
            authorizationNamespace,
            policyAssignmentName
        ],
        queryParameters: [
            apiVersion1,
            top,
            from,
            to,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SummarizeResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };
    var getMetadataOperationSpec$1 = {
        httpMethod: "GET",
        path: "{scope}/providers/Microsoft.PolicyInsights/policyStates/$metadata",
        urlParameters: [
            scope
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "String"
                    }
                }
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        OperationsListResults: OperationsListResults,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        QueryFailure: QueryFailure,
        QueryFailureError: QueryFailureError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {PolicyInsightsClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.PolicyInsights/operations",
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsListResults
            },
            default: {
                bodyMapper: QueryFailure
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-policyinsights";
    var packageVersion = "1.0.0-preview";
    var PolicyInsightsClientContext = /** @class */ (function (_super) {
        __extends(PolicyInsightsClientContext, _super);
        /**
         * Initializes a new instance of the PolicyInsightsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function PolicyInsightsClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return PolicyInsightsClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var PolicyInsightsClient = /** @class */ (function (_super) {
        __extends(PolicyInsightsClient, _super);
        /**
         * Initializes a new instance of the PolicyInsightsClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function PolicyInsightsClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.policyTrackedResources = new PolicyTrackedResources(_this);
            _this.remediations = new Remediations(_this);
            _this.policyEvents = new PolicyEvents(_this);
            _this.policyStates = new PolicyStates(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return PolicyInsightsClient;
    }(PolicyInsightsClientContext));

    exports.PolicyInsightsClient = PolicyInsightsClient;
    exports.PolicyInsightsClientContext = PolicyInsightsClientContext;
    exports.PolicyInsightsModels = index;
    exports.PolicyInsightsMappers = mappers;
    exports.PolicyTrackedResources = PolicyTrackedResources;
    exports.Remediations = Remediations;
    exports.PolicyEvents = PolicyEvents;
    exports.PolicyStates = PolicyStates;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-policyinsights.js.map
