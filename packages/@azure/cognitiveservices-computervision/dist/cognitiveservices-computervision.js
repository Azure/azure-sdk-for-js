/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesComputervision = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Gender.
     * Possible values include: 'Male', 'Female'
     * @readonly
     * @enum {string}
     */
    var Gender;
    (function (Gender) {
        Gender["Male"] = "Male";
        Gender["Female"] = "Female";
    })(Gender || (Gender = {}));
    /**
     * Defines values for ComputerVisionErrorCodes.
     * Possible values include: 'InvalidImageUrl', 'InvalidImageFormat',
     * 'InvalidImageSize', 'NotSupportedVisualFeature', 'NotSupportedImage',
     * 'InvalidDetails', 'NotSupportedLanguage', 'BadArgument', 'FailedToProcess',
     * 'Timeout', 'InternalServerError', 'Unspecified', 'StorageException'
     * @readonly
     * @enum {string}
     */
    var ComputerVisionErrorCodes;
    (function (ComputerVisionErrorCodes) {
        ComputerVisionErrorCodes["InvalidImageUrl"] = "InvalidImageUrl";
        ComputerVisionErrorCodes["InvalidImageFormat"] = "InvalidImageFormat";
        ComputerVisionErrorCodes["InvalidImageSize"] = "InvalidImageSize";
        ComputerVisionErrorCodes["NotSupportedVisualFeature"] = "NotSupportedVisualFeature";
        ComputerVisionErrorCodes["NotSupportedImage"] = "NotSupportedImage";
        ComputerVisionErrorCodes["InvalidDetails"] = "InvalidDetails";
        ComputerVisionErrorCodes["NotSupportedLanguage"] = "NotSupportedLanguage";
        ComputerVisionErrorCodes["BadArgument"] = "BadArgument";
        ComputerVisionErrorCodes["FailedToProcess"] = "FailedToProcess";
        ComputerVisionErrorCodes["Timeout"] = "Timeout";
        ComputerVisionErrorCodes["InternalServerError"] = "InternalServerError";
        ComputerVisionErrorCodes["Unspecified"] = "Unspecified";
        ComputerVisionErrorCodes["StorageException"] = "StorageException";
    })(ComputerVisionErrorCodes || (ComputerVisionErrorCodes = {}));
    /**
     * Defines values for TextOperationStatusCodes.
     * Possible values include: 'Not Started', 'Running', 'Failed', 'Succeeded'
     * @readonly
     * @enum {string}
     */
    var TextOperationStatusCodes;
    (function (TextOperationStatusCodes) {
        TextOperationStatusCodes["NotStarted"] = "Not Started";
        TextOperationStatusCodes["Running"] = "Running";
        TextOperationStatusCodes["Failed"] = "Failed";
        TextOperationStatusCodes["Succeeded"] = "Succeeded";
    })(TextOperationStatusCodes || (TextOperationStatusCodes = {}));
    /**
     * Defines values for VisualFeatureTypes.
     * Possible values include: 'ImageType', 'Faces', 'Adult', 'Categories',
     * 'Color', 'Tags', 'Description'
     * @readonly
     * @enum {string}
     */
    var VisualFeatureTypes;
    (function (VisualFeatureTypes) {
        VisualFeatureTypes["ImageType"] = "ImageType";
        VisualFeatureTypes["Faces"] = "Faces";
        VisualFeatureTypes["Adult"] = "Adult";
        VisualFeatureTypes["Categories"] = "Categories";
        VisualFeatureTypes["Color"] = "Color";
        VisualFeatureTypes["Tags"] = "Tags";
        VisualFeatureTypes["Description"] = "Description";
    })(VisualFeatureTypes || (VisualFeatureTypes = {}));
    /**
     * Defines values for OcrLanguages.
     * Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl',
     * 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt',
     * 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'
     * @readonly
     * @enum {string}
     */
    var OcrLanguages;
    (function (OcrLanguages) {
        OcrLanguages["Unk"] = "unk";
        OcrLanguages["ZhHans"] = "zh-Hans";
        OcrLanguages["ZhHant"] = "zh-Hant";
        OcrLanguages["Cs"] = "cs";
        OcrLanguages["Da"] = "da";
        OcrLanguages["Nl"] = "nl";
        OcrLanguages["En"] = "en";
        OcrLanguages["Fi"] = "fi";
        OcrLanguages["Fr"] = "fr";
        OcrLanguages["De"] = "de";
        OcrLanguages["El"] = "el";
        OcrLanguages["Hu"] = "hu";
        OcrLanguages["It"] = "it";
        OcrLanguages["Ja"] = "ja";
        OcrLanguages["Ko"] = "ko";
        OcrLanguages["Nb"] = "nb";
        OcrLanguages["Pl"] = "pl";
        OcrLanguages["Pt"] = "pt";
        OcrLanguages["Ru"] = "ru";
        OcrLanguages["Es"] = "es";
        OcrLanguages["Sv"] = "sv";
        OcrLanguages["Tr"] = "tr";
        OcrLanguages["Ar"] = "ar";
        OcrLanguages["Ro"] = "ro";
        OcrLanguages["SrCyrl"] = "sr-Cyrl";
        OcrLanguages["SrLatn"] = "sr-Latn";
        OcrLanguages["Sk"] = "sk";
    })(OcrLanguages || (OcrLanguages = {}));
    /**
     * Defines values for TextRecognitionMode.
     * Possible values include: 'Handwritten', 'Printed'
     * @readonly
     * @enum {string}
     */
    var TextRecognitionMode;
    (function (TextRecognitionMode) {
        TextRecognitionMode["Handwritten"] = "Handwritten";
        TextRecognitionMode["Printed"] = "Printed";
    })(TextRecognitionMode || (TextRecognitionMode = {}));
    /**
     * Defines values for Details.
     * Possible values include: 'Celebrities', 'Landmarks'
     * @readonly
     * @enum {string}
     */
    var Details;
    (function (Details) {
        Details["Celebrities"] = "Celebrities";
        Details["Landmarks"] = "Landmarks";
    })(Details || (Details = {}));
    /**
     * Defines values for Language.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language = <Language>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language;
    (function (Language) {
        Language["En"] = "en";
        Language["Es"] = "es";
        Language["Ja"] = "ja";
        Language["Pt"] = "pt";
        Language["Zh"] = "zh";
    })(Language || (Language = {}));
    /**
     * Defines values for Language1.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language1 = <Language1>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language1;
    (function (Language1) {
        Language1["En"] = "en";
        Language1["Es"] = "es";
        Language1["Ja"] = "ja";
        Language1["Pt"] = "pt";
        Language1["Zh"] = "zh";
    })(Language1 || (Language1 = {}));
    /**
     * Defines values for Language2.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language2 = <Language2>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language2;
    (function (Language2) {
        Language2["En"] = "en";
        Language2["Es"] = "es";
        Language2["Ja"] = "ja";
        Language2["Pt"] = "pt";
        Language2["Zh"] = "zh";
    })(Language2 || (Language2 = {}));
    /**
     * Defines values for Language3.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language3 = <Language3>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language3;
    (function (Language3) {
        Language3["En"] = "en";
        Language3["Es"] = "es";
        Language3["Ja"] = "ja";
        Language3["Pt"] = "pt";
        Language3["Zh"] = "zh";
    })(Language3 || (Language3 = {}));
    /**
     * Defines values for Language4.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language4 = <Language4>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language4;
    (function (Language4) {
        Language4["En"] = "en";
        Language4["Es"] = "es";
        Language4["Ja"] = "ja";
        Language4["Pt"] = "pt";
        Language4["Zh"] = "zh";
    })(Language4 || (Language4 = {}));
    /**
     * Defines values for Language5.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language5 = <Language5>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language5;
    (function (Language5) {
        Language5["En"] = "en";
        Language5["Es"] = "es";
        Language5["Ja"] = "ja";
        Language5["Pt"] = "pt";
        Language5["Zh"] = "zh";
    })(Language5 || (Language5 = {}));
    /**
     * Defines values for Language6.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language6 = <Language6>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language6;
    (function (Language6) {
        Language6["En"] = "en";
        Language6["Es"] = "es";
        Language6["Ja"] = "ja";
        Language6["Pt"] = "pt";
        Language6["Zh"] = "zh";
    })(Language6 || (Language6 = {}));
    /**
     * Defines values for Language7.
     * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
     * There could be more values for this enum apart from the ones defined here.If
     * you want to set a value that is not from the known values then you can do
     * the following:
     * let param: Language7 = <Language7>"someUnknownValueThatWillStillBeValid";
     * @readonly
     * @enum {string}
     */
    var Language7;
    (function (Language7) {
        Language7["En"] = "en";
        Language7["Es"] = "es";
        Language7["Ja"] = "ja";
        Language7["Pt"] = "pt";
        Language7["Zh"] = "zh";
    })(Language7 || (Language7 = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Gender () { return Gender; },
        get ComputerVisionErrorCodes () { return ComputerVisionErrorCodes; },
        get TextOperationStatusCodes () { return TextOperationStatusCodes; },
        get VisualFeatureTypes () { return VisualFeatureTypes; },
        get OcrLanguages () { return OcrLanguages; },
        get TextRecognitionMode () { return TextRecognitionMode; },
        get Details () { return Details; },
        get Language () { return Language; },
        get Language1 () { return Language1; },
        get Language2 () { return Language2; },
        get Language3 () { return Language3; },
        get Language4 () { return Language4; },
        get Language5 () { return Language5; },
        get Language6 () { return Language6; },
        get Language7 () { return Language7; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var FaceRectangle = {
        serializedName: "FaceRectangle",
        type: {
            name: "Composite",
            className: "FaceRectangle",
            modelProperties: {
                left: {
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CelebritiesModel = {
        serializedName: "CelebritiesModel",
        type: {
            name: "Composite",
            className: "CelebritiesModel",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                },
                faceRectangle: {
                    serializedName: "faceRectangle",
                    type: {
                        name: "Composite",
                        className: "FaceRectangle"
                    }
                }
            }
        }
    };
    var LandmarksModel = {
        serializedName: "LandmarksModel",
        type: {
            name: "Composite",
            className: "LandmarksModel",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CategoryDetail = {
        serializedName: "CategoryDetail",
        type: {
            name: "Composite",
            className: "CategoryDetail",
            modelProperties: {
                celebrities: {
                    serializedName: "celebrities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CelebritiesModel"
                            }
                        }
                    }
                },
                landmarks: {
                    serializedName: "landmarks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LandmarksModel"
                            }
                        }
                    }
                }
            }
        }
    };
    var Category = {
        serializedName: "Category",
        type: {
            name: "Composite",
            className: "Category",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    nullable: false,
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                detail: {
                    serializedName: "detail",
                    type: {
                        name: "Composite",
                        className: "CategoryDetail"
                    }
                }
            }
        }
    };
    var AdultInfo = {
        serializedName: "AdultInfo",
        type: {
            name: "Composite",
            className: "AdultInfo",
            modelProperties: {
                isAdultContent: {
                    nullable: false,
                    serializedName: "isAdultContent",
                    type: {
                        name: "Boolean"
                    }
                },
                isRacyContent: {
                    nullable: false,
                    serializedName: "isRacyContent",
                    type: {
                        name: "Boolean"
                    }
                },
                adultScore: {
                    nullable: false,
                    serializedName: "adultScore",
                    type: {
                        name: "Number"
                    }
                },
                racyScore: {
                    nullable: false,
                    serializedName: "racyScore",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ColorInfo = {
        serializedName: "ColorInfo",
        type: {
            name: "Composite",
            className: "ColorInfo",
            modelProperties: {
                dominantColorForeground: {
                    serializedName: "dominantColorForeground",
                    type: {
                        name: "String"
                    }
                },
                dominantColorBackground: {
                    serializedName: "dominantColorBackground",
                    type: {
                        name: "String"
                    }
                },
                dominantColors: {
                    serializedName: "dominantColors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                accentColor: {
                    serializedName: "accentColor",
                    type: {
                        name: "String"
                    }
                },
                isBWImg: {
                    nullable: false,
                    serializedName: "isBWImg",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ImageType = {
        serializedName: "ImageType",
        type: {
            name: "Composite",
            className: "ImageType",
            modelProperties: {
                clipArtType: {
                    nullable: false,
                    serializedName: "clipArtType",
                    type: {
                        name: "Number"
                    }
                },
                lineDrawingType: {
                    nullable: false,
                    serializedName: "lineDrawingType",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageTag = {
        serializedName: "ImageTag",
        type: {
            name: "Composite",
            className: "ImageTag",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                },
                hint: {
                    serializedName: "hint",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageCaption = {
        serializedName: "ImageCaption",
        type: {
            name: "Composite",
            className: "ImageCaption",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageDescriptionDetails = {
        serializedName: "ImageDescriptionDetails",
        type: {
            name: "Composite",
            className: "ImageDescriptionDetails",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                captions: {
                    serializedName: "captions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageCaption"
                            }
                        }
                    }
                }
            }
        }
    };
    var FaceDescription = {
        serializedName: "FaceDescription",
        type: {
            name: "Composite",
            className: "FaceDescription",
            modelProperties: {
                age: {
                    nullable: false,
                    serializedName: "age",
                    type: {
                        name: "Number"
                    }
                },
                gender: {
                    serializedName: "gender",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Male",
                            "Female"
                        ]
                    }
                },
                faceRectangle: {
                    serializedName: "faceRectangle",
                    type: {
                        name: "Composite",
                        className: "FaceRectangle"
                    }
                }
            }
        }
    };
    var ImageMetadata = {
        serializedName: "ImageMetadata",
        type: {
            name: "Composite",
            className: "ImageMetadata",
            modelProperties: {
                width: {
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                format: {
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageAnalysis = {
        serializedName: "ImageAnalysis",
        type: {
            name: "Composite",
            className: "ImageAnalysis",
            modelProperties: {
                categories: {
                    serializedName: "categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Category"
                            }
                        }
                    }
                },
                adult: {
                    serializedName: "adult",
                    type: {
                        name: "Composite",
                        className: "AdultInfo"
                    }
                },
                color: {
                    serializedName: "color",
                    type: {
                        name: "Composite",
                        className: "ColorInfo"
                    }
                },
                imageType: {
                    serializedName: "imageType",
                    type: {
                        name: "Composite",
                        className: "ImageType"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTag"
                            }
                        }
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "Composite",
                        className: "ImageDescriptionDetails"
                    }
                },
                faces: {
                    serializedName: "faces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FaceDescription"
                            }
                        }
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "ImageMetadata"
                    }
                }
            }
        }
    };
    var OcrWord = {
        serializedName: "OcrWord",
        type: {
            name: "Composite",
            className: "OcrWord",
            modelProperties: {
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OcrLine = {
        serializedName: "OcrLine",
        type: {
            name: "Composite",
            className: "OcrLine",
            modelProperties: {
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "String"
                    }
                },
                words: {
                    serializedName: "words",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OcrWord"
                            }
                        }
                    }
                }
            }
        }
    };
    var OcrRegion = {
        serializedName: "OcrRegion",
        type: {
            name: "Composite",
            className: "OcrRegion",
            modelProperties: {
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "String"
                    }
                },
                lines: {
                    serializedName: "lines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OcrLine"
                            }
                        }
                    }
                }
            }
        }
    };
    var OcrResult = {
        serializedName: "OcrResult",
        type: {
            name: "Composite",
            className: "OcrResult",
            modelProperties: {
                language: {
                    serializedName: "language",
                    type: {
                        name: "String"
                    }
                },
                textAngle: {
                    nullable: false,
                    serializedName: "textAngle",
                    type: {
                        name: "Number"
                    }
                },
                orientation: {
                    serializedName: "orientation",
                    type: {
                        name: "String"
                    }
                },
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OcrRegion"
                            }
                        }
                    }
                }
            }
        }
    };
    var ModelDescription = {
        serializedName: "ModelDescription",
        type: {
            name: "Composite",
            className: "ModelDescription",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                categories: {
                    serializedName: "categories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListModelsResult = {
        serializedName: "ListModelsResult",
        type: {
            name: "Composite",
            className: "ListModelsResult",
            modelProperties: {
                modelsProperty: {
                    readOnly: true,
                    serializedName: "models",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ModelDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var DomainModelResults = {
        serializedName: "DomainModelResults",
        type: {
            name: "Composite",
            className: "DomainModelResults",
            modelProperties: {
                result: {
                    serializedName: "result",
                    type: {
                        name: "Object"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "ImageMetadata"
                    }
                }
            }
        }
    };
    var CelebrityResults = {
        serializedName: "CelebrityResults",
        type: {
            name: "Composite",
            className: "CelebrityResults",
            modelProperties: {
                celebrities: {
                    serializedName: "celebrities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CelebritiesModel"
                            }
                        }
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "ImageMetadata"
                    }
                }
            }
        }
    };
    var LandmarkResults = {
        serializedName: "LandmarkResults",
        type: {
            name: "Composite",
            className: "LandmarkResults",
            modelProperties: {
                landmarks: {
                    serializedName: "landmarks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LandmarksModel"
                            }
                        }
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "ImageMetadata"
                    }
                }
            }
        }
    };
    var ImageDescription = {
        serializedName: "ImageDescription",
        type: {
            name: "Composite",
            className: "ImageDescription",
            modelProperties: {
                tags: {
                    serializedName: "description.tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                captions: {
                    serializedName: "description.captions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageCaption"
                            }
                        }
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "ImageMetadata"
                    }
                }
            }
        }
    };
    var TagResult = {
        serializedName: "TagResult",
        type: {
            name: "Composite",
            className: "TagResult",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTag"
                            }
                        }
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    serializedName: "metadata",
                    type: {
                        name: "Composite",
                        className: "ImageMetadata"
                    }
                }
            }
        }
    };
    var ComputerVisionError = {
        serializedName: "ComputerVisionError",
        type: {
            name: "Composite",
            className: "ComputerVisionError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "InvalidImageUrl",
                            "InvalidImageFormat",
                            "InvalidImageSize",
                            "NotSupportedVisualFeature",
                            "NotSupportedImage",
                            "InvalidDetails",
                            "NotSupportedLanguage",
                            "BadArgument",
                            "FailedToProcess",
                            "Timeout",
                            "InternalServerError",
                            "Unspecified",
                            "StorageException"
                        ]
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                requestId: {
                    serializedName: "requestId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageUrl = {
        serializedName: "ImageUrl",
        type: {
            name: "Composite",
            className: "ImageUrl",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Word = {
        serializedName: "Word",
        type: {
            name: "Composite",
            className: "Word",
            modelProperties: {
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Line = {
        serializedName: "Line",
        type: {
            name: "Composite",
            className: "Line",
            modelProperties: {
                boundingBox: {
                    serializedName: "boundingBox",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                words: {
                    serializedName: "words",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Word"
                            }
                        }
                    }
                }
            }
        }
    };
    var RecognitionResult = {
        serializedName: "RecognitionResult",
        type: {
            name: "Composite",
            className: "RecognitionResult",
            modelProperties: {
                lines: {
                    serializedName: "lines",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Line"
                            }
                        }
                    }
                }
            }
        }
    };
    var TextOperationResult = {
        serializedName: "TextOperationResult",
        type: {
            name: "Composite",
            className: "TextOperationResult",
            modelProperties: {
                status: {
                    nullable: false,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Not Started",
                            "Running",
                            "Failed",
                            "Succeeded"
                        ]
                    }
                },
                recognitionResult: {
                    serializedName: "recognitionResult",
                    type: {
                        name: "Composite",
                        className: "RecognitionResult"
                    }
                }
            }
        }
    };
    var RecognizeTextHeaders = {
        serializedName: "recognizetext-headers",
        type: {
            name: "Composite",
            className: "RecognizeTextHeaders",
            modelProperties: {
                operationLocation: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RecognizeTextInStreamHeaders = {
        serializedName: "recognizetextinstream-headers",
        type: {
            name: "Composite",
            className: "RecognizeTextInStreamHeaders",
            modelProperties: {
                operationLocation: {
                    serializedName: "operation-location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        FaceRectangle: FaceRectangle,
        CelebritiesModel: CelebritiesModel,
        LandmarksModel: LandmarksModel,
        CategoryDetail: CategoryDetail,
        Category: Category,
        AdultInfo: AdultInfo,
        ColorInfo: ColorInfo,
        ImageType: ImageType,
        ImageTag: ImageTag,
        ImageCaption: ImageCaption,
        ImageDescriptionDetails: ImageDescriptionDetails,
        FaceDescription: FaceDescription,
        ImageMetadata: ImageMetadata,
        ImageAnalysis: ImageAnalysis,
        OcrWord: OcrWord,
        OcrLine: OcrLine,
        OcrRegion: OcrRegion,
        OcrResult: OcrResult,
        ModelDescription: ModelDescription,
        ListModelsResult: ListModelsResult,
        DomainModelResults: DomainModelResults,
        CelebrityResults: CelebrityResults,
        LandmarkResults: LandmarkResults,
        ImageDescription: ImageDescription,
        TagResult: TagResult,
        ComputerVisionError: ComputerVisionError,
        ImageUrl: ImageUrl,
        Word: Word,
        Line: Line,
        RecognitionResult: RecognitionResult,
        TextOperationResult: TextOperationResult,
        RecognizeTextHeaders: RecognizeTextHeaders,
        RecognizeTextInStreamHeaders: RecognizeTextInStreamHeaders
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var details = {
        parameterPath: [
            "options",
            "details"
        ],
        mapper: {
            serializedName: "details",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Celebrities",
                            "Landmarks"
                        ]
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var detectOrientation = {
        parameterPath: "detectOrientation",
        mapper: {
            required: true,
            serializedName: "detectOrientation",
            defaultValue: true,
            type: {
                name: "Boolean"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var height = {
        parameterPath: "height",
        mapper: {
            required: true,
            serializedName: "height",
            constraints: {
                InclusiveMaximum: 1023,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var language0 = {
        parameterPath: [
            "options",
            "language"
        ],
        mapper: {
            nullable: false,
            serializedName: "language",
            defaultValue: 'en',
            type: {
                name: "String"
            }
        }
    };
    var language1 = {
        parameterPath: [
            "options",
            "language"
        ],
        mapper: {
            nullable: false,
            serializedName: "language",
            defaultValue: 'unk',
            type: {
                name: "Enum",
                allowedValues: [
                    "unk",
                    "zh-Hans",
                    "zh-Hant",
                    "cs",
                    "da",
                    "nl",
                    "en",
                    "fi",
                    "fr",
                    "de",
                    "el",
                    "hu",
                    "it",
                    "ja",
                    "ko",
                    "nb",
                    "pl",
                    "pt",
                    "ru",
                    "es",
                    "sv",
                    "tr",
                    "ar",
                    "ro",
                    "sr-Cyrl",
                    "sr-Latn",
                    "sk"
                ]
            }
        }
    };
    var maxCandidates = {
        parameterPath: [
            "options",
            "maxCandidates"
        ],
        mapper: {
            serializedName: "maxCandidates",
            defaultValue: 1,
            type: {
                name: "Number"
            }
        }
    };
    var mode = {
        parameterPath: "mode",
        mapper: {
            required: true,
            serializedName: "mode",
            type: {
                name: "Enum",
                allowedValues: [
                    "Handwritten",
                    "Printed"
                ]
            }
        }
    };
    var model = {
        parameterPath: "model",
        mapper: {
            required: true,
            serializedName: "model",
            type: {
                name: "String"
            }
        }
    };
    var operationId = {
        parameterPath: "operationId",
        mapper: {
            required: true,
            serializedName: "operationId",
            type: {
                name: "String"
            }
        }
    };
    var smartCropping = {
        parameterPath: [
            "options",
            "smartCropping"
        ],
        mapper: {
            serializedName: "smartCropping",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var visualFeatures = {
        parameterPath: [
            "options",
            "visualFeatures"
        ],
        mapper: {
            serializedName: "visualFeatures",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ImageType",
                            "Faces",
                            "Adult",
                            "Categories",
                            "Color",
                            "Tags",
                            "Description"
                        ]
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var width = {
        parameterPath: "width",
        mapper: {
            required: true,
            serializedName: "width",
            constraints: {
                InclusiveMaximum: 1023,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-computervision";
    var packageVersion = "1.0.0";
    var ComputerVisionClientContext = /** @class */ (function (_super) {
        __extends(ComputerVisionClientContext, _super);
        /**
         * Initializes a new instance of the ComputerVisionClientContext class.
         * @param endpoint Supported Cognitive Services endpoints
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function ComputerVisionClientContext(endpoint, credentials, options) {
            var _this = this;
            if (endpoint === null || endpoint === undefined) {
                throw new Error('\'endpoint\' cannot be null.');
            }
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return ComputerVisionClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ComputerVisionClient = /** @class */ (function (_super) {
        __extends(ComputerVisionClient, _super);
        /**
         * Initializes a new instance of the ComputerVisionClient class.
         * @param endpoint Supported Cognitive Services endpoints
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function ComputerVisionClient(endpoint$$1, credentials, options) {
            return _super.call(this, endpoint$$1, credentials, options) || this;
        }
        ComputerVisionClient.prototype.listModels = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, listModelsOperationSpec, callback);
        };
        ComputerVisionClient.prototype.analyzeImage = function (url, options, callback) {
            return this.sendOperationRequest({
                url: url,
                options: options
            }, analyzeImageOperationSpec, callback);
        };
        ComputerVisionClient.prototype.generateThumbnail = function (width$$1, height$$1, url, options, callback) {
            return this.sendOperationRequest({
                width: width$$1,
                height: height$$1,
                url: url,
                options: options
            }, generateThumbnailOperationSpec, callback);
        };
        ComputerVisionClient.prototype.recognizePrintedText = function (detectOrientation$$1, url, options, callback) {
            return this.sendOperationRequest({
                detectOrientation: detectOrientation$$1,
                url: url,
                options: options
            }, recognizePrintedTextOperationSpec, callback);
        };
        ComputerVisionClient.prototype.describeImage = function (url, options, callback) {
            return this.sendOperationRequest({
                url: url,
                options: options
            }, describeImageOperationSpec, callback);
        };
        ComputerVisionClient.prototype.tagImage = function (url, options, callback) {
            return this.sendOperationRequest({
                url: url,
                options: options
            }, tagImageOperationSpec, callback);
        };
        ComputerVisionClient.prototype.analyzeImageByDomain = function (model$$1, url, options, callback) {
            return this.sendOperationRequest({
                model: model$$1,
                url: url,
                options: options
            }, analyzeImageByDomainOperationSpec, callback);
        };
        ComputerVisionClient.prototype.recognizeText = function (mode$$1, url, options, callback) {
            return this.sendOperationRequest({
                mode: mode$$1,
                url: url,
                options: options
            }, recognizeTextOperationSpec, callback);
        };
        ComputerVisionClient.prototype.getTextOperationResult = function (operationId$$1, options, callback) {
            return this.sendOperationRequest({
                operationId: operationId$$1,
                options: options
            }, getTextOperationResultOperationSpec, callback);
        };
        ComputerVisionClient.prototype.analyzeImageInStream = function (image, options, callback) {
            return this.sendOperationRequest({
                image: image,
                options: options
            }, analyzeImageInStreamOperationSpec, callback);
        };
        ComputerVisionClient.prototype.generateThumbnailInStream = function (width$$1, height$$1, image, options, callback) {
            return this.sendOperationRequest({
                width: width$$1,
                height: height$$1,
                image: image,
                options: options
            }, generateThumbnailInStreamOperationSpec, callback);
        };
        ComputerVisionClient.prototype.recognizePrintedTextInStream = function (detectOrientation$$1, image, options, callback) {
            return this.sendOperationRequest({
                detectOrientation: detectOrientation$$1,
                image: image,
                options: options
            }, recognizePrintedTextInStreamOperationSpec, callback);
        };
        ComputerVisionClient.prototype.describeImageInStream = function (image, options, callback) {
            return this.sendOperationRequest({
                image: image,
                options: options
            }, describeImageInStreamOperationSpec, callback);
        };
        ComputerVisionClient.prototype.tagImageInStream = function (image, options, callback) {
            return this.sendOperationRequest({
                image: image,
                options: options
            }, tagImageInStreamOperationSpec, callback);
        };
        ComputerVisionClient.prototype.analyzeImageByDomainInStream = function (model$$1, image, options, callback) {
            return this.sendOperationRequest({
                model: model$$1,
                image: image,
                options: options
            }, analyzeImageByDomainInStreamOperationSpec, callback);
        };
        ComputerVisionClient.prototype.recognizeTextInStream = function (image, mode$$1, options, callback) {
            return this.sendOperationRequest({
                image: image,
                mode: mode$$1,
                options: options
            }, recognizeTextInStreamOperationSpec, callback);
        };
        return ComputerVisionClient;
    }(ComputerVisionClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listModelsOperationSpec = {
        httpMethod: "GET",
        path: "models",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: ListModelsResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var analyzeImageOperationSpec = {
        httpMethod: "POST",
        path: "analyze",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            visualFeatures,
            details,
            language0
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageAnalysis
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var generateThumbnailOperationSpec = {
        httpMethod: "POST",
        path: "generateThumbnail",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            width,
            height,
            smartCropping
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {}
        },
        serializer: serializer
    };
    var recognizePrintedTextOperationSpec = {
        httpMethod: "POST",
        path: "ocr",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            detectOrientation,
            language1
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: OcrResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var describeImageOperationSpec = {
        httpMethod: "POST",
        path: "describe",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            maxCandidates,
            language0
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageDescription
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var tagImageOperationSpec = {
        httpMethod: "POST",
        path: "tag",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language0
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: TagResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var analyzeImageByDomainOperationSpec = {
        httpMethod: "POST",
        path: "models/{model}/analyze",
        urlParameters: [
            endpoint,
            model
        ],
        queryParameters: [
            language0
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: DomainModelResults
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var recognizeTextOperationSpec = {
        httpMethod: "POST",
        path: "recognizeText",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            mode
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            202: {
                headersMapper: RecognizeTextHeaders
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var getTextOperationResultOperationSpec = {
        httpMethod: "GET",
        path: "textOperations/{operationId}",
        urlParameters: [
            endpoint,
            operationId
        ],
        responses: {
            200: {
                bodyMapper: TextOperationResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var analyzeImageInStreamOperationSpec = {
        httpMethod: "POST",
        path: "analyze",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            visualFeatures,
            details,
            language0
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: ImageAnalysis
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var generateThumbnailInStreamOperationSpec = {
        httpMethod: "POST",
        path: "generateThumbnail",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            width,
            height,
            smartCropping
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {}
        },
        serializer: serializer
    };
    var recognizePrintedTextInStreamOperationSpec = {
        httpMethod: "POST",
        path: "ocr",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language1,
            detectOrientation
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: OcrResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var describeImageInStreamOperationSpec = {
        httpMethod: "POST",
        path: "describe",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            maxCandidates,
            language0
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: ImageDescription
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var tagImageInStreamOperationSpec = {
        httpMethod: "POST",
        path: "tag",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            language0
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: TagResult
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var analyzeImageByDomainInStreamOperationSpec = {
        httpMethod: "POST",
        path: "models/{model}/analyze",
        urlParameters: [
            endpoint,
            model
        ],
        queryParameters: [
            language0
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: DomainModelResults
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };
    var recognizeTextInStreamOperationSpec = {
        httpMethod: "POST",
        path: "recognizeText",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            mode
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            202: {
                headersMapper: RecognizeTextInStreamHeaders
            },
            default: {
                bodyMapper: ComputerVisionError
            }
        },
        serializer: serializer
    };

    exports.ComputerVisionClient = ComputerVisionClient;
    exports.ComputerVisionClientContext = ComputerVisionClientContext;
    exports.ComputerVisionModels = index;
    exports.ComputerVisionMappers = Mappers;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-computervision.js.map
