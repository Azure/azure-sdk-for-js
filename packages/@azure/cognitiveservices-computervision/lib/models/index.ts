/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing FaceRectangle.
 * An object describing face rectangle.
 *
 */
export interface FaceRectangle {
  /**
   * @member {number} [left] X-coordinate of the top left point of the face, in
   * pixels.
   */
  left?: number;
  /**
   * @member {number} [top] Y-coordinate of the top left point of the face, in
   * pixels.
   */
  top?: number;
  /**
   * @member {number} [width] Width measured from the top-left point of the
   * face, in pixels.
   */
  width?: number;
  /**
   * @member {number} [height] Height measured from the top-left point of the
   * face, in pixels.
   */
  height?: number;
}

/**
 * @interface
 * An interface representing CelebritiesModel.
 * An object describing possible celebrity identification.
 *
 */
export interface CelebritiesModel {
  /**
   * @member {string} [name] Name of the celebrity.
   */
  name?: string;
  /**
   * @member {number} [confidence] Confidence level for the celebrity
   * recognition as a value ranging from 0 to 1.
   */
  confidence?: number;
  /**
   * @member {FaceRectangle} [faceRectangle] Location of the identified face in
   * the image.
   */
  faceRectangle?: FaceRectangle;
}

/**
 * @interface
 * An interface representing LandmarksModel.
 * A landmark recognized in the image.
 *
 */
export interface LandmarksModel {
  /**
   * @member {string} [name] Name of the landmark.
   */
  name?: string;
  /**
   * @member {number} [confidence] Confidence level for the landmark
   * recognition as a value ranging from 0 to 1.
   */
  confidence?: number;
}

/**
 * @interface
 * An interface representing CategoryDetail.
 * An object describing additional category details.
 *
 */
export interface CategoryDetail {
  /**
   * @member {CelebritiesModel[]} [celebrities] An array of celebrities if any
   * identified.
   */
  celebrities?: CelebritiesModel[];
  /**
   * @member {LandmarksModel[]} [landmarks] An array of landmarks if any
   * identified.
   */
  landmarks?: LandmarksModel[];
}

/**
 * @interface
 * An interface representing Category.
 * An object describing identified category.
 *
 */
export interface Category {
  /**
   * @member {string} [name] Name of the category.
   */
  name?: string;
  /**
   * @member {number} [score] Scoring of the category.
   */
  score?: number;
  /**
   * @member {CategoryDetail} [detail] Details of the identified category.
   */
  detail?: CategoryDetail;
}

/**
 * @interface
 * An interface representing AdultInfo.
 * An object describing whether the image contains adult-oriented content
 * and/or is racy.
 *
 */
export interface AdultInfo {
  /**
   * @member {boolean} [isAdultContent] A value indicating if the image
   * contains adult-oriented content.
   */
  isAdultContent?: boolean;
  /**
   * @member {boolean} [isRacyContent] A value indicating if the image is racy.
   */
  isRacyContent?: boolean;
  /**
   * @member {number} [adultScore] Score from 0 to 1 that indicates how much
   * the content is considered adult-oriented within the image.
   */
  adultScore?: number;
  /**
   * @member {number} [racyScore] Score from 0 to 1 that indicates how
   * suggestive is the image.
   */
  racyScore?: number;
}

/**
 * @interface
 * An interface representing ColorInfo.
 * An object providing additional metadata describing color attributes.
 *
 */
export interface ColorInfo {
  /**
   * @member {string} [dominantColorForeground] Possible dominant foreground
   * color.
   */
  dominantColorForeground?: string;
  /**
   * @member {string} [dominantColorBackground] Possible dominant background
   * color.
   */
  dominantColorBackground?: string;
  /**
   * @member {string[]} [dominantColors] An array of possible dominant colors.
   */
  dominantColors?: string[];
  /**
   * @member {string} [accentColor] Possible accent color.
   */
  accentColor?: string;
  /**
   * @member {boolean} [isBWImg] A value indicating if the image is black and
   * white.
   */
  isBWImg?: boolean;
}

/**
 * @interface
 * An interface representing ImageType.
 * An object providing possible image types and matching confidence levels.
 *
 */
export interface ImageType {
  /**
   * @member {number} [clipArtType] Confidence level that the image is a clip
   * art.
   */
  clipArtType?: number;
  /**
   * @member {number} [lineDrawingType] Confidence level that the image is a
   * line drawing.
   */
  lineDrawingType?: number;
}

/**
 * @interface
 * An interface representing ImageTag.
 * An entity observation in the image, along with the confidence score.
 *
 */
export interface ImageTag {
  /**
   * @member {string} [name] Name of the entity.
   */
  name?: string;
  /**
   * @member {number} [confidence] The level of confidence that the entity was
   * observed.
   */
  confidence?: number;
  /**
   * @member {string} [hint] Optional hint/details for this tag.
   */
  hint?: string;
}

/**
 * @interface
 * An interface representing ImageCaption.
 * An image caption, i.e. a brief description of what the image depicts.
 *
 */
export interface ImageCaption {
  /**
   * @member {string} [text] The text of the caption.
   */
  text?: string;
  /**
   * @member {number} [confidence] The level of confidence the service has in
   * the caption.
   */
  confidence?: number;
}

/**
 * @interface
 * An interface representing ImageDescriptionDetails.
 * A collection of content tags, along with a list of captions sorted by
 * confidence level, and image metadata.
 *
 */
export interface ImageDescriptionDetails {
  /**
   * @member {string[]} [tags] A collection of image tags.
   */
  tags?: string[];
  /**
   * @member {ImageCaption[]} [captions] A list of captions, sorted by
   * confidence level.
   */
  captions?: ImageCaption[];
}

/**
 * @interface
 * An interface representing FaceDescription.
 * An object describing a face identified in the image.
 *
 */
export interface FaceDescription {
  /**
   * @member {number} [age] Possible age of the face.
   */
  age?: number;
  /**
   * @member {Gender} [gender] Possible gender of the face. Possible values
   * include: 'Male', 'Female'
   */
  gender?: Gender;
  /**
   * @member {FaceRectangle} [faceRectangle] Rectangle in the image containing
   * the identified face.
   */
  faceRectangle?: FaceRectangle;
}

/**
 * @interface
 * An interface representing BoundingRect.
 * A bounding box for an area inside an image.
 *
 */
export interface BoundingRect {
  /**
   * @member {number} [x] X-coordinate of the top left point of the area, in
   * pixels.
   */
  x?: number;
  /**
   * @member {number} [y] Y-coordinate of the top left point of the area, in
   * pixels.
   */
  y?: number;
  /**
   * @member {number} [w] Width measured from the top-left point of the area,
   * in pixels.
   */
  w?: number;
  /**
   * @member {number} [h] Height measured from the top-left point of the area,
   * in pixels.
   */
  h?: number;
}

/**
 * @interface
 * An interface representing ObjectHierarchy.
 * An object detected inside an image.
 *
 */
export interface ObjectHierarchy {
  /**
   * @member {string} [object] Label for the object.
   */
  object?: string;
  /**
   * @member {number} [confidence] Confidence score of having observed the
   * object in the image, as a value ranging from 0 to 1.
   */
  confidence?: number;
  /**
   * @member {ObjectHierarchy} [parent] The parent object, from a taxonomy
   * perspective.
   * The parent object is a more generic form of this object.  For example, a
   * 'bulldog' would have a parent of 'dog'.
   */
  parent?: ObjectHierarchy;
}

/**
 * @interface
 * An interface representing DetectedObject.
 * An object detected in an image.
 *
 */
export interface DetectedObject {
  /**
   * @member {BoundingRect} [rectangle] Approximate location of the detected
   * object.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly rectangle?: BoundingRect;
  /**
   * @member {string} [object] Label for the object.
   */
  object?: string;
  /**
   * @member {number} [confidence] Confidence score of having observed the
   * object in the image, as a value ranging from 0 to 1.
   */
  confidence?: number;
  /**
   * @member {ObjectHierarchy} [parent] The parent object, from a taxonomy
   * perspective.
   * The parent object is a more generic form of this object.  For example, a
   * 'bulldog' would have a parent of 'dog'.
   */
  parent?: ObjectHierarchy;
}

/**
 * @interface
 * An interface representing DetectedBrand.
 * A brand detected in an image.
 *
 */
export interface DetectedBrand {
  /**
   * @member {string} [name] Label for the brand.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {number} [confidence] Confidence score of having observed the
   * brand in the image, as a value ranging from 0 to 1.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly confidence?: number;
  /**
   * @member {BoundingRect} [rectangle] Approximate location of the detected
   * brand.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly rectangle?: BoundingRect;
}

/**
 * @interface
 * An interface representing ImageMetadata.
 * Image metadata.
 *
 */
export interface ImageMetadata {
  /**
   * @member {number} [width] Image width, in pixels.
   */
  width?: number;
  /**
   * @member {number} [height] Image height, in pixels.
   */
  height?: number;
  /**
   * @member {string} [format] Image format.
   */
  format?: string;
}

/**
 * @interface
 * An interface representing ImageAnalysis.
 * Result of AnalyzeImage operation.
 *
 */
export interface ImageAnalysis {
  /**
   * @member {Category[]} [categories] An array indicating identified
   * categories.
   */
  categories?: Category[];
  /**
   * @member {AdultInfo} [adult] An object describing whether the image
   * contains adult-oriented content and/or is racy.
   */
  adult?: AdultInfo;
  /**
   * @member {ColorInfo} [color] An object providing additional metadata
   * describing color attributes.
   */
  color?: ColorInfo;
  /**
   * @member {ImageType} [imageType] An object providing possible image types
   * and matching confidence levels.
   */
  imageType?: ImageType;
  /**
   * @member {ImageTag[]} [tags] A list of tags with confidence level.
   */
  tags?: ImageTag[];
  /**
   * @member {ImageDescriptionDetails} [description] A collection of content
   * tags, along with a list of captions sorted by confidence level, and image
   * metadata.
   */
  description?: ImageDescriptionDetails;
  /**
   * @member {FaceDescription[]} [faces] An array of possible faces within the
   * image.
   */
  faces?: FaceDescription[];
  /**
   * @member {DetectedObject[]} [objects] Array of objects describing what was
   * detected in the image.
   */
  objects?: DetectedObject[];
  /**
   * @member {DetectedBrand[]} [brands] Array of brands detected in the image.
   */
  brands?: DetectedBrand[];
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing ImageDescription.
 * A collection of content tags, along with a list of captions sorted by
 * confidence level, and image metadata.
 *
 */
export interface ImageDescription {
  /**
   * @member {string[]} [tags] A collection of image tags.
   */
  tags?: string[];
  /**
   * @member {ImageCaption[]} [captions] A list of captions, sorted by
   * confidence level.
   */
  captions?: ImageCaption[];
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing DetectResult.
 * Result of a DetectImage call.
 *
 */
export interface DetectResult {
  /**
   * @member {DetectedObject[]} [objects] An array of detected objects.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly objects?: DetectedObject[];
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing ModelDescription.
 * An object describing supported model by name and categories.
 *
 */
export interface ModelDescription {
  /**
   * @member {string} [name] The name of the model.
   */
  name?: string;
  /**
   * @member {string[]} [categories] Categories of the model.
   */
  categories?: string[];
}

/**
 * @interface
 * An interface representing ListModelsResult.
 * Result of the List Domain Models operation.
 *
 */
export interface ListModelsResult {
  /**
   * @member {ModelDescription[]} [modelsProperty] An array of supported
   * models.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly modelsProperty?: ModelDescription[];
}

/**
 * @interface
 * An interface representing DomainModelResults.
 * Result of image analysis using a specific domain model including additional
 * metadata.
 *
 */
export interface DomainModelResults {
  /**
   * @member {any} [result] Model-specific response.
   */
  result?: any;
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing OcrWord.
 * Information on a recognized word.
 *
 */
export interface OcrWord {
  /**
   * @member {string} [boundingBox] Bounding box of a recognized word. The four
   * integers represent the x-coordinate of the left edge, the y-coordinate of
   * the top edge, width, and height of the bounding box, in the coordinate
   * system of the input image, after it has been rotated around its center
   * according to the detected text angle (see textAngle property), with the
   * origin at the top-left corner, and the y-axis pointing down.
   */
  boundingBox?: string;
  /**
   * @member {string} [text] String value of a recognized word.
   */
  text?: string;
}

/**
 * @interface
 * An interface representing OcrLine.
 * An object describing a single recognized line of text.
 *
 */
export interface OcrLine {
  /**
   * @member {string} [boundingBox] Bounding box of a recognized line. The four
   * integers represent the x-coordinate of the left edge, the y-coordinate of
   * the top edge, width, and height of the bounding box, in the coordinate
   * system of the input image, after it has been rotated around its center
   * according to the detected text angle (see textAngle property), with the
   * origin at the top-left corner, and the y-axis pointing down.
   */
  boundingBox?: string;
  /**
   * @member {OcrWord[]} [words] An array of objects, where each object
   * represents a recognized word.
   */
  words?: OcrWord[];
}

/**
 * @interface
 * An interface representing OcrRegion.
 * A region consists of multiple lines (e.g. a column of text in a multi-column
 * document).
 *
 */
export interface OcrRegion {
  /**
   * @member {string} [boundingBox] Bounding box of a recognized region. The
   * four integers represent the x-coordinate of the left edge, the
   * y-coordinate of the top edge, width, and height of the bounding box, in
   * the coordinate system of the input image, after it has been rotated around
   * its center according to the detected text angle (see textAngle property),
   * with the origin at the top-left corner, and the y-axis pointing down.
   */
  boundingBox?: string;
  /**
   * @member {OcrLine[]} [lines] An array of recognized lines of text.
   */
  lines?: OcrLine[];
}

/**
 * @interface
 * An interface representing OcrResult.
 */
export interface OcrResult {
  /**
   * @member {string} [language] The BCP-47 language code of the text in the
   * image.
   */
  language?: string;
  /**
   * @member {number} [textAngle] The angle, in degrees, of the detected text
   * with respect to the closest horizontal or vertical direction. After
   * rotating the input image clockwise by this angle, the recognized text
   * lines become horizontal or vertical. In combination with the orientation
   * property it can be used to overlay recognition results correctly on the
   * original image, by rotating either the original image or recognition
   * results by a suitable angle around the center of the original image. If
   * the angle cannot be confidently detected, this property is not present. If
   * the image contains text at different angles, only part of the text will be
   * recognized correctly.
   */
  textAngle?: number;
  /**
   * @member {string} [orientation] Orientation of the text recognized in the
   * image. The value (up, down, left, or right) refers to the direction that
   * the top of the recognized text is facing, after the image has been rotated
   * around its center according to the detected text angle (see textAngle
   * property).
   */
  orientation?: string;
  /**
   * @member {OcrRegion[]} [regions] An array of objects, where each object
   * represents a region of recognized text.
   */
  regions?: OcrRegion[];
}

/**
 * @interface
 * An interface representing TagResult.
 * The results of a image tag operation, including any tags and image metadata.
 *
 */
export interface TagResult {
  /**
   * @member {ImageTag[]} [tags] A list of tags with confidence level.
   */
  tags?: ImageTag[];
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing AreaOfInterestResult.
 * Result of AreaOfInterest operation.
 *
 */
export interface AreaOfInterestResult {
  /**
   * @member {BoundingRect} [areaOfInterest] A bounding box for an area of
   * interest inside an image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly areaOfInterest?: BoundingRect;
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing ImageUrl.
 */
export interface ImageUrl {
  /**
   * @member {string} url Publicly reachable URL of an image.
   */
  url: string;
}

/**
 * @interface
 * An interface representing ComputerVisionError.
 * Details about the API request error.
 *
 */
export interface ComputerVisionError {
  /**
   * @member {any} code The error code.
   */
  code: any;
  /**
   * @member {string} message A message explaining the error reported by the
   * service.
   */
  message: string;
  /**
   * @member {string} [requestId] A unique request identifier.
   */
  requestId?: string;
}

/**
 * @interface
 * An interface representing LandmarkResults.
 * Result of domain-specific classifications for the domain of landmarks.
 *
 */
export interface LandmarkResults {
  /**
   * @member {LandmarksModel[]} [landmarks] List of landmarks recognized in the
   * image.
   */
  landmarks?: LandmarksModel[];
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing CelebrityResults.
 * Result of domain-specific classifications for the domain of celebrities.
 *
 */
export interface CelebrityResults {
  /**
   * @member {CelebritiesModel[]} [celebrities] List of celebrities recognized
   * in the image.
   */
  celebrities?: CelebritiesModel[];
  /**
   * @member {string} [requestId] Id of the REST API request.
   */
  requestId?: string;
  /**
   * @member {ImageMetadata} [metadata]
   */
  metadata?: ImageMetadata;
}

/**
 * @interface
 * An interface representing Word.
 * Json object representing a recognized word.
 *
 */
export interface Word {
  /**
   * @member {number[]} boundingBox Bounding box of a recognized word.
   */
  boundingBox: number[];
  /**
   * @member {string} text The text content of the word.
   */
  text: string;
  /**
   * @member {TextRecognitionResultConfidenceClass} [confidence] Qualitative
   * confidence measure. Possible values include: 'High', 'Low'
   */
  confidence?: TextRecognitionResultConfidenceClass;
}

/**
 * @interface
 * An interface representing Line.
 * Json object representing a recognized text line.
 *
 */
export interface Line {
  /**
   * @member {number[]} [boundingBox] Bounding box of a recognized line.
   */
  boundingBox?: number[];
  /**
   * @member {string} [text] The text content of the line.
   */
  text?: string;
  /**
   * @member {Word[]} [words] List of words in the text line.
   */
  words?: Word[];
}

/**
 * @interface
 * An interface representing TextRecognitionResult.
 * Json object representing a recognized text region
 *
 */
export interface TextRecognitionResult {
  /**
   * @member {number} [page] The 1-based page number of the recognition result.
   */
  page?: number;
  /**
   * @member {number} [clockwiseOrientation] The orientation of the image in
   * degrees in the clockwise direction. Range between [0, 360).
   */
  clockwiseOrientation?: number;
  /**
   * @member {number} [width] The width of the image in pixels or the PDF in
   * inches.
   */
  width?: number;
  /**
   * @member {number} [height] The height of the image in pixels or the PDF in
   * inches.
   */
  height?: number;
  /**
   * @member {TextRecognitionResultDimensionUnit} [unit] The unit used in the
   * Width, Height and BoundingBox. For images, the unit is "pixel". For PDF,
   * the unit is "inch". Possible values include: 'pixel', 'inch'
   */
  unit?: TextRecognitionResultDimensionUnit;
  /**
   * @member {Line[]} lines A list of recognized text lines.
   */
  lines: Line[];
}

/**
 * @interface
 * An interface representing TextOperationResult.
 * Result of recognition text operation.
 *
 */
export interface TextOperationResult {
  /**
   * @member {TextOperationStatusCodes} [status] Status of the text operation.
   * Possible values include: 'Not Started', 'Running', 'Failed', 'Succeeded'
   */
  status?: TextOperationStatusCodes;
  /**
   * @member {TextRecognitionResult} [recognitionResult] Text recognition
   * result of the text operation.
   */
  recognitionResult?: TextRecognitionResult;
}

/**
 * @interface
 * An interface representing ReadOperationResult.
 * OCR result of the read operation.
 *
 */
export interface ReadOperationResult {
  /**
   * @member {TextOperationStatusCodes} [status] Status of the read operation.
   * Possible values include: 'Not Started', 'Running', 'Failed', 'Succeeded'
   */
  status?: TextOperationStatusCodes;
  /**
   * @member {TextRecognitionResult[]} [recognitionResults] A array of text
   * recognition result of the read operation.
   */
  recognitionResults?: TextRecognitionResult[];
}

/**
 * @interface
 * An interface representing ComputerVisionClientAnalyzeImageOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientAnalyzeImageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {VisualFeatureTypes[]} [visualFeatures] A string indicating what
   * visual feature types to return. Multiple values should be comma-separated.
   * Valid visual feature types include: Categories - categorizes image content
   * according to a taxonomy defined in documentation. Tags - tags the image
   * with a detailed list of words related to the image content. Description -
   * describes the image content with a complete English sentence. Faces -
   * detects if faces are present. If present, generate coordinates, gender and
   * age. ImageType - detects if image is clipart or a line drawing. Color -
   * determines the accent color, dominant color, and whether an image is
   * black&white. Adult - detects if the image is pornographic in nature
   * (depicts nudity or a sex act).  Sexually suggestive content is also
   * detected. Objects - detects various objects within an image, including the
   * approximate location. The Objects argument is only available in English.
   * Brands - detects various brands within an image, including the approximate
   * location. The Brands argument is only available in English.
   */
  visualFeatures?: VisualFeatureTypes[];
  /**
   * @member {Details[]} [details] A string indicating which domain-specific
   * details to return. Multiple values should be comma-separated. Valid visual
   * feature types include: Celebrities - identifies celebrities if detected in
   * the image, Landmarks - identifies notable landmarks in the image.
   */
  details?: Details[];
  /**
   * @member {Language} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language;
}

/**
 * @interface
 * An interface representing ComputerVisionClientDescribeImageOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientDescribeImageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [maxCandidates] Maximum number of candidate descriptions
   * to be returned.  The default is 1. Default value: 1 .
   */
  maxCandidates?: number;
  /**
   * @member {Language1} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language1;
}

/**
 * @interface
 * An interface representing ComputerVisionClientAnalyzeImageByDomainOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientAnalyzeImageByDomainOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Language2} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language2;
}

/**
 * @interface
 * An interface representing ComputerVisionClientRecognizePrintedTextOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientRecognizePrintedTextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {OcrLanguages} [language] The BCP-47 language code of the text to
   * be detected in the image. The default value is 'unk'. Possible values
   * include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',
   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv',
   * 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'. Default value: 'unk' .
   */
  language?: OcrLanguages;
}

/**
 * @interface
 * An interface representing ComputerVisionClientTagImageOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientTagImageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Language3} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language3;
}

/**
 * @interface
 * An interface representing ComputerVisionClientGenerateThumbnailOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientGenerateThumbnailOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [smartCropping] Boolean flag for enabling smart
   * cropping. Default value: false .
   */
  smartCropping?: boolean;
}

/**
 * @interface
 * An interface representing ComputerVisionClientAnalyzeImageInStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientAnalyzeImageInStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {VisualFeatureTypes[]} [visualFeatures] A string indicating what
   * visual feature types to return. Multiple values should be comma-separated.
   * Valid visual feature types include: Categories - categorizes image content
   * according to a taxonomy defined in documentation. Tags - tags the image
   * with a detailed list of words related to the image content. Description -
   * describes the image content with a complete English sentence. Faces -
   * detects if faces are present. If present, generate coordinates, gender and
   * age. ImageType - detects if image is clipart or a line drawing. Color -
   * determines the accent color, dominant color, and whether an image is
   * black&white. Adult - detects if the image is pornographic in nature
   * (depicts nudity or a sex act).  Sexually suggestive content is also
   * detected. Objects - detects various objects within an image, including the
   * approximate location. The Objects argument is only available in English.
   * Brands - detects various brands within an image, including the approximate
   * location. The Brands argument is only available in English.
   */
  visualFeatures?: VisualFeatureTypes[];
  /**
   * @member {Details[]} [details] A string indicating which domain-specific
   * details to return. Multiple values should be comma-separated. Valid visual
   * feature types include: Celebrities - identifies celebrities if detected in
   * the image, Landmarks - identifies notable landmarks in the image.
   */
  details?: Details[];
  /**
   * @member {Language4} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language4;
}

/**
 * @interface
 * An interface representing ComputerVisionClientDescribeImageInStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientDescribeImageInStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [maxCandidates] Maximum number of candidate descriptions
   * to be returned.  The default is 1. Default value: 1 .
   */
  maxCandidates?: number;
  /**
   * @member {Language5} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language5;
}

/**
 * @interface
 * An interface representing ComputerVisionClientGenerateThumbnailInStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientGenerateThumbnailInStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [smartCropping] Boolean flag for enabling smart
   * cropping. Default value: false .
   */
  smartCropping?: boolean;
}

/**
 * @interface
 * An interface representing ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Language6} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language6;
}

/**
 * @interface
 * An interface representing ComputerVisionClientRecognizePrintedTextInStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientRecognizePrintedTextInStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {OcrLanguages} [language] The BCP-47 language code of the text to
   * be detected in the image. The default value is 'unk'. Possible values
   * include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr',
   * 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv',
   * 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'. Default value: 'unk' .
   */
  language?: OcrLanguages;
}

/**
 * @interface
 * An interface representing ComputerVisionClientTagImageInStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ComputerVisionClientTagImageInStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Language7} [language] The desired language for output generation.
   * If this parameter is not specified, the default value is
   * &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja
   * - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values
   * include: 'en', 'es', 'ja', 'pt', 'zh'. Default value: 'en' .
   */
  language?: Language7;
}

/**
 * @interface
 * An interface representing RecognizeTextHeaders.
 * Defines headers for RecognizeText operation.
 *
 */
export interface RecognizeTextHeaders {
  /**
   * @member {string} [operationLocation] URL to query for status of the
   * operation. The operation ID will expire in 48 hours.
   */
  operationLocation: string;
}

/**
 * @interface
 * An interface representing BatchReadFileHeaders.
 * Defines headers for BatchReadFile operation.
 *
 */
export interface BatchReadFileHeaders {
  /**
   * @member {string} [operationLocation] URL to query for status of the
   * operation. The operation ID will expire in 48 hours.
   */
  operationLocation: string;
}

/**
 * @interface
 * An interface representing RecognizeTextInStreamHeaders.
 * Defines headers for RecognizeTextInStream operation.
 *
 */
export interface RecognizeTextInStreamHeaders {
  /**
   * @member {string} [operationLocation] URL to query for status of the
   * operation. The operation ID will expire in 48 hours.
   */
  operationLocation: string;
}

/**
 * @interface
 * An interface representing BatchReadFileInStreamHeaders.
 * Defines headers for BatchReadFileInStream operation.
 *
 */
export interface BatchReadFileInStreamHeaders {
  /**
   * @member {string} [operationLocation] URL to query for status of the
   * operation. The operation ID will expire in 48 hours.
   */
  operationLocation: string;
}

/**
 * Defines values for Gender.
 * Possible values include: 'Male', 'Female'
 * @readonly
 * @enum {string}
 */
export type Gender = 'Male' | 'Female';

/**
 * Defines values for TextOperationStatusCodes.
 * Possible values include: 'Not Started', 'Running', 'Failed', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type TextOperationStatusCodes = 'Not Started' | 'Running' | 'Failed' | 'Succeeded';

/**
 * Defines values for TextRecognitionResultDimensionUnit.
 * Possible values include: 'pixel', 'inch'
 * @readonly
 * @enum {string}
 */
export type TextRecognitionResultDimensionUnit = 'pixel' | 'inch';

/**
 * Defines values for TextRecognitionResultConfidenceClass.
 * Possible values include: 'High', 'Low'
 * @readonly
 * @enum {string}
 */
export type TextRecognitionResultConfidenceClass = 'High' | 'Low';

/**
 * Defines values for OcrLanguages.
 * Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de',
 * 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl',
 * 'sr-Latn', 'sk'
 * @readonly
 * @enum {string}
 */
export type OcrLanguages = 'unk' | 'zh-Hans' | 'zh-Hant' | 'cs' | 'da' | 'nl' | 'en' | 'fi' | 'fr' | 'de' | 'el' | 'hu' | 'it' | 'ja' | 'ko' | 'nb' | 'pl' | 'pt' | 'ru' | 'es' | 'sv' | 'tr' | 'ar' | 'ro' | 'sr-Cyrl' | 'sr-Latn' | 'sk';

/**
 * Defines values for VisualFeatureTypes.
 * Possible values include: 'ImageType', 'Faces', 'Adult', 'Categories', 'Color', 'Tags',
 * 'Description', 'Objects', 'Brands'
 * @readonly
 * @enum {string}
 */
export type VisualFeatureTypes = 'ImageType' | 'Faces' | 'Adult' | 'Categories' | 'Color' | 'Tags' | 'Description' | 'Objects' | 'Brands';

/**
 * Defines values for TextRecognitionMode.
 * Possible values include: 'Handwritten', 'Printed'
 * @readonly
 * @enum {string}
 */
export type TextRecognitionMode = 'Handwritten' | 'Printed';

/**
 * Defines values for Details.
 * Possible values include: 'Celebrities', 'Landmarks'
 * @readonly
 * @enum {string}
 */
export type Details = 'Celebrities' | 'Landmarks';

/**
 * Defines values for Language.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language1.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language1 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language2.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language2 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language3.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language3 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language4.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language4 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language5.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language5 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language6.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language6 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Defines values for Language7.
 * Possible values include: 'en', 'es', 'ja', 'pt', 'zh'
 * @readonly
 * @enum {string}
 */
export type Language7 = 'en' | 'es' | 'ja' | 'pt' | 'zh';

/**
 * Contains response data for the analyzeImage operation.
 */
export type AnalyzeImageResponse = ImageAnalysis & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageAnalysis;
    };
};

/**
 * Contains response data for the describeImage operation.
 */
export type DescribeImageResponse = ImageDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageDescription;
    };
};

/**
 * Contains response data for the detectObjects operation.
 */
export type DetectObjectsResponse = DetectResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DetectResult;
    };
};

/**
 * Contains response data for the listModels operation.
 */
export type ListModelsResponse = ListModelsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListModelsResult;
    };
};

/**
 * Contains response data for the analyzeImageByDomain operation.
 */
export type AnalyzeImageByDomainResponse = DomainModelResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainModelResults;
    };
};

/**
 * Contains response data for the recognizePrintedText operation.
 */
export type RecognizePrintedTextResponse = OcrResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OcrResult;
    };
};

/**
 * Contains response data for the tagImage operation.
 */
export type TagImageResponse = TagResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagResult;
    };
};

/**
 * Contains response data for the generateThumbnail operation.
 */
export type GenerateThumbnailResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse;
};

/**
 * Contains response data for the getAreaOfInterest operation.
 */
export type GetAreaOfInterestResponse = AreaOfInterestResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AreaOfInterestResult;
    };
};

/**
 * Contains response data for the recognizeText operation.
 */
export type RecognizeTextResponse = RecognizeTextHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: RecognizeTextHeaders;
    };
};

/**
 * Contains response data for the getTextOperationResult operation.
 */
export type GetTextOperationResultResponse = TextOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TextOperationResult;
    };
};

/**
 * Contains response data for the batchReadFile operation.
 */
export type BatchReadFileResponse = BatchReadFileHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BatchReadFileHeaders;
    };
};

/**
 * Contains response data for the getReadOperationResult operation.
 */
export type GetReadOperationResultResponse = ReadOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReadOperationResult;
    };
};

/**
 * Contains response data for the analyzeImageInStream operation.
 */
export type AnalyzeImageInStreamResponse = ImageAnalysis & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageAnalysis;
    };
};

/**
 * Contains response data for the getAreaOfInterestInStream operation.
 */
export type GetAreaOfInterestInStreamResponse = AreaOfInterestResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AreaOfInterestResult;
    };
};

/**
 * Contains response data for the describeImageInStream operation.
 */
export type DescribeImageInStreamResponse = ImageDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageDescription;
    };
};

/**
 * Contains response data for the detectObjectsInStream operation.
 */
export type DetectObjectsInStreamResponse = DetectResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DetectResult;
    };
};

/**
 * Contains response data for the generateThumbnailInStream operation.
 */
export type GenerateThumbnailInStreamResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse;
};

/**
 * Contains response data for the analyzeImageByDomainInStream operation.
 */
export type AnalyzeImageByDomainInStreamResponse = DomainModelResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DomainModelResults;
    };
};

/**
 * Contains response data for the recognizePrintedTextInStream operation.
 */
export type RecognizePrintedTextInStreamResponse = OcrResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OcrResult;
    };
};

/**
 * Contains response data for the tagImageInStream operation.
 */
export type TagImageInStreamResponse = TagResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagResult;
    };
};

/**
 * Contains response data for the recognizeTextInStream operation.
 */
export type RecognizeTextInStreamResponse = RecognizeTextInStreamHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: RecognizeTextInStreamHeaders;
    };
};

/**
 * Contains response data for the batchReadFileInStream operation.
 */
export type BatchReadFileInStreamResponse = BatchReadFileInStreamHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BatchReadFileInStreamHeaders;
    };
};
