/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";


/**
 * @interface
 * An interface representing Domain.
 */
export interface Domain {
  /**
   * @member {string} [id] **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * @member {DomainType} [type] Possible values include: 'Classification',
   * 'ObjectDetection'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: DomainType;
  /**
   * @member {boolean} [exportable] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly exportable?: boolean;
  /**
   * @member {boolean} [enabled] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly enabled?: boolean;
}

/**
 * @interface
 * An interface representing ImageTagCreateEntry.
 * Entry associating a tag to an image.
 *
 */
export interface ImageTagCreateEntry {
  /**
   * @member {string} [imageId] Id of the image.
   */
  imageId?: string;
  /**
   * @member {string} [tagId] Id of the tag.
   */
  tagId?: string;
}

/**
 * @interface
 * An interface representing ImageTagCreateBatch.
 * Batch of image tags.
 *
 */
export interface ImageTagCreateBatch {
  /**
   * @member {ImageTagCreateEntry[]} [tags] Image Tag entries to include in
   * this batch.
   */
  tags?: ImageTagCreateEntry[];
}

/**
 * @interface
 * An interface representing ImageTagCreateSummary.
 */
export interface ImageTagCreateSummary {
  /**
   * @member {ImageTagCreateEntry[]} [created]
   */
  created?: ImageTagCreateEntry[];
  /**
   * @member {ImageTagCreateEntry[]} [duplicated]
   */
  duplicated?: ImageTagCreateEntry[];
  /**
   * @member {ImageTagCreateEntry[]} [exceeded]
   */
  exceeded?: ImageTagCreateEntry[];
}

/**
 * @interface
 * An interface representing ImageRegionCreateEntry.
 * Entry associating a region to an image.
 *
 */
export interface ImageRegionCreateEntry {
  /**
   * @member {string} [imageId] Id of the image.
   */
  imageId?: string;
  /**
   * @member {string} [tagId] Id of the tag associated with this region.
   */
  tagId?: string;
  /**
   * @member {number} [left]
   */
  left?: number;
  /**
   * @member {number} [top]
   */
  top?: number;
  /**
   * @member {number} [width]
   */
  width?: number;
  /**
   * @member {number} [height]
   */
  height?: number;
}

/**
 * @interface
 * An interface representing ImageRegionCreateBatch.
 * Batch of image region information to create.
 *
 */
export interface ImageRegionCreateBatch {
  /**
   * @member {ImageRegionCreateEntry[]} [regions]
   */
  regions?: ImageRegionCreateEntry[];
}

/**
 * @interface
 * An interface representing ImageRegionCreateResult.
 */
export interface ImageRegionCreateResult {
  /**
   * @member {string} [imageId] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly imageId?: string;
  /**
   * @member {string} [regionId] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly regionId?: string;
  /**
   * @member {string} [tagName] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly tagName?: string;
  /**
   * @member {Date} [created] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * @member {string} [tagId] Id of the tag associated with this region.
   */
  tagId?: string;
  /**
   * @member {number} [left]
   */
  left?: number;
  /**
   * @member {number} [top]
   */
  top?: number;
  /**
   * @member {number} [width]
   */
  width?: number;
  /**
   * @member {number} [height]
   */
  height?: number;
}

/**
 * @interface
 * An interface representing ImageRegionCreateSummary.
 */
export interface ImageRegionCreateSummary {
  /**
   * @member {ImageRegionCreateResult[]} [created]
   */
  created?: ImageRegionCreateResult[];
  /**
   * @member {ImageRegionCreateEntry[]} [duplicated]
   */
  duplicated?: ImageRegionCreateEntry[];
  /**
   * @member {ImageRegionCreateEntry[]} [exceeded]
   */
  exceeded?: ImageRegionCreateEntry[];
}

/**
 * @interface
 * An interface representing ImageTag.
 */
export interface ImageTag {
  /**
   * @member {string} [tagId] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly tagId?: string;
  /**
   * @member {string} [tagName] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly tagName?: string;
  /**
   * @member {Date} [created] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly created?: Date;
}

/**
 * @interface
 * An interface representing ImageRegion.
 */
export interface ImageRegion {
  /**
   * @member {string} [regionId] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly regionId?: string;
  /**
   * @member {string} [tagName] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly tagName?: string;
  /**
   * @member {Date} [created] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * @member {string} [tagId] Id of the tag associated with this region.
   */
  tagId?: string;
  /**
   * @member {number} [left]
   */
  left?: number;
  /**
   * @member {number} [top]
   */
  top?: number;
  /**
   * @member {number} [width]
   */
  width?: number;
  /**
   * @member {number} [height]
   */
  height?: number;
}

/**
 * @interface
 * An interface representing Image.
 * Image model to be sent as JSON.
 *
 */
export interface Image {
  /**
   * @member {string} [id] Id of the image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [created] Date the image was created.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
  /**
   * @member {number} [width] Width of the image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly width?: number;
  /**
   * @member {number} [height] Height of the image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly height?: number;
  /**
   * @member {string} [resizedImageUri] The URI to the (resized) image used for
   * training.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resizedImageUri?: string;
  /**
   * @member {string} [thumbnailUri] The URI to the thumbnail of the original
   * image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly thumbnailUri?: string;
  /**
   * @member {string} [originalImageUri] The URI to the original uploaded
   * image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly originalImageUri?: string;
  /**
   * @member {ImageTag[]} [tags] Tags associated with this image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tags?: ImageTag[];
  /**
   * @member {ImageRegion[]} [regions] Regions associated with this image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly regions?: ImageRegion[];
}

/**
 * @interface
 * An interface representing ImageCreateResult.
 */
export interface ImageCreateResult {
  /**
   * @member {string} [sourceUrl] Source URL of the image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sourceUrl?: string;
  /**
   * @member {ImageCreateStatus} [status] Status of the image creation.
   * Possible values include: 'OK', 'OKDuplicate', 'ErrorSource',
   * 'ErrorImageFormat', 'ErrorImageSize', 'ErrorStorage', 'ErrorLimitExceed',
   * 'ErrorTagLimitExceed', 'ErrorRegionLimitExceed', 'ErrorUnknown',
   * 'ErrorNegativeAndRegularTagOnSameImage'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ImageCreateStatus;
  /**
   * @member {Image} [image] The image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly image?: Image;
}

/**
 * @interface
 * An interface representing ImageCreateSummary.
 */
export interface ImageCreateSummary {
  /**
   * @member {boolean} [isBatchSuccessful] True if all of the images in the
   * batch were created successfully, otherwise false.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly isBatchSuccessful?: boolean;
  /**
   * @member {ImageCreateResult[]} [images] List of the image creation results.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly images?: ImageCreateResult[];
}

/**
 * @interface
 * An interface representing Region.
 */
export interface Region {
  /**
   * @member {string} [tagId] Id of the tag associated with this region.
   */
  tagId?: string;
  /**
   * @member {number} [left]
   */
  left?: number;
  /**
   * @member {number} [top]
   */
  top?: number;
  /**
   * @member {number} [width]
   */
  width?: number;
  /**
   * @member {number} [height]
   */
  height?: number;
}

/**
 * @interface
 * An interface representing ImageFileCreateEntry.
 */
export interface ImageFileCreateEntry {
  /**
   * @member {string} [name]
   */
  name?: string;
  /**
   * @member {Uint8Array} [contents]
   */
  contents?: Uint8Array;
  /**
   * @member {string[]} [tagIds]
   */
  tagIds?: string[];
  /**
   * @member {Region[]} [regions]
   */
  regions?: Region[];
}

/**
 * @interface
 * An interface representing ImageFileCreateBatch.
 */
export interface ImageFileCreateBatch {
  /**
   * @member {ImageFileCreateEntry[]} [images]
   */
  images?: ImageFileCreateEntry[];
  /**
   * @member {string[]} [tagIds]
   */
  tagIds?: string[];
}

/**
 * @interface
 * An interface representing ImageUrlCreateEntry.
 */
export interface ImageUrlCreateEntry {
  /**
   * @member {string} [url]
   */
  url?: string;
  /**
   * @member {string[]} [tagIds]
   */
  tagIds?: string[];
  /**
   * @member {Region[]} [regions]
   */
  regions?: Region[];
}

/**
 * @interface
 * An interface representing ImageUrlCreateBatch.
 */
export interface ImageUrlCreateBatch {
  /**
   * @member {ImageUrlCreateEntry[]} [images]
   */
  images?: ImageUrlCreateEntry[];
  /**
   * @member {string[]} [tagIds]
   */
  tagIds?: string[];
}

/**
 * @interface
 * An interface representing ImageIdCreateEntry.
 */
export interface ImageIdCreateEntry {
  /**
   * @member {string} [id]
   */
  id?: string;
  /**
   * @member {string[]} [tagIds]
   */
  tagIds?: string[];
  /**
   * @member {Region[]} [regions]
   */
  regions?: Region[];
}

/**
 * @interface
 * An interface representing ImageIdCreateBatch.
 */
export interface ImageIdCreateBatch {
  /**
   * @member {ImageIdCreateEntry[]} [images]
   */
  images?: ImageIdCreateEntry[];
  /**
   * @member {string[]} [tagIds]
   */
  tagIds?: string[];
}

/**
 * @interface
 * An interface representing BoundingBox.
 */
export interface BoundingBox {
  /**
   * @member {number} [left]
   */
  left?: number;
  /**
   * @member {number} [top]
   */
  top?: number;
  /**
   * @member {number} [width]
   */
  width?: number;
  /**
   * @member {number} [height]
   */
  height?: number;
}

/**
 * @interface
 * An interface representing RegionProposal.
 */
export interface RegionProposal {
  /**
   * @member {number} [confidence] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly confidence?: number;
  /**
   * @member {BoundingBox} [boundingBox] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly boundingBox?: BoundingBox;
}

/**
 * @interface
 * An interface representing ImageRegionProposal.
 */
export interface ImageRegionProposal {
  /**
   * @member {string} [projectId] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly projectId?: string;
  /**
   * @member {string} [imageId] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly imageId?: string;
  /**
   * @member {RegionProposal[]} [proposals] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly proposals?: RegionProposal[];
}

/**
 * @interface
 * An interface representing ImageUrl.
 */
export interface ImageUrl {
  /**
   * @member {string} [url]
   */
  url?: string;
}

/**
 * @interface
 * An interface representing Prediction.
 */
export interface Prediction {
  /**
   * @member {number} [probability] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly probability?: number;
  /**
   * @member {string} [tagId] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly tagId?: string;
  /**
   * @member {string} [tagName] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly tagName?: string;
  /**
   * @member {BoundingBox} [boundingBox] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly boundingBox?: BoundingBox;
}

/**
 * @interface
 * An interface representing ImagePrediction.
 */
export interface ImagePrediction {
  /**
   * @member {string} [id] **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [project] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly project?: string;
  /**
   * @member {string} [iteration] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly iteration?: string;
  /**
   * @member {Date} [created] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * @member {Prediction[]} [predictions] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly predictions?: Prediction[];
}

/**
 * @interface
 * An interface representing PredictionQueryTag.
 */
export interface PredictionQueryTag {
  /**
   * @member {string} [id] **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly id?: string;
  /**
   * @member {number} [minThreshold] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly minThreshold?: number;
  /**
   * @member {number} [maxThreshold] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly maxThreshold?: number;
}

/**
 * @interface
 * An interface representing PredictionQueryToken.
 */
export interface PredictionQueryToken {
  /**
   * @member {string} [session]
   */
  session?: string;
  /**
   * @member {string} [continuation]
   */
  continuation?: string;
  /**
   * @member {number} [maxCount]
   */
  maxCount?: number;
  /**
   * @member {OrderBy} [orderBy] Possible values include: 'Newest', 'Oldest',
   * 'Suggested'
   */
  orderBy?: OrderBy;
  /**
   * @member {PredictionQueryTag[]} [tags]
   */
  tags?: PredictionQueryTag[];
  /**
   * @member {string} [iterationId]
   */
  iterationId?: string;
  /**
   * @member {Date} [startTime]
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime]
   */
  endTime?: Date;
  /**
   * @member {string} [application]
   */
  application?: string;
}

/**
 * @interface
 * An interface representing StoredImagePrediction.
 * result of an image classification request.
 *
 */
export interface StoredImagePrediction {
  /**
   * @member {string} [resizedImageUri] The URI to the (resized) prediction
   * image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resizedImageUri?: string;
  /**
   * @member {string} [thumbnailUri] The URI to the thumbnail of the original
   * prediction image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly thumbnailUri?: string;
  /**
   * @member {string} [originalImageUri] The URI to the original prediction
   * image.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly originalImageUri?: string;
  /**
   * @member {string} [domain] Domain used for the prediction.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly domain?: string;
  /**
   * @member {string} [id] **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [project] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly project?: string;
  /**
   * @member {string} [iteration] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly iteration?: string;
  /**
   * @member {Date} [created] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * @member {Prediction[]} [predictions] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly predictions?: Prediction[];
}

/**
 * @interface
 * An interface representing PredictionQueryResult.
 */
export interface PredictionQueryResult {
  /**
   * @member {PredictionQueryToken} [token] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly token?: PredictionQueryToken;
  /**
   * @member {StoredImagePrediction[]} [results] **NOTE: This property will not
   * be serialized. It can only be populated by the server.**
   */
  readonly results?: StoredImagePrediction[];
}

/**
 * @interface
 * An interface representing TagPerformance.
 * Represents performance data for a particular tag in a trained iteration.
 *
 */
export interface TagPerformance {
  /**
   * @member {string} [id] **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * @member {number} [precision] Gets the precision.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly precision?: number;
  /**
   * @member {number} [precisionStdDeviation] Gets the standard deviation for
   * the precision.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly precisionStdDeviation?: number;
  /**
   * @member {number} [recall] Gets the recall.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly recall?: number;
  /**
   * @member {number} [recallStdDeviation] Gets the standard deviation for the
   * recall.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly recallStdDeviation?: number;
  /**
   * @member {number} [averagePrecision] Gets the average precision when
   * applicable.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly averagePrecision?: number;
}

/**
 * @interface
 * An interface representing IterationPerformance.
 * Represents the detailed performance data for a trained iteration.
 *
 */
export interface IterationPerformance {
  /**
   * @member {TagPerformance[]} [perTagPerformance] Gets the per-tag
   * performance details for this iteration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly perTagPerformance?: TagPerformance[];
  /**
   * @member {number} [precision] Gets the precision.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly precision?: number;
  /**
   * @member {number} [precisionStdDeviation] Gets the standard deviation for
   * the precision.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly precisionStdDeviation?: number;
  /**
   * @member {number} [recall] Gets the recall.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly recall?: number;
  /**
   * @member {number} [recallStdDeviation] Gets the standard deviation for the
   * recall.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly recallStdDeviation?: number;
  /**
   * @member {number} [averagePrecision] Gets the average precision when
   * applicable.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly averagePrecision?: number;
}

/**
 * @interface
 * An interface representing ImagePerformance.
 * Image performance model.
 *
 */
export interface ImagePerformance {
  /**
   * @member {Prediction[]} [predictions] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly predictions?: Prediction[];
  /**
   * @member {string} [id] **NOTE: This property will not be serialized. It can
   * only be populated by the server.**
   */
  readonly id?: string;
  /**
   * @member {Date} [created] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * @member {number} [width] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly width?: number;
  /**
   * @member {number} [height] **NOTE: This property will not be serialized. It
   * can only be populated by the server.**
   */
  readonly height?: number;
  /**
   * @member {string} [imageUri] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly imageUri?: string;
  /**
   * @member {string} [thumbnailUri] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly thumbnailUri?: string;
  /**
   * @member {ImageTag[]} [tags] **NOTE: This property will not be serialized.
   * It can only be populated by the server.**
   */
  readonly tags?: ImageTag[];
  /**
   * @member {ImageRegion[]} [regions] **NOTE: This property will not be
   * serialized. It can only be populated by the server.**
   */
  readonly regions?: ImageRegion[];
}

/**
 * @interface
 * An interface representing ProjectSettings.
 * Represents settings associated with a project.
 *
 */
export interface ProjectSettings {
  /**
   * @member {string} [domainId] Gets or sets the id of the Domain to use with
   * this project.
   */
  domainId?: string;
  /**
   * @member {Classifier} [classificationType] Gets or sets the classification
   * type of the project. Possible values include: 'Multiclass', 'Multilabel'
   */
  classificationType?: Classifier;
}

/**
 * @interface
 * An interface representing Project.
 * Represents a project.
 *
 */
export interface Project {
  /**
   * @member {string} [id] Gets The project id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Gets or sets the name of the project.
   */
  name?: string;
  /**
   * @member {string} [description] Gets or sets the description of the
   * project.
   */
  description?: string;
  /**
   * @member {ProjectSettings} [settings] Gets or sets the project settings.
   */
  settings?: ProjectSettings;
  /**
   * @member {Date} [created] Gets the date this project was created.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
  /**
   * @member {Date} [lastModified] Gets the date this project was last modifed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModified?: Date;
  /**
   * @member {string} [thumbnailUri] Gets the thumbnail url representing the
   * project.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly thumbnailUri?: string;
}

/**
 * @interface
 * An interface representing Iteration.
 * Iteration model to be sent over JSON.
 *
 */
export interface Iteration {
  /**
   * @member {string} [id] Gets the id of the iteration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Gets or sets the name of the iteration.
   */
  name?: string;
  /**
   * @member {boolean} [isDefault] Gets or sets a value indicating whether the
   * iteration is the default iteration for the project.
   */
  isDefault?: boolean;
  /**
   * @member {string} [status] Gets the current iteration status.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: string;
  /**
   * @member {Date} [created] Gets the time this iteration was completed.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
  /**
   * @member {Date} [lastModified] Gets the time this iteration was last
   * modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModified?: Date;
  /**
   * @member {Date} [trainedAt] Gets the time this iteration was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trainedAt?: Date;
  /**
   * @member {string} [projectId] Gets The project id. of the iteration.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly projectId?: string;
  /**
   * @member {boolean} [exportable] Whether the iteration can be exported to
   * another format for download.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly exportable?: boolean;
  /**
   * @member {string} [domainId] Get or sets a guid of the domain the iteration
   * has been trained on.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly domainId?: string;
  /**
   * @member {Classifier} [classificationType] Gets the classification type of
   * the project. Possible values include: 'Multiclass', 'Multilabel'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly classificationType?: Classifier;
}

/**
 * @interface
 * An interface representing ExportModel.
 */
export interface ExportModel {
  /**
   * @member {ExportPlatformModel} [platform] Platform of the export. Possible
   * values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly platform?: ExportPlatformModel;
  /**
   * @member {ExportStatusModel} [status] Status of the export. Possible values
   * include: 'Exporting', 'Failed', 'Done'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: ExportStatusModel;
  /**
   * @member {string} [downloadUri] URI used to download the model.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly downloadUri?: string;
  /**
   * @member {ExportFlavorModel} [flavor] Flavor of the export. Possible values
   * include: 'Linux', 'Windows', 'ONNX10', 'ONNX12'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly flavor?: ExportFlavorModel;
  /**
   * @member {boolean} [newerVersionAvailable] Indicates an updated version of
   * the export package is available and should be re-exported for the latest
   * changes.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly newerVersionAvailable?: boolean;
}

/**
 * @interface
 * An interface representing Tag.
 * Represents a Tag.
 *
 */
export interface Tag {
  /**
   * @member {string} [id] Gets the Tag ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Gets or sets the name of the tag.
   */
  name?: string;
  /**
   * @member {string} [description] Gets or sets the description of the tag.
   */
  description?: string;
  /**
   * @member {TagType} [type] Gets or sets the type of the tag. Possible values
   * include: 'Regular', 'Negative'
   */
  type?: TagType;
  /**
   * @member {number} [imageCount] Gets the number of images with this tag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly imageCount?: number;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetTaggedImageCountOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetTaggedImageCountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] The iteration id. Defaults to workspace.
   */
  iterationId?: string;
  /**
   * @member {string[]} [tagIds] A list of tags ids to filter the images to
   * count. Defaults to all tags when null.
   */
  tagIds?: string[];
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetUntaggedImageCountOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetUntaggedImageCountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] The iteration id. Defaults to workspace.
   */
  iterationId?: string;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetTaggedImagesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetTaggedImagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] The iteration id. Defaults to workspace.
   */
  iterationId?: string;
  /**
   * @member {string[]} [tagIds] A list of tags ids to filter the images.
   * Defaults to all tagged images when null. Limited to 20.
   */
  tagIds?: string[];
  /**
   * @member {OrderBy1} [orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   */
  orderBy?: OrderBy1;
  /**
   * @member {number} [take] Maximum number of images to return. Defaults to
   * 50, limited to 256. Default value: 50 .
   */
  take?: number;
  /**
   * @member {number} [skip] Number of images to skip before beginning the
   * image batch. Defaults to 0. Default value: 0 .
   */
  skip?: number;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetUntaggedImagesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetUntaggedImagesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] The iteration id. Defaults to workspace.
   */
  iterationId?: string;
  /**
   * @member {OrderBy2} [orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   */
  orderBy?: OrderBy2;
  /**
   * @member {number} [take] Maximum number of images to return. Defaults to
   * 50, limited to 256. Default value: 50 .
   */
  take?: number;
  /**
   * @member {number} [skip] Number of images to skip before beginning the
   * image batch. Defaults to 0. Default value: 0 .
   */
  skip?: number;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetImagesByIdsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetImagesByIdsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string[]} [imageIds] The list of image ids to retrieve. Limited
   * to 256.
   */
  imageIds?: string[];
  /**
   * @member {string} [iterationId] The iteration id. Defaults to workspace.
   */
  iterationId?: string;
}

/**
 * @interface
 * An interface representing TrainingAPIClientCreateImagesFromDataOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientCreateImagesFromDataOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string[]} [tagIds] The tags ids with which to tag each image.
   * Limited to 20.
   */
  tagIds?: string[];
}

/**
 * @interface
 * An interface representing TrainingAPIClientQuickTestImageUrlOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientQuickTestImageUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] Optional. Specifies the id of a particular
   * iteration to evaluate against.
   * The default iteration for the project will be used when not specified.
   */
  iterationId?: string;
}

/**
 * @interface
 * An interface representing TrainingAPIClientQuickTestImageOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientQuickTestImageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] Optional. Specifies the id of a particular
   * iteration to evaluate against.
   * The default iteration for the project will be used when not specified.
   */
  iterationId?: string;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetIterationPerformanceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetIterationPerformanceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [threshold] The threshold used to determine true
   * predictions.
   */
  threshold?: number;
  /**
   * @member {number} [overlapThreshold] If applicable, the bounding box
   * overlap threshold used to determine true predictions.
   */
  overlapThreshold?: number;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetImagePerformancesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetImagePerformancesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string[]} [tagIds] A list of tags ids to filter the images.
   * Defaults to all tagged images when null. Limited to 20.
   */
  tagIds?: string[];
  /**
   * @member {OrderBy3} [orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   */
  orderBy?: OrderBy3;
  /**
   * @member {number} [take] Maximum number of images to return. Defaults to
   * 50, limited to 256. Default value: 50 .
   */
  take?: number;
  /**
   * @member {number} [skip] Number of images to skip before beginning the
   * image batch. Defaults to 0. Default value: 0 .
   */
  skip?: number;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetImagePerformanceCountOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetImagePerformanceCountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string[]} [tagIds] A list of tags ids to filter the images to
   * count. Defaults to all tags when null.
   */
  tagIds?: string[];
}

/**
 * @interface
 * An interface representing TrainingAPIClientCreateProjectOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientCreateProjectOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [description] The description of the project.
   */
  description?: string;
  /**
   * @member {string} [domainId] The id of the domain to use for this project.
   * Defaults to General.
   */
  domainId?: string;
  /**
   * @member {ClassificationType} [classificationType] The type of classifier
   * to create for this project. Possible values include: 'Multiclass',
   * 'Multilabel'
   */
  classificationType?: ClassificationType;
}

/**
 * @interface
 * An interface representing TrainingAPIClientExportIterationOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientExportIterationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {Flavor} [flavor] The flavor of the target platform. Possible
   * values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12'
   */
  flavor?: Flavor;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetTagOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetTagOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] The iteration to retrieve this tag from.
   * Optional, defaults to current training set.
   */
  iterationId?: string;
}

/**
 * @interface
 * An interface representing TrainingAPIClientGetTagsOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientGetTagsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [iterationId] The iteration id. Defaults to workspace.
   */
  iterationId?: string;
}

/**
 * @interface
 * An interface representing TrainingAPIClientCreateTagOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface TrainingAPIClientCreateTagOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [description] Optional description for the tag.
   */
  description?: string;
  /**
   * @member {Type} [type] Optional type for the tag. Possible values include:
   * 'Regular', 'Negative'
   */
  type?: Type;
}

/**
 * Defines values for DomainType.
 * Possible values include: 'Classification', 'ObjectDetection'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: DomainType = <DomainType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum DomainType {
  Classification = 'Classification',
  ObjectDetection = 'ObjectDetection',
}

/**
 * Defines values for ImageCreateStatus.
 * Possible values include: 'OK', 'OKDuplicate', 'ErrorSource',
 * 'ErrorImageFormat', 'ErrorImageSize', 'ErrorStorage', 'ErrorLimitExceed',
 * 'ErrorTagLimitExceed', 'ErrorRegionLimitExceed', 'ErrorUnknown',
 * 'ErrorNegativeAndRegularTagOnSameImage'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ImageCreateStatus =
 * <ImageCreateStatus>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ImageCreateStatus {
  OK = 'OK',
  OKDuplicate = 'OKDuplicate',
  ErrorSource = 'ErrorSource',
  ErrorImageFormat = 'ErrorImageFormat',
  ErrorImageSize = 'ErrorImageSize',
  ErrorStorage = 'ErrorStorage',
  ErrorLimitExceed = 'ErrorLimitExceed',
  ErrorTagLimitExceed = 'ErrorTagLimitExceed',
  ErrorRegionLimitExceed = 'ErrorRegionLimitExceed',
  ErrorUnknown = 'ErrorUnknown',
  ErrorNegativeAndRegularTagOnSameImage = 'ErrorNegativeAndRegularTagOnSameImage',
}

/**
 * Defines values for OrderBy.
 * Possible values include: 'Newest', 'Oldest', 'Suggested'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OrderBy = <OrderBy>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum OrderBy {
  Newest = 'Newest',
  Oldest = 'Oldest',
  Suggested = 'Suggested',
}

/**
 * Defines values for Classifier.
 * Possible values include: 'Multiclass', 'Multilabel'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Classifier = <Classifier>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Classifier {
  Multiclass = 'Multiclass',
  Multilabel = 'Multilabel',
}

/**
 * Defines values for ExportPlatformModel.
 * Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExportPlatformModel =
 * <ExportPlatformModel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ExportPlatformModel {
  CoreML = 'CoreML',
  TensorFlow = 'TensorFlow',
  DockerFile = 'DockerFile',
  ONNX = 'ONNX',
}

/**
 * Defines values for ExportStatusModel.
 * Possible values include: 'Exporting', 'Failed', 'Done'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExportStatusModel =
 * <ExportStatusModel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ExportStatusModel {
  Exporting = 'Exporting',
  Failed = 'Failed',
  Done = 'Done',
}

/**
 * Defines values for ExportFlavorModel.
 * Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ExportFlavorModel =
 * <ExportFlavorModel>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ExportFlavorModel {
  Linux = 'Linux',
  Windows = 'Windows',
  ONNX10 = 'ONNX10',
  ONNX12 = 'ONNX12',
}

/**
 * Defines values for TagType.
 * Possible values include: 'Regular', 'Negative'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: TagType = <TagType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum TagType {
  Regular = 'Regular',
  Negative = 'Negative',
}

/**
 * Defines values for OrderBy1.
 * Possible values include: 'Newest', 'Oldest'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OrderBy1 = <OrderBy1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum OrderBy1 {
  Newest = 'Newest',
  Oldest = 'Oldest',
}

/**
 * Defines values for OrderBy2.
 * Possible values include: 'Newest', 'Oldest'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OrderBy2 = <OrderBy2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum OrderBy2 {
  Newest = 'Newest',
  Oldest = 'Oldest',
}

/**
 * Defines values for OrderBy3.
 * Possible values include: 'Newest', 'Oldest'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: OrderBy3 = <OrderBy3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum OrderBy3 {
  Newest = 'Newest',
  Oldest = 'Oldest',
}

/**
 * Defines values for ClassificationType.
 * Possible values include: 'Multiclass', 'Multilabel'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: ClassificationType =
 * <ClassificationType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum ClassificationType {
  Multiclass = 'Multiclass',
  Multilabel = 'Multilabel',
}

/**
 * Defines values for Flavor.
 * Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Flavor = <Flavor>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Flavor {
  Linux = 'Linux',
  Windows = 'Windows',
  ONNX10 = 'ONNX10',
  ONNX12 = 'ONNX12',
}

/**
 * Defines values for Type.
 * Possible values include: 'Regular', 'Negative'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type {
  Regular = 'Regular',
  Negative = 'Negative',
}

/**
 * Defines values for Platform.
 * Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Platform = <Platform>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Platform {
  CoreML = 'CoreML',
  TensorFlow = 'TensorFlow',
  DockerFile = 'DockerFile',
  ONNX = 'ONNX',
}

/**
 * Contains response data for the getDomains operation.
 */
export type GetDomainsResponse = Array<Domain> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain[];
    };
};

/**
 * Contains response data for the getDomain operation.
 */
export type GetDomainResponse = Domain & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Domain;
    };
};

/**
 * Contains response data for the getTaggedImageCount operation.
 */
export type GetTaggedImageCountResponse = {
  /**
   * The parsed response body.
   */
  body: number;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: number;
    };
};

/**
 * Contains response data for the getUntaggedImageCount operation.
 */
export type GetUntaggedImageCountResponse = {
  /**
   * The parsed response body.
   */
  body: number;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: number;
    };
};

/**
 * Contains response data for the createImageTags operation.
 */
export type CreateImageTagsResponse = ImageTagCreateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageTagCreateSummary;
    };
};

/**
 * Contains response data for the createImageRegions operation.
 */
export type CreateImageRegionsResponse = ImageRegionCreateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageRegionCreateSummary;
    };
};

/**
 * Contains response data for the getTaggedImages operation.
 */
export type GetTaggedImagesResponse = Array<Image> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Image[];
    };
};

/**
 * Contains response data for the getUntaggedImages operation.
 */
export type GetUntaggedImagesResponse = Array<Image> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Image[];
    };
};

/**
 * Contains response data for the getImagesByIds operation.
 */
export type GetImagesByIdsResponse = Array<Image> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Image[];
    };
};

/**
 * Contains response data for the createImagesFromData operation.
 */
export type CreateImagesFromDataResponse = ImageCreateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageCreateSummary;
    };
};

/**
 * Contains response data for the createImagesFromFiles operation.
 */
export type CreateImagesFromFilesResponse = ImageCreateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageCreateSummary;
    };
};

/**
 * Contains response data for the createImagesFromUrls operation.
 */
export type CreateImagesFromUrlsResponse = ImageCreateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageCreateSummary;
    };
};

/**
 * Contains response data for the createImagesFromPredictions operation.
 */
export type CreateImagesFromPredictionsResponse = ImageCreateSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageCreateSummary;
    };
};

/**
 * Contains response data for the getImageRegionProposals operation.
 */
export type GetImageRegionProposalsResponse = ImageRegionProposal & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageRegionProposal;
    };
};

/**
 * Contains response data for the quickTestImageUrl operation.
 */
export type QuickTestImageUrlResponse = ImagePrediction & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImagePrediction;
    };
};

/**
 * Contains response data for the quickTestImage operation.
 */
export type QuickTestImageResponse = ImagePrediction & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImagePrediction;
    };
};

/**
 * Contains response data for the queryPredictions operation.
 */
export type QueryPredictionsResponse = PredictionQueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionQueryResult;
    };
};

/**
 * Contains response data for the getIterationPerformance operation.
 */
export type GetIterationPerformanceResponse = IterationPerformance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IterationPerformance;
    };
};

/**
 * Contains response data for the getImagePerformances operation.
 */
export type GetImagePerformancesResponse = Array<ImagePerformance> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImagePerformance[];
    };
};

/**
 * Contains response data for the getImagePerformanceCount operation.
 */
export type GetImagePerformanceCountResponse = {
  /**
   * The parsed response body.
   */
  body: number;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: number;
    };
};

/**
 * Contains response data for the getProjects operation.
 */
export type GetProjectsResponse = Array<Project> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project[];
    };
};

/**
 * Contains response data for the createProject operation.
 */
export type CreateProjectResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the getProject operation.
 */
export type GetProjectResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the updateProject operation.
 */
export type UpdateProjectResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the getIterations operation.
 */
export type GetIterationsResponse = Array<Iteration> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Iteration[];
    };
};

/**
 * Contains response data for the getIteration operation.
 */
export type GetIterationResponse = Iteration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Iteration;
    };
};

/**
 * Contains response data for the updateIteration operation.
 */
export type UpdateIterationResponse = Iteration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Iteration;
    };
};

/**
 * Contains response data for the trainProject operation.
 */
export type TrainProjectResponse = Iteration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Iteration;
    };
};

/**
 * Contains response data for the getExports operation.
 */
export type GetExportsResponse = Array<ExportModel> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportModel[];
    };
};

/**
 * Contains response data for the exportIteration operation.
 */
export type ExportIterationResponse = ExportModel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportModel;
    };
};

/**
 * Contains response data for the getTag operation.
 */
export type GetTagResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};

/**
 * Contains response data for the updateTag operation.
 */
export type UpdateTagResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};

/**
 * Contains response data for the getTags operation.
 */
export type GetTagsResponse = Array<Tag> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag[];
    };
};

/**
 * Contains response data for the createTag operation.
 */
export type CreateTagResponse = Tag & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Tag;
    };
};
