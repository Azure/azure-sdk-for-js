/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesFace = {}),global.msRest));
}(this, (function (exports,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /**
     * Defines values for Gender.
     * Possible values include: 'male', 'female', 'genderless'
     * @readonly
     * @enum {string}
     */
    var Gender;
    (function (Gender) {
        Gender["Male"] = "male";
        Gender["Female"] = "female";
        Gender["Genderless"] = "genderless";
    })(Gender || (Gender = {}));
    /**
     * Defines values for GlassesType.
     * Possible values include: 'noGlasses', 'readingGlasses', 'sunglasses',
     * 'swimmingGoggles'
     * @readonly
     * @enum {string}
     */
    var GlassesType;
    (function (GlassesType) {
        GlassesType["NoGlasses"] = "noGlasses";
        GlassesType["ReadingGlasses"] = "readingGlasses";
        GlassesType["Sunglasses"] = "sunglasses";
        GlassesType["SwimmingGoggles"] = "swimmingGoggles";
    })(GlassesType || (GlassesType = {}));
    /**
     * Defines values for HairColorType.
     * Possible values include: 'unknown', 'white', 'gray', 'blond', 'brown',
     * 'red', 'black', 'other'
     * @readonly
     * @enum {string}
     */
    var HairColorType;
    (function (HairColorType) {
        HairColorType["Unknown"] = "unknown";
        HairColorType["White"] = "white";
        HairColorType["Gray"] = "gray";
        HairColorType["Blond"] = "blond";
        HairColorType["Brown"] = "brown";
        HairColorType["Red"] = "red";
        HairColorType["Black"] = "black";
        HairColorType["Other"] = "other";
    })(HairColorType || (HairColorType = {}));
    /**
     * Defines values for AccessoryType.
     * Possible values include: 'headWear', 'glasses', 'mask'
     * @readonly
     * @enum {string}
     */
    var AccessoryType;
    (function (AccessoryType) {
        AccessoryType["HeadWear"] = "headWear";
        AccessoryType["Glasses"] = "glasses";
        AccessoryType["Mask"] = "mask";
    })(AccessoryType || (AccessoryType = {}));
    /**
     * Defines values for BlurLevel.
     * Possible values include: 'Low', 'Medium', 'High'
     * @readonly
     * @enum {string}
     */
    var BlurLevel;
    (function (BlurLevel) {
        BlurLevel["Low"] = "Low";
        BlurLevel["Medium"] = "Medium";
        BlurLevel["High"] = "High";
    })(BlurLevel || (BlurLevel = {}));
    /**
     * Defines values for ExposureLevel.
     * Possible values include: 'UnderExposure', 'GoodExposure', 'OverExposure'
     * @readonly
     * @enum {string}
     */
    var ExposureLevel;
    (function (ExposureLevel) {
        ExposureLevel["UnderExposure"] = "UnderExposure";
        ExposureLevel["GoodExposure"] = "GoodExposure";
        ExposureLevel["OverExposure"] = "OverExposure";
    })(ExposureLevel || (ExposureLevel = {}));
    /**
     * Defines values for NoiseLevel.
     * Possible values include: 'Low', 'Medium', 'High'
     * @readonly
     * @enum {string}
     */
    var NoiseLevel;
    (function (NoiseLevel) {
        NoiseLevel["Low"] = "Low";
        NoiseLevel["Medium"] = "Medium";
        NoiseLevel["High"] = "High";
    })(NoiseLevel || (NoiseLevel = {}));
    /**
     * Defines values for FindSimilarMatchMode.
     * Possible values include: 'matchPerson', 'matchFace'
     * @readonly
     * @enum {string}
     */
    var FindSimilarMatchMode;
    (function (FindSimilarMatchMode) {
        FindSimilarMatchMode["MatchPerson"] = "matchPerson";
        FindSimilarMatchMode["MatchFace"] = "matchFace";
    })(FindSimilarMatchMode || (FindSimilarMatchMode = {}));
    /**
     * Defines values for TrainingStatusType.
     * Possible values include: 'nonstarted', 'running', 'succeeded', 'failed'
     * @readonly
     * @enum {string}
     */
    var TrainingStatusType;
    (function (TrainingStatusType) {
        TrainingStatusType["Nonstarted"] = "nonstarted";
        TrainingStatusType["Running"] = "running";
        TrainingStatusType["Succeeded"] = "succeeded";
        TrainingStatusType["Failed"] = "failed";
    })(TrainingStatusType || (TrainingStatusType = {}));
    /**
     * Defines values for FaceAttributeType.
     * Possible values include: 'age', 'gender', 'headPose', 'smile', 'facialHair',
     * 'glasses', 'emotion', 'hair', 'makeup', 'occlusion', 'accessories', 'blur',
     * 'exposure', 'noise'
     * @readonly
     * @enum {string}
     */
    var FaceAttributeType;
    (function (FaceAttributeType) {
        FaceAttributeType["Age"] = "age";
        FaceAttributeType["Gender"] = "gender";
        FaceAttributeType["HeadPose"] = "headPose";
        FaceAttributeType["Smile"] = "smile";
        FaceAttributeType["FacialHair"] = "facialHair";
        FaceAttributeType["Glasses"] = "glasses";
        FaceAttributeType["Emotion"] = "emotion";
        FaceAttributeType["Hair"] = "hair";
        FaceAttributeType["Makeup"] = "makeup";
        FaceAttributeType["Occlusion"] = "occlusion";
        FaceAttributeType["Accessories"] = "accessories";
        FaceAttributeType["Blur"] = "blur";
        FaceAttributeType["Exposure"] = "exposure";
        FaceAttributeType["Noise"] = "noise";
    })(FaceAttributeType || (FaceAttributeType = {}));

    var index = /*#__PURE__*/Object.freeze({
        get Gender () { return Gender; },
        get GlassesType () { return GlassesType; },
        get HairColorType () { return HairColorType; },
        get AccessoryType () { return AccessoryType; },
        get BlurLevel () { return BlurLevel; },
        get ExposureLevel () { return ExposureLevel; },
        get NoiseLevel () { return NoiseLevel; },
        get FindSimilarMatchMode () { return FindSimilarMatchMode; },
        get TrainingStatusType () { return TrainingStatusType; },
        get FaceAttributeType () { return FaceAttributeType; }
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var APIError = {
        serializedName: "APIError",
        type: {
            name: "Composite",
            className: "APIError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var FaceRectangle = {
        serializedName: "FaceRectangle",
        type: {
            name: "Composite",
            className: "FaceRectangle",
            modelProperties: {
                width: {
                    required: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                left: {
                    required: true,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Coordinate = {
        serializedName: "Coordinate",
        type: {
            name: "Composite",
            className: "Coordinate",
            modelProperties: {
                x: {
                    required: true,
                    serializedName: "x",
                    type: {
                        name: "Number"
                    }
                },
                y: {
                    required: true,
                    serializedName: "y",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FaceLandmarks = {
        serializedName: "FaceLandmarks",
        type: {
            name: "Composite",
            className: "FaceLandmarks",
            modelProperties: {
                pupilLeft: {
                    serializedName: "pupilLeft",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                pupilRight: {
                    serializedName: "pupilRight",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseTip: {
                    serializedName: "noseTip",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                mouthLeft: {
                    serializedName: "mouthLeft",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                mouthRight: {
                    serializedName: "mouthRight",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowLeftOuter: {
                    serializedName: "eyebrowLeftOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowLeftInner: {
                    serializedName: "eyebrowLeftInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftOuter: {
                    serializedName: "eyeLeftOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftTop: {
                    serializedName: "eyeLeftTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftBottom: {
                    serializedName: "eyeLeftBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeLeftInner: {
                    serializedName: "eyeLeftInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowRightInner: {
                    serializedName: "eyebrowRightInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyebrowRightOuter: {
                    serializedName: "eyebrowRightOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightInner: {
                    serializedName: "eyeRightInner",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightTop: {
                    serializedName: "eyeRightTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightBottom: {
                    serializedName: "eyeRightBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                eyeRightOuter: {
                    serializedName: "eyeRightOuter",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRootLeft: {
                    serializedName: "noseRootLeft",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRootRight: {
                    serializedName: "noseRootRight",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseLeftAlarTop: {
                    serializedName: "noseLeftAlarTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRightAlarTop: {
                    serializedName: "noseRightAlarTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseLeftAlarOutTip: {
                    serializedName: "noseLeftAlarOutTip",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                noseRightAlarOutTip: {
                    serializedName: "noseRightAlarOutTip",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                upperLipTop: {
                    serializedName: "upperLipTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                upperLipBottom: {
                    serializedName: "upperLipBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                underLipTop: {
                    serializedName: "underLipTop",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                },
                underLipBottom: {
                    serializedName: "underLipBottom",
                    type: {
                        name: "Composite",
                        className: "Coordinate"
                    }
                }
            }
        }
    };
    var FacialHair = {
        serializedName: "FacialHair",
        type: {
            name: "Composite",
            className: "FacialHair",
            modelProperties: {
                moustache: {
                    nullable: false,
                    serializedName: "moustache",
                    type: {
                        name: "Number"
                    }
                },
                beard: {
                    nullable: false,
                    serializedName: "beard",
                    type: {
                        name: "Number"
                    }
                },
                sideburns: {
                    nullable: false,
                    serializedName: "sideburns",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HeadPose = {
        serializedName: "HeadPose",
        type: {
            name: "Composite",
            className: "HeadPose",
            modelProperties: {
                roll: {
                    nullable: false,
                    serializedName: "roll",
                    type: {
                        name: "Number"
                    }
                },
                yaw: {
                    nullable: false,
                    serializedName: "yaw",
                    type: {
                        name: "Number"
                    }
                },
                pitch: {
                    nullable: false,
                    serializedName: "pitch",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Emotion = {
        serializedName: "Emotion",
        type: {
            name: "Composite",
            className: "Emotion",
            modelProperties: {
                anger: {
                    nullable: false,
                    serializedName: "anger",
                    type: {
                        name: "Number"
                    }
                },
                contempt: {
                    nullable: false,
                    serializedName: "contempt",
                    type: {
                        name: "Number"
                    }
                },
                disgust: {
                    nullable: false,
                    serializedName: "disgust",
                    type: {
                        name: "Number"
                    }
                },
                fear: {
                    nullable: false,
                    serializedName: "fear",
                    type: {
                        name: "Number"
                    }
                },
                happiness: {
                    nullable: false,
                    serializedName: "happiness",
                    type: {
                        name: "Number"
                    }
                },
                neutral: {
                    nullable: false,
                    serializedName: "neutral",
                    type: {
                        name: "Number"
                    }
                },
                sadness: {
                    nullable: false,
                    serializedName: "sadness",
                    type: {
                        name: "Number"
                    }
                },
                surprise: {
                    nullable: false,
                    serializedName: "surprise",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var HairColor = {
        serializedName: "HairColor",
        type: {
            name: "Composite",
            className: "HairColor",
            modelProperties: {
                color: {
                    nullable: false,
                    serializedName: "color",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "white",
                            "gray",
                            "blond",
                            "brown",
                            "red",
                            "black",
                            "other"
                        ]
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Hair = {
        serializedName: "Hair",
        type: {
            name: "Composite",
            className: "Hair",
            modelProperties: {
                bald: {
                    nullable: false,
                    serializedName: "bald",
                    type: {
                        name: "Number"
                    }
                },
                invisible: {
                    nullable: false,
                    serializedName: "invisible",
                    type: {
                        name: "Boolean"
                    }
                },
                hairColor: {
                    serializedName: "hairColor",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HairColor"
                            }
                        }
                    }
                }
            }
        }
    };
    var Makeup = {
        serializedName: "Makeup",
        type: {
            name: "Composite",
            className: "Makeup",
            modelProperties: {
                eyeMakeup: {
                    nullable: false,
                    serializedName: "eyeMakeup",
                    type: {
                        name: "Boolean"
                    }
                },
                lipMakeup: {
                    nullable: false,
                    serializedName: "lipMakeup",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Occlusion = {
        serializedName: "Occlusion",
        type: {
            name: "Composite",
            className: "Occlusion",
            modelProperties: {
                foreheadOccluded: {
                    nullable: false,
                    serializedName: "foreheadOccluded",
                    type: {
                        name: "Boolean"
                    }
                },
                eyeOccluded: {
                    nullable: false,
                    serializedName: "eyeOccluded",
                    type: {
                        name: "Boolean"
                    }
                },
                mouthOccluded: {
                    nullable: false,
                    serializedName: "mouthOccluded",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Accessory = {
        serializedName: "Accessory",
        type: {
            name: "Composite",
            className: "Accessory",
            modelProperties: {
                type: {
                    nullable: false,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "headWear",
                            "glasses",
                            "mask"
                        ]
                    }
                },
                confidence: {
                    nullable: false,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Blur = {
        serializedName: "Blur",
        type: {
            name: "Composite",
            className: "Blur",
            modelProperties: {
                blurLevel: {
                    nullable: false,
                    serializedName: "blurLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                },
                value: {
                    nullable: false,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Exposure = {
        serializedName: "Exposure",
        type: {
            name: "Composite",
            className: "Exposure",
            modelProperties: {
                exposureLevel: {
                    nullable: false,
                    serializedName: "exposureLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "UnderExposure",
                            "GoodExposure",
                            "OverExposure"
                        ]
                    }
                },
                value: {
                    nullable: false,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Noise = {
        serializedName: "Noise",
        type: {
            name: "Composite",
            className: "Noise",
            modelProperties: {
                noiseLevel: {
                    nullable: false,
                    serializedName: "noiseLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                },
                value: {
                    nullable: false,
                    serializedName: "value",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FaceAttributes = {
        serializedName: "FaceAttributes",
        type: {
            name: "Composite",
            className: "FaceAttributes",
            modelProperties: {
                age: {
                    serializedName: "age",
                    type: {
                        name: "Number"
                    }
                },
                gender: {
                    serializedName: "gender",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "male",
                            "female",
                            "genderless"
                        ]
                    }
                },
                smile: {
                    serializedName: "smile",
                    type: {
                        name: "Number"
                    }
                },
                facialHair: {
                    serializedName: "facialHair",
                    type: {
                        name: "Composite",
                        className: "FacialHair"
                    }
                },
                glasses: {
                    serializedName: "glasses",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "noGlasses",
                            "readingGlasses",
                            "sunglasses",
                            "swimmingGoggles"
                        ]
                    }
                },
                headPose: {
                    serializedName: "headPose",
                    type: {
                        name: "Composite",
                        className: "HeadPose"
                    }
                },
                emotion: {
                    serializedName: "emotion",
                    type: {
                        name: "Composite",
                        className: "Emotion"
                    }
                },
                hair: {
                    serializedName: "hair",
                    type: {
                        name: "Composite",
                        className: "Hair"
                    }
                },
                makeup: {
                    serializedName: "makeup",
                    type: {
                        name: "Composite",
                        className: "Makeup"
                    }
                },
                occlusion: {
                    serializedName: "occlusion",
                    type: {
                        name: "Composite",
                        className: "Occlusion"
                    }
                },
                accessories: {
                    serializedName: "accessories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Accessory"
                            }
                        }
                    }
                },
                blur: {
                    serializedName: "blur",
                    type: {
                        name: "Composite",
                        className: "Blur"
                    }
                },
                exposure: {
                    serializedName: "exposure",
                    type: {
                        name: "Composite",
                        className: "Exposure"
                    }
                },
                noise: {
                    serializedName: "noise",
                    type: {
                        name: "Composite",
                        className: "Noise"
                    }
                }
            }
        }
    };
    var DetectedFace = {
        serializedName: "DetectedFace",
        type: {
            name: "Composite",
            className: "DetectedFace",
            modelProperties: {
                faceId: {
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                faceRectangle: {
                    required: true,
                    serializedName: "faceRectangle",
                    type: {
                        name: "Composite",
                        className: "FaceRectangle"
                    }
                },
                faceLandmarks: {
                    serializedName: "faceLandmarks",
                    type: {
                        name: "Composite",
                        className: "FaceLandmarks"
                    }
                },
                faceAttributes: {
                    serializedName: "faceAttributes",
                    type: {
                        name: "Composite",
                        className: "FaceAttributes"
                    }
                }
            }
        }
    };
    var FindSimilarRequest = {
        serializedName: "FindSimilarRequest",
        type: {
            name: "Composite",
            className: "FindSimilarRequest",
            modelProperties: {
                faceId: {
                    required: true,
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                faceListId: {
                    serializedName: "faceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                largeFaceListId: {
                    serializedName: "largeFaceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                faceIds: {
                    serializedName: "faceIds",
                    constraints: {
                        MaxItems: 1000
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                maxNumOfCandidatesReturned: {
                    serializedName: "maxNumOfCandidatesReturned",
                    defaultValue: 20,
                    constraints: {
                        InclusiveMaximum: 1000,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                mode: {
                    nullable: false,
                    serializedName: "mode",
                    defaultValue: 'matchPerson',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "matchPerson",
                            "matchFace"
                        ]
                    }
                }
            }
        }
    };
    var SimilarFace = {
        serializedName: "SimilarFace",
        type: {
            name: "Composite",
            className: "SimilarFace",
            modelProperties: {
                faceId: {
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                persistedFaceId: {
                    serializedName: "persistedFaceId",
                    type: {
                        name: "Uuid"
                    }
                },
                confidence: {
                    required: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var GroupRequest = {
        serializedName: "GroupRequest",
        type: {
            name: "Composite",
            className: "GroupRequest",
            modelProperties: {
                faceIds: {
                    required: true,
                    serializedName: "faceIds",
                    constraints: {
                        MaxItems: 1000
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                }
            }
        }
    };
    var GroupResult = {
        serializedName: "GroupResult",
        type: {
            name: "Composite",
            className: "GroupResult",
            modelProperties: {
                groups: {
                    required: true,
                    serializedName: "groups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Uuid"
                                    }
                                }
                            }
                        }
                    }
                },
                messyGroup: {
                    serializedName: "messyGroup",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                }
            }
        }
    };
    var IdentifyRequest = {
        serializedName: "IdentifyRequest",
        type: {
            name: "Composite",
            className: "IdentifyRequest",
            modelProperties: {
                faceIds: {
                    required: true,
                    serializedName: "faceIds",
                    constraints: {
                        MaxItems: 10
                    },
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                personGroupId: {
                    serializedName: "personGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                largePersonGroupId: {
                    serializedName: "largePersonGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                maxNumOfCandidatesReturned: {
                    serializedName: "maxNumOfCandidatesReturned",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 5,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                confidenceThreshold: {
                    serializedName: "confidenceThreshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IdentifyCandidate = {
        serializedName: "IdentifyCandidate",
        type: {
            name: "Composite",
            className: "IdentifyCandidate",
            modelProperties: {
                personId: {
                    required: true,
                    serializedName: "personId",
                    type: {
                        name: "Uuid"
                    }
                },
                confidence: {
                    required: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IdentifyResult = {
        serializedName: "IdentifyResult",
        type: {
            name: "Composite",
            className: "IdentifyResult",
            modelProperties: {
                faceId: {
                    required: true,
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                candidates: {
                    required: true,
                    serializedName: "candidates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IdentifyCandidate"
                            }
                        }
                    }
                }
            }
        }
    };
    var VerifyFaceToPersonRequest = {
        serializedName: "VerifyFaceToPersonRequest",
        type: {
            name: "Composite",
            className: "VerifyFaceToPersonRequest",
            modelProperties: {
                faceId: {
                    required: true,
                    serializedName: "faceId",
                    type: {
                        name: "Uuid"
                    }
                },
                personGroupId: {
                    serializedName: "personGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                largePersonGroupId: {
                    serializedName: "largePersonGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                personId: {
                    required: true,
                    serializedName: "personId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var VerifyFaceToFaceRequest = {
        serializedName: "VerifyFaceToFaceRequest",
        type: {
            name: "Composite",
            className: "VerifyFaceToFaceRequest",
            modelProperties: {
                faceId1: {
                    required: true,
                    serializedName: "faceId1",
                    type: {
                        name: "Uuid"
                    }
                },
                faceId2: {
                    required: true,
                    serializedName: "faceId2",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var VerifyResult = {
        serializedName: "VerifyResult",
        type: {
            name: "Composite",
            className: "VerifyResult",
            modelProperties: {
                isIdentical: {
                    required: true,
                    serializedName: "isIdentical",
                    type: {
                        name: "Boolean"
                    }
                },
                confidence: {
                    required: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PersistedFace = {
        serializedName: "PersistedFace",
        type: {
            name: "Composite",
            className: "PersistedFace",
            modelProperties: {
                persistedFaceId: {
                    required: true,
                    serializedName: "persistedFaceId",
                    type: {
                        name: "Uuid"
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 1024
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameAndUserDataContract = {
        serializedName: "NameAndUserDataContract",
        type: {
            name: "Composite",
            className: "NameAndUserDataContract",
            modelProperties: {
                name: {
                    serializedName: "name",
                    constraints: {
                        MaxLength: 128
                    },
                    type: {
                        name: "String"
                    }
                },
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 16384
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FaceList = {
        serializedName: "FaceList",
        type: {
            name: "Composite",
            className: "FaceList",
            modelProperties: __assign({}, NameAndUserDataContract.type.modelProperties, { faceListId: {
                    required: true,
                    serializedName: "faceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                }, persistedFaces: {
                    serializedName: "persistedFaces",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PersistedFace"
                            }
                        }
                    }
                } })
        }
    };
    var PersonGroup = {
        serializedName: "PersonGroup",
        type: {
            name: "Composite",
            className: "PersonGroup",
            modelProperties: __assign({}, NameAndUserDataContract.type.modelProperties, { personGroupId: {
                    required: true,
                    serializedName: "personGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Person = {
        serializedName: "Person",
        type: {
            name: "Composite",
            className: "Person",
            modelProperties: __assign({}, NameAndUserDataContract.type.modelProperties, { personId: {
                    required: true,
                    serializedName: "personId",
                    type: {
                        name: "Uuid"
                    }
                }, persistedFaceIds: {
                    serializedName: "persistedFaceIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                } })
        }
    };
    var LargeFaceList = {
        serializedName: "LargeFaceList",
        type: {
            name: "Composite",
            className: "LargeFaceList",
            modelProperties: __assign({}, NameAndUserDataContract.type.modelProperties, { largeFaceListId: {
                    required: true,
                    serializedName: "largeFaceListId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LargePersonGroup = {
        serializedName: "LargePersonGroup",
        type: {
            name: "Composite",
            className: "LargePersonGroup",
            modelProperties: __assign({}, NameAndUserDataContract.type.modelProperties, { largePersonGroupId: {
                    required: true,
                    serializedName: "largePersonGroupId",
                    constraints: {
                        MaxLength: 64,
                        Pattern: /^[a-z0-9-_]+$/
                    },
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UpdateFaceRequest = {
        serializedName: "UpdateFaceRequest",
        type: {
            name: "Composite",
            className: "UpdateFaceRequest",
            modelProperties: {
                userData: {
                    serializedName: "userData",
                    constraints: {
                        MaxLength: 1024
                    },
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrainingStatus = {
        serializedName: "TrainingStatus",
        type: {
            name: "Composite",
            className: "TrainingStatus",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "nonstarted",
                            "running",
                            "succeeded",
                            "failed"
                        ]
                    }
                },
                created: {
                    required: true,
                    serializedName: "createdDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastAction: {
                    serializedName: "lastActionDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastSuccessfulTraining: {
                    serializedName: "lastSuccessfulTrainingDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageUrl = {
        serializedName: "ImageUrl",
        type: {
            name: "Composite",
            className: "ImageUrl",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        ErrorModel: ErrorModel,
        APIError: APIError,
        FaceRectangle: FaceRectangle,
        Coordinate: Coordinate,
        FaceLandmarks: FaceLandmarks,
        FacialHair: FacialHair,
        HeadPose: HeadPose,
        Emotion: Emotion,
        HairColor: HairColor,
        Hair: Hair,
        Makeup: Makeup,
        Occlusion: Occlusion,
        Accessory: Accessory,
        Blur: Blur,
        Exposure: Exposure,
        Noise: Noise,
        FaceAttributes: FaceAttributes,
        DetectedFace: DetectedFace,
        FindSimilarRequest: FindSimilarRequest,
        SimilarFace: SimilarFace,
        GroupRequest: GroupRequest,
        GroupResult: GroupResult,
        IdentifyRequest: IdentifyRequest,
        IdentifyCandidate: IdentifyCandidate,
        IdentifyResult: IdentifyResult,
        VerifyFaceToPersonRequest: VerifyFaceToPersonRequest,
        VerifyFaceToFaceRequest: VerifyFaceToFaceRequest,
        VerifyResult: VerifyResult,
        PersistedFace: PersistedFace,
        NameAndUserDataContract: NameAndUserDataContract,
        FaceList: FaceList,
        PersonGroup: PersonGroup,
        Person: Person,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup,
        UpdateFaceRequest: UpdateFaceRequest,
        TrainingStatus: TrainingStatus,
        ImageUrl: ImageUrl
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        FindSimilarRequest: FindSimilarRequest,
        SimilarFace: SimilarFace,
        APIError: APIError,
        ErrorModel: ErrorModel,
        GroupRequest: GroupRequest,
        GroupResult: GroupResult,
        IdentifyRequest: IdentifyRequest,
        IdentifyResult: IdentifyResult,
        IdentifyCandidate: IdentifyCandidate,
        VerifyFaceToFaceRequest: VerifyFaceToFaceRequest,
        VerifyResult: VerifyResult,
        ImageUrl: ImageUrl,
        DetectedFace: DetectedFace,
        FaceRectangle: FaceRectangle,
        FaceLandmarks: FaceLandmarks,
        Coordinate: Coordinate,
        FaceAttributes: FaceAttributes,
        FacialHair: FacialHair,
        HeadPose: HeadPose,
        Emotion: Emotion,
        Hair: Hair,
        HairColor: HairColor,
        Makeup: Makeup,
        Occlusion: Occlusion,
        Accessory: Accessory,
        Blur: Blur,
        Exposure: Exposure,
        Noise: Noise,
        VerifyFaceToPersonRequest: VerifyFaceToPersonRequest
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var faceListId = {
        parameterPath: "faceListId",
        mapper: {
            required: true,
            serializedName: "faceListId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var largeFaceListId = {
        parameterPath: "largeFaceListId",
        mapper: {
            required: true,
            serializedName: "largeFaceListId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var largePersonGroupId = {
        parameterPath: "largePersonGroupId",
        mapper: {
            required: true,
            serializedName: "largePersonGroupId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var persistedFaceId = {
        parameterPath: "persistedFaceId",
        mapper: {
            required: true,
            serializedName: "persistedFaceId",
            type: {
                name: "Uuid"
            }
        }
    };
    var personGroupId = {
        parameterPath: "personGroupId",
        mapper: {
            required: true,
            serializedName: "personGroupId",
            constraints: {
                MaxLength: 64,
                Pattern: /^[a-z0-9-_]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var personId = {
        parameterPath: "personId",
        mapper: {
            required: true,
            serializedName: "personId",
            type: {
                name: "Uuid"
            }
        }
    };
    var returnFaceAttributes = {
        parameterPath: [
            "options",
            "returnFaceAttributes"
        ],
        mapper: {
            serializedName: "returnFaceAttributes",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "age",
                            "gender",
                            "headPose",
                            "smile",
                            "facialHair",
                            "glasses",
                            "emotion",
                            "hair",
                            "makeup",
                            "occlusion",
                            "accessories",
                            "blur",
                            "exposure",
                            "noise"
                        ]
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var returnFaceId = {
        parameterPath: [
            "options",
            "returnFaceId"
        ],
        mapper: {
            serializedName: "returnFaceId",
            defaultValue: true,
            type: {
                name: "Boolean"
            }
        }
    };
    var returnFaceLandmarks = {
        parameterPath: [
            "options",
            "returnFaceLandmarks"
        ],
        mapper: {
            serializedName: "returnFaceLandmarks",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var start0 = {
        parameterPath: [
            "options",
            "start"
        ],
        mapper: {
            serializedName: "start",
            type: {
                name: "String"
            }
        }
    };
    var start1 = {
        parameterPath: [
            "options",
            "start"
        ],
        mapper: {
            serializedName: "start",
            constraints: {
                MaxLength: 64
            },
            type: {
                name: "String"
            }
        }
    };
    var targetFace = {
        parameterPath: [
            "options",
            "targetFace"
        ],
        mapper: {
            serializedName: "targetFace",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Number"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var top0 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "top",
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var top1 = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "top",
            defaultValue: 1000,
            constraints: {
                InclusiveMaximum: 1000,
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var userData = {
        parameterPath: [
            "options",
            "userData"
        ],
        mapper: {
            serializedName: "userData",
            constraints: {
                MaxLength: 1024
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Face. */
    var Face = /** @class */ (function () {
        /**
         * Create a Face.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function Face(client) {
            this.client = client;
        }
        Face.prototype.findSimilar = function (faceId, options, callback) {
            return this.client.sendOperationRequest({
                faceId: faceId,
                options: options
            }, findSimilarOperationSpec, callback);
        };
        Face.prototype.group = function (faceIds, options, callback) {
            return this.client.sendOperationRequest({
                faceIds: faceIds,
                options: options
            }, groupOperationSpec, callback);
        };
        Face.prototype.identify = function (faceIds, options, callback) {
            return this.client.sendOperationRequest({
                faceIds: faceIds,
                options: options
            }, identifyOperationSpec, callback);
        };
        Face.prototype.verifyFaceToFace = function (faceId1, faceId2, options, callback) {
            return this.client.sendOperationRequest({
                faceId1: faceId1,
                faceId2: faceId2,
                options: options
            }, verifyFaceToFaceOperationSpec, callback);
        };
        Face.prototype.detectWithUrl = function (url, options, callback) {
            return this.client.sendOperationRequest({
                url: url,
                options: options
            }, detectWithUrlOperationSpec, callback);
        };
        Face.prototype.verifyFaceToPerson = function (faceId, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                faceId: faceId,
                personId: personId$$1,
                options: options
            }, verifyFaceToPersonOperationSpec, callback);
        };
        Face.prototype.detectWithStream = function (image, options, callback) {
            return this.client.sendOperationRequest({
                image: image,
                options: options
            }, detectWithStreamOperationSpec, callback);
        };
        return Face;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var findSimilarOperationSpec = {
        httpMethod: "POST",
        path: "findsimilars",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceId: "faceId",
                faceListId: [
                    "options",
                    "faceListId"
                ],
                largeFaceListId: [
                    "options",
                    "largeFaceListId"
                ],
                faceIds: [
                    "options",
                    "faceIds"
                ],
                maxNumOfCandidatesReturned: [
                    "options",
                    "maxNumOfCandidatesReturned"
                ],
                mode: [
                    "options",
                    "mode"
                ]
            },
            mapper: __assign({}, FindSimilarRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SimilarFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var groupOperationSpec = {
        httpMethod: "POST",
        path: "group",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceIds: "faceIds"
            },
            mapper: __assign({}, GroupRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: GroupResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var identifyOperationSpec = {
        httpMethod: "POST",
        path: "identify",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceIds: "faceIds",
                personGroupId: [
                    "options",
                    "personGroupId"
                ],
                largePersonGroupId: [
                    "options",
                    "largePersonGroupId"
                ],
                maxNumOfCandidatesReturned: [
                    "options",
                    "maxNumOfCandidatesReturned"
                ],
                confidenceThreshold: [
                    "options",
                    "confidenceThreshold"
                ]
            },
            mapper: __assign({}, IdentifyRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IdentifyResult"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var verifyFaceToFaceOperationSpec = {
        httpMethod: "POST",
        path: "verify",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceId1: "faceId1",
                faceId2: "faceId2"
            },
            mapper: __assign({}, VerifyFaceToFaceRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VerifyResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var detectWithUrlOperationSpec = {
        httpMethod: "POST",
        path: "detect",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            returnFaceId,
            returnFaceLandmarks,
            returnFaceAttributes
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var verifyFaceToPersonOperationSpec = {
        httpMethod: "POST",
        path: "verify",
        urlParameters: [
            endpoint
        ],
        requestBody: {
            parameterPath: {
                faceId: "faceId",
                personGroupId: [
                    "options",
                    "personGroupId"
                ],
                largePersonGroupId: [
                    "options",
                    "largePersonGroupId"
                ],
                personId: "personId"
            },
            mapper: __assign({}, VerifyFaceToPersonRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: VerifyResult
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };
    var detectWithStreamOperationSpec = {
        httpMethod: "POST",
        path: "detect",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            returnFaceId,
            returnFaceLandmarks,
            returnFaceAttributes
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        NameAndUserDataContract: NameAndUserDataContract,
        Person: Person,
        APIError: APIError,
        ErrorModel: ErrorModel,
        PersistedFace: PersistedFace,
        UpdateFaceRequest: UpdateFaceRequest,
        ImageUrl: ImageUrl,
        FaceList: FaceList,
        PersonGroup: PersonGroup,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PersonGroupPerson. */
    var PersonGroupPerson = /** @class */ (function () {
        /**
         * Create a PersonGroupPerson.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function PersonGroupPerson(client) {
            this.client = client;
        }
        PersonGroupPerson.prototype.create = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, createOperationSpec, callback);
        };
        PersonGroupPerson.prototype.list = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, listOperationSpec, callback);
        };
        PersonGroupPerson.prototype.deleteMethod = function (personGroupId$$1, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        PersonGroupPerson.prototype.get = function (personGroupId$$1, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                options: options
            }, getOperationSpec, callback);
        };
        PersonGroupPerson.prototype.update = function (personGroupId$$1, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        PersonGroupPerson.prototype.deleteFace = function (personGroupId$$1, personId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, deleteFaceOperationSpec, callback);
        };
        PersonGroupPerson.prototype.getFace = function (personGroupId$$1, personId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, getFaceOperationSpec, callback);
        };
        PersonGroupPerson.prototype.updateFace = function (personGroupId$$1, personId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, updateFaceOperationSpec, callback);
        };
        PersonGroupPerson.prototype.addFaceFromUrl = function (personGroupId$$1, personId$$1, url, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec, callback);
        };
        PersonGroupPerson.prototype.addFaceFromStream = function (personGroupId$$1, personId$$1, image, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                personId: personId$$1,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec, callback);
        };
        return PersonGroupPerson;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/persons",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/persons",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        queryParameters: [
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Person"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "persongroups/{personGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "persongroups/{personGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var deleteFaceOperationSpec = {
        httpMethod: "DELETE",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var getFaceOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var updateFaceOperationSpec = {
        httpMethod: "PATCH",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            personGroupId,
            personId,
            persistedFaceId
        ],
        requestBody: {
            parameterPath: {
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, UpdateFaceRequest, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var addFaceFromUrlOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };
    var addFaceFromStreamOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            personGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        NameAndUserDataContract: NameAndUserDataContract,
        APIError: APIError,
        ErrorModel: ErrorModel,
        PersonGroup: PersonGroup,
        TrainingStatus: TrainingStatus,
        FaceList: FaceList,
        PersistedFace: PersistedFace,
        Person: Person,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PersonGroupOperations. */
    var PersonGroupOperations = /** @class */ (function () {
        /**
         * Create a PersonGroupOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function PersonGroupOperations(client) {
            this.client = client;
        }
        PersonGroupOperations.prototype.create = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, createOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.deleteMethod = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.get = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.update = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, updateOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.getTrainingStatus = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, getTrainingStatusOperationSpec, callback);
        };
        PersonGroupOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        PersonGroupOperations.prototype.train = function (personGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                personGroupId: personGroupId$$1,
                options: options
            }, trainOperationSpec, callback);
        };
        return PersonGroupOperations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            200: {
                bodyMapper: PersonGroup
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "persongroups/{personGroupId}",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var getTrainingStatusOperationSpec = {
        httpMethod: "GET",
        path: "persongroups/{personGroupId}/training",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            200: {
                bodyMapper: TrainingStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "persongroups",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            start1,
            top1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PersonGroup"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };
    var trainOperationSpec = {
        httpMethod: "POST",
        path: "persongroups/{personGroupId}/train",
        urlParameters: [
            endpoint,
            personGroupId
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        NameAndUserDataContract: NameAndUserDataContract,
        APIError: APIError,
        ErrorModel: ErrorModel,
        FaceList: FaceList,
        PersistedFace: PersistedFace,
        ImageUrl: ImageUrl,
        PersonGroup: PersonGroup,
        Person: Person,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FaceListOperations. */
    var FaceListOperations = /** @class */ (function () {
        /**
         * Create a FaceListOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function FaceListOperations(client) {
            this.client = client;
        }
        FaceListOperations.prototype.create = function (faceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                options: options
            }, createOperationSpec$2, callback);
        };
        FaceListOperations.prototype.get = function (faceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        FaceListOperations.prototype.update = function (faceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                options: options
            }, updateOperationSpec$2, callback);
        };
        FaceListOperations.prototype.deleteMethod = function (faceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        FaceListOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        FaceListOperations.prototype.deleteFace = function (faceListId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, deleteFaceOperationSpec$1, callback);
        };
        FaceListOperations.prototype.addFaceFromUrl = function (faceListId$$1, url, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec$1, callback);
        };
        FaceListOperations.prototype.addFaceFromStream = function (faceListId$$1, image, options, callback) {
            return this.client.sendOperationRequest({
                faceListId: faceListId$$1,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec$1, callback);
        };
        return FaceListOperations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        responses: {
            200: {
                bodyMapper: FaceList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "facelists/{faceListId}",
        urlParameters: [
            endpoint,
            faceListId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "facelists",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FaceList"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var deleteFaceOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "facelists/{faceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            faceListId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var addFaceFromUrlOperationSpec$1 = {
        httpMethod: "POST",
        path: "facelists/{faceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            faceListId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };
    var addFaceFromStreamOperationSpec$1 = {
        httpMethod: "POST",
        path: "facelists/{faceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            faceListId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        NameAndUserDataContract: NameAndUserDataContract,
        Person: Person,
        APIError: APIError,
        ErrorModel: ErrorModel,
        PersistedFace: PersistedFace,
        UpdateFaceRequest: UpdateFaceRequest,
        ImageUrl: ImageUrl,
        FaceList: FaceList,
        PersonGroup: PersonGroup,
        LargeFaceList: LargeFaceList,
        LargePersonGroup: LargePersonGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LargePersonGroupPerson. */
    var LargePersonGroupPerson = /** @class */ (function () {
        /**
         * Create a LargePersonGroupPerson.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function LargePersonGroupPerson(client) {
            this.client = client;
        }
        LargePersonGroupPerson.prototype.create = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, createOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.list = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.deleteMethod = function (largePersonGroupId$$1, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.get = function (largePersonGroupId$$1, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.update = function (largePersonGroupId$$1, personId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                options: options
            }, updateOperationSpec$3, callback);
        };
        LargePersonGroupPerson.prototype.deleteFace = function (largePersonGroupId$$1, personId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, deleteFaceOperationSpec$2, callback);
        };
        LargePersonGroupPerson.prototype.getFace = function (largePersonGroupId$$1, personId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, getFaceOperationSpec$1, callback);
        };
        LargePersonGroupPerson.prototype.updateFace = function (largePersonGroupId$$1, personId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, updateFaceOperationSpec$1, callback);
        };
        LargePersonGroupPerson.prototype.addFaceFromUrl = function (largePersonGroupId$$1, personId$$1, url, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec$2, callback);
        };
        LargePersonGroupPerson.prototype.addFaceFromStream = function (largePersonGroupId$$1, personId$$1, image, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                personId: personId$$1,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec$2, callback);
        };
        return LargePersonGroupPerson;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var createOperationSpec$3 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/persons",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/persons",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        queryParameters: [
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Person"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        responses: {
            200: {
                bodyMapper: Person
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var deleteFaceOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var getFaceOperationSpec$1 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId,
            persistedFaceId
        ],
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var updateFaceOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId,
            persistedFaceId
        ],
        requestBody: {
            parameterPath: {
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, UpdateFaceRequest, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var addFaceFromUrlOperationSpec$2 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };
    var addFaceFromStreamOperationSpec$2 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces",
        urlParameters: [
            endpoint,
            largePersonGroupId,
            personId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        NameAndUserDataContract: NameAndUserDataContract,
        APIError: APIError,
        ErrorModel: ErrorModel,
        LargePersonGroup: LargePersonGroup,
        TrainingStatus: TrainingStatus,
        FaceList: FaceList,
        PersistedFace: PersistedFace,
        PersonGroup: PersonGroup,
        Person: Person,
        LargeFaceList: LargeFaceList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LargePersonGroupOperations. */
    var LargePersonGroupOperations = /** @class */ (function () {
        /**
         * Create a LargePersonGroupOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function LargePersonGroupOperations(client) {
            this.client = client;
        }
        LargePersonGroupOperations.prototype.create = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, createOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.deleteMethod = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.get = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.update = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, updateOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.getTrainingStatus = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, getTrainingStatusOperationSpec$1, callback);
        };
        LargePersonGroupOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$4, callback);
        };
        LargePersonGroupOperations.prototype.train = function (largePersonGroupId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largePersonGroupId: largePersonGroupId$$1,
                options: options
            }, trainOperationSpec$1, callback);
        };
        return LargePersonGroupOperations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOperationSpec$4 = {
        httpMethod: "PUT",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            200: {
                bodyMapper: LargePersonGroup
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "largepersongroups/{largePersonGroupId}",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var getTrainingStatusOperationSpec$1 = {
        httpMethod: "GET",
        path: "largepersongroups/{largePersonGroupId}/training",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            200: {
                bodyMapper: TrainingStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "largepersongroups",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            start1,
            top1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LargePersonGroup"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };
    var trainOperationSpec$1 = {
        httpMethod: "POST",
        path: "largepersongroups/{largePersonGroupId}/train",
        urlParameters: [
            endpoint,
            largePersonGroupId
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        NameAndUserDataContract: NameAndUserDataContract,
        APIError: APIError,
        ErrorModel: ErrorModel,
        LargeFaceList: LargeFaceList,
        TrainingStatus: TrainingStatus,
        PersistedFace: PersistedFace,
        UpdateFaceRequest: UpdateFaceRequest,
        ImageUrl: ImageUrl,
        FaceList: FaceList,
        PersonGroup: PersonGroup,
        Person: Person,
        LargePersonGroup: LargePersonGroup
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LargeFaceListOperations. */
    var LargeFaceListOperations = /** @class */ (function () {
        /**
         * Create a LargeFaceListOperations.
         * @param {FaceClientContext} client Reference to the service client.
         */
        function LargeFaceListOperations(client) {
            this.client = client;
        }
        LargeFaceListOperations.prototype.create = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, createOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.get = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.update = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, updateOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.deleteMethod = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.getTrainingStatus = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, getTrainingStatusOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        LargeFaceListOperations.prototype.train = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, trainOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.deleteFace = function (largeFaceListId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, deleteFaceOperationSpec$3, callback);
        };
        LargeFaceListOperations.prototype.getFace = function (largeFaceListId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, getFaceOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.updateFace = function (largeFaceListId$$1, persistedFaceId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                persistedFaceId: persistedFaceId$$1,
                options: options
            }, updateFaceOperationSpec$2, callback);
        };
        LargeFaceListOperations.prototype.addFaceFromUrl = function (largeFaceListId$$1, url, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                url: url,
                options: options
            }, addFaceFromUrlOperationSpec$3, callback);
        };
        LargeFaceListOperations.prototype.listFaces = function (largeFaceListId$$1, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                options: options
            }, listFacesOperationSpec, callback);
        };
        LargeFaceListOperations.prototype.addFaceFromStream = function (largeFaceListId$$1, image, options, callback) {
            return this.client.sendOperationRequest({
                largeFaceListId: largeFaceListId$$1,
                image: image,
                options: options
            }, addFaceFromStreamOperationSpec$3, callback);
        };
        return LargeFaceListOperations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOperationSpec$5 = {
        httpMethod: "PUT",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            200: {
                bodyMapper: LargeFaceList
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        requestBody: {
            parameterPath: {
                name: [
                    "options",
                    "name"
                ],
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, NameAndUserDataContract, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "largefacelists/{largeFaceListId}",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getTrainingStatusOperationSpec$2 = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}/training",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            200: {
                bodyMapper: TrainingStatus
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "largefacelists",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LargeFaceList"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var trainOperationSpec$2 = {
        httpMethod: "POST",
        path: "largefacelists/{largeFaceListId}/train",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        responses: {
            202: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var deleteFaceOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largeFaceListId,
            persistedFaceId
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var getFaceOperationSpec$2 = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largeFaceListId,
            persistedFaceId
        ],
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var updateFaceOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}",
        urlParameters: [
            endpoint,
            largeFaceListId,
            persistedFaceId
        ],
        requestBody: {
            parameterPath: {
                userData: [
                    "options",
                    "userData"
                ]
            },
            mapper: __assign({}, UpdateFaceRequest, { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addFaceFromUrlOperationSpec$3 = {
        httpMethod: "POST",
        path: "largefacelists/{largeFaceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: {
                url: "url"
            },
            mapper: __assign({}, ImageUrl, { required: true })
        },
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var listFacesOperationSpec = {
        httpMethod: "GET",
        path: "largefacelists/{largeFaceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            start0,
            top0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PersistedFace"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };
    var addFaceFromStreamOperationSpec$3 = {
        httpMethod: "POST",
        path: "largefacelists/{largeFaceListId}/persistedfaces",
        urlParameters: [
            endpoint,
            largeFaceListId
        ],
        queryParameters: [
            userData,
            targetFace
        ],
        requestBody: {
            parameterPath: "image",
            mapper: {
                required: true,
                serializedName: "Image",
                type: {
                    name: "Stream"
                }
            }
        },
        contentType: "application/octet-stream",
        responses: {
            200: {
                bodyMapper: PersistedFace
            },
            default: {
                bodyMapper: APIError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-face";
    var packageVersion = "1.0.0";
    var FaceClientContext = /** @class */ (function (_super) {
        __extends(FaceClientContext, _super);
        /**
         * Initializes a new instance of the FaceClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function FaceClientContext(endpoint, credentials, options) {
            var _this = this;
            if (endpoint === null || endpoint === undefined) {
                throw new Error('\'endpoint\' cannot be null.');
            }
            if (credentials === null || credentials === undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            _this.addUserAgentInfo(packageName + "/" + packageVersion);
            return _this;
        }
        return FaceClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var FaceClient = /** @class */ (function (_super) {
        __extends(FaceClient, _super);
        /**
         * Initializes a new instance of the FaceClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function FaceClient(endpoint, credentials, options) {
            var _this = _super.call(this, endpoint, credentials, options) || this;
            _this.face = new Face(_this);
            _this.personGroupPerson = new PersonGroupPerson(_this);
            _this.personGroup = new PersonGroupOperations(_this);
            _this.faceList = new FaceListOperations(_this);
            _this.largePersonGroupPerson = new LargePersonGroupPerson(_this);
            _this.largePersonGroup = new LargePersonGroupOperations(_this);
            _this.largeFaceList = new LargeFaceListOperations(_this);
            return _this;
        }
        return FaceClient;
    }(FaceClientContext));

    exports.FaceClient = FaceClient;
    exports.FaceClientContext = FaceClientContext;
    exports.FaceModels = index;
    exports.FaceMappers = mappers;
    exports.Face = Face;
    exports.PersonGroupPerson = PersonGroupPerson;
    exports.PersonGroupOperations = PersonGroupOperations;
    exports.FaceListOperations = FaceListOperations;
    exports.LargePersonGroupPerson = LargePersonGroupPerson;
    exports.LargePersonGroupOperations = LargePersonGroupOperations;
    exports.LargeFaceListOperations = LargeFaceListOperations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-face.js.map
