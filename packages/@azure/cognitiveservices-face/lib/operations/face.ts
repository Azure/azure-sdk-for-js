/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/faceMappers";
import * as Parameters from "../models/parameters";
import { FaceClientContext } from "../faceClientContext";

/** Class representing a Face. */
export class Face {
  private readonly client: FaceClientContext;

  /**
   * Create a Face.
   * @param {FaceClientContext} client Reference to the service client.
   */
  constructor(client: FaceClientContext) {
    this.client = client;
  }

  /**
   * Given query face's faceId, find the similar-looking faces from a faceId array, a face list or a
   * large face list.
   * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid
   * faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceFindSimilarResponse>
   */
  findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams): Promise<Models.FaceFindSimilarResponse>;
  /**
   * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid
   * faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call
   * @param callback The callback
   */
  findSimilar(faceId: string, callback: msRest.ServiceCallback<Models.SimilarFace[]>): void;
  /**
   * @param faceId FaceId of the query face. User needs to call Face - Detect first to get a valid
   * faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call
   * @param options The optional parameters
   * @param callback The callback
   */
  findSimilar(faceId: string, options: Models.FaceFindSimilarOptionalParams, callback: msRest.ServiceCallback<Models.SimilarFace[]>): void;
  findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams | msRest.ServiceCallback<Models.SimilarFace[]>, callback?: msRest.ServiceCallback<Models.SimilarFace[]>): Promise<Models.FaceFindSimilarResponse> {
    return this.client.sendOperationRequest(
      {
        faceId,
        options
      },
      findSimilarOperationSpec,
      callback) as Promise<Models.FaceFindSimilarResponse>;
  }

  /**
   * Divide candidate faces into groups based on face similarity.
   * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceGroupResponse>
   */
  group(faceIds: string[], options?: msRest.RequestOptionsBase): Promise<Models.FaceGroupResponse>;
  /**
   * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces
   * @param callback The callback
   */
  group(faceIds: string[], callback: msRest.ServiceCallback<Models.GroupResult>): void;
  /**
   * @param faceIds Array of candidate faceId created by Face - Detect. The maximum is 1000 faces
   * @param options The optional parameters
   * @param callback The callback
   */
  group(faceIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupResult>): void;
  group(faceIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GroupResult>, callback?: msRest.ServiceCallback<Models.GroupResult>): Promise<Models.FaceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        faceIds,
        options
      },
      groupOperationSpec,
      callback) as Promise<Models.FaceGroupResponse>;
  }

  /**
   * 1-to-many identification to find the closest matches of the specific query person face from a
   * person group or large person group.
   * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are
   * identified independently. The valid number of faceIds is between [1, 10].
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceIdentifyResponse>
   */
  identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams): Promise<Models.FaceIdentifyResponse>;
  /**
   * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are
   * identified independently. The valid number of faceIds is between [1, 10].
   * @param callback The callback
   */
  identify(faceIds: string[], callback: msRest.ServiceCallback<Models.IdentifyResult[]>): void;
  /**
   * @param faceIds Array of query faces faceIds, created by the Face - Detect. Each of the faces are
   * identified independently. The valid number of faceIds is between [1, 10].
   * @param options The optional parameters
   * @param callback The callback
   */
  identify(faceIds: string[], options: Models.FaceIdentifyOptionalParams, callback: msRest.ServiceCallback<Models.IdentifyResult[]>): void;
  identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams | msRest.ServiceCallback<Models.IdentifyResult[]>, callback?: msRest.ServiceCallback<Models.IdentifyResult[]>): Promise<Models.FaceIdentifyResponse> {
    return this.client.sendOperationRequest(
      {
        faceIds,
        options
      },
      identifyOperationSpec,
      callback) as Promise<Models.FaceIdentifyResponse>;
  }

  /**
   * Verify whether two faces belong to a same person or whether one face belongs to a person.
   * @param faceId1 FaceId of the first face, comes from Face - Detect
   * @param faceId2 FaceId of the second face, comes from Face - Detect
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceVerifyFaceToFaceResponse>
   */
  verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase): Promise<Models.FaceVerifyFaceToFaceResponse>;
  /**
   * @param faceId1 FaceId of the first face, comes from Face - Detect
   * @param faceId2 FaceId of the second face, comes from Face - Detect
   * @param callback The callback
   */
  verifyFaceToFace(faceId1: string, faceId2: string, callback: msRest.ServiceCallback<Models.VerifyResult>): void;
  /**
   * @param faceId1 FaceId of the first face, comes from Face - Detect
   * @param faceId2 FaceId of the second face, comes from Face - Detect
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyFaceToFace(faceId1: string, faceId2: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerifyResult>): void;
  verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VerifyResult>, callback?: msRest.ServiceCallback<Models.VerifyResult>): Promise<Models.FaceVerifyFaceToFaceResponse> {
    return this.client.sendOperationRequest(
      {
        faceId1,
        faceId2,
        options
      },
      verifyFaceToFaceOperationSpec,
      callback) as Promise<Models.FaceVerifyFaceToFaceResponse>;
  }

  /**
   * Detect human faces in an image and returns face locations, and optionally with faceIds,
   * landmarks, and attributes.
   * @param url Publicly reachable URL of an image
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceDetectWithUrlResponse>
   */
  detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams): Promise<Models.FaceDetectWithUrlResponse>;
  /**
   * @param url Publicly reachable URL of an image
   * @param callback The callback
   */
  detectWithUrl(url: string, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;
  /**
   * @param url Publicly reachable URL of an image
   * @param options The optional parameters
   * @param callback The callback
   */
  detectWithUrl(url: string, options: Models.FaceDetectWithUrlOptionalParams, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;
  detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams | msRest.ServiceCallback<Models.DetectedFace[]>, callback?: msRest.ServiceCallback<Models.DetectedFace[]>): Promise<Models.FaceDetectWithUrlResponse> {
    return this.client.sendOperationRequest(
      {
        url,
        options
      },
      detectWithUrlOperationSpec,
      callback) as Promise<Models.FaceDetectWithUrlResponse>;
  }

  /**
   * Verify whether two faces belong to a same person. Compares a face Id with a Person Id
   * @param faceId FaceId of the face, comes from Face - Detect
   * @param personId Specify a certain person in a person group or a large person group. personId is
   * created in PersonGroup Person - Create or LargePersonGroup Person - Create.
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceVerifyFaceToPersonResponse>
   */
  verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams): Promise<Models.FaceVerifyFaceToPersonResponse>;
  /**
   * @param faceId FaceId of the face, comes from Face - Detect
   * @param personId Specify a certain person in a person group or a large person group. personId is
   * created in PersonGroup Person - Create or LargePersonGroup Person - Create.
   * @param callback The callback
   */
  verifyFaceToPerson(faceId: string, personId: string, callback: msRest.ServiceCallback<Models.VerifyResult>): void;
  /**
   * @param faceId FaceId of the face, comes from Face - Detect
   * @param personId Specify a certain person in a person group or a large person group. personId is
   * created in PersonGroup Person - Create or LargePersonGroup Person - Create.
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyFaceToPerson(faceId: string, personId: string, options: Models.FaceVerifyFaceToPersonOptionalParams, callback: msRest.ServiceCallback<Models.VerifyResult>): void;
  verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams | msRest.ServiceCallback<Models.VerifyResult>, callback?: msRest.ServiceCallback<Models.VerifyResult>): Promise<Models.FaceVerifyFaceToPersonResponse> {
    return this.client.sendOperationRequest(
      {
        faceId,
        personId,
        options
      },
      verifyFaceToPersonOperationSpec,
      callback) as Promise<Models.FaceVerifyFaceToPersonResponse>;
  }

  /**
   * Detect human faces in an image and returns face locations, and optionally with faceIds,
   * landmarks, and attributes.
   * @param image An image stream.
   * @param [options] The optional parameters
   * @returns Promise<Models.FaceDetectWithStreamResponse>
   */
  detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams): Promise<Models.FaceDetectWithStreamResponse>;
  /**
   * @param image An image stream.
   * @param callback The callback
   */
  detectWithStream(image: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;
  /**
   * @param image An image stream.
   * @param options The optional parameters
   * @param callback The callback
   */
  detectWithStream(image: msRest.HttpRequestBody, options: Models.FaceDetectWithStreamOptionalParams, callback: msRest.ServiceCallback<Models.DetectedFace[]>): void;
  detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams | msRest.ServiceCallback<Models.DetectedFace[]>, callback?: msRest.ServiceCallback<Models.DetectedFace[]>): Promise<Models.FaceDetectWithStreamResponse> {
    return this.client.sendOperationRequest(
      {
        image,
        options
      },
      detectWithStreamOperationSpec,
      callback) as Promise<Models.FaceDetectWithStreamResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const findSimilarOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "findsimilars",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: {
      faceId: "faceId",
      faceListId: [
        "options",
        "faceListId"
      ],
      largeFaceListId: [
        "options",
        "largeFaceListId"
      ],
      faceIds: [
        "options",
        "faceIds"
      ],
      maxNumOfCandidatesReturned: [
        "options",
        "maxNumOfCandidatesReturned"
      ],
      mode: [
        "options",
        "mode"
      ]
    },
    mapper: {
      ...Mappers.FindSimilarRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SimilarFace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const groupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "group",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: {
      faceIds: "faceIds"
    },
    mapper: {
      ...Mappers.GroupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GroupResult
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const identifyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "identify",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: {
      faceIds: "faceIds",
      personGroupId: [
        "options",
        "personGroupId"
      ],
      largePersonGroupId: [
        "options",
        "largePersonGroupId"
      ],
      maxNumOfCandidatesReturned: [
        "options",
        "maxNumOfCandidatesReturned"
      ],
      confidenceThreshold: [
        "options",
        "confidenceThreshold"
      ]
    },
    mapper: {
      ...Mappers.IdentifyRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IdentifyResult"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const verifyFaceToFaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "verify",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: {
      faceId1: "faceId1",
      faceId2: "faceId2"
    },
    mapper: {
      ...Mappers.VerifyFaceToFaceRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VerifyResult
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const detectWithUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "detect",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.returnFaceId,
    Parameters.returnFaceLandmarks,
    Parameters.returnFaceAttributes
  ],
  requestBody: {
    parameterPath: {
      url: "url"
    },
    mapper: {
      ...Mappers.ImageUrl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectedFace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const verifyFaceToPersonOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "verify",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: {
      faceId: "faceId",
      personGroupId: [
        "options",
        "personGroupId"
      ],
      largePersonGroupId: [
        "options",
        "largePersonGroupId"
      ],
      personId: "personId"
    },
    mapper: {
      ...Mappers.VerifyFaceToPersonRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VerifyResult
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};

const detectWithStreamOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "detect",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.returnFaceId,
    Parameters.returnFaceLandmarks,
    Parameters.returnFaceAttributes
  ],
  requestBody: {
    parameterPath: "image",
    mapper: {
      required: true,
      serializedName: "Image",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectedFace"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.APIError
    }
  },
  serializer
};
