/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";


/**
 * @interface
 * An interface representing ErrorModel.
 * Error body.
 *
 */
export interface ErrorModel {
  /**
   * @member {string} [code]
   */
  code?: string;
  /**
   * @member {string} [message]
   */
  message?: string;
}

/**
 * @interface
 * An interface representing APIError.
 * Error information returned by the API
 *
 */
export interface APIError {
  /**
   * @member {ErrorModel} [error]
   */
  error?: ErrorModel;
}

/**
 * @interface
 * An interface representing FaceRectangle.
 * A rectangle within which a face can be found
 *
 */
export interface FaceRectangle {
  /**
   * @member {number} width The width of the rectangle, in pixels.
   */
  width: number;
  /**
   * @member {number} height The height of the rectangle, in pixels.
   */
  height: number;
  /**
   * @member {number} left The distance from the left edge if the image to the
   * left edge of the rectangle, in pixels.
   */
  left: number;
  /**
   * @member {number} top The distance from the top edge if the image to the
   * top edge of the rectangle, in pixels.
   */
  top: number;
}

/**
 * @interface
 * An interface representing Coordinate.
 * Coordinates within an image
 *
 */
export interface Coordinate {
  /**
   * @member {number} x The horizontal component, in pixels.
   */
  x: number;
  /**
   * @member {number} y The vertical component, in pixels.
   */
  y: number;
}

/**
 * @interface
 * An interface representing FaceLandmarks.
 * A collection of 27-point face landmarks pointing to the important positions
 * of face components.
 *
 */
export interface FaceLandmarks {
  /**
   * @member {Coordinate} [pupilLeft]
   */
  pupilLeft?: Coordinate;
  /**
   * @member {Coordinate} [pupilRight]
   */
  pupilRight?: Coordinate;
  /**
   * @member {Coordinate} [noseTip]
   */
  noseTip?: Coordinate;
  /**
   * @member {Coordinate} [mouthLeft]
   */
  mouthLeft?: Coordinate;
  /**
   * @member {Coordinate} [mouthRight]
   */
  mouthRight?: Coordinate;
  /**
   * @member {Coordinate} [eyebrowLeftOuter]
   */
  eyebrowLeftOuter?: Coordinate;
  /**
   * @member {Coordinate} [eyebrowLeftInner]
   */
  eyebrowLeftInner?: Coordinate;
  /**
   * @member {Coordinate} [eyeLeftOuter]
   */
  eyeLeftOuter?: Coordinate;
  /**
   * @member {Coordinate} [eyeLeftTop]
   */
  eyeLeftTop?: Coordinate;
  /**
   * @member {Coordinate} [eyeLeftBottom]
   */
  eyeLeftBottom?: Coordinate;
  /**
   * @member {Coordinate} [eyeLeftInner]
   */
  eyeLeftInner?: Coordinate;
  /**
   * @member {Coordinate} [eyebrowRightInner]
   */
  eyebrowRightInner?: Coordinate;
  /**
   * @member {Coordinate} [eyebrowRightOuter]
   */
  eyebrowRightOuter?: Coordinate;
  /**
   * @member {Coordinate} [eyeRightInner]
   */
  eyeRightInner?: Coordinate;
  /**
   * @member {Coordinate} [eyeRightTop]
   */
  eyeRightTop?: Coordinate;
  /**
   * @member {Coordinate} [eyeRightBottom]
   */
  eyeRightBottom?: Coordinate;
  /**
   * @member {Coordinate} [eyeRightOuter]
   */
  eyeRightOuter?: Coordinate;
  /**
   * @member {Coordinate} [noseRootLeft]
   */
  noseRootLeft?: Coordinate;
  /**
   * @member {Coordinate} [noseRootRight]
   */
  noseRootRight?: Coordinate;
  /**
   * @member {Coordinate} [noseLeftAlarTop]
   */
  noseLeftAlarTop?: Coordinate;
  /**
   * @member {Coordinate} [noseRightAlarTop]
   */
  noseRightAlarTop?: Coordinate;
  /**
   * @member {Coordinate} [noseLeftAlarOutTip]
   */
  noseLeftAlarOutTip?: Coordinate;
  /**
   * @member {Coordinate} [noseRightAlarOutTip]
   */
  noseRightAlarOutTip?: Coordinate;
  /**
   * @member {Coordinate} [upperLipTop]
   */
  upperLipTop?: Coordinate;
  /**
   * @member {Coordinate} [upperLipBottom]
   */
  upperLipBottom?: Coordinate;
  /**
   * @member {Coordinate} [underLipTop]
   */
  underLipTop?: Coordinate;
  /**
   * @member {Coordinate} [underLipBottom]
   */
  underLipBottom?: Coordinate;
}

/**
 * @interface
 * An interface representing FacialHair.
 * Properties describing facial hair attributes.
 *
 */
export interface FacialHair {
  /**
   * @member {number} [moustache]
   */
  moustache?: number;
  /**
   * @member {number} [beard]
   */
  beard?: number;
  /**
   * @member {number} [sideburns]
   */
  sideburns?: number;
}

/**
 * @interface
 * An interface representing HeadPose.
 * Properties indicating head pose of the face.
 *
 */
export interface HeadPose {
  /**
   * @member {number} [roll]
   */
  roll?: number;
  /**
   * @member {number} [yaw]
   */
  yaw?: number;
  /**
   * @member {number} [pitch]
   */
  pitch?: number;
}

/**
 * @interface
 * An interface representing Emotion.
 * Properties describing facial emotion in form of confidence ranging from 0 to
 * 1.
 *
 */
export interface Emotion {
  /**
   * @member {number} [anger]
   */
  anger?: number;
  /**
   * @member {number} [contempt]
   */
  contempt?: number;
  /**
   * @member {number} [disgust]
   */
  disgust?: number;
  /**
   * @member {number} [fear]
   */
  fear?: number;
  /**
   * @member {number} [happiness]
   */
  happiness?: number;
  /**
   * @member {number} [neutral]
   */
  neutral?: number;
  /**
   * @member {number} [sadness]
   */
  sadness?: number;
  /**
   * @member {number} [surprise]
   */
  surprise?: number;
}

/**
 * @interface
 * An interface representing HairColor.
 * Hair color and associated confidence
 *
 */
export interface HairColor {
  /**
   * @member {HairColorType} [color] Name of the hair color. Possible values
   * include: 'unknown', 'white', 'gray', 'blond', 'brown', 'red', 'black',
   * 'other'
   */
  color?: HairColorType;
  /**
   * @member {number} [confidence] Confidence level of the color
   */
  confidence?: number;
}

/**
 * @interface
 * An interface representing Hair.
 * Properties describing hair attributes.
 *
 */
export interface Hair {
  /**
   * @member {number} [bald] A number describing confidence level of whether
   * the person is bald.
   */
  bald?: number;
  /**
   * @member {boolean} [invisible] A boolean value describing whether the hair
   * is visible in the image.
   */
  invisible?: boolean;
  /**
   * @member {HairColor[]} [hairColor] An array of candidate colors and
   * confidence level in the presence of each.
   */
  hairColor?: HairColor[];
}

/**
 * @interface
 * An interface representing Makeup.
 * Properties describing present makeups on a given face.
 *
 */
export interface Makeup {
  /**
   * @member {boolean} [eyeMakeup] A boolean value describing whether eye
   * makeup is present on a face.
   */
  eyeMakeup?: boolean;
  /**
   * @member {boolean} [lipMakeup] A boolean value describing whether lip
   * makeup is present on a face.
   */
  lipMakeup?: boolean;
}

/**
 * @interface
 * An interface representing Occlusion.
 * Properties describing occlusions on a given face.
 *
 */
export interface Occlusion {
  /**
   * @member {boolean} [foreheadOccluded] A boolean value indicating whether
   * forehead is occluded.
   */
  foreheadOccluded?: boolean;
  /**
   * @member {boolean} [eyeOccluded] A boolean value indicating whether eyes
   * are occluded.
   */
  eyeOccluded?: boolean;
  /**
   * @member {boolean} [mouthOccluded] A boolean value indicating whether the
   * mouth is occluded.
   */
  mouthOccluded?: boolean;
}

/**
 * @interface
 * An interface representing Accessory.
 * Accessory item and corresponding confidence level.
 *
 */
export interface Accessory {
  /**
   * @member {AccessoryType} [type] Type of an accessory. Possible values
   * include: 'headWear', 'glasses', 'mask'
   */
  type?: AccessoryType;
  /**
   * @member {number} [confidence] Confidence level of an accessory
   */
  confidence?: number;
}

/**
 * @interface
 * An interface representing Blur.
 * Properties describing any presence of blur within the image.
 *
 */
export interface Blur {
  /**
   * @member {BlurLevel} [blurLevel] An enum value indicating level of
   * blurriness. Possible values include: 'Low', 'Medium', 'High'
   */
  blurLevel?: BlurLevel;
  /**
   * @member {number} [value] A number indicating level of blurriness ranging
   * from 0 to 1.
   */
  value?: number;
}

/**
 * @interface
 * An interface representing Exposure.
 * Properties describing exposure level of the image.
 *
 */
export interface Exposure {
  /**
   * @member {ExposureLevel} [exposureLevel] An enum value indicating level of
   * exposure. Possible values include: 'UnderExposure', 'GoodExposure',
   * 'OverExposure'
   */
  exposureLevel?: ExposureLevel;
  /**
   * @member {number} [value] A number indicating level of exposure level
   * ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good
   * exposure. [0.75, 1] is over exposure.
   */
  value?: number;
}

/**
 * @interface
 * An interface representing Noise.
 * Properties describing noise level of the image.
 *
 */
export interface Noise {
  /**
   * @member {NoiseLevel} [noiseLevel] An enum value indicating level of noise.
   * Possible values include: 'Low', 'Medium', 'High'
   */
  noiseLevel?: NoiseLevel;
  /**
   * @member {number} [value] A number indicating level of noise level ranging
   * from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure.
   * [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is
   * medium noise level. [0.7, 1] is high noise level.
   */
  value?: number;
}

/**
 * @interface
 * An interface representing FaceAttributes.
 * Face Attributes
 *
 */
export interface FaceAttributes {
  /**
   * @member {number} [age] Age in years
   */
  age?: number;
  /**
   * @member {Gender} [gender] Possible gender of the face. Possible values
   * include: 'male', 'female', 'genderless'
   */
  gender?: Gender;
  /**
   * @member {number} [smile] Smile intensity, a number between [0,1]
   */
  smile?: number;
  /**
   * @member {FacialHair} [facialHair] Properties describing facial hair
   * attributes.
   */
  facialHair?: FacialHair;
  /**
   * @member {GlassesType} [glasses] Glasses type if any of the face. Possible
   * values include: 'noGlasses', 'readingGlasses', 'sunglasses',
   * 'swimmingGoggles'
   */
  glasses?: GlassesType;
  /**
   * @member {HeadPose} [headPose] Properties indicating head pose of the face.
   */
  headPose?: HeadPose;
  /**
   * @member {Emotion} [emotion] Properties describing facial emotion in form
   * of confidence ranging from 0 to 1.
   */
  emotion?: Emotion;
  /**
   * @member {Hair} [hair] Properties describing hair attributes.
   */
  hair?: Hair;
  /**
   * @member {Makeup} [makeup] Properties describing present makeups on a given
   * face.
   */
  makeup?: Makeup;
  /**
   * @member {Occlusion} [occlusion] Properties describing occlusions on a
   * given face.
   */
  occlusion?: Occlusion;
  /**
   * @member {Accessory[]} [accessories] Properties describing any accessories
   * on a given face.
   */
  accessories?: Accessory[];
  /**
   * @member {Blur} [blur] Properties describing any presence of blur within
   * the image.
   */
  blur?: Blur;
  /**
   * @member {Exposure} [exposure] Properties describing exposure level of the
   * image.
   */
  exposure?: Exposure;
  /**
   * @member {Noise} [noise] Properties describing noise level of the image.
   */
  noise?: Noise;
}

/**
 * @interface
 * An interface representing DetectedFace.
 * Detected Face object.
 *
 */
export interface DetectedFace {
  /**
   * @member {string} [faceId]
   */
  faceId?: string;
  /**
   * @member {FaceRectangle} faceRectangle
   */
  faceRectangle: FaceRectangle;
  /**
   * @member {FaceLandmarks} [faceLandmarks]
   */
  faceLandmarks?: FaceLandmarks;
  /**
   * @member {FaceAttributes} [faceAttributes]
   */
  faceAttributes?: FaceAttributes;
}

/**
 * @interface
 * An interface representing FindSimilarRequest.
 * Request body for find similar operation.
 *
 */
export interface FindSimilarRequest {
  /**
   * @member {string} faceId FaceId of the query face. User needs to call Face
   * - Detect first to get a valid faceId. Note that this faceId is not
   * persisted and will expire 24 hours after the detection call
   */
  faceId: string;
  /**
   * @member {string} [faceListId] An existing user-specified unique candidate
   * face list, created in Face List - Create a Face List. Face list contains a
   * set of persistedFaceIds which are persisted and will never expire.
   * Parameter faceListId, largeFaceListId and faceIds should not be provided
   * at the same time。
   */
  faceListId?: string;
  /**
   * @member {string} [largeFaceListId] An existing user-specified unique
   * candidate large face list, created in LargeFaceList - Create. Large face
   * list contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be
   * provided at the same time.
   */
  largeFaceListId?: string;
  /**
   * @member {string[]} [faceIds] An array of candidate faceIds. All of them
   * are created by Face - Detect and the faceIds will expire 24 hours after
   * the detection call. The number of faceIds is limited to 1000. Parameter
   * faceListId, largeFaceListId and faceIds should not be provided at the same
   * time.
   */
  faceIds?: string[];
  /**
   * @member {number} [maxNumOfCandidatesReturned] The number of top similar
   * faces returned. The valid range is [1, 1000]. Default value: 20 .
   */
  maxNumOfCandidatesReturned?: number;
  /**
   * @member {FindSimilarMatchMode} [mode] Similar face searching mode. It can
   * be "matchPerson" or "matchFace". Possible values include: 'matchPerson',
   * 'matchFace'. Default value: 'matchPerson' .
   */
  mode?: FindSimilarMatchMode;
}

/**
 * @interface
 * An interface representing SimilarFace.
 * Response body for find similar face operation.
 *
 */
export interface SimilarFace {
  /**
   * @member {string} [faceId] FaceId of candidate face when find by faceIds.
   * faceId is created by Face - Detect and will expire 24 hours after the
   * detection call
   */
  faceId?: string;
  /**
   * @member {string} [persistedFaceId] PersistedFaceId of candidate face when
   * find by faceListId. persistedFaceId in face list is persisted and will not
   * expire. As showed in below response
   */
  persistedFaceId?: string;
  /**
   * @member {number} confidence Similarity confidence of the candidate face.
   * The higher confidence, the more similar. Range between [0,1].
   */
  confidence: number;
}

/**
 * @interface
 * An interface representing GroupRequest.
 * Request body for group request.
 *
 */
export interface GroupRequest {
  /**
   * @member {string[]} faceIds Array of candidate faceId created by Face -
   * Detect. The maximum is 1000 faces
   */
  faceIds: string[];
}

/**
 * @interface
 * An interface representing GroupResult.
 * An array of face groups based on face similarity.
 *
 */
export interface GroupResult {
  /**
   * @member {string[][]} groups A partition of the original faces based on
   * face similarity. Groups are ranked by number of faces
   */
  groups: string[][];
  /**
   * @member {string[]} [messyGroup] Face ids array of faces that cannot find
   * any similar faces from original faces.
   */
  messyGroup?: string[];
}

/**
 * @interface
 * An interface representing IdentifyRequest.
 * Request body for identify face operation.
 *
 */
export interface IdentifyRequest {
  /**
   * @member {string[]} faceIds Array of query faces faceIds, created by the
   * Face - Detect. Each of the faces are identified independently. The valid
   * number of faceIds is between [1, 10].
   */
  faceIds: string[];
  /**
   * @member {string} [personGroupId] PersonGroupId of the target person group,
   * created by PersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   */
  personGroupId?: string;
  /**
   * @member {string} [largePersonGroupId] LargePersonGroupId of the target
   * large person group, created by LargePersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same
   * time.
   */
  largePersonGroupId?: string;
  /**
   * @member {number} [maxNumOfCandidatesReturned] The range of
   * maxNumOfCandidatesReturned is between 1 and 5 (default is 1). Default
   * value: 1 .
   */
  maxNumOfCandidatesReturned?: number;
  /**
   * @member {number} [confidenceThreshold] Confidence threshold of
   * identification, used to judge whether one face belong to one person. The
   * range of confidenceThreshold is [0, 1] (default specified by algorithm).
   */
  confidenceThreshold?: number;
}

/**
 * @interface
 * An interface representing IdentifyCandidate.
 * All possible faces that may qualify.
 *
 */
export interface IdentifyCandidate {
  /**
   * @member {string} personId Id of candidate
   */
  personId: string;
  /**
   * @member {number} confidence Confidence threshold of identification, used
   * to judge whether one face belong to one person. The range of
   * confidenceThreshold is [0, 1] (default specified by algorithm).
   */
  confidence: number;
}

/**
 * @interface
 * An interface representing IdentifyResult.
 * Response body for identify face operation.
 *
 */
export interface IdentifyResult {
  /**
   * @member {string} faceId FaceId of the query face
   */
  faceId: string;
  /**
   * @member {IdentifyCandidate[]} candidates Identified person candidates for
   * that face (ranked by confidence). Array size should be no larger than
   * input maxNumOfCandidatesReturned. If no person is identified, will return
   * an empty array.
   */
  candidates: IdentifyCandidate[];
}

/**
 * @interface
 * An interface representing VerifyFaceToPersonRequest.
 * Request body for face to person verification.
 *
 */
export interface VerifyFaceToPersonRequest {
  /**
   * @member {string} faceId FaceId of the face, comes from Face - Detect
   */
  faceId: string;
  /**
   * @member {string} [personGroupId] Using existing personGroupId and personId
   * for fast loading a specified person. personGroupId is created in
   * PersonGroup - Create. Parameter personGroupId and largePersonGroupId
   * should not be provided at the same time.
   */
  personGroupId?: string;
  /**
   * @member {string} [largePersonGroupId] Using existing largePersonGroupId
   * and personId for fast loading a specified person. largePersonGroupId is
   * created in LargePersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   */
  largePersonGroupId?: string;
  /**
   * @member {string} personId Specify a certain person in a person group or a
   * large person group. personId is created in PersonGroup Person - Create or
   * LargePersonGroup Person - Create.
   */
  personId: string;
}

/**
 * @interface
 * An interface representing VerifyFaceToFaceRequest.
 * Request body for face to face verification.
 *
 */
export interface VerifyFaceToFaceRequest {
  /**
   * @member {string} faceId1 FaceId of the first face, comes from Face -
   * Detect
   */
  faceId1: string;
  /**
   * @member {string} faceId2 FaceId of the second face, comes from Face -
   * Detect
   */
  faceId2: string;
}

/**
 * @interface
 * An interface representing VerifyResult.
 * Result of the verify operation.
 *
 */
export interface VerifyResult {
  /**
   * @member {boolean} isIdentical True if the two faces belong to the same
   * person or the face belongs to the person, otherwise false.
   */
  isIdentical: boolean;
  /**
   * @member {number} confidence A number indicates the similarity confidence
   * of whether two faces belong to the same person, or whether the face
   * belongs to the person. By default, isIdentical is set to True if
   * similarity confidence is greater than or equal to 0.5. This is useful for
   * advanced users to override "isIdentical" and fine-tune the result on their
   * own data.
   */
  confidence: number;
}

/**
 * @interface
 * An interface representing PersistedFace.
 * PersonFace object.
 *
 */
export interface PersistedFace {
  /**
   * @member {string} persistedFaceId The persistedFaceId of the target face,
   * which is persisted and will not expire. Different from faceId created by
   * Face - Detect and will expire in 24 hours after the detection call.
   */
  persistedFaceId: string;
  /**
   * @member {string} [userData] User-provided data attached to the face. The
   * size limit is 1KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing NameAndUserDataContract.
 * A combination of user defined name and user specified data for the person,
 * largePersonGroup/personGroup, and largeFaceList/faceList.
 *
 */
export interface NameAndUserDataContract {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing FaceList.
 * Face list object.
 *
 * @extends NameAndUserDataContract
 */
export interface FaceList extends NameAndUserDataContract {
  /**
   * @member {string} faceListId FaceListId of the target face list.
   */
  faceListId: string;
  /**
   * @member {PersistedFace[]} [persistedFaces] Persisted faces within the face
   * list.
   */
  persistedFaces?: PersistedFace[];
}

/**
 * @interface
 * An interface representing PersonGroup.
 * Person group object.
 *
 * @extends NameAndUserDataContract
 */
export interface PersonGroup extends NameAndUserDataContract {
  /**
   * @member {string} personGroupId PersonGroupId of the target person group.
   */
  personGroupId: string;
}

/**
 * @interface
 * An interface representing Person.
 * Person object.
 *
 * @extends NameAndUserDataContract
 */
export interface Person extends NameAndUserDataContract {
  /**
   * @member {string} personId PersonId of the target face list.
   */
  personId: string;
  /**
   * @member {string[]} [persistedFaceIds] PersistedFaceIds of registered faces
   * in the person. These persistedFaceIds are returned from Person - Add a
   * Person Face, and will not expire.
   */
  persistedFaceIds?: string[];
}

/**
 * @interface
 * An interface representing LargeFaceList.
 * Large face list object.
 *
 * @extends NameAndUserDataContract
 */
export interface LargeFaceList extends NameAndUserDataContract {
  /**
   * @member {string} largeFaceListId LargeFaceListId of the target large face
   * list.
   */
  largeFaceListId: string;
}

/**
 * @interface
 * An interface representing LargePersonGroup.
 * Large person group object.
 *
 * @extends NameAndUserDataContract
 */
export interface LargePersonGroup extends NameAndUserDataContract {
  /**
   * @member {string} largePersonGroupId LargePersonGroupId of the target large
   * person groups
   */
  largePersonGroupId: string;
}

/**
 * @interface
 * An interface representing UpdateFaceRequest.
 * Request to update face data.
 *
 */
export interface UpdateFaceRequest {
  /**
   * @member {string} [userData] User-provided data attached to the face. The
   * size limit is 1KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing TrainingStatus.
 * Training status object.
 *
 */
export interface TrainingStatus {
  /**
   * @member {TrainingStatusType} status Training status: notstarted, running,
   * succeeded, failed. If the training process is waiting to perform, the
   * status is notstarted. If the training is ongoing, the status is running.
   * Status succeed means this person group or large person group is ready for
   * Face - Identify, or this large face list is ready for Face - Find Similar.
   * Status failed is often caused by no person or no persisted face exist in
   * the person group or large person group, or no persisted face exist in the
   * large face list. Possible values include: 'nonstarted', 'running',
   * 'succeeded', 'failed'
   */
  status: TrainingStatusType;
  /**
   * @member {Date} created A combined UTC date and time string that describes
   * the created time of the person group, large person group or large face
   * list.
   */
  created: Date;
  /**
   * @member {Date} [lastAction] A combined UTC date and time string that
   * describes the last modify time of the person group, large person group or
   * large face list, could be null value when the group is not successfully
   * trained.
   */
  lastAction?: Date;
  /**
   * @member {Date} [lastSuccessfulTraining] A combined UTC date and time
   * string that describes the last successful training time of the person
   * group, large person group or large face list.
   */
  lastSuccessfulTraining?: Date;
  /**
   * @member {string} [message] Show failure message when training failed
   * (omitted when training succeed).
   */
  message?: string;
}

/**
 * @interface
 * An interface representing ImageUrl.
 */
export interface ImageUrl {
  /**
   * @member {string} url Publicly reachable URL of an image
   */
  url: string;
}

/**
 * @interface
 * An interface representing FaceFindSimilarOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceFindSimilarOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [faceListId] An existing user-specified unique candidate
   * face list, created in Face List - Create a Face List. Face list contains a
   * set of persistedFaceIds which are persisted and will never expire.
   * Parameter faceListId, largeFaceListId and faceIds should not be provided
   * at the same time。
   */
  faceListId?: string;
  /**
   * @member {string} [largeFaceListId] An existing user-specified unique
   * candidate large face list, created in LargeFaceList - Create. Large face
   * list contains a set of persistedFaceIds which are persisted and will never
   * expire. Parameter faceListId, largeFaceListId and faceIds should not be
   * provided at the same time.
   */
  largeFaceListId?: string;
  /**
   * @member {string[]} [faceIds] An array of candidate faceIds. All of them
   * are created by Face - Detect and the faceIds will expire 24 hours after
   * the detection call. The number of faceIds is limited to 1000. Parameter
   * faceListId, largeFaceListId and faceIds should not be provided at the same
   * time.
   */
  faceIds?: string[];
  /**
   * @member {number} [maxNumOfCandidatesReturned] The number of top similar
   * faces returned. The valid range is [1, 1000]. Default value: 20 .
   */
  maxNumOfCandidatesReturned?: number;
  /**
   * @member {FindSimilarMatchMode} [mode] Similar face searching mode. It can
   * be "matchPerson" or "matchFace". Possible values include: 'matchPerson',
   * 'matchFace'. Default value: 'matchPerson' .
   */
  mode?: FindSimilarMatchMode;
}

/**
 * @interface
 * An interface representing FaceIdentifyOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceIdentifyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [personGroupId] PersonGroupId of the target person group,
   * created by PersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   */
  personGroupId?: string;
  /**
   * @member {string} [largePersonGroupId] LargePersonGroupId of the target
   * large person group, created by LargePersonGroup - Create. Parameter
   * personGroupId and largePersonGroupId should not be provided at the same
   * time.
   */
  largePersonGroupId?: string;
  /**
   * @member {number} [maxNumOfCandidatesReturned] The range of
   * maxNumOfCandidatesReturned is between 1 and 5 (default is 1). Default
   * value: 1 .
   */
  maxNumOfCandidatesReturned?: number;
  /**
   * @member {number} [confidenceThreshold] Confidence threshold of
   * identification, used to judge whether one face belong to one person. The
   * range of confidenceThreshold is [0, 1] (default specified by algorithm).
   */
  confidenceThreshold?: number;
}

/**
 * @interface
 * An interface representing FaceDetectWithUrlOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceDetectWithUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [returnFaceId] A value indicating whether the operation
   * should return faceIds of detected faces. Default value: true .
   */
  returnFaceId?: boolean;
  /**
   * @member {boolean} [returnFaceLandmarks] A value indicating whether the
   * operation should return landmarks of the detected faces. Default value:
   * false .
   */
  returnFaceLandmarks?: boolean;
  /**
   * @member {FaceAttributeType[]} [returnFaceAttributes] Analyze and return
   * the one or more specified face attributes in the comma-separated string
   * like "returnFaceAttributes=age,gender". Supported face attributes include
   * age, gender, headPose, smile, facialHair, glasses and emotion. Note that
   * each face attribute analysis has additional computational and time cost.
   */
  returnFaceAttributes?: FaceAttributeType[];
}

/**
 * @interface
 * An interface representing FaceVerifyFaceToPersonOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceVerifyFaceToPersonOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [personGroupId] Using existing personGroupId and personId
   * for fast loading a specified person. personGroupId is created in
   * PersonGroup - Create. Parameter personGroupId and largePersonGroupId
   * should not be provided at the same time.
   */
  personGroupId?: string;
  /**
   * @member {string} [largePersonGroupId] Using existing largePersonGroupId
   * and personId for fast loading a specified person. largePersonGroupId is
   * created in LargePersonGroup - Create. Parameter personGroupId and
   * largePersonGroupId should not be provided at the same time.
   */
  largePersonGroupId?: string;
}

/**
 * @interface
 * An interface representing FaceDetectWithStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceDetectWithStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [returnFaceId] A value indicating whether the operation
   * should return faceIds of detected faces. Default value: true .
   */
  returnFaceId?: boolean;
  /**
   * @member {boolean} [returnFaceLandmarks] A value indicating whether the
   * operation should return landmarks of the detected faces. Default value:
   * false .
   */
  returnFaceLandmarks?: boolean;
  /**
   * @member {FaceAttributeType[]} [returnFaceAttributes] Analyze and return
   * the one or more specified face attributes in the comma-separated string
   * like "returnFaceAttributes=age,gender". Supported face attributes include
   * age, gender, headPose, smile, facialHair, glasses and emotion. Note that
   * each face attribute analysis has additional computational and time cost.
   */
  returnFaceAttributes?: FaceAttributeType[];
}

/**
 * @interface
 * An interface representing PersonGroupPersonCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupPersonCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing PersonGroupPersonListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupPersonListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [start] Starting person id to return (used to list a
   * range of persons).
   */
  start?: string;
  /**
   * @member {number} [top] Number of persons to return starting with the
   * person id indicated by the 'start' parameter.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing PersonGroupPersonUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupPersonUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing PersonGroupPersonUpdateFaceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupPersonUpdateFaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-provided data attached to the face. The
   * size limit is 1KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing PersonGroupPersonAddFaceFromUrlOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupPersonAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing PersonGroupPersonAddFaceFromStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupPersonAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing PersonGroupCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing PersonGroupUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing PersonGroupListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface PersonGroupListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [start] List person groups from the least personGroupId
   * greater than the "start".
   */
  start?: string;
  /**
   * @member {number} [top] The number of person groups to list. Default value:
   * 1000 .
   */
  top?: number;
}

/**
 * @interface
 * An interface representing FaceListCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceListCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing FaceListUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceListUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing FaceListAddFaceFromUrlOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceListAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing FaceListAddFaceFromStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface FaceListAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing LargePersonGroupPersonCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupPersonCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargePersonGroupPersonListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupPersonListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [start] Starting person id to return (used to list a
   * range of persons).
   */
  start?: string;
  /**
   * @member {number} [top] Number of persons to return starting with the
   * person id indicated by the 'start' parameter.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing LargePersonGroupPersonUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupPersonUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargePersonGroupPersonUpdateFaceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupPersonUpdateFaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-provided data attached to the face. The
   * size limit is 1KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargePersonGroupPersonAddFaceFromUrlOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupPersonAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing LargePersonGroupPersonAddFaceFromStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupPersonAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing LargePersonGroupCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargePersonGroupUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargePersonGroupListOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargePersonGroupListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [start] List large person groups from the least
   * largePersonGroupId greater than the "start".
   */
  start?: string;
  /**
   * @member {number} [top] The number of large person groups to list. Default
   * value: 1000 .
   */
  top?: number;
}

/**
 * @interface
 * An interface representing LargeFaceListCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargeFaceListCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargeFaceListUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargeFaceListUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [name] User defined name, maximum length is 128.
   */
  name?: string;
  /**
   * @member {string} [userData] User specified data. Length should not exceed
   * 16KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargeFaceListUpdateFaceOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargeFaceListUpdateFaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-provided data attached to the face. The
   * size limit is 1KB.
   */
  userData?: string;
}

/**
 * @interface
 * An interface representing LargeFaceListAddFaceFromUrlOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargeFaceListAddFaceFromUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * @interface
 * An interface representing LargeFaceListListFacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargeFaceListListFacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [start] Starting face id to return (used to list a range
   * of faces).
   */
  start?: string;
  /**
   * @member {number} [top] Number of faces to return starting with the face id
   * indicated by the 'start' parameter.
   */
  top?: number;
}

/**
 * @interface
 * An interface representing LargeFaceListAddFaceFromStreamOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface LargeFaceListAddFaceFromStreamOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [userData] User-specified data about the face for any
   * purpose. The maximum length is 1KB.
   */
  userData?: string;
  /**
   * @member {number[]} [targetFace] A face rectangle to specify the target
   * face to be added to a person in the format of
   * "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If
   * there is more than one face in the image, targetFace is required to
   * specify which face to add. No targetFace means there is only one face
   * detected in the entire image.
   */
  targetFace?: number[];
}

/**
 * Defines values for Gender.
 * Possible values include: 'male', 'female', 'genderless'
 * @readonly
 * @enum {string}
 */
export type Gender = 'male' | 'female' | 'genderless';

/**
 * Defines values for GlassesType.
 * Possible values include: 'noGlasses', 'readingGlasses', 'sunglasses', 'swimmingGoggles'
 * @readonly
 * @enum {string}
 */
export type GlassesType = 'noGlasses' | 'readingGlasses' | 'sunglasses' | 'swimmingGoggles';

/**
 * Defines values for HairColorType.
 * Possible values include: 'unknown', 'white', 'gray', 'blond', 'brown', 'red', 'black', 'other'
 * @readonly
 * @enum {string}
 */
export type HairColorType = 'unknown' | 'white' | 'gray' | 'blond' | 'brown' | 'red' | 'black' | 'other';

/**
 * Defines values for AccessoryType.
 * Possible values include: 'headWear', 'glasses', 'mask'
 * @readonly
 * @enum {string}
 */
export type AccessoryType = 'headWear' | 'glasses' | 'mask';

/**
 * Defines values for BlurLevel.
 * Possible values include: 'Low', 'Medium', 'High'
 * @readonly
 * @enum {string}
 */
export type BlurLevel = 'Low' | 'Medium' | 'High';

/**
 * Defines values for ExposureLevel.
 * Possible values include: 'UnderExposure', 'GoodExposure', 'OverExposure'
 * @readonly
 * @enum {string}
 */
export type ExposureLevel = 'UnderExposure' | 'GoodExposure' | 'OverExposure';

/**
 * Defines values for NoiseLevel.
 * Possible values include: 'Low', 'Medium', 'High'
 * @readonly
 * @enum {string}
 */
export type NoiseLevel = 'Low' | 'Medium' | 'High';

/**
 * Defines values for FindSimilarMatchMode.
 * Possible values include: 'matchPerson', 'matchFace'
 * @readonly
 * @enum {string}
 */
export type FindSimilarMatchMode = 'matchPerson' | 'matchFace';

/**
 * Defines values for TrainingStatusType.
 * Possible values include: 'nonstarted', 'running', 'succeeded', 'failed'
 * @readonly
 * @enum {string}
 */
export type TrainingStatusType = 'nonstarted' | 'running' | 'succeeded' | 'failed';

/**
 * Defines values for FaceAttributeType.
 * Possible values include: 'age', 'gender', 'headPose', 'smile', 'facialHair', 'glasses',
 * 'emotion', 'hair', 'makeup', 'occlusion', 'accessories', 'blur', 'exposure', 'noise'
 * @readonly
 * @enum {string}
 */
export type FaceAttributeType = 'age' | 'gender' | 'headPose' | 'smile' | 'facialHair' | 'glasses' | 'emotion' | 'hair' | 'makeup' | 'occlusion' | 'accessories' | 'blur' | 'exposure' | 'noise';

/**
 * Contains response data for the findSimilar operation.
 */
export type FaceFindSimilarResponse = Array<SimilarFace> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SimilarFace[];
    };
};

/**
 * Contains response data for the group operation.
 */
export type FaceGroupResponse = GroupResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GroupResult;
    };
};

/**
 * Contains response data for the identify operation.
 */
export type FaceIdentifyResponse = Array<IdentifyResult> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IdentifyResult[];
    };
};

/**
 * Contains response data for the verifyFaceToFace operation.
 */
export type FaceVerifyFaceToFaceResponse = VerifyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VerifyResult;
    };
};

/**
 * Contains response data for the detectWithUrl operation.
 */
export type FaceDetectWithUrlResponse = Array<DetectedFace> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DetectedFace[];
    };
};

/**
 * Contains response data for the verifyFaceToPerson operation.
 */
export type FaceVerifyFaceToPersonResponse = VerifyResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VerifyResult;
    };
};

/**
 * Contains response data for the detectWithStream operation.
 */
export type FaceDetectWithStreamResponse = Array<DetectedFace> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DetectedFace[];
    };
};

/**
 * Contains response data for the create operation.
 */
export type PersonGroupPersonCreateResponse = Person & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Person;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PersonGroupPersonListResponse = Array<Person> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Person[];
    };
};

/**
 * Contains response data for the get operation.
 */
export type PersonGroupPersonGetResponse = Person & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Person;
    };
};

/**
 * Contains response data for the getFace operation.
 */
export type PersonGroupPersonGetFaceResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the addFaceFromUrl operation.
 */
export type PersonGroupPersonAddFaceFromUrlResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the addFaceFromStream operation.
 */
export type PersonGroupPersonAddFaceFromStreamResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PersonGroupGetResponse = PersonGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersonGroup;
    };
};

/**
 * Contains response data for the getTrainingStatus operation.
 */
export type PersonGroupGetTrainingStatusResponse = TrainingStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrainingStatus;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PersonGroupListResponse = Array<PersonGroup> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersonGroup[];
    };
};

/**
 * Contains response data for the get operation.
 */
export type FaceListGetResponse = FaceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FaceList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type FaceListListResponse = Array<FaceList> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FaceList[];
    };
};

/**
 * Contains response data for the addFaceFromUrl operation.
 */
export type FaceListAddFaceFromUrlResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the addFaceFromStream operation.
 */
export type FaceListAddFaceFromStreamResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the create operation.
 */
export type LargePersonGroupPersonCreateResponse = Person & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Person;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LargePersonGroupPersonListResponse = Array<Person> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Person[];
    };
};

/**
 * Contains response data for the get operation.
 */
export type LargePersonGroupPersonGetResponse = Person & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Person;
    };
};

/**
 * Contains response data for the getFace operation.
 */
export type LargePersonGroupPersonGetFaceResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the addFaceFromUrl operation.
 */
export type LargePersonGroupPersonAddFaceFromUrlResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the addFaceFromStream operation.
 */
export type LargePersonGroupPersonAddFaceFromStreamResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LargePersonGroupGetResponse = LargePersonGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LargePersonGroup;
    };
};

/**
 * Contains response data for the getTrainingStatus operation.
 */
export type LargePersonGroupGetTrainingStatusResponse = TrainingStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrainingStatus;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LargePersonGroupListResponse = Array<LargePersonGroup> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LargePersonGroup[];
    };
};

/**
 * Contains response data for the get operation.
 */
export type LargeFaceListGetResponse = LargeFaceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LargeFaceList;
    };
};

/**
 * Contains response data for the getTrainingStatus operation.
 */
export type LargeFaceListGetTrainingStatusResponse = TrainingStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrainingStatus;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LargeFaceListListResponse = Array<LargeFaceList> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LargeFaceList[];
    };
};

/**
 * Contains response data for the getFace operation.
 */
export type LargeFaceListGetFaceResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the addFaceFromUrl operation.
 */
export type LargeFaceListAddFaceFromUrlResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};

/**
 * Contains response data for the listFaces operation.
 */
export type LargeFaceListListFacesResponse = Array<PersistedFace> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace[];
    };
};

/**
 * Contains response data for the addFaceFromStream operation.
 */
export type LargeFaceListAddFaceFromStreamResponse = PersistedFace & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PersistedFace;
    };
};
