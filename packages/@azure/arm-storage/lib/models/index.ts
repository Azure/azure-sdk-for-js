/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing OperationDisplay.
 * Display metadata associated with the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Service provider: Microsoft Storage.
   */
  provider?: string;
  /**
   * @member {string} [resource] Resource on which the operation is performed
   * etc.
   */
  resource?: string;
  /**
   * @member {string} [operation] Type of operation: get, read, delete, etc.
   */
  operation?: string;
  /**
   * @member {string} [description] Description of the operation.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Dimension.
 * Dimension of blobs, possiblly be blob type or access tier.
 *
 */
export interface Dimension {
  /**
   * @member {string} [name] Display name of dimension.
   */
  name?: string;
  /**
   * @member {string} [displayName] Display name of dimension.
   */
  displayName?: string;
}

/**
 * @interface
 * An interface representing MetricSpecification.
 * Metric specification of operation.
 *
 */
export interface MetricSpecification {
  /**
   * @member {string} [name] Name of metric specification.
   */
  name?: string;
  /**
   * @member {string} [displayName] Display name of metric specification.
   */
  displayName?: string;
  /**
   * @member {string} [displayDescription] Display description of metric
   * specification.
   */
  displayDescription?: string;
  /**
   * @member {string} [unit] Unit could be Bytes or Count.
   */
  unit?: string;
  /**
   * @member {Dimension[]} [dimensions] Dimensions of blobs, including blob
   * type and access tier.
   */
  dimensions?: Dimension[];
  /**
   * @member {string} [aggregationType] Aggregation type could be Average.
   */
  aggregationType?: string;
  /**
   * @member {boolean} [fillGapWithZero] The property to decide fill gap with
   * zero or not.
   */
  fillGapWithZero?: boolean;
  /**
   * @member {string} [category] The category this metric specification belong
   * to, could be Capacity.
   */
  category?: string;
  /**
   * @member {string} [resourceIdDimensionNameOverride] Account Resource Id.
   */
  resourceIdDimensionNameOverride?: string;
}

/**
 * @interface
 * An interface representing ServiceSpecification.
 * One property of operation, include metric specifications.
 *
 */
export interface ServiceSpecification {
  /**
   * @member {MetricSpecification[]} [metricSpecifications] Metric
   * specifications of operation.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * @interface
 * An interface representing Operation.
 * Storage REST API operation definition.
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * @member {OperationDisplay} [display] Display metadata associated with the
   * operation.
   */
  display?: OperationDisplay;
  /**
   * @member {string} [origin] The origin of operations.
   */
  origin?: string;
  /**
   * @member {ServiceSpecification} [serviceSpecification] One property of
   * operation, include metric specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * @interface
 * An interface representing StorageAccountCheckNameAvailabilityParameters.
 * The parameters used to check the availabity of the storage account name.
 *
 */
export interface StorageAccountCheckNameAvailabilityParameters {
  /**
   * @member {string} name The storage account name.
   */
  name: string;
}

/**
 * @interface
 * An interface representing SKUCapability.
 * The capability information in the specified sku, including file encryption,
 * network acls, change notification, etc.
 *
 */
export interface SKUCapability {
  /**
   * @member {string} [name] The name of capability, The capability information
   * in the specified sku, including file encryption, network acls, change
   * notification, etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [value] A string value to indicate states of given
   * capability. Possibly 'true' or 'false'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: string;
}

/**
 * @interface
 * An interface representing Restriction.
 * The restriction because of which SKU cannot be used.
 *
 */
export interface Restriction {
  /**
   * @member {string} [type] The type of restrictions. As of now only possible
   * value for this is location.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string[]} [values] The value of restrictions. If the restriction
   * type is set to location. This would be different locations where the SKU
   * is restricted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly values?: string[];
  /**
   * @member {ReasonCode} [reasonCode] The reason for the restriction. As of
   * now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is
   * set when the SKU has requiredQuotas parameter as the subscription does not
   * belong to that quota. The "NotAvailableForSubscription" is related to
   * capacity at DC. Possible values include: 'QuotaId',
   * 'NotAvailableForSubscription'
   */
  reasonCode?: ReasonCode;
}

/**
 * @interface
 * An interface representing Sku.
 * The SKU of the storage account.
 *
 */
export interface Sku {
  /**
   * @member {SkuName} name Gets or sets the sku name. Required for account
   * creation; optional for update. Note that in older versions, sku name was
   * called accountType. Possible values include: 'Standard_LRS',
   * 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS', 'Premium_LRS',
   * 'Premium_ZRS'
   */
  name: SkuName;
  /**
   * @member {SkuTier} [tier] Gets the sku tier. This is based on the SKU name.
   * Possible values include: 'Standard', 'Premium'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tier?: SkuTier;
  /**
   * @member {string} [resourceType] The type of the resource, usually it is
   * 'storageAccounts'.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resourceType?: string;
  /**
   * @member {Kind} [kind] Indicates the type of storage account. Possible
   * values include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
   * 'BlockBlobStorage'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly kind?: Kind;
  /**
   * @member {string[]} [locations] The set of locations that the SKU is
   * available. This will be supported and registered Azure Geo Regions (e.g.
   * West US, East US, Southeast Asia, etc.).
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly locations?: string[];
  /**
   * @member {SKUCapability[]} [capabilities] The capability information in the
   * specified sku, including file encryption, network acls, change
   * notification, etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly capabilities?: SKUCapability[];
  /**
   * @member {Restriction[]} [restrictions] The restrictions because of which
   * SKU cannot be used. This is empty if there are no restrictions.
   */
  restrictions?: Restriction[];
}

/**
 * @interface
 * An interface representing CheckNameAvailabilityResult.
 * The CheckNameAvailability operation response.
 *
 */
export interface CheckNameAvailabilityResult {
  /**
   * @member {boolean} [nameAvailable] Gets a boolean value that indicates
   * whether the name is available for you to use. If true, the name is
   * available. If false, the name has already been taken or is invalid and
   * cannot be used.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nameAvailable?: boolean;
  /**
   * @member {Reason} [reason] Gets the reason that a storage account name
   * could not be used. The Reason element is only returned if NameAvailable is
   * false. Possible values include: 'AccountNameInvalid', 'AlreadyExists'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly reason?: Reason;
  /**
   * @member {string} [message] Gets an error message explaining the Reason
   * value in more detail.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
}

/**
 * @interface
 * An interface representing CustomDomain.
 * The custom domain assigned to this storage account. This can be set via
 * Update.
 *
 */
export interface CustomDomain {
  /**
   * @member {string} name Gets or sets the custom domain name assigned to the
   * storage account. Name is the CNAME source.
   */
  name: string;
  /**
   * @member {boolean} [useSubDomain] Indicates whether indirect CName
   * validation is enabled. Default value is false. This should only be set on
   * updates.
   */
  useSubDomain?: boolean;
}

/**
 * @interface
 * An interface representing EncryptionService.
 * A service that allows server-side encryption to be used.
 *
 */
export interface EncryptionService {
  /**
   * @member {boolean} [enabled] A boolean indicating whether or not the
   * service encrypts the data as it is stored.
   */
  enabled?: boolean;
  /**
   * @member {Date} [lastEnabledTime] Gets a rough estimate of the date/time
   * when the encryption was last enabled by the user. Only returned when
   * encryption is enabled. There might be some unencrypted blobs which were
   * written after this time, as it is just a rough estimate.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastEnabledTime?: Date;
}

/**
 * @interface
 * An interface representing EncryptionServices.
 * A list of services that support encryption.
 *
 */
export interface EncryptionServices {
  /**
   * @member {EncryptionService} [blob] The encryption function of the blob
   * storage service.
   */
  blob?: EncryptionService;
  /**
   * @member {EncryptionService} [file] The encryption function of the file
   * storage service.
   */
  file?: EncryptionService;
  /**
   * @member {EncryptionService} [table] The encryption function of the table
   * storage service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly table?: EncryptionService;
  /**
   * @member {EncryptionService} [queue] The encryption function of the queue
   * storage service.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly queue?: EncryptionService;
}

/**
 * @interface
 * An interface representing KeyVaultProperties.
 * Properties of key vault.
 *
 */
export interface KeyVaultProperties {
  /**
   * @member {string} [keyName] The name of KeyVault key.
   */
  keyName?: string;
  /**
   * @member {string} [keyVersion] The version of KeyVault key.
   */
  keyVersion?: string;
  /**
   * @member {string} [keyVaultUri] The Uri of KeyVault.
   */
  keyVaultUri?: string;
}

/**
 * @interface
 * An interface representing Encryption.
 * The encryption settings on the storage account.
 *
 */
export interface Encryption {
  /**
   * @member {EncryptionServices} [services] List of services which support
   * encryption.
   */
  services?: EncryptionServices;
  /**
   * @member {KeySource} keySource The encryption keySource (provider).
   * Possible values (case-insensitive):  Microsoft.Storage,
   * Microsoft.Keyvault. Possible values include: 'Microsoft.Storage',
   * 'Microsoft.Keyvault'. Default value: 'Microsoft.Storage' .
   */
  keySource: KeySource;
  /**
   * @member {KeyVaultProperties} [keyVaultProperties] Properties provided by
   * key vault.
   */
  keyVaultProperties?: KeyVaultProperties;
}

/**
 * @interface
 * An interface representing VirtualNetworkRule.
 * Virtual Network rule.
 *
 */
export interface VirtualNetworkRule {
  /**
   * @member {string} virtualNetworkResourceId Resource ID of a subnet, for
   * example:
   * /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
   */
  virtualNetworkResourceId: string;
  /**
   * @member {Action} [action] The action of virtual network rule. Possible
   * values include: 'Allow'. Default value: 'Allow' .
   */
  action?: Action;
  /**
   * @member {State} [state] Gets the state of virtual network rule. Possible
   * values include: 'provisioning', 'deprovisioning', 'succeeded', 'failed',
   * 'networkSourceDeleted'
   */
  state?: State;
}

/**
 * @interface
 * An interface representing IPRule.
 * IP rule with specific IP or IP range in CIDR format.
 *
 */
export interface IPRule {
  /**
   * @member {string} iPAddressOrRange Specifies the IP or IP range in CIDR
   * format. Only IPV4 address is allowed.
   */
  iPAddressOrRange: string;
  /**
   * @member {Action} [action] The action of IP ACL rule. Possible values
   * include: 'Allow'. Default value: 'Allow' .
   */
  action?: Action;
}

/**
 * @interface
 * An interface representing NetworkRuleSet.
 * Network rule set
 *
 */
export interface NetworkRuleSet {
  /**
   * @member {Bypass} [bypass] Specifies whether traffic is bypassed for
   * Logging/Metrics/AzureServices. Possible values are any combination of
   * Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None
   * to bypass none of those traffics. Possible values include: 'None',
   * 'Logging', 'Metrics', 'AzureServices'. Default value: 'AzureServices' .
   */
  bypass?: Bypass;
  /**
   * @member {VirtualNetworkRule[]} [virtualNetworkRules] Sets the virtual
   * network rules
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * @member {IPRule[]} [ipRules] Sets the IP ACL rules
   */
  ipRules?: IPRule[];
  /**
   * @member {DefaultAction} defaultAction Specifies the default action of
   * allow or deny when no other rules match. Possible values include: 'Allow',
   * 'Deny'. Default value: 'Allow' .
   */
  defaultAction: DefaultAction;
}

/**
 * @interface
 * An interface representing Identity.
 * Identity for the resource.
 *
 */
export interface Identity {
  /**
   * @member {string} [principalId] The principal ID of resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly principalId?: string;
  /**
   * @member {string} [tenantId] The tenant ID of resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
}

/**
 * @interface
 * An interface representing StorageAccountCreateParameters.
 * The parameters used when creating a storage account.
 *
 */
export interface StorageAccountCreateParameters {
  /**
   * @member {Sku} sku Required. Gets or sets the sku name.
   */
  sku: Sku;
  /**
   * @member {Kind} kind Required. Indicates the type of storage account.
   * Possible values include: 'Storage', 'StorageV2', 'BlobStorage',
   * 'FileStorage', 'BlockBlobStorage'
   */
  kind: Kind;
  /**
   * @member {string} location Required. Gets or sets the location of the
   * resource. This will be one of the supported and registered Azure Geo
   * Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a
   * resource cannot be changed once it is created, but if an identical geo
   * region is specified on update, the request will succeed.
   */
  location: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Gets or sets a list of
   * key value pairs that describe the resource. These tags can be used for
   * viewing and grouping this resource (across resource groups). A maximum of
   * 15 tags can be provided for a resource. Each tag must have a key with a
   * length no greater than 128 characters and a value with a length no greater
   * than 256 characters.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {Identity} [identity] The identity of the resource.
   */
  identity?: Identity;
  /**
   * @member {CustomDomain} [customDomain] User domain assigned to the storage
   * account. Name is the CNAME source. Only one custom domain is supported per
   * storage account at this time. To clear the existing custom domain, use an
   * empty string for the custom domain name property.
   */
  customDomain?: CustomDomain;
  /**
   * @member {Encryption} [encryption] Provides the encryption settings on the
   * account. If left unspecified the account encryption settings will remain
   * the same. The default setting is unencrypted.
   */
  encryption?: Encryption;
  /**
   * @member {NetworkRuleSet} [networkRuleSet] Network rule set
   */
  networkRuleSet?: NetworkRuleSet;
  /**
   * @member {AccessTier} [accessTier] Required for storage accounts where kind
   * = BlobStorage. The access tier used for billing. Possible values include:
   * 'Hot', 'Cool'
   */
  accessTier?: AccessTier;
  /**
   * @member {boolean} [enableAzureFilesAadIntegration] Enables Azure Files AAD
   * Integration for SMB if sets to true.
   */
  enableAzureFilesAadIntegration?: boolean;
  /**
   * @member {boolean} [enableHttpsTrafficOnly] Allows https traffic only to
   * storage service if sets to true.
   */
  enableHttpsTrafficOnly?: boolean;
  /**
   * @member {boolean} [isHnsEnabled] Account HierarchicalNamespace enabled if
   * sets to true.
   */
  isHnsEnabled?: boolean;
}

/**
 * @interface
 * An interface representing Endpoints.
 * The URIs that are used to perform a retrieval of a public blob, queue,
 * table, web or dfs object.
 *
 */
export interface Endpoints {
  /**
   * @member {string} [blob] Gets the blob endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly blob?: string;
  /**
   * @member {string} [queue] Gets the queue endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly queue?: string;
  /**
   * @member {string} [table] Gets the table endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly table?: string;
  /**
   * @member {string} [file] Gets the file endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly file?: string;
  /**
   * @member {string} [web] Gets the web endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly web?: string;
  /**
   * @member {string} [dfs] Gets the dfs endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dfs?: string;
}

/**
 * @interface
 * An interface representing Resource.
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] The type of the resource. Ex-
   * Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TrackedResource.
 * The resource model definition for a ARM tracked top level resource
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} location The geo-location where the resource lives
   */
  location: string;
}

/**
 * @interface
 * An interface representing StorageAccount.
 * The storage account.
 *
 * @extends TrackedResource
 */
export interface StorageAccount extends TrackedResource {
  /**
   * @member {Sku} [sku] Gets the SKU.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly sku?: Sku;
  /**
   * @member {Kind} [kind] Gets the Kind. Possible values include: 'Storage',
   * 'StorageV2', 'BlobStorage', 'FileStorage', 'BlockBlobStorage'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly kind?: Kind;
  /**
   * @member {Identity} [identity] The identity of the resource.
   */
  identity?: Identity;
  /**
   * @member {ProvisioningState} [provisioningState] Gets the status of the
   * storage account at the time the operation was called. Possible values
   * include: 'Creating', 'ResolvingDNS', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * @member {Endpoints} [primaryEndpoints] Gets the URLs that are used to
   * perform a retrieval of a public blob, queue, or table object. Note that
   * Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryEndpoints?: Endpoints;
  /**
   * @member {string} [primaryLocation] Gets the location of the primary data
   * center for the storage account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryLocation?: string;
  /**
   * @member {AccountStatus} [statusOfPrimary] Gets the status indicating
   * whether the primary location of the storage account is available or
   * unavailable. Possible values include: 'available', 'unavailable'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusOfPrimary?: AccountStatus;
  /**
   * @member {Date} [lastGeoFailoverTime] Gets the timestamp of the most recent
   * instance of a failover to the secondary location. Only the most recent
   * timestamp is retained. This element is not returned if there has never
   * been a failover instance. Only available if the accountType is
   * Standard_GRS or Standard_RAGRS.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastGeoFailoverTime?: Date;
  /**
   * @member {string} [secondaryLocation] Gets the location of the
   * geo-replicated secondary for the storage account. Only available if the
   * accountType is Standard_GRS or Standard_RAGRS.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryLocation?: string;
  /**
   * @member {AccountStatus} [statusOfSecondary] Gets the status indicating
   * whether the secondary location of the storage account is available or
   * unavailable. Only available if the SKU name is Standard_GRS or
   * Standard_RAGRS. Possible values include: 'available', 'unavailable'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly statusOfSecondary?: AccountStatus;
  /**
   * @member {Date} [creationTime] Gets the creation date and time of the
   * storage account in UTC.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly creationTime?: Date;
  /**
   * @member {CustomDomain} [customDomain] Gets the custom domain the user
   * assigned to this storage account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly customDomain?: CustomDomain;
  /**
   * @member {Endpoints} [secondaryEndpoints] Gets the URLs that are used to
   * perform a retrieval of a public blob, queue, or table object from the
   * secondary location of the storage account. Only available if the SKU name
   * is Standard_RAGRS.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly secondaryEndpoints?: Endpoints;
  /**
   * @member {Encryption} [encryption] Gets the encryption settings on the
   * account. If unspecified, the account is unencrypted.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly encryption?: Encryption;
  /**
   * @member {AccessTier} [accessTier] Required for storage accounts where kind
   * = BlobStorage. The access tier used for billing. Possible values include:
   * 'Hot', 'Cool'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accessTier?: AccessTier;
  /**
   * @member {boolean} [enableAzureFilesAadIntegration] Enables Azure Files AAD
   * Integration for SMB if sets to true.
   */
  enableAzureFilesAadIntegration?: boolean;
  /**
   * @member {boolean} [enableHttpsTrafficOnly] Allows https traffic only to
   * storage service if sets to true.
   */
  enableHttpsTrafficOnly?: boolean;
  /**
   * @member {NetworkRuleSet} [networkRuleSet] Network rule set
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly networkRuleSet?: NetworkRuleSet;
  /**
   * @member {boolean} [isHnsEnabled] Account HierarchicalNamespace enabled if
   * sets to true.
   */
  isHnsEnabled?: boolean;
}

/**
 * @interface
 * An interface representing StorageAccountKey.
 * An access key for the storage account.
 *
 */
export interface StorageAccountKey {
  /**
   * @member {string} [keyName] Name of the key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly keyName?: string;
  /**
   * @member {string} [value] Base 64-encoded value of the key.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: string;
  /**
   * @member {KeyPermission} [permissions] Permissions for the key -- read-only
   * or full permissions. Possible values include: 'Read', 'Full'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly permissions?: KeyPermission;
}

/**
 * @interface
 * An interface representing StorageAccountListKeysResult.
 * The response from the ListKeys operation.
 *
 */
export interface StorageAccountListKeysResult {
  /**
   * @member {StorageAccountKey[]} [keys] Gets the list of storage account keys
   * and their properties for the specified storage account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly keys?: StorageAccountKey[];
}

/**
 * @interface
 * An interface representing StorageAccountRegenerateKeyParameters.
 * The parameters used to regenerate the storage account key.
 *
 */
export interface StorageAccountRegenerateKeyParameters {
  /**
   * @member {string} keyName The name of storage keys that want to be
   * regenerated, possible vaules are key1, key2.
   */
  keyName: string;
}

/**
 * @interface
 * An interface representing StorageAccountUpdateParameters.
 * The parameters that can be provided when updating the storage account
 * properties.
 *
 */
export interface StorageAccountUpdateParameters {
  /**
   * @member {Sku} [sku] Gets or sets the SKU name. Note that the SKU name
   * cannot be updated to Standard_ZRS, Premium_LRS or Premium_ZRS, nor can
   * accounts of those sku names be updated to any other value.
   */
  sku?: Sku;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Gets or sets a list of
   * key value pairs that describe the resource. These tags can be used in
   * viewing and grouping this resource (across resource groups). A maximum of
   * 15 tags can be provided for a resource. Each tag must have a key no
   * greater in length than 128 characters and a value no greater in length
   * than 256 characters.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {Identity} [identity] The identity of the resource.
   */
  identity?: Identity;
  /**
   * @member {CustomDomain} [customDomain] Custom domain assigned to the
   * storage account by the user. Name is the CNAME source. Only one custom
   * domain is supported per storage account at this time. To clear the
   * existing custom domain, use an empty string for the custom domain name
   * property.
   */
  customDomain?: CustomDomain;
  /**
   * @member {Encryption} [encryption] Provides the encryption settings on the
   * account. The default setting is unencrypted.
   */
  encryption?: Encryption;
  /**
   * @member {AccessTier} [accessTier] Required for storage accounts where kind
   * = BlobStorage. The access tier used for billing. Possible values include:
   * 'Hot', 'Cool'
   */
  accessTier?: AccessTier;
  /**
   * @member {boolean} [enableAzureFilesAadIntegration] Enables Azure Files AAD
   * Integration for SMB if sets to true.
   */
  enableAzureFilesAadIntegration?: boolean;
  /**
   * @member {boolean} [enableHttpsTrafficOnly] Allows https traffic only to
   * storage service if sets to true.
   */
  enableHttpsTrafficOnly?: boolean;
  /**
   * @member {NetworkRuleSet} [networkRuleSet] Network rule set
   */
  networkRuleSet?: NetworkRuleSet;
  /**
   * @member {Kind} [kind] Optional. Indicates the type of storage account.
   * Currently only StorageV2 value supported by server. Possible values
   * include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
   * 'BlockBlobStorage'
   */
  kind?: Kind;
}

/**
 * @interface
 * An interface representing UsageName.
 * The usage names that can be used; currently limited to StorageAccount.
 *
 */
export interface UsageName {
  /**
   * @member {string} [value] Gets a string describing the resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly value?: string;
  /**
   * @member {string} [localizedValue] Gets a localized string describing the
   * resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly localizedValue?: string;
}

/**
 * @interface
 * An interface representing Usage.
 * Describes Storage Resource Usage.
 *
 */
export interface Usage {
  /**
   * @member {UsageUnit} [unit] Gets the unit of measurement. Possible values
   * include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountsPerSecond',
   * 'BytesPerSecond'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly unit?: UsageUnit;
  /**
   * @member {number} [currentValue] Gets the current count of the allocated
   * resources in the subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly currentValue?: number;
  /**
   * @member {number} [limit] Gets the maximum count of the resources that can
   * be allocated in the subscription.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly limit?: number;
  /**
   * @member {UsageName} [name] Gets the name of the type of usage.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: UsageName;
}

/**
 * @interface
 * An interface representing AccountSasParameters.
 * The parameters to list SAS credentials of a storage account.
 *
 */
export interface AccountSasParameters {
  /**
   * @member {Services} services The signed services accessible with the
   * account SAS. Possible values include: Blob (b), Queue (q), Table (t), File
   * (f). Possible values include: 'b', 'q', 't', 'f'
   */
  services: Services;
  /**
   * @member {SignedResourceTypes} resourceTypes The signed resource types that
   * are accessible with the account SAS. Service (s): Access to service-level
   * APIs; Container (c): Access to container-level APIs; Object (o): Access to
   * object-level APIs for blobs, queue messages, table entities, and files.
   * Possible values include: 's', 'c', 'o'
   */
  resourceTypes: SignedResourceTypes;
  /**
   * @member {Permissions} permissions The signed permissions for the account
   * SAS. Possible values include: Read (r), Write (w), Delete (d), List (l),
   * Add (a), Create (c), Update (u) and Process (p). Possible values include:
   * 'r', 'd', 'w', 'l', 'a', 'c', 'u', 'p'
   */
  permissions: Permissions;
  /**
   * @member {string} [iPAddressOrRange] An IP address or a range of IP
   * addresses from which to accept requests.
   */
  iPAddressOrRange?: string;
  /**
   * @member {HttpProtocol} [protocols] The protocol permitted for a request
   * made with the account SAS. Possible values include: 'https,http', 'https'
   */
  protocols?: HttpProtocol;
  /**
   * @member {Date} [sharedAccessStartTime] The time at which the SAS becomes
   * valid.
   */
  sharedAccessStartTime?: Date;
  /**
   * @member {Date} sharedAccessExpiryTime The time at which the shared access
   * signature becomes invalid.
   */
  sharedAccessExpiryTime: Date;
  /**
   * @member {string} [keyToSign] The key to sign the account SAS token with.
   */
  keyToSign?: string;
}

/**
 * @interface
 * An interface representing ListAccountSasResponse.
 * The List SAS credentials operation response.
 *
 */
export interface ListAccountSasResponse {
  /**
   * @member {string} [accountSasToken] List SAS credentials of storage
   * account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly accountSasToken?: string;
}

/**
 * @interface
 * An interface representing ServiceSasParameters.
 * The parameters to list service SAS credentials of a speicific resource.
 *
 */
export interface ServiceSasParameters {
  /**
   * @member {string} canonicalizedResource The canonical path to the signed
   * resource.
   */
  canonicalizedResource: string;
  /**
   * @member {SignedResource} [resource] The signed services accessible with
   * the service SAS. Possible values include: Blob (b), Container (c), File
   * (f), Share (s). Possible values include: 'b', 'c', 'f', 's'
   */
  resource?: SignedResource;
  /**
   * @member {Permissions} [permissions] The signed permissions for the service
   * SAS. Possible values include: Read (r), Write (w), Delete (d), List (l),
   * Add (a), Create (c), Update (u) and Process (p). Possible values include:
   * 'r', 'd', 'w', 'l', 'a', 'c', 'u', 'p'
   */
  permissions?: Permissions;
  /**
   * @member {string} [iPAddressOrRange] An IP address or a range of IP
   * addresses from which to accept requests.
   */
  iPAddressOrRange?: string;
  /**
   * @member {HttpProtocol} [protocols] The protocol permitted for a request
   * made with the account SAS. Possible values include: 'https,http', 'https'
   */
  protocols?: HttpProtocol;
  /**
   * @member {Date} [sharedAccessStartTime] The time at which the SAS becomes
   * valid.
   */
  sharedAccessStartTime?: Date;
  /**
   * @member {Date} [sharedAccessExpiryTime] The time at which the shared
   * access signature becomes invalid.
   */
  sharedAccessExpiryTime?: Date;
  /**
   * @member {string} [identifier] A unique value up to 64 characters in length
   * that correlates to an access policy specified for the container, queue, or
   * table.
   */
  identifier?: string;
  /**
   * @member {string} [partitionKeyStart] The start of partition key.
   */
  partitionKeyStart?: string;
  /**
   * @member {string} [partitionKeyEnd] The end of partition key.
   */
  partitionKeyEnd?: string;
  /**
   * @member {string} [rowKeyStart] The start of row key.
   */
  rowKeyStart?: string;
  /**
   * @member {string} [rowKeyEnd] The end of row key.
   */
  rowKeyEnd?: string;
  /**
   * @member {string} [keyToSign] The key to sign the account SAS token with.
   */
  keyToSign?: string;
  /**
   * @member {string} [cacheControl] The response header override for cache
   * control.
   */
  cacheControl?: string;
  /**
   * @member {string} [contentDisposition] The response header override for
   * content disposition.
   */
  contentDisposition?: string;
  /**
   * @member {string} [contentEncoding] The response header override for
   * content encoding.
   */
  contentEncoding?: string;
  /**
   * @member {string} [contentLanguage] The response header override for
   * content language.
   */
  contentLanguage?: string;
  /**
   * @member {string} [contentType] The response header override for content
   * type.
   */
  contentType?: string;
}

/**
 * @interface
 * An interface representing ListServiceSasResponse.
 * The List service SAS credentials operation response.
 *
 */
export interface ListServiceSasResponse {
  /**
   * @member {string} [serviceSasToken] List service SAS credentials of
   * speicific resource.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly serviceSasToken?: string;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags
 *
 * @extends Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * @interface
 * An interface representing AzureEntityResource.
 * The resource model definition for a Azure Resource Manager resource with an
 * etag.
 *
 * @extends Resource
 */
export interface AzureEntityResource extends Resource {
  /**
   * @member {string} [etag] Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
}

/**
 * @interface
 * An interface representing UpdateHistoryProperty.
 * An update history of the ImmutabilityPolicy of a blob container.
 *
 */
export interface UpdateHistoryProperty {
  /**
   * @member {ImmutabilityPolicyUpdateType} [update] The ImmutabilityPolicy
   * update type of a blob container, possible values include: put, lock and
   * extend. Possible values include: 'put', 'lock', 'extend'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly update?: ImmutabilityPolicyUpdateType;
  /**
   * @member {number} [immutabilityPeriodSinceCreationInDays] The immutability
   * period for the blobs in the container since the policy creation, in days.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly immutabilityPeriodSinceCreationInDays?: number;
  /**
   * @member {Date} [timestamp] Returns the date and time the
   * ImmutabilityPolicy was updated.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: Date;
  /**
   * @member {string} [objectIdentifier] Returns the Object ID of the user who
   * updated the ImmutabilityPolicy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly objectIdentifier?: string;
  /**
   * @member {string} [tenantId] Returns the Tenant ID that issued the token
   * for the user who updated the ImmutabilityPolicy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [upn] Returns the User Principal Name of the user who
   * updated the ImmutabilityPolicy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly upn?: string;
}

/**
 * @interface
 * An interface representing ImmutabilityPolicyProperties.
 * The properties of an ImmutabilityPolicy of a blob container.
 *
 */
export interface ImmutabilityPolicyProperties {
  /**
   * @member {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   */
  immutabilityPeriodSinceCreationInDays: number;
  /**
   * @member {ImmutabilityPolicyState} [state] The ImmutabilityPolicy state of
   * a blob container, possible values include: Locked and Unlocked. Possible
   * values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: ImmutabilityPolicyState;
  /**
   * @member {string} [etag] ImmutabilityPolicy Etag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly etag?: string;
  /**
   * @member {UpdateHistoryProperty[]} [updateHistory] The ImmutabilityPolicy
   * update history of the blob container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly updateHistory?: UpdateHistoryProperty[];
}

/**
 * @interface
 * An interface representing TagProperty.
 * A tag of the LegalHold of a blob container.
 *
 */
export interface TagProperty {
  /**
   * @member {string} [tag] The tag value.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tag?: string;
  /**
   * @member {Date} [timestamp] Returns the date and time the tag was added.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly timestamp?: Date;
  /**
   * @member {string} [objectIdentifier] Returns the Object ID of the user who
   * added the tag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly objectIdentifier?: string;
  /**
   * @member {string} [tenantId] Returns the Tenant ID that issued the token
   * for the user who added the tag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [upn] Returns the User Principal Name of the user who
   * added the tag.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly upn?: string;
}

/**
 * @interface
 * An interface representing LegalHoldProperties.
 * The LegalHold property of a blob container.
 *
 */
export interface LegalHoldProperties {
  /**
   * @member {boolean} [hasLegalHold] The hasLegalHold public property is set
   * to true by SRP if there are at least one existing tag. The hasLegalHold
   * public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with
   * hasLegalHold=true for a given account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * @member {TagProperty[]} [tags] The list of LegalHold tags of a blob
   * container.
   */
  tags?: TagProperty[];
}

/**
 * @interface
 * An interface representing BlobContainer.
 * Properties of the blob container, including Id, resource name, resource
 * type, Etag.
 *
 * @extends AzureEntityResource
 */
export interface BlobContainer extends AzureEntityResource {
  /**
   * @member {PublicAccess} [publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible
   * values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * @member {Date} [lastModifiedTime] Returns the date and time the container
   * was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * @member {LeaseStatus} [leaseStatus] The lease status of the container.
   * Possible values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * @member {LeaseState} [leaseState] Lease state of the container. Possible
   * values include: 'Available', 'Leased', 'Expired', 'Breaking', 'Broken'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly leaseState?: LeaseState;
  /**
   * @member {LeaseDuration} [leaseDuration] Specifies whether the lease on a
   * container is of infinite or fixed duration, only when the container is
   * leased. Possible values include: 'Infinite', 'Fixed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly leaseDuration?: LeaseDuration;
  /**
   * @member {{ [propertyName: string]: string }} [metadata] A name-value pair
   * to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * @member {ImmutabilityPolicyProperties} [immutabilityPolicy] The
   * ImmutabilityPolicy property of the container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * @member {LegalHoldProperties} [legalHold] The LegalHold property of the
   * container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * @member {boolean} [hasLegalHold] The hasLegalHold public property is set
   * to true by SRP if there are at least one existing tag. The hasLegalHold
   * public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with
   * hasLegalHold=true for a given account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * @member {boolean} [hasImmutabilityPolicy] The hasImmutabilityPolicy public
   * property is set to true by SRP if ImmutabilityPolicy has been created for
   * this container. The hasImmutabilityPolicy public property is set to false
   * by SRP if ImmutabilityPolicy has not been created for this container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasImmutabilityPolicy?: boolean;
}

/**
 * @interface
 * An interface representing ImmutabilityPolicy.
 * The ImmutabilityPolicy property of a blob container, including Id, resource
 * name, resource type, Etag.
 *
 * @extends AzureEntityResource
 */
export interface ImmutabilityPolicy extends AzureEntityResource {
  /**
   * @member {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   */
  immutabilityPeriodSinceCreationInDays: number;
  /**
   * @member {ImmutabilityPolicyState} [state] The ImmutabilityPolicy state of
   * a blob container, possible values include: Locked and Unlocked. Possible
   * values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: ImmutabilityPolicyState;
}

/**
 * @interface
 * An interface representing LegalHold.
 * The LegalHold property of a blob container.
 *
 */
export interface LegalHold {
  /**
   * @member {boolean} [hasLegalHold] The hasLegalHold public property is set
   * to true by SRP if there are at least one existing tag. The hasLegalHold
   * public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with
   * hasLegalHold=true for a given account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * @member {string[]} tags Each tag should be 3 to 23 alphanumeric characters
   * and is normalized to lower case at SRP.
   */
  tags: string[];
}

/**
 * @interface
 * An interface representing ListContainerItem.
 * The blob container properties be listed out.
 *
 * @extends AzureEntityResource
 */
export interface ListContainerItem extends AzureEntityResource {
  /**
   * @member {PublicAccess} [publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible
   * values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * @member {Date} [lastModifiedTime] Returns the date and time the container
   * was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * @member {LeaseStatus} [leaseStatus] The lease status of the container.
   * Possible values include: 'Locked', 'Unlocked'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly leaseStatus?: LeaseStatus;
  /**
   * @member {LeaseState} [leaseState] Lease state of the container. Possible
   * values include: 'Available', 'Leased', 'Expired', 'Breaking', 'Broken'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly leaseState?: LeaseState;
  /**
   * @member {LeaseDuration} [leaseDuration] Specifies whether the lease on a
   * container is of infinite or fixed duration, only when the container is
   * leased. Possible values include: 'Infinite', 'Fixed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly leaseDuration?: LeaseDuration;
  /**
   * @member {{ [propertyName: string]: string }} [metadata] A name-value pair
   * to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
  /**
   * @member {ImmutabilityPolicyProperties} [immutabilityPolicy] The
   * ImmutabilityPolicy property of the container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly immutabilityPolicy?: ImmutabilityPolicyProperties;
  /**
   * @member {LegalHoldProperties} [legalHold] The LegalHold property of the
   * container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly legalHold?: LegalHoldProperties;
  /**
   * @member {boolean} [hasLegalHold] The hasLegalHold public property is set
   * to true by SRP if there are at least one existing tag. The hasLegalHold
   * public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with
   * hasLegalHold=true for a given account.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasLegalHold?: boolean;
  /**
   * @member {boolean} [hasImmutabilityPolicy] The hasImmutabilityPolicy public
   * property is set to true by SRP if ImmutabilityPolicy has been created for
   * this container. The hasImmutabilityPolicy public property is set to false
   * by SRP if ImmutabilityPolicy has not been created for this container.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly hasImmutabilityPolicy?: boolean;
}

/**
 * @interface
 * An interface representing ListContainerItems.
 * The list of blob containers.
 *
 */
export interface ListContainerItems {
  /**
   * @member {ListContainerItem[]} [value] The list of blob containers.
   */
  value?: ListContainerItem[];
}

/**
 * @interface
 * An interface representing CorsRule.
 * Specifies a CORS rule for the Blob service.
 *
 */
export interface CorsRule {
  /**
   * @member {string[]} allowedOrigins Required if CorsRule element is present.
   * A list of origin domains that will be allowed via CORS, or "*" to allow
   * all domains
   */
  allowedOrigins: string[];
  /**
   * @member {string[]} allowedMethods Required if CorsRule element is present.
   * A list of HTTP methods that are allowed to be executed by the origin.
   */
  allowedMethods: string[];
  /**
   * @member {number} maxAgeInSeconds Required if CorsRule element is present.
   * The number of seconds that the client/browser should cache a preflight
   * response.
   */
  maxAgeInSeconds: number;
  /**
   * @member {string[]} exposedHeaders Required if CorsRule element is present.
   * A list of response headers to expose to CORS clients.
   */
  exposedHeaders: string[];
  /**
   * @member {string[]} allowedHeaders Required if CorsRule element is present.
   * A list of headers allowed to be part of the cross-origin request.
   */
  allowedHeaders: string[];
}

/**
 * @interface
 * An interface representing CorsRules.
 * Sets the CORS rules. You can include up to five CorsRule elements in the
 * request.
 *
 */
export interface CorsRules {
  /**
   * @member {CorsRule[]} [corsRules] The List of CORS rules. You can include
   * up to five CorsRule elements in the request.
   */
  corsRules?: CorsRule[];
}

/**
 * @interface
 * An interface representing DeleteRetentionPolicy.
 * The blob service properties for soft delete.
 *
 */
export interface DeleteRetentionPolicy {
  /**
   * @member {boolean} [enabled] Indicates whether DeleteRetentionPolicy is
   * enabled for the Blob service.
   */
  enabled?: boolean;
  /**
   * @member {number} [days] Indicates the number of days that the deleted blob
   * should be retained. The minimum specified value can be 1 and the maximum
   * value can be 365.
   */
  days?: number;
}

/**
 * @interface
 * An interface representing BlobServiceProperties.
 * The properties of a storage account’s Blob service.
 *
 * @extends Resource
 */
export interface BlobServiceProperties extends Resource {
  /**
   * @member {CorsRules} [cors] Specifies CORS rules for the Blob service. You
   * can include up to five CorsRule elements in the request. If no CorsRule
   * elements are included in the request body, all CORS rules will be deleted,
   * and CORS will be disabled for the Blob service.
   */
  cors?: CorsRules;
  /**
   * @member {string} [defaultServiceVersion] DefaultServiceVersion indicates
   * the default version to use for requests to the Blob service if an incoming
   * request’s version is not specified. Possible values include version
   * 2008-10-27 and all more recent versions.
   */
  defaultServiceVersion?: string;
  /**
   * @member {DeleteRetentionPolicy} [deleteRetentionPolicy] The blob service
   * properties for soft delete.
   */
  deleteRetentionPolicy?: DeleteRetentionPolicy;
}

/**
 * @interface
 * An interface representing StorageAccountManagementPolicies.
 * The Get Storage Account ManagementPolicies operation response.
 *
 * @extends Resource
 */
export interface StorageAccountManagementPolicies extends Resource {
  /**
   * @member {any} [policy] The Storage Account ManagementPolicies Rules, in
   * JSON format. See more details in:
   * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
   */
  policy?: any;
  /**
   * @member {Date} [lastModifiedTime] Returns the date and time the
   * ManagementPolicies was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * @interface
 * An interface representing ManagementPoliciesRulesSetParameter.
 * The Storage Account ManagementPolicies Rules, in JSON format. See more
 * details in:
 * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
 *
 */
export interface ManagementPoliciesRulesSetParameter {
  /**
   * @member {any} [policy] The Storage Account ManagementPolicies Rules, in
   * JSON format. See more details in:
   * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
   */
  policy?: any;
}

/**
 * @interface
 * An interface representing BlobContainersCreateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface BlobContainersCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {PublicAccess} [publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible
   * values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * @member {{ [propertyName: string]: string }} [metadata] A name-value pair
   * to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing BlobContainersUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface BlobContainersUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {PublicAccess} [publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible
   * values include: 'Container', 'Blob', 'None'
   */
  publicAccess?: PublicAccess;
  /**
   * @member {{ [propertyName: string]: string }} [metadata] A name-value pair
   * to associate with the container as metadata.
   */
  metadata?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the
   * immutability policy to update. A value of "*" can be used to apply the
   * operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing BlobContainersGetImmutabilityPolicyOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface BlobContainersGetImmutabilityPolicyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch] The entity state (ETag) version of the
   * immutability policy to update. A value of "*" can be used to apply the
   * operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing ManagementPoliciesCreateOrUpdateOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ManagementPoliciesCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {any} [policy] The Storage Account ManagementPolicies Rules, in
   * JSON format. See more details in:
   * https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
   */
  policy?: any;
}

/**
 * @interface
 * An interface representing StorageManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface StorageManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing BlobContainersCreateOrUpdateImmutabilityPolicyHeaders.
 * Defines headers for CreateOrUpdateImmutabilityPolicy operation.
 *
 */
export interface BlobContainersCreateOrUpdateImmutabilityPolicyHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing BlobContainersGetImmutabilityPolicyHeaders.
 * Defines headers for GetImmutabilityPolicy operation.
 *
 */
export interface BlobContainersGetImmutabilityPolicyHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing BlobContainersDeleteImmutabilityPolicyHeaders.
 * Defines headers for DeleteImmutabilityPolicy operation.
 *
 */
export interface BlobContainersDeleteImmutabilityPolicyHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing BlobContainersLockImmutabilityPolicyHeaders.
 * Defines headers for LockImmutabilityPolicy operation.
 *
 */
export interface BlobContainersLockImmutabilityPolicyHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing BlobContainersExtendImmutabilityPolicyHeaders.
 * Defines headers for ExtendImmutabilityPolicy operation.
 *
 */
export interface BlobContainersExtendImmutabilityPolicyHeaders {
  /**
   * @member {string} [eTag] The ETag HTTP response header. This is an opaque
   * string. You can use it to detect whether the resource has changed between
   * requests. In particular, you can pass the ETag to one of the If-Match or
   * If-None-Match headers.
   */
  eTag: string;
}


/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of the request to list Storage operations. It contains a list of
 * operations and a URL link to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
}

/**
 * @interface
 * An interface representing the StorageSkuListResult.
 * The response from the List Storage SKUs operation.
 *
 * @extends Array<Sku>
 */
export interface StorageSkuListResult extends Array<Sku> {
}

/**
 * @interface
 * An interface representing the StorageAccountListResult.
 * The response from the List Storage Accounts operation.
 *
 * @extends Array<StorageAccount>
 */
export interface StorageAccountListResult extends Array<StorageAccount> {
}

/**
 * @interface
 * An interface representing the UsageListResult.
 * The response from the List Usages operation.
 *
 * @extends Array<Usage>
 */
export interface UsageListResult extends Array<Usage> {
}

/**
 * Defines values for ReasonCode.
 * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
 * @readonly
 * @enum {string}
 */
export type ReasonCode = 'QuotaId' | 'NotAvailableForSubscription';

/**
 * Defines values for SkuName.
 * Possible values include: 'Standard_LRS', 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS',
 * 'Premium_LRS', 'Premium_ZRS'
 * @readonly
 * @enum {string}
 */
export type SkuName = 'Standard_LRS' | 'Standard_GRS' | 'Standard_RAGRS' | 'Standard_ZRS' | 'Premium_LRS' | 'Premium_ZRS';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Standard' | 'Premium';

/**
 * Defines values for Kind.
 * Possible values include: 'Storage', 'StorageV2', 'BlobStorage', 'FileStorage',
 * 'BlockBlobStorage'
 * @readonly
 * @enum {string}
 */
export type Kind = 'Storage' | 'StorageV2' | 'BlobStorage' | 'FileStorage' | 'BlockBlobStorage';

/**
 * Defines values for Reason.
 * Possible values include: 'AccountNameInvalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type Reason = 'AccountNameInvalid' | 'AlreadyExists';

/**
 * Defines values for KeySource.
 * Possible values include: 'Microsoft.Storage', 'Microsoft.Keyvault'
 * @readonly
 * @enum {string}
 */
export type KeySource = 'Microsoft.Storage' | 'Microsoft.Keyvault';

/**
 * Defines values for Action.
 * Possible values include: 'Allow'
 * @readonly
 * @enum {string}
 */
export type Action = 'Allow';

/**
 * Defines values for State.
 * Possible values include: 'provisioning', 'deprovisioning', 'succeeded', 'failed',
 * 'networkSourceDeleted'
 * @readonly
 * @enum {string}
 */
export type State = 'provisioning' | 'deprovisioning' | 'succeeded' | 'failed' | 'networkSourceDeleted';

/**
 * Defines values for Bypass.
 * Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
 * @readonly
 * @enum {string}
 */
export type Bypass = 'None' | 'Logging' | 'Metrics' | 'AzureServices';

/**
 * Defines values for DefaultAction.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type DefaultAction = 'Allow' | 'Deny';

/**
 * Defines values for AccessTier.
 * Possible values include: 'Hot', 'Cool'
 * @readonly
 * @enum {string}
 */
export type AccessTier = 'Hot' | 'Cool';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Creating', 'ResolvingDNS', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Creating' | 'ResolvingDNS' | 'Succeeded';

/**
 * Defines values for AccountStatus.
 * Possible values include: 'available', 'unavailable'
 * @readonly
 * @enum {string}
 */
export type AccountStatus = 'available' | 'unavailable';

/**
 * Defines values for KeyPermission.
 * Possible values include: 'Read', 'Full'
 * @readonly
 * @enum {string}
 */
export type KeyPermission = 'Read' | 'Full';

/**
 * Defines values for UsageUnit.
 * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountsPerSecond',
 * 'BytesPerSecond'
 * @readonly
 * @enum {string}
 */
export type UsageUnit = 'Count' | 'Bytes' | 'Seconds' | 'Percent' | 'CountsPerSecond' | 'BytesPerSecond';

/**
 * Defines values for Services.
 * Possible values include: 'b', 'q', 't', 'f'
 * @readonly
 * @enum {string}
 */
export type Services = 'b' | 'q' | 't' | 'f';

/**
 * Defines values for SignedResourceTypes.
 * Possible values include: 's', 'c', 'o'
 * @readonly
 * @enum {string}
 */
export type SignedResourceTypes = 's' | 'c' | 'o';

/**
 * Defines values for Permissions.
 * Possible values include: 'r', 'd', 'w', 'l', 'a', 'c', 'u', 'p'
 * @readonly
 * @enum {string}
 */
export type Permissions = 'r' | 'd' | 'w' | 'l' | 'a' | 'c' | 'u' | 'p';

/**
 * Defines values for HttpProtocol.
 * Possible values include: 'https,http', 'https'
 * @readonly
 * @enum {string}
 */
export type HttpProtocol = 'https,http' | 'https';

/**
 * Defines values for SignedResource.
 * Possible values include: 'b', 'c', 'f', 's'
 * @readonly
 * @enum {string}
 */
export type SignedResource = 'b' | 'c' | 'f' | 's';

/**
 * Defines values for PublicAccess.
 * Possible values include: 'Container', 'Blob', 'None'
 * @readonly
 * @enum {string}
 */
export type PublicAccess = 'Container' | 'Blob' | 'None';

/**
 * Defines values for LeaseStatus.
 * Possible values include: 'Locked', 'Unlocked'
 * @readonly
 * @enum {string}
 */
export type LeaseStatus = 'Locked' | 'Unlocked';

/**
 * Defines values for LeaseState.
 * Possible values include: 'Available', 'Leased', 'Expired', 'Breaking', 'Broken'
 * @readonly
 * @enum {string}
 */
export type LeaseState = 'Available' | 'Leased' | 'Expired' | 'Breaking' | 'Broken';

/**
 * Defines values for LeaseDuration.
 * Possible values include: 'Infinite', 'Fixed'
 * @readonly
 * @enum {string}
 */
export type LeaseDuration = 'Infinite' | 'Fixed';

/**
 * Defines values for ImmutabilityPolicyState.
 * Possible values include: 'Locked', 'Unlocked'
 * @readonly
 * @enum {string}
 */
export type ImmutabilityPolicyState = 'Locked' | 'Unlocked';

/**
 * Defines values for ImmutabilityPolicyUpdateType.
 * Possible values include: 'put', 'lock', 'extend'
 * @readonly
 * @enum {string}
 */
export type ImmutabilityPolicyUpdateType = 'put' | 'lock' | 'extend';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SkusListResponse = StorageSkuListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageSkuListResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type StorageAccountsCheckNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type StorageAccountsCreateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the getProperties operation.
 */
export type StorageAccountsGetPropertiesResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the update operation.
 */
export type StorageAccountsUpdateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the list operation.
 */
export type StorageAccountsListResponse = StorageAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type StorageAccountsListByResourceGroupResponse = StorageAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListResult;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type StorageAccountsListKeysResponse = StorageAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListKeysResult;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type StorageAccountsRegenerateKeyResponse = StorageAccountListKeysResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountListKeysResult;
    };
};

/**
 * Contains response data for the listAccountSAS operation.
 */
export type StorageAccountsListAccountSASResponse = ListAccountSasResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListAccountSasResponse;
    };
};

/**
 * Contains response data for the listServiceSAS operation.
 */
export type StorageAccountsListServiceSASResponse = ListServiceSasResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListServiceSasResponse;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type StorageAccountsBeginCreateResponse = StorageAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccount;
    };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type UsagesListByLocationResponse = UsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageListResult;
    };
};

/**
 * Contains response data for the setServiceProperties operation.
 */
export type BlobServicesSetServicePropertiesResponse = BlobServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobServiceProperties;
    };
};

/**
 * Contains response data for the getServiceProperties operation.
 */
export type BlobServicesGetServicePropertiesResponse = BlobServiceProperties & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobServiceProperties;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BlobContainersListResponse = ListContainerItems & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListContainerItems;
    };
};

/**
 * Contains response data for the create operation.
 */
export type BlobContainersCreateResponse = BlobContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobContainer;
    };
};

/**
 * Contains response data for the update operation.
 */
export type BlobContainersUpdateResponse = BlobContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobContainer;
    };
};

/**
 * Contains response data for the get operation.
 */
export type BlobContainersGetResponse = BlobContainer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BlobContainer;
    };
};

/**
 * Contains response data for the setLegalHold operation.
 */
export type BlobContainersSetLegalHoldResponse = LegalHold & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LegalHold;
    };
};

/**
 * Contains response data for the clearLegalHold operation.
 */
export type BlobContainersClearLegalHoldResponse = LegalHold & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LegalHold;
    };
};

/**
 * Contains response data for the createOrUpdateImmutabilityPolicy operation.
 */
export type BlobContainersCreateOrUpdateImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersCreateOrUpdateImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the getImmutabilityPolicy operation.
 */
export type BlobContainersGetImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersGetImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersGetImmutabilityPolicyHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the deleteImmutabilityPolicy operation.
 */
export type BlobContainersDeleteImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersDeleteImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersDeleteImmutabilityPolicyHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the lockImmutabilityPolicy operation.
 */
export type BlobContainersLockImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersLockImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersLockImmutabilityPolicyHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the extendImmutabilityPolicy operation.
 */
export type BlobContainersExtendImmutabilityPolicyResponse = ImmutabilityPolicy & BlobContainersExtendImmutabilityPolicyHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: BlobContainersExtendImmutabilityPolicyHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImmutabilityPolicy;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagementPoliciesGetResponse = StorageAccountManagementPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountManagementPolicies;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagementPoliciesCreateOrUpdateResponse = StorageAccountManagementPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StorageAccountManagementPolicies;
    };
};
