/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/blobContainersMappers";
import * as Parameters from "../models/parameters";
import { StorageManagementClientContext } from "../storageManagementClientContext";

/** Class representing a BlobContainers. */
export class BlobContainers {
  private readonly client: StorageManagementClientContext;

  /**
   * Create a BlobContainers.
   * @param {StorageManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorageManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all containers and does not support a prefix like data plane. Also SRP today does not
   * return continuation token.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.ListContainerItems>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListContainerItems>): void;
  list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListContainerItems>, callback?: msRest.ServiceCallback<Models.ListContainerItems>): Promise<Models.BlobContainersListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.BlobContainersListResponse>;
  }

  /**
   * Creates a new container under the specified account as described by request body. The container
   * resource includes metadata and properties for that container. It does not include a list of the
   * blobs contained by the container.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, containerName: string, options?: Models.BlobContainersCreateOptionalParams): Promise<Models.BlobContainersCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, containerName: string, callback: msRest.ServiceCallback<Models.BlobContainer>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, containerName: string, options: Models.BlobContainersCreateOptionalParams, callback: msRest.ServiceCallback<Models.BlobContainer>): void;
  create(resourceGroupName: string, accountName: string, containerName: string, options?: Models.BlobContainersCreateOptionalParams | msRest.ServiceCallback<Models.BlobContainer>, callback?: msRest.ServiceCallback<Models.BlobContainer>): Promise<Models.BlobContainersCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.BlobContainersCreateResponse>;
  }

  /**
   * Updates container properties as specified in request body. Properties not mentioned in the
   * request will be unchanged. Update fails if the specified container doesn't already exist.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, containerName: string, options?: Models.BlobContainersUpdateOptionalParams): Promise<Models.BlobContainersUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, containerName: string, callback: msRest.ServiceCallback<Models.BlobContainer>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, containerName: string, options: Models.BlobContainersUpdateOptionalParams, callback: msRest.ServiceCallback<Models.BlobContainer>): void;
  update(resourceGroupName: string, accountName: string, containerName: string, options?: Models.BlobContainersUpdateOptionalParams | msRest.ServiceCallback<Models.BlobContainer>, callback?: msRest.ServiceCallback<Models.BlobContainer>): Promise<Models.BlobContainersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.BlobContainersUpdateResponse>;
  }

  /**
   * Gets properties of a specified container.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersGetResponse>
   */
  get(resourceGroupName: string, accountName: string, containerName: string, options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, containerName: string, callback: msRest.ServiceCallback<Models.BlobContainer>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, containerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BlobContainer>): void;
  get(resourceGroupName: string, accountName: string, containerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BlobContainer>, callback?: msRest.ServiceCallback<Models.BlobContainer>): Promise<Models.BlobContainersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BlobContainersGetResponse>;
  }

  /**
   * Deletes specified container under its account.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, containerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, containerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, containerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, containerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold
   * follows an append pattern and does not clear out the existing tags that are not specified in the
   * request.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case
   * at SRP.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersSetLegalHoldResponse>
   */
  setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersSetLegalHoldResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case
   * at SRP.
   * @param callback The callback
   */
  setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], callback: msRest.ServiceCallback<Models.LegalHold>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case
   * at SRP.
   * @param options The optional parameters
   * @param callback The callback
   */
  setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LegalHold>): void;
  setLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LegalHold>, callback?: msRest.ServiceCallback<Models.LegalHold>): Promise<Models.BlobContainersSetLegalHoldResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        tags,
        options
      },
      setLegalHoldOperationSpec,
      callback) as Promise<Models.BlobContainersSetLegalHoldResponse>;
  }

  /**
   * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent
   * operation. ClearLegalHold clears out only the specified tags in the request.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case
   * at SRP.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersClearLegalHoldResponse>
   */
  clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersClearLegalHoldResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case
   * at SRP.
   * @param callback The callback
   */
  clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], callback: msRest.ServiceCallback<Models.LegalHold>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param tags Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case
   * at SRP.
   * @param options The optional parameters
   * @param callback The callback
   */
  clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LegalHold>): void;
  clearLegalHold(resourceGroupName: string, accountName: string, containerName: string, tags: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LegalHold>, callback?: msRest.ServiceCallback<Models.LegalHold>): Promise<Models.BlobContainersClearLegalHoldResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        tags,
        options
      },
      clearLegalHoldOperationSpec,
      callback) as Promise<Models.BlobContainersClearLegalHoldResponse>;
  }

  /**
   * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not
   * required for this operation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the
   * container since the policy creation, in days.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersCreateOrUpdateImmutabilityPolicyResponse>
   */
  createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, options?: Models.BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams): Promise<Models.BlobContainersCreateOrUpdateImmutabilityPolicyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the
   * container since the policy creation, in days.
   * @param callback The callback
   */
  createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the
   * container since the policy creation, in days.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, options: Models.BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  createOrUpdateImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, immutabilityPeriodSinceCreationInDays: number, options?: Models.BlobContainersCreateOrUpdateImmutabilityPolicyOptionalParams | msRest.ServiceCallback<Models.ImmutabilityPolicy>, callback?: msRest.ServiceCallback<Models.ImmutabilityPolicy>): Promise<Models.BlobContainersCreateOrUpdateImmutabilityPolicyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        immutabilityPeriodSinceCreationInDays,
        options
      },
      createOrUpdateImmutabilityPolicyOperationSpec,
      callback) as Promise<Models.BlobContainersCreateOrUpdateImmutabilityPolicyResponse>;
  }

  /**
   * Gets the existing immutability policy along with the corresponding ETag in response headers and
   * body.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersGetImmutabilityPolicyResponse>
   */
  getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, options?: Models.BlobContainersGetImmutabilityPolicyOptionalParams): Promise<Models.BlobContainersGetImmutabilityPolicyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param callback The callback
   */
  getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param options The optional parameters
   * @param callback The callback
   */
  getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, options: Models.BlobContainersGetImmutabilityPolicyOptionalParams, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  getImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, options?: Models.BlobContainersGetImmutabilityPolicyOptionalParams | msRest.ServiceCallback<Models.ImmutabilityPolicy>, callback?: msRest.ServiceCallback<Models.ImmutabilityPolicy>): Promise<Models.BlobContainersGetImmutabilityPolicyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        options
      },
      getImmutabilityPolicyOperationSpec,
      callback) as Promise<Models.BlobContainersGetImmutabilityPolicyResponse>;
  }

  /**
   * Aborts an unlocked immutability policy. The response of delete has
   * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation.
   * Deleting a locked immutability policy is not allowed, only way is to delete the container after
   * deleting all blobs inside the container.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersDeleteImmutabilityPolicyResponse>
   */
  deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersDeleteImmutabilityPolicyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param callback The callback
   */
  deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  deleteImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImmutabilityPolicy>, callback?: msRest.ServiceCallback<Models.ImmutabilityPolicy>): Promise<Models.BlobContainersDeleteImmutabilityPolicyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        ifMatch,
        options
      },
      deleteImmutabilityPolicyOperationSpec,
      callback) as Promise<Models.BlobContainersDeleteImmutabilityPolicyResponse>;
  }

  /**
   * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is
   * ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersLockImmutabilityPolicyResponse>
   */
  lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersLockImmutabilityPolicyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param callback The callback
   */
  lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param options The optional parameters
   * @param callback The callback
   */
  lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  lockImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImmutabilityPolicy>, callback?: msRest.ServiceCallback<Models.ImmutabilityPolicy>): Promise<Models.BlobContainersLockImmutabilityPolicyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        ifMatch,
        options
      },
      lockImmutabilityPolicyOperationSpec,
      callback) as Promise<Models.BlobContainersLockImmutabilityPolicyResponse>;
  }

  /**
   * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only
   * action allowed on a Locked policy will be this action. ETag in If-Match is required for this
   * operation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the
   * container since the policy creation, in days.
   * @param [options] The optional parameters
   * @returns Promise<Models.BlobContainersExtendImmutabilityPolicyResponse>
   */
  extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, options?: msRest.RequestOptionsBase): Promise<Models.BlobContainersExtendImmutabilityPolicyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the
   * container since the policy creation, in days.
   * @param callback The callback
   */
  extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param accountName The name of the storage account within the specified resource group. Storage
   * account names must be between 3 and 24 characters in length and use numbers and lower-case
   * letters only.
   * @param containerName The name of the blob container within the specified storage account. Blob
   * container names must be between 3 and 63 characters in length and use numbers, lower-case
   * letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by
   * a letter or number.
   * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of
   * "*" can be used to apply the operation only if the immutability policy already exists. If
   * omitted, this operation will always be applied.
   * @param immutabilityPeriodSinceCreationInDays The immutability period for the blobs in the
   * container since the policy creation, in days.
   * @param options The optional parameters
   * @param callback The callback
   */
  extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImmutabilityPolicy>): void;
  extendImmutabilityPolicy(resourceGroupName: string, accountName: string, containerName: string, ifMatch: string, immutabilityPeriodSinceCreationInDays: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImmutabilityPolicy>, callback?: msRest.ServiceCallback<Models.ImmutabilityPolicy>): Promise<Models.BlobContainersExtendImmutabilityPolicyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        containerName,
        ifMatch,
        immutabilityPeriodSinceCreationInDays,
        options
      },
      extendImmutabilityPolicyOperationSpec,
      callback) as Promise<Models.BlobContainersExtendImmutabilityPolicyResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListContainerItems
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      publicAccess: [
        "options",
        "publicAccess"
      ],
      metadata: [
        "options",
        "metadata"
      ]
    },
    mapper: {
      ...Mappers.BlobContainer,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.BlobContainer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      publicAccess: [
        "options",
        "publicAccess"
      ],
      metadata: [
        "options",
        "metadata"
      ]
    },
    mapper: {
      ...Mappers.BlobContainer,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BlobContainer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BlobContainer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const setLegalHoldOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: "tags"
    },
    mapper: {
      ...Mappers.LegalHold,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LegalHold
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const clearLegalHoldOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: "tags"
    },
    mapper: {
      ...Mappers.LegalHold,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LegalHold
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateImmutabilityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.immutabilityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      immutabilityPeriodSinceCreationInDays: "immutabilityPeriodSinceCreationInDays"
    },
    mapper: Mappers.ImmutabilityPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImmutabilityPolicy,
      headersMapper: Mappers.BlobContainersCreateOrUpdateImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getImmutabilityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.immutabilityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.ifMatch0,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImmutabilityPolicy,
      headersMapper: Mappers.BlobContainersGetImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteImmutabilityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.immutabilityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImmutabilityPolicy,
      headersMapper: Mappers.BlobContainersDeleteImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const lockImmutabilityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ImmutabilityPolicy,
      headersMapper: Mappers.BlobContainersLockImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const extendImmutabilityPolicyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.containerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.ifMatch1,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      immutabilityPeriodSinceCreationInDays: "immutabilityPeriodSinceCreationInDays"
    },
    mapper: Mappers.ImmutabilityPolicy
  },
  responses: {
    200: {
      bodyMapper: Mappers.ImmutabilityPolicy,
      headersMapper: Mappers.BlobContainersExtendImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
